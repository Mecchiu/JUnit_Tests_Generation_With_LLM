[
  {
    "numberTests": "ten",
    "original_code": "// JCLO.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\n\npublic class JCLO {\n\n    /**\n     * Get the current value of the variable in the object\n     *\n     * @param key the variable name\n     * @return an Object with the value\n     */\n    public Object getValue(String key) {\n        Field f \u003d getField(key);\n        if (f \u003d\u003d null) {\n            System.out.println(\"Field not found: \" + key);\n            return (null);\n        }\n        return (getObject(f));\n    }\n}\n",
    "package": "edu.mscd.cs.jclo",
    "classname": "JCLO",
    "id": "/EvoSuiteBenchmark/original/94_jclo/src/main/java/edu/mscd/cs/jclo/JCLO_0Test.java",
    "test_prompt": "// JCLO_0Test.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JCLO}.\n* It contains ten unit test cases for the {@link JCLO#getValue(String)} method.\n*/\nclass JCLO_0Test {",
    "method_signature": "getValue(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JCLO.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\n\npublic class JCLO {\n\n    /**\n     * Create and usage message for the acceptable command line variables.\n     *\n     * @return a String that specifies acceptable options\n     */\n    public String usage() {\n        boolean additional \u003d false;\n        String[] a \u003d new String[fields.length];\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c fields.length; i++) {\n            Field field \u003d fields[i];\n            String key \u003d field.getName();\n            Class type \u003d field.getType();\n            if (key.equals(\"additional\"))\n                continue;\n            if (prefix !\u003d null) {\n                if (!key.startsWith(prefix))\n                    continue;\n                else\n                    key \u003d key.replaceFirst(\"^\" + prefix, \"\");\n            }\n            if (Modifier.isFinal(field.getModifiers()))\n                continue;\n            key \u003d key.replaceFirst(\"^_([0-9])\", \"$1\");\n            key \u003d key.replaceAll(\"__\", \"-\");\n            key \u003d key.replaceAll(\"_\\\\$\", \".\");\n            a[count++] \u003d (doubleDashes ? \"--\" : \"-\") + key + getUsageType(type) + \"\\n\";\n        }\n        String r \u003d \"\";\n        java.util.Arrays.sort(a, 0, count);\n        for (int i \u003d 0; i \u003c a.length; i++) if (a[i] !\u003d null)\n            r +\u003d a[i];\n        return (r);\n    }\n}\n",
    "package": "edu.mscd.cs.jclo",
    "classname": "JCLO",
    "id": "/EvoSuiteBenchmark/original/94_jclo/src/main/java/edu/mscd/cs/jclo/JCLO_1Test.java",
    "test_prompt": "// JCLO_1Test.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JCLO}.\n* It contains ten unit test cases for the {@link JCLO#usage()} method.\n*/\nclass JCLO_1Test {",
    "method_signature": "usage()",
    "suffix": "1"
  }
]