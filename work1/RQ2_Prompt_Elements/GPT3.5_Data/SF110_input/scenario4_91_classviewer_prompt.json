[
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_0Test.java",
    "test_prompt": "// ClassInfo_0Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.\n*/\nclass ClassInfo_0Test {",
    "method_signature": "printFields()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_1Test.java",
    "test_prompt": "// ClassInfo_1Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.\n*/\nclass ClassInfo_1Test {",
    "method_signature": "printMethods()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_2Test.java",
    "test_prompt": "// ClassInfo_2Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.\n*/\nclass ClassInfo_2Test {",
    "method_signature": "printMethods(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_3Test.java",
    "test_prompt": "// ClassInfo_3Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.\n*/\nclass ClassInfo_3Test {",
    "method_signature": "printConstructors()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_4Test.java",
    "test_prompt": "// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.\n*/\nclass ClassInfo_4Test {",
    "method_signature": "printInterfaces()",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_5Test.java",
    "test_prompt": "// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.\n*/\nclass ClassInfo_5Test {",
    "method_signature": "getData(Member[])",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_6Test.java",
    "test_prompt": "// ClassInfo_6Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.\n*/\nclass ClassInfo_6Test {",
    "method_signature": "getData(Class[])",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_7Test.java",
    "test_prompt": "// ClassInfo_7Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.\n*/\nclass ClassInfo_7Test {",
    "method_signature": "srchMethods(String)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c \u003d javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS \u003d 1, NO_INHERITED_METHODS \u003d 2;\n\n    private String[] cMethods, fndMethods \u003d null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_8Test.java",
    "test_prompt": "// ClassInfo_8Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_8Test {",
    "method_signature": "getFoundMethod(int)",
    "suffix": "8"
  }
]