[
  {
    "numberTests": "ten",
    "original_code": "// HttpPreference.java\npackage httpanalyzer;\n\nimport java.util.Properties;\nimport javax.swing.JFrame;\n\n/**\n * @author vlad\n */\npublic class HttpPreference {\n\n    /**\n     * Get values from work form and set properties\n     * Then call method FileUtil.savePreferenceToFile\n     *\n     * @param mainView HttpAnalyzerView\n     * @param parentFrame JFrame\n     * @return String Notes\n     */\n    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame) {\n        Properties properties \u003d new Properties();\n        HttpFileUtils fileUtil \u003d new HttpFileUtils();\n        properties \u003d fileUtil.loadPreferenceFromFile(parentFrame);\n        // Set values\n        mainView.mergeInfoCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.tools.options.merge\")));\n        String workProps \u003d properties.getProperty(\"httpanalyzer.options.proxytype\");\n        if (workProps.equals(\"None\")) {\n            mainView.proxyNoneRadioButton.setSelected(true);\n        } else if (workProps.equals(\"Http\")) {\n            mainView.proxyHttpRadioButton.setSelected(true);\n        } else {\n            mainView.proxySocksRadioButton.setSelected(true);\n        }\n        mainView.proxyField.setText(properties.getProperty(\"httpanalyzer.options.proxy\"));\n        mainView.proxyAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.proxyauth\")));\n        mainView.proxyUserTextField.setText(properties.getProperty(\"httpanalyzer.options.proxyuser\"));\n        mainView.proxyPassPasswordField.setText(properties.getProperty(\"httpanalyzer.options.proxypassword\"));\n        if (properties.getProperty(\"httpanalyzer.options.httpversion\").equals(\"1.1\")) {\n            mainView.httpVersionComboBox.setSelectedIndex(0);\n        } else {\n            mainView.httpVersionComboBox.setSelectedIndex(1);\n        }\n        mainView.httpAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.httpauth\")));\n        mainView.httpUserTextField.setText(properties.getProperty(\"httpanalyzer.options.httpauthuser\"));\n        mainView.httpPassPasswordField.setText(properties.getProperty(\"httpanalyzer.options.httpauthpassword\"));\n        mainView.customRefererCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.customrefer.enable\")));\n        mainView.customRefererTextField.setText(properties.getProperty(\"httpanalyzer.options.customrefer\"));\n        mainView.customCookieCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.customcookie.enable\")));\n        mainView.customCookieTextField.setText(properties.getProperty(\"httpanalyzer.options.customcookie\"));\n        workProps \u003d properties.getProperty(\"httpanalyzer.options.agents\");\n        if (workProps.equals(\"0\")) {\n            mainView.firefoxRadioButton.setSelected(true);\n        } else if (workProps.equals(\"1\")) {\n            mainView.ie6RadioButton.setSelected(true);\n        } else if (workProps.equals(\"2\")) {\n            mainView.ie7RadioButton.setSelected(true);\n        } else if (workProps.equals(\"3\")) {\n            mainView.ie8RadioButton.setSelected(true);\n        } else if (workProps.equals(\"4\")) {\n            mainView.googleBotRadioButton.setSelected(true);\n        } else if (workProps.equals(\"5\")) {\n            mainView.msnRadioButton.setSelected(true);\n        } else if (workProps.equals(\"6\")) {\n            mainView.yahooRadioButton.setSelected(true);\n        } else {\n            mainView.iPhoneRadioButton.setSelected(true);\n        }\n        workProps \u003d properties.getProperty(\"httpanalyzer.options.method\");\n        if (workProps.equals(\"GET\")) {\n            mainView.getRadio.setSelected(true);\n        } else if (workProps.equals(\"POST\")) {\n            mainView.postRadio.setSelected(true);\n        } else {\n            mainView.headRadio.setSelected(true);\n        }\n        mainView.toFileTextField.setText(properties.getProperty(\"httpanalyzer.options.tofile\"));\n        mainView.toFileCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.tofile.enable\")));\n        int ii \u003d Integer.decode(properties.getProperty(\"httpanalyzer.options.urlcombo.elements\"));\n        mainView.urlCombo.removeAllItems();\n        for (int i \u003d 0; i \u003c ii; i++) {\n            String el \u003d properties.getProperty(\"httpanalyzer.options.urlcombo.\" + Integer.toString(i));\n            mainView.urlCombo.addItem(el);\n        }\n        ii \u003d Integer.decode(properties.getProperty(\"httpanalyzer.options.params.elements\"));\n        mainView.paramsComboBox.removeAllItems();\n        for (int i \u003d 0; i \u003c ii; i++) {\n            String el \u003d properties.getProperty(\"httpanalyzer.options.params.\" + Integer.toString(i));\n            mainView.paramsComboBox.addItem(el);\n        }\n        mainView.customHeaders.setText(properties.getProperty(\"httpanalyzer.options.custom.headers\"));\n        mainView.useCustomHeadersCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.usecustom.headers\")));\n        mainView.intelSaveCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.intelligencemode\")));\n        return properties.getProperty(\"httpanalyzer.notes\");\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpPreference",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpPreference.java",
    "test_prompt": "// HttpPreferenceTest.java\npackage httpanalyzer;\n\nimport java.util.Properties;\nimport javax.swing.JFrame;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpPreference}.\n* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.\n*/\nclass HttpPreferenceTest {",
    "method_signature": "loadPreference(HttpAnalyzerView, JFrame)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ParamsUrlTools.java\npackage httpanalyzer;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.message.BasicNameValuePair;\n\n/**\n * @author vlad\n */\npublic class ParamsUrlTools {\n\n    /**\n     * Transform long String line with parameters\n     * to List (key, value)\n     *\n     * @param params String\n     * @return List\u003cNameValuePair\u003e\n     */\n    public List\u003cNameValuePair\u003e getPairParams(String params) {\n        String[] requestParams \u003d params.split(\"\u0026\");\n        List\u003cNameValuePair\u003e nvps \u003d new ArrayList\u003cNameValuePair\u003e();\n        for (int i \u003d 0; i \u003c requestParams.length; i++) {\n            String workVal \u003d requestParams[i];\n            System.out.println(\"Val \u003d\" + workVal + \"\u003d\");\n            if (!workVal.isEmpty()) {\n                int f_index \u003d requestParams[i].indexOf(\"\u003d\");\n                String key \u003d requestParams[i].substring(0, f_index);\n                String val \u003d requestParams[i].substring(f_index + 1);\n                //System.out.println(\"i\u003d\"+i+\", string\u003d\"+requestParams[i]);\n                System.out.println(\"key \u003d \" + key + \", val\u003d\" + val);\n                nvps.add(new BasicNameValuePair(key, val));\n            }\n        }\n        System.out.println(\"\");\n        return nvps;\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "ParamsUrlTools",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools.java",
    "test_prompt": "// ParamsUrlToolsTest.java\npackage httpanalyzer;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParamsUrlTools}.\n* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.\n*/\nclass ParamsUrlToolsTest {",
    "method_signature": "getPairParams(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HttpAnalyzerApp.java\npackage httpanalyzer;\n\nimport org.jdesktop.application.Application;\nimport org.jdesktop.application.SingleFrameApplication;\n\n/**\n * The main class of the application.\n */\npublic class HttpAnalyzerApp extends SingleFrameApplication {\n\n    /**\n     * A convenient static getter for the application instance.\n     *\n     * @return the instance of HttpAnalyzerApp\n     */\n    public static HttpAnalyzerApp getApplication() {\n        return Application.getInstance(HttpAnalyzerApp.class);\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpAnalyzerApp",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpAnalyzerApp.java",
    "test_prompt": "// HttpAnalyzerAppTest.java\npackage httpanalyzer;\n\nimport org.jdesktop.application.Application;\nimport org.jdesktop.application.SingleFrameApplication;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpAnalyzerApp}.\n* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.\n*/\nclass HttpAnalyzerAppTest {",
    "method_signature": "getApplication()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HeaderSettings.java\npackage httpanalyzer;\n\nimport org.apache.http.Header;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\n\n/**\n * @author vlad\n */\npublic class HeaderSettings {\n\n    /**\n     * Send all internal headers\n     */\n    public static Header[] setHeaders() {\n        return headersSet;\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HeaderSettings",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HeaderSettings.java",
    "test_prompt": "// HeaderSettingsTest.java\npackage httpanalyzer;\n\nimport org.apache.http.Header;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HeaderSettings}.\n* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.\n*/\nclass HeaderSettingsTest {",
    "method_signature": "setHeaders()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HttpFileUtils.java\npackage httpanalyzer;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.RandomAccessFile;\nimport java.util.Calendar;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport org.apache.http.HttpEntity;\n\n/**\n * @author vlad\n */\npublic class HttpFileUtils {\n\n    /**\n     * Save Http entity to file\n     *\n     * @param entity HttpEntity\n     * @param fileName String\n     */\n    public long saveEntity(HttpEntity entity, String fileName) {\n        long size \u003d 0L;\n        File file \u003d new File(fileName);\n        byte[] buffer \u003d new byte[MAX_BUFFER_SIZE];\n        // Read from server into buffer.\n        InputStream streamEntity;\n        RandomAccessFile outFile;\n        try {\n            streamEntity \u003d entity.getContent();\n            outFile \u003d new RandomAccessFile(file, \"rw\");\n            int read \u003d 0;\n            // Rewrite file\n            outFile.setLength(0);\n            System.out.println(\"Buffer size \u003d\" + buffer.length);\n            while ((read \u003d streamEntity.read(buffer)) !\u003d -1) {\n                size \u003d size + read;\n                // Write buffer to file\n                outFile.write(buffer, 0, read);\n            }\n            outFile.close();\n            streamEntity.close();\n        } catch (IOException ex) {\n            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalStateException ex) {\n            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return size;\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpFileUtils",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils.java",
    "test_prompt": "// HttpFileUtilsTest.java\npackage httpanalyzer;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.RandomAccessFile;\nimport java.util.Calendar;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport org.apache.http.HttpEntity;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpFileUtils}.\n* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.\n*/\nclass HttpFileUtilsTest {",
    "method_signature": "saveEntity(HttpEntity, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Password.java\npackage httpanalyzer;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * @author David Scott\n */\npublic class Password {\n\n    /**\n     * Returns a String containing the encrypted passwd\n     *\n     * @param strpw A String containing the un-encrypted password\n     * @param strsalt A 2 character String, containing the salt to\n     * \t\t\t\tencrypt the password with.\n     * @returns String containing encrypted password.\n     */\n    public static String crypt(String strpw, String strsalt) {\n        char[] pw \u003d strpw.toCharArray();\n        char[] salt \u003d strsalt.toCharArray();\n        byte[] pwb \u003d new byte[66];\n        char[] result \u003d new char[13];\n        byte[] new_etr \u003d new byte[etr.length];\n        int n \u003d 0;\n        int m \u003d 0;\n        while (m \u003c pw.length \u0026\u0026 n \u003c 64) {\n            for (int j \u003d 6; j \u003e\u003d 0; j--) {\n                pwb[n++] \u003d (byte) ((pw[m] \u003e\u003e j) \u0026 1);\n            }\n            // Increment pw\n            m++;\n            pwb[n++] \u003d 0;\n        }\n        while (n \u003c 64) {\n            pwb[n++] \u003d 0;\n        }\n        definekey(pwb);\n        for (n \u003d 0; n \u003c 66; n++) {\n            pwb[n] \u003d 0;\n        }\n        System.arraycopy(etr, 0, new_etr, 0, new_etr.length);\n        EP \u003d new_etr;\n        for (int i \u003d 0; i \u003c 2; i++) {\n            char c \u003d salt[i];\n            result[i] \u003d c;\n            if (c \u003e \u0027Z\u0027) {\n                // c was a lowercase letter\n                c -\u003d 6 + 7 + \u0027.\u0027;\n            } else if (c \u003e \u00279\u0027) {\n                // c was a uppercase letter\n                c -\u003d 7 + \u0027.\u0027;\n            } else {\n                // c was a digit, \u0027.\u0027 or \u0027/\u0027\n                c -\u003d \u0027.\u0027;\n            }\n            // now, 0 \u003c\u003d c \u003c\u003d 63\n            for (int j \u003d 0; j \u003c 6; j++) {\n                if (((c \u003e\u003e j) \u0026 1) \u003d\u003d 1) {\n                    byte t \u003d (byte) (6 * i + j);\n                    byte temp \u003d new_etr[t];\n                    new_etr[t] \u003d new_etr[t + 24];\n                    new_etr[t + 24] \u003d temp;\n                }\n            }\n        }\n        if (result[1] \u003d\u003d 0) {\n            result[1] \u003d result[0];\n        }\n        for (int i \u003d 0; i \u003c 25; i++) {\n            encrypt(pwb, 0);\n        }\n        EP \u003d etr;\n        m \u003d 2;\n        n \u003d 0;\n        while (n \u003c 66) {\n            int c \u003d 0;\n            for (int j \u003d 6; j \u003e 0; j--) {\n                c \u003c\u003c\u003d 1;\n                c |\u003d pwb[n++];\n            }\n            // becomes \u003e\u003d \u0027.\u0027\n            c +\u003d \u0027.\u0027;\n            if (c \u003e \u00279\u0027) {\n                // not in [./0-9], becomes upper\n                c +\u003d 7;\n            }\n            if (c \u003e \u0027Z\u0027) {\n                // not in [A-Z], becomes lower\n                c +\u003d 6;\n            }\n            result[m++] \u003d (char) c;\n        }\n        return (new String(result));\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "Password",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/Password.java",
    "test_prompt": "// PasswordTest.java\npackage httpanalyzer;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Password}.\n* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.\n*/\nclass PasswordTest {",
    "method_signature": "crypt(String, String)",
    "suffix": ""
  }
]