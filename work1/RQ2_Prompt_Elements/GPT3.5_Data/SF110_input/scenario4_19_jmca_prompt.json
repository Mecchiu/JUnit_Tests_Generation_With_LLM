[
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     * data of the node\n     */\n    String type \u003d null;\n\n    String identity \u003d null;\n\n    /**\n     * implements Comparable\n     * @param node Object\n     * @return int values 0 for same and 1 for different\n     */\n    public int compareTo(Object node);\n\n    java.util.ArrayList\u003cASTNode\u003e list \u003d new java.util.ArrayList\u003cASTNode\u003e();\n\n    /**\n     * parent of the node\n     */\n    ASTNode parent \u003d null;\n\n    /**\n     * add child to node\n     * @param node ASTNode\n     */\n    public void addChild(ASTNode node);\n\n    /**\n     * default constructor\n     */\n    public ASTNode() {\n    }\n\n    /**\n     * construct a  node and set its parent\n     * @param p ASTNode\n     */\n    public ASTNode(ASTNode p) {\n    }\n\n    /**\n     * construct a node and set data types and parent\n     * @param type String\n     * @param identity String\n     * @param p ASTNode\n     */\n    public ASTNode(String type, String identity, ASTNode p) {\n    }\n\n    /**\n     * get the parent node\n     * @return ASTNode\n     */\n    public ASTNode getParent();\n\n    /**\n     * set the data element type\n     * @param t String\n     */\n    public void setType(String t);\n\n    /**\n     * set the data type identity\n     * @param id String\n     */\n    public void setIdentity(String id);\n\n    /**\n     * get the data element type\n     * @return String\n     */\n    public String getType();\n\n    /**\n     * get the data element identity\n     * @return String\n     */\n    public String getIdentity();\n\n    /**\n     * concat type and identity\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * display this node and all its children recursively\n     * @param wtr Writer\n     */\n    public void display(Writer wtr);\n\n    /**\n     *  reads the node in from a file\n     * @param filename String\n     * @return ASTNode\n     */\n    public static ASTNode getTree(String filename);\n\n    /**\n     * save the node and its children to disk\n     * @param filename String\n     */\n    public void dump(String filename);\n\n    /**\n     * add this node and recursively all its children to a swing tree structure \u003cbr\u003e\n     * used to construct a JTree with the ASTree\n     * @return DefaultMutableTreeNode\n     */\n    public DefaultMutableTreeNode createTree();\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_0Test.java",
    "test_prompt": "// ASTNode_0Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#compareTo(Object)} method.\n*/\nclass ASTNode_0Test {",
    "method_signature": "compareTo(Object)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     * data of the node\n     */\n    String type \u003d null;\n\n    String identity \u003d null;\n\n    /**\n     * implements Comparable\n     * @param node Object\n     * @return int values 0 for same and 1 for different\n     */\n    public int compareTo(Object node);\n\n    java.util.ArrayList\u003cASTNode\u003e list \u003d new java.util.ArrayList\u003cASTNode\u003e();\n\n    /**\n     * parent of the node\n     */\n    ASTNode parent \u003d null;\n\n    /**\n     * add child to node\n     * @param node ASTNode\n     */\n    public void addChild(ASTNode node);\n\n    /**\n     * default constructor\n     */\n    public ASTNode() {\n    }\n\n    /**\n     * construct a  node and set its parent\n     * @param p ASTNode\n     */\n    public ASTNode(ASTNode p) {\n    }\n\n    /**\n     * construct a node and set data types and parent\n     * @param type String\n     * @param identity String\n     * @param p ASTNode\n     */\n    public ASTNode(String type, String identity, ASTNode p) {\n    }\n\n    /**\n     * get the parent node\n     * @return ASTNode\n     */\n    public ASTNode getParent();\n\n    /**\n     * set the data element type\n     * @param t String\n     */\n    public void setType(String t);\n\n    /**\n     * set the data type identity\n     * @param id String\n     */\n    public void setIdentity(String id);\n\n    /**\n     * get the data element type\n     * @return String\n     */\n    public String getType();\n\n    /**\n     * get the data element identity\n     * @return String\n     */\n    public String getIdentity();\n\n    /**\n     * concat type and identity\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * display this node and all its children recursively\n     * @param wtr Writer\n     */\n    public void display(Writer wtr);\n\n    /**\n     *  reads the node in from a file\n     * @param filename String\n     * @return ASTNode\n     */\n    public static ASTNode getTree(String filename);\n\n    /**\n     * save the node and its children to disk\n     * @param filename String\n     */\n    public void dump(String filename);\n\n    /**\n     * add this node and recursively all its children to a swing tree structure \u003cbr\u003e\n     * used to construct a JTree with the ASTree\n     * @return DefaultMutableTreeNode\n     */\n    public DefaultMutableTreeNode createTree();\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_1Test.java",
    "test_prompt": "// ASTNode_1Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.\n*/\nclass ASTNode_1Test {",
    "method_signature": "getTree(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     * data of the node\n     */\n    String type \u003d null;\n\n    String identity \u003d null;\n\n    /**\n     * implements Comparable\n     * @param node Object\n     * @return int values 0 for same and 1 for different\n     */\n    public int compareTo(Object node);\n\n    java.util.ArrayList\u003cASTNode\u003e list \u003d new java.util.ArrayList\u003cASTNode\u003e();\n\n    /**\n     * parent of the node\n     */\n    ASTNode parent \u003d null;\n\n    /**\n     * add child to node\n     * @param node ASTNode\n     */\n    public void addChild(ASTNode node);\n\n    /**\n     * default constructor\n     */\n    public ASTNode() {\n    }\n\n    /**\n     * construct a  node and set its parent\n     * @param p ASTNode\n     */\n    public ASTNode(ASTNode p) {\n    }\n\n    /**\n     * construct a node and set data types and parent\n     * @param type String\n     * @param identity String\n     * @param p ASTNode\n     */\n    public ASTNode(String type, String identity, ASTNode p) {\n    }\n\n    /**\n     * get the parent node\n     * @return ASTNode\n     */\n    public ASTNode getParent();\n\n    /**\n     * set the data element type\n     * @param t String\n     */\n    public void setType(String t);\n\n    /**\n     * set the data type identity\n     * @param id String\n     */\n    public void setIdentity(String id);\n\n    /**\n     * get the data element type\n     * @return String\n     */\n    public String getType();\n\n    /**\n     * get the data element identity\n     * @return String\n     */\n    public String getIdentity();\n\n    /**\n     * concat type and identity\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * display this node and all its children recursively\n     * @param wtr Writer\n     */\n    public void display(Writer wtr);\n\n    /**\n     *  reads the node in from a file\n     * @param filename String\n     * @return ASTNode\n     */\n    public static ASTNode getTree(String filename);\n\n    /**\n     * save the node and its children to disk\n     * @param filename String\n     */\n    public void dump(String filename);\n\n    /**\n     * add this node and recursively all its children to a swing tree structure \u003cbr\u003e\n     * used to construct a JTree with the ASTree\n     * @return DefaultMutableTreeNode\n     */\n    public DefaultMutableTreeNode createTree();\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_2Test.java",
    "test_prompt": "// ASTNode_2Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#createTree()} method.\n*/\nclass ASTNode_2Test {",
    "method_signature": "createTree()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JMCAParser.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.io.Reader;\nimport com.soops.CEN4010.JMCA.JParser.JavaParser;\nimport java.io.IOException;\nimport java.io.FileWriter;\nimport java.io.Writer;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;\nimport com.soops.CEN4010.JMCA.JParser.ParseException;\n\npublic class JMCAParser implements Parser {\n\n    String intermediateFile \u003d \"default.xml\";\n\n    /**\n     * parse implements parse for Parser\n     * precondition is the intermediatFile is set\n     * @param rdr Reader\n     * @return ASTNode\n     */\n    public ASTNode parse(Reader rdr);\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "JMCAParser",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAParser.java",
    "test_prompt": "// JMCAParserTest.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.io.Reader;\nimport com.soops.CEN4010.JMCA.JParser.JavaParser;\nimport java.io.IOException;\nimport java.io.FileWriter;\nimport java.io.Writer;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;\nimport com.soops.CEN4010.JMCA.JParser.ParseException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JMCAParser}.\n* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.\n*/\nclass JMCAParserTest {",
    "method_signature": "parse(Reader)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// UILayoutDisplayAnalyzer.java\npackage com.soops.CEN4010.JMCA;\n\n/**\n * \u003cp\u003eTitle: Group 2 Project \u003c/p\u003e\n *\n * \u003cp\u003eClass: CEN4010 Fall 2005\u003c/p\u003e\n *\n * \u003cp\u003eDescription: Description: UILayoutDisplayAnalyzer implements a dummy Analyzer\n *    use for UI layout  \u003c/p\u003e\n *\n * \u003cp\u003eInstructor Dr. Stoeklin\u003c/p\u003e\n *\n * @author Group 2\n */\npublic class UILayoutDisplayAnalyzer implements Analyzer {\n\n    String filename \u003d null;\n\n    /**\n     * store the file name for formatted display purposes\n     * @param file String\n     */\n    public void setFileName(String file);\n\n    /**\n     * no operational implementation of Analyzer\n     * @param dummy ASTNode not used for dummy output\n     * @return display string\n     */\n    public String analyze(ASTNode dummy);\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "UILayoutDisplayAnalyzer",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/UILayoutDisplayAnalyzer.java",
    "test_prompt": "// UILayoutDisplayAnalyzerTest.java\npackage com.soops.CEN4010.JMCA;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UILayoutDisplayAnalyzer}.\n* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.\n*/\nclass UILayoutDisplayAnalyzerTest {",
    "method_signature": "analyze(ASTNode)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// JMCAAnalyzer.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.*;\n\n/**\n * \u003cp\u003eTitle: JMCAAnalyzer \u003c/p\u003e\n *\n * \u003cp\u003eDescription: implements Analyzer\u003c/p\u003e\n *\n * Group2 for CEN4010 at FSU - Fall 2005\n */\npublic class JMCAAnalyzer implements Analyzer {\n\n    private String fileName \u003d \"\";\n\n    private StringBuilder output \u003d new StringBuilder();\n\n    private java.util.HashSet\u003cString\u003e classList \u003d null;\n\n    private static final boolean DEVELOPMENT \u003d false;\n\n    /**\n     * Analyze the ASTree and return a formatted string\n     * @param root ASTNode\n     * @return String\n     */\n    public String analyze(ASTNode root);\n\n    /**\n     * top level analyzer for each class \u003cbr\u003e\n     * calls analyzeMethod for each method\n     * @param node ASTNode\n     */\n    private void analyzeClass(ASTNode node);\n\n    /**\n     * called for each method\n     * @param node ASTNode\n     */\n    private void analyzeMethod(ASTNode node);\n\n    /**\n     * recursive method to create a chain of modifiers to a variable \u003cb\u003e\n     * using this method then :   a \u003d b + c;  d \u003d a;  e \u003d d; \u003cbr\u003e\n     *   e would contain both d and a as modifiers it is dependent on\n     * @param stE StatementElement\n     * @param list ArrayList\n     */\n    private void createArrayListOfModifiers(StatementElement stE, ArrayList\u003cString\u003e list);\n\n    /**\n     * recusive method to analyze statements\n     * @param parentNode ASTNode\n     * @param statementList ArrayList\n     * @param isInSelection boolean\n     * @param isInIteration boolean\n     */\n    private void statements(ASTNode parentNode, ArrayList\u003cStatementDS\u003e statementList, boolean isInSelection, boolean isInIteration);\n\n    /**\n     * called for each statement\n     * @param node ASTNode\n     * @return StatementDS\n     */\n    private StatementDS analyzeStatement(ASTNode node);\n\n    /**\n     * called from analyzeStatement - gets a list of RVals in assignment statements\n     * @param locDS StatementDS\n     * @param ctr int\n     * @param list ArrayList\n     */\n    private void getRVals(StatementDS locDS, int ctr, ArrayList\u003cASTNode\u003e list);\n\n    /**\n     * helper function - checks for delimiters in a equation where delimiters \u003cbr\u003e\n     * are defined as arithmetic operands such as \u0027+\u0027 and \u0027-\u0027\n     * @param id String\n     * @return boolean\n     */\n    private boolean isOperator(String id);\n\n    /**\n     * gets the variable name for the lVal of an expression\n     * @param ctr int\n     * @param list ArrayList\n     * @return int\n     */\n    private int getLVal(int ctr, ArrayList\u003cASTNode\u003e list);\n\n    /**\n     * write the report header to output\n     */\n    private void setHeader();\n\n    /**\n     * Store the file name parsed for formatted display purposes\n     * @param fileName String\n     */\n    public void setFileName(String fileName);\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "JMCAAnalyzer",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAAnalyzer.java",
    "test_prompt": "// JMCAAnalyzerTest.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JMCAAnalyzer}.\n* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.\n*/\nclass JMCAAnalyzerTest {",
    "method_signature": "analyze(ASTNode)",
    "suffix": ""
  }
]