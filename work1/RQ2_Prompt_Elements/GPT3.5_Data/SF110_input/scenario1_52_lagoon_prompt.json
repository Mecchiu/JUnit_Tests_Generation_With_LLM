[
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream store(String pathname) throws FTPException, IOException {\n        return store(pathname, false);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_0Test.java",
    "test_prompt": "// FTPClient_0Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#store(String)} method.\n*/\nclass FTPClient_0Test {",
    "method_signature": "store(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream store(String pathname, boolean last) throws FTPException, IOException {\n        int pos \u003d pathname.lastIndexOf(\u0027/\u0027);\n        String path \u003d pathname.substring(0, pos + 1);\n        String filename \u003d pathname.substring(pos + 1);\n        changeDir(path);\n        return upload(\"STOR\", filename, last);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_1Test.java",
    "test_prompt": "// FTPClient_1Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#store(String, boolean)} method.\n*/\nclass FTPClient_1Test {",
    "method_signature": "store(String, boolean)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream append(String pathname) throws FTPException, IOException {\n        return append(pathname, false);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_2Test.java",
    "test_prompt": "// FTPClient_2Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#append(String)} method.\n*/\nclass FTPClient_2Test {",
    "method_signature": "append(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream append(String pathname, boolean last) throws FTPException, IOException {\n        int pos \u003d pathname.lastIndexOf(\u0027/\u0027);\n        String path \u003d pathname.substring(0, pos + 1);\n        String filename \u003d pathname.substring(pos + 1);\n        changeDir(path);\n        return upload(\"APPE\", filename, last);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_3Test.java",
    "test_prompt": "// FTPClient_3Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#append(String, boolean)} method.\n*/\nclass FTPClient_3Test {",
    "method_signature": "append(String, boolean)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream storeUnique(String path) throws FTPException, IOException {\n        return storeUnique(path, false);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_4Test.java",
    "test_prompt": "// FTPClient_4Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#storeUnique(String)} method.\n*/\nclass FTPClient_4Test {",
    "method_signature": "storeUnique(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public OutputStream storeUnique(String path, boolean last) throws FTPException, IOException {\n        changeDir(path);\n        return upload(\"STOU\", null, last);\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_5Test.java",
    "test_prompt": "// FTPClient_5Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#storeUnique(String, boolean)} method.\n*/\nclass FTPClient_5Test {",
    "method_signature": "storeUnique(String, boolean)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPClient.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\n\n/**\n * An FTP client. See RFC-959.\n *\n * Pathnames must be specified using \u0027/\u0027 for directory separator.\n * Passive mode will be used for all transfers.\n * \u003cem\u003eNot\u003c/em\u003e thread-safe, i.e. you cannot start a new file while another one is in\n * progress.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPClient {\n\n    public boolean deleteFile(String pathname) throws FTPException, IOException {\n        String path;\n        String fn;\n        int pos \u003d pathname.lastIndexOf(\u0027/\u0027);\n        path \u003d pathname.substring(0, pos + 1);\n        fn \u003d pathname.substring(pos + 1);\n        if (!path.equals(lastPath)) {\n            // change directory\n            for (int i \u003d 0; i \u003c lastPathLen; i++) if (!cdup())\n                throw new FTPException(\"Unable to change to parent directory\");\n            lastPathLen \u003d 0;\n            int oldPos \u003d 1;\n            while (true) {\n                pos \u003d path.indexOf(\u0027/\u0027, oldPos);\n                if (pos \u003c 0)\n                    break;\n                lastPathLen++;\n                String comp \u003d path.substring(oldPos, pos);\n                if (!chdir(comp)) {\n                    // file doesn\u0027t exist\n                    return false;\n                }\n                oldPos \u003d pos + 1;\n            }\n        }\n        lastPath \u003d path;\n        sendLine(\"DELE \" + fn);\n        int resp \u003d recvResponse();\n        switch(resp) {\n            case 250:\n                return true;\n            case 550:\n                return false;\n            case 450:\n                throw new FTPException(\"Unable to delete file: \" + respString);\n            case 421:\n                throw new FTPException(\"FTP server not avaliable (421)\");\n            default:\n                throw new FTPException(\"Unexpected response from FTP server: \" + respString);\n        }\n    }\n}\n",
    "package": "nu.staldal.ftp",
    "classname": "FTPClient",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/ftp/FTPClient_6Test.java",
    "test_prompt": "// FTPClient_6Test.java\npackage nu.staldal.ftp;\n\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPClient}.\n* It contains ten unit test cases for the {@link FTPClient#deleteFile(String)} method.\n*/\nclass FTPClient_6Test {",
    "method_signature": "deleteFile(String)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// LagoonProcessor.java\npackage nu.staldal.lagoon.core;\n\nimport java.io.*;\nimport java.util.*;\nimport nu.staldal.xtree.*;\nimport nu.staldal.util.Utils;\n\n/**\n * The main worker class of the Lagoon core.\n *\n * Initialized with the sitemap,\n * a source dir and a target storage URL.\n * Then building the website may be done several times,\n * until destroy() is invoked.\n *\n * This class is not thread-safe. The methods must not\n * be invoked concurrently from different threads.\n */\npublic class LagoonProcessor implements LagoonContext {\n\n    public boolean build(boolean force) throws IOException {\n        boolean success \u003d true;\n        for (Enumeration e \u003d sitemap.getEntries(); e.hasMoreElements(); ) {\n            SitemapEntry ent \u003d (SitemapEntry) e.nextElement();\n            ent.beforeBuild(force);\n        }\n        for (Enumeration e \u003d sitemap.getEntries(); e.hasMoreElements(); ) {\n            SitemapEntry ent \u003d (SitemapEntry) e.nextElement();\n            if (!ent.build(force))\n                success \u003d false;\n        }\n        for (Enumeration e \u003d sitemap.getEntries(); e.hasMoreElements(); ) {\n            SitemapEntry ent \u003d (SitemapEntry) e.nextElement();\n            ent.afterBuild(force);\n        }\n        return success;\n    }\n}\n",
    "package": "nu.staldal.lagoon.core",
    "classname": "LagoonProcessor",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/core/LagoonProcessor.java",
    "test_prompt": "// LagoonProcessorTest.java\npackage nu.staldal.lagoon.core;\n\nimport java.io.*;\nimport java.util.*;\nimport nu.staldal.xtree.*;\nimport nu.staldal.util.Utils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LagoonProcessor}.\n* It contains ten unit test cases for the {@link LagoonProcessor#build(boolean)} method.\n*/\nclass LagoonProcessorTest {",
    "method_signature": "build(boolean)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Wildcard.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\n\n/**\n * Wildcard processing methods. All methods in this class are static.\n *\n * A wildcard pattern consists of one or more simple patterns, separated by \u0027;\u0027.\n * A simple pattern may contain one \u0027*\u0027 which match any string\n * (including the empty string).\n */\npublic final class Wildcard {\n\n    public static boolean isWildcard(String pattern) {\n        return (pattern.indexOf(\u0027*\u0027) \u003e\u003d 0) || (pattern.indexOf(\u0027;\u0027) \u003e\u003d 0);\n    }\n}\n",
    "package": "nu.staldal.lagoon.util",
    "classname": "Wildcard",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/util/Wildcard_0Test.java",
    "test_prompt": "// Wildcard_0Test.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Wildcard}.\n* It contains ten unit test cases for the {@link Wildcard#isWildcard(String)} method.\n*/\nclass Wildcard_0Test {",
    "method_signature": "isWildcard(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Wildcard.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\n\n/**\n * Wildcard processing methods. All methods in this class are static.\n *\n * A wildcard pattern consists of one or more simple patterns, separated by \u0027;\u0027.\n * A simple pattern may contain one \u0027*\u0027 which match any string\n * (including the empty string).\n */\npublic final class Wildcard {\n\n    public static String matchWildcard(String pattern, String filename) {\n        StringTokenizer st \u003d new StringTokenizer(pattern, \";\");\n        while (st.hasMoreTokens()) {\n            String pat \u003d st.nextToken();\n            int star \u003d pat.indexOf(\u0027*\u0027);\n            if (star \u003c 0) {\n                if (pat.equals(filename))\n                    return \"\";\n            } else {\n                if (!filename.startsWith(pat.substring(0, star)))\n                    continue;\n                if (!filename.endsWith(pat.substring(star + 1)))\n                    continue;\n                return filename.substring(star, star + filename.length() - pat.length() + 1);\n            }\n        }\n        return null;\n    }\n}\n",
    "package": "nu.staldal.lagoon.util",
    "classname": "Wildcard",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/util/Wildcard_1Test.java",
    "test_prompt": "// Wildcard_1Test.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Wildcard}.\n* It contains ten unit test cases for the {@link Wildcard#matchWildcard(String, String)} method.\n*/\nclass Wildcard_1Test {",
    "method_signature": "matchWildcard(String, String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Wildcard.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\n\n/**\n * Wildcard processing methods. All methods in this class are static.\n *\n * A wildcard pattern consists of one or more simple patterns, separated by \u0027;\u0027.\n * A simple pattern may contain one \u0027*\u0027 which match any string\n * (including the empty string).\n */\npublic final class Wildcard {\n\n    public static String instantiateWildcard(String pattern, String part) {\n        int star \u003d pattern.indexOf(\u0027*\u0027);\n        if (star \u003c 0)\n            return pattern;\n        return pattern.substring(0, star) + part + pattern.substring(star + 1);\n    }\n}\n",
    "package": "nu.staldal.lagoon.util",
    "classname": "Wildcard",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/util/Wildcard_2Test.java",
    "test_prompt": "// Wildcard_2Test.java\npackage nu.staldal.lagoon.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Wildcard}.\n* It contains ten unit test cases for the {@link Wildcard#instantiateWildcard(String, String)} method.\n*/\nclass Wildcard_2Test {",
    "method_signature": "instantiateWildcard(String, String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFileStorage.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport java.net.*;\nimport nu.staldal.lagoon.core.*;\nimport nu.staldal.ftp.*;\n\n/**\n * A FileStorage which transfers files to a remote site using FTP.\n *\n * \u003cstrong\u003eNote:\u003c/strong\u003e This class will transmit password in clear text over\n * the network.\n */\npublic class FTPFileStorage extends RemoteFileStorage {\n\n    public OutputHandler createFile(String pathname) throws IOException {\n        OutputStream os;\n        try {\n            os \u003d ftp.store(pathname);\n        } catch (IOException e) {\n            if (DEBUG)\n                System.out.println(\"FTP reconnecting: \" + e.toString());\n            try {\n                ftp.close();\n            } catch (IOException ignore) {\n            }\n            ftp \u003d new FTPClient(url, password);\n            os \u003d ftp.store(pathname);\n        }\n        return new FTPOutputHandler(pathname, os);\n    }\n}\n",
    "package": "nu.staldal.lagoon.filestorage",
    "classname": "FTPFileStorage",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/filestorage/FTPFileStorage.java",
    "test_prompt": "// FTPFileStorageTest.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport java.net.*;\nimport nu.staldal.lagoon.core.*;\nimport nu.staldal.ftp.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFileStorage}.\n* It contains ten unit test cases for the {@link FTPFileStorage#createFile(String)} method.\n*/\nclass FTPFileStorageTest {",
    "method_signature": "createFile(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SSHFileStorage.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport nu.staldal.lagoon.core.FileStorage;\nimport nu.staldal.lagoon.core.OutputHandler;\nimport nu.staldal.lagoon.core.RemoteFileStorage;\nimport nu.staldal.lagoon.core.LagoonContext;\n\n/**\n * A FileStorage which transfers files to a remote site using SSH.\n */\npublic class SSHFileStorage extends RemoteFileStorage {\n\n    public OutputHandler createFile(String path) throws java.io.IOException {\n        String currentPath \u003d path;\n        String s \u003d rootPath + path;\n        int i \u003d s.lastIndexOf(\u0027/\u0027);\n        String dir \u003d (i \u003c 0) ? \".\" : s.substring(0, i);\n        if (DEBUG)\n            System.out.println(\"dir: \" + dir);\n        Process currentProc \u003d runSSH(new String[] { \"mkdir\", \"-p\", dir, \"\u0026\u0026\", \"rm\", \"-f\", rootPath + path, \"\u0026\u0026\", \"cat\", \"\u003e\" + rootPath + path });\n        return new SSHOutputHandler(currentPath, currentProc, currentProc.getOutputStream());\n    }\n}\n",
    "package": "nu.staldal.lagoon.filestorage",
    "classname": "SSHFileStorage",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/filestorage/SSHFileStorage.java",
    "test_prompt": "// SSHFileStorageTest.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport nu.staldal.lagoon.core.FileStorage;\nimport nu.staldal.lagoon.core.OutputHandler;\nimport nu.staldal.lagoon.core.RemoteFileStorage;\nimport nu.staldal.lagoon.core.LagoonContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHFileStorage}.\n* It contains ten unit test cases for the {@link SSHFileStorage#createFile(String)} method.\n*/\nclass SSHFileStorageTest {",
    "method_signature": "createFile(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LocalFileStorage.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport nu.staldal.lagoon.core.*;\n\n/**\n * A FileStorage using the local file system.\n */\npublic class LocalFileStorage implements FileStorage {\n\n    public long fileLastModified(String path) // throws java.io.IOException\n    {\n        File file \u003d root;\n        int oldPos \u003d 1;\n        int pos;\n        while (true) {\n            pos \u003d path.indexOf(\u0027/\u0027, oldPos);\n            if (pos \u003c 0)\n                break;\n            String comp \u003d path.substring(oldPos, pos);\n            file \u003d new File(file, comp);\n            if (!file.exists())\n                return 0;\n            oldPos \u003d pos + 1;\n        }\n        file \u003d new File(file, path.substring(oldPos));\n        return file.lastModified();\n    }\n}\n",
    "package": "nu.staldal.lagoon.filestorage",
    "classname": "LocalFileStorage",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/lagoon/filestorage/LocalFileStorage.java",
    "test_prompt": "// LocalFileStorageTest.java\npackage nu.staldal.lagoon.filestorage;\n\nimport java.io.*;\nimport nu.staldal.lagoon.core.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LocalFileStorage}.\n* It contains ten unit test cases for the {@link LocalFileStorage#fileLastModified(String)} method.\n*/\nclass LocalFileStorageTest {",
    "method_signature": "fileLastModified(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public int lookupAttribute(String namespaceURI, String localName) {\n        return attrName.indexOf(localName + \u0027^\u0027 + namespaceURI);\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_0Test.java",
    "test_prompt": "// Element_0Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#lookupAttribute(String, String)} method.\n*/\nclass Element_0Test {",
    "method_signature": "lookupAttribute(String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public int numberOfAttributes() {\n        return attrName.size();\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_1Test.java",
    "test_prompt": "// Element_1Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#numberOfAttributes()} method.\n*/\nclass Element_1Test {",
    "method_signature": "numberOfAttributes()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public String getAttributeNamespaceURI(int index) throws IndexOutOfBoundsException {\n        if (index \u003d\u003d -1)\n            return null;\n        String s \u003d (String) attrName.elementAt(index);\n        return s.substring(s.indexOf(\u0027^\u0027) + 1);\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_2Test.java",
    "test_prompt": "// Element_2Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#getAttributeNamespaceURI(int)} method.\n*/\nclass Element_2Test {",
    "method_signature": "getAttributeNamespaceURI(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public String getAttributeLocalName(int index) throws IndexOutOfBoundsException {\n        if (index \u003d\u003d -1)\n            return null;\n        String s \u003d (String) attrName.elementAt(index);\n        return s.substring(0, s.indexOf(\u0027^\u0027));\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_3Test.java",
    "test_prompt": "// Element_3Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#getAttributeLocalName(int)} method.\n*/\nclass Element_3Test {",
    "method_signature": "getAttributeLocalName(int)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public String getAttributeType(int index) throws IndexOutOfBoundsException {\n        if (index \u003d\u003d -1)\n            return null;\n        return (String) attrType.elementAt(index);\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_4Test.java",
    "test_prompt": "// Element_4Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#getAttributeType(int)} method.\n*/\nclass Element_4Test {",
    "method_signature": "getAttributeType(int)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public String getAttributeValue(int index) throws IndexOutOfBoundsException {\n        if (index \u003d\u003d -1)\n            return null;\n        return (String) attrValue.elementAt(index);\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_5Test.java",
    "test_prompt": "// Element_5Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#getAttributeValue(int)} method.\n*/\nclass Element_5Test {",
    "method_signature": "getAttributeValue(int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// Element.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\n\n/**\n * An XML Element.\n */\npublic class Element extends NodeWithChildren {\n\n    public int numberOfNamespaceMappings() {\n        return namespacePrefixes.size();\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Element",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Element_6Test.java",
    "test_prompt": "// Element_6Test.java\npackage nu.staldal.xtree;\n\nimport java.util.Vector;\nimport java.net.URL;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#numberOfNamespaceMappings()} method.\n*/\nclass Element_6Test {",
    "method_signature": "numberOfNamespaceMappings()",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// Text.java\npackage nu.staldal.xtree;\n\nimport org.xml.sax.*;\n\n/**\n * Character content in an XML document. This class is immutible.\n */\npublic class Text extends Node {\n\n    public char[] asCharArray() {\n        obtainCharArray();\n        return charArrayCache;\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "Text",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/Text.java",
    "test_prompt": "// TextTest.java\npackage nu.staldal.xtree;\n\nimport org.xml.sax.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Text}.\n* It contains ten unit test cases for the {@link Text#asCharArray()} method.\n*/\nclass TextTest {",
    "method_signature": "asCharArray()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SequentialTreeBuilder.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\n\n/**\n * Build a list of XTree:s from a SAX2 event stream, or by parsing an XML document.\n * \u003cp\u003e\n * Useful to process a large document sequentially, without need to store the whole\n * document in memory at the same time.\n * \u003cp\u003e\n * The SequentialTreeBuilder ensures that the tree will not have two adjacent Text nodes.\n */\npublic class SequentialTreeBuilder implements ContentHandler, ErrorHandler {\n\n    public static Element parseXMLSequential(InputSource xmlInput, boolean validateDTD, ElementHandler handler) throws SAXParseException, SAXException, IOException {\n        try {\n            SAXParserFactory parserFactory \u003d SAXParserFactory.newInstance();\n            parserFactory.setNamespaceAware(true);\n            parserFactory.setValidating(validateDTD);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\n            parserFactory.setFeature(\"http://xml.org/sax/features/validation\", validateDTD);\n            XMLReader xmlReader \u003d parserFactory.newSAXParser().getXMLReader();\n            SequentialTreeBuilder tb \u003d new SequentialTreeBuilder(handler);\n            xmlReader.setContentHandler(tb);\n            xmlReader.setErrorHandler(tb);\n            xmlReader.parse(xmlInput);\n            return tb.getRootElement();\n        } catch (javax.xml.parsers.ParserConfigurationException e) {\n            throw new Error(\"XML parser configuration error: \" + e.getMessage());\n        }\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "SequentialTreeBuilder",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/SequentialTreeBuilder.java",
    "test_prompt": "// SequentialTreeBuilderTest.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SequentialTreeBuilder}.\n* It contains ten unit test cases for the {@link SequentialTreeBuilder#parseXMLSequential(InputSource, boolean, ElementHandler)} method.\n*/\nclass SequentialTreeBuilderTest {",
    "method_signature": "parseXMLSequential(InputSource, boolean, ElementHandler)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// XTreeUtil.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.sax.*;\nimport javax.xml.transform.stream.StreamResult;\nimport org.xml.sax.*;\nimport org.iso_relax.verifier.*;\nimport nu.staldal.xmlutil.ContentHandlerFixer;\n\n/**\n * Some utility methods for XTree. All methods in this class are static.\n */\npublic final class XTreeUtil {\n\n    public static Element parseXML(InputSource xmlInput, boolean validateDTD, String schemaType, InputSource schema) throws SAXParseException, SAXException, IOException {\n        try {\n            SAXParserFactory parserFactory \u003d SAXParserFactory.newInstance();\n            parserFactory.setNamespaceAware(true);\n            parserFactory.setValidating(validateDTD);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\n            parserFactory.setFeature(\"http://xml.org/sax/features/validation\", validateDTD);\n            XMLReader xmlReader \u003d parserFactory.newSAXParser().getXMLReader();\n            TreeBuilder tb \u003d new TreeBuilder();\n            if (schema !\u003d null) {\n                VerifierFactory vf \u003d VerifierFactory.newInstance(schemaType);\n                Verifier verifier \u003d vf.newVerifier(schema);\n                VerifierFilter filter \u003d verifier.getVerifierFilter();\n                filter.setParent(xmlReader);\n                xmlReader \u003d filter;\n            }\n            xmlReader.setContentHandler(tb);\n            xmlReader.setErrorHandler(tb);\n            xmlReader.parse(xmlInput);\n            if ((schema !\u003d null) \u0026\u0026 !((VerifierFilter) xmlReader).isValid()) {\n                throw new SAXParseException(\"Invalid XML data\", null, null, -1, -1);\n            }\n            return tb.getTree();\n        } catch (javax.xml.parsers.ParserConfigurationException e) {\n            throw new Error(\"XML parser configuration error: \" + e.getMessage());\n        } catch (VerifierConfigurationException e) {\n            throw new Error(\"XML verifier configuration error: \" + e.getMessage());\n        }\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "XTreeUtil",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/XTreeUtil_0Test.java",
    "test_prompt": "// XTreeUtil_0Test.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.sax.*;\nimport javax.xml.transform.stream.StreamResult;\nimport org.xml.sax.*;\nimport org.iso_relax.verifier.*;\nimport nu.staldal.xmlutil.ContentHandlerFixer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XTreeUtil}.\n* It contains ten unit test cases for the {@link XTreeUtil#parseXML(InputSource, boolean, String, InputSource)} method.\n*/\nclass XTreeUtil_0Test {",
    "method_signature": "parseXML(InputSource, boolean, String, InputSource)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XTreeUtil.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.sax.*;\nimport javax.xml.transform.stream.StreamResult;\nimport org.xml.sax.*;\nimport org.iso_relax.verifier.*;\nimport nu.staldal.xmlutil.ContentHandlerFixer;\n\n/**\n * Some utility methods for XTree. All methods in this class are static.\n */\npublic final class XTreeUtil {\n\n    public static Element parseXMLSequential(InputSource xmlInput, boolean validateDTD, String schemaType, InputSource schema, ElementHandler handler) throws SAXParseException, SAXException, IOException {\n        try {\n            SAXParserFactory parserFactory \u003d SAXParserFactory.newInstance();\n            parserFactory.setNamespaceAware(true);\n            parserFactory.setValidating(validateDTD);\n            XMLReader xmlReader \u003d parserFactory.newSAXParser().getXMLReader();\n            SequentialTreeBuilder tb \u003d new SequentialTreeBuilder(handler);\n            if (schema !\u003d null) {\n                VerifierFactory vf \u003d VerifierFactory.newInstance(schemaType);\n                Verifier verifier \u003d vf.newVerifier(schema);\n                VerifierFilter filter \u003d verifier.getVerifierFilter();\n                filter.setParent(xmlReader);\n                xmlReader \u003d filter;\n            }\n            xmlReader.setContentHandler(tb);\n            xmlReader.setErrorHandler(tb);\n            xmlReader.parse(xmlInput);\n            if ((schema !\u003d null) \u0026\u0026 !((VerifierFilter) xmlReader).isValid()) {\n                throw new SAXParseException(\"Invalid XML data\", null, null, -1, -1);\n            }\n            return tb.getRootElement();\n        } catch (javax.xml.parsers.ParserConfigurationException e) {\n            throw new Error(\"XML parser configuration error: \" + e.getMessage());\n        } catch (VerifierConfigurationException e) {\n            throw new Error(\"XML verifier configuration error: \" + e.getMessage());\n        }\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "XTreeUtil",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/XTreeUtil_1Test.java",
    "test_prompt": "// XTreeUtil_1Test.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.sax.*;\nimport javax.xml.transform.stream.StreamResult;\nimport org.xml.sax.*;\nimport org.iso_relax.verifier.*;\nimport nu.staldal.xmlutil.ContentHandlerFixer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XTreeUtil}.\n* It contains ten unit test cases for the {@link XTreeUtil#parseXMLSequential(InputSource, boolean, String, InputSource, ElementHandler)} method.\n*/\nclass XTreeUtil_1Test {",
    "method_signature": "parseXMLSequential(InputSource, boolean, String, InputSource, ElementHandler)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// TreeBuilder.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\n\n/**\n * Build an XTree from a SAX2 event stream, or by parsing an XML document.\n *\n * The TreeBuilder ensures that the tree will not have two adjacent Text nodes.\n */\npublic class TreeBuilder implements ContentHandler, ErrorHandler {\n\n    public static InputSource fileToInputSource(File file) throws FileNotFoundException, IOException {\n        // we should use File.toURL() here, but it\u0027s Java2\n        String absPath \u003d file.getCanonicalPath().replace(File.separatorChar, \u0027/\u0027);\n        String systemId \u003d \"file:\" + ((absPath.charAt(0) \u003d\u003d \u0027/\u0027) ? \"//\" : \"///\") + absPath;\n        if (!file.isFile())\n            throw new FileNotFoundException(systemId);\n        return new InputSource(systemId);\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "TreeBuilder",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/TreeBuilder_0Test.java",
    "test_prompt": "// TreeBuilder_0Test.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TreeBuilder}.\n* It contains ten unit test cases for the {@link TreeBuilder#fileToInputSource(File)} method.\n*/\nclass TreeBuilder_0Test {",
    "method_signature": "fileToInputSource(File)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// TreeBuilder.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\n\n/**\n * Build an XTree from a SAX2 event stream, or by parsing an XML document.\n *\n * The TreeBuilder ensures that the tree will not have two adjacent Text nodes.\n */\npublic class TreeBuilder implements ContentHandler, ErrorHandler {\n\n    public static Element parseXML(InputSource xmlInput, boolean validateDTD) throws SAXParseException, SAXException, IOException {\n        try {\n            SAXParserFactory parserFactory \u003d SAXParserFactory.newInstance();\n            parserFactory.setNamespaceAware(true);\n            parserFactory.setValidating(validateDTD);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n            parserFactory.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\n            parserFactory.setFeature(\"http://xml.org/sax/features/validation\", validateDTD);\n            XMLReader xmlReader \u003d parserFactory.newSAXParser().getXMLReader();\n            TreeBuilder tb \u003d new TreeBuilder();\n            xmlReader.setContentHandler(tb);\n            xmlReader.setErrorHandler(tb);\n            xmlReader.parse(xmlInput);\n            return tb.getTree();\n        } catch (javax.xml.parsers.ParserConfigurationException e) {\n            throw new Error(\"XML parser configuration error: \" + e.getMessage());\n        }\n    }\n}\n",
    "package": "nu.staldal.xtree",
    "classname": "TreeBuilder",
    "id": "/EvoSuiteBenchmark/original/52_lagoon/src/main/java/nu/staldal/xtree/TreeBuilder_1Test.java",
    "test_prompt": "// TreeBuilder_1Test.java\npackage nu.staldal.xtree;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.URL;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TreeBuilder}.\n* It contains ten unit test cases for the {@link TreeBuilder#parseXML(InputSource, boolean)} method.\n*/\nclass TreeBuilder_1Test {",
    "method_signature": "parseXML(InputSource, boolean)",
    "suffix": "1"
  }
]