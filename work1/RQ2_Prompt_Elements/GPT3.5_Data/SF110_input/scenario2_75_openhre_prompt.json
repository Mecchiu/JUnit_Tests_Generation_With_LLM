[
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     *\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_0Test.java",
    "test_prompt": "// ClientHttpRequest_0Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post()} method.\n*/\nclass ClientHttpRequest_0Test {",
    "method_signature": "post()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     *\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_1Test.java",
    "test_prompt": "// ClientHttpRequest_1Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map)} method.\n*/\nclass ClientHttpRequest_1Test {",
    "method_signature": "post(Map)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     *\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_2Test.java",
    "test_prompt": "// ClientHttpRequest_2Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Object[])} method.\n*/\nclass ClientHttpRequest_2Test {",
    "method_signature": "post(Object[])",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     *\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_3Test.java",
    "test_prompt": "// ClientHttpRequest_3Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map, Map)} method.\n*/\nclass ClientHttpRequest_3Test {",
    "method_signature": "post(Map, Map)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     *\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_4Test.java",
    "test_prompt": "// ClientHttpRequest_4Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String[], Object[])} method.\n*/\nclass ClientHttpRequest_4Test {",
    "method_signature": "post(String[], Object[])",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     *\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_5Test.java",
    "test_prompt": "// ClientHttpRequest_5Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.\n*/\nclass ClientHttpRequest_5Test {",
    "method_signature": "post(String, Object)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     *\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_6Test.java",
    "test_prompt": "// ClientHttpRequest_6Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.\n*/\nclass ClientHttpRequest_6Test {",
    "method_signature": "post(String, Object, String, Object)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     *\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_7Test.java",
    "test_prompt": "// ClientHttpRequest_7Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequest_7Test {",
    "method_signature": "post(String, Object, String, Object, String, Object)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientHttpRequest.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * \u003cp\u003eTitle: Client HTTP Request class\u003c/p\u003e\n * \u003cp\u003eDescription: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.\u003c/p\u003e\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     *\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n}\n",
    "package": "com.browsersoft.servlet.util",
    "classname": "ClientHttpRequest",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_8Test.java",
    "test_prompt": "// ClientHttpRequest_8Test.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequest_8Test {",
    "method_signature": "post(String, Object, String, Object, String, Object, String, Object)",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleUserMgr.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\npublic class SimpleUserMgr implements UserMgr {\n\n    /**\n     * get User with username, org and email\n     *\n     * @param username cn variable\n     * @param org o variable\n     * @param email email variable\n     * @return User\n     */\n    public User getUser(String username, String org, String email) {\n        User user \u003d null;\n        try {\n            // try unique email first (this should always return the user)\n            if (email !\u003d null \u0026\u0026 !email.equals(\"\"))\n                user \u003d (User) id.get(email);\n            if ((user \u003d\u003d null) \u0026\u0026 (org !\u003d null) \u0026\u0026 (username !\u003d null)) {\n                // get the user list for the organization\n                users \u003d recman.getHashtable(org);\n                if (users !\u003d null) {\n                    String userid \u003d (String) users.get(username);\n                    if (userid !\u003d null)\n                        user \u003d (User) id.get(userid);\n                }\n            }\n            if (user \u003d\u003d null)\n                cat.warn(\"getUser(\" + username + \",\" + org + \",\" + email + \"): user not found, \");\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "SimpleUserMgr",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_0Test.java",
    "test_prompt": "// SimpleUserMgr_0Test.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String, String, String)} method.\n*/\nclass SimpleUserMgr_0Test {",
    "method_signature": "getUser(String, String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleUserMgr.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\npublic class SimpleUserMgr implements UserMgr {\n\n    /**\n     * Get all the userNames for a given organization\n     *\n     * @param org the organization name (o field in LDAP);\n     * @return String[] list of names within the organization\n     */\n    public String[] getNamesbyOrg(String org) {\n        Vector v \u003d new Vector();\n        try {\n            JDBMHashtable users \u003d recman.getHashtable(org);\n            JDBMEnumeration e \u003d users.keys();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getNamesbyOrg: \" + e1);\n        }\n        String[] s \u003d new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "SimpleUserMgr",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_1Test.java",
    "test_prompt": "// SimpleUserMgr_1Test.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.\n*/\nclass SimpleUserMgr_1Test {",
    "method_signature": "getNamesbyOrg(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleUserMgr.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\npublic class SimpleUserMgr implements UserMgr {\n\n    /**\n     * get the email addresses of all users in an organization\n     *\n     * @param org name of the organization (o LDAP field)\n     * @return String[] array of email addresses\n     */\n    public String[] getMailbyOrg(String org) {\n        Vector v \u003d new Vector();\n        try {\n            JDBMHashtable users \u003d recman.getHashtable(org);\n            JDBMEnumeration e \u003d users.values();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getMailbyOrg: \" + e1);\n        }\n        String[] s \u003d new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "SimpleUserMgr",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_2Test.java",
    "test_prompt": "// SimpleUserMgr_2Test.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#getMailbyOrg(String)} method.\n*/\nclass SimpleUserMgr_2Test {",
    "method_signature": "getMailbyOrg(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleUserMgr.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\npublic class SimpleUserMgr implements UserMgr {\n\n    /**\n     * get all the users in in the persistent hashtable\n     *\n     * @return String\n     */\n    public String export() {\n        try {\n            JDBMEnumeration c \u003d id.values();\n            StringBuffer buff \u003d new StringBuffer();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + \u0027\\n\u0027);\n            }\n            return buff.toString();\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n            return null;\n        }\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "SimpleUserMgr",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_3Test.java",
    "test_prompt": "// SimpleUserMgr_3Test.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#export()} method.\n*/\nclass SimpleUserMgr_3Test {",
    "method_signature": "export()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// FilePolicyModule.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\n\n/**\n * This module represents a collection of files containing polices,\n * each of which will be searched through when trying to find a\n * policy that is applicable to a specific request. It does not support\n * policy references.\n * \u003cp\u003e\n * Note that this class used to be provided in the\n * \u003ccode\u003ecom.sun.xacml.finder.impl\u003c/code\u003e package with a warning that it\n * would move out of the core packages eventually. This is partly because\n * this class doesn\u0027t represent standard functionality, and partly because\n * it isn\u0027t designed to be generally useful as anything more than an\n * example. Because so many people have used this class, however, it stayed\n * in place until the 2.0 release.\n * \u003cp\u003e\n * As of the 2.0 release, you may still use this class (in its new location),\n * but you are encouraged to migrate to the new support modules that are\n * much richer and designed for general-purpose use. Also, note that the\n * \u003ccode\u003eloadPolicy\u003c/code\u003e methods that used to be available from this class\n * have been removed. That functionality has been replaced by the much more\n * useful \u003ccode\u003ePolicyReader\u003c/code\u003e class. If you need to load policies\n * directly, you should consider that new class.\n *\n * @since 1.0\n * @author Seth Proctor\n */\npublic class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {\n\n    /**\n     * Attempts to find a policy by reference, based on the provided\n     * parameters. Specifically, this module will try to treat the reference\n     * as a URL, and resolve that URL directly. If the reference is not\n     * a valid URL, cannot be resolved, or does not resolve to an XACML\n     * policy, then no matching policy is returned. This method never\n     * returns an error.\n     *\n     * @param idReference an identifier specifying some policy\n     * @param type type of reference (policy or policySet) as identified by\n     *             the fields in \u003ccode\u003ePolicyReference\u003c/code\u003e\n     * @param constraints any optional constraints on the version of the\n     *                    referenced policy (this will never be null, but\n     *                    it may impose no constraints, and in fact will\n     *                    never impose constraints when used from a pre-2.0\n     *                    XACML policy)\n     * @param parentMetaData the meta-data from the parent policy, which\n     *                       provides XACML version, factories, etc.\n     * @return the result of looking for a matching policy\n     */\n    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {\n        // see if the URI is in fact a URL\n        URL url \u003d null;\n        try {\n            url \u003d new URL(\"file:\" + policyDir + idReference.toString() + \".xml\");\n        } catch (MalformedURLException murle) {\n            // it\u0027s not a URL, so we can\u0027t handle this reference\n            return new PolicyFinderResult();\n        }\n        // try resolving the URL\n        AbstractPolicy policy \u003d null;\n        try {\n            policy \u003d reader.readPolicy(url);\n        } catch (ParsingException pe) {\n            // An error loading the policy could be many things (the URL\n            // doesn\u0027t actually resolve a policy, the server is down, the\n            // policy is invalid, etc.). This could be interpreted as an\n            // error case, or simply as a case where no applicable policy\n            // is available (as is done when we pre-load policies). This\n            // module chooses the latter interpretation.\n            return new PolicyFinderResult();\n        }\n        // check that we got the right kind of policy...if we didn\u0027t, then\n        // we can\u0027t handle the reference\n        if (type \u003d\u003d PolicyReference.POLICY_REFERENCE) {\n            if (!(policy instanceof Policy))\n                return new PolicyFinderResult();\n        } else {\n            if (!(policy instanceof PolicySet))\n                return new PolicyFinderResult();\n        }\n        // finally, check that the constraints match ... note that in a more\n        // powerful module, you could actually have used the constraints to\n        // construct a more specific URL, passed the constraints to the\n        // server, etc., but this example module is staying simple\n        if (!constraints.meetsConstraint(policy.getVersion()))\n            return new PolicyFinderResult();\n        // if we got here, then we successfully resolved a policy that is\n        // the correct type, so return it\n        return new PolicyFinderResult(policy);\n    }\n}\n",
    "package": "com.browsersoft.aacs.xacml",
    "classname": "FilePolicyModule",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModule.java",
    "test_prompt": "// FilePolicyModuleTest.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilePolicyModule}.\n* It contains ten unit test cases for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.\n*/\nclass FilePolicyModuleTest {",
    "method_signature": "findPolicy(URI, int, VersionConstraints, PolicyMetaData)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// User.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n *\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    /**\n     * Check Digest against identity\n     *\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest \u003d digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest \u003d digest.substring(6);\n        }\n        byte[][] hs \u003d split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash \u003d hs[0];\n        byte[] salt \u003d hs[1];\n        if (sha \u003d\u003d null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash \u003d sha.digest();\n        boolean valid \u003d true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid \u003d false;\n            cat.warn(\"doesn\u0027t match: \" + identity);\n        }\n        return valid;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "User",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/User.java",
    "test_prompt": "// UserTest.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#checkDigest(String, String)} method.\n*/\nclass UserTest {",
    "method_signature": "checkDigest(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Login.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\npublic class Login {\n\n    /**\n     * Load and get the Properties from the Config File\n     *\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "Login",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_0Test.java",
    "test_prompt": "// Login_0Test.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getProps(String)} method.\n*/\nclass Login_0Test {",
    "method_signature": "getProps(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Login.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\npublic class Login {\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "Login",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_1Test.java",
    "test_prompt": "// Login_1Test.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getProps()} method.\n*/\nclass Login_1Test {",
    "method_signature": "getProps()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Login.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\npublic class Login {\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "Login",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_2Test.java",
    "test_prompt": "// Login_2Test.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getSecurityLogFilePath()} method.\n*/\nclass Login_2Test {",
    "method_signature": "getSecurityLogFilePath()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Login.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\npublic class Login {\n\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     *\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user \u003d null;\n        if (userMgr \u003d\u003d null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password \u003d\u003d null)\n            throw new LoginException(\"Password not supplied\");\n        user \u003d userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today \u003d new Date();\n        Date pwvd \u003d null;\n        if ((user.getPassvalidstart() !\u003d null) \u0026\u0026 (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd \u003d convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user \u003d null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() !\u003d null) \u0026\u0026 (user.getPassrenewal() !\u003d null) \u0026\u0026 (!user.getPassvalidstart().equals(\"\")) \u0026\u0026 (!user.getPassrenewal().equals(\"\")) \u0026\u0026 (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 \u003d Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType\u003dkrb5 and IPfiltering\u003dyes in the properties file.\n        if ((user.getAllowedips() !\u003d null) \u0026\u0026 (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) \u0026\u0026 (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip \u003d getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result \u003d ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result \u003d\u003d false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps \u003d user.getGroups();\n            if (usergrps !\u003d null \u0026\u0026 usergrps.size() \u003e 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit \u003d usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group\u0027s details from LDAP\n                    Group grp \u003d (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result \u003d ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result \u003d\u003d true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() \u003d\u003d null || user.getActivegroups().size() \u003d\u003d 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "Login",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_3Test.java",
    "test_prompt": "// Login_3Test.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authorize()} method.\n*/\nclass Login_3Test {",
    "method_signature": "authorize()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// Login.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\npublic class Login {\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     *\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user \u003d null;\n        if (userMgr \u003d\u003d null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password \u003d\u003d null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user \u003d userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n}\n",
    "package": "com.browsersoft.aacs",
    "classname": "Login",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_4Test.java",
    "test_prompt": "// Login_4Test.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authenticate()} method.\n*/\nclass Login_4Test {",
    "method_signature": "authenticate()",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// AACSLoginModule.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * \u003cp\u003e This sample LoginModule authenticates users with a password.\n *\n * \u003cp\u003e This LoginModule only recognizes one user:\ttestUser\n * \u003cp\u003e testUser\u0027s password is:\ttestPassword\n *\n * \u003cp\u003e If testUser successfully authenticates itself,\n * an \u003ccode\u003eAACSPrincipal\u003c/code\u003e with the testUser\u0027s user name\n * is added to the Subject.\n *\n * \u003cp\u003e This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * \u003cp\u003e The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    /**\n     * Authenticate the user with a user name and password.\n     *\n     * \u003cp\u003e\n     *\n     * @return true in all cases since this \u003ccode\u003eLoginModule\u003c/code\u003e\n     * \tshould not be ignored.\n     * @exception FailedLoginException if the authentication fails. \u003cp\u003e\n     * @exception LoginException if this \u003ccode\u003eLoginModule\u003c/code\u003e\n     * \tis unable to perform the authentication.\n     */\n    public boolean login() throws LoginException {\n        if (debug)\n            System.out.println(\"AACSLoginModule login() called\");\n        // prompt for a user name and password\n        if (callbackHandler \u003d\u003d null)\n            throw new LoginException(\"Error: no CallbackHandler available \" + \"to garner authentication information from the user\");\n        Callback[] callbacks \u003d new Callback[2];\n        callbacks[0] \u003d new NameCallback(\"user name: \");\n        callbacks[1] \u003d new PasswordCallback(\"password: \", false);\n        try {\n            callbackHandler.handle(callbacks);\n            username \u003d ((NameCallback) callbacks[0]).getName();\n            char[] tmpPassword \u003d ((PasswordCallback) callbacks[1]).getPassword();\n            if (tmpPassword \u003d\u003d null) {\n                // treat a NULL password as an empty password\n                tmpPassword \u003d new char[0];\n            }\n            password \u003d new char[tmpPassword.length];\n            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);\n            ((PasswordCallback) callbacks[1]).clearPassword();\n        } catch (java.io.IOException ioe) {\n            throw new LoginException(ioe.toString());\n        } catch (UnsupportedCallbackException uce) {\n            throw new LoginException(\"Error: \" + uce.getCallback().toString() + \" not available to garner authentication information \" + \"from the user\");\n        }\n        // print debugging information\n        if (debug) {\n            System.out.println(\"\\t\\t[AACSLoginModule] \" + \"user entered user name: \" + username);\n            System.out.print(\"\\t\\t[AACSLoginModule] \" + \"user entered password: \");\n            for (int i \u003d 0; i \u003c password.length; i++) System.out.print(password[i]);\n            System.out.println();\n        }\n        // verify the username/password\n        login \u003d new Login(username);\n        login.setPassword(new String(password));\n        user \u003d login.authenticate();\n        if (user !\u003d null) {\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication succeeded\");\n            succeeded \u003d true;\n            return true;\n        } else {\n            // authentication failed -- clean out state\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication failed\");\n            succeeded \u003d false;\n            username \u003d null;\n            for (int i \u003d 0; i \u003c password.length; i++) password[i] \u003d \u0027 \u0027;\n            password \u003d null;\n            throw new FailedLoginException(\"Login Incorrect\");\n        }\n    }\n}\n",
    "package": "com.browsersoft.jaas",
    "classname": "AACSLoginModule",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_0Test.java",
    "test_prompt": "// AACSLoginModule_0Test.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#login()} method.\n*/\nclass AACSLoginModule_0Test {",
    "method_signature": "login()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// AACSLoginModule.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * \u003cp\u003e This sample LoginModule authenticates users with a password.\n *\n * \u003cp\u003e This LoginModule only recognizes one user:\ttestUser\n * \u003cp\u003e testUser\u0027s password is:\ttestPassword\n *\n * \u003cp\u003e If testUser successfully authenticates itself,\n * an \u003ccode\u003eAACSPrincipal\u003c/code\u003e with the testUser\u0027s user name\n * is added to the Subject.\n *\n * \u003cp\u003e This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * \u003cp\u003e The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    /**\n     * \u003cp\u003e This method is called if the LoginContext\u0027s\n     * overall authentication succeeded\n     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     * succeeded).\n     *\n     * \u003cp\u003e If this LoginModule\u0027s own authentication attempt\n     * succeeded (checked by retrieving the private state saved by the\n     * \u003ccode\u003elogin\u003c/code\u003e method), then this method associates a\n     * \u003ccode\u003eAACSUserPrincipal\u003c/code\u003e and \u003ccode\u003eAACSRolePrincipal\u003c/code\u003e\n     * with the \u003ccode\u003eSubject\u003c/code\u003e located in the\n     * \u003ccode\u003eLoginModule\u003c/code\u003e.  If this LoginModule\u0027s own\n     * authentication attempted failed, then this method removes\n     * any state that was originally saved.\n     *\n     * \u003cp\u003e\n     *\n     * @exception LoginException if the commit fails.\n     * @return true if this LoginModule\u0027s own login and commit\n     * \tattempts succeeded, or false otherwise.\n     */\n    public boolean commit() throws LoginException {\n        if (succeeded \u003d\u003d false) {\n            return false;\n        } else {\n            // add a Principal (authenticated identity)\n            // to the Subject\n            // add an AACSUserPrincipal to the Subject\n            userPrincipal \u003d new AACSUserPrincipal(username);\n            if (!subject.getPrincipals().contains(userPrincipal))\n                subject.getPrincipals().add(userPrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSUserPrincipal [\" + userPrincipal + \"] to Subject\");\n            }\n            // add the \"aacs_role\" to the Subject\n            rolePrincipal \u003d new AACSRolePrincipal(\"aacs_role\");\n            if (!subject.getPrincipals().contains(rolePrincipal))\n                subject.getPrincipals().add(rolePrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSRolePrincipal [\" + rolePrincipal + \"] to Subject\");\n            }\n            // in any case, clean out state\n            username \u003d null;\n            for (int i \u003d 0; i \u003c password.length; i++) password[i] \u003d \u0027 \u0027;\n            password \u003d null;\n            commitSucceeded \u003d true;\n            return true;\n        }\n    }\n}\n",
    "package": "com.browsersoft.jaas",
    "classname": "AACSLoginModule",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_1Test.java",
    "test_prompt": "// AACSLoginModule_1Test.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.\n*/\nclass AACSLoginModule_1Test {",
    "method_signature": "commit()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// AACSLoginModule.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * \u003cp\u003e This sample LoginModule authenticates users with a password.\n *\n * \u003cp\u003e This LoginModule only recognizes one user:\ttestUser\n * \u003cp\u003e testUser\u0027s password is:\ttestPassword\n *\n * \u003cp\u003e If testUser successfully authenticates itself,\n * an \u003ccode\u003eAACSPrincipal\u003c/code\u003e with the testUser\u0027s user name\n * is added to the Subject.\n *\n * \u003cp\u003e This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * \u003cp\u003e The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    /**\n     * \u003cp\u003e This method is called if the LoginContext\u0027s\n     * overall authentication failed.\n     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     * did not succeed).\n     *\n     * \u003cp\u003e If this LoginModule\u0027s own authentication attempt\n     * succeeded (checked by retrieving the private state saved by the\n     * \u003ccode\u003elogin\u003c/code\u003e and \u003ccode\u003ecommit\u003c/code\u003e methods),\n     * then this method cleans up any state that was originally saved.\n     *\n     * \u003cp\u003e\n     *\n     * @exception LoginException if the abort fails.\n     * @return false if this LoginModule\u0027s own login and/or commit attempts\n     * \tfailed, and true otherwise.\n     */\n    public boolean abort() throws LoginException {\n        if (succeeded \u003d\u003d false) {\n            return false;\n        } else if (succeeded \u003d\u003d true \u0026\u0026 commitSucceeded \u003d\u003d false) {\n            // login succeeded but overall authentication failed\n            succeeded \u003d false;\n            username \u003d null;\n            if (password !\u003d null) {\n                for (int i \u003d 0; i \u003c password.length; i++) password[i] \u003d \u0027 \u0027;\n                password \u003d null;\n            }\n            userPrincipal \u003d null;\n            rolePrincipal \u003d null;\n        } else {\n            // overall authentication succeeded and commit succeeded,\n            // but someone else\u0027s commit failed\n            logout();\n        }\n        return true;\n    }\n}\n",
    "package": "com.browsersoft.jaas",
    "classname": "AACSLoginModule",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_2Test.java",
    "test_prompt": "// AACSLoginModule_2Test.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#abort()} method.\n*/\nclass AACSLoginModule_2Test {",
    "method_signature": "abort()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// AACSLoginModule.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * \u003cp\u003e This sample LoginModule authenticates users with a password.\n *\n * \u003cp\u003e This LoginModule only recognizes one user:\ttestUser\n * \u003cp\u003e testUser\u0027s password is:\ttestPassword\n *\n * \u003cp\u003e If testUser successfully authenticates itself,\n * an \u003ccode\u003eAACSPrincipal\u003c/code\u003e with the testUser\u0027s user name\n * is added to the Subject.\n *\n * \u003cp\u003e This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * \u003cp\u003e The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    /**\n     * Logout the user.\n     *\n     * \u003cp\u003e This method removes the \u003ccode\u003eAACSPrincipal\u003c/code\u003e\n     * that was added by the \u003ccode\u003ecommit\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     *\n     * @exception LoginException if the logout fails.\n     * @return true in all cases since this \u003ccode\u003eLoginModule\u003c/code\u003e\n     *          should not be ignored.\n     */\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded \u003d false;\n        succeeded \u003d commitSucceeded;\n        username \u003d null;\n        if (password !\u003d null) {\n            for (int i \u003d 0; i \u003c password.length; i++) password[i] \u003d \u0027 \u0027;\n            password \u003d null;\n        }\n        userPrincipal \u003d null;\n        rolePrincipal \u003d null;\n        user \u003d null;\n        login \u003d null;\n        return true;\n    }\n}\n",
    "package": "com.browsersoft.jaas",
    "classname": "AACSLoginModule",
    "id": "/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_3Test.java",
    "test_prompt": "// AACSLoginModule_3Test.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#logout()} method.\n*/\nclass AACSLoginModule_3Test {",
    "method_signature": "logout()",
    "suffix": "3"
  }
]