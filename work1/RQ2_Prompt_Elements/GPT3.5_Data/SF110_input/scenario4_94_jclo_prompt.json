[
  {
    "numberTests": "ten",
    "original_code": "// JCLO.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\n\npublic class JCLO {\n\n    private Field[] fields;\n\n    private Object object;\n\n    private boolean doubleDashes;\n\n    private boolean hasEquals;\n\n    private String prefix \u003d \"\";\n\n    private String[][] aliases;\n\n    /**\n     * \tA constructor that takes the Object that contains the variables\n     * \tacceptable on a command line.  Call parse (String) to do the actual\n     * \tparsing.\n     *\n     * \t@param\tobject\twhere the variables/arguments are\n     */\n    public JCLO(Object object) {\n    }\n\n    public JCLO(Object object, String[][] aliases) {\n    }\n\n    public JCLO(String prefix, Object object) {\n    }\n\n    /**\n     * \tA constructor that takes an Object, a prefix, and a boolean that\n     * \tspecifies whether to accept single or double dashes; call parse\n     * \t(String) to do the actual parsing.\n     *\n     * \t@param\tobject\twhere the variables/arguments are\n     * \t@param\tprefix\tthe String CLO\u0027s start with, if any\n     */\n    public JCLO(String prefix, Object object, String[][] aliases) {\n    }\n\n    /**\n     * \tJust a simple method to put the try/catch in one place.\n     *\n     * \t@param\tf\tthe Field to get the value of\n     * \t@return\t\tthe Object with the value\n     */\n    private Object getObject(Field f);\n\n    private Field getField(String key);\n\n    /**\n     * \tGet the current value of the variable in the object\n     *\n     * \t@param\tkey\tthe variable name\n     * \t@return\t\tan Object with the value\n     */\n    public Object getValue(String key);\n\n    /**\n     * \tJust a simple method to put the try/catch in one place.\n     *\n     * \t@param\tf\tthe Field to set the value of\n     * \t@param\to\tthe Object with the value\n     */\n    private void setObject(Field f, Object o);\n\n    private String getArrayType(Class type);\n\n    /**\n     * \tAn external representation of the object\n     *\n     * \t@return\t\ta formatted version of this object\n     */\n    public String toString();\n\n    private String getUsageType(Class type);\n\n    /**\n     *  Create and usage message for the acceptable command line variables.\n     *\n     * \t@return\t\ta String that specifies acceptable options\n     */\n    public String usage();\n\n    private void parseAdditional(String[] args, int i);\n\n    /**\n     * \tAdd to object o to the end of the array contained in field and\n     * \treturn the resulting array.\n     *\n     * \t@param\tfield\tthe field in the object\n     * \t@param\to\tthe new object to be placed at the end\n     * \t@return\t\ta formatted version of this object\n     */\n    private Object addToArray(Field field, Object o);\n\n    private String getKey(String arg);\n\n    private String getBooleanValue(String arg);\n\n    /**\n     * \tMake an Object of the correct type for the field, using a String\n     * \tversion of the value to create it.\n     *\n     * \t@param\ttype\ta String representing the base (or String) type\n     * \t@param\tval\tthe value\n     * \t@return\t\tan Object of the correct type and value\n     */\n    private Object makeObject(String type, String val);\n\n    private String getEqualsValue(String arg);\n\n    /**\n     * \tParse a command line.\n     *\n     * \t@param\targs\tthe arguments to be parsed\n     */\n    public void parse(String[] args);\n\n    /**\n     * Get a boolean value from the object after parsing.\n     */\n    public boolean getBoolean(String key);\n\n    /**\n     * Get a byte value from the object after parsing.\n     */\n    public byte getByte(String key);\n\n    /**\n     * Get a character value from the object after parsing.\n     */\n    public char getChar(String key);\n\n    /**\n     * Get a short value from the object after parsing.\n     */\n    public short getShort(String key);\n\n    /**\n     * Get an integer value from the object after parsing.\n     */\n    public int getInt(String key);\n\n    /**\n     * Get a float value from the object after parsing.\n     */\n    public float getFloat(String key);\n\n    /**\n     * Get a double value from the object after parsing.\n     */\n    public double getDouble(String key);\n\n    /**\n     * Get a long value from the object after parsing.\n     */\n    public long getLong(String key);\n\n    /**\n     * Get a String from the object after parsing.\n     */\n    public String getString(String key);\n\n    /**\n     * Get an array of bytes from the object after parsing.\n     */\n    public byte[] getBytes(String key);\n\n    /**\n     * Get an array of characaters from the object after parsing.\n     */\n    public char[] getChars(String key);\n\n    /**\n     * Get an array of shorts from the object after parsing.\n     */\n    public short[] getShorts(String key);\n\n    /**\n     * Get an array of integers from the object after parsing.\n     */\n    public int[] getInts(String key);\n\n    /**\n     * Get an array of floats from the object after parsing.\n     */\n    public float[] getFloats(String key);\n\n    /**\n     * Get an array of doubles from the object after parsing.\n     */\n    public double[] getDoubles(String key);\n\n    /**\n     * Get an array of longs from the object after parsing.\n     */\n    public long[] getLongs(String key);\n\n    /**\n     * Get an array of Strings from the object after parsing.\n     */\n    public String[] getStrings(String key);\n\n    public static void main(String[] args);\n}\n",
    "package": "edu.mscd.cs.jclo",
    "classname": "JCLO",
    "id": "/EvoSuiteBenchmark/original/94_jclo/src/main/java/edu/mscd/cs/jclo/JCLO_0Test.java",
    "test_prompt": "// JCLO_0Test.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JCLO}.\n* It contains ten unit test cases for the {@link JCLO#getValue(String)} method.\n*/\nclass JCLO_0Test {",
    "method_signature": "getValue(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JCLO.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\n\npublic class JCLO {\n\n    private Field[] fields;\n\n    private Object object;\n\n    private boolean doubleDashes;\n\n    private boolean hasEquals;\n\n    private String prefix \u003d \"\";\n\n    private String[][] aliases;\n\n    /**\n     * \tA constructor that takes the Object that contains the variables\n     * \tacceptable on a command line.  Call parse (String) to do the actual\n     * \tparsing.\n     *\n     * \t@param\tobject\twhere the variables/arguments are\n     */\n    public JCLO(Object object) {\n    }\n\n    public JCLO(Object object, String[][] aliases) {\n    }\n\n    public JCLO(String prefix, Object object) {\n    }\n\n    /**\n     * \tA constructor that takes an Object, a prefix, and a boolean that\n     * \tspecifies whether to accept single or double dashes; call parse\n     * \t(String) to do the actual parsing.\n     *\n     * \t@param\tobject\twhere the variables/arguments are\n     * \t@param\tprefix\tthe String CLO\u0027s start with, if any\n     */\n    public JCLO(String prefix, Object object, String[][] aliases) {\n    }\n\n    /**\n     * \tJust a simple method to put the try/catch in one place.\n     *\n     * \t@param\tf\tthe Field to get the value of\n     * \t@return\t\tthe Object with the value\n     */\n    private Object getObject(Field f);\n\n    private Field getField(String key);\n\n    /**\n     * \tGet the current value of the variable in the object\n     *\n     * \t@param\tkey\tthe variable name\n     * \t@return\t\tan Object with the value\n     */\n    public Object getValue(String key);\n\n    /**\n     * \tJust a simple method to put the try/catch in one place.\n     *\n     * \t@param\tf\tthe Field to set the value of\n     * \t@param\to\tthe Object with the value\n     */\n    private void setObject(Field f, Object o);\n\n    private String getArrayType(Class type);\n\n    /**\n     * \tAn external representation of the object\n     *\n     * \t@return\t\ta formatted version of this object\n     */\n    public String toString();\n\n    private String getUsageType(Class type);\n\n    /**\n     *  Create and usage message for the acceptable command line variables.\n     *\n     * \t@return\t\ta String that specifies acceptable options\n     */\n    public String usage();\n\n    private void parseAdditional(String[] args, int i);\n\n    /**\n     * \tAdd to object o to the end of the array contained in field and\n     * \treturn the resulting array.\n     *\n     * \t@param\tfield\tthe field in the object\n     * \t@param\to\tthe new object to be placed at the end\n     * \t@return\t\ta formatted version of this object\n     */\n    private Object addToArray(Field field, Object o);\n\n    private String getKey(String arg);\n\n    private String getBooleanValue(String arg);\n\n    /**\n     * \tMake an Object of the correct type for the field, using a String\n     * \tversion of the value to create it.\n     *\n     * \t@param\ttype\ta String representing the base (or String) type\n     * \t@param\tval\tthe value\n     * \t@return\t\tan Object of the correct type and value\n     */\n    private Object makeObject(String type, String val);\n\n    private String getEqualsValue(String arg);\n\n    /**\n     * \tParse a command line.\n     *\n     * \t@param\targs\tthe arguments to be parsed\n     */\n    public void parse(String[] args);\n\n    /**\n     * Get a boolean value from the object after parsing.\n     */\n    public boolean getBoolean(String key);\n\n    /**\n     * Get a byte value from the object after parsing.\n     */\n    public byte getByte(String key);\n\n    /**\n     * Get a character value from the object after parsing.\n     */\n    public char getChar(String key);\n\n    /**\n     * Get a short value from the object after parsing.\n     */\n    public short getShort(String key);\n\n    /**\n     * Get an integer value from the object after parsing.\n     */\n    public int getInt(String key);\n\n    /**\n     * Get a float value from the object after parsing.\n     */\n    public float getFloat(String key);\n\n    /**\n     * Get a double value from the object after parsing.\n     */\n    public double getDouble(String key);\n\n    /**\n     * Get a long value from the object after parsing.\n     */\n    public long getLong(String key);\n\n    /**\n     * Get a String from the object after parsing.\n     */\n    public String getString(String key);\n\n    /**\n     * Get an array of bytes from the object after parsing.\n     */\n    public byte[] getBytes(String key);\n\n    /**\n     * Get an array of characaters from the object after parsing.\n     */\n    public char[] getChars(String key);\n\n    /**\n     * Get an array of shorts from the object after parsing.\n     */\n    public short[] getShorts(String key);\n\n    /**\n     * Get an array of integers from the object after parsing.\n     */\n    public int[] getInts(String key);\n\n    /**\n     * Get an array of floats from the object after parsing.\n     */\n    public float[] getFloats(String key);\n\n    /**\n     * Get an array of doubles from the object after parsing.\n     */\n    public double[] getDoubles(String key);\n\n    /**\n     * Get an array of longs from the object after parsing.\n     */\n    public long[] getLongs(String key);\n\n    /**\n     * Get an array of Strings from the object after parsing.\n     */\n    public String[] getStrings(String key);\n\n    public static void main(String[] args);\n}\n",
    "package": "edu.mscd.cs.jclo",
    "classname": "JCLO",
    "id": "/EvoSuiteBenchmark/original/94_jclo/src/main/java/edu/mscd/cs/jclo/JCLO_1Test.java",
    "test_prompt": "// JCLO_1Test.java\npackage edu.mscd.cs.jclo;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Modifier;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JCLO}.\n* It contains ten unit test cases for the {@link JCLO#usage()} method.\n*/\nclass JCLO_1Test {",
    "method_signature": "usage()",
    "suffix": "1"
  }
]