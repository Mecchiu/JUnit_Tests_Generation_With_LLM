ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yPmUTykXB8WwG0PgsBicYwMHq342,/HumanEvalJava/src/main/java/scenario3/id_56.java,28.180949687957764,stop,"// CorrectBracketing.java
package scenario3;

class CorrectBracketing {

    /**
     * Brackets is a string of ""<"" and "">"".
     * return true if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""<>"")
     * true
     * > correctBracketing(""<<><>>"")
     * true
     * > correctBracketing(""<><><<><>><>"")
     * true
     * > correctBracketing(""<><><<<><><>><>><<><><<>>>"")
     * true
     * > correctBracketing(""<<<><>>>>"")
     * false
     * > correctBracketing(""><<>"")
     * false
     * > correctBracketing(""<"")
     * false
     * > correctBracketing(""<<<<"")
     * false
     * > correctBracketing("">"")
     * false
     * > correctBracketing(""<<>"")
     * false
     * > correctBracketing(""<><><<><>><>><<>"")
     * false
     * > correctBracketing(""<><><<><>><>>><>"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
    }
}
","// CorrectBracketingTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {","// Here's the complete source code for the CorrectBracketing and CorrectBracketingTest classes:

// CorrectBracketing.java
package scenario3;

class CorrectBracketing {

    /**
     * Brackets is a string of ""<"" and "">"".
     * return true if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""<>"")
     * true
     * > correctBracketing(""<<><>>"")
     * true
     * > correctBracketing(""<><><<><>><>"")
     * true
     * > correctBracketing(""<><><<<><><>><>><<><><<>>>"")
     * true
     * > correctBracketing(""<<<><>>>>"")
     * false
     * > correctBracketing(""><<>"")
     * false
     * > correctBracketing(""<"")
     * false
     * > correctBracketing(""<<<<"")
     * false
     * > correctBracketing("">"")
     * false
     * > correctBracketing(""<<>"")
     * false
     * > correctBracketing(""<><><<><>><>><<>"")
     * false
     * > correctBracketing(""<><><<><>><>>><>"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '<') {
                count++;
            } else if (brackets.charAt(i) == '>') {
                count--;
                if (count < 0) {
                    return false;
                }
            }
        }
        return count == 0;
    }
}

// CorrectBracketingTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {

    @Test
    void testEmptyString() {
        assertTrue(CorrectBracketing.correctBracketing(""""));
    }

    @Test
    void testSingleOpeningBracket() {
        assertFalse(CorrectBracketing.correctBracketing(""<""));
    }

    @Test
    void testSingleClosingBracket() {
        assertFalse(CorrectBracketing.correctBracketing("">""));
    }

    @Test
    void testTwoOpeningBrackets() {
        assertFalse(CorrectBracketing.correctBracketing(""<<""));
    }

    @Test
    void testTwoClosingBrackets() {
        assertFalse(CorrectBracketing.correctBracketing("">>""));
    }

    @Test
    void testOneOpeningAndOneClosingBracket() {
        assertTrue(CorrectBracketing.correctBracketing(""<>""));
    }

    @Test
    void testNestedBrackets() {
        assertTrue(CorrectBracketing.correctBracketing(""<<><>>""));
    }

    @Test
    void testMultiplePairsOfBrackets() {
        assertTrue(CorrectBracketing.correctBracketing(""<><><<><>><>><<><><<>>>""));
    }

    @Test
    void testUnbalancedBrackets() {
        assertFalse(CorrectBracketing.correctBracketing(""<<<><>>>>""));
    }

    @Test
    void testMixedUpBrackets() {
        assertFalse(CorrectBracketing.correctBracketing(""<><><<><>><>>><>""));
    }
}"
chatcmpl-6yPnW0PYqcrm8FhJJiLNrmxornGz1,/HumanEvalJava/src/main/java/scenario3/id_40.java,36.66159200668335,stop,"// TriplesSumToZero.java
package scenario3;

import java.util.List;

class TriplesSumToZero {

    /**
     * triplesSumToZero takes a list of integers as an input.
     * it returns True if there are three distinct elements in the list that
     * sum to zero, and False otherwise.
     *
     * > triplesSumToZero([1, 3, 5, 0])
     * false
     * > triplesSumToZero([1, 3, 5, -1])
     * false
     * > triplesSumToZero([1, 3, -2, 1])
     * true
     * > triplesSumToZero([1, 2, 3, 7])
     * false
     * > triplesSumToZero([1, 2, 5, 7])
     * false
     * > triplesSumToZero([2, 4, -5, 3, 9, 7])
     * true
     * > triplesSumToZero([1])
     * false
     * > triplesSumToZero([1, 3, 5, -100])
     * false
     * > triplesSumToZero([100, 3, 5, -100])
     * false
     */
    public static Boolean triplesSumToZero(List<Integer> l) {
    }
}
","// TriplesSumToZeroTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriplesSumToZero}.
* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.
*/
class TriplesSumToZeroTest {","// TriplesSumToZero.java
package scenario3;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

class TriplesSumToZero {

    /**
     * triplesSumToZero takes a list of integers as an input.
     * it returns True if there are three distinct elements in the list that
     * sum to zero, and False otherwise.
     *
     * > triplesSumToZero([1, 3, 5, 0])
     * false
     * > triplesSumToZero([1, 3, 5, -1])
     * false
     * > triplesSumToZero([1, 3, -2, 1])
     * true
     * > triplesSumToZero([1, 2, 3, 7])
     * false
     * > triplesSumToZero([1, 2, 5, 7])
     * false
     * > triplesSumToZero([2, 4, -5, 3, 9, 7])
     * true
     * > triplesSumToZero([1])
     * false
     * > triplesSumToZero([1, 3, 5, -100])
     * false
     * > triplesSumToZero([100, 3, 5, -100])
     * false
     */
    public static Boolean triplesSumToZero(List<Integer> l) {
        Set<Integer> set = new HashSet<>(l);
        for (int i = 0; i < l.size() - 1; i++) {
            for (int j = i + 1; j < l.size(); j++) {
                int sum = l.get(i) + l.get(j);
                if (set.contains(-sum)) {
                    return true;
                }
            }
        }
        return false;
    }
}

// TriplesSumToZeroTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriplesSumToZero}.
* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.
*/
class TriplesSumToZeroTest {
    @Test
    void testEmptyList() {
        List<Integer> l = Arrays.asList();
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testSingleElementList() {
        List<Integer> l = Arrays.asList(1);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero() {
        List<Integer> l = Arrays.asList(1, 3, 5, 0);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero2() {
        List<Integer> l = Arrays.asList(1, 3, 5, -1);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero3() {
        List<Integer> l = Arrays.asList(1, 2, 3, 7);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero4() {
        List<Integer> l = Arrays.asList(1, 2, 5, 7);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero5() {
        List<Integer> l = Arrays.asList(1, 3, 5, -100);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testNoTripleSumToZero6() {
        List<Integer> l = Arrays.asList(100, 3, 5, -100);
        assertFalse(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testTripleSumToZero() {
        List<Integer> l = Arrays.asList(1, 3, -2, 1);
        assertTrue(TriplesSumToZero.triplesSumToZero(l));
    }

    @Test
    void testTripleSumToZero2() {
        List<Integer> l = Arrays.asList(2, 4, -5, 3, 9, 7);
        assertTrue(TriplesSumToZero.triplesSumToZero(l));
    }
}"
chatcmpl-6yPoZPDt6Pi5yzISKVvaBLRVrZgG0,/HumanEvalJava/src/main/java/scenario3/id_17.java,43.296414852142334,stop,"// ParseMusic.java
package scenario3;

import java.util.List;

class ParseMusic {

    /**
     * Input to this function is a string representing musical notes in a special ASCII format.
     * Your task is to parse this string and return list of integers corresponding to how many beats  each does not last.
     * Here is a legend:
     * 'o' - whole note, lasts four beats
     * 'o|' - half note, lasts two beats
     * '.|' - quarter note, lasts one beat
     *
     * > parseMusic(""o o| .| o| o| .| .| .| .| o o"")
     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
     * > parseMusic("""")
     * []
     * > parseMusic(""o o o o"")
     * [4, 4, 4, 4]
     * > parseMusic("".| .| .| .|"")
     * [1, 1, 1, 1]
     * > parseMusic(""o| o| .| .| o o o o"")
     * [2, 2, 1, 1, 4, 4, 4, 4]
     * > parseMusic(""o| .| o| .| o o| o o|"")
     * [2, 1, 2, 1, 4, 2, 4, 2]
     */
    public static List<Object> parseMusic(String musicString) {
    }
}
","// ParseMusicTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseMusic}.
* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.
*/
class ParseMusicTest {","// ParseMusic.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class ParseMusic {

    /**
     * Input to this function is a string representing musical notes in a special ASCII format.
     * Your task is to parse this string and return list of integers corresponding to how many beats  each does not last.
     * Here is a legend:
     * 'o' - whole note, lasts four beats
     * 'o|' - half note, lasts two beats
     * '.|' - quarter note, lasts one beat
     *
     * > parseMusic(""o o| .| o| o| .| .| .| .| o o"")
     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
     * > parseMusic("""")
     * []
     * > parseMusic(""o o o o"")
     * [4, 4, 4, 4]
     * > parseMusic("".| .| .| .|"")
     * [1, 1, 1, 1]
     * > parseMusic(""o| o| .| .| o o o o"")
     * [2, 2, 1, 1, 4, 4, 4, 4]
     * > parseMusic(""o| .| o| .| o o| o o|"")
     * [2, 1, 2, 1, 4, 2, 4, 2]
     */
    public static List<Integer> parseMusic(String musicString) {
        List<Integer> beats = new ArrayList<>();
        int i = 0;
        while (i < musicString.length()) {
            char c = musicString.charAt(i);
            if (c == 'o') {
                beats.add(4);
                i++;
            } else if (c == 'o' && musicString.charAt(i + 1) == '|') {
                beats.add(2);
                i += 2;
            } else if (c == '.' && musicString.charAt(i + 1) == '|') {
                beats.add(1);
                i += 2;
            } else {
                i++;
            }
        }
        return beats;
    }
}

// ParseMusicTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseMusic}.
* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.
*/
class ParseMusicTest {
    @Test
    void testEmptyString() {
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = ParseMusic.parseMusic("""");
        assertEquals(expected, actual);
    }

    @Test
    void testWholeNotes() {
        List<Integer> expected = List.of(4, 4, 4, 4);
        List<Integer> actual = ParseMusic.parseMusic(""o o o o"");
        assertEquals(expected, actual);
    }

    @Test
    void testQuarterNotes() {
        List<Integer> expected = List.of(1, 1, 1, 1);
        List<Integer> actual = ParseMusic.parseMusic("".| .| .| .|"");
        assertEquals(expected, actual);
    }

    @Test
    void testHalfNotes() {
        List<Integer> expected = List.of(2, 2, 2, 2);
        List<Integer> actual = ParseMusic.parseMusic(""o| o| o| o|"");
        assertEquals(expected, actual);
    }

    @Test
    void testMixedNotes() {
        List<Integer> expected = List.of(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4);
        List<Integer> actual = ParseMusic.parseMusic(""o o| .| o| o| .| .| .| .| o o"");
        assertEquals(expected, actual);
    }

    @Test
    void testMixedNotes2() {
        List<Integer> expected = List.of(2, 2, 1, 1, 4, 4, 4, 4);
        List<Integer> actual = ParseMusic.parseMusic(""o| o| .| .| o o o o"");
        assertEquals(expected, actual);
    }

    @Test
    void testMixedNotes3() {
        List<Integer> expected = List.of(2, 1, 2, 1, 4, 2, 4, 2);
        List<Integer> actual = ParseMusic.parseMusic(""o| .| o| .| o o| o o|"");
        assertEquals(expected, actual);
    }

    @Test
    void testInvalidInput() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ParseMusic.parseMusic(""o| o| .| .| o o o""));
    }

    @Test
    void testInvalidInput2() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ParseMusic.parseMusic(""o| o| .| .| o o o|""));
    }

    @Test
    void testInvalidInput3() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ParseMusic.parseMusic(""o| o| .| .| o o| o""));
    }
}"
chatcmpl-6yPpcQ5gfCOSZuLCbHOjn2DiM7Tzs,/HumanEvalJava/src/main/java/scenario3/id_83.java,22.959861040115356,stop,"// StartsOneEnds.java
package scenario3;

class StartsOneEnds {

    /**
     * Given a positive integer n, return the count of the numbers of n-digit
     * positive integers that start or end with 1.
     *
     * > startsOneEnds(1)
     * 1
     * > startsOneEnds(2)
     * 18
     * > startsOneEnds(3)
     * 180
     * > startsOneEnds(4)
     * 1800
     * > startsOneEnds(5)
     * 18000
     */
    public static int startsOneEnds(int n) {
    }
}
","// StartsOneEndsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {","// StartsOneEnds.java
package scenario3;

class StartsOneEnds {

    /**
     * Given a positive integer n, return the count of the numbers of n-digit
     * positive integers that start or end with 1.
     *
     * > startsOneEnds(1)
     * 1
     * > startsOneEnds(2)
     * 18
     * > startsOneEnds(3)
     * 180
     * > startsOneEnds(4)
     * 1800
     * > startsOneEnds(5)
     * 18000
     */
    public static int startsOneEnds(int n) {
        int count = 0;
        if (n == 1) {
            count = 1;
        } else {
            count = 9 * (int) Math.pow(10, n - 2) * 2;
        }
        return count;
    }
}

// StartsOneEndsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
    @Test
    void testStartsOneEnds1() {
        assertEquals(1, StartsOneEnds.startsOneEnds(1));
    }

    @Test
    void testStartsOneEnds2() {
        assertEquals(18, StartsOneEnds.startsOneEnds(2));
    }

    @Test
    void testStartsOneEnds3() {
        assertEquals(180, StartsOneEnds.startsOneEnds(3));
    }

    @Test
    void testStartsOneEnds4() {
        assertEquals(1800, StartsOneEnds.startsOneEnds(4));
    }

    @Test
    void testStartsOneEnds5() {
        assertEquals(18000, StartsOneEnds.startsOneEnds(5));
    }

    @Test
    void testStartsOneEnds6() {
        assertEquals(0, StartsOneEnds.startsOneEnds(0));
    }

    @Test
    void testStartsOneEnds7() {
        assertEquals(0, StartsOneEnds.startsOneEnds(-1));
    }

    @Test
    void testStartsOneEnds8() {
        assertEquals(2, StartsOneEnds.startsOneEnds(2));
    }

    @Test
    void testStartsOneEnds9() {
        assertEquals(20, StartsOneEnds.startsOneEnds(3));
    }

    @Test
    void testStartsOneEnds10() {
        assertEquals(200, StartsOneEnds.startsOneEnds(4));
    }
}"
chatcmpl-6yPqfeBa87j8yyoQv9LCq4jvbtOcu,/HumanEvalJava/src/main/java/scenario3/id_8.java,40.36181020736694,stop,"// SumProduct.java
package scenario3;

import java.util.List;

class SumProduct {

    /**
     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
     * Empty sum should be equal to 0 and empty product should be equal to 1.
     *
     * > sumProduct([1, 2, 3, 4])
     * [10, 24]
     * > sumProduct([])
     * [0, 1]
     * > sumProduct([1, 1, 1])
     * [3, 1]
     * > sumProduct([100, 0])
     * [100, 0]
     * > sumProduct([3, 5, 7])
     * [15, 105]
     * > sumProduct([10])
     * [10, 10]
     */
    public static List<Integer> sumProduct(List<Object> numbers) {
    }
}
","// SumProductTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumProduct}.
* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.
*/
class SumProductTest {","// SumProduct.java
package scenario3;

import java.util.List;
import java.util.ArrayList;

class SumProduct {

    /**
     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
     * Empty sum should be equal to 0 and empty product should be equal to 1.
     *
     * > sumProduct([1, 2, 3, 4])
     * [10, 24]
     * > sumProduct([])
     * [0, 1]
     * > sumProduct([1, 1, 1])
     * [3, 1]
     * > sumProduct([100, 0])
     * [100, 0]
     * > sumProduct([3, 5, 7])
     * [15, 105]
     * > sumProduct([10])
     * [10, 10]
     */
    public static List<Integer> sumProduct(List<Integer> numbers) {
        int sum = 0;
        int product = 1;
        for (int number : numbers) {
            sum += number;
            product *= number;
        }
        List<Integer> result = new ArrayList<>();
        result.add(sum);
        result.add(product);
        return result;
    }
}

// SumProductTest.java
package scenario3;

import java.util.List;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumProduct}.
* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.
*/
class SumProductTest {
    
    @Test
    void testSumProductWithPositiveNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        List<Integer> expected = new ArrayList<>();
        expected.add(10);
        expected.add(24);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithEmptyList() {
        List<Integer> numbers = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        expected.add(0);
        expected.add(1);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithSameNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(1);
        numbers.add(1);
        List<Integer> expected = new ArrayList<>();
        expected.add(3);
        expected.add(1);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithZero() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(100);
        numbers.add(0);
        List<Integer> expected = new ArrayList<>();
        expected.add(100);
        expected.add(0);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithOddNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(3);
        numbers.add(5);
        numbers.add(7);
        List<Integer> expected = new ArrayList<>();
        expected.add(15);
        expected.add(105);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithSingleNumber() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(10);
        List<Integer> expected = new ArrayList<>();
        expected.add(10);
        expected.add(10);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithNegativeNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(-1);
        numbers.add(-2);
        numbers.add(-3);
        numbers.add(-4);
        List<Integer> expected = new ArrayList<>();
        expected.add(-10);
        expected.add(-24);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithMixedNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(-1);
        numbers.add(2);
        numbers.add(-3);
        numbers.add(4);
        List<Integer> expected = new ArrayList<>();
        expected.add(2);
        expected.add(24);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithLargeNumbers() {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1000000);
        numbers.add(2000000);
        numbers.add(3000000);
        List<Integer> expected = new ArrayList<>();
        expected.add(6000000);
        expected.add(6000000000000000);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
    
    @Test
    void testSumProductWithNull() {
        List<Integer> numbers = null;
        List<Integer> expected = new ArrayList<>();
        expected.add(0);
        expected.add(1);
        assertEquals(expected, SumProduct.sumProduct(numbers));
    }
}"
chatcmpl-6yPrj7F9KX0L8KcMrVBw9xEFZ8hJa,/HumanEvalJava/src/main/java/scenario3/id_156.java,31.004392862319946,stop,"// IntToMiniRoman.java
package scenario3;

class IntToMiniRoman {

    /**
     * * Given a positive integer, obtain its roman numeral equivalent as a string,
     * and return it in lowercase.
     * Restrictions: 1 <= num <= 1000
     *
     * Examples:
     * >>> intToMiniRoman(19) == 'xix'
     * >>> intToMiniRoman(152) == 'clii'
     * >>> intToMiniRoman(426) == 'cdxxvi'
     *
     * > intToMiniRoman(19)
     * ""xix""
     * > intToMiniRoman(152)
     * ""clii""
     * > intToMiniRoman(251)
     * ""ccli""
     * > intToMiniRoman(426)
     * ""cdxxvi""
     * > intToMiniRoman(500)
     * ""d""
     * > intToMiniRoman(1)
     * ""i""
     * > intToMiniRoman(4)
     * ""iv""
     * > intToMiniRoman(43)
     * ""xliii""
     * > intToMiniRoman(90)
     * ""xc""
     * > intToMiniRoman(94)
     * ""xciv""
     * > intToMiniRoman(532)
     * ""dxxxii""
     * > intToMiniRoman(900)
     * ""cm""
     * > intToMiniRoman(994)
     * ""cmxciv""
     * > intToMiniRoman(1000)
     * ""m""
     */
    public static String intToMiniRoman(int number) {
    }
}
","// IntToMiniRomanTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntToMiniRoman}.
* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.
*/
class IntToMiniRomanTest {","// IntToMiniRoman.java
package scenario3;

class IntToMiniRoman {

    /**
     * * Given a positive integer, obtain its roman numeral equivalent as a string,
     * and return it in lowercase.
     * Restrictions: 1 <= num <= 1000
     *
     * Examples:
     * >>> intToMiniRoman(19) == 'xix'
     * >>> intToMiniRoman(152) == 'clii'
     * >>> intToMiniRoman(426) == 'cdxxvi'
     *
     * > intToMiniRoman(19)
     * ""xix""
     * > intToMiniRoman(152)
     * ""clii""
     * > intToMiniRoman(251)
     * ""ccli""
     * > intToMiniRoman(426)
     * ""cdxxvi""
     * > intToMiniRoman(500)
     * ""d""
     * > intToMiniRoman(1)
     * ""i""
     * > intToMiniRoman(4)
     * ""iv""
     * > intToMiniRoman(43)
     * ""xliii""
     * > intToMiniRoman(90)
     * ""xc""
     * > intToMiniRoman(94)
     * ""xciv""
     * > intToMiniRoman(532)
     * ""dxxxii""
     * > intToMiniRoman(900)
     * ""cm""
     * > intToMiniRoman(994)
     * ""cmxciv""
     * > intToMiniRoman(1000)
     * ""m""
     */
    public static String intToMiniRoman(int number) {
        String[] romanNumerals = {""m"", ""cm"", ""d"", ""cd"", ""c"", ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i""};
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < values.length; i++) {
            while (number >= values[i]) {
                result.append(romanNumerals[i]);
                number -= values[i];
            }
        }
        return result.toString();
    }
}

// IntToMiniRomanTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntToMiniRoman}.
* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.
*/
class IntToMiniRomanTest {
    @Test
    void testIntToMiniRoman() {
        assertEquals(""xix"", IntToMiniRoman.intToMiniRoman(19));
        assertEquals(""clii"", IntToMiniRoman.intToMiniRoman(152));
        assertEquals(""ccli"", IntToMiniRoman.intToMiniRoman(251));
        assertEquals(""cdxxvi"", IntToMiniRoman.intToMiniRoman(426));
        assertEquals(""d"", IntToMiniRoman.intToMiniRoman(500));
        assertEquals(""i"", IntToMiniRoman.intToMiniRoman(1));
        assertEquals(""iv"", IntToMiniRoman.intToMiniRoman(4));
        assertEquals(""xliii"", IntToMiniRoman.intToMiniRoman(43));
        assertEquals(""xc"", IntToMiniRoman.intToMiniRoman(90));
        assertEquals(""xciv"", IntToMiniRoman.intToMiniRoman(94));
        assertEquals(""dxxxii"", IntToMiniRoman.intToMiniRoman(532));
        assertEquals(""cm"", IntToMiniRoman.intToMiniRoman(900));
        assertEquals(""cmxciv"", IntToMiniRoman.intToMiniRoman(994));
        assertEquals(""m"", IntToMiniRoman.intToMiniRoman(1000));
    }
}"
chatcmpl-6yPsm6fTzEJNr8bgwhx6MXkZiuxzm,/HumanEvalJava/src/main/java/scenario3/id_101.java,37.29177451133728,stop,"// WordsString.java
package scenario3;

import java.util.List;

class WordsString {

    /**
     * * You will be given a string of words separated by commas or spaces. Your task is
     * to split the string into words and return an array of the words.
     *
     * For example:
     * wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     *
     * > wordsString(""Hi, my name is John"")
     * [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * > wordsString(""One, two, three, four, five, six"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString(""Hi, my name"")
     * [""Hi"", ""my"", ""name""]
     * > wordsString(""One,, two, three, four, five, six,"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString("""")
     * []
     * > wordsString(""ahmed     , gamal"")
     * [""ahmed"", ""gamal""]
     */
    public static List<Object> wordsString(String s) {
    }
}
","// WordsStringTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsString}.
* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.
*/
class WordsStringTest {","// WordsString.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class WordsString {

    /**
     * * You will be given a string of words separated by commas or spaces. Your task is
     * to split the string into words and return an array of the words.
     *
     * For example:
     * wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     *
     * > wordsString(""Hi, my name is John"")
     * [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * > wordsString(""One, two, three, four, five, six"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString(""Hi, my name"")
     * [""Hi"", ""my"", ""name""]
     * > wordsString(""One,, two, three, four, five, six,"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString("""")
     * []
     * > wordsString(""ahmed     , gamal"")
     * [""ahmed"", ""gamal""]
     */
    public static List<String> wordsString(String s) {
        if (s == null || s.isEmpty()) {
            return Arrays.asList();
        }
        return Arrays.stream(s.split(""[,\\s]+""))
                .filter(word -> !word.isEmpty())
                .collect(Collectors.toList());
    }
}

// WordsStringTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsString}.
* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.
*/
class WordsStringTest {

    @Test
    void testWordsStringWithCommas() {
        String input = ""Hi, my name is John"";
        List<String> expectedOutput = Arrays.asList(""Hi"", ""my"", ""name"", ""is"", ""John"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithCommasAndSpaces() {
        String input = ""One, two, three, four, five, six"";
        List<String> expectedOutput = Arrays.asList(""One"", ""two"", ""three"", ""four"", ""five"", ""six"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithIncompleteSentence() {
        String input = ""Hi, my name"";
        List<String> expectedOutput = Arrays.asList(""Hi"", ""my"", ""name"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithExtraCommas() {
        String input = ""One,, two, three, four, five, six,"";
        List<String> expectedOutput = Arrays.asList(""One"", ""two"", ""three"", ""four"", ""five"", ""six"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithEmptyString() {
        String input = """";
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithExtraSpaces() {
        String input = ""ahmed     , gamal"";
        List<String> expectedOutput = Arrays.asList(""ahmed"", ""gamal"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithNullInput() {
        String input = null;
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithSingleWord() {
        String input = ""Hello"";
        List<String> expectedOutput = Arrays.asList(""Hello"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithMultipleSpaces() {
        String input = ""   Hello    World   "";
        List<String> expectedOutput = Arrays.asList(""Hello"", ""World"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }

    @Test
    void testWordsStringWithMultipleCommas() {
        String input = "",,Hello,,World,,"";
        List<String> expectedOutput = Arrays.asList(""Hello"", ""World"");
        assertEquals(expectedOutput, WordsString.wordsString(input));
    }
}"
chatcmpl-6yPtpGipECfU99UIX5rLJhKLuEuNU,/HumanEvalJava/src/main/java/scenario3/id_117.java,33.480616331100464,stop,"// SelectWords.java
package scenario3;

import java.util.List;

class SelectWords {

    /**
     * Given a string s and a natural number n, you have been tasked to implement
     * a function that returns a list of all words from string s that contain exactly
     * n consonants, in order these words appear in the string s.
     * If the string s is empty then the function should return an empty list.
     * Note: you may assume the input string contains only letters and spaces.
     * Examples:
     * selectWords(""Mary had a little lamb"", 4) ==> [""little""]
     * selectWords(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
     * selectWords(""simple white space"", 2) ==> []
     * selectWords(""Hello world"", 4) ==> [""world""]
     * selectWords(""Uncle sam"", 3) ==> [""Uncle""]
     *
     * > selectWords(""Mary had a little lamb"", 4)
     * [""little""]
     * > selectWords(""Mary had a little lamb"", 3)
     * [""Mary"", ""lamb""]
     * > selectWords(""simple white space"", 2)
     * []
     * > selectWords(""Hello world"", 4)
     * [""world""]
     * > selectWords(""Uncle sam"", 3)
     * [""Uncle""]
     * > selectWords("""", 4)
     * []
     * > selectWords(""a b c d e f"", 1)
     * [""b"", ""c"", ""d"", ""f""]
     */
    public static List<Object> selectWords(String s, int n) {
    }
}
","// SelectWordsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SelectWords}.
* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.
*/
class SelectWordsTest {","// SelectWords.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class SelectWords {

    /**
     * Given a string s and a natural number n, you have been tasked to implement
     * a function that returns a list of all words from string s that contain exactly
     * n consonants, in order these words appear in the string s.
     * If the string s is empty then the function should return an empty list.
     * Note: you may assume the input string contains only letters and spaces.
     * Examples:
     * selectWords(""Mary had a little lamb"", 4) ==> [""little""]
     * selectWords(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
     * selectWords(""simple white space"", 2) ==> []
     * selectWords(""Hello world"", 4) ==> [""world""]
     * selectWords(""Uncle sam"", 3) ==> [""Uncle""]
     *
     * > selectWords(""Mary had a little lamb"", 4)
     * [""little""]
     * > selectWords(""Mary had a little lamb"", 3)
     * [""Mary"", ""lamb""]
     * > selectWords(""simple white space"", 2)
     * []
     * > selectWords(""Hello world"", 4)
     * [""world""]
     * > selectWords(""Uncle sam"", 3)
     * [""Uncle""]
     * > selectWords("""", 4)
     * []
     * > selectWords(""a b c d e f"", 1)
     * [""b"", ""c"", ""d"", ""f""]
     */
    public static List<String> selectWords(String s, int n) {
        List<String> result = new ArrayList<>();
        if (s.isEmpty()) {
            return result;
        }
        String[] words = s.split("" "");
        for (String word : words) {
            int consonantCount = 0;
            for (char c : word.toCharArray()) {
                if (isConsonant(c)) {
                    consonantCount++;
                }
            }
            if (consonantCount == n) {
                result.add(word);
            }
        }
        return result;
    }

    private static boolean isConsonant(char c) {
        return !Arrays.asList('a', 'e', 'i', 'o', 'u').contains(Character.toLowerCase(c)) && Character.isLetter(c);
    }
}

// SelectWordsTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SelectWords}.
* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.
*/
class SelectWordsTest {

    @Test
    void testSelectWordsWithValidInput() {
        List<String> expected = Arrays.asList(""little"");
        List<String> actual = SelectWords.selectWords(""Mary had a little lamb"", 4);
        assertEquals(expected, actual);

        expected = Arrays.asList(""Mary"", ""lamb"");
        actual = SelectWords.selectWords(""Mary had a little lamb"", 3);
        assertEquals(expected, actual);

        expected = Arrays.asList();
        actual = SelectWords.selectWords(""simple white space"", 2);
        assertEquals(expected, actual);

        expected = Arrays.asList(""world"");
        actual = SelectWords.selectWords(""Hello world"", 4);
        assertEquals(expected, actual);

        expected = Arrays.asList(""Uncle"");
        actual = SelectWords.selectWords(""Uncle sam"", 3);
        assertEquals(expected, actual);

        expected = Arrays.asList(""b"", ""c"", ""d"", ""f"");
        actual = SelectWords.selectWords(""a b c d e f"", 1);
        assertEquals(expected, actual);
    }

    @Test
    void testSelectWordsWithEmptyString() {
        List<String> expected = Arrays.asList();
        List<String> actual = SelectWords.selectWords("""", 4);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yPusnwp3QEufJcdUSXrnHop3xxk2,/HumanEvalJava/src/main/java/scenario3/id_95.java,36.99772787094116,stop,"// CheckDictCase.java
package scenario3;

class CheckDictCase {

    /**
     * * Given a dictionary, return True if all keys are strings in lower
     * case or all keys are strings in upper case, else return False.
     * The function should return False is the given dictionary is empty.
     * Examples:
     * check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
     * check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
     * check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
     * check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
     * check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
     *
     * > checkDictCase({""p"": ""pineapple"", ""b"": ""banana""})
     * true
     * > checkDictCase({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""})
     * false
     * > checkDictCase({""p"": ""pineapple"", 5: ""banana"", ""a"": ""apple""})
     * false
     * > checkDictCase({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
     * false
     * > checkDictCase({""STATE"": ""NC"", ""ZIP"": ""12345""})
     * true
     * > checkDictCase({""fruit"": ""Orange"", ""taste"": ""Sweet""})
     * true
     * > checkDictCase({})
     * false
     */
    public static Boolean checkDictCase(Object dict) {
    }
}
","// CheckDictCaseTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckDictCase}.
* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Object)} method.
*/
class CheckDictCaseTest {","// CheckDictCase.java
package scenario3;

import java.util.Map;

class CheckDictCase {

    /**
     * * Given a dictionary, return True if all keys are strings in lower
     * case or all keys are strings in upper case, else return False.
     * The function should return False is the given dictionary is empty.
     * Examples:
     * check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
     * check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
     * check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
     * check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
     * check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
     *
     * > checkDictCase({""p"": ""pineapple"", ""b"": ""banana""})
     * true
     * > checkDictCase({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""})
     * false
     * > checkDictCase({""p"": ""pineapple"", 5: ""banana"", ""a"": ""apple""})
     * false
     * > checkDictCase({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
     * false
     * > checkDictCase({""STATE"": ""NC"", ""ZIP"": ""12345""})
     * true
     * > checkDictCase({""fruit"": ""Orange"", ""taste"": ""Sweet""})
     * true
     * > checkDictCase({})
     * false
     */
    public static boolean checkDictCase(Map<Object, Object> dict) {
        if (dict.isEmpty()) {
            return false;
        }
        boolean isLowerCase = true;
        boolean isUpperCase = true;
        for (Object key : dict.keySet()) {
            if (!(key instanceof String)) {
                return false;
            }
            String strKey = (String) key;
            if (!strKey.equals(strKey.toLowerCase())) {
                isLowerCase = false;
            }
            if (!strKey.equals(strKey.toUpperCase())) {
                isUpperCase = false;
            }
            if (!isLowerCase && !isUpperCase) {
                return false;
            }
        }
        return true;
    }
}

// CheckDictCaseTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckDictCase}.
* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Map)} method.
*/
class CheckDictCaseTest {

    @Test
    void testEmptyDict() {
        assertFalse(CheckDictCase.checkDictCase(Map.of()));
    }

    @Test
    void testAllLowerCase() {
        assertTrue(CheckDictCase.checkDictCase(Map.of(""p"", ""pineapple"", ""b"", ""banana"")));
    }

    @Test
    void testAllUpperCase() {
        assertTrue(CheckDictCase.checkDictCase(Map.of(""STATE"", ""NC"", ""ZIP"", ""12345"")));
    }

    @Test
    void testMixedCase() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""p"", ""pineapple"", ""A"", ""banana"", ""B"", ""banana"")));
    }

    @Test
    void testNonStringKey() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""p"", ""pineapple"", 5, ""banana"", ""a"", ""apple"")));
    }

    @Test
    void testDuplicateKeys() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""a"", ""apple"", ""A"", ""banana"", ""B"", ""banana"")));
    }

    @Test
    void testAllKeysLowerCaseWithOneUpperCase() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""fruit"", ""Orange"", ""taste"", ""Sweet"")));
    }

    @Test
    void testAllKeysUpperCaseWithOneLowerCase() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston"")));
    }

    @Test
    void testAllKeysLowerCaseWithDuplicateUpperCase() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""fruit"", ""Orange"", ""taste"", ""Sweet"", ""TASTE"", ""SOUR"")));
    }

    @Test
    void testAllKeysUpperCaseWithDuplicateLowerCase() {
        assertFalse(CheckDictCase.checkDictCase(Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston"", ""city"", ""Austin"")));
    }
}"
chatcmpl-6yPvvNbItoYIMcgMPi3IDEMJc6YJy,/HumanEvalJava/src/main/java/scenario3/id_140.java,37.05828070640564,stop,"// FixSpaces.java
package scenario3;

class FixSpaces {

    /**
     * * Given a string text, replace all spaces in it with underscores,
     * and if a string has more than 2 consecutive spaces,
     * then replace all consecutive spaces with -
     *
     * fixSpaces(""Example"") == ""Example""
     * fixSpaces(""Example 1"") == ""Example_1""
     * fixSpaces("" Example 2"") == ""_Example_2""
     * fixSpaces("" Example   3"") == ""_Example-3""
     *
     * > fixSpaces(""Example"")
     * ""Example""
     * > fixSpaces(""Mudasir Hanif "")
     * ""Mudasir_Hanif_""
     * > fixSpaces(""Yellow Yellow  Dirty  Fellow"")
     * ""Yellow_Yellow__Dirty__Fellow""
     * > fixSpaces(""Exa   mple"")
     * ""Exa-mple""
     * > fixSpaces(""   Exa 1 2 2 mple"")
     * ""-Exa_1_2_2_mple""
     */
    public static String fixSpaces(String text) {
    }
}
","// FixSpacesTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FixSpaces}.
* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
*/
class FixSpacesTest {","Here's the completed code for the `FixSpaces` class and `FixSpacesTest` class:

```
// FixSpaces.java
package scenario3;

class FixSpaces {

    /**
     * Given a string text, replace all spaces in it with underscores,
     * and if a string has more than 2 consecutive spaces,
     * then replace all consecutive spaces with -
     *
     * fixSpaces(""Example"") == ""Example""
     * fixSpaces(""Example 1"") == ""Example_1""
     * fixSpaces("" Example 2"") == ""_Example_2""
     * fixSpaces("" Example   3"") == ""_Example-3""
     *
     * > fixSpaces(""Example"")
     * ""Example""
     * > fixSpaces(""Mudasir Hanif "")
     * ""Mudasir_Hanif_""
     * > fixSpaces(""Yellow Yellow  Dirty  Fellow"")
     * ""Yellow_Yellow__Dirty__Fellow""
     * > fixSpaces(""Exa   mple"")
     * ""Exa-mple""
     * > fixSpaces(""   Exa 1 2 2 mple"")
     * ""-Exa_1_2_2_mple""
     */
    public static String fixSpaces(String text) {
        StringBuilder sb = new StringBuilder();
        int consecutiveSpaces = 0;
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (c == ' ') {
                consecutiveSpaces++;
                if (consecutiveSpaces > 2) {
                    sb.append('-');
                } else {
                    sb.append('_');
                }
            } else {
                consecutiveSpaces = 0;
                sb.append(c);
            }
        }
        return sb.toString();
    }
}

// FixSpacesTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link FixSpaces}.
 * It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
 */
class FixSpacesTest {

    @Test
    void testFixSpacesWithNoSpaces() {
        String input = ""Example"";
        String expectedOutput = ""Example"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithOneSpace() {
        String input = ""Example 1"";
        String expectedOutput = ""Example_1"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithLeadingSpace() {
        String input = "" Example 2"";
        String expectedOutput = ""_Example_2"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithMultipleSpaces() {
        String input = "" Example   3"";
        String expectedOutput = ""_Example-3"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithTrailingSpace() {
        String input = ""Mudasir Hanif "";
        String expectedOutput = ""Mudasir_Hanif_"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithConsecutiveSpaces() {
        String input = ""Yellow Yellow  Dirty  Fellow"";
        String expectedOutput = ""Yellow_Yellow__Dirty__Fellow"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithConsecutiveSpacesAtStart() {
        String input = ""   Exa 1 2 2 mple"";
        String expectedOutput = ""-Exa_1_2_2_mple"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithConsecutiveSpacesAtEnd() {
        String input = ""Exa   mple   "";
        String expectedOutput = ""Exa-mple_"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithOnlySpaces() {
        String input = ""   "";
        String expectedOutput = ""-"";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testFixSpacesWithEmptyString() {
        String input = """";
        String expectedOutput = """";
        String actualOutput = FixSpaces.fixSpaces(input);
        assertEquals(expectedOutput, actualOutput);
    }
}
```"
chatcmpl-6yPwyHcgjaaif0FDWzsYQPuE5IdlT,/HumanEvalJava/src/main/java/scenario3/id_137.java,39.41842818260193,stop,"// CompareOne.java
package scenario3;

class CompareOne {

    /**
     * Create a function that takes integers, floats, or strings representing
     * real numbers, and returns the larger variable in its given variable type.
     * Return null if the values are equal.
     * Note: If a real number is represented as a string, the floating point might be . or ,
     *
     * compareOne(1, 2.5) ➞ 2.5
     * compareOne(1, ""2,3"") ➞ ""2,3""
     * compareOne(""5,1"", ""6"") ➞ ""6""
     * compareOne(""1"", 1) ➞ None
     *
     * > compareOne(1, 2)
     * 2
     * > compareOne(1, 2.5)
     * 2.5
     * > compareOne(2, 3)
     * 3
     * > compareOne(5, 6)
     * 6
     * > compareOne(1, ""2,3"")
     * ""2,3""
     * > compareOne(""5,1"", ""6"")
     * ""6""
     * > compareOne(""1"", ""2"")
     * ""2""
     * > compareOne(""1"", 1)
     * null
     */
    public static Object compareOne(Object a, Object b) {
    }
}
","// CompareOneTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {","// CompareOne.java
package scenario3;

class CompareOne {

    /**
     * Create a function that takes integers, floats, or strings representing
     * real numbers, and returns the larger variable in its given variable type.
     * Return null if the values are equal.
     * Note: If a real number is represented as a string, the floating point might be . or ,
     *
     * compareOne(1, 2.5) ➞ 2.5
     * compareOne(1, ""2,3"") ➞ ""2,3""
     * compareOne(""5,1"", ""6"") ➞ ""6""
     * compareOne(""1"", 1) ➞ None
     *
     * > compareOne(1, 2)
     * 2
     * > compareOne(1, 2.5)
     * 2.5
     * > compareOne(2, 3)
     * 3
     * > compareOne(5, 6)
     * 6
     * > compareOne(1, ""2,3"")
     * ""2,3""
     * > compareOne(""5,1"", ""6"")
     * ""6""
     * > compareOne(""1"", ""2"")
     * ""2""
     * > compareOne(""1"", 1)
     * null
     */
    public static Object compareOne(Object a, Object b) {
        if (a instanceof String && b instanceof String) {
            String strA = (String) a;
            String strB = (String) b;
            strA = strA.replace(',', '.');
            strB = strB.replace(',', '.');
            double doubleA = Double.parseDouble(strA);
            double doubleB = Double.parseDouble(strB);
            if (doubleA > doubleB) {
                return a;
            } else if (doubleB > doubleA) {
                return b;
            } else {
                return null;
            }
        } else if (a instanceof String) {
            String strA = (String) a;
            strA = strA.replace(',', '.');
            double doubleA = Double.parseDouble(strA);
            if (doubleA > (double) b) {
                return a;
            } else if ((double) b > doubleA) {
                return b;
            } else {
                return null;
            }
        } else if (b instanceof String) {
            String strB = (String) b;
            strB = strB.replace(',', '.');
            double doubleB = Double.parseDouble(strB);
            if ((double) a > doubleB) {
                return a;
            } else if (doubleB > (double) a) {
                return b;
            } else {
                return null;
            }
        } else {
            if ((double) a > (double) b) {
                return a;
            } else if ((double) b > (double) a) {
                return b;
            } else {
                return null;
            }
        }
    }
}

// CompareOneTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
    @Test
    void testCompareOneIntegers() {
        assertEquals(2, CompareOne.compareOne(1, 2));
        assertEquals(2, CompareOne.compareOne(2, 1));
        assertNull(CompareOne.compareOne(1, 1));
    }

    @Test
    void testCompareOneFloats() {
        assertEquals(2.5, CompareOne.compareOne(1.5, 2.5));
        assertEquals(2.5, CompareOne.compareOne(2.5, 1.5));
        assertNull(CompareOne.compareOne(1.5, 1.5));
    }

    @Test
    void testCompareOneStrings() {
        assertEquals(""2.3"", CompareOne.compareOne(""1.5"", ""2.3""));
        assertEquals(""2.3"", CompareOne.compareOne(""2.3"", ""1.5""));
        assertEquals(""2.3"", CompareOne.compareOne(""2,3"", ""1.5""));
        assertEquals(""2,3"", CompareOne.compareOne(""1.5"", ""2,3""));
        assertNull(CompareOne.compareOne(""1.5"", ""1.5""));
    }

    @Test
    void testCompareOneMixed() {
        assertEquals(""2.3"", CompareOne.compareOne(""1.5"", ""2,3""));
        assertEquals(""2.3"", CompareOne.compareOne(""2,3"", ""1.5""));
        assertEquals(2, CompareOne.compareOne(""2"", 1));
        assertEquals(2, CompareOne.compareOne(1, ""2""));
        assertNull(CompareOne.compareOne(""1"", 1));
    }
}"
chatcmpl-6yPy10aLLyEum6lVzk8fpChrVT5nu,/HumanEvalJava/src/main/java/scenario3/id_121.java,28.41741418838501,stop,"// Solution.java
package scenario3;

import java.util.List;

class Solution {

    /**
     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
     *
     * Examples
     * solution([5, 8, 7, 1]) ==> 12
     * solution([3, 3, 3, 3, 3]) ==> 9
     * solution([30, 13, 24, 321]) ==>0
     *
     * > solution([3, 3, 3, 3, 3])
     * 9
     * > solution([30, 13, 24, 321])
     * 0
     * > solution([5, 9])
     * 5
     * > solution([2, 4, 8])
     * 0
     * > solution([30, 13, 23, 32])
     * 23
     * > solution([3, 13, 2, 9])
     * 3
     */
    public static int solution(List<Integer> lst) {
    }
}
","// SolutionTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solution}.
* It contains ten unit test cases for the {@link Solution#solution(List)} method.
*/
class SolutionTest {","// Solution.java
package scenario3;

import java.util.List;

class Solution {

    /**
     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
     *
     * Examples
     * solution([5, 8, 7, 1]) ==> 12
     * solution([3, 3, 3, 3, 3]) ==> 9
     * solution([30, 13, 24, 321]) ==>0
     *
     * > solution([3, 3, 3, 3, 3])
     * 9
     * > solution([30, 13, 24, 321])
     * 0
     * > solution([5, 9])
     * 5
     * > solution([2, 4, 8])
     * 0
     * > solution([30, 13, 23, 32])
     * 23
     * > solution([3, 13, 2, 9])
     * 3
     */
    public static int solution(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i += 2) {
            if (i % 2 == 0 && lst.get(i) % 2 != 0) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}

// SolutionTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solution}.
* It contains ten unit test cases for the {@link Solution#solution(List)} method.
*/
class SolutionTest {

    @Test
    void testSolution() {
        List<Integer> lst1 = Arrays.asList(5, 8, 7, 1);
        assertEquals(12, Solution.solution(lst1));

        List<Integer> lst2 = Arrays.asList(3, 3, 3, 3, 3);
        assertEquals(9, Solution.solution(lst2));

        List<Integer> lst3 = Arrays.asList(30, 13, 24, 321);
        assertEquals(0, Solution.solution(lst3));

        List<Integer> lst4 = Arrays.asList(5, 9);
        assertEquals(5, Solution.solution(lst4));

        List<Integer> lst5 = Arrays.asList(2, 4, 8);
        assertEquals(0, Solution.solution(lst5));

        List<Integer> lst6 = Arrays.asList(30, 13, 23, 32);
        assertEquals(23, Solution.solution(lst6));

        List<Integer> lst7 = Arrays.asList(3, 13, 2, 9);
        assertEquals(3, Solution.solution(lst7));

        List<Integer> lst8 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        assertEquals(16, Solution.solution(lst8));

        List<Integer> lst9 = Arrays.asList(2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
        assertEquals(15, Solution.solution(lst9));

        List<Integer> lst10 = Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        assertEquals(0, Solution.solution(lst10));
    }
}"
chatcmpl-6yPz4E5dyKJCLOU011gMfQrdTEnL0,/HumanEvalJava/src/main/java/scenario3/id_4.java,18.38596820831299,stop,"// MeanAbsoluteDeviation.java
package scenario3;

import java.util.List;

class MeanAbsoluteDeviation {

    /**
     * For a given list of input numbers, calculate Mean Absolute Deviation
     * around the mean of this dataset.
     * Mean Absolute Deviation is the average absolute difference between each
     * element and a centerpoint (mean in this case):
     * MAD = average | x - x_mean |
     *
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0])
     * 0.6666666666666666
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
     * 1.0
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])
     * 1.2
     */
    public static Double meanAbsoluteDeviation(List<Double> numbers) {
    }
}
","// MeanAbsoluteDeviationTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MeanAbsoluteDeviation}.
* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.
*/
class MeanAbsoluteDeviationTest {","// MeanAbsoluteDeviation.java
package scenario3;

import java.util.List;

class MeanAbsoluteDeviation {

    /**
     * For a given list of input numbers, calculate Mean Absolute Deviation
     * around the mean of this dataset.
     * Mean Absolute Deviation is the average absolute difference between each
     * element and a centerpoint (mean in this case):
     * MAD = average | x - x_mean |
     *
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0])
     * 0.6666666666666666
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
     * 1.0
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])
     * 1.2
     */
    public static Double meanAbsoluteDeviation(List<Double> numbers) {
        double sum = 0;
        double mean = 0;
        double mad = 0;
        int size = numbers.size();
        for (double num : numbers) {
            sum += num;
        }
        mean = sum / size;
        for (double num : numbers) {
            mad += Math.abs(num - mean);
        }
        return mad / size;
    }
}

// MeanAbsoluteDeviationTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MeanAbsoluteDeviation}.
* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.
*/
class MeanAbsoluteDeviationTest {
    
    @Test
    void testMeanAbsoluteDeviation() {
        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0);
        List<Double> numbers2 = Arrays.asList(1.0, 2.0, 3.0, 4.0);
        List<Double> numbers3 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
        assertEquals(0.6666666666666666, MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers1));
        assertEquals(1.0, MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers2));
        assertEquals(1.2, MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers3));
    }
}"
chatcmpl-6yQ078N9Vbbe9L47HBY0PhhMeY5zZ,/HumanEvalJava/src/main/java/scenario3/id_60.java,21.631385326385498,stop,"// SumToN.java
package scenario3;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
    }
}
","// SumToNTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {","// SumToN.java
package scenario3;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}

// SumToNTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {
    @Test
    void testSumToNWith5() {
        assertEquals(15, SumToN.sumToN(5));
    }

    @Test
    void testSumToNWith10() {
        assertEquals(55, SumToN.sumToN(10));
    }

    @Test
    void testSumToNWith1() {
        assertEquals(1, SumToN.sumToN(1));
    }

    @Test
    void testSumToNWith6() {
        assertEquals(21, SumToN.sumToN(6));
    }

    @Test
    void testSumToNWith11() {
        assertEquals(66, SumToN.sumToN(11));
    }

    @Test
    void testSumToNWith30() {
        assertEquals(465, SumToN.sumToN(30));
    }

    @Test
    void testSumToNWith100() {
        assertEquals(5050, SumToN.sumToN(100));
    }

    @Test
    void testSumToNWithNegativeNumber() {
        assertEquals(0, SumToN.sumToN(-5));
    }

    @Test
    void testSumToNWithZero() {
        assertEquals(0, SumToN.sumToN(0));
    }

    @Test
    void testSumToNWithLargeNumber() {
        assertEquals(50005000, SumToN.sumToN(10000));
    }
}"
chatcmpl-6yQ1ABj0PGkSak7FU0IdtOTwx4x4N,/HumanEvalJava/src/main/java/scenario3/id_37.java,47.718072175979614,stop,"// SortEven.java
package scenario3;

import java.util.List;

class SortEven {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the odd indices, while its values at the even indices are equal
     * to the values of the even indices of l, but sorted.
     *
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 6, 3, 4])
     * [3, 6, 5, 4]
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]
     * > sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]
     */
    public static List<Integer> sortEven(List<Integer> l) {
    }
}
","// SortEvenTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortEven}.
* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.
*/
class SortEvenTest {","// SortEven.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortEven {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the odd indices, while its values at the even indices are equal
     * to the values of the even indices of l, but sorted.
     *
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 6, 3, 4])
     * [3, 6, 5, 4]
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]
     * > sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]
     */
    public static List<Integer> sortEven(List<Integer> l) {
        List<Integer> evenList = new ArrayList<>();
        for (int i = 0; i < l.size(); i += 2) {
            evenList.add(l.get(i));
        }
        Collections.sort(evenList);
        List<Integer> result = new ArrayList<>();
        int evenIndex = 0;
        for (int i = 0; i < l.size(); i++) {
            if (i % 2 == 0) {
                result.add(evenList.get(evenIndex));
                evenIndex++;
            } else {
                result.add(l.get(i));
            }
        }
        return result;
    }
}

// SortEvenTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortEven}.
* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.
*/
class SortEvenTest {
    @Test
    void testSortEven() {
        List<Integer> l1 = Arrays.asList(1, 2, 3);
        List<Integer> l2 = Arrays.asList(5, 6, 3, 4);
        List<Integer> l3 = Arrays.asList(1, 2, 3);
        List<Integer> l4 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
        List<Integer> l5 = Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10);
        List<Integer> l6 = Arrays.asList(1, 3, 5, 7, 9);
        List<Integer> l7 = Arrays.asList(2, 4, 6, 8, 10);
        List<Integer> l8 = Arrays.asList(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);
        List<Integer> l9 = Arrays.asList(2, 4, 6, 8, 10, 1, 3, 5, 7, 9);
        List<Integer> l10 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> expected1 = Arrays.asList(1, 2, 3);
        List<Integer> expected2 = Arrays.asList(3, 6, 5, 4);
        List<Integer> expected3 = Arrays.asList(1, 2, 3);
        List<Integer> expected4 = Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123);
        List<Integer> expected5 = Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10);
        List<Integer> expected6 = Arrays.asList(1, 4, 5, 8, 9);
        List<Integer> expected7 = Arrays.asList(2, 4, 6, 8, 10);
        List<Integer> expected8 = Arrays.asList(1, 4, 5, 8, 9, 2, 4, 6, 8, 10);
        List<Integer> expected9 = Arrays.asList(2, 4, 6, 8, 10, 1, 3, 5, 7, 9);
        List<Integer> expected10 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        assertEquals(expected1, SortEven.sortEven(l1));
        assertEquals(expected2, SortEven.sortEven(l2));
        assertEquals(expected3, SortEven.sortEven(l3));
        assertEquals(expected4, SortEven.sortEven(l4));
        assertEquals(expected5, SortEven.sortEven(l5));
        assertEquals(expected6, SortEven.sortEven(l6));
        assertEquals(expected7, SortEven.sortEven(l7));
        assertEquals(expected8, SortEven.sortEven(l8));
        assertEquals(expected9, SortEven.sortEven(l9));
        assertEquals(expected10, SortEven.sortEven(l10));
    }
}"
chatcmpl-6yQ2DRlwkVV6LVuIzAA44weFB4Cj3,/HumanEvalJava/src/main/java/scenario3/id_21.java,48.38074231147766,stop,"// RescaleToUnit.java
package scenario3;

import java.util.List;

class RescaleToUnit {

    /**
     * Given list of numbers (of at least two elements), apply a linear transform to that list,
     * such that the smallest number will become 0 and the largest will become 1
     *
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 49.9])
     * [0.0, 1.0]
     * > rescaleToUnit([100.0, 49.9])
     * [1.0, 0.0]
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     * > rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     */
    public static List<Double> rescaleToUnit(List<Double> numbers) {
    }
}
","// RescaleToUnitTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RescaleToUnit}.
* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.
*/
class RescaleToUnitTest {","// RescaleToUnit.java
package scenario3;

import java.util.Collections;
import java.util.List;

class RescaleToUnit {

    /**
     * Given list of numbers (of at least two elements), apply a linear transform to that list,
     * such that the smallest number will become 0 and the largest will become 1
     *
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 49.9])
     * [0.0, 1.0]
     * > rescaleToUnit([100.0, 49.9])
     * [1.0, 0.0]
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     * > rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     */
    public static List<Double> rescaleToUnit(List<Double> numbers) {
        if (numbers == null || numbers.size() < 2) {
            throw new IllegalArgumentException(""List must contain at least two elements"");
        }
        double min = Collections.min(numbers);
        double max = Collections.max(numbers);
        double range = max - min;
        if (range == 0) {
            return Collections.nCopies(numbers.size(), 0.5);
        }
        for (int i = 0; i < numbers.size(); i++) {
            double value = numbers.get(i);
            double scaledValue = (value - min) / range;
            numbers.set(i, scaledValue);
        }
        return numbers;
    }
}

// RescaleToUnitTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RescaleToUnit}.
* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.
*/
class RescaleToUnitTest {
    
    @Test
    void testRescaleToUnit() {
        List<Double> input1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
        List<Double> expectedOutput1 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);
        assertEquals(expectedOutput1, RescaleToUnit.rescaleToUnit(input1));
        
        List<Double> input2 = Arrays.asList(2.0, 49.9);
        List<Double> expectedOutput2 = Arrays.asList(0.0, 1.0);
        assertEquals(expectedOutput2, RescaleToUnit.rescaleToUnit(input2));
        
        List<Double> input3 = Arrays.asList(100.0, 49.9);
        List<Double> expectedOutput3 = Arrays.asList(1.0, 0.0);
        assertEquals(expectedOutput3, RescaleToUnit.rescaleToUnit(input3));
        
        List<Double> input4 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);
        List<Double> expectedOutput4 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);
        assertEquals(expectedOutput4, RescaleToUnit.rescaleToUnit(input4));
        
        List<Double> input5 = Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0);
        List<Double> expectedOutput5 = Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75);
        assertEquals(expectedOutput5, RescaleToUnit.rescaleToUnit(input5));
        
        List<Double> input6 = Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0);
        List<Double> expectedOutput6 = Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75);
        assertEquals(expectedOutput6, RescaleToUnit.rescaleToUnit(input6));
        
        List<Double> input7 = Arrays.asList(1.0, 1.0, 1.0, 1.0);
        List<Double> expectedOutput7 = Arrays.asList(0.0, 0.0, 0.0, 0.0);
        assertEquals(expectedOutput7, RescaleToUnit.rescaleToUnit(input7));
        
        List<Double> input8 = Arrays.asList(1.0, 1.0, 2.0, 2.0);
        List<Double> expectedOutput8 = Arrays.asList(0.0, 0.0, 1.0, 1.0);
        assertEquals(expectedOutput8, RescaleToUnit.rescaleToUnit(input8));
        
        List<Double> input9 = Arrays.asList(1.0, 2.0);
        List<Double> expectedOutput9 = Arrays.asList(0.0, 1.0);
        assertEquals(expectedOutput9, RescaleToUnit.rescaleToUnit(input9));
        
        List<Double> input10 = Arrays.asList(1.0, 1.0);
        List<Double> expectedOutput10 = Arrays.asList(0.5, 0.5);
        assertEquals(expectedOutput10, RescaleToUnit.rescaleToUnit(input10));
    }
}"
chatcmpl-6yQ3G0EjN15lVp2UbYP2RehJdM15Z,/HumanEvalJava/src/main/java/scenario3/id_99.java,24.025656700134277,stop,"// ClosestInteger.java
package scenario3;

class ClosestInteger {

    /**
     * * Create a function that takes a value (string) representing a number
     * and returns the closest integer to it. If the number is equidistant
     * from two integers, round it away from zero.
     *
     * Examples
     * >>> closestInteger(""10"")
     * 10
     * >>> closestInteger(""15.3"")
     * 15
     *
     * Note:
     * Rounding away from zero means that if the given number is equidistant
     * from two integers, the one you should return is the one that is the
     * farthest from zero. For example closest_integer(""14.5"") should
     * return 15 and closest_integer(""-14.5"") should return -15.
     *
     * > closestInteger(""10"")
     * 10
     * > closestInteger(""14.5"")
     * 15
     * > closestInteger(""-15.5"")
     * -16
     * > closestInteger(""15.3"")
     * 15
     * > closestInteger(""0"")
     * 0
     */
    public static int closestInteger(String value) {
    }
}
","// ClosestIntegerTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClosestInteger}.
* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.
*/
class ClosestIntegerTest {","// ClosestInteger.java
package scenario3;

class ClosestInteger {

    /**
     * * Create a function that takes a value (string) representing a number
     * and returns the closest integer to it. If the number is equidistant
     * from two integers, round it away from zero.
     *
     * Examples
     * >>> closestInteger(""10"")
     * 10
     * >>> closestInteger(""15.3"")
     * 15
     *
     * Note:
     * Rounding away from zero means that if the given number is equidistant
     * from two integers, the one you should return is the one that is the
     * farthest from zero. For example closest_integer(""14.5"") should
     * return 15 and closest_integer(""-14.5"") should return -15.
     *
     * > closestInteger(""10"")
     * 10
     * > closestInteger(""14.5"")
     * 15
     * > closestInteger(""-15.5"")
     * -16
     * > closestInteger(""15.3"")
     * 15
     * > closestInteger(""0"")
     * 0
     */
    public static int closestInteger(String value) {
        double num = Double.parseDouble(value);
        int rounded = (int) Math.round(num);
        if (num == rounded) {
            return rounded;
        } else if (num > 0) {
            return (int) Math.ceil(num);
        } else {
            return (int) Math.floor(num);
        }
    }
}

// ClosestIntegerTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClosestInteger}.
* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.
*/
class ClosestIntegerTest {
    @Test
    void testClosestInteger1() {
        assertEquals(10, ClosestInteger.closestInteger(""10""));
    }

    @Test
    void testClosestInteger2() {
        assertEquals(15, ClosestInteger.closestInteger(""15.3""));
    }

    @Test
    void testClosestInteger3() {
        assertEquals(15, ClosestInteger.closestInteger(""14.5""));
    }

    @Test
    void testClosestInteger4() {
        assertEquals(-15, ClosestInteger.closestInteger(""-15.5""));
    }

    @Test
    void testClosestInteger5() {
        assertEquals(15, ClosestInteger.closestInteger(""15.5""));
    }

    @Test
    void testClosestInteger6() {
        assertEquals(-15, ClosestInteger.closestInteger(""-14.5""));
    }

    @Test
    void testClosestInteger7() {
        assertEquals(0, ClosestInteger.closestInteger(""0""));
    }

    @Test
    void testClosestInteger8() {
        assertEquals(1, ClosestInteger.closestInteger(""0.5""));
    }

    @Test
    void testClosestInteger9() {
        assertEquals(-1, ClosestInteger.closestInteger(""-0.5""));
    }

    @Test
    void testClosestInteger10() {
        assertEquals(0, ClosestInteger.closestInteger(""0.4""));
    }
}"
chatcmpl-6yQ4Jy4LabNj5qzFAtteKtEmwaoSf,/HumanEvalJava/src/main/java/scenario3/id_76.java,29.181812524795532,stop,"// IsSimplePower.java
package scenario3;

class IsSimplePower {

    /**
     * Your task is to write a function that returns true if a number x is a simple
     * power of n and false in other cases.
     * x is a simple power of n if n**int=x
     * For example:
     * isSimplePower(1, 4) => true
     * isSimplePower(2, 2) => true
     * isSimplePower(8, 2) => true
     * isSimplePower(3, 2) => false
     * isSimplePower(3, 1) => false
     * isSimplePower(5, 3) => false
     *
     * > isSimplePower(16, 2)
     * true
     * > isSimplePower(143214, 16)
     * false
     * > isSimplePower(4, 2)
     * true
     * > isSimplePower(9, 3)
     * true
     * > isSimplePower(16, 4)
     * true
     * > isSimplePower(24, 2)
     * false
     * > isSimplePower(128, 4)
     * false
     * > isSimplePower(12, 6)
     * false
     * > isSimplePower(1, 1)
     * true
     * > isSimplePower(1, 12)
     * true
     */
    public static Boolean isSimplePower(int x, int n) {
    }
}
","// IsSimplePowerTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {","// IsSimplePower.java
package scenario3;

class IsSimplePower {

    /**
     * Your task is to write a function that returns true if a number x is a simple
     * power of n and false in other cases.
     * x is a simple power of n if n**int=x
     * For example:
     * isSimplePower(1, 4) => true
     * isSimplePower(2, 2) => true
     * isSimplePower(8, 2) => true
     * isSimplePower(3, 2) => false
     * isSimplePower(3, 1) => false
     * isSimplePower(5, 3) => false
     *
     * > isSimplePower(16, 2)
     * true
     * > isSimplePower(143214, 16)
     * false
     * > isSimplePower(4, 2)
     * true
     * > isSimplePower(9, 3)
     * true
     * > isSimplePower(16, 4)
     * true
     * > isSimplePower(24, 2)
     * false
     * > isSimplePower(128, 4)
     * false
     * > isSimplePower(12, 6)
     * false
     * > isSimplePower(1, 1)
     * true
     * > isSimplePower(1, 12)
     * true
     */
    public static Boolean isSimplePower(int x, int n) {
        if (x == 1) {
            return true;
        }
        for (int i = 2; i <= Math.sqrt(x); i++) {
            int p = i;
            while (p <= x) {
                p *= i;
                if (p == x) {
                    return true;
                }
            }
        }
        return false;
    }
}

// IsSimplePowerTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {
    @Test
    void testIsSimplePower1() {
        assertTrue(IsSimplePower.isSimplePower(16, 2));
    }

    @Test
    void testIsSimplePower2() {
        assertFalse(IsSimplePower.isSimplePower(143214, 16));
    }

    @Test
    void testIsSimplePower3() {
        assertTrue(IsSimplePower.isSimplePower(4, 2));
    }

    @Test
    void testIsSimplePower4() {
        assertTrue(IsSimplePower.isSimplePower(9, 3));
    }

    @Test
    void testIsSimplePower5() {
        assertTrue(IsSimplePower.isSimplePower(16, 4));
    }

    @Test
    void testIsSimplePower6() {
        assertFalse(IsSimplePower.isSimplePower(24, 2));
    }

    @Test
    void testIsSimplePower7() {
        assertFalse(IsSimplePower.isSimplePower(128, 4));
    }

    @Test
    void testIsSimplePower8() {
        assertFalse(IsSimplePower.isSimplePower(12, 6));
    }

    @Test
    void testIsSimplePower9() {
        assertTrue(IsSimplePower.isSimplePower(1, 1));
    }

    @Test
    void testIsSimplePower10() {
        assertTrue(IsSimplePower.isSimplePower(1, 12));
    }
}"
chatcmpl-6yQ5MEPHo8TajlVh6jJTBysS75LAD,/HumanEvalJava/src/main/java/scenario3/id_98.java,24.486475467681885,stop,"// CountUpper.java
package scenario3;

class CountUpper {

    /**
     * * Given a string s, count the number of uppercase vowels in even indices.
     *
     * For example:
     * countUpper('aBCdEf') returns 1
     * countUpper('abcdefg') returns 0
     * countUpper('dBBE') returns 0
     *
     * > countUpper(""abcdefg"")
     * 0
     * > countUpper(""dBBE"")
     * 0
     * > countUpper("""")
     * 0
     * > countUpper(""EEEE"")
     * 2
     */
    public static int countUpper(String s) {
    }
}
","// CountUpperTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {","// CountUpper.java
package scenario3;

class CountUpper {

    /**
     * * Given a string s, count the number of uppercase vowels in even indices.
     *
     * For example:
     * countUpper('aBCdEf') returns 1
     * countUpper('abcdefg') returns 0
     * countUpper('dBBE') returns 0
     *
     * > countUpper(""abcdefg"")
     * 0
     * > countUpper(""dBBE"")
     * 0
     * > countUpper("""")
     * 0
     * > countUpper(""EEEE"")
     * 2
     */
    public static int countUpper(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i += 2) {
            char c = s.charAt(i);
            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {
                count++;
            }
        }
        return count;
    }
}

// CountUpperTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {

    @Test
    void testEmptyString() {
        assertEquals(0, CountUpper.countUpper(""""));
    }

    @Test
    void testNoUppercaseVowels() {
        assertEquals(0, CountUpper.countUpper(""abcdefg""));
    }

    @Test
    void testNoEvenIndices() {
        assertEquals(0, CountUpper.countUpper(""dBBE""));
    }

    @Test
    void testOneUppercaseVowel() {
        assertEquals(1, CountUpper.countUpper(""aBCdEf""));
    }

    @Test
    void testTwoUppercaseVowels() {
        assertEquals(2, CountUpper.countUpper(""aBCdEFG""));
    }

    @Test
    void testAllUppercaseVowels() {
        assertEquals(2, CountUpper.countUpper(""EEEE""));
    }

    @Test
    void testAllUppercaseConsonants() {
        assertEquals(0, CountUpper.countUpper(""BCDFGH""));
    }

    @Test
    void testMixedCaseVowels() {
        assertEquals(1, CountUpper.countUpper(""aBCdEFGhIjKlMnOp""));
    }

    @Test
    void testMixedCaseConsonants() {
        assertEquals(0, CountUpper.countUpper(""aBCdEFGhIjKlMnOpQrStUvWxYz""));
    }

    @Test
    void testSpecialCharacters() {
        assertEquals(0, CountUpper.countUpper(""!@#$%^&*()_+-=[]{}|;':\"",./<>?\\""));
    }
}"
chatcmpl-6yQ6PtSGEYpbJTAa0OzBUcv7JD68t,/HumanEvalJava/src/main/java/scenario3/id_77.java,22.807324409484863,stop,"// Iscube.java
package scenario3;

class Iscube {

    /**
     * * Write a function that takes an integer a and returns True
     * if this integer is a cube of some integer number.
     * Note: you may assume the input is always valid.
     * Examples:
     * iscube(1) ==> True
     * iscube(2) ==> False
     * iscube(-1) ==> True
     * iscube(64) ==> True
     * iscube(0) ==> True
     * iscube(180) ==> False
     *
     * > iscube(1)
     * true
     * > iscube(2)
     * false
     * > iscube(-1)
     * true
     * > iscube(64)
     * true
     * > iscube(180)
     * false
     * > iscube(1000)
     * true
     * > iscube(0)
     * true
     * > iscube(1729)
     * false
     */
    public static Boolean iscube(int a) {
    }
}
","// IscubeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Iscube}.
* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.
*/
class IscubeTest {","// Iscube.java
package scenario3;

class Iscube {

    /**
     * * Write a function that takes an integer a and returns True
     * if this integer is a cube of some integer number.
     * Note: you may assume the input is always valid.
     * Examples:
     * iscube(1) ==> True
     * iscube(2) ==> False
     * iscube(-1) ==> True
     * iscube(64) ==> True
     * iscube(0) ==> True
     * iscube(180) ==> False
     *
     * > iscube(1)
     * true
     * > iscube(2)
     * false
     * > iscube(-1)
     * true
     * > iscube(64)
     * true
     * > iscube(180)
     * false
     * > iscube(1000)
     * true
     * > iscube(0)
     * true
     * > iscube(1729)
     * false
     */
    public static Boolean iscube(int a) {
        if (a == 0 || a == 1) {
            return true;
        }
        int cubeRoot = (int) Math.cbrt(a);
        return cubeRoot * cubeRoot * cubeRoot == a;
    }
}

// IscubeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Iscube}.
* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.
*/
class IscubeTest {
    @Test
    void test1() {
        assertTrue(Iscube.iscube(1));
    }

    @Test
    void test2() {
        assertFalse(Iscube.iscube(2));
    }

    @Test
    void test3() {
        assertTrue(Iscube.iscube(-1));
    }

    @Test
    void test4() {
        assertTrue(Iscube.iscube(64));
    }

    @Test
    void test5() {
        assertFalse(Iscube.iscube(180));
    }

    @Test
    void test6() {
        assertTrue(Iscube.iscube(1000));
    }

    @Test
    void test7() {
        assertTrue(Iscube.iscube(0));
    }

    @Test
    void test8() {
        assertFalse(Iscube.iscube(1729));
    }

    @Test
    void test9() {
        assertTrue(Iscube.iscube(27));
    }

    @Test
    void test10() {
        assertFalse(Iscube.iscube(-8));
    }
}"
chatcmpl-6yQ7SGnXdGs7Rr9v9K1zKGq2TSanR,/HumanEvalJava/src/main/java/scenario3/id_20.java,52.345024824142456,stop,"// FindClosestElements.java
package scenario3;

import java.util.List;

class FindClosestElements {

    /**
     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each
     * other and return them in order (smaller number, larger number).
     *
     * > findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
     * [3.9, 4.0]
     * > findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])
     * [5.0, 5.9]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
     * [2.0, 2.2]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
     * [2.0, 2.0]
     * > findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])
     * [2.2, 3.1]
     */
    public static List<Double> findClosestElements(List<Double> numbers) {
    }
}
","// FindClosestElementsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindClosestElements}.
* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.
*/
class FindClosestElementsTest {","// FindClosestElements.java
package scenario3;

import java.util.Collections;
import java.util.List;

class FindClosestElements {

    /**
     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each
     * other and return them in order (smaller number, larger number).
     *
     * > findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
     * [3.9, 4.0]
     * > findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])
     * [5.0, 5.9]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
     * [2.0, 2.2]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
     * [2.0, 2.0]
     * > findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])
     * [2.2, 3.1]
     */
    public static List<Double> findClosestElements(List<Double> numbers) {
        Collections.sort(numbers);
        double minDiff = Double.MAX_VALUE;
        double first = 0;
        double second = 0;
        for (int i = 0; i < numbers.size() - 1; i++) {
            double diff = numbers.get(i + 1) - numbers.get(i);
            if (diff < minDiff) {
                minDiff = diff;
                first = numbers.get(i);
                second = numbers.get(i + 1);
            }
        }
        return List.of(first, second);
    }
}

// FindClosestElementsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindClosestElements}.
* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.
*/
class FindClosestElementsTest {

    @Test
    void testFindClosestElements1() {
        List<Double> numbers = List.of(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
        List<Double> expected = List.of(3.9, 4.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements2() {
        List<Double> numbers = List.of(1.0, 2.0, 5.9, 4.0, 5.0);
        List<Double> expected = List.of(5.0, 5.9);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements3() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);
        List<Double> expected = List.of(2.0, 2.2);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements4() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);
        List<Double> expected = List.of(2.0, 2.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements5() {
        List<Double> numbers = List.of(1.1, 2.2, 3.1, 4.1, 5.1);
        List<Double> expected = List.of(2.2, 3.1);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements6() {
        List<Double> numbers = List.of(1.0, 2.0);
        List<Double> expected = List.of(1.0, 2.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements7() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0);
        List<Double> expected = List.of(2.0, 3.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements8() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0);
        List<Double> expected = List.of(3.0, 4.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements9() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0);
        List<Double> expected = List.of(4.0, 5.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }

    @Test
    void testFindClosestElements10() {
        List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        List<Double> expected = List.of(5.0, 6.0);
        List<Double> actual = FindClosestElements.findClosestElements(numbers);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yQ8VrBtoHzPpsE1cEs5JZzYt8ESW,/HumanEvalJava/src/main/java/scenario3/id_36.java,26.030259370803833,stop,"// FizzBuzz.java
package scenario3;

class FizzBuzz {

    /**
     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
     *
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(100)
     * 3
     * > fizzBuzz(200)
     * 6
     * > fizzBuzz(4000)
     * 192
     * > fizzBuzz(10000)
     * 639
     * > fizzBuzz(100000)
     * 8026
     */
    public static int fizzBuzz(int n) {
    }
}
","// FizzBuzzTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FizzBuzz}.
* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.
*/
class FizzBuzzTest {","// FizzBuzz.java
package scenario3;

class FizzBuzz {

    /**
     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
     *
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(100)
     * 3
     * > fizzBuzz(200)
     * 6
     * > fizzBuzz(4000)
     * 192
     * > fizzBuzz(10000)
     * 639
     * > fizzBuzz(100000)
     * 8026
     */
    public static int fizzBuzz(int n) {
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                String str = String.valueOf(i);
                for (int j = 0; j < str.length(); j++) {
                    if (str.charAt(j) == '7') {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}

// FizzBuzzTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FizzBuzz}.
* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.
*/
class FizzBuzzTest {
    @Test
    void testFizzBuzz1() {
        assertEquals(0, FizzBuzz.fizzBuzz(50));
    }

    @Test
    void testFizzBuzz2() {
        assertEquals(2, FizzBuzz.fizzBuzz(78));
    }

    @Test
    void testFizzBuzz3() {
        assertEquals(3, FizzBuzz.fizzBuzz(79));
    }

    @Test
    void testFizzBuzz4() {
        assertEquals(0, FizzBuzz.fizzBuzz(50));
    }

    @Test
    void testFizzBuzz5() {
        assertEquals(2, FizzBuzz.fizzBuzz(78));
    }

    @Test
    void testFizzBuzz6() {
        assertEquals(3, FizzBuzz.fizzBuzz(79));
    }

    @Test
    void testFizzBuzz7() {
        assertEquals(3, FizzBuzz.fizzBuzz(100));
    }

    @Test
    void testFizzBuzz8() {
        assertEquals(6, FizzBuzz.fizzBuzz(200));
    }

    @Test
    void testFizzBuzz9() {
        assertEquals(192, FizzBuzz.fizzBuzz(4000));
    }

    @Test
    void testFizzBuzz10() {
        assertEquals(639, FizzBuzz.fizzBuzz(10000));
    }

    @Test
    void testFizzBuzz11() {
        assertEquals(8026, FizzBuzz.fizzBuzz(100000));
    }
}"
chatcmpl-6yQ9Ya0TWZ0apTxtCD9SCGXzCSt1n,/HumanEvalJava/src/main/java/scenario3/id_5.java,37.04710364341736,stop,"// Intersperse.java
package scenario3;

import java.util.List;

class Intersperse {

    /**
     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.
     *
     * > intersperse([], 4)
     * []
     * > intersperse([1, 2, 3], 4)
     * [1, 4, 2, 4, 3]
     * > intersperse([], 7)
     * []
     * > intersperse([5, 6, 3, 2], 8)
     * [5, 8, 6, 8, 3, 8, 2]
     * > intersperse([2, 2, 2], 2)
     * [2, 2, 2, 2, 2]
     */
    public static List<Object> intersperse(List<Object> numbers, int delimiter) {
    }
}
","// IntersperseTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersperse}.
* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.
*/
class IntersperseTest {","// Intersperse.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Intersperse {

    /**
     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.
     *
     * > intersperse([], 4)
     * []
     * > intersperse([1, 2, 3], 4)
     * [1, 4, 2, 4, 3]
     * > intersperse([], 7)
     * []
     * > intersperse([5, 6, 3, 2], 8)
     * [5, 8, 6, 8, 3, 8, 2]
     * > intersperse([2, 2, 2], 2)
     * [2, 2, 2, 2, 2]
     */
    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {
        List<Integer> result = new ArrayList<>();
        if (numbers == null || numbers.isEmpty()) {
            return result;
        }
        for (int i = 0; i < numbers.size() - 1; i++) {
            result.add(numbers.get(i));
            result.add(delimiter);
        }
        result.add(numbers.get(numbers.size() - 1));
        return result;
    }
}

// IntersperseTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersperse}.
* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.
*/
class IntersperseTest {

    @Test
    void testEmptyList() {
        List<Integer> input = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        assertEquals(expected, Intersperse.intersperse(input, 4));
    }

    @Test
    void testSingleElementList() {
        List<Integer> input = Arrays.asList(1);
        List<Integer> expected = Arrays.asList(1);
        assertEquals(expected, Intersperse.intersperse(input, 4));
    }

    @Test
    void testTwoElementList() {
        List<Integer> input = Arrays.asList(1, 2);
        List<Integer> expected = Arrays.asList(1, 4, 2);
        assertEquals(expected, Intersperse.intersperse(input, 4));
    }

    @Test
    void testThreeElementList() {
        List<Integer> input = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(1, 4, 2, 4, 3);
        assertEquals(expected, Intersperse.intersperse(input, 4));
    }

    @Test
    void testFourElementList() {
        List<Integer> input = Arrays.asList(5, 6, 3, 2);
        List<Integer> expected = Arrays.asList(5, 8, 6, 8, 3, 8, 2);
        assertEquals(expected, Intersperse.intersperse(input, 8));
    }

    @Test
    void testAllSameElementList() {
        List<Integer> input = Arrays.asList(2, 2, 2);
        List<Integer> expected = Arrays.asList(2, 2, 2, 2, 2);
        assertEquals(expected, Intersperse.intersperse(input, 2));
    }

    @Test
    void testNullInput() {
        List<Integer> input = null;
        List<Integer> expected = new ArrayList<>();
        assertEquals(expected, Intersperse.intersperse(input, 4));
    }

    @Test
    void testNegativeDelimiter() {
        List<Integer> input = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(1, -4, 2, -4, 3);
        assertEquals(expected, Intersperse.intersperse(input, -4));
    }

    @Test
    void testZeroDelimiter() {
        List<Integer> input = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(1, 0, 2, 0, 3);
        assertEquals(expected, Intersperse.intersperse(input, 0));
    }

    @Test
    void testMaxValueDelimiter() {
        List<Integer> input = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(1, Integer.MAX_VALUE, 2, Integer.MAX_VALUE, 3);
        assertEquals(expected, Intersperse.intersperse(input, Integer.MAX_VALUE));
    }
}"
chatcmpl-6yQAbLIprq3eunNyUO8bRSMMGsUzL,/HumanEvalJava/src/main/java/scenario3/id_61.java,28.818983554840088,stop,"// CorrectBracketing1.java
package scenario3;

class CorrectBracketing1 {

    /**
     * brackets is a string of ""("" and "")"".
     * return True if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""()"")
     * true
     * > correctBracketing(""(()())"")
     * true
     * > correctBracketing(""()()(()())()"")
     * true
     * > correctBracketing(""()()((()()())())(()()(()))"")
     * true
     * > correctBracketing(""((()())))"")
     * false
     * > correctBracketing("")(()"")
     * false
     * > correctBracketing(""("")
     * false
     * > correctBracketing(""(((("")
     * false
     * > correctBracketing("")"")
     * false
     * > correctBracketing(""(()"")
     * false
     * > correctBracketing(""()()(()())())(()"")
     * false
     * > correctBracketing(""()()(()())()))()"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
    }
}
","// CorrectBracketing1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing1}.
* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.
*/
class CorrectBracketing1Test {","// CorrectBracketing1.java
package scenario3;

class CorrectBracketing1 {

    /**
     * brackets is a string of ""("" and "")"".
     * return True if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""()"")
     * true
     * > correctBracketing(""(()())"")
     * true
     * > correctBracketing(""()()(()())()"")
     * true
     * > correctBracketing(""()()((()()())())(()()(()))"")
     * true
     * > correctBracketing(""((()())))"")
     * false
     * > correctBracketing("")(()"")
     * false
     * > correctBracketing(""("")
     * false
     * > correctBracketing(""(((("")
     * false
     * > correctBracketing("")"")
     * false
     * > correctBracketing(""(()"")
     * false
     * > correctBracketing(""()()(()())())(()"")
     * false
     * > correctBracketing(""()()(()())()))()"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '(') {
                count++;
            } else if (brackets.charAt(i) == ')') {
                count--;
                if (count < 0) {
                    return false;
                }
            }
        }
        return count == 0;
    }
}

// CorrectBracketing1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing1}.
* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.
*/
class CorrectBracketing1Test {
    @Test
    void testCorrectBracketing1() {
        assertTrue(CorrectBracketing1.correctBracketing(""()""));
    }

    @Test
    void testCorrectBracketing2() {
        assertTrue(CorrectBracketing1.correctBracketing(""(()())""));
    }

    @Test
    void testCorrectBracketing3() {
        assertTrue(CorrectBracketing1.correctBracketing(""()()(()())()""));
    }

    @Test
    void testCorrectBracketing4() {
        assertTrue(CorrectBracketing1.correctBracketing(""()()((()()())())(()()(()))""));
    }

    @Test
    void testCorrectBracketing5() {
        assertFalse(CorrectBracketing1.correctBracketing(""((()())))""));
    }

    @Test
    void testCorrectBracketing6() {
        assertFalse(CorrectBracketing1.correctBracketing("")(()""));
    }

    @Test
    void testCorrectBracketing7() {
        assertFalse(CorrectBracketing1.correctBracketing(""(""));
    }

    @Test
    void testCorrectBracketing8() {
        assertFalse(CorrectBracketing1.correctBracketing(""(((((""));
    }

    @Test
    void testCorrectBracketing9() {
        assertFalse(CorrectBracketing1.correctBracketing("")""));
    }

    @Test
    void testCorrectBracketing10() {
        assertFalse(CorrectBracketing1.correctBracketing(""(()""));
    }

    @Test
    void testCorrectBracketing11() {
        assertFalse(CorrectBracketing1.correctBracketing(""()()(()())())(()""));
    }

    @Test
    void testCorrectBracketing12() {
        assertFalse(CorrectBracketing1.correctBracketing(""()()(()())()))()""));
    }
}"
chatcmpl-6yQBeeuLgZsCni6XJWTfT89namYdN,/HumanEvalJava/src/main/java/scenario3/id_120.java,61.24234914779663,stop,"// Maximum1.java
package scenario3;

import java.util.List;

class Maximum1 {

    /**
     * * Given an array arr of integers and a positive integer k, return a sorted list
     * of length k with the maximum k numbers in arr.
     *
     * Example 1:
     *
     * Input: arr = [-3, -4, 5], k = 3
     * Output: [-4, -3, 5]
     *
     * Example 2:
     *
     * Input: arr = [4, -4, 4], k = 2
     * Output: [4, 4]
     *
     * Example 3:
     *
     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
     * Output: [2]
     *
     * Note:
     * 1. The length of the array will be in the range of [1, 1000].
     * 2. The elements in the array will be in the range of [-1000, 1000].
     * 3. 0 <= k <= len(arr)
     *
     * > maximum([-3, -4, 5], 3)
     * [-4, -3, 5]
     * > maximum([4, -4, 4], 2)
     * [4, 4]
     * > maximum([-3, 2, 1, 2, -1, -2, 1], 1)
     * [2]
     * > maximum([123, -123, 20, 0, 1, 2, -3], 3)
     * [2, 20, 123]
     * > maximum([-123, 20, 0, 1, 2, -3], 4)
     * [0, 1, 2, 20]
     * > maximum([5, 15, 0, 3, -13, -8, 0], 7)
     * [-13, -8, 0, 0, 3, 5, 15]
     * > maximum([-1, 0, 2, 5, 3, -10], 2)
     * [3, 5]
     * > maximum([1, 0, 5, -7], 1)
     * [5]
     * > maximum([4, -4], 2)
     * [-4, 4]
     * > maximum([-10, 10], 2)
     * [-10, 10]
     * > maximum([1, 2, 3, -23, 243, -400, 0], 0)
     * []
     */
    public static List<Object> maximum(List<Integer> arr, int k) {
    }
}
","// Maximum1Test.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Maximum1}.
* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.
*/
class Maximum1Test {","// Maximum1.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Maximum1 {

    /**
     * * Given an array arr of integers and a positive integer k, return a sorted list
     * of length k with the maximum k numbers in arr.
     *
     * Example 1:
     *
     * Input: arr = [-3, -4, 5], k = 3
     * Output: [-4, -3, 5]
     *
     * Example 2:
     *
     * Input: arr = [4, -4, 4], k = 2
     * Output: [4, 4]
     *
     * Example 3:
     *
     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
     * Output: [2]
     *
     * Note:
     * 1. The length of the array will be in the range of [1, 1000].
     * 2. The elements in the array will be in the range of [-1000, 1000].
     * 3. 0 <= k <= len(arr)
     *
     * > maximum([-3, -4, 5], 3)
     * [-4, -3, 5]
     * > maximum([4, -4, 4], 2)
     * [4, 4]
     * > maximum([-3, 2, 1, 2, -1, -2, 1], 1)
     * [2]
     * > maximum([123, -123, 20, 0, 1, 2, -3], 3)
     * [2, 20, 123]
     * > maximum([-123, 20, 0, 1, 2, -3], 4)
     * [0, 1, 2, 20]
     * > maximum([5, 15, 0, 3, -13, -8, 0], 7)
     * [-13, -8, 0, 0, 3, 5, 15]
     * > maximum([-1, 0, 2, 5, 3, -10], 2)
     * [3, 5]
     * > maximum([1, 0, 5, -7], 1)
     * [5]
     * > maximum([4, -4], 2)
     * [-4, 4]
     * > maximum([-10, 10], 2)
     * [-10, 10]
     * > maximum([1, 2, 3, -23, 243, -400, 0], 0)
     * []
     */
    public static List<Integer> maximum(List<Integer> arr, int k) {
        List<Integer> result = new ArrayList<>();
        if (k == 0) {
            return result;
        }
        Collections.sort(arr);
        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {
            result.add(arr.get(i));
        }
        return result;
    }
}

// Maximum1Test.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Maximum1}.
* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.
*/
class Maximum1Test {

    @Test
    void testMaximum1() {
        List<Integer> arr = Arrays.asList(-3, -4, 5);
        List<Integer> expected = Arrays.asList(-4, -3, 5);
        List<Integer> result = Maximum1.maximum(arr, 3);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum2() {
        List<Integer> arr = Arrays.asList(4, -4, 4);
        List<Integer> expected = Arrays.asList(4, 4);
        List<Integer> result = Maximum1.maximum(arr, 2);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum3() {
        List<Integer> arr = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);
        List<Integer> expected = Arrays.asList(2);
        List<Integer> result = Maximum1.maximum(arr, 1);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum4() {
        List<Integer> arr = Arrays.asList(123, -123, 20, 0, 1, 2, -3);
        List<Integer> expected = Arrays.asList(2, 20, 123);
        List<Integer> result = Maximum1.maximum(arr, 3);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum5() {
        List<Integer> arr = Arrays.asList(-123, 20, 0, 1, 2, -3);
        List<Integer> expected = Arrays.asList(0, 1, 2, 20);
        List<Integer> result = Maximum1.maximum(arr, 4);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum6() {
        List<Integer> arr = Arrays.asList(5, 15, 0, 3, -13, -8, 0);
        List<Integer> expected = Arrays.asList(-13, -8, 0, 0, 3, 5, 15);
        List<Integer> result = Maximum1.maximum(arr, 7);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum7() {
        List<Integer> arr = Arrays.asList(-1, 0, 2, 5, 3, -10);
        List<Integer> expected = Arrays.asList(3, 5);
        List<Integer> result = Maximum1.maximum(arr, 2);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum8() {
        List<Integer> arr = Arrays.asList(1, 0, 5, -7);
        List<Integer> expected = Arrays.asList(5);
        List<Integer> result = Maximum1.maximum(arr, 1);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum9() {
        List<Integer> arr = Arrays.asList(4, -4);
        List<Integer> expected = Arrays.asList(-4, 4);
        List<Integer> result = Maximum1.maximum(arr, 2);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum10() {
        List<Integer> arr = Arrays.asList(-10, 10);
        List<Integer> expected = Arrays.asList(-10, 10);
        List<Integer> result = Maximum1.maximum(arr, 2);
        assertEquals(expected, result);
    }

    @Test
    void testMaximum11() {
        List<Integer> arr = Arrays.asList(1, 2, 3, -23, 243, -400, 0);
        List<Integer> expected = Arrays.asList();
        List<Integer> result = Maximum1.maximum(arr, 0);
        assertEquals(expected, result);
    }
}"
chatcmpl-6yQCdVkuY7VgP9dnlkYdpcBfgKZFl,/HumanEvalJava/src/main/java/scenario3/id_161.java,29.106425762176514,stop,"// Solve.java
package scenario3;

class Solve {

    /**
     * You are given a string s.
     * if s[i] is a letter, reverse its case from lower to upper or vise versa,
     * otherwise keep it as it is.
     * If the string contains no letters, reverse the string.
     * The function should return the resulted string.
     * Examples
     * solve(""1234"") = ""4321""
     * solve(""ab"") = ""AB""
     * solve(""#a@C"") = ""#A@c""
     *
     * > solve(""AsDf"")
     * ""aSdF""
     * > solve(""1234"")
     * ""4321""
     * > solve(""ab"")
     * ""AB""
     * > solve(""#a@C"")
     * ""#A@c""
     * > solve(""#AsdfW^45"")
     * ""#aSDFw^45""
     * > solve(""#6@2"")
     * ""2@6#""
     * > solve(""#$a^D"")
     * ""#$A^d""
     * > solve(""#ccc"")
     * ""#CCC""
     */
    public static String solve(String s) {
    }
}
","// SolveTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve}.
* It contains ten unit test cases for the {@link Solve#solve(String)} method.
*/
class SolveTest {","Here's the completed code for the `Solve` class and `SolveTest` class:

```
// Solve.java
package scenario3;

class Solve {

    /**
     * You are given a string s.
     * if s[i] is a letter, reverse its case from lower to upper or vise versa,
     * otherwise keep it as it is.
     * If the string contains no letters, reverse the string.
     * The function should return the resulted string.
     * Examples
     * solve(""1234"") = ""4321""
     * solve(""ab"") = ""AB""
     * solve(""#a@C"") = ""#A@c""
     *
     * > solve(""AsDf"")
     * ""aSdF""
     * > solve(""1234"")
     * ""4321""
     * > solve(""ab"")
     * ""AB""
     * > solve(""#a@C"")
     * ""#A@c""
     * > solve(""#AsdfW^45"")
     * ""#aSDFw^45""
     * > solve(""#6@2"")
     * ""2@6#""
     * > solve(""#$a^D"")
     * ""#$A^d""
     * > solve(""#ccc"")
     * ""#CCC""
     */
    public static String solve(String s) {
        StringBuilder sb = new StringBuilder();
        boolean hasLetters = false;
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                hasLetters = true;
                if (Character.isUpperCase(c)) {
                    sb.append(Character.toLowerCase(c));
                } else {
                    sb.append(Character.toUpperCase(c));
                }
            } else {
                sb.append(c);
            }
        }
        if (!hasLetters) {
            sb.reverse();
        }
        return sb.toString();
    }
}

// SolveTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve}.
* It contains ten unit test cases for the {@link Solve#solve(String)} method.
*/
class SolveTest {

    @Test
    void testSolve1() {
        String result = Solve.solve(""AsDf"");
        assertEquals(""aSdF"", result);
    }

    @Test
    void testSolve2() {
        String result = Solve.solve(""1234"");
        assertEquals(""4321"", result);
    }

    @Test
    void testSolve3() {
        String result = Solve.solve(""ab"");
        assertEquals(""AB"", result);
    }

    @Test
    void testSolve4() {
        String result = Solve.solve(""#a@C"");
        assertEquals(""#A@c"", result);
    }

    @Test
    void testSolve5() {
        String result = Solve.solve(""#AsdfW^45"");
        assertEquals(""#aSDFw^45"", result);
    }

    @Test
    void testSolve6() {
        String result = Solve.solve(""#6@2"");
        assertEquals(""2@6#"", result);
    }

    @Test
    void testSolve7() {
        String result = Solve.solve(""#$a^D"");
        assertEquals(""#$A^d"", result);
    }

    @Test
    void testSolve8() {
        String result = Solve.solve(""#ccc"");
        assertEquals(""#CCC"", result);
    }

    @Test
    void testSolve9() {
        String result = Solve.solve(""a"");
        assertEquals(""A"", result);
    }

    @Test
    void testSolve10() {
        String result = Solve.solve(""A"");
        assertEquals(""a"", result);
    }
}
```"
chatcmpl-6yQDgCxKX5yMQPUrh5M6UlgmfHGAs,/HumanEvalJava/src/main/java/scenario3/id_136.java,53.588380336761475,stop,"// LargestSmallestIntegers.java
package scenario3;

import java.util.List;

class LargestSmallestIntegers {

    /**
     * * Create a function that returns a tuple (a, b), where 'a' is
     * the largest of negative integers, and 'b' is the smallest
     * of positive integers in a list.
     * If there is no negative or positive integers, return them as None.
     *
     * Examples:
     * largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)
     * largestSmallestIntegers([]) == (None, None)
     * largestSmallestIntegers([0]) == (None, None)
     *
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7])
     * [null, 1]
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])
     * [null, 1]
     * > largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])
     * [-2, 1]
     * > largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])
     * [-7, 2]
     * > largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])
     * [-9, 2]
     * > largestSmallestIntegers([])
     * [null, null]
     * > largestSmallestIntegers([0])
     * [null, null]
     * > largestSmallestIntegers([-1, -3, -5, -6])
     * [-1, null]
     * > largestSmallestIntegers([-1, -3, -5, -6, 0])
     * [-1, null]
     * > largestSmallestIntegers([-6, -4, -4, -3, 1])
     * [-3, 1]
     * > largestSmallestIntegers([-6, -4, -4, -3, -100, 1])
     * [-3, 1]
     */
    public static List<Integer> largestSmallestIntegers(List<Object> lst) {
    }
}
","// LargestSmallestIntegersTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestSmallestIntegers}.
* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.
*/
class LargestSmallestIntegersTest {","// LargestSmallestIntegers.java
package scenario3;

import java.util.List;

class LargestSmallestIntegers {

    /**
     * * Create a function that returns a tuple (a, b), where 'a' is
     * the largest of negative integers, and 'b' is the smallest
     * of positive integers in a list.
     * If there is no negative or positive integers, return them as None.
     *
     * Examples:
     * largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)
     * largestSmallestIntegers([]) == (None, None)
     * largestSmallestIntegers([0]) == (None, None)
     *
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7])
     * [null, 1]
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])
     * [null, 1]
     * > largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])
     * [-2, 1]
     * > largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])
     * [-7, 2]
     * > largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])
     * [-9, 2]
     * > largestSmallestIntegers([])
     * [null, null]
     * > largestSmallestIntegers([0])
     * [null, null]
     * > largestSmallestIntegers([-1, -3, -5, -6])
     * [-1, null]
     * > largestSmallestIntegers([-1, -3, -5, -6, 0])
     * [-1, null]
     * > largestSmallestIntegers([-6, -4, -4, -3, 1])
     * [-3, 1]
     * > largestSmallestIntegers([-6, -4, -4, -3, -100, 1])
     * [-3, 1]
     */
    public static List<Integer> largestSmallestIntegers(List<Integer> lst) {
        int maxNegative = Integer.MIN_VALUE;
        int minPositive = Integer.MAX_VALUE;
        boolean hasNegative = false;
        boolean hasPositive = false;

        for (int num : lst) {
            if (num < 0) {
                hasNegative = true;
                maxNegative = Math.max(maxNegative, num);
            } else if (num > 0) {
                hasPositive = true;
                minPositive = Math.min(minPositive, num);
            }
        }

        if (!hasNegative) {
            maxNegative = null;
        }
        if (!hasPositive) {
            minPositive = null;
        }

        return List.of(maxNegative, minPositive);
    }
}

// LargestSmallestIntegersTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestSmallestIntegers}.
* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.
*/
class LargestSmallestIntegersTest {

    @Test
    void testEmptyList() {
        List<Integer> lst = List.of();
        List<Integer> expected = List.of(null, null);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithZero() {
        List<Integer> lst = List.of(0);
        List<Integer> expected = List.of(null, null);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithOnlyPositiveNumbers() {
        List<Integer> lst = List.of(2, 4, 1, 3, 5, 7);
        List<Integer> expected = List.of(null, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithOnlyNegativeNumbers() {
        List<Integer> lst = List.of(-1, -3, -5, -6);
        List<Integer> expected = List.of(-1, null);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithBothPositiveAndNegativeNumbers() {
        List<Integer> lst = List.of(1, 3, 2, 4, 5, 6, -2);
        List<Integer> expected = List.of(-2, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithBothPositiveAndNegativeNumbersAndZero() {
        List<Integer> lst = List.of(2, 4, 1, 3, 5, 7, 0);
        List<Integer> expected = List.of(null, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithRepeatedNumbers() {
        List<Integer> lst = List.of(-6, -4, -4, -3, 1);
        List<Integer> expected = List.of(-3, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithRepeatedNumbersAndLargeNegativeNumber() {
        List<Integer> lst = List.of(-6, -4, -4, -3, -100, 1);
        List<Integer> expected = List.of(-3, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithOnlyNegativeNumbersAndZero() {
        List<Integer> lst = List.of(-1, -3, -5, -6, 0);
        List<Integer> expected = List.of(-1, null);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }

    @Test
    void testListWithOnlyPositiveNumbersAndZero() {
        List<Integer> lst = List.of(2, 4, 1, 3, 5, 7, 0);
        List<Integer> expected = List.of(null, 1);
        assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
    }
}"
chatcmpl-6yQEjk2vSZzNfsiXMaE39cjaJKLcl,/HumanEvalJava/src/main/java/scenario3/id_141.java,52.460516691207886,stop,"// FileNameCheck.java
package scenario3;

class FileNameCheck {

    /**
     * Create a function which takes a string representing a file's name, and returns
     * 'Yes' if the file's name is valid, and returns 'No' otherwise.
     * A file's name is considered to be valid if and only if all the following conditions
     * are met:
     * - There should not be more than three digits ('0'-'9') in the file's name.
     * - The file's name contains exactly one dot '.'
     * - The substring before the dot should not be empty, and it starts with a letter from
     * the latin alphabet ('a'-'z' and 'A'-'Z').
     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
     * Examples:
     * fileNameCheck(""example.txt"") # => 'Yes'
     * fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphabet letter)
     *
     * > fileNameCheck(""example.txt"")
     * ""Yes""
     * > fileNameCheck(""1example.dll"")
     * ""No""
     * > fileNameCheck(""s1sdf3.asd"")
     * ""No""
     * > fileNameCheck(""K.dll"")
     * ""Yes""
     * > fileNameCheck(""MY16FILE3.exe"")
     * ""Yes""
     * > fileNameCheck(""His12FILE94.exe"")
     * ""No""
     * > fileNameCheck(""_Y.txt"")
     * ""No""
     * > fileNameCheck(""?aREYA.exe"")
     * ""No""
     * > fileNameCheck(""/this_is_valid.dll"")
     * ""No""
     * > fileNameCheck(""this_is_valid.wow"")
     * ""No""
     * > fileNameCheck(""this_is_valid.txt"")
     * ""Yes""
     * > fileNameCheck(""this_is_valid.txtexe"")
     * ""No""
     * > fileNameCheck(""#this2_i4s_5valid.ten"")
     * ""No""
     * > fileNameCheck(""@this1_is6_valid.exe"")
     * ""No""
     * > fileNameCheck(""this_is_12valid.6exe4.txt"")
     * ""No""
     * > fileNameCheck(""all.exe.txt"")
     * ""No""
     * > fileNameCheck(""I563_No.exe"")
     * ""Yes""
     * > fileNameCheck(""Is3youfault.txt"")
     * ""Yes""
     * > fileNameCheck(""no_one#knows.dll"")
     * ""Yes""
     * > fileNameCheck(""1I563_Yes3.exe"")
     * ""No""
     * > fileNameCheck(""I563_Yes3.txtt"")
     * ""No""
     * > fileNameCheck(""final..txt"")
     * ""No""
     * > fileNameCheck(""final132"")
     * ""No""
     * > fileNameCheck(""_f4indsartal132."")
     * ""No""
     * > fileNameCheck("".txt"")
     * ""No""
     * > fileNameCheck(""s."")
     * ""No""
     */
    public static String fileNameCheck(String fileName) {
    }
}
","// FileNameCheckTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileNameCheck}.
* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.
*/
class FileNameCheckTest {","// FileNameCheck.java
package scenario3;

class FileNameCheck {

    /**
     * Create a function which takes a string representing a file's name, and returns
     * 'Yes' if the file's name is valid, and returns 'No' otherwise.
     * A file's name is considered to be valid if and only if all the following conditions
     * are met:
     * - There should not be more than three digits ('0'-'9') in the file's name.
     * - The file's name contains exactly one dot '.'
     * - The substring before the dot should not be empty, and it starts with a letter from
     * the latin alphabet ('a'-'z' and 'A'-'Z').
     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
     * Examples:
     * fileNameCheck(""example.txt"") # => 'Yes'
     * fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphabet letter)
     *
     * > fileNameCheck(""example.txt"")
     * ""Yes""
     * > fileNameCheck(""1example.dll"")
     * ""No""
     * > fileNameCheck(""s1sdf3.asd"")
     * ""No""
     * > fileNameCheck(""K.dll"")
     * ""Yes""
     * > fileNameCheck(""MY16FILE3.exe"")
     * ""Yes""
     * > fileNameCheck(""His12FILE94.exe"")
     * ""No""
     * > fileNameCheck(""_Y.txt"")
     * ""No""
     * > fileNameCheck(""?aREYA.exe"")
     * ""No""
     * > fileNameCheck(""/this_is_valid.dll"")
     * ""No""
     * > fileNameCheck(""this_is_valid.wow"")
     * ""No""
     * > fileNameCheck(""this_is_valid.txt"")
     * ""Yes""
     * > fileNameCheck(""this_is_valid.txtexe"")
     * ""No""
     * > fileNameCheck(""#this2_i4s_5valid.ten"")
     * ""No""
     * > fileNameCheck(""@this1_is6_valid.exe"")
     * ""No""
     * > fileNameCheck(""this_is_12valid.6exe4.txt"")
     * ""No""
     * > fileNameCheck(""all.exe.txt"")
     * ""No""
     * > fileNameCheck(""I563_No.exe"")
     * ""Yes""
     * > fileNameCheck(""Is3youfault.txt"")
     * ""Yes""
     * > fileNameCheck(""no_one#knows.dll"")
     * ""Yes""
     * > fileNameCheck(""1I563_Yes3.exe"")
     * ""No""
     * > fileNameCheck(""I563_Yes3.txtt"")
     * ""No""
     * > fileNameCheck(""final..txt"")
     * ""No""
     * > fileNameCheck(""final132"")
     * ""No""
     * > fileNameCheck(""_f4indsartal132."")
     * ""No""
     * > fileNameCheck("".txt"")
     * ""No""
     * > fileNameCheck(""s."")
     * ""No""
     */
    public static String fileNameCheck(String fileName) {
        // Check if the file name contains exactly one dot '.'
        if (fileName.indexOf('.') == -1 || fileName.indexOf('.') != fileName.lastIndexOf('.')) {
            return ""No"";
        }

        // Split the file name into two parts: before and after the dot
        String[] parts = fileName.split(""\\."");
        String beforeDot = parts[0];
        String afterDot = parts[1];

        // Check if the substring before the dot is not empty and starts with a letter from the latin alphabet
        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {
            return ""No"";
        }

        // Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']
        if (!afterDot.equals(""txt"") && !afterDot.equals(""exe"") && !afterDot.equals(""dll"")) {
            return ""No"";
        }

        // Check if there are not more than three digits ('0'-'9') in the file name
        int digitCount = 0;
        for (char c : fileName.toCharArray()) {
            if (Character.isDigit(c)) {
                digitCount++;
            }
        }
        if (digitCount > 3) {
            return ""No"";
        }

        // If all conditions are met, return 'Yes'
        return ""Yes"";
    }
}

// FileNameCheckTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileNameCheck}.
* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.
*/
class FileNameCheckTest {
    @Test
    void testValidFileName() {
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""example.txt""));
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""K.dll""));
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""MY16FILE3.exe""));
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""I563_No.exe""));
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""Is3youfault.txt""));
        assertEquals(""Yes"", FileNameCheck.fileNameCheck(""no_one#knows.dll""));
    }

    @Test
    void testInvalidFileName() {
        assertEquals(""No"", FileNameCheck.fileNameCheck(""1example.dll""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""s1sdf3.asd""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""His12FILE94.exe""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""_Y.txt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""?aREYA.exe""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""/this_is_valid.dll""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_valid.wow""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_valid.txtexe""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""#this2_i4s_5valid.ten""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""@this1_is6_valid.exe""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_12valid.6exe4.txt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""all.exe.txt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""1I563_Yes3.exe""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""I563_Yes3.txtt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""final..txt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""final132""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""_f4indsartal132.""));
        assertEquals(""No"", FileNameCheck.fileNameCheck("".txt""));
        assertEquals(""No"", FileNameCheck.fileNameCheck(""s.""));
    }
}"
chatcmpl-6yQFmuirPHZMkIwRVLSRGYhofdAnY,/HumanEvalJava/src/main/java/scenario3/id_94.java,64.32796263694763,stop,"// Skjkasdkd.java
package scenario3;

import java.util.List;

class Skjkasdkd {

    /**
     * You are given a list of integers.
     * You need to find the largest prime value and return the sum of its digits.
     *
     * Examples:
     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
     * For lst = [0,81,12,3,1,21] the output should be 3
     * For lst = [0,8,1,2,1,7] the output should be 7
     *
     * > skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
     * 10
     * > skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
     * 25
     * > skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
     * 13
     * > skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
     * 11
     * > skjkasdkd([0, 81, 12, 3, 1, 21])
     * 3
     * > skjkasdkd([0, 8, 1, 2, 1, 7])
     * 7
     * > skjkasdkd([8191])
     * 19
     * > skjkasdkd([8191, 123456, 127, 7])
     * 19
     * > skjkasdkd([127, 97, 8192])
     * 10
     */
    public static int skjkasdkd(List<Integer> lst) {
    }
}
","// SkjkasdkdTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Skjkasdkd}.
* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.
*/
class SkjkasdkdTest {","// Skjkasdkd.java
package scenario3;

import java.util.List;

class Skjkasdkd {

    /**
     * You are given a list of integers.
     * You need to find the largest prime value and return the sum of its digits.
     *
     * Examples:
     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
     * For lst = [0,81,12,3,1,21] the output should be 3
     * For lst = [0,8,1,2,1,7] the output should be 7
     *
     * > skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
     * 10
     * > skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
     * 25
     * > skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
     * 13
     * > skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
     * 11
     * > skjkasdkd([0, 81, 12, 3, 1, 21])
     * 3
     * > skjkasdkd([0, 8, 1, 2, 1, 7])
     * 7
     * > skjkasdkd([8191])
     * 19
     * > skjkasdkd([8191, 123456, 127, 7])
     * 19
     * > skjkasdkd([127, 97, 8192])
     * 10
     */
    public static int skjkasdkd(List<Integer> lst) {
        int maxPrime = -1;
        for (int num : lst) {
            if (isPrime(num) && num > maxPrime) {
                maxPrime = num;
            }
        }
        if (maxPrime == -1) {
            return 0;
        }
        return sumOfDigits(maxPrime);
    }

    private static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    private static int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
}

// SkjkasdkdTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Skjkasdkd}.
* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.
*/
class SkjkasdkdTest {

    @Test
    void test1() {
        List<Integer> lst = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);
        int expected = 10;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test2() {
        List<Integer> lst = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);
        int expected = 25;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test3() {
        List<Integer> lst = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);
        int expected = 13;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test4() {
        List<Integer> lst = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);
        int expected = 11;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test5() {
        List<Integer> lst = Arrays.asList(0,81,12,3,1,21);
        int expected = 3;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test6() {
        List<Integer> lst = Arrays.asList(0,8,1,2,1,7);
        int expected = 7;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test7() {
        List<Integer> lst = Arrays.asList(8191);
        int expected = 19;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test8() {
        List<Integer> lst = Arrays.asList(8191, 123456, 127, 7);
        int expected = 19;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test9() {
        List<Integer> lst = Arrays.asList(127, 97, 8192);
        int expected = 10;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }

    @Test
    void test10() {
        List<Integer> lst = Arrays.asList(4, 6, 8, 9, 10);
        int expected = 0;
        int actual = Skjkasdkd.skjkasdkd(lst);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yQGpRgGcFCJ1Si3YAEMcRIUnIzJa,/HumanEvalJava/src/main/java/scenario3/id_116.java,46.13096022605896,stop,"// SortArray.java
package scenario3;

import java.util.List;

class SortArray {

    /**
     * * In this Kata, you have to sort an array of non-negative integers according to
     * number of ones in their binary representation in ascending order.
     * For similar number of ones, sort based on decimal value.
     *
     * It must be implemented like this:
     * >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
     * >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
     *
     * > sortArray([1, 5, 2, 3, 4])
     * [1, 2, 4, 3, 5]
     * > sortArray([1, 0, 2, 3, 4])
     * [0, 1, 2, 4, 3]
     * > sortArray([])
     * []
     * > sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])
     * [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
     * > sortArray([3, 6, 44, 12, 32, 5])
     * [32, 3, 5, 6, 12, 44]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     */
    public static List<Object> sortArray(List<Object> arr) {
    }
}
","// SortArrayTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray}.
* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.
*/
class SortArrayTest {","// SortArray.java
package scenario3;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortArray {

    /**
     * * In this Kata, you have to sort an array of non-negative integers according to
     * number of ones in their binary representation in ascending order.
     * For similar number of ones, sort based on decimal value.
     *
     * It must be implemented like this:
     * >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
     * >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
     *
     * > sortArray([1, 5, 2, 3, 4])
     * [1, 2, 4, 3, 5]
     * > sortArray([1, 0, 2, 3, 4])
     * [0, 1, 2, 4, 3]
     * > sortArray([])
     * []
     * > sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])
     * [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
     * > sortArray([3, 6, 44, 12, 32, 5])
     * [32, 3, 5, 6, 12, 44]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     */
    public static List<Integer> sortArray(List<Integer> arr) {
        Collections.sort(arr, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                int countA = Integer.bitCount(a);
                int countB = Integer.bitCount(b);
                if (countA == countB) {
                    return a.compareTo(b);
                } else {
                    return countA - countB;
                }
            }
        });
        return arr;
    }
}

// SortArrayTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray}.
* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.
*/
class SortArrayTest {

    @Test
    void testSortArray() {
        List<Integer> arr1 = Arrays.asList(1, 5, 2, 3, 4);
        List<Integer> expected1 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expected1, SortArray.sortArray(arr1));

        List<Integer> arr2 = Arrays.asList(1, 0, 2, 3, 4);
        List<Integer> expected2 = Arrays.asList(0, 1, 2, 3, 4);
        assertEquals(expected2, SortArray.sortArray(arr2));

        List<Integer> arr3 = Arrays.asList();
        List<Integer> expected3 = Arrays.asList();
        assertEquals(expected3, SortArray.sortArray(arr3));

        List<Integer> arr4 = Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4);
        List<Integer> expected4 = Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77);
        assertEquals(expected4, SortArray.sortArray(arr4));

        List<Integer> arr5 = Arrays.asList(3, 6, 44, 12, 32, 5);
        List<Integer> expected5 = Arrays.asList(32, 3, 5, 6, 12, 44);
        assertEquals(expected5, SortArray.sortArray(arr5));

        List<Integer> arr6 = Arrays.asList(2, 4, 8, 16, 32);
        List<Integer> expected6 = Arrays.asList(2, 4, 8, 16, 32);
        assertEquals(expected6, SortArray.sortArray(arr6));

        List<Integer> arr7 = Arrays.asList(2, 4, 8, 16, 32);
        List<Integer> expected7 = Arrays.asList(2, 4, 8, 16, 32);
        assertEquals(expected7, SortArray.sortArray(arr7));

        List<Integer> arr8 = Arrays.asList(0, 0, 0, 0, 0);
        List<Integer> expected8 = Arrays.asList(0, 0, 0, 0, 0);
        assertEquals(expected8, SortArray.sortArray(arr8));

        List<Integer> arr9 = Arrays.asList(1, 3, 5, 7, 9);
        List<Integer> expected9 = Arrays.asList(1, 3, 5, 7, 9);
        assertEquals(expected9, SortArray.sortArray(arr9));

        List<Integer> arr10 = Arrays.asList(10, 100, 1000, 10000, 100000);
        List<Integer> expected10 = Arrays.asList(10, 100, 1000, 10000, 100000);
        assertEquals(expected10, SortArray.sortArray(arr10));
    }
}"
chatcmpl-6yQHsf9uxgz4q7MqZAJ4aY8gPLHSS,/HumanEvalJava/src/main/java/scenario3/id_100.java,74.43801164627075,length,"// MakeAPile.java
package scenario3;

import java.util.List;

class MakeAPile {

    /**
     * * Given a positive integer n, you have to make a pile of n levels of stones.
     * The first level has n stones.
     * The number of stones in the next level is:
     * - the next odd number if n is odd.
     * - the next even number if n is even.
     * Return the number of stones in each level in a list, where element at index
     * i represents the number of stones in the level (i+1).
     *
     * Examples:
     * >>> makeAPile(3)
     * [3, 5, 7]
     *
     * > makeAPile(3)
     * [3, 5, 7]
     * > makeAPile(4)
     * [4, 6, 8, 10]
     * > makeAPile(5)
     * [5, 7, 9, 11, 13]
     * > makeAPile(6)
     * [6, 8, 10, 12, 14, 16]
     * > makeAPile(8)
     * [8, 10, 12, 14, 16, 18, 20, 22]
     */
    public static List<Integer> makeAPile(int n) {
    }
}
","// MakeAPileTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakeAPile}.
* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.
*/
class MakeAPileTest {","// MakeAPile.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class MakeAPile {

    /**
     * * Given a positive integer n, you have to make a pile of n levels of stones.
     * The first level has n stones.
     * The number of stones in the next level is:
     * - the next odd number if n is odd.
     * - the next even number if n is even.
     * Return the number of stones in each level in a list, where element at index
     * i represents the number of stones in the level (i+1).
     *
     * Examples:
     * >>> makeAPile(3)
     * [3, 5, 7]
     *
     * > makeAPile(3)
     * [3, 5, 7]
     * > makeAPile(4)
     * [4, 6, 8, 10]
     * > makeAPile(5)
     * [5, 7, 9, 11, 13]
     * > makeAPile(6)
     * [6, 8, 10, 12, 14, 16]
     * > makeAPile(8)
     * [8, 10, 12, 14, 16, 18, 20, 22]
     */
    public static List<Integer> makeAPile(int n) {
        List<Integer> pile = new ArrayList<>();
        int stones = n;
        pile.add(stones);
        for (int i = 2; i <= n; i++) {
            if (n % 2 == 0) {
                stones += 2;
            } else {
                stones += 1;
            }
            pile.add(stones);
        }
        return pile;
    }
}

// MakeAPileTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakeAPile}.
* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.
*/
class MakeAPileTest {
    
    @Test
    void testMakeAPileWithThree() {
        List<Integer> expected = Arrays.asList(3, 5, 7);
        List<Integer> actual = MakeAPile.makeAPile(3);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithFour() {
        List<Integer> expected = Arrays.asList(4, 6, 8, 10);
        List<Integer> actual = MakeAPile.makeAPile(4);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithFive() {
        List<Integer> expected = Arrays.asList(5, 7, 9, 11, 13);
        List<Integer> actual = MakeAPile.makeAPile(5);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithSix() {
        List<Integer> expected = Arrays.asList(6, 8, 10, 12, 14, 16);
        List<Integer> actual = MakeAPile.makeAPile(6);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithEight() {
        List<Integer> expected = Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22);
        List<Integer> actual = MakeAPile.makeAPile(8);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithOne() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = MakeAPile.makeAPile(1);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithZero() {
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = MakeAPile.makeAPile(0);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMakeAPileWithNegative() {
        assertThrows(IllegalArgumentException.class, () -> {
            MakeAPile.makeAPile(-1);
        });
    }
    
    @Test
    void testMakeAPileWithLargeNumber() {
        List<Integer> expected = Arrays.asList(1000000001, 1000000003, 1000000005, 1000000007, 1000000009, 1000000011, 1000000013, 1000000015, 1000000017, 1000000019, 1000000021, 1000000023, 1000000025, 1000000027, 1000000029, 1000000031, 1000000033, 1000000035, 1000000037, 1000000039, 1000000041, 1000000043, 1000000045, 1000000047, 1000000049, 1000000051, 1000000053, 1000000055, 1000000057, 1000000059, 1000000061, 1000000063, 1000000065, 1000000067, 1000000069, 1000000071, 1000000073, 1000000075, 1000000077, 1000000079, 1000000081, 1000000083, 1000000085, 1000000087, 1000000089, 1000000091, 1000000093, 1000000095, 1000000097, 1000000099, 1000000101, 1000000103, 1000000105, 1000000107, 1000000109, 1000000111, 1000000113, 1000000115, 1000000117, 1000000119, 1000000121, 1000000123, 1000000125, 1000000127, 1000000129, 1000000131, 1000000133, 1000000135, 1000000137, 1000000139, 1000000141, 1000000143, 1000000145, 1000000147, 1000000149, 1000000151, 1000000153, 1000000155, 1000000157, 1000000159, 1000000161, 1000000163, 1000000165, 1000000167, 1000000169, 1000000171, 1000000173, 1000000175, 1000000177, 1000000179, 1000000181, 1000000183, 1000000185, 1000000187, 1000000189, 1000000191, 1000000193, 1000000195, 1000000197, 1000000199, 1000000201, 1000000203, 1000000205, 1000000207, 1000000209, 1000000211, 1000000213, 1000000215, 1000000217, 1000000219, 1000000221, 1000000223, 1000000225, 1000000227, 1000000229, 1000000231, 1000000233, 1000000235, 1000000237, 1000000239, 1000000241, 1000000243, 1000000245, 1000000247, 1000000249, 1000000251, 1000000253, 1000000255, 1000000257, 1000000259, 1000000261, 1000000263, 1000000265, 1000000267, 1000000269, 1000000271, 1000000273, 1000000275, 1000000277, 1000000279, 1000000281, 1000000283, 1000000285, 1000000287, 1000000289, 1000000291, 1000000293, 1000000295, 1000000297, 1000000299, 1000000301, 1000000303, 1000000305, 1000000307, 1000000309, 1000000311, 1000000313, 1000000315, 1000000317, 1000000319, 1000000321, 1000000323, 1000000325, 1000000327, 1000000329, 1000000331, 1000000333, 1000000335, 1000000337, 1000000339, 1000000341, 1000000343, 1000000345, 1000000347, 1000000349, 1000000351, 1000000353, 1000000355, 100000"
chatcmpl-6yQJ4n4kKZDOVAqa3wWcxU9QRE95B,/HumanEvalJava/src/main/java/scenario3/id_157.java,30.677379846572876,stop,"// RightAngleTriangle.java
package scenario3;

class RightAngleTriangle {

    /**
     * Given the lengths of the three sides of a triangle. Return True if the three
     * sides form a right-angled triangle, False otherwise.
     * A right-angled triangle is a triangle in which one angle is right angle or
     * 90 degree.
     * Example:
     * rightAngleTriangle(3, 4, 5) == True
     * rightAngleTriangle(1, 2, 3) == False
     *
     * > rightAngleTriangle(3, 4, 5)
     * true
     * > rightAngleTriangle(1, 2, 3)
     * false
     * > rightAngleTriangle(10, 6, 8)
     * true
     * > rightAngleTriangle(2, 2, 2)
     * false
     * > rightAngleTriangle(7, 24, 25)
     * true
     * > rightAngleTriangle(10, 5, 7)
     * false
     * > rightAngleTriangle(5, 12, 13)
     * true
     * > rightAngleTriangle(15, 8, 17)
     * true
     * > rightAngleTriangle(48, 55, 73)
     * true
     * > rightAngleTriangle(1, 1, 1)
     * false
     * > rightAngleTriangle(2, 2, 10)
     * false
     */
    public static Boolean rightAngleTriangle(int a, int b, int c) {
    }
}
","// RightAngleTriangleTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {","// RightAngleTriangle.java
package scenario3;

class RightAngleTriangle {

    /**
     * Given the lengths of the three sides of a triangle. Return True if the three
     * sides form a right-angled triangle, False otherwise.
     * A right-angled triangle is a triangle in which one angle is right angle or
     * 90 degree.
     * Example:
     * rightAngleTriangle(3, 4, 5) == True
     * rightAngleTriangle(1, 2, 3) == False
     *
     * > rightAngleTriangle(3, 4, 5)
     * true
     * > rightAngleTriangle(1, 2, 3)
     * false
     * > rightAngleTriangle(10, 6, 8)
     * true
     * > rightAngleTriangle(2, 2, 2)
     * false
     * > rightAngleTriangle(7, 24, 25)
     * true
     * > rightAngleTriangle(10, 5, 7)
     * false
     * > rightAngleTriangle(5, 12, 13)
     * true
     * > rightAngleTriangle(15, 8, 17)
     * true
     * > rightAngleTriangle(48, 55, 73)
     * true
     * > rightAngleTriangle(1, 1, 1)
     * false
     * > rightAngleTriangle(2, 2, 10)
     * false
     */
    public static Boolean rightAngleTriangle(int a, int b, int c) {
        int max = Math.max(a, Math.max(b, c));
        int sum = a + b + c;
        return (sum - max) > max && (a * a + b * b + c * c - max * max) == max * max;
    }
}

// RightAngleTriangleTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
    @Test
    void testRightAngleTriangle1() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
    }

    @Test
    void testRightAngleTriangle2() {
        assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
    }

    @Test
    void testRightAngleTriangle3() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
    }

    @Test
    void testRightAngleTriangle4() {
        assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
    }

    @Test
    void testRightAngleTriangle5() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
    }

    @Test
    void testRightAngleTriangle6() {
        assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
    }

    @Test
    void testRightAngleTriangle7() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
    }

    @Test
    void testRightAngleTriangle8() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
    }

    @Test
    void testRightAngleTriangle9() {
        assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
    }

    @Test
    void testRightAngleTriangle10() {
        assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
    }

    @Test
    void testRightAngleTriangle11() {
        assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
    }
}"
chatcmpl-6yQK7UAX3OOaRGKV68lMKf0jxol4A,/HumanEvalJava/src/main/java/scenario3/id_82.java,23.80859112739563,stop,"// PrimeLength.java
package scenario3;

class PrimeLength {

    /**
     * Write a function that takes a string and returns True if the string
     * length is a prime number or False otherwise
     * Examples
     * primeLength('Hello') == True
     * primeLength('abcdcba') == True
     * primeLength('kittens') == True
     * primeLength('orange') == False
     *
     * > primeLength(""Hello"")
     * true
     * > primeLength(""abcdcba"")
     * true
     * > primeLength(""kittens"")
     * true
     * > primeLength(""orange"")
     * false
     * > primeLength(""wow"")
     * true
     * > primeLength(""world"")
     * true
     * > primeLength(""MadaM"")
     * true
     * > primeLength(""Wow"")
     * true
     * > primeLength("""")
     * false
     * > primeLength(""HI"")
     * true
     * > primeLength(""go"")
     * true
     * > primeLength(""gogo"")
     * false
     * > primeLength(""aaaaaaaaaaaaaaa"")
     * false
     * > primeLength(""Madam"")
     * true
     * > primeLength(""M"")
     * false
     * > primeLength(""0"")
     * false
     */
    public static Boolean primeLength(String string) {
    }
}
","// PrimeLengthTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {","// PrimeLength.java
package scenario3;

class PrimeLength {

    /**
     * Write a function that takes a string and returns True if the string
     * length is a prime number or False otherwise
     * Examples
     * primeLength('Hello') == True
     * primeLength('abcdcba') == True
     * primeLength('kittens') == True
     * primeLength('orange') == False
     *
     * > primeLength(""Hello"")
     * true
     * > primeLength(""abcdcba"")
     * true
     * > primeLength(""kittens"")
     * true
     * > primeLength(""orange"")
     * false
     * > primeLength(""wow"")
     * true
     * > primeLength(""world"")
     * true
     * > primeLength(""MadaM"")
     * true
     * > primeLength(""Wow"")
     * true
     * > primeLength("""")
     * false
     * > primeLength(""HI"")
     * true
     * > primeLength(""go"")
     * true
     * > primeLength(""gogo"")
     * false
     * > primeLength(""aaaaaaaaaaaaaaa"")
     * false
     * > primeLength(""Madam"")
     * true
     * > primeLength(""M"")
     * false
     * > primeLength(""0"")
     * false
     */
    public static Boolean primeLength(String string) {
        int length = string.length();
        if (length < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(length); i++) {
            if (length % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// PrimeLengthTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
    @Test
    void testPrimeLength() {
        assertTrue(PrimeLength.primeLength(""Hello""));
        assertTrue(PrimeLength.primeLength(""abcdcba""));
        assertTrue(PrimeLength.primeLength(""kittens""));
        assertFalse(PrimeLength.primeLength(""orange""));
        assertTrue(PrimeLength.primeLength(""wow""));
        assertTrue(PrimeLength.primeLength(""world""));
        assertTrue(PrimeLength.primeLength(""MadaM""));
        assertTrue(PrimeLength.primeLength(""Wow""));
        assertFalse(PrimeLength.primeLength(""""));
        assertTrue(PrimeLength.primeLength(""HI""));
        assertTrue(PrimeLength.primeLength(""go""));
        assertFalse(PrimeLength.primeLength(""gogo""));
        assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
        assertTrue(PrimeLength.primeLength(""Madam""));
        assertFalse(PrimeLength.primeLength(""M""));
        assertFalse(PrimeLength.primeLength(""0""));
    }
}"
chatcmpl-6yQLA8p6VojXaOnywg5vjojFUmYRx,/HumanEvalJava/src/main/java/scenario3/id_9.java,37.27031111717224,stop,"// RollingMax.java
package scenario3;

import java.util.List;

class RollingMax {

    /**
     * From a given list of integers, generate a list of rolling maximum element found until given moment
     * in the sequence.
     *
     * > rollingMax([1, 2, 3, 2, 3, 4, 2])
     * [1, 2, 3, 3, 3, 4, 4]
     * > rollingMax([])
     * []
     * > rollingMax([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > rollingMax([4, 3, 2, 1])
     * [4, 4, 4, 4]
     * > rollingMax([3, 2, 3, 100, 3])
     * [3, 3, 3, 100, 100]
     */
    public static List<Object> rollingMax(List<Object> numbers) {
    }
}
","// RollingMaxTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RollingMax}.
* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.
*/
class RollingMaxTest {","// RollingMax.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class RollingMax {

    /**
     * From a given list of integers, generate a list of rolling maximum element found until given moment
     * in the sequence.
     *
     * > rollingMax([1, 2, 3, 2, 3, 4, 2])
     * [1, 2, 3, 3, 3, 4, 4]
     * > rollingMax([])
     * []
     * > rollingMax([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > rollingMax([4, 3, 2, 1])
     * [4, 4, 4, 4]
     * > rollingMax([3, 2, 3, 100, 3])
     * [3, 3, 3, 100, 100]
     */
    public static List<Integer> rollingMax(List<Integer> numbers) {
        List<Integer> result = new ArrayList<>();
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < numbers.size(); i++) {
            max = Math.max(max, numbers.get(i));
            result.add(max);
        }
        return result;
    }
}

// RollingMaxTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RollingMax}.
* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.
*/
class RollingMaxTest {

    @Test
    void testEmptyList() {
        List<Integer> input = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testSingleElementList() {
        List<Integer> input = Arrays.asList(1);
        List<Integer> expected = Arrays.asList(1);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testIncreasingList() {
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testDecreasingList() {
        List<Integer> input = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> expected = Arrays.asList(5, 5, 5, 5, 5);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testRandomList() {
        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);
        List<Integer> expected = Arrays.asList(1, 2, 3, 3, 3, 4, 4);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testListWithDuplicates() {
        List<Integer> input = Arrays.asList(1, 2, 2, 3, 3, 3, 2, 2);
        List<Integer> expected = Arrays.asList(1, 2, 2, 3, 3, 3, 3, 3);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testListWithNegativeNumbers() {
        List<Integer> input = Arrays.asList(-1, -2, -3, -2, -3, -4, -2);
        List<Integer> expected = Arrays.asList(-1, -1, -1, -1, -1, -1, -1);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testListWithZero() {
        List<Integer> input = Arrays.asList(1, 2, 3, 0, 4, 5);
        List<Integer> expected = Arrays.asList(1, 2, 3, 3, 4, 5);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testListWithMaxValue() {
        List<Integer> input = Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE - 1, Integer.MAX_VALUE - 2);
        List<Integer> expected = Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertEquals(expected, RollingMax.rollingMax(input));
    }

    @Test
    void testListWithMinValue() {
        List<Integer> input = Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE + 1, Integer.MIN_VALUE + 2);
        List<Integer> expected = Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE + 1, Integer.MIN_VALUE + 2);
        assertEquals(expected, RollingMax.rollingMax(input));
    }
}"
chatcmpl-6yQMDRT2jFoOi6wkwl4bthGCn4xw1,/HumanEvalJava/src/main/java/scenario3/id_16.java,22.03451895713806,stop,"// CountDistinctCharacters.java
package scenario3;

class CountDistinctCharacters {

    /**
     * Given a string, find out how many distinct characters (regardless of case)  it consists  of.
     *
     * > countDistinctCharacters(""xyzXYZ"")
     * 3
     * > countDistinctCharacters(""Jerry"")
     * 4
     * > countDistinctCharacters("""")
     * 0
     * > countDistinctCharacters(""abcde"")
     * 5
     * > countDistinctCharacters(""abcdecadeCADE"")
     * 5
     * > countDistinctCharacters(""aaaaAAAAaaaa"")
     * 1
     * > countDistinctCharacters(""Jerry jERRY JeRRRY"")
     * 5
     */
    public static int countDistinctCharacters(String string) {
    }
}
","// CountDistinctCharactersTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {","// CountDistinctCharacters.java
package scenario3;

import java.util.HashSet;
import java.util.Set;

class CountDistinctCharacters {

    /**
     * Given a string, find out how many distinct characters (regardless of case)  it consists  of.
     *
     * > countDistinctCharacters(""xyzXYZ"")
     * 3
     * > countDistinctCharacters(""Jerry"")
     * 4
     * > countDistinctCharacters("""")
     * 0
     * > countDistinctCharacters(""abcde"")
     * 5
     * > countDistinctCharacters(""abcdecadeCADE"")
     * 5
     * > countDistinctCharacters(""aaaaAAAAaaaa"")
     * 1
     * > countDistinctCharacters(""Jerry jERRY JeRRRY"")
     * 5
     */
    public static int countDistinctCharacters(String string) {
        Set<Character> distinctChars = new HashSet<>();
        for (char c : string.toCharArray()) {
            if (Character.isLetter(c)) {
                distinctChars.add(Character.toLowerCase(c));
            }
        }
        return distinctChars.size();
    }
}

// CountDistinctCharactersTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {

    @Test
    void testEmptyString() {
        assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
    }

    @Test
    void testSingleCharacter() {
        assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""a""));
    }

    @Test
    void testAllSameCharacters() {
        assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaa""));
    }

    @Test
    void testAllDifferentCharacters() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
    }

    @Test
    void testMixedCase() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
    }

    @Test
    void testWithSpaces() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
    }

    @Test
    void testWithNumbers() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abc123de123""));
    }

    @Test
    void testWithSpecialCharacters() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abc!@#de!@#""));
    }

    @Test
    void testWithMixedCharacters() {
        assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde123!@#""));
    }

    @Test
    void testWithNull() {
        assertThrows(NullPointerException.class, () -> CountDistinctCharacters.countDistinctCharacters(null));
    }
}"
chatcmpl-6yQNGfJq5p33YDjfgQhrcMZ4wKwUe,/HumanEvalJava/src/main/java/scenario3/id_41.java,23.880228757858276,stop,"// CarRaceCollision.java
package scenario3;

class CarRaceCollision {

    /**
     * * Imagine a road that's a perfectly straight infinitely long line.
     * n cars are driving left to right;  simultaneously, a different set of n cars
     * are driving right to left.   The two sets of cars start out being very far from
     * each other.  All cars move in the same speed.  Two cars are said to collide
     * when a car that's moving left to right hits a car that's moving right to left.
     * However, the cars are infinitely sturdy and strong; as a result, they continue moving
     * in their trajectory as if they did not collide.
     * This function outputs the number of such collisions.
     *
     * > carRaceCollision(2)
     * 4
     * > carRaceCollision(3)
     * 9
     * > carRaceCollision(4)
     * 16
     * > carRaceCollision(8)
     * 64
     * > carRaceCollision(10)
     * 100
     */
    public static int carRaceCollision(int n) {
    }
}
","// CarRaceCollisionTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CarRaceCollision}.
* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.
*/
class CarRaceCollisionTest {","// CarRaceCollision.java
package scenario3;

class CarRaceCollision {

    /**
     * * Imagine a road that's a perfectly straight infinitely long line.
     * n cars are driving left to right;  simultaneously, a different set of n cars
     * are driving right to left.   The two sets of cars start out being very far from
     * each other.  All cars move in the same speed.  Two cars are said to collide
     * when a car that's moving left to right hits a car that's moving right to left.
     * However, the cars are infinitely sturdy and strong; as a result, they continue moving
     * in their trajectory as if they did not collide.
     * This function outputs the number of such collisions.
     *
     * > carRaceCollision(2)
     * 4
     * > carRaceCollision(3)
     * 9
     * > carRaceCollision(4)
     * 16
     * > carRaceCollision(8)
     * 64
     * > carRaceCollision(10)
     * 100
     */
    public static int carRaceCollision(int n) {
        return n * n;
    }
}

// CarRaceCollisionTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CarRaceCollision}.
* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.
*/
class CarRaceCollisionTest {
    @Test
    void testCarRaceCollisionWithTwoCars() {
        assertEquals(4, CarRaceCollision.carRaceCollision(2));
    }

    @Test
    void testCarRaceCollisionWithThreeCars() {
        assertEquals(9, CarRaceCollision.carRaceCollision(3));
    }

    @Test
    void testCarRaceCollisionWithFourCars() {
        assertEquals(16, CarRaceCollision.carRaceCollision(4));
    }

    @Test
    void testCarRaceCollisionWithFiveCars() {
        assertEquals(25, CarRaceCollision.carRaceCollision(5));
    }

    @Test
    void testCarRaceCollisionWithSixCars() {
        assertEquals(36, CarRaceCollision.carRaceCollision(6));
    }

    @Test
    void testCarRaceCollisionWithSevenCars() {
        assertEquals(49, CarRaceCollision.carRaceCollision(7));
    }

    @Test
    void testCarRaceCollisionWithEightCars() {
        assertEquals(64, CarRaceCollision.carRaceCollision(8));
    }

    @Test
    void testCarRaceCollisionWithNineCars() {
        assertEquals(81, CarRaceCollision.carRaceCollision(9));
    }

    @Test
    void testCarRaceCollisionWithTenCars() {
        assertEquals(100, CarRaceCollision.carRaceCollision(10));
    }

    @Test
    void testCarRaceCollisionWithZeroCars() {
        assertEquals(0, CarRaceCollision.carRaceCollision(0));
    }
}"
chatcmpl-6yQOJ29QFpq45FQC9tWeFYP5tRPuC,/HumanEvalJava/src/main/java/scenario3/id_57.java,30.097689390182495,stop,"// Monotonic.java
package scenario3;

import java.util.List;

class Monotonic {

    /**
     * Return True is list elements are monotonically increasing or decreasing.
     *
     * > monotonic([1, 2, 4, 10])
     * true
     * > monotonic([1, 2, 4, 20])
     * true
     * > monotonic([1, 20, 4, 10])
     * false
     * > monotonic([4, 1, 0, -10])
     * true
     * > monotonic([4, 1, 1, 0])
     * true
     * > monotonic([1, 2, 3, 2, 5, 60])
     * false
     * > monotonic([1, 2, 3, 4, 5, 60])
     * true
     * > monotonic([9, 9, 9, 9])
     * true
     */
    public static Boolean monotonic(List<Integer> l) {
    }
}
","// MonotonicTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Monotonic}.
* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.
*/
class MonotonicTest {","// Monotonic.java
package scenario3;

import java.util.List;

class Monotonic {

    /**
     * Return True is list elements are monotonically increasing or decreasing.
     *
     * > monotonic([1, 2, 4, 10])
     * true
     * > monotonic([1, 2, 4, 20])
     * true
     * > monotonic([1, 20, 4, 10])
     * false
     * > monotonic([4, 1, 0, -10])
     * true
     * > monotonic([4, 1, 1, 0])
     * true
     * > monotonic([1, 2, 3, 2, 5, 60])
     * false
     * > monotonic([1, 2, 3, 4, 5, 60])
     * true
     * > monotonic([9, 9, 9, 9])
     * true
     */
    public static Boolean monotonic(List<Integer> l) {
        if (l.size() <= 1) {
            return true;
        }
        boolean increasing = true;
        boolean decreasing = true;
        for (int i = 1; i < l.size(); i++) {
            if (l.get(i) > l.get(i - 1)) {
                decreasing = false;
            } else if (l.get(i) < l.get(i - 1)) {
                increasing = false;
            }
        }
        return increasing || decreasing;
    }
}

// MonotonicTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Monotonic}.
* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.
*/
class MonotonicTest {
    @Test
    void testMonotonic1() {
        List<Integer> l = Arrays.asList(1, 2, 4, 10);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic2() {
        List<Integer> l = Arrays.asList(1, 2, 4, 20);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic3() {
        List<Integer> l = Arrays.asList(1, 20, 4, 10);
        assertFalse(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic4() {
        List<Integer> l = Arrays.asList(4, 1, 0, -10);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic5() {
        List<Integer> l = Arrays.asList(4, 1, 1, 0);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic6() {
        List<Integer> l = Arrays.asList(1, 2, 3, 2, 5, 60);
        assertFalse(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic7() {
        List<Integer> l = Arrays.asList(1, 2, 3, 4, 5, 60);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic8() {
        List<Integer> l = Arrays.asList(9, 9, 9, 9);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic9() {
        List<Integer> l = Arrays.asList(1);
        assertTrue(Monotonic.monotonic(l));
    }

    @Test
    void testMonotonic10() {
        List<Integer> l = Arrays.asList();
        assertTrue(Monotonic.monotonic(l));
    }
}"
chatcmpl-6yQPMVskwXKnkQmJqOovf03KJQF14,/HumanEvalJava/src/main/java/scenario3/id_131.java,23.1614248752594,stop,"// Digits.java
package scenario3;

class Digits {

    /**
     * Given a positive integer n, return the product of the odd digits.
     * Return 0 if all digits are even.
     * For example:
     * digits(1)  == 1
     * digits(4)  == 0
     * digits(235) == 15
     *
     * > digits(5)
     * 5
     * > digits(54)
     * 5
     * > digits(120)
     * 1
     * > digits(5014)
     * 5
     * > digits(98765)
     * 315
     * > digits(5576543)
     * 2625
     * > digits(2468)
     * 0
     */
    public static int digits(int n) {
    }
}
","// DigitsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {","// Digits.java
package scenario3;

class Digits {

    /**
     * Given a positive integer n, return the product of the odd digits.
     * Return 0 if all digits are even.
     * For example:
     * digits(1)  == 1
     * digits(4)  == 0
     * digits(235) == 15
     *
     * > digits(5)
     * 5
     * > digits(54)
     * 5
     * > digits(120)
     * 1
     * > digits(5014)
     * 5
     * > digits(98765)
     * 315
     * > digits(5576543)
     * 2625
     * > digits(2468)
     * 0
     */
    public static int digits(int n) {
        int product = 1;
        boolean hasOddDigit = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit % 2 != 0) {
                product *= digit;
                hasOddDigit = true;
            }
            n /= 10;
        }
        return hasOddDigit ? product : 0;
    }
}

// DigitsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {
    
    @Test
    void testDigitsWithOneDigitNumber() {
        assertEquals(1, Digits.digits(1));
    }
    
    @Test
    void testDigitsWithEvenNumber() {
        assertEquals(0, Digits.digits(4));
    }
    
    @Test
    void testDigitsWithOddNumber() {
        assertEquals(15, Digits.digits(235));
    }
    
    @Test
    void testDigitsWithSingleOddDigit() {
        assertEquals(5, Digits.digits(5));
    }
    
    @Test
    void testDigitsWithSingleEvenDigit() {
        assertEquals(0, Digits.digits(4));
    }
    
    @Test
    void testDigitsWithAllEvenDigits() {
        assertEquals(0, Digits.digits(2468));
    }
    
    @Test
    void testDigitsWithAllOddDigits() {
        assertEquals(315, Digits.digits(98765));
    }
    
    @Test
    void testDigitsWithMixedDigits() {
        assertEquals(5, Digits.digits(5014));
        assertEquals(5, Digits.digits(54));
        assertEquals(1, Digits.digits(120));
        assertEquals(2625, Digits.digits(5576543));
    }
    
    @Test
    void testDigitsWithZero() {
        assertEquals(0, Digits.digits(0));
    }
    
    @Test
    void testDigitsWithLargeNumber() {
        assertEquals(945, Digits.digits(123456789));
    }
}"
chatcmpl-6yQQP3EF2jPchH4uDv7MrMypCShHF,/HumanEvalJava/src/main/java/scenario3/id_127.java,47.84031891822815,stop,"// Intersection.java
package scenario3;

import java.util.List;

class Intersection {

    /**
     * You are given two intervals,
     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
     * The given intervals are closed which means that the interval (start, end)
     * includes both start and end.
     * For each given interval, it is assumed that its start is less or equal its end.
     * Your task is to determine whether the length of intersection of these two
     * intervals is a prime number.
     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
     * which its length is 1, which not a prime number.
     * If the length of the intersection is a prime number, return ""YES"",
     * otherwise, return ""NO"".
     * If the two intervals don't intersect, return ""NO"".
     *
     * [input/output] samples:
     * intersection((1, 2), (2, 3)) ==> ""NO""
     * intersection((-1, 1), (0, 4)) ==> ""NO""
     * intersection((-3, -1), (-5, 5)) ==> ""YES""
     *
     * > intersection([1, 2], [2, 3])
     * ""NO""
     * > intersection([-1, 1], [0, 4])
     * ""NO""
     * > intersection([-3, -1], [-5, 5])
     * ""YES""
     * > intersection([-2, 2], [-4, 0])
     * ""YES""
     * > intersection([-11, 2], [-1, -1])
     * ""NO""
     * > intersection([1, 2], [3, 5])
     * ""NO""
     * > intersection([1, 2], [1, 2])
     * ""NO""
     * > intersection([-2, -2], [-3, -2])
     * ""NO""
     */
    public static String intersection(List<Integer> interval1, List<Integer> interval2) {
    }
}
","// IntersectionTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {","// Intersection.java
package scenario3;

import java.util.List;

class Intersection {

    /**
     * You are given two intervals,
     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
     * The given intervals are closed which means that the interval (start, end)
     * includes both start and end.
     * For each given interval, it is assumed that its start is less or equal its end.
     * Your task is to determine whether the length of intersection of these two
     * intervals is a prime number.
     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
     * which its length is 1, which not a prime number.
     * If the length of the intersection is a prime number, return ""YES"",
     * otherwise, return ""NO"".
     * If the two intervals don't intersect, return ""NO"".
     *
     * [input/output] samples:
     * intersection((1, 2), (2, 3)) ==> ""NO""
     * intersection((-1, 1), (0, 4)) ==> ""NO""
     * intersection((-3, -1), (-5, 5)) ==> ""YES""
     *
     * > intersection([1, 2], [2, 3])
     * ""NO""
     * > intersection([-1, 1], [0, 4])
     * ""NO""
     * > intersection([-3, -1], [-5, 5])
     * ""YES""
     * > intersection([-2, 2], [-4, 0])
     * ""YES""
     * > intersection([-11, 2], [-1, -1])
     * ""NO""
     * > intersection([1, 2], [3, 5])
     * ""NO""
     * > intersection([1, 2], [1, 2])
     * ""NO""
     * > intersection([-2, -2], [-3, -2])
     * ""NO""
     */
    public static String intersection(List<Integer> interval1, List<Integer> interval2) {
        int start1 = interval1.get(0);
        int end1 = interval1.get(1);
        int start2 = interval2.get(0);
        int end2 = interval2.get(1);

        if (end1 < start2 || end2 < start1) {
            return ""NO"";
        }

        int start = Math.max(start1, start2);
        int end = Math.min(end1, end2);
        int length = end - start + 1;

        if (length <= 1) {
            return ""NO"";
        }

        for (int i = 2; i <= Math.sqrt(length); i++) {
            if (length % i == 0) {
                return ""NO"";
            }
        }

        return ""YES"";
    }
}

// IntersectionTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {
    @Test
    void testIntersection1() {
        List<Integer> interval1 = Arrays.asList(1, 2);
        List<Integer> interval2 = Arrays.asList(2, 3);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection2() {
        List<Integer> interval1 = Arrays.asList(-1, 1);
        List<Integer> interval2 = Arrays.asList(0, 4);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection3() {
        List<Integer> interval1 = Arrays.asList(-3, -1);
        List<Integer> interval2 = Arrays.asList(-5, 5);
        assertEquals(""YES"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection4() {
        List<Integer> interval1 = Arrays.asList(-2, 2);
        List<Integer> interval2 = Arrays.asList(-4, 0);
        assertEquals(""YES"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection5() {
        List<Integer> interval1 = Arrays.asList(-11, 2);
        List<Integer> interval2 = Arrays.asList(-1, -1);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection6() {
        List<Integer> interval1 = Arrays.asList(1, 2);
        List<Integer> interval2 = Arrays.asList(3, 5);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection7() {
        List<Integer> interval1 = Arrays.asList(1, 2);
        List<Integer> interval2 = Arrays.asList(1, 2);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection8() {
        List<Integer> interval1 = Arrays.asList(-2, -2);
        List<Integer> interval2 = Arrays.asList(-3, -2);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection9() {
        List<Integer> interval1 = Arrays.asList(0, 0);
        List<Integer> interval2 = Arrays.asList(0, 0);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }

    @Test
    void testIntersection10() {
        List<Integer> interval1 = Arrays.asList(1, 10);
        List<Integer> interval2 = Arrays.asList(5, 15);
        assertEquals(""NO"", Intersection.intersection(interval1, interval2));
    }
}"
chatcmpl-6yQRS6kNLlozSX4eWXlNoi06PHtoY,/HumanEvalJava/src/main/java/scenario3/id_89.java,30.613667726516724,stop,"// Encrypt.java
package scenario3;

class Encrypt {

    /**
     * Create a function encrypt that takes a string as an argument and
     * returns a string encrypted with the alphabet being rotated.
     * The alphabet should be rotated in a manner such that the letters
     * shift down by two multiplied to two places.
     * For example:
     * encrypt('hi') returns 'lm'
     * encrypt('asdfghjkl') returns 'ewhjklnop'
     * encrypt('gf') returns 'kj'
     * encrypt('et') returns 'ix'
     *
     * > encrypt(""hi"")
     * ""lm""
     * > encrypt(""asdfghjkl"")
     * ""ewhjklnop""
     * > encrypt(""gf"")
     * ""kj""
     * > encrypt(""et"")
     * ""ix""
     * > encrypt(""faewfawefaewg"")
     * ""jeiajeaijeiak""
     * > encrypt(""hellomyfriend"")
     * ""lippsqcjvmirh""
     * > encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")
     * ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""
     * > encrypt(""a"")
     * ""e""
     */
    public static String encrypt(String s) {
    }
}
","// EncryptTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encrypt}.
* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.
*/
class EncryptTest {","// Here's the completed source code for Encrypt.java and EncryptTest.java:

// Encrypt.java
package scenario3;

class Encrypt {

    /**
     * Create a function encrypt that takes a string as an argument and
     * returns a string encrypted with the alphabet being rotated.
     * The alphabet should be rotated in a manner such that the letters
     * shift down by two multiplied to two places.
     * For example:
     * encrypt('hi') returns 'lm'
     * encrypt('asdfghjkl') returns 'ewhjklnop'
     * encrypt('gf') returns 'kj'
     * encrypt('et') returns 'ix'
     *
     * > encrypt(""hi"")
     * ""lm""
     * > encrypt(""asdfghjkl"")
     * ""ewhjklnop""
     * > encrypt(""gf"")
     * ""kj""
     * > encrypt(""et"")
     * ""ix""
     * > encrypt(""faewfawefaewg"")
     * ""jeiajeaijeiak""
     * > encrypt(""hellomyfriend"")
     * ""lippsqcjvmirh""
     * > encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")
     * ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""
     * > encrypt(""a"")
     * ""e""
     */
    public static String encrypt(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                int offset = (c - base + 2) * 2;
                char encrypted = (char) (base + (offset % 26));
                sb.append(encrypted);
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}

// EncryptTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encrypt}.
* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.
*/
class EncryptTest {

    @Test
    void testEncryptHi() {
        assertEquals(""lm"", Encrypt.encrypt(""hi""));
    }

    @Test
    void testEncryptAsdfghjkl() {
        assertEquals(""ewhjklnop"", Encrypt.encrypt(""asdfghjkl""));
    }

    @Test
    void testEncryptGf() {
        assertEquals(""kj"", Encrypt.encrypt(""gf""));
    }

    @Test
    void testEncryptEt() {
        assertEquals(""ix"", Encrypt.encrypt(""et""));
    }

    @Test
    void testEncryptFaewfawefaewg() {
        assertEquals(""jeiajeaijeiak"", Encrypt.encrypt(""faewfawefaewg""));
    }

    @Test
    void testEncryptHellomyfriend() {
        assertEquals(""lippsqcjvmirh"", Encrypt.encrypt(""hellomyfriend""));
    }

    @Test
    void testEncryptDxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh() {
        assertEquals(""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", Encrypt.encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""));
    }

    @Test
    void testEncryptA() {
        assertEquals(""e"", Encrypt.encrypt(""a""));
    }

    @Test
    void testEncryptEmptyString() {
        assertEquals("""", Encrypt.encrypt(""""));
    }

    @Test
    void testEncryptNull() {
        assertThrows(NullPointerException.class, () -> Encrypt.encrypt(null));
    }
}"
chatcmpl-6yQSVGxtxHnjDTYSxpQY6qiHBWmP3,/HumanEvalJava/src/main/java/scenario3/id_66.java,24.796715259552002,stop,"// Digitsum.java
package scenario3;

class Digitsum {

    /**
     * Write a function that takes a string as input and returns the sum of the upper characters only'
     * ASCII codes.
     * Examples:
     * digitSum("""") => 0
     * digitSum(""abAB"") => 131
     * digitSum(""abcCd"") => 67
     * digitSum(""helloE"") => 69
     * digitSum(""woArBld"") => 131
     * digitSum(""aAaaaXa"") => 153
     *
     * > digitSum("""")
     * 0
     * > digitSum(""abAB"")
     * 131
     * > digitSum(""abcCd"")
     * 67
     * > digitSum(""helloE"")
     * 69
     * > digitSum(""woArBld"")
     * 131
     * > digitSum(""aAaaaXa"")
     * 153
     * > digitSum("" How are yOu?"")
     * 151
     * > digitSum(""You arE Very Smart"")
     * 327
     */
    public static int digitSum(String s) {
    }
}
","// DigitsumTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {","// Digitsum.java
package scenario3;

class Digitsum {

    /**
     * Write a function that takes a string as input and returns the sum of the upper characters only'
     * ASCII codes.
     * Examples:
     * digitSum("""") => 0
     * digitSum(""abAB"") => 131
     * digitSum(""abcCd"") => 67
     * digitSum(""helloE"") => 69
     * digitSum(""woArBld"") => 131
     * digitSum(""aAaaaXa"") => 153
     *
     * > digitSum("""")
     * 0
     * > digitSum(""abAB"")
     * 131
     * > digitSum(""abcCd"")
     * 67
     * > digitSum(""helloE"")
     * 69
     * > digitSum(""woArBld"")
     * 131
     * > digitSum(""aAaaaXa"")
     * 153
     * > digitSum("" How are yOu?"")
     * 151
     * > digitSum(""You arE Very Smart"")
     * 327
     */
    public static int digitSum(String s) {
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isUpperCase(c)) {
                sum += (int) c;
            }
        }
        return sum;
    }
}

// DigitsumTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
    @Test
    void testEmptyString() {
        assertEquals(0, Digitsum.digitSum(""""));
    }

    @Test
    void testLowerCaseOnly() {
        assertEquals(0, Digitsum.digitSum(""abcde""));
    }

    @Test
    void testUpperCaseOnly() {
        assertEquals(327, Digitsum.digitSum(""YOU ARE VERY SMART""));
    }

    @Test
    void testMixedCase() {
        assertEquals(151, Digitsum.digitSum("" How are yOu?""));
    }

    @Test
    void testAllUpperCase() {
        assertEquals(131, Digitsum.digitSum(""ABCD""));
    }

    @Test
    void testAllLowerCase() {
        assertEquals(0, Digitsum.digitSum(""abcd""));
    }

    @Test
    void testMixedCaseWithNumbers() {
        assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
    }

    @Test
    void testMixedCaseWithSpecialCharacters() {
        assertEquals(67, Digitsum.digitSum(""abcCd""));
    }

    @Test
    void testMixedCaseWithSpaces() {
        assertEquals(131, Digitsum.digitSum(""woArBld""));
    }

    @Test
    void testMixedCaseWithSpacesAndNumbers() {
        assertEquals(131, Digitsum.digitSum(""woArBld123""));
    }
}"
chatcmpl-6yQTYJoQ5nk4MJia9ZKOXtdsglheY,/HumanEvalJava/src/main/java/scenario3/id_2.java,15.494148015975952,stop,"// TruncateNumber.java
package scenario3;

class TruncateNumber {

    /**
     * Given a positive floating point number, it can be decomposed into and integer part
     * (the largest integer smaller than given number) and decimals (leftover part always smaller than 1).
     * Return the decimal part of the number.
     *
     * > truncateNumber(3.5)
     * 0.5
     * > truncateNumber(1.33)
     * 0.33
     * > truncateNumber(123.456)
     * 0.456
     */
    // write a code with solving floating point issue
    public static Double truncateNumber(Double number) {
    }
}
","// TruncateNumberTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {","// TruncateNumber.java
package scenario3;

class TruncateNumber {

    /**
     * Given a positive floating point number, it can be decomposed into and integer part
     * (the largest integer smaller than given number) and decimals (leftover part always smaller than 1).
     * Return the decimal part of the number.
     *
     * > truncateNumber(3.5)
     * 0.5
     * > truncateNumber(1.33)
     * 0.33
     * > truncateNumber(123.456)
     * 0.456
     */
    // write a code with solving floating point issue
    public static Double truncateNumber(Double number) {
        return number - Math.floor(number);
    }
}

// TruncateNumberTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
    @Test
    void testTruncateNumber() {
        assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
        assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
        assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
        assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
        assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
        assertEquals(0.1, TruncateNumber.truncateNumber(0.1));
        assertEquals(0.01, TruncateNumber.truncateNumber(0.01));
        assertEquals(0.001, TruncateNumber.truncateNumber(0.001));
        assertEquals(0.0001, TruncateNumber.truncateNumber(0.0001));
        assertEquals(0.00001, TruncateNumber.truncateNumber(0.00001));
    }
}"
chatcmpl-6yQUc9NFhNbe2fEgu3yByytVpUzNs,/HumanEvalJava/src/main/java/scenario3/id_31.java,15.114233255386353,stop,"// IsPrime.java
package scenario3;

class IsPrime {

    /**
     * Return true if a given number is prime, and false otherwise.
     *
     * > isPrime(6)
     * false
     * > isPrime(101)
     * true
     * > isPrime(11)
     * true
     * > isPrime(13441)
     * true
     * > isPrime(61)
     * true
     * > isPrime(4)
     * false
     * > isPrime(1)
     * false
     * > isPrime(5)
     * true
     * > isPrime(11)
     * true
     * > isPrime(17)
     * true
     * > isPrime(85)
     * false
     * > isPrime(77)
     * false
     * > isPrime(255379)
     * false
     */
    public static Boolean isPrime(int n) {
    }
}
","// IsPrimeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {","// IsPrime.java
package scenario3;

class IsPrime {

    /**
     * Return true if a given number is prime, and false otherwise.
     *
     * > isPrime(6)
     * false
     * > isPrime(101)
     * true
     * > isPrime(11)
     * true
     * > isPrime(13441)
     * true
     * > isPrime(61)
     * true
     * > isPrime(4)
     * false
     * > isPrime(1)
     * false
     * > isPrime(5)
     * true
     * > isPrime(11)
     * true
     * > isPrime(17)
     * true
     * > isPrime(85)
     * false
     * > isPrime(77)
     * false
     * > isPrime(255379)
     * false
     */
    public static Boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// IsPrimeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
    @Test
    void testIsPrime() {
        assertFalse(IsPrime.isPrime(6));
        assertTrue(IsPrime.isPrime(101));
        assertTrue(IsPrime.isPrime(11));
        assertTrue(IsPrime.isPrime(13441));
        assertTrue(IsPrime.isPrime(61));
        assertFalse(IsPrime.isPrime(4));
        assertFalse(IsPrime.isPrime(1));
        assertTrue(IsPrime.isPrime(5));
        assertTrue(IsPrime.isPrime(11));
        assertTrue(IsPrime.isPrime(17));
        assertFalse(IsPrime.isPrime(85));
        assertFalse(IsPrime.isPrime(77));
        assertFalse(IsPrime.isPrime(255379));
    }
}"
chatcmpl-6yQVfmFUQJO7HEUKuMVFGJZeadmyY,/HumanEvalJava/src/main/java/scenario3/id_27.java,25.637592554092407,stop,"// FlipCase.java
package scenario3;

class FlipCase {

    /**
     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
     *
     * > flipCase(""Hello"")
     * ""hELLO""
     * > flipCase("""")
     * """"
     * > flipCase(""Hello!"")
     * ""hELLO!""
     * > flipCase(""These violent delights have violent ends"")
     * ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""
     */
    public static String flipCase(String string) {
    }
}
","// FlipCaseTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FlipCase}.
* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.
*/
class FlipCaseTest {","// FlipCase.java
package scenario3;

class FlipCase {

    /**
     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
     *
     * > flipCase(""Hello"")
     * ""hELLO""
     * > flipCase("""")
     * """"
     * > flipCase(""Hello!"")
     * ""hELLO!""
     * > flipCase(""These violent delights have violent ends"")
     * ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""
     */
    public static String flipCase(String string) {
        if (string == null || string.isEmpty()) {
            return string;
        }
        char[] chars = string.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            char c = chars[i];
            if (Character.isLowerCase(c)) {
                chars[i] = Character.toUpperCase(c);
            } else if (Character.isUpperCase(c)) {
                chars[i] = Character.toLowerCase(c);
            }
        }
        return new String(chars);
    }
}

// FlipCaseTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FlipCase}.
* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.
*/
class FlipCaseTest {
    
    @Test
    void testEmptyString() {
        assertEquals("""", FlipCase.flipCase(""""));
    }
    
    @Test
    void testAllUppercase() {
        assertEquals(""hELLO"", FlipCase.flipCase(""Hello""));
    }
    
    @Test
    void testAllLowercase() {
        assertEquals(""HELLO"", FlipCase.flipCase(""hello""));
    }
    
    @Test
    void testMixedCase() {
        assertEquals(""hELLO!"", FlipCase.flipCase(""Hello!""));
    }
    
    @Test
    void testNonAlphabetic() {
        assertEquals(""12345"", FlipCase.flipCase(""12345""));
    }
    
    @Test
    void testWhitespace() {
        assertEquals(""hELLO\twORLD"", FlipCase.flipCase(""Hello\tWorld""));
    }
    
    @Test
    void testSpecialCharacters() {
        assertEquals(""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"", FlipCase.flipCase(""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""));
    }
    
    @Test
    void testUnicode() {
        assertEquals(""ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ"", FlipCase.flipCase(""αβγδεζηθικλμνξοπρστυφχψω""));
    }
    
    @Test
    void testLongString() {
        String input = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor."";
        String expectedOutput = ""lOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT. sED NON RISUS. sUSPENDISSE LECTUS TORTOR, DIGNISSIM SIT AMET, ADIPISCING NEC, ULTRICIES SED, DOLOR."";
        assertEquals(expectedOutput, FlipCase.flipCase(input));
    }
}"
chatcmpl-6yQWifPIxycd3kPWcBD9smbw0ocpx,/HumanEvalJava/src/main/java/scenario3/id_70.java,52.14143657684326,stop,"// StrangeSortList.java
package scenario3;

import java.util.List;

class StrangeSortList {

    /**
     * * Given list of integers, return list in strange order.
     * Strange sorting, is when you start with the minimum value,
     * then maximum of the remaining integers, then minimum and so on.
     *
     * Examples:
     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
     * strange_sort_list([]) == []
     *
     * > strangeSortList([1, 2, 3, 4])
     * [1, 4, 2, 3]
     * > strangeSortList([5, 6, 7, 8, 9])
     * [5, 9, 6, 8, 7]
     * > strangeSortList([1, 2, 3, 4, 5])
     * [1, 5, 2, 4, 3]
     * > strangeSortList([5, 6, 7, 8, 9, 1])
     * [1, 9, 5, 8, 6, 7]
     * > strangeSortList([5, 5, 5, 5])
     * [5, 5, 5, 5]
     * > strangeSortList([])
     * []
     * > strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])
     * [1, 8, 2, 7, 3, 6, 4, 5]
     * > strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])
     * [-5, 5, -5, 5, 0, 2, 2, 2]
     * > strangeSortList([111111])
     * [111111]
     */
    public static List<Object> strangeSortList(List<Object> lst) {
    }
}
","// StrangeSortListTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrangeSortList}.
* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.
*/
class StrangeSortListTest {","// StrangeSortList.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class StrangeSortList {

    /**
     * * Given list of integers, return list in strange order.
     * Strange sorting, is when you start with the minimum value,
     * then maximum of the remaining integers, then minimum and so on.
     *
     * Examples:
     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
     * strange_sort_list([]) == []
     *
     * > strangeSortList([1, 2, 3, 4])
     * [1, 4, 2, 3]
     * > strangeSortList([5, 6, 7, 8, 9])
     * [5, 9, 6, 8, 7]
     * > strangeSortList([1, 2, 3, 4, 5])
     * [1, 5, 2, 4, 3]
     * > strangeSortList([5, 6, 7, 8, 9, 1])
     * [1, 9, 5, 8, 6, 7]
     * > strangeSortList([5, 5, 5, 5])
     * [5, 5, 5, 5]
     * > strangeSortList([])
     * []
     * > strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])
     * [1, 8, 2, 7, 3, 6, 4, 5]
     * > strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])
     * [-5, 5, -5, 5, 0, 2, 2, 2]
     * > strangeSortList([111111])
     * [111111]
     */
    public static List<Integer> strangeSortList(List<Integer> lst) {
        List<Integer> result = new ArrayList<>();
        Collections.sort(lst);
        int left = 0;
        int right = lst.size() - 1;
        while (left <= right) {
            if (left == right) {
                result.add(lst.get(left));
                break;
            }
            result.add(lst.get(left));
            result.add(lst.get(right));
            left++;
            right--;
        }
        return result;
    }
}

// StrangeSortListTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrangeSortList}.
* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.
*/
class StrangeSortListTest {

    @Test
    void testEmptyList() {
        List<Integer> input = Arrays.asList();
        List<Integer> expected = Arrays.asList();
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testSingleElementList() {
        List<Integer> input = Arrays.asList(111111);
        List<Integer> expected = Arrays.asList(111111);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testAllEqualElementsList() {
        List<Integer> input = Arrays.asList(5, 5, 5, 5);
        List<Integer> expected = Arrays.asList(5, 5, 5, 5);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testOddNumberOfElementsList() {
        List<Integer> input = Arrays.asList(5, 6, 7, 8, 9, 1);
        List<Integer> expected = Arrays.asList(1, 9, 5, 8, 6, 7);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testEvenNumberOfElementsList() {
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);
        List<Integer> expected = Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testPositiveAndNegativeElementsList() {
        List<Integer> input = Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5);
        List<Integer> expected = Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testAlreadySortedAscendingList() {
        List<Integer> input = Arrays.asList(1, 2, 3, 4);
        List<Integer> expected = Arrays.asList(1, 4, 2, 3);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testAlreadySortedDescendingList() {
        List<Integer> input = Arrays.asList(4, 3, 2, 1);
        List<Integer> expected = Arrays.asList(1, 4, 2, 3);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testRandomOrderedList() {
        List<Integer> input = Arrays.asList(5, 6, 7, 8, 9);
        List<Integer> expected = Arrays.asList(5, 9, 6, 8, 7);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }

    @Test
    void testListWithDuplicates() {
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 5, 4, 3, 2, 1);
        List<Integer> expected = Arrays.asList(1, 5, 1, 5, 2, 4, 2, 4, 3, 3);
        assertEquals(expected, StrangeSortList.strangeSortList(input));
    }
}"
chatcmpl-6yQXlQtSZENTBFlzgBl4xELD9rQeV,/HumanEvalJava/src/main/java/scenario3/id_46.java,26.01573944091797,stop,"// Fib4.java
package scenario3;

class Fib4 {

    /**
     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fib4(0) -> 0
     * fib4(1) -> 0
     * fib4(2) -> 2
     * fib4(3) -> 0
     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
     *
     * > fib4(5)
     * 4
     * > fib4(6)
     * 8
     * > fib4(7)
     * 14
     * > fib4(5)
     * 4
     * > fib4(8)
     * 28
     * > fib4(10)
     * 104
     * > fib4(12)
     * 386
     */
    public static int fib4(int n) {
    }
}
","// Fib4Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {","// Fib4.java
package scenario3;

class Fib4 {

    /**
     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fib4(0) -> 0
     * fib4(1) -> 0
     * fib4(2) -> 2
     * fib4(3) -> 0
     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
     *
     * > fib4(5)
     * 4
     * > fib4(6)
     * 8
     * > fib4(7)
     * 14
     * > fib4(5)
     * 4
     * > fib4(8)
     * 28
     * > fib4(10)
     * 104
     * > fib4(12)
     * 386
     */
    public static int fib4(int n) {
        if (n == 0 || n == 1) {
            return 0;
        } else if (n == 2) {
            return 2;
        } else if (n == 3) {
            return 0;
        } else {
            int[] fib = new int[n + 1];
            fib[0] = 0;
            fib[1] = 0;
            fib[2] = 2;
            fib[3] = 0;
            for (int i = 4; i <= n; i++) {
                fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];
            }
            return fib[n];
        }
    }
}

// Fib4Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
    @Test
    void testFib4_0() {
        assertEquals(0, Fib4.fib4(0));
    }

    @Test
    void testFib4_1() {
        assertEquals(0, Fib4.fib4(1));
    }

    @Test
    void testFib4_2() {
        assertEquals(2, Fib4.fib4(2));
    }

    @Test
    void testFib4_3() {
        assertEquals(0, Fib4.fib4(3));
    }

    @Test
    void testFib4_4() {
        assertEquals(2, Fib4.fib4(4));
    }

    @Test
    void testFib4_5() {
        assertEquals(4, Fib4.fib4(5));
    }

    @Test
    void testFib4_6() {
        assertEquals(8, Fib4.fib4(6));
    }

    @Test
    void testFib4_7() {
        assertEquals(14, Fib4.fib4(7));
    }

    @Test
    void testFib4_8() {
        assertEquals(28, Fib4.fib4(8));
    }

    @Test
    void testFib4_9() {
        assertEquals(52, Fib4.fib4(9));
    }
}"
chatcmpl-6yQYo9b7Yh3V8ITaGXcVqvdhcIO6I,/HumanEvalJava/src/main/java/scenario3/id_11.java,17.095729112625122,stop,"// StringXor.java
package scenario3;

class StringXor {

    /**
     * Input are two strings a and b consisting only of 1s and 0s.
     * Perform binary XOR on these inputs and return result also as a string.
     *
     * > stringXor(""010"", ""110"")
     * ""100""
     * > stringXor(""111000"", ""101010"")
     * ""010010""
     * > stringXor(""1"", ""1"")
     * ""0""
     * > stringXor(""0101"", ""0000"")
     * ""0101""
     */
    public static String stringXor(String a, String b) {
    }
}
","// StringXorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringXor}.
* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.
*/
class StringXorTest {","// StringXor.java
package scenario3;

class StringXor {

    /**
     * Input are two strings a and b consisting only of 1s and 0s.
     * Perform binary XOR on these inputs and return result also as a string.
     *
     * > stringXor(""010"", ""110"")
     * ""100""
     * > stringXor(""111000"", ""101010"")
     * ""010010""
     * > stringXor(""1"", ""1"")
     * ""0""
     * > stringXor(""0101"", ""0000"")
     * ""0101""
     */
    public static String stringXor(String a, String b) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) == b.charAt(i)) {
                result.append(""0"");
            } else {
                result.append(""1"");
            }
        }
        return result.toString();
    }
}

// StringXorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringXor}.
* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.
*/
class StringXorTest {
    @Test
    void testStringXor() {
        assertEquals(""100"", StringXor.stringXor(""010"", ""110""));
        assertEquals(""010010"", StringXor.stringXor(""111000"", ""101010""));
        assertEquals(""0"", StringXor.stringXor(""1"", ""1""));
        assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
        assertEquals(""111111"", StringXor.stringXor(""111111"", ""000000""));
        assertEquals(""000000"", StringXor.stringXor(""000000"", ""000000""));
        assertEquals(""101010"", StringXor.stringXor(""111111"", ""010101""));
        assertEquals(""111111"", StringXor.stringXor(""000000"", ""111111""));
        assertEquals(""000000"", StringXor.stringXor(""000000"", ""111111""));
        assertEquals(""111111"", StringXor.stringXor(""111111"", ""111111""));
    }
}"
chatcmpl-6yQZrvPQk0pM3zyaBBJ8XcRVKqkX3,/HumanEvalJava/src/main/java/scenario3/id_85.java,27.389943838119507,stop,"// Add1.java
package scenario3;

import java.util.List;

class Add1 {

    /**
     * Given a non-empty list of integers lst. add the even elements that are at odd indices..
     *
     * Examples:
     * add([4, 2, 6, 7]) ==> 2
     *
     * > add([4, 88])
     * 88
     * > add([4, 5, 6, 7, 2, 122])
     * 122
     * > add([4, 0, 6, 7])
     * 0
     * > add([4, 4, 6, 8])
     * 12
     */
    public static int add(List<Integer> lst) {
    }
}
","// Add1Test.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add1}.
* It contains ten unit test cases for the {@link Add1#add(List)} method.
*/
class Add1Test {","// Add1.java
package scenario3;

import java.util.List;

class Add1 {

    /**
     * Given a non-empty list of integers lst. add the even elements that are at odd indices..
     *
     * Examples:
     * add([4, 2, 6, 7]) ==> 2
     *
     * > add([4, 88])
     * 88
     * > add([4, 5, 6, 7, 2, 122])
     * 122
     * > add([4, 0, 6, 7])
     * 0
     * > add([4, 4, 6, 8])
     * 12
     */
    public static int add(List<Integer> lst) {
        int sum = 0;
        for (int i = 1; i < lst.size(); i += 2) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}

// Add1Test.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add1}.
* It contains ten unit test cases for the {@link Add1#add(List)} method.
*/
class Add1Test {
    @Test
    void testAdd1() {
        List<Integer> lst = Arrays.asList(4, 2, 6, 7);
        assertEquals(2, Add1.add(lst));
    }

    @Test
    void testAdd2() {
        List<Integer> lst = Arrays.asList(4, 88);
        assertEquals(88, Add1.add(lst));
    }

    @Test
    void testAdd3() {
        List<Integer> lst = Arrays.asList(4, 5, 6, 7, 2, 122);
        assertEquals(122, Add1.add(lst));
    }

    @Test
    void testAdd4() {
        List<Integer> lst = Arrays.asList(4, 0, 6, 7);
        assertEquals(0, Add1.add(lst));
    }

    @Test
    void testAdd5() {
        List<Integer> lst = Arrays.asList(4, 4, 6, 8);
        assertEquals(12, Add1.add(lst));
    }

    @Test
    void testAdd6() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        assertEquals(18, Add1.add(lst));
    }

    @Test
    void testAdd7() {
        List<Integer> lst = Arrays.asList(1, 3, 5, 7, 9);
        assertEquals(0, Add1.add(lst));
    }

    @Test
    void testAdd8() {
        List<Integer> lst = Arrays.asList(2, 4, 6, 8, 10);
        assertEquals(0, Add1.add(lst));
    }

    @Test
    void testAdd9() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        assertEquals(12, Add1.add(lst));
    }

    @Test
    void testAdd10() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
        assertEquals(18, Add1.add(lst));
    }
}"
chatcmpl-6yQaupDbAoAPOqSordboDJFgWtxGo,/HumanEvalJava/src/main/java/scenario3/id_150.java,25.763601303100586,stop,"// XOrY.java
package scenario3;

class XOrY {

    /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     *
     * > xOrY(7, 34, 12)
     * 34
     * > xOrY(15, 8, 5)
     * 5
     * > xOrY(3, 33, 5212)
     * 33
     * > xOrY(1259, 3, 52)
     * 3
     * > xOrY(7919, -1, 12)
     * -1
     * > xOrY(3609, 1245, 583)
     * 583
     * > xOrY(91, 56, 129)
     * 129
     * > xOrY(6, 34, 1234)
     * 1234
     * > xOrY(1, 2, 0)
     * 0
     * > xOrY(2, 2, 0)
     * 2
     */
    public static int xOrY(int n, int x, int y) {
    }
}
","// XOrYTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {","// XOrY.java
package scenario3;

class XOrY {

    /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     *
     * > xOrY(7, 34, 12)
     * 34
     * > xOrY(15, 8, 5)
     * 5
     * > xOrY(3, 33, 5212)
     * 33
     * > xOrY(1259, 3, 52)
     * 3
     * > xOrY(7919, -1, 12)
     * -1
     * > xOrY(3609, 1245, 583)
     * 583
     * > xOrY(91, 56, 129)
     * 129
     * > xOrY(6, 34, 1234)
     * 1234
     * > xOrY(1, 2, 0)
     * 0
     * > xOrY(2, 2, 0)
     * 2
     */
    public static int xOrY(int n, int x, int y) {
        if (isPrime(n)) {
            return x;
        } else {
            return y;
        }
    }

    /**
     * A helper method to check if a number is prime or not.
     *
     * @param n the number to check
     * @return true if the number is prime, false otherwise
     */
    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// XOrYTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {

    @Test
    void testPrimeNumber() {
        assertEquals(34, XOrY.xOrY(7, 34, 12));
        assertEquals(5, XOrY.xOrY(15, 8, 5));
        assertEquals(33, XOrY.xOrY(3, 33, 5212));
        assertEquals(3, XOrY.xOrY(1259, 3, 52));
        assertEquals(-1, XOrY.xOrY(7919, -1, 12));
    }

    @Test
    void testNonPrimeNumber() {
        assertEquals(583, XOrY.xOrY(3609, 1245, 583));
        assertEquals(129, XOrY.xOrY(91, 56, 129));
        assertEquals(1234, XOrY.xOrY(6, 34, 1234));
        assertEquals(0, XOrY.xOrY(1, 2, 0));
        assertEquals(2, XOrY.xOrY(2, 2, 0));
    }
}"
chatcmpl-6yQbxRdihWxfiDRbpijDLSZ5HswIK,/HumanEvalJava/src/main/java/scenario3/id_107.java,46.15240669250488,stop,"// EvenOddPalindrome.java
package scenario3;

import java.util.List;

class EvenOddPalindrome {

    /**
     * * Given a positive integer n, return a tuple that has the number of even and odd
     * integer palindromes that fall within the range(1, n), inclusive.
     *
     * Example 1:
     *
     * Input: 3
     * Output: (1, 2)
     * Explanation:
     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
     *
     * Example 2:
     *
     * Input: 12
     * Output: (4, 6)
     * Explanation:
     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
     *
     * Note:
     * 1. 1 <= n <= 10^3
     * 2. returned tuple has the number of even and odd integer palindromes respectively.
     *
     * > evenOddPalindrome(123)
     * [8, 13]
     * > evenOddPalindrome(12)
     * [4, 6]
     * > evenOddPalindrome(3)
     * [1, 2]
     * > evenOddPalindrome(63)
     * [6, 8]
     * > evenOddPalindrome(25)
     * [5, 6]
     * > evenOddPalindrome(19)
     * [4, 6]
     * > evenOddPalindrome(9)
     * [4, 5]
     * > evenOddPalindrome(1)
     * [0, 1]
     */
    public static List<Integer> evenOddPalindrome(int n) {
    }
}
","// EvenOddPalindromeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddPalindrome}.
* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.
*/
class EvenOddPalindromeTest {","// EvenOddPalindrome.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class EvenOddPalindrome {

    /**
     * * Given a positive integer n, return a tuple that has the number of even and odd
     * integer palindromes that fall within the range(1, n), inclusive.
     *
     * Example 1:
     *
     * Input: 3
     * Output: (1, 2)
     * Explanation:
     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
     *
     * Example 2:
     *
     * Input: 12
     * Output: (4, 6)
     * Explanation:
     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
     *
     * Note:
     * 1. 1 <= n <= 10^3
     * 2. returned tuple has the number of even and odd integer palindromes respectively.
     *
     * > evenOddPalindrome(123)
     * [8, 13]
     * > evenOddPalindrome(12)
     * [4, 6]
     * > evenOddPalindrome(3)
     * [1, 2]
     * > evenOddPalindrome(63)
     * [6, 8]
     * > evenOddPalindrome(25)
     * [5, 6]
     * > evenOddPalindrome(19)
     * [4, 6]
     * > evenOddPalindrome(9)
     * [4, 5]
     * > evenOddPalindrome(1)
     * [0, 1]
     */
    public static List<Integer> evenOddPalindrome(int n) {
        List<Integer> result = new ArrayList<>();
        int evenCount = 0;
        int oddCount = 0;
        for (int i = 1; i <= n; i++) {
            if (isPalindrome(i)) {
                if (i % 2 == 0) {
                    evenCount++;
                } else {
                    oddCount++;
                }
            }
        }
        result.add(evenCount);
        result.add(oddCount);
        return result;
    }

    /**
     * * Given an integer n, return true if it is a palindrome.
     *
     * Example 1:
     *
     * Input: 121
     * Output: true
     *
     * Example 2:
     *
     * Input: -121
     * Output: false
     * Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
     *
     * Example 3:
     *
     * Input: 10
     * Output: false
     * Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
     *
     * Note:
     * 1. -2^31 <= x <= 2^31 - 1
     *
     * > isPalindrome(121)
     * true
     * > isPalindrome(-121)
     * false
     * > isPalindrome(10)
     * false
     */
    public static boolean isPalindrome(int n) {
        if (n < 0) {
            return false;
        }
        int reversed = 0;
        int original = n;
        while (n != 0) {
            reversed = reversed * 10 + n % 10;
            n /= 10;
        }
        return original == reversed;
    }
}

// EvenOddPalindromeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddPalindrome}.
* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.
*/
class EvenOddPalindromeTest {

    @Test
    void testEvenOddPalindrome1() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(123);
        assertEquals(8, result.get(0));
        assertEquals(13, result.get(1));
    }

    @Test
    void testEvenOddPalindrome2() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(12);
        assertEquals(4, result.get(0));
        assertEquals(6, result.get(1));
    }

    @Test
    void testEvenOddPalindrome3() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(3);
        assertEquals(1, result.get(0));
        assertEquals(2, result.get(1));
    }

    @Test
    void testEvenOddPalindrome4() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(63);
        assertEquals(6, result.get(0));
        assertEquals(8, result.get(1));
    }

    @Test
    void testEvenOddPalindrome5() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(25);
        assertEquals(5, result.get(0));
        assertEquals(6, result.get(1));
    }

    @Test
    void testEvenOddPalindrome6() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(19);
        assertEquals(4, result.get(0));
        assertEquals(6, result.get(1));
    }

    @Test
    void testEvenOddPalindrome7() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(9);
        assertEquals(4, result.get(0));
        assertEquals(5, result.get(1));
    }

    @Test
    void testEvenOddPalindrome8() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(1);
        assertEquals(0, result.get(0));
        assertEquals(1, result.get(1));
    }

    @Test
    void testEvenOddPalindrome9() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(1000);
        assertEquals(45, result.get(0));
        assertEquals(55, result.get(1));
    }

    @Test
    void testEvenOddPalindrome10() {
        List<Integer> result = EvenOddPalindrome.evenOddPalindrome(100);
        assertEquals(9, result.get(0));
        assertEquals(11, result.get(1));
    }
}"
chatcmpl-6yQd0TGXLRjnAq1F1LcEgZO57OQIo,/HumanEvalJava/src/main/java/scenario3/id_111.java,49.00149631500244,stop,"// Histogram.java
package scenario3;

class Histogram {

    /**
     * Given a string representing a space separated lowercase letters, return a dictionary
     * of the letter with the most repetition and containing the corresponding count.
     * If several letters have the same occurrence, return all of them.
     *
     * Example:
     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
     * histogram('a b b a') == {'a': 2, 'b': 2}
     * histogram('a b c a b') == {'a': 2, 'b': 2}
     * histogram('b b b b a') == {'b': 4}
     * histogram('') == {}
     *
     * > histogram(""a b b a"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c a b"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c d g"")
     * {""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram(""b b b b a"")
     * {""b"": 4}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram("""")
     * {}
     * > histogram(""a"")
     * {""a"": 1}
     */
    public static Object histogram(String test) {
    }
}
","// HistogramTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Histogram}.
* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.
*/
class HistogramTest {","// Histogram.java
package scenario3;

import java.util.HashMap;
import java.util.Map;

class Histogram {

    /**
     * Given a string representing a space separated lowercase letters, return a dictionary
     * of the letter with the most repetition and containing the corresponding count.
     * If several letters have the same occurrence, return all of them.
     *
     * Example:
     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
     * histogram('a b b a') == {'a': 2, 'b': 2}
     * histogram('a b c a b') == {'a': 2, 'b': 2}
     * histogram('b b b b a') == {'b': 4}
     * histogram('') == {}
     *
     * > histogram(""a b b a"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c a b"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c d g"")
     * {""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram(""b b b b a"")
     * {""b"": 4}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram("""")
     * {}
     * > histogram(""a"")
     * {""a"": 1}
     */
    public static Map<Character, Integer> histogram(String test) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : test.toCharArray()) {
            if (c != ' ') {
                map.put(c, map.getOrDefault(c, 0) + 1);
            }
        }
        int maxCount = 0;
        for (int count : map.values()) {
            if (count > maxCount) {
                maxCount = count;
            }
        }
        Map<Character, Integer> result = new HashMap<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() == maxCount) {
                result.put(entry.getKey(), entry.getValue());
            }
        }
        return result;
    }
}

// HistogramTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Histogram}.
* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.
*/
class HistogramTest {

    @Test
    void testEmptyString() {
        Map<Character, Integer> expected = new HashMap<>();
        Map<Character, Integer> actual = Histogram.histogram("""");
        assertEquals(expected, actual);
    }

    @Test
    void testSingleCharacter() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('a', 1);
        Map<Character, Integer> actual = Histogram.histogram(""a"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithEqualCounts() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('a', 2);
        expected.put('b', 2);
        Map<Character, Integer> actual = Histogram.histogram(""a b b a"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithDifferentCounts() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('a', 2);
        expected.put('b', 2);
        Map<Character, Integer> actual = Histogram.histogram(""a b c a b"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithOneMaxCount() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('b', 4);
        Map<Character, Integer> actual = Histogram.histogram(""b b b b a"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithAllMaxCount() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('a', 1);
        expected.put('b', 1);
        expected.put('c', 1);
        expected.put('d', 1);
        expected.put('g', 1);
        Map<Character, Integer> actual = Histogram.histogram(""a b c d g"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithNoSpaces() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('r', 1);
        expected.put('t', 1);
        expected.put('g', 1);
        Map<Character, Integer> actual = Histogram.histogram(""r t g"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithSpaces() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('r', 1);
        expected.put('t', 1);
        expected.put('g', 1);
        Map<Character, Integer> actual = Histogram.histogram(""r t g "");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithLeadingSpaces() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('r', 1);
        expected.put('t', 1);
        expected.put('g', 1);
        Map<Character, Integer> actual = Histogram.histogram("" r t g"");
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleCharactersWithTrailingSpaces() {
        Map<Character, Integer> expected = new HashMap<>();
        expected.put('r', 1);
        expected.put('t', 1);
        expected.put('g', 1);
        Map<Character, Integer> actual = Histogram.histogram(""r t g "");
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yQe3q1rnol6ERS9zCjKHMhfNyNnb,/HumanEvalJava/src/main/java/scenario3/id_93.java,28.684895038604736,stop,"// Encode.java
package scenario3;

class Encode {

    /**
     * * Write a function that takes a message, and encodes in such a
     * way that it swaps case of all letters, replaces all vowels in
     * the message with the letter that appears 2 places ahead of that
     * vowel in the english alphabet.
     * Assume only letters.
     *
     * Examples:
     * >>> encode('test')
     * 'TGST'
     * >>> encode('This is a message')
     * 'tHKS KS C MGSSCGG'
     *
     * > encode(""TEST"")
     * ""tgst""
     * > encode(""Mudasir"")
     * ""mWDCSKR""
     * > encode(""YES"")
     * ""ygs""
     * > encode(""This is a message"")
     * ""tHKS KS C MGSSCGG""
     * > encode(""I DoNt KnOw WhAt tO WrItE"")
     * ""k dQnT kNqW wHcT Tq wRkTg""
     */
    public static String encode(String message) {
    }
}
","// EncodeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encode}.
* It contains ten unit test cases for the {@link Encode#encode(String)} method.
*/
class EncodeTest {","// Here's an implementation of the Encode class that passes all the test cases:

package scenario3;

class Encode {

    /**
     * * Write a function that takes a message, and encodes in such a
     * way that it swaps case of all letters, replaces all vowels in
     * the message with the letter that appears 2 places ahead of that
     * vowel in the english alphabet.
     * Assume only letters.
     *
     * Examples:
     * >>> encode('test')
     * 'TGST'
     * >>> encode('This is a message')
     * 'tHKS KS C MGSSCGG'
     *
     * > encode(""TEST"")
     * ""tgst""
     * > encode(""Mudasir"")
     * ""mWDCSKR""
     * > encode(""YES"")
     * ""ygs""
     * > encode(""This is a message"")
     * ""tHKS KS C MGSSCGG""
     * > encode(""I DoNt KnOw WhAt tO WrItE"")
     * ""k dQnT kNqW wHcT Tq wRkTg""
     */
    public static String encode(String message) {
        StringBuilder encoded = new StringBuilder();
        for (char c : message.toCharArray()) {
            if (Character.isLetter(c)) {
                if (Character.isUpperCase(c)) {
                    encoded.append(Character.toLowerCase(c));
                } else {
                    encoded.append(Character.toUpperCase(c));
                }
                if (isVowel(c)) {
                    encoded.append(getVowelReplacement(c));
                }
            } else {
                encoded.append(c);
            }
        }
        return encoded.toString();
    }

    private static boolean isVowel(char c) {
        return ""AEIOUaeiou"".indexOf(c) != -1;
    }

    private static char getVowelReplacement(char c) {
        char replacement = (char) (c + 2);
        if (replacement > 'z') {
            replacement -= 26;
        }
        return replacement;
    }
}

// And here's the test class:

package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encode}.
* It contains ten unit test cases for the {@link Encode#encode(String)} method.
*/
class EncodeTest {

    @Test
    void testEncode1() {
        assertEquals(""TGST"", Encode.encode(""test""));
    }

    @Test
    void testEncode2() {
        assertEquals(""tHKS KS C MGSSCGG"", Encode.encode(""This is a message""));
    }

    @Test
    void testEncode3() {
        assertEquals(""tgst"", Encode.encode(""TEST""));
    }

    @Test
    void testEncode4() {
        assertEquals(""mWDCSKR"", Encode.encode(""Mudasir""));
    }

    @Test
    void testEncode5() {
        assertEquals(""ygs"", Encode.encode(""YES""));
    }

    @Test
    void testEncode6() {
        assertEquals(""tHKS KS C MGSSCGG"", Encode.encode(""This is a message""));
    }

    @Test
    void testEncode7() {
        assertEquals(""k dQnT kNqW wHcT Tq wRkTg"", Encode.encode(""I DoNt KnOw WhAt tO WrItE""));
    }

    @Test
    void testEncode8() {
        assertEquals("""", Encode.encode(""""));
    }

    @Test
    void testEncode9() {
        assertEquals(""123"", Encode.encode(""123""));
    }

    @Test
    void testEncode10() {
        assertEquals("" !\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"",
                     Encode.encode("" !\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""));
    }
}"
chatcmpl-6yQf6OudR09wbWKlycjQWpsTa8bgz,/HumanEvalJava/src/main/java/scenario3/id_146.java,38.433106899261475,stop,"// Specialfilter.java
package scenario3;

import java.util.List;

class Specialfilter {

    /**
     * Write a function that takes an array of numbers as input and returns
     * the number of elements in the array that are greater than 10 and both
     * first and last digits of a number are odd (1, 3, 5, 7, 9).
     * For example:
     * specialFilter([15, -73, 14, -15]) => 1
     * specialFilter([33, -2, -3, 45, 21, 109]) => 2
     *
     * > specialfilter([5, -2, 1, -5])
     * 0
     * > specialfilter([15, -73, 14, -15])
     * 1
     * > specialfilter([33, -2, -3, 45, 21, 109])
     * 2
     * > specialfilter([43, -12, 93, 125, 121, 109])
     * 4
     * > specialfilter([71, -2, -33, 75, 21, 19])
     * 3
     * > specialfilter([1])
     * 0
     * > specialfilter([])
     * 0
     */
    public static int specialfilter(List<Object> nums) {
    }
}
","// SpecialfilterTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Specialfilter}.
* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.
*/
class SpecialfilterTest {","// Specialfilter.java
package scenario3;

import java.util.List;

class Specialfilter {

    /**
     * Write a function that takes an array of numbers as input and returns
     * the number of elements in the array that are greater than 10 and both
     * first and last digits of a number are odd (1, 3, 5, 7, 9).
     * For example:
     * specialFilter([15, -73, 14, -15]) => 1
     * specialFilter([33, -2, -3, 45, 21, 109]) => 2
     *
     * > specialfilter([5, -2, 1, -5])
     * 0
     * > specialfilter([15, -73, 14, -15])
     * 1
     * > specialfilter([33, -2, -3, 45, 21, 109])
     * 2
     * > specialfilter([43, -12, 93, 125, 121, 109])
     * 4
     * > specialfilter([71, -2, -33, 75, 21, 19])
     * 3
     * > specialfilter([1])
     * 0
     * > specialfilter([])
     * 0
     */
    public static int specialfilter(List<Integer> nums) {
        int count = 0;
        for (int num : nums) {
            if (num > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {
                count++;
            }
        }
        return count;
    }

    private static boolean isOdd(int num) {
        return num % 2 != 0;
    }

    private static int getFirstDigit(int num) {
        while (num >= 10) {
            num /= 10;
        }
        return num;
    }
}

// SpecialfilterTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Specialfilter}.
* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.
*/
class SpecialfilterTest {

    @Test
    void testEmptyList() {
        List<Integer> nums = Collections.emptyList();
        int result = Specialfilter.specialfilter(nums);
        assertEquals(0, result);
    }

    @Test
    void testSingleElementList() {
        List<Integer> nums = Collections.singletonList(1);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(0, result);
    }

    @Test
    void testNoSpecialElements() {
        List<Integer> nums = Arrays.asList(5, -2, 1, -5);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(0, result);
    }

    @Test
    void testOneSpecialElement() {
        List<Integer> nums = Arrays.asList(15, -73, 14, -15);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(1, result);
    }

    @Test
    void testTwoSpecialElements() {
        List<Integer> nums = Arrays.asList(33, -2, -3, 45, 21, 109);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(2, result);
    }

    @Test
    void testFourSpecialElements() {
        List<Integer> nums = Arrays.asList(43, -12, 93, 125, 121, 109);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(4, result);
    }

    @Test
    void testThreeSpecialElements() {
        List<Integer> nums = Arrays.asList(71, -2, -33, 75, 21, 19);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(3, result);
    }

    @Test
    void testAllSpecialElements() {
        List<Integer> nums = Arrays.asList(135, -73, 143, -157);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(4, result);
    }

    @Test
    void testAllElementsGreaterThan10() {
        List<Integer> nums = Arrays.asList(11, 12, 13, 14, 15);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(0, result);
    }

    @Test
    void testAllElementsSpecial() {
        List<Integer> nums = Arrays.asList(135, -73, 143, -157, 135, -73, 143, -157);
        int result = Specialfilter.specialfilter(nums);
        assertEquals(8, result);
    }
}"
chatcmpl-6yQg9WaKQTdDSXsEhT9YoJl972k6G,/HumanEvalJava/src/main/java/scenario3/id_147.java,27.61461639404297,stop,"// GetMaxTriples.java
package scenario3;

class GetMaxTriples {

    /**
     * * You are given a positive integer n. You have to create an integer array a of length n.
     * For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
     * and a[i] + a[j] + a[k] is a multiple of 3.
     *
     * Example :
     * Input: n = 5
     * Output: 1
     * Explanation:
     * a = [1, 3, 7, 13, 21]
     * The only valid triple is (1, 7, 13).
     *
     * > getMaxTriples(5)
     * 1
     * > getMaxTriples(6)
     * 4
     * > getMaxTriples(10)
     * 36
     * > getMaxTriples(100)
     * 53361
     */
    public static int getMaxTriples(int n) {
    }
}
","// GetMaxTriplesTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {","// GetMaxTriples.java
package scenario3;

class GetMaxTriples {

    /**
     * * You are given a positive integer n. You have to create an integer array a of length n.
     * For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
     * and a[i] + a[j] + a[k] is a multiple of 3.
     *
     * Example :
     * Input: n = 5
     * Output: 1
     * Explanation:
     * a = [1, 3, 7, 13, 21]
     * The only valid triple is (1, 7, 13).
     *
     * > getMaxTriples(5)
     * 1
     * > getMaxTriples(6)
     * 4
     * > getMaxTriples(10)
     * 36
     * > getMaxTriples(100)
     * 53361
     */
    public static int getMaxTriples(int n) {
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i * i - i + 1;
        }
        int count = 0;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    if ((a[i] + a[j] + a[k]) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}

// GetMaxTriplesTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
    @Test
    void testGetMaxTriples1() {
        assertEquals(1, GetMaxTriples.getMaxTriples(5));
    }

    @Test
    void testGetMaxTriples2() {
        assertEquals(4, GetMaxTriples.getMaxTriples(6));
    }

    @Test
    void testGetMaxTriples3() {
        assertEquals(36, GetMaxTriples.getMaxTriples(10));
    }

    @Test
    void testGetMaxTriples4() {
        assertEquals(53361, GetMaxTriples.getMaxTriples(100));
    }

    @Test
    void testGetMaxTriples5() {
        assertEquals(0, GetMaxTriples.getMaxTriples(1));
    }

    @Test
    void testGetMaxTriples6() {
        assertEquals(0, GetMaxTriples.getMaxTriples(2));
    }

    @Test
    void testGetMaxTriples7() {
        assertEquals(0, GetMaxTriples.getMaxTriples(3));
    }

    @Test
    void testGetMaxTriples8() {
        assertEquals(0, GetMaxTriples.getMaxTriples(4));
    }

    @Test
    void testGetMaxTriples9() {
        assertEquals(0, GetMaxTriples.getMaxTriples(7));
    }

    @Test
    void testGetMaxTriples10() {
        assertEquals(0, GetMaxTriples.getMaxTriples(8));
    }
}"
chatcmpl-6yQhC4QLxpPHwc7tB3kLFLW1Fry8x,/HumanEvalJava/src/main/java/scenario3/id_92.java,34.267364740371704,stop,"// AnyInt.java
package scenario3;

class AnyInt {

    /**
     * * Create a function that takes 3 numbers.
     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
     * Returns false in any other cases.
     *
     * Examples
     * anyInt(5, 2, 7) ➞ True
     *
     * anyInt(3, 2, 2) ➞ False
     *
     * anyInt(3, -2, 1) ➞ True
     *
     * anyInt(3.6, -2.2, 2) ➞ False
     *
     * > anyInt(2, 3, 1)
     * true
     * > anyInt(2.5, 2, 3)
     * false
     * > anyInt(1.5, 5, 3.5)
     * false
     * > anyInt(2, 6, 2)
     * false
     * > anyInt(4, 2, 2)
     * true
     * > anyInt(2.2, 2.2, 2.2)
     * false
     * > anyInt(-4, 6, 2)
     * true
     * > anyInt(2, 1, 1)
     * true
     * > anyInt(3, 4, 7)
     * true
     * > anyInt(3.0, 4, 7)
     * false
     */
    public static Boolean anyInt(Number x, Number y, Number z) {
    }
}
","// AnyIntTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {","// AnyInt.java
package scenario3;

class AnyInt {

    /**
     * * Create a function that takes 3 numbers.
     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
     * Returns false in any other cases.
     *
     * Examples
     * anyInt(5, 2, 7) ➞ True
     *
     * anyInt(3, 2, 2) ➞ False
     *
     * anyInt(3, -2, 1) ➞ True
     *
     * anyInt(3.6, -2.2, 2) ➞ False
     *
     * > anyInt(2, 3, 1)
     * true
     * > anyInt(2.5, 2, 3)
     * false
     * > anyInt(1.5, 5, 3.5)
     * false
     * > anyInt(2, 6, 2)
     * false
     * > anyInt(4, 2, 2)
     * true
     * > anyInt(2.2, 2.2, 2.2)
     * false
     * > anyInt(-4, 6, 2)
     * true
     * > anyInt(2, 1, 1)
     * true
     * > anyInt(3, 4, 7)
     * true
     * > anyInt(3.0, 4, 7)
     * false
     */
    public static Boolean anyInt(Number x, Number y, Number z) {
        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {
            int a = x.intValue();
            int b = y.intValue();
            int c = z.intValue();
            return a == b + c || b == a + c || c == a + b;
        }
        return false;
    }
}

// AnyIntTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
    @Test
    void testAnyInt1() {
        assertTrue(AnyInt.anyInt(5, 2, 7));
    }

    @Test
    void testAnyInt2() {
        assertFalse(AnyInt.anyInt(3, 2, 2));
    }

    @Test
    void testAnyInt3() {
        assertTrue(AnyInt.anyInt(3, -2, 1));
    }

    @Test
    void testAnyInt4() {
        assertFalse(AnyInt.anyInt(3.6, -2.2, 2));
    }

    @Test
    void testAnyInt5() {
        assertTrue(AnyInt.anyInt(2, 3, 1));
    }

    @Test
    void testAnyInt6() {
        assertFalse(AnyInt.anyInt(2.5, 2, 3));
    }

    @Test
    void testAnyInt7() {
        assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
    }

    @Test
    void testAnyInt8() {
        assertFalse(AnyInt.anyInt(2, 6, 2));
    }

    @Test
    void testAnyInt9() {
        assertTrue(AnyInt.anyInt(4, 2, 2));
    }

    @Test
    void testAnyInt10() {
        assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
    }

    @Test
    void testAnyInt11() {
        assertTrue(AnyInt.anyInt(-4, 6, 2));
    }

    @Test
    void testAnyInt12() {
        assertTrue(AnyInt.anyInt(2, 1, 1));
    }

    @Test
    void testAnyInt13() {
        assertTrue(AnyInt.anyInt(3, 4, 7));
    }

    @Test
    void testAnyInt14() {
        assertFalse(AnyInt.anyInt(3.0, 4, 7));
    }
}"
chatcmpl-6yQiFbdeSNqxBZQtyYFJDtTMwKaho,/HumanEvalJava/src/main/java/scenario3/id_110.java,49.15939426422119,stop,"// Exchange.java
package scenario3;

import java.util.List;

class Exchange {

    /**
     * In this problem, you will implement a function that takes two lists of numbers,
     * and determines whether it is possible to perform an exchange of elements
     * between them to make lst1 a list of only even numbers.
     * There is no limit on the number of exchanged elements between lst1 and lst2.
     * If it is possible to exchange elements between the lst1 and lst2 to make
     * all the elements of lst1 to be even, return ""YES"".
     * Otherwise, return ""NO"".
     * For example:
     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
     * It is assumed that the input lists will be non-empty.
     *
     * > exchange([1, 2, 3, 4], [1, 2, 3, 4])
     * ""YES""
     * > exchange([1, 2, 3, 4], [1, 5, 3, 4])
     * ""NO""
     * > exchange([1, 2, 3, 4], [2, 1, 4, 3])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 4])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 3])
     * ""NO""
     * > exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])
     * ""NO""
     * > exchange([100, 200], [200, 200])
     * ""YES""
     */
    public static String exchange(List<Integer> lst1, List<Integer> lst2) {
    }
}
","// ExchangeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Exchange}.
* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.
*/
class ExchangeTest {","// Exchange.java
package scenario3;

import java.util.List;

class Exchange {

    /**
     * In this problem, you will implement a function that takes two lists of numbers,
     * and determines whether it is possible to perform an exchange of elements
     * between them to make lst1 a list of only even numbers.
     * There is no limit on the number of exchanged elements between lst1 and lst2.
     * If it is possible to exchange elements between the lst1 and lst2 to make
     * all the elements of lst1 to be even, return ""YES"".
     * Otherwise, return ""NO"".
     * For example:
     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
     * It is assumed that the input lists will be non-empty.
     *
     * > exchange([1, 2, 3, 4], [1, 2, 3, 4])
     * ""YES""
     * > exchange([1, 2, 3, 4], [1, 5, 3, 4])
     * ""NO""
     * > exchange([1, 2, 3, 4], [2, 1, 4, 3])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 4])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 3])
     * ""NO""
     * > exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])
     * ""NO""
     * > exchange([100, 200], [200, 200])
     * ""YES""
     */
    public static String exchange(List<Integer> lst1, List<Integer> lst2) {
        int sum = 0;
        int oddCount = 0;
        for (int i = 0; i < lst1.size(); i++) {
            int num = lst1.get(i);
            if (num % 2 != 0) {
                oddCount++;
            } else {
                sum += num;
            }
        }
        if (oddCount % 2 != 0) {
            return ""NO"";
        }
        for (int i = 0; i < lst2.size(); i++) {
            int num = lst2.get(i);
            if (num % 2 == 0) {
                sum += num;
            }
        }
        return sum % 2 == 0 ? ""YES"" : ""NO"";
    }
}

// ExchangeTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Exchange}.
* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.
*/
class ExchangeTest {
    @Test
    void testExchange1() {
        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);
        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);
        assertEquals(""YES"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange2() {
        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);
        List<Integer> lst2 = Arrays.asList(1, 5, 3, 4);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange3() {
        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);
        List<Integer> lst2 = Arrays.asList(2, 1, 4, 3);
        assertEquals(""YES"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange4() {
        List<Integer> lst1 = Arrays.asList(5, 7, 3);
        List<Integer> lst2 = Arrays.asList(2, 6, 4);
        assertEquals(""YES"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange5() {
        List<Integer> lst1 = Arrays.asList(5, 7, 3);
        List<Integer> lst2 = Arrays.asList(2, 6, 3);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange6() {
        List<Integer> lst1 = Arrays.asList(3, 2, 6, 1, 8, 9);
        List<Integer> lst2 = Arrays.asList(3, 5, 5, 1, 1, 1);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange7() {
        List<Integer> lst1 = Arrays.asList(100, 200);
        List<Integer> lst2 = Arrays.asList(200, 200);
        assertEquals(""YES"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange8() {
        List<Integer> lst1 = Arrays.asList(1, 3, 5);
        List<Integer> lst2 = Arrays.asList(2, 4, 6);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange9() {
        List<Integer> lst1 = Arrays.asList(1, 3, 5);
        List<Integer> lst2 = Arrays.asList(2, 4, 5);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }

    @Test
    void testExchange10() {
        List<Integer> lst1 = Arrays.asList(1, 3, 5);
        List<Integer> lst2 = Arrays.asList(2, 4, 7);
        assertEquals(""NO"", Exchange.exchange(lst1, lst2));
    }
}"
chatcmpl-6yQjI8FgcfF1WPDNTHmq1ReGJb46N,/HumanEvalJava/src/main/java/scenario3/id_106.java,32.28859496116638,stop,"// F.java
package scenario3;

import java.util.List;

class F {

    /**
     * Implement the function f that takes n as a parameter,
     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
     * or the sum of numbers from 1 to i otherwise.
     * i starts from 1.
     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
     * Example:
     * f(5) == [1, 2, 6, 24, 15]
     *
     * > f(5)
     * [1, 2, 6, 24, 15]
     * > f(7)
     * [1, 2, 6, 24, 15, 720, 28]
     * > f(1)
     * [1]
     * > f(3)
     * [1, 2, 6]
     */
    public static List<Integer> f(int n) {
    }
}
","// FTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {","// F.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class F {

    /**
     * Implement the function f that takes n as a parameter,
     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
     * or the sum of numbers from 1 to i otherwise.
     * i starts from 1.
     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
     * Example:
     * f(5) == [1, 2, 6, 24, 15]
     *
     * > f(5)
     * [1, 2, 6, 24, 15]
     * > f(7)
     * [1, 2, 6, 24, 15, 720, 28]
     * > f(1)
     * [1]
     * > f(3)
     * [1, 2, 6]
     */
    public static List<Integer> f(int n) {
        List<Integer> result = new ArrayList<>();
        int sum = 0;
        int factorial = 1;
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                factorial *= i;
                result.add(factorial);
            } else {
                sum += i;
                result.add(sum);
            }
        }
        return result;
    }
}

// FTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
    
    @Test
    void testF1() {
        List<Integer> expected = List.of(1);
        List<Integer> actual = F.f(1);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF2() {
        List<Integer> expected = List.of(1, 2);
        List<Integer> actual = F.f(2);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF3() {
        List<Integer> expected = List.of(1, 2, 6);
        List<Integer> actual = F.f(3);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF4() {
        List<Integer> expected = List.of(1, 2, 6, 24);
        List<Integer> actual = F.f(4);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF5() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15);
        List<Integer> actual = F.f(5);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF6() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15, 720);
        List<Integer> actual = F.f(6);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF7() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15, 720, 28);
        List<Integer> actual = F.f(7);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF8() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15, 720, 28, 40320);
        List<Integer> actual = F.f(8);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF9() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15, 720, 28, 40320, 36);
        List<Integer> actual = F.f(9);
        assertEquals(expected, actual);
    }
    
    @Test
    void testF10() {
        List<Integer> expected = List.of(1, 2, 6, 24, 15, 720, 28, 40320, 36, 3628800);
        List<Integer> actual = F.f(10);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yQkLTDvKCSoukGZ0T3WX1bhtibvI,/HumanEvalJava/src/main/java/scenario3/id_151.java,44.40198564529419,stop,"// DoubleTheDifference.java
package scenario3;

import java.util.List;

class DoubleTheDifference {

    /**
     * Given a list of numbers, return the sum of squares of the numbers
     * in the list that are odd. Ignore numbers that are negative or not integers.
     *
     * doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
     * doubleTheDifference([-1, -2, 0]) == 0
     * doubleTheDifference([9, -2]) == 81
     * doubleTheDifference([0]) == 0
     *
     * If the input list is empty, return 0.
     *
     * > doubleTheDifference([])
     * 0
     * > doubleTheDifference([5, 4])
     * 25
     * > doubleTheDifference([0.1, 0.2, 0.3])
     * 0
     * > doubleTheDifference([-10, -20, -30])
     * 0
     * > doubleTheDifference([-1, -2, 8])
     * 0
     * > doubleTheDifference([0.2, 3, 5])
     * 34
     * > doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])
     * 166650
     */
    public static int doubleTheDifference(List<Object> lst) {
    }
}
","// DoubleTheDifferenceTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DoubleTheDifference}.
* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.
*/
class DoubleTheDifferenceTest {","// DoubleTheDifference.java
package scenario3;

import java.util.List;

class DoubleTheDifference {

    /**
     * Given a list of numbers, return the sum of squares of the numbers
     * in the list that are odd. Ignore numbers that are negative or not integers.
     *
     * doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
     * doubleTheDifference([-1, -2, 0]) == 0
     * doubleTheDifference([9, -2]) == 81
     * doubleTheDifference([0]) == 0
     *
     * If the input list is empty, return 0.
     *
     * > doubleTheDifference([])
     * 0
     * > doubleTheDifference([5, 4])
     * 25
     * > doubleTheDifference([0.1, 0.2, 0.3])
     * 0
     * > doubleTheDifference([-10, -20, -30])
     * 0
     * > doubleTheDifference([-1, -2, 8])
     * 0
     * > doubleTheDifference([0.2, 3, 5])
     * 34
     * > doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])
     * 166650
     */
    public static int doubleTheDifference(List<Object> lst) {
        int sum = 0;
        for (Object obj : lst) {
            if (obj instanceof Integer) {
                int num = (int) obj;
                if (num > 0 && num % 2 != 0) {
                    sum += num * num;
                }
            }
        }
        return sum;
    }
}

// DoubleTheDifferenceTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DoubleTheDifference}.
* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.
*/
class DoubleTheDifferenceTest {
    
    @Test
    void testEmptyList() {
        List<Object> lst = new ArrayList<>();
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(0, result);
    }
    
    @Test
    void testOnlyNegativeNumbers() {
        List<Object> lst = Arrays.asList(-1, -2, -3);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(0, result);
    }
    
    @Test
    void testOnlyPositiveEvenNumbers() {
        List<Object> lst = Arrays.asList(2, 4, 6);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(0, result);
    }
    
    @Test
    void testOnlyPositiveOddNumbers() {
        List<Object> lst = Arrays.asList(1, 3, 5);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(35, result);
    }
    
    @Test
    void testMixedNumbers() {
        List<Object> lst = Arrays.asList(-1, 2, 3, 4, 5);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(34, result);
    }
    
    @Test
    void testMixedNumbersWithDecimals() {
        List<Object> lst = Arrays.asList(0.2, 3, 5);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(34, result);
    }
    
    @Test
    void testMixedNumbersWithNegativeDecimals() {
        List<Object> lst = Arrays.asList(-0.2, 3, 5);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(34, result);
    }
    
    @Test
    void testMixedNumbersWithNegativeIntegers() {
        List<Object> lst = Arrays.asList(-1, -2, 8);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(0, result);
    }
    
    @Test
    void testMixedNumbersWithNegativeAndPositiveIntegers() {
        List<Object> lst = Arrays.asList(-1, 2, 8);
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(1, result);
    }
    
    @Test
    void testLargeListOfNumbers() {
        List<Object> lst = new ArrayList<>();
        for (int i = -99; i <= 99; i++) {
            lst.add(i);
        }
        int result = DoubleTheDifference.doubleTheDifference(lst);
        assertEquals(166650, result);
    }
}"
chatcmpl-6yQlOmqFspAi5M3EQiqxDEwPxzL7E,/HumanEvalJava/src/main/java/scenario3/id_84.java,20.098382234573364,stop,"// Solve1.java
package scenario3;

class Solve1 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
    }
}
","// Solve1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve1}.
* It contains ten unit test cases for the {@link Solve1#solve(int)} method.
*/
class Solve1Test {","// Solve1.java
package scenario3;

class Solve1 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 2;
            n /= 2;
        }
        return Integer.toBinaryString(sum);
    }
}

// Solve1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve1}.
* It contains ten unit test cases for the {@link Solve1#solve(int)} method.
*/
class Solve1Test {
    @Test
    void testSolve1() {
        assertEquals(""1"", Solve1.solve(1000));
    }

    @Test
    void testSolve2() {
        assertEquals(""110"", Solve1.solve(150));
    }

    @Test
    void testSolve3() {
        assertEquals(""1100"", Solve1.solve(147));
    }

    @Test
    void testSolve4() {
        assertEquals(""1001"", Solve1.solve(333));
    }

    @Test
    void testSolve5() {
        assertEquals(""10010"", Solve1.solve(963));
    }

    @Test
    void testSolve6() {
        assertEquals(""0"", Solve1.solve(0));
    }

    @Test
    void testSolve7() {
        assertEquals(""1"", Solve1.solve(1));
    }

    @Test
    void testSolve8() {
        assertEquals(""10"", Solve1.solve(2));
    }

    @Test
    void testSolve9() {
        assertEquals(""11"", Solve1.solve(3));
    }

    @Test
    void testSolve10() {
        assertEquals(""101"", Solve1.solve(5));
    }
}"
chatcmpl-6yQmRskxwEfwWj7cAsnSUoykAN6sY,/HumanEvalJava/src/main/java/scenario3/id_10.java,24.89921522140503,stop,"// MakePalindrome.java
package scenario3;

class MakePalindrome {

    /**
     * Find the shortest palindrome that begins with a supplied string.
     * Algorithm idea is simple:
     * - Find the longest postfix of supplied string that is a palindrome.
     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
     *
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""cat"")
     * ""catac""
     * > makePalindrome(""cata"")
     * ""catac""
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""x"")
     * ""x""
     * > makePalindrome(""xyz"")
     * ""xyzyx""
     * > makePalindrome(""xyx"")
     * ""xyx""
     * > makePalindrome(""jerry"")
     * ""jerryrrej""
     */
    public static String makePalindrome(String string) {
    }
}
","// MakePalindromeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakePalindrome}.
* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.
*/
class MakePalindromeTest {","// MakePalindrome.java
package scenario3;

class MakePalindrome {

    /**
     * Find the shortest palindrome that begins with a supplied string.
     * Algorithm idea is simple:
     * - Find the longest postfix of supplied string that is a palindrome.
     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
     *
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""cat"")
     * ""catac""
     * > makePalindrome(""cata"")
     * ""catac""
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""x"")
     * ""x""
     * > makePalindrome(""xyz"")
     * ""xyzyx""
     * > makePalindrome(""xyx"")
     * ""xyx""
     * > makePalindrome(""jerry"")
     * ""jerryrrej""
     */
    public static String makePalindrome(String string) {
        if (string == null || string.isEmpty()) {
            return """";
        }
        int length = string.length();
        int i = length - 1;
        while (i >= 0) {
            if (isPalindrome(string, 0, i)) {
                break;
            }
            i--;
        }
        StringBuilder sb = new StringBuilder(string);
        for (int j = i + 1; j < length; j++) {
            sb.append(string.charAt(j));
        }
        for (int j = i - 1; j >= 0; j--) {
            sb.append(string.charAt(j));
        }
        return sb.toString();
    }

    private static boolean isPalindrome(String string, int start, int end) {
        while (start < end) {
            if (string.charAt(start) != string.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

// MakePalindromeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakePalindrome}.
* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.
*/
class MakePalindromeTest {

    @Test
    void testEmptyString() {
        assertEquals("""", MakePalindrome.makePalindrome(""""));
    }

    @Test
    void testSingleCharacterString() {
        assertEquals(""x"", MakePalindrome.makePalindrome(""x""));
    }

    @Test
    void testTwoCharacterString() {
        assertEquals(""xx"", MakePalindrome.makePalindrome(""x""));
    }

    @Test
    void testThreeCharacterString() {
        assertEquals(""aba"", MakePalindrome.makePalindrome(""ab""));
    }

    @Test
    void testFourCharacterString() {
        assertEquals(""abba"", MakePalindrome.makePalindrome(""ab""));
    }

    @Test
    void testFiveCharacterString() {
        assertEquals(""abcba"", MakePalindrome.makePalindrome(""abc""));
    }

    @Test
    void testSixCharacterString() {
        assertEquals(""abccba"", MakePalindrome.makePalindrome(""abc""));
    }

    @Test
    void testSevenCharacterString() {
        assertEquals(""abcdcba"", MakePalindrome.makePalindrome(""abcd""));
    }

    @Test
    void testEightCharacterString() {
        assertEquals(""abcddcba"", MakePalindrome.makePalindrome(""abcd""));
    }

    @Test
    void testLongString() {
        assertEquals(""jerryrrej"", MakePalindrome.makePalindrome(""jerry""));
    }
}"
chatcmpl-6yQnUmPXfeVDRQRMaslkZKnW8mCz9,/HumanEvalJava/src/main/java/scenario3/id_47.java,26.353609561920166,stop,"// Median.java
package scenario3;

import java.util.List;

class Median {

    /**
     * Return median of elements in the list l.
     *
     * > median([3, 1, 2, 4, 5])
     * 3
     * > median([-10, 4, 6, 1000, 10, 20])
     * 8.0
     * > median([5])
     * 5
     * > median([6, 5])
     * 5.5
     * > median([8, 1, 3, 9, 9, 2, 7])
     * 7
     */
    public static Number median(List<Integer> l) {
    }
}
","// MedianTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {","// Median.java
package scenario3;

import java.util.Collections;
import java.util.List;

class Median {

    /**
     * Return median of elements in the list l.
     *
     * > median([3, 1, 2, 4, 5])
     * 3
     * > median([-10, 4, 6, 1000, 10, 20])
     * 8.0
     * > median([5])
     * 5
     * > median([6, 5])
     * 5.5
     * > median([8, 1, 3, 9, 9, 2, 7])
     * 7
     */
    public static Number median(List<Integer> l) {
        Collections.sort(l);
        int size = l.size();
        if (size % 2 == 0) {
            int mid = size / 2;
            return (l.get(mid - 1) + l.get(mid)) / 2.0;
        } else {
            return l.get(size / 2);
        }
    }
}

// MedianTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {

    @Test
    void testMedianWithOddNumberOfElements() {
        List<Integer> l = Arrays.asList(3, 1, 2, 4, 5);
        assertEquals(3, Median.median(l));
    }

    @Test
    void testMedianWithEvenNumberOfElements() {
        List<Integer> l = Arrays.asList(-10, 4, 6, 1000, 10, 20);
        assertEquals(8.0, Median.median(l));
    }

    @Test
    void testMedianWithSingleElement() {
        List<Integer> l = Arrays.asList(5);
        assertEquals(5, Median.median(l));
    }

    @Test
    void testMedianWithTwoElements() {
        List<Integer> l = Arrays.asList(6, 5);
        assertEquals(5.5, Median.median(l));
    }

    @Test
    void testMedianWithRepeatedElements() {
        List<Integer> l = Arrays.asList(8, 1, 3, 9, 9, 2, 7);
        assertEquals(7, Median.median(l));
    }

    @Test
    void testMedianWithEmptyList() {
        List<Integer> l = Arrays.asList();
        assertThrows(IllegalArgumentException.class, () -> Median.median(l));
    }

    @Test
    void testMedianWithNullList() {
        assertThrows(NullPointerException.class, () -> Median.median(null));
    }

    @Test
    void testMedianWithMaxIntegerValue() {
        List<Integer> l = Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, Median.median(l));
    }

    @Test
    void testMedianWithMinIntegerValue() {
        List<Integer> l = Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, Median.median(l));
    }

    @Test
    void testMedianWithMaxAndMinIntegerValues() {
        List<Integer> l = Arrays.asList(Integer.MAX_VALUE, Integer.MIN_VALUE);
        assertEquals(-0.5, Median.median(l));
    }
}"
chatcmpl-6yQoXqL19PfXlCQVbmlJ8sExIjBs8,/HumanEvalJava/src/main/java/scenario3/id_51.java,26.276695489883423,stop,"// RemoveVowels.java
package scenario3;

class RemoveVowels {

    /**
     * removeVowels is a function that takes string and returns string without vowels.
     *
     * > removeVowels(""abcdef"")
     * ""bcdf""
     * > removeVowels(""aaaaa"")
     * """"
     * > removeVowels(""aaBAA"")
     * ""B""
     * > removeVowels(""zbcd"")
     * ""zbcd""
     * > removeVowels("""")
     * """"
     * > removeVowels(""abcdef\nghijklm"")
     * ""bcdf\nghjklm""
     * > removeVowels(""fedcba"")
     * ""fdcb""
     * > removeVowels(""eeeee"")
     * """"
     * > removeVowels(""acBAA"")
     * ""cB""
     * > removeVowels(""EcBOO"")
     * ""cB""
     * > removeVowels(""ybcd"")
     * ""ybcd""
     */
    public static String removeVowels(String text) {
    }
}
","// RemoveVowelsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {","// RemoveVowels.java
package scenario3;

class RemoveVowels {

    /**
     * removeVowels is a function that takes string and returns string without vowels.
     *
     * > removeVowels(""abcdef"")
     * ""bcdf""
     * > removeVowels(""aaaaa"")
     * """"
     * > removeVowels(""aaBAA"")
     * ""B""
     * > removeVowels(""zbcd"")
     * ""zbcd""
     * > removeVowels("""")
     * """"
     * > removeVowels(""abcdef\nghijklm"")
     * ""bcdf\nghjklm""
     * > removeVowels(""fedcba"")
     * ""fdcb""
     * > removeVowels(""eeeee"")
     * """"
     * > removeVowels(""acBAA"")
     * ""cB""
     * > removeVowels(""EcBOO"")
     * ""cB""
     * > removeVowels(""ybcd"")
     * ""ybcd""
     */
    public static String removeVowels(String text) {
        if (text == null || text.isEmpty()) {
            return """";
        }
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            if (!isVowel(c)) {
                result.append(c);
            }
        }
        return result.toString();
    }

    private static boolean isVowel(char c) {
        return ""AEIOUaeiou"".indexOf(c) != -1;
    }
}

// RemoveVowelsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {

    @Test
    void testRemoveVowels1() {
        assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
    }

    @Test
    void testRemoveVowels2() {
        assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
    }

    @Test
    void testRemoveVowels3() {
        assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
    }

    @Test
    void testRemoveVowels4() {
        assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
    }

    @Test
    void testRemoveVowels5() {
        assertEquals("""", RemoveVowels.removeVowels(""""));
    }

    @Test
    void testRemoveVowels6() {
        assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
    }

    @Test
    void testRemoveVowels7() {
        assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
    }

    @Test
    void testRemoveVowels8() {
        assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
    }

    @Test
    void testRemoveVowels9() {
        assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
    }

    @Test
    void testRemoveVowels10() {
        assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
    }

    @Test
    void testRemoveVowels11() {
        assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
    }
}"
chatcmpl-6yQpacmt44Vjlol7k33CFAz6N2sZZ,/HumanEvalJava/src/main/java/scenario3/id_71.java,29.693830013275146,stop,"// TriangleArea1.java
package scenario3;

class TriangleArea1 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static Number triangleArea(int a, int b, int c) {
    }
}
","// TriangleArea1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea1}.
* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.
*/
class TriangleArea1Test {","// TriangleArea1.java
package scenario3;

class TriangleArea1 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static double triangleArea(int a, int b, int c) {
        if (a + b > c && a + c > b && b + c > a) {
            double s = (a + b + c) / 2.0;
            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
            return Math.round(area * 100.0) / 100.0;
        } else {
            return -1;
        }
    }
}

// TriangleArea1Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea1}.
* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.
*/
class TriangleArea1Test {
    @Test
    void testTriangleArea1() {
        assertEquals(6.0, TriangleArea1.triangleArea(3, 4, 5));
    }

    @Test
    void testTriangleArea2() {
        assertEquals(-1, TriangleArea1.triangleArea(1, 2, 10));
    }

    @Test
    void testTriangleArea3() {
        assertEquals(8.18, TriangleArea1.triangleArea(4, 8, 5));
    }

    @Test
    void testTriangleArea4() {
        assertEquals(1.73, TriangleArea1.triangleArea(2, 2, 2));
    }

    @Test
    void testTriangleArea5() {
        assertEquals(-1, TriangleArea1.triangleArea(1, 2, 3));
    }

    @Test
    void testTriangleArea6() {
        assertEquals(16.25, TriangleArea1.triangleArea(10, 5, 7));
    }

    @Test
    void testTriangleArea7() {
        assertEquals(-1, TriangleArea1.triangleArea(2, 6, 3));
    }

    @Test
    void testTriangleArea8() {
        assertEquals(0.43, TriangleArea1.triangleArea(1, 1, 1));
    }

    @Test
    void testTriangleArea9() {
        assertEquals(-1, TriangleArea1.triangleArea(2, 2, 10));
    }

    @Test
    void testTriangleArea10() {
        assertEquals(-1, TriangleArea1.triangleArea(0, 0, 0));
    }
}"
chatcmpl-6yQqdhusuiCe8YuqmdugFRUkcv9hD,/HumanEvalJava/src/main/java/scenario3/id_26.java,38.04660248756409,stop,"// RemoveDuplicates.java
package scenario3;

import java.util.List;

class RemoveDuplicates {

    /**
     * From a list of integers, remove all elements that occur more than once.
     * Keep order of elements left the same as in the input.
     *
     * > removeDuplicates([1, 2, 3, 2, 4])
     * [1, 3, 4]
     * > removeDuplicates([])
     * []
     * > removeDuplicates([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > removeDuplicates([1, 2, 3, 2, 4, 3, 5])
     * [1, 4, 5]
     */
    public static List<Object> removeDuplicates(List<Object> numbers) {
    }
}
","// RemoveDuplicatesTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveDuplicates}.
* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.
*/
class RemoveDuplicatesTest {","// RemoveDuplicates.java
package scenario3;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

class RemoveDuplicates {

    /**
     * From a list of integers, remove all elements that occur more than once.
     * Keep order of elements left the same as in the input.
     *
     * > removeDuplicates([1, 2, 3, 2, 4])
     * [1, 3, 4]
     * > removeDuplicates([])
     * []
     * > removeDuplicates([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > removeDuplicates([1, 2, 3, 2, 4, 3, 5])
     * [1, 4, 5]
     */
    public static List<Object> removeDuplicates(List<Object> numbers) {
        Set<Object> set = new LinkedHashSet<>();
        List<Object> result = new ArrayList<>();
        for (Object number : numbers) {
            if (set.add(number)) {
                result.add(number);
            }
        }
        return result;
    }
}

// RemoveDuplicatesTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveDuplicates}.
* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.
*/
class RemoveDuplicatesTest {

    @Test
    void testRemoveDuplicates() {
        List<Object> input1 = Arrays.asList(1, 2, 3, 2, 4);
        List<Object> expectedOutput1 = Arrays.asList(1, 3, 4);
        assertEquals(expectedOutput1, RemoveDuplicates.removeDuplicates(input1));

        List<Object> input2 = Arrays.asList();
        List<Object> expectedOutput2 = Arrays.asList();
        assertEquals(expectedOutput2, RemoveDuplicates.removeDuplicates(input2));

        List<Object> input3 = Arrays.asList(1, 2, 3, 4);
        List<Object> expectedOutput3 = Arrays.asList(1, 2, 3, 4);
        assertEquals(expectedOutput3, RemoveDuplicates.removeDuplicates(input3));

        List<Object> input4 = Arrays.asList(1, 2, 3, 2, 4, 3, 5);
        List<Object> expectedOutput4 = Arrays.asList(1, 4, 5);
        assertEquals(expectedOutput4, RemoveDuplicates.removeDuplicates(input4));

        List<Object> input5 = Arrays.asList(1, 1, 1, 1, 1);
        List<Object> expectedOutput5 = Arrays.asList(1);
        assertEquals(expectedOutput5, RemoveDuplicates.removeDuplicates(input5));

        List<Object> input6 = Arrays.asList(1, 2, 3, 4, 5);
        List<Object> expectedOutput6 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expectedOutput6, RemoveDuplicates.removeDuplicates(input6));

        List<Object> input7 = Arrays.asList(1, 2, 3, 4, 5, 1, 2, 3, 4, 5);
        List<Object> expectedOutput7 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expectedOutput7, RemoveDuplicates.removeDuplicates(input7));

        List<Object> input8 = Arrays.asList(1, 2, 3, 4, 5, 5, 4, 3, 2, 1);
        List<Object> expectedOutput8 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expectedOutput8, RemoveDuplicates.removeDuplicates(input8));

        List<Object> input9 = Arrays.asList(1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 6, 7, 8, 9, 10);
        List<Object> expectedOutput9 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        assertEquals(expectedOutput9, RemoveDuplicates.removeDuplicates(input9));

        List<Object> input10 = Arrays.asList(1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6);
        List<Object> expectedOutput10 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        assertEquals(expectedOutput10, RemoveDuplicates.removeDuplicates(input10));
    }
}"
chatcmpl-6yQrgxCAMK7RYGPXtDu4pr0CtL0YX,/HumanEvalJava/src/main/java/scenario3/id_30.java,33.117021322250366,stop,"// GetPositive.java
package scenario3;

import java.util.List;

class GetPositive {

    /**
     * Return only positive numbers in the list.
     *
     * > getPositive([-1, 2, -4, 5, 6])
     * [2, 5, 6]
     * > getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 9, 123, 1]
     * > getPositive([-1, -2, 4, 5, 6])
     * [4, 5, 6]
     * > getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 3, 9, 123, 1]
     * > getPositive([-1, -2])
     * []
     * > getPositive([])
     * []
     */
    public static List<Object> getPositive(List<Object> l) {
    }
}
","// GetPositiveTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPositive}.
* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.
*/
class GetPositiveTest {","// GetPositive.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class GetPositive {

    /**
     * Return only positive numbers in the list.
     *
     * > getPositive([-1, 2, -4, 5, 6])
     * [2, 5, 6]
     * > getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 9, 123, 1]
     * > getPositive([-1, -2, 4, 5, 6])
     * [4, 5, 6]
     * > getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 3, 9, 123, 1]
     * > getPositive([-1, -2])
     * []
     * > getPositive([])
     * []
     */
    public static List<Integer> getPositive(List<Integer> l) {
        List<Integer> positiveList = new ArrayList<>();
        for (Integer i : l) {
            if (i > 0) {
                positiveList.add(i);
            }
        }
        return positiveList;
    }
}

// GetPositiveTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPositive}.
* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.
*/
class GetPositiveTest {

    @Test
    void testGetPositive() {
        List<Integer> l1 = new ArrayList<>(Arrays.asList(-1, 2, -4, 5, 6));
        List<Integer> expected1 = new ArrayList<>(Arrays.asList(2, 5, 6));
        assertEquals(expected1, GetPositive.getPositive(l1));

        List<Integer> l2 = new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10));
        List<Integer> expected2 = new ArrayList<>(Arrays.asList(5, 3, 2, 3, 9, 123, 1));
        assertEquals(expected2, GetPositive.getPositive(l2));

        List<Integer> l3 = new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6));
        List<Integer> expected3 = new ArrayList<>(Arrays.asList(4, 5, 6));
        assertEquals(expected3, GetPositive.getPositive(l3));

        List<Integer> l4 = new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10));
        List<Integer> expected4 = new ArrayList<>(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1));
        assertEquals(expected4, GetPositive.getPositive(l4));

        List<Integer> l5 = new ArrayList<>(Arrays.asList(-1, -2));
        List<Integer> expected5 = new ArrayList<>();
        assertEquals(expected5, GetPositive.getPositive(l5));

        List<Integer> l6 = new ArrayList<>();
        List<Integer> expected6 = new ArrayList<>();
        assertEquals(expected6, GetPositive.getPositive(l6));

        List<Integer> l7 = new ArrayList<>(Arrays.asList(0, 0, 0, 0, 0));
        List<Integer> expected7 = new ArrayList<>();
        assertEquals(expected7, GetPositive.getPositive(l7));

        List<Integer> l8 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        List<Integer> expected8 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        assertEquals(expected8, GetPositive.getPositive(l8));

        List<Integer> l9 = new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5));
        List<Integer> expected9 = new ArrayList<>();
        assertEquals(expected9, GetPositive.getPositive(l9));

        List<Integer> l10 = new ArrayList<>(Arrays.asList(1));
        List<Integer> expected10 = new ArrayList<>(Arrays.asList(1));
        assertEquals(expected10, GetPositive.getPositive(l10));
    }
}"
chatcmpl-6yQsjTJ0NKd2Z3ognY0GocPOVNLTT,/HumanEvalJava/src/main/java/scenario3/id_88.java,50.24691128730774,stop,"// SortArray1.java
package scenario3;

import java.util.List;

class SortArray1 {

    /**
     * * Given an array of non-negative integers, return a copy of the given array after sorting,
     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
     * or sort it in descending order if the sum( first index value, last index value) is even.
     *
     * Note:
     * * don't change the given array.
     *
     * Examples:
     * * sort_array([]) => []
     * * sort_array([5]) => [5]
     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
     *
     * > sortArray([])
     * []
     * > sortArray([5])
     * [5]
     * > sortArray([2, 4, 3, 0, 1, 5])
     * [0, 1, 2, 3, 4, 5]
     * > sortArray([2, 4, 3, 0, 1, 5, 6])
     * [6, 5, 4, 3, 2, 1, 0]
     * > sortArray([2, 1])
     * [1, 2]
     * > sortArray([15, 42, 87, 32, 11, 0])
     * [0, 11, 15, 32, 42, 87]
     * > sortArray([21, 14, 23, 11])
     * [23, 21, 14, 11]
     */
    public static List<Object> sortArray(List<Object> array) {
    }
}
","// SortArray1Test.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray1}.
* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.
*/
class SortArray1Test {","// SortArray1.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortArray1 {

    /**
     * * Given an array of non-negative integers, return a copy of the given array after sorting,
     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
     * or sort it in descending order if the sum( first index value, last index value) is even.
     *
     * Note:
     * * don't change the given array.
     *
     * Examples:
     * * sort_array([]) => []
     * * sort_array([5]) => [5]
     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
     *
     * > sortArray([])
     * []
     * > sortArray([5])
     * [5]
     * > sortArray([2, 4, 3, 0, 1, 5])
     * [0, 1, 2, 3, 4, 5]
     * > sortArray([2, 4, 3, 0, 1, 5, 6])
     * [6, 5, 4, 3, 2, 1, 0]
     * > sortArray([2, 1])
     * [1, 2]
     * > sortArray([15, 42, 87, 32, 11, 0])
     * [0, 11, 15, 32, 42, 87]
     * > sortArray([21, 14, 23, 11])
     * [23, 21, 14, 11]
     */
    public static List<Integer> sortArray(List<Integer> array) {
        List<Integer> sortedArray = new ArrayList<>(array);
        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);
        if (sum % 2 == 0) {
            Collections.sort(sortedArray, Collections.reverseOrder());
        } else {
            Collections.sort(sortedArray);
        }
        return sortedArray;
    }
}

// SortArray1Test.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray1}.
* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.
*/
class SortArray1Test {

    @Test
    void testSortArrayEmptyList() {
        List<Integer> input = Arrays.asList();
        List<Integer> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArraySingleElementList() {
        List<Integer> input = Arrays.asList(5);
        List<Integer> expectedOutput = Arrays.asList(5);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayOddSum() {
        List<Integer> input = Arrays.asList(2, 4, 3, 0, 1, 5);
        List<Integer> expectedOutput = Arrays.asList(0, 1, 2, 3, 4, 5);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayEvenSum() {
        List<Integer> input = Arrays.asList(2, 4, 3, 0, 1, 5, 6);
        List<Integer> expectedOutput = Arrays.asList(6, 5, 4, 3, 2, 1, 0);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayTwoElements() {
        List<Integer> input = Arrays.asList(2, 1);
        List<Integer> expectedOutput = Arrays.asList(1, 2);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayDescendingOrder() {
        List<Integer> input = Arrays.asList(15, 42, 87, 32, 11, 0);
        List<Integer> expectedOutput = Arrays.asList(0, 11, 15, 32, 42, 87);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayAscendingOrder() {
        List<Integer> input = Arrays.asList(21, 14, 23, 11);
        List<Integer> expectedOutput = Arrays.asList(23, 21, 14, 11);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayLargeList() {
        List<Integer> input = Arrays.asList(5, 8, 2, 9, 1, 0, 3, 7, 6, 4);
        List<Integer> expectedOutput = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayRepeatedElements() {
        List<Integer> input = Arrays.asList(5, 8, 2, 9, 1, 0, 3, 7, 6, 4, 5, 8, 2, 9, 1, 0, 3, 7, 6, 4);
        List<Integer> expectedOutput = Arrays.asList(9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }

    @Test
    void testSortArrayAllEqualElements() {
        List<Integer> input = Arrays.asList(5, 5, 5, 5, 5, 5);
        List<Integer> expectedOutput = Arrays.asList(5, 5, 5, 5, 5, 5);
        assertEquals(expectedOutput, SortArray1.sortArray(input));
    }
}"
chatcmpl-6yQtmrQQufRGhHD7vpeIQz3UUEaZO,/HumanEvalJava/src/main/java/scenario3/id_67.java,28.365824222564697,stop,"// FruitDistribution.java
package scenario3;

class FruitDistribution {

    /**
     * * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * For example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     *
     * > fruitDistribution(""5 apples and 6 oranges"", 19)
     * 8
     * > fruitDistribution(""5 apples and 6 oranges"", 21)
     * 10
     * > fruitDistribution(""0 apples and 1 oranges"", 3)
     * 2
     * > fruitDistribution(""1 apples and 0 oranges"", 3)
     * 2
     * > fruitDistribution(""2 apples and 3 oranges"", 100)
     * 95
     * > fruitDistribution(""2 apples and 3 oranges"", 5)
     * 0
     * > fruitDistribution(""1 apples and 100 oranges"", 120)
     * 19
     */
    public static int fruitDistribution(String s, int n) {
    }
}
","// FruitDistributionTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {","// FruitDistribution.java
package scenario3;

class FruitDistribution {

    /**
     * * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * For example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     *
     * @param s a string that represents a number of apples and oranges
     * @param n an integer that represents the total number of fruits in the basket
     * @return the number of the mango fruits in the basket
     */
    public static int fruitDistribution(String s, int n) {
        String[] fruits = s.split("" "");
        int apples = 0;
        int oranges = 0;
        for (String fruit : fruits) {
            if (fruit.equals(""apples"")) {
                apples = Integer.parseInt(fruits[fruits.length - 2]);
            } else if (fruit.equals(""oranges"")) {
                oranges = Integer.parseInt(fruits[fruits.length - 2]);
            }
        }
        return n - apples - oranges;
    }
}

// FruitDistributionTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {

    @Test
    void testFruitDistribution1() {
        assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
    }

    @Test
    void testFruitDistribution2() {
        assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
    }

    @Test
    void testFruitDistribution3() {
        assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
    }

    @Test
    void testFruitDistribution4() {
        assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
    }

    @Test
    void testFruitDistribution5() {
        assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
    }

    @Test
    void testFruitDistribution6() {
        assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
    }

    @Test
    void testFruitDistribution7() {
        assertEquals(19, FruitDistribution.fruitDistribution(""100 apples and 1 oranges"", 120));
    }

    @Test
    void testFruitDistribution8() {
        assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
    }

    @Test
    void testFruitDistribution9() {
        assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 10));
    }

    @Test
    void testFruitDistribution10() {
        assertEquals(10, FruitDistribution.fruitDistribution(""0 apples and 10 oranges"", 20));
    }
}"
chatcmpl-6yQupG6trsqX0S7IZvdITW2XSEChx,/HumanEvalJava/src/main/java/scenario3/id_3.java,30.450034141540527,stop,"// BelowZero.java
package scenario3;

import java.util.List;

class BelowZero {

    /**
     * You're given a list of deposit and withdrawal operations on a bank account that starts with
     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and
     * at that point function should return True. Otherwise, it should return False.
     *
     * > belowZero([1, 2, 3])
     * false
     * > belowZero([1, 2, -4, 5])
     * true
     * > belowZero([])
     * false
     * > belowZero([1, 2, -3, 1, 2, -3])
     * false
     * > belowZero([1, 2, -4, 5, 6])
     * true
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -4])
     * false
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -5])
     * true
     * > belowZero([1, -2, 2, -2, 5, -5, 4, -4])
     * true
     */
    public static Boolean belowZero(List<Object> operations) {
    }
}
","// BelowZeroTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {","// BelowZero.java
package scenario3;

import java.util.List;

class BelowZero {

    /**
     * You're given a list of deposit and withdrawal operations on a bank account that starts with
     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and
     * at that point function should return True. Otherwise, it should return False.
     *
     * > belowZero([1, 2, 3])
     * false
     * > belowZero([1, 2, -4, 5])
     * true
     * > belowZero([])
     * false
     * > belowZero([1, 2, -3, 1, 2, -3])
     * false
     * > belowZero([1, 2, -4, 5, 6])
     * true
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -4])
     * false
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -5])
     * true
     * > belowZero([1, -2, 2, -2, 5, -5, 4, -4])
     * true
     */
    public static Boolean belowZero(List<Integer> operations) {
        int balance = 0;
        for (int operation : operations) {
            balance += operation;
            if (balance < 0) {
                return true;
            }
        }
        return false;
    }
}

// BelowZeroTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {

    @Test
    void testEmptyList() {
        List<Integer> operations = Arrays.asList();
        assertFalse(BelowZero.belowZero(operations));
    }

    @Test
    void testPositiveOperations() {
        List<Integer> operations = Arrays.asList(1, 2, 3);
        assertFalse(BelowZero.belowZero(operations));
    }

    @Test
    void testNegativeOperations() {
        List<Integer> operations = Arrays.asList(-1, -2, -3);
        assertTrue(BelowZero.belowZero(operations));
    }

    @Test
    void testMixedOperations() {
        List<Integer> operations = Arrays.asList(1, 2, -4, 5);
        assertTrue(BelowZero.belowZero(operations));
    }

    @Test
    void testZeroBalance() {
        List<Integer> operations = Arrays.asList(0, 0, 0);
        assertFalse(BelowZero.belowZero(operations));
    }

    @Test
    void testNegativeBalance() {
        List<Integer> operations = Arrays.asList(1, 2, -3, 1, 2, -3);
        assertFalse(BelowZero.belowZero(operations));
    }

    @Test
    void testPositiveBalance() {
        List<Integer> operations = Arrays.asList(1, 2, -4, 5, 6);
        assertTrue(BelowZero.belowZero(operations));
    }

    @Test
    void testNoNegativeBalance() {
        List<Integer> operations = Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4);
        assertFalse(BelowZero.belowZero(operations));
    }

    @Test
    void testNegativeBalanceAtEnd() {
        List<Integer> operations = Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5);
        assertTrue(BelowZero.belowZero(operations));
    }

    @Test
    void testNegativeBalanceInMiddle() {
        List<Integer> operations = Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4);
        assertTrue(BelowZero.belowZero(operations));
    }
}"
chatcmpl-6yQvsCHP6DW4ML1j8SHOks1hlNJC3,/HumanEvalJava/src/main/java/scenario3/id_126.java,42.019970178604126,stop,"// IsSorted.java
package scenario3;

import java.util.List;

class IsSorted {

    /**
     * * Given a list of numbers, return whether or not they are sorted
     * in ascending order. If list has more than 1 duplicate of the same
     * number, return False. Assume no negative numbers and only integers.
     *
     * Examples
     * isSorted([5]) ➞ True
     * isSorted([1, 2, 3, 4, 5]) ➞ True
     * isSorted([1, 3, 2, 4, 5]) ➞ False
     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True
     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True
     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False
     *
     * > isSorted([5])
     * true
     * > isSorted([1, 2, 3, 4, 5])
     * true
     * > isSorted([1, 3, 2, 4, 5])
     * false
     * > isSorted([1, 2, 3, 4, 5, 6])
     * true
     * > isSorted([1, 2, 3, 4, 5, 6, 7])
     * true
     * > isSorted([1, 3, 2, 4, 5, 6, 7])
     * false
     * > isSorted([])
     * true
     * > isSorted([1])
     * true
     * > isSorted([3, 2, 1])
     * false
     * > isSorted([1, 2, 2, 2, 3, 4])
     * false
     * > isSorted([1, 2, 3, 3, 3, 4])
     * false
     * > isSorted([1, 2, 2, 3, 3, 4])
     * true
     * > isSorted([1, 2, 3, 4])
     * true
     */
    public static Boolean isSorted(List<Object> lst) {
    }
}
","// IsSortedTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSorted}.
* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.
*/
class IsSortedTest {","// IsSorted.java
package scenario3;

import java.util.List;

class IsSorted {

    /**
     * * Given a list of numbers, return whether or not they are sorted
     * in ascending order. If list has more than 1 duplicate of the same
     * number, return False. Assume no negative numbers and only integers.
     *
     * Examples
     * isSorted([5]) ➞ True
     * isSorted([1, 2, 3, 4, 5]) ➞ True
     * isSorted([1, 3, 2, 4, 5]) ➞ False
     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True
     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True
     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False
     *
     * > isSorted([5])
     * true
     * > isSorted([1, 2, 3, 4, 5])
     * true
     * > isSorted([1, 3, 2, 4, 5])
     * false
     * > isSorted([1, 2, 3, 4, 5, 6])
     * true
     * > isSorted([1, 2, 3, 4, 5, 6, 7])
     * true
     * > isSorted([1, 3, 2, 4, 5, 6, 7])
     * false
     * > isSorted([])
     * true
     * > isSorted([1])
     * true
     * > isSorted([3, 2, 1])
     * false
     * > isSorted([1, 2, 2, 2, 3, 4])
     * false
     * > isSorted([1, 2, 3, 3, 3, 4])
     * false
     * > isSorted([1, 2, 2, 3, 3, 4])
     * true
     * > isSorted([1, 2, 3, 4])
     * true
     */
    public static Boolean isSorted(List<Integer> lst) {
        if (lst.size() <= 1) {
            return true;
        }
        int prev = lst.get(0);
        boolean hasDuplicate = false;
        for (int i = 1; i < lst.size(); i++) {
            int curr = lst.get(i);
            if (curr < prev) {
                return false;
            } else if (curr == prev) {
                if (hasDuplicate) {
                    return false;
                } else {
                    hasDuplicate = true;
                }
            } else {
                hasDuplicate = false;
            }
            prev = curr;
        }
        return true;
    }
}

// IsSortedTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSorted}.
* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.
*/
class IsSortedTest {

    @Test
    void testEmptyList() {
        List<Integer> lst = Arrays.asList();
        assertTrue(IsSorted.isSorted(lst));
    }

    @Test
    void testSingleElementList() {
        List<Integer> lst = Arrays.asList(5);
        assertTrue(IsSorted.isSorted(lst));
    }

    @Test
    void testSortedAscendingList() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5);
        assertTrue(IsSorted.isSorted(lst));
    }

    @Test
    void testUnsortedList() {
        List<Integer> lst = Arrays.asList(1, 3, 2, 4, 5);
        assertFalse(IsSorted.isSorted(lst));
    }

    @Test
    void testSortedListWithDuplicate() {
        List<Integer> lst = Arrays.asList(1, 2, 2, 3, 3, 4);
        assertTrue(IsSorted.isSorted(lst));
    }

    @Test
    void testUnsortedListWithDuplicate() {
        List<Integer> lst = Arrays.asList(1, 2, 2, 2, 3, 4);
        assertFalse(IsSorted.isSorted(lst));
    }

    @Test
    void testSortedListWithMultipleDuplicates() {
        List<Integer> lst = Arrays.asList(1, 2, 2, 3, 3, 3, 4);
        assertFalse(IsSorted.isSorted(lst));
    }

    @Test
    void testUnsortedListWithMultipleDuplicates() {
        List<Integer> lst = Arrays.asList(1, 3, 2, 4, 5, 6, 7);
        assertFalse(IsSorted.isSorted(lst));
    }

    @Test
    void testSortedListWithMultipleDuplicatesAndSingleDuplicate() {
        List<Integer> lst = Arrays.asList(1, 2, 2, 3, 3, 4, 4);
        assertFalse(IsSorted.isSorted(lst));
    }

    @Test
    void testDescendingList() {
        List<Integer> lst = Arrays.asList(3, 2, 1);
        assertFalse(IsSorted.isSorted(lst));
    }
}"
chatcmpl-6yQwvLYBtkKNmC9pbP5YiDEa8mR4Q,/HumanEvalJava/src/main/java/scenario3/id_130.java,67.94489121437073,length,"// Tri.java
package scenario3;

import java.util.List;

class Tri {

    /**
     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
     * the last couple centuries. However, what people don't know is Tribonacci sequence.
     * Tribonacci sequence is defined by the recurrence:
     * tri(1) = 3
     * tri(n) = 1 + n / 2, if n is even.
     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
     * For example:
     * tri(2) = 1 + (2 / 2) = 2
     * tri(4) = 3
     * tri(3) = tri(2) + tri(1) + tri(4)
     * = 2 + 3 + 3 = 8
     * You are given a non-negative integer number n, you have to a return a list of the
     * first n + 1 numbers of the Tribonacci sequence.
     * Examples:
     * tri(3) = [1, 3, 2, 8]
     *
     * > tri(3)
     * [1, 3, 2.0, 8.0]
     * > tri(4)
     * [1, 3, 2.0, 8.0, 3.0]
     * > tri(5)
     * [1, 3, 2.0, 8.0, 3.0, 15.0]
     * > tri(6)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
     * > tri(7)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
     * > tri(8)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
     * > tri(9)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
     * > tri(20)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]
     * > tri(0)
     * [1]
     * > tri(1)
     * [1, 3]
     */
    public static List<Number> tri(int n) {
    }
}
","// TriTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tri}.
* It contains ten unit test cases for the {@link Tri#tri(int)} method.
*/
class TriTest {","// Tri.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Tri {

    /**
     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
     * the last couple centuries. However, what people don't know is Tribonacci sequence.
     * Tribonacci sequence is defined by the recurrence:
     * tri(1) = 3
     * tri(n) = 1 + n / 2, if n is even.
     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
     * For example:
     * tri(2) = 1 + (2 / 2) = 2
     * tri(4) = 3
     * tri(3) = tri(2) + tri(1) + tri(4)
     * = 2 + 3 + 3 = 8
     * You are given a non-negative integer number n, you have to a return a list of the
     * first n + 1 numbers of the Tribonacci sequence.
     * Examples:
     * tri(3) = [1, 3, 2, 8]
     *
     * > tri(3)
     * [1, 3, 2.0, 8.0]
     * > tri(4)
     * [1, 3, 2.0, 8.0, 3.0]
     * > tri(5)
     * [1, 3, 2.0, 8.0, 3.0, 15.0]
     * > tri(6)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
     * > tri(7)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
     * > tri(8)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
     * > tri(9)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
     * > tri(20)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]
     * > tri(0)
     * [1]
     * > tri(1)
     * [1, 3]
     */
    public static List<Number> tri(int n) {
        List<Number> result = new ArrayList<>();
        if (n >= 0) {
            result.add(1);
            if (n > 0) {
                result.add(3);
                for (int i = 2; i <= n; i++) {
                    if (i % 2 == 0) {
                        result.add(1 + i / 2);
                    } else {
                        result.add(result.get(i - 1).intValue() + result.get(i - 2).intValue() + result.get(i + 1).intValue());
                    }
                }
            }
        }
        return result;
    }
}

// TriTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tri}.
* It contains ten unit test cases for the {@link Tri#tri(int)} method.
*/
class TriTest {
    @Test
    void testTriWithNegativeInput() {
        List<Number> result = Tri.tri(-1);
        assertTrue(result.isEmpty());
    }

    @Test
    void testTriWithZeroInput() {
        List<Number> result = Tri.tri(0);
        assertEquals(1, result.size());
        assertEquals(1, result.get(0).intValue());
    }

    @Test
    void testTriWithOneInput() {
        List<Number> result = Tri.tri(1);
        assertEquals(2, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
    }

    @Test
    void testTriWithTwoInput() {
        List<Number> result = Tri.tri(2);
        assertEquals(3, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
    }

    @Test
    void testTriWithThreeInput() {
        List<Number> result = Tri.tri(3);
        assertEquals(4, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
    }

    @Test
    void testTriWithFourInput() {
        List<Number> result = Tri.tri(4);
        assertEquals(5, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
    }

    @Test
    void testTriWithFiveInput() {
        List<Number> result = Tri.tri(5);
        assertEquals(6, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
        assertEquals(15, result.get(5).intValue());
    }

    @Test
    void testTriWithSixInput() {
        List<Number> result = Tri.tri(6);
        assertEquals(7, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
        assertEquals(15, result.get(5).intValue());
        assertEquals(4, result.get(6).intValue());
    }

    @Test
    void testTriWithSevenInput() {
        List<Number> result = Tri.tri(7);
        assertEquals(8, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
        assertEquals(15, result.get(5).intValue());
        assertEquals(4, result.get(6).intValue());
        assertEquals(24, result.get(7).intValue());
    }

    @Test
    void testTriWithEightInput() {
        List<Number> result = Tri.tri(8);
        assertEquals(9, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
        assertEquals(15, result.get(5).intValue());
        assertEquals(4, result.get(6).intValue());
        assertEquals(24, result.get(7).intValue());
        assertEquals(5, result.get(8).intValue());
    }

    @Test
    void testTriWithTwentyInput() {
        List<Number> result = Tri.tri(20);
        assertEquals(21, result.size());
        assertEquals(1, result.get(0).intValue());
        assertEquals(3, result.get(1).intValue());
        assertEquals(2, result.get(2).intValue());
        assertEquals(8, result.get(3).intValue());
        assertEquals(3, result.get(4).intValue());
        assertEquals(15, result.get(5).intValue());
        assertEquals(4, result.get(6).intValue());
        assertEquals(24, result.get(7).intValue());
        assertEquals(5, result.get(8).intValue());
        assertEquals(35, result.get(9).intValue());
        assertEquals(6, result.get(10).intValue());
        assertEquals(48, result.get(11).intValue());
        assertEquals(7, result.get(12).intValue());
        assertEquals(63, result.get(13).intValue());
        assertEquals(8, result.get(14).intValue());
        assertEquals(80,"
chatcmpl-6yQy10MnUmC0q7fycGMawOCl5Qo2e,/HumanEvalJava/src/main/java/scenario3/id_72.java,37.075966119766235,stop,"// WillItFly.java
package scenario3;

import java.util.List;

class WillItFly {

    /**
     * * Write a function that returns True if the object q will fly, and False otherwise.
     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
     *
     * Example:
     * willItFly([1, 2], 5) ➞ False
     * # 1+2 is less than the maximum possible weight, but it's unbalanced.
     *
     * willItFly([3, 2, 3], 1) ➞ False
     * # it's balanced, but 3+2+3 is more than the maximum possible weight.
     *
     * willItFly([3, 2, 3], 9) ➞ True
     * # 3+2+3 is less than the maximum possible weight, and it's balanced.
     *
     * willItFly([3], 5) ➞ True
     * # 3 is less than the maximum possible weight, and it's balanced.
     *
     * > willItFly([3, 2, 3], 9)
     * true
     * > willItFly([1, 2], 5)
     * false
     * > willItFly([3], 5)
     * true
     * > willItFly([3, 2, 3], 1)
     * false
     * > willItFly([1, 2, 3], 6)
     * false
     * > willItFly([5], 5)
     * true
     */
    public static Boolean willItFly(List<Integer> q, int w) {
    }
}
","// WillItFlyTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WillItFly}.
* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.
*/
class WillItFlyTest {","// WillItFly.java
package scenario3;

import java.util.List;

class WillItFly {

    /**
     * * Write a function that returns True if the object q will fly, and False otherwise.
     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
     *
     * Example:
     * willItFly([1, 2], 5) ➞ False
     * # 1+2 is less than the maximum possible weight, but it's unbalanced.
     *
     * willItFly([3, 2, 3], 1) ➞ False
     * # it's balanced, but 3+2+3 is more than the maximum possible weight.
     *
     * willItFly([3, 2, 3], 9) ➞ True
     * # 3+2+3 is less than the maximum possible weight, and it's balanced.
     *
     * willItFly([3], 5) ➞ True
     * # 3 is less than the maximum possible weight, and it's balanced.
     *
     * > willItFly([3, 2, 3], 9)
     * true
     * > willItFly([1, 2], 5)
     * false
     * > willItFly([3], 5)
     * true
     * > willItFly([3, 2, 3], 1)
     * false
     * > willItFly([1, 2, 3], 6)
     * false
     * > willItFly([5], 5)
     * true
     */
    public static Boolean willItFly(List<Integer> q, int w) {
        int sum = 0;
        for (int i = 0; i < q.size(); i++) {
            sum += q.get(i);
        }
        if (sum > w) {
            return false;
        }
        for (int i = 0; i < q.size() / 2; i++) {
            if (!q.get(i).equals(q.get(q.size() - i - 1))) {
                return false;
            }
        }
        return true;
    }
}

// WillItFlyTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WillItFly}.
* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.
*/
class WillItFlyTest {
    @Test
    void testWillItFly1() {
        List<Integer> q = Arrays.asList(3, 2, 3);
        int w = 9;
        assertTrue(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly2() {
        List<Integer> q = Arrays.asList(1, 2);
        int w = 5;
        assertFalse(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly3() {
        List<Integer> q = Arrays.asList(3);
        int w = 5;
        assertTrue(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly4() {
        List<Integer> q = Arrays.asList(3, 2, 3);
        int w = 1;
        assertFalse(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly5() {
        List<Integer> q = Arrays.asList(1, 2, 3);
        int w = 6;
        assertFalse(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly6() {
        List<Integer> q = Arrays.asList(5);
        int w = 5;
        assertTrue(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly7() {
        List<Integer> q = Arrays.asList(1, 2, 3, 2, 1);
        int w = 10;
        assertTrue(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly8() {
        List<Integer> q = Arrays.asList(1, 2, 3, 2, 1);
        int w = 9;
        assertFalse(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly9() {
        List<Integer> q = Arrays.asList(1, 2, 3, 2, 1);
        int w = 11;
        assertTrue(WillItFly.willItFly(q, w));
    }

    @Test
    void testWillItFly10() {
        List<Integer> q = Arrays.asList(1, 2, 3, 2, 1);
        int w = 12;
        assertTrue(WillItFly.willItFly(q, w));
    }
}"
chatcmpl-6yQz4pFRlVKO064ZZudf8kdjVmi5v,/HumanEvalJava/src/main/java/scenario3/id_148.java,43.03463053703308,stop,"// Bf.java
package scenario3;

import java.util.List;

class Bf {

    /**
     * * There are eight planets in our solar system: the closest to the Sun
     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
     * Uranus, Neptune.
     * Write a function that takes two planet names as strings planet1 and planet2.
     * The function should return a tuple containing all planets whose orbits are
     * located between the orbit of planet1 and the orbit of planet2, sorted by
     * the proximity to the sun.
     * The function should return an empty tuple if planet1 or planet2
     * are not correct planet names.
     * Examples
     * bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
     * bf(""Earth"", ""Mercury"") ==> (""Venus"")
     * bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
     *
     * > bf(""Jupiter"", ""Neptune"")
     * [""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Mercury"")
     * [""Venus""]
     * > bf(""Mercury"", ""Uranus"")
     * [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     * > bf(""Neptune"", ""Venus"")
     * [""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Earth"")
     * []
     * > bf(""Mars"", ""Earth"")
     * []
     * > bf(""Jupiter"", ""Makemake"")
     * []
     */
    public static List<Object> bf(String planet1, String planet2) {
    }
}
","// BfTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {","// Bf.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Bf {

    /**
     * * There are eight planets in our solar system: the closest to the Sun
     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
     * Uranus, Neptune.
     * Write a function that takes two planet names as strings planet1 and planet2.
     * The function should return a tuple containing all planets whose orbits are
     * located between the orbit of planet1 and the orbit of planet2, sorted by
     * the proximity to the sun.
     * The function should return an empty tuple if planet1 or planet2
     * are not correct planet names.
     * Examples
     * bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
     * bf(""Earth"", ""Mercury"") ==> (""Venus"")
     * bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
     *
     * > bf(""Jupiter"", ""Neptune"")
     * [""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Mercury"")
     * [""Venus""]
     * > bf(""Mercury"", ""Uranus"")
     * [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     * > bf(""Neptune"", ""Venus"")
     * [""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Earth"")
     * []
     * > bf(""Mars"", ""Earth"")
     * []
     * > bf(""Jupiter"", ""Makemake"")
     * []
     */
    public static List<String> bf(String planet1, String planet2) {
        Map<String, Integer> planets = new HashMap<>();
        planets.put(""Mercury"", 1);
        planets.put(""Venus"", 2);
        planets.put(""Earth"", 3);
        planets.put(""Mars"", 4);
        planets.put(""Jupiter"", 5);
        planets.put(""Saturn"", 6);
        planets.put(""Uranus"", 7);
        planets.put(""Neptune"", 8);

        List<String> result = new ArrayList<>();

        if (!planets.containsKey(planet1) || !planets.containsKey(planet2)) {
            return result;
        }

        int orbit1 = planets.get(planet1);
        int orbit2 = planets.get(planet2);

        if (orbit1 == orbit2) {
            return result;
        }

        int minOrbit = Math.min(orbit1, orbit2);
        int maxOrbit = Math.max(orbit1, orbit2);

        for (Map.Entry<String, Integer> entry : planets.entrySet()) {
            int orbit = entry.getValue();
            if (orbit > minOrbit && orbit < maxOrbit) {
                result.add(entry.getKey());
            }
        }

        return result;
    }
}

// BfTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {

    @Test
    void testBf1() {
        List<String> expected = Arrays.asList(""Saturn"", ""Uranus"");
        List<String> actual = Bf.bf(""Jupiter"", ""Neptune"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf2() {
        List<String> expected = Arrays.asList(""Venus"");
        List<String> actual = Bf.bf(""Earth"", ""Mercury"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf3() {
        List<String> expected = Arrays.asList(""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"");
        List<String> actual = Bf.bf(""Mercury"", ""Uranus"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf4() {
        List<String> expected = Arrays.asList(""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"");
        List<String> actual = Bf.bf(""Neptune"", ""Venus"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf5() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Earth"", ""Earth"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf6() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Mars"", ""Earth"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf7() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Jupiter"", ""Makemake"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf8() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Makemake"", ""Jupiter"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf9() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Pluto"", ""Mars"");
        assertEquals(expected, actual);
    }

    @Test
    void testBf10() {
        List<String> expected = Arrays.asList();
        List<String> actual = Bf.bf(""Mars"", ""Pluto"");
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yR07WoQMQhjYji4IMSAQ9QP1mZJr,/HumanEvalJava/src/main/java/scenario3/id_25.java,32.171064376831055,stop,"// Factorize.java
package scenario3;

import java.util.List;

class Factorize {

    /**
     * Return list of prime factors of given integer in the order from smallest to largest.
     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
     * Input number should be equal to the product of all factors
     *
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(25)
     * [5, 5]
     * > factorize(70)
     * [2, 5, 7]
     * > factorize(2)
     * [2]
     * > factorize(4)
     * [2, 2]
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(57)
     * [3, 19]
     * > factorize(3249)
     * [3, 3, 19, 19]
     * > factorize(185193)
     * [3, 3, 3, 19, 19, 19]
     * > factorize(20577)
     * [3, 19, 19, 19]
     * > factorize(18)
     * [2, 3, 3]
     */
    public static List<Integer> factorize(int n) {
    }
}
","// FactorizeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Factorize}.
* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.
*/
class FactorizeTest {","// Factorize.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Factorize {

    /**
     * Return list of prime factors of given integer in the order from smallest to largest.
     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
     * Input number should be equal to the product of all factors
     *
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(25)
     * [5, 5]
     * > factorize(70)
     * [2, 5, 7]
     * > factorize(2)
     * [2]
     * > factorize(4)
     * [2, 2]
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(57)
     * [3, 19]
     * > factorize(3249)
     * [3, 3, 19, 19]
     * > factorize(185193)
     * [3, 3, 3, 19, 19, 19]
     * > factorize(20577)
     * [3, 19, 19, 19]
     * > factorize(18)
     * [2, 3, 3]
     */
    public static List<Integer> factorize(int n) {
        List<Integer> factors = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        return factors;
    }
}

// FactorizeTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Factorize}.
* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.
*/
class FactorizeTest {
    
    @Test
    void testFactorize8() {
        List<Integer> expected = Arrays.asList(2, 2, 2);
        List<Integer> actual = Factorize.factorize(8);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize25() {
        List<Integer> expected = Arrays.asList(5, 5);
        List<Integer> actual = Factorize.factorize(25);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize70() {
        List<Integer> expected = Arrays.asList(2, 5, 7);
        List<Integer> actual = Factorize.factorize(70);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize2() {
        List<Integer> expected = Arrays.asList(2);
        List<Integer> actual = Factorize.factorize(2);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize4() {
        List<Integer> expected = Arrays.asList(2, 2);
        List<Integer> actual = Factorize.factorize(4);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize57() {
        List<Integer> expected = Arrays.asList(3, 19);
        List<Integer> actual = Factorize.factorize(57);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize3249() {
        List<Integer> expected = Arrays.asList(3, 3, 19, 19);
        List<Integer> actual = Factorize.factorize(3249);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize185193() {
        List<Integer> expected = Arrays.asList(3, 3, 3, 19, 19, 19);
        List<Integer> actual = Factorize.factorize(185193);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize20577() {
        List<Integer> expected = Arrays.asList(3, 19, 19, 19);
        List<Integer> actual = Factorize.factorize(20577);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFactorize18() {
        List<Integer> expected = Arrays.asList(2, 3, 3);
        List<Integer> actual = Factorize.factorize(18);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yR1A55W4i6divzeov3CtuQXs3Ma7,/HumanEvalJava/src/main/java/scenario3/id_33.java,53.00070548057556,stop,"// SortThird.java
package scenario3;

import java.util.List;

class SortThird {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal
     * to the values of the corresponding indices of l, but sorted.
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]
     * > sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([5, 8, 3, 4, 6, 9, 2])
     * [2, 8, 3, 4, 6, 9, 5]
     * > sortThird([5, 6, 9, 4, 8, 3, 2])
     * [2, 6, 9, 4, 8, 3, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2, 1])
     * [2, 6, 3, 4, 8, 9, 5, 1]
     */
    public static List<Integer> sortThird(List<Integer> l) {
    }
}
","// SortThirdTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortThird}.
* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.
*/
class SortThirdTest {","// SortThird.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortThird {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal
     * to the values of the corresponding indices of l, but sorted.
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]
     * > sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([5, 8, 3, 4, 6, 9, 2])
     * [2, 8, 3, 4, 6, 9, 5]
     * > sortThird([5, 6, 9, 4, 8, 3, 2])
     * [2, 6, 9, 4, 8, 3, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2, 1])
     * [2, 6, 3, 4, 8, 9, 5, 1]
     */
    public static List<Integer> sortThird(List<Integer> l) {
        List<Integer> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                temp.add(l.get(i));
            } else {
                result.add(l.get(i));
            }
        }
        Collections.sort(temp);
        int tempIndex = 0;
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                result.add(i, temp.get(tempIndex));
                tempIndex++;
            }
        }
        return result;
    }
}

// SortThirdTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortThird}.
* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.
*/
class SortThirdTest {
    @Test
    void testSortThird() {
        List<Integer> l1 = Arrays.asList(1, 2, 3);
        List<Integer> l2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);
        List<Integer> l3 = Arrays.asList(1, 2, 3);
        List<Integer> l4 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
        List<Integer> l5 = Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10);
        List<Integer> l6 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);
        List<Integer> l7 = Arrays.asList(5, 8, 3, 4, 6, 9, 2);
        List<Integer> l8 = Arrays.asList(5, 6, 9, 4, 8, 3, 2);
        List<Integer> l9 = Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1);
        List<Integer> l10 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
        List<Integer> expected1 = Arrays.asList(1, 2, 3);
        List<Integer> expected2 = Arrays.asList(2, 6, 3, 4, 8, 9, 5);
        List<Integer> expected3 = Arrays.asList(1, 2, 3);
        List<Integer> expected4 = Arrays.asList(1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10);
        List<Integer> expected5 = Arrays.asList(-10, 8, -12, 3, 23, 2, 4, 11, 12, 5);
        List<Integer> expected6 = Arrays.asList(2, 6, 3, 4, 8, 9, 5);
        List<Integer> expected7 = Arrays.asList(2, 8, 3, 4, 6, 9, 5);
        List<Integer> expected8 = Arrays.asList(2, 6, 9, 4, 8, 3, 5);
        List<Integer> expected9 = Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1);
        List<Integer> expected10 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
        assertEquals(expected1, SortThird.sortThird(l1));
        assertEquals(expected2, SortThird.sortThird(l2));
        assertEquals(expected3, SortThird.sortThird(l3));
        assertEquals(expected4, SortThird.sortThird(l4));
        assertEquals(expected5, SortThird.sortThird(l5));
        assertEquals(expected6, SortThird.sortThird(l6));
        assertEquals(expected7, SortThird.sortThird(l7));
        assertEquals(expected8, SortThird.sortThird(l8));
        assertEquals(expected9, SortThird.sortThird(l9));
        assertEquals(expected10, SortThird.sortThird(l10));
    }
}"
chatcmpl-6yR2DLWj8aCj5hLE0QrFrgXvNgeMB,/HumanEvalJava/src/main/java/scenario3/id_109.java,38.622822284698486,stop,"// MoveOneBall.java
package scenario3;

import java.util.List;

class MoveOneBall {

    /**
     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
     * numbers in the array will be randomly ordered. Your task is to determine if
     * it is possible to get an array sorted in non-decreasing order by performing
     * the following operation on the given array:
     * You are allowed to perform right shift operation any number of times.
     *
     * One right shift operation means shifting all elements of the array by one
     * position in the right direction. The last element of the array will be moved to
     * the starting position in the array i.e. 0th index.
     *
     * If it is possible to obtain the sorted array by performing the above operation
     * then return True else return False.
     * If the given array is empty then return True.
     *
     * Note: The given list is guaranteed to have unique elements.
     *
     * For Example:
     *
     * move_one_ball([3, 4, 5, 1, 2])==>True
     * Explanation: By performing 2 right shift operations, non-decreasing order can
     * be achieved for the given array.
     * move_one_ball([3, 5, 4, 1, 2])==>False
     * Explanation:It is not possible to get non-decreasing order for the given
     * array by performing any number of right shift operations.
     *
     * > moveOneBall([3, 4, 5, 1, 2])
     * true
     * > moveOneBall([3, 5, 10, 1, 2])
     * true
     * > moveOneBall([4, 3, 1, 2])
     * false
     * > moveOneBall([3, 5, 4, 1, 2])
     * false
     * > moveOneBall([])
     * true
     */
    public static Boolean moveOneBall(List<Object> arr) {
    }
}
","// MoveOneBallTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MoveOneBall}.
* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.
*/
class MoveOneBallTest {","// MoveOneBall.java
package scenario3;

import java.util.List;

class MoveOneBall {

    /**
     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
     * numbers in the array will be randomly ordered. Your task is to determine if
     * it is possible to get an array sorted in non-decreasing order by performing
     * the following operation on the given array:
     * You are allowed to perform right shift operation any number of times.
     *
     * One right shift operation means shifting all elements of the array by one
     * position in the right direction. The last element of the array will be moved to
     * the starting position in the array i.e. 0th index.
     *
     * If it is possible to obtain the sorted array by performing the above operation
     * then return True else return False.
     * If the given array is empty then return True.
     *
     * Note: The given list is guaranteed to have unique elements.
     *
     * For Example:
     *
     * move_one_ball([3, 4, 5, 1, 2])==>True
     * Explanation: By performing 2 right shift operations, non-decreasing order can
     * be achieved for the given array.
     * move_one_ball([3, 5, 4, 1, 2])==>False
     * Explanation:It is not possible to get non-decreasing order for the given
     * array by performing any number of right shift operations.
     *
     * > moveOneBall([3, 4, 5, 1, 2])
     * true
     * > moveOneBall([3, 5, 10, 1, 2])
     * true
     * > moveOneBall([4, 3, 1, 2])
     * false
     * > moveOneBall([3, 5, 4, 1, 2])
     * false
     * > moveOneBall([])
     * true
     */
    public static Boolean moveOneBall(List<Integer> arr) {
        if (arr.isEmpty()) {
            return true;
        }
        int n = arr.size();
        int minIndex = 0;
        for (int i = 0; i < n; i++) {
            if (arr.get(i) < arr.get(minIndex)) {
                minIndex = i;
            }
        }
        int shifts = n - minIndex - 1;
        for (int i = 0; i < n; i++) {
            int index = (i + shifts) % n;
            if (arr.get(index) < arr.get((index + 1) % n)) {
                continue;
            } else {
                return false;
            }
        }
        return true;
    }
}

// MoveOneBallTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MoveOneBall}.
* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.
*/
class MoveOneBallTest {
    @Test
    void testEmptyList() {
        List<Integer> arr = Collections.emptyList();
        assertTrue(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testSingleElementList() {
        List<Integer> arr = Collections.singletonList(1);
        assertTrue(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testSortedArray() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 4, 5);
        assertTrue(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray() {
        List<Integer> arr = Arrays.asList(3, 4, 5, 1, 2);
        assertTrue(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray2() {
        List<Integer> arr = Arrays.asList(3, 5, 10, 1, 2);
        assertTrue(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray3() {
        List<Integer> arr = Arrays.asList(4, 3, 1, 2);
        assertFalse(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray4() {
        List<Integer> arr = Arrays.asList(3, 5, 4, 1, 2);
        assertFalse(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray5() {
        List<Integer> arr = Arrays.asList(5, 4, 3, 2, 1);
        assertFalse(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray6() {
        List<Integer> arr = Arrays.asList(2, 1, 3, 5, 4);
        assertFalse(MoveOneBall.moveOneBall(arr));
    }

    @Test
    void testUnsortedArray7() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 5, 4);
        assertTrue(MoveOneBall.moveOneBall(arr));
    }
}"
chatcmpl-6yR3GybDHXus3aDWuzpchUHtpIIGI,/HumanEvalJava/src/main/java/scenario3/id_0.java,24.97752285003662,stop,"// HasCloseElements.java
package scenario3;

import java.util.List;

class HasCloseElements {

    /**
     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.
     *
     * > hasCloseElements([1.0, 2.0, 3.0], 0.5)
     * false
     * > hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)
     * false
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)
     * true
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)
     * false
     * > hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)
     * false
     */
    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {
    }
}
","// HasCloseElementsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HasCloseElements}.
* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
*/
class HasCloseElementsTest {","// Here's the source code for the HasCloseElementsTest class:

package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link HasCloseElements}.
 * It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
 */
class HasCloseElementsTest {

    @Test
    void testNoCloseElements() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0);
        assertFalse(HasCloseElements.hasCloseElements(numbers, 0.5));
    }

    @Test
    void testCloseElementsWithinThreshold() {
        List<Double> numbers = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);
        assertTrue(HasCloseElements.hasCloseElements(numbers, 0.3));
    }

    @Test
    void testCloseElementsOutsideThreshold() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
        assertTrue(HasCloseElements.hasCloseElements(numbers, 0.3));
    }

    @Test
    void testNoCloseElementsWithinSmallerThreshold() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
        assertFalse(HasCloseElements.hasCloseElements(numbers, 0.05));
    }

    @Test
    void testCloseElementsWithinLargerThreshold() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0);
        assertTrue(HasCloseElements.hasCloseElements(numbers, 0.95));
    }

    @Test
    void testNoCloseElementsWithinLargerThreshold() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0);
        assertFalse(HasCloseElements.hasCloseElements(numbers, 0.8));
    }

    @Test
    void testCloseElementsWithinSmallerThreshold2() {
        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);
        assertTrue(HasCloseElements.hasCloseElements(numbers, 0.1));
    }

    @Test
    void testCloseElementsWithinLargerThreshold2() {
        List<Double> numbers = Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1);
        assertTrue(HasCloseElements.hasCloseElements(numbers, 1.0));
    }

    @Test
    void testNoCloseElementsWithinSmallerThreshold3() {
        List<Double> numbers = Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1);
        assertFalse(HasCloseElements.hasCloseElements(numbers, 0.5));
    }

    @Test
    void testEmptyList() {
        List<Double> numbers = Arrays.asList();
        assertFalse(HasCloseElements.hasCloseElements(numbers, 0.5));
    }
}"
chatcmpl-6yR4JfzPf1VPSq1sJgpgAvAlozaH9,/HumanEvalJava/src/main/java/scenario3/id_64.java,23.093992233276367,stop,"// VowelsCount.java
package scenario3;

class VowelsCount {

    /**
     * Write a function vowels_count which takes a string representing
     * a word as input and returns the number of vowels in the string.
     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
     * vowel, but only when it is at the end of the given word.
     *
     * > vowelsCount(""abcde"")
     * 2
     * > vowelsCount(""Alone"")
     * 3
     * > vowelsCount(""key"")
     * 2
     * > vowelsCount(""bye"")
     * 1
     * > vowelsCount(""keY"")
     * 2
     * > vowelsCount(""bYe"")
     * 1
     * > vowelsCount(""ACEDY"")
     * 3
     */
    public static int vowelsCount(String s) {
    }
}
","// VowelsCountTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {","// VowelsCount.java
package scenario3;

class VowelsCount {

    /**
     * Write a function vowels_count which takes a string representing
     * a word as input and returns the number of vowels in the string.
     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
     * vowel, but only when it is at the end of the given word.
     *
     * > vowelsCount(""abcde"")
     * 2
     * > vowelsCount(""Alone"")
     * 3
     * > vowelsCount(""key"")
     * 2
     * > vowelsCount(""bye"")
     * 1
     * > vowelsCount(""keY"")
     * 2
     * > vowelsCount(""bYe"")
     * 1
     * > vowelsCount(""ACEDY"")
     * 3
     */
    public static int vowelsCount(String s) {
        int count = 0;
        s = s.toLowerCase();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                count++;
            } else if (i == s.length() - 1 && c == 'y') {
                count++;
            }
        }
        return count;
    }
}

// VowelsCountTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
    @Test
    void testVowelsCount1() {
        assertEquals(2, VowelsCount.vowelsCount(""abcde""));
    }

    @Test
    void testVowelsCount2() {
        assertEquals(3, VowelsCount.vowelsCount(""Alone""));
    }

    @Test
    void testVowelsCount3() {
        assertEquals(2, VowelsCount.vowelsCount(""key""));
    }

    @Test
    void testVowelsCount4() {
        assertEquals(1, VowelsCount.vowelsCount(""bye""));
    }

    @Test
    void testVowelsCount5() {
        assertEquals(2, VowelsCount.vowelsCount(""keY""));
    }

    @Test
    void testVowelsCount6() {
        assertEquals(1, VowelsCount.vowelsCount(""bYe""));
    }

    @Test
    void testVowelsCount7() {
        assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
    }

    @Test
    void testVowelsCount8() {
        assertEquals(0, VowelsCount.vowelsCount(""""));
    }

    @Test
    void testVowelsCount9() {
        assertEquals(0, VowelsCount.vowelsCount(""xyz""));
    }

    @Test
    void testVowelsCount10() {
        assertEquals(1, VowelsCount.vowelsCount(""y""));
    }
}"
chatcmpl-6yR5Mx4qr4D2s4hMbTmxn5TUPgLOi,/HumanEvalJava/src/main/java/scenario3/id_125.java,30.06389021873474,stop,"// SplitWords.java
package scenario3;

class SplitWords {

    /**
     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
     * Examples
     * splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""abcdef"") == 3
     *
     * > splitWords(""Hello world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello,world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello world,!"")
     * [""Hello"", ""world,!""]
     * > splitWords(""Hello,Hello,world !"")
     * [""Hello,Hello,world"", ""!""]
     * > splitWords(""abcdef"")
     * 3
     * > splitWords(""aaabb"")
     * 2
     * > splitWords(""aaaBb"")
     * 1
     * > splitWords("""")
     * 0
     */
    public static Object splitWords(String txt) {
    }
}
","// SplitWordsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SplitWords}.
* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.
*/
class SplitWordsTest {","// SplitWords.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class SplitWords {

    /**
     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
     * Examples
     * splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""abcdef"") == 3
     *
     * > splitWords(""Hello world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello,world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello world,!"")
     * [""Hello"", ""world,!""]
     * > splitWords(""Hello,Hello,world !"")
     * [""Hello,Hello,world"", ""!""]
     * > splitWords(""abcdef"")
     * 3
     * > splitWords(""aaabb"")
     * 2
     * > splitWords(""aaaBb"")
     * 1
     * > splitWords("""")
     * 0
     */
    public static Object splitWords(String txt) {
        List<String> words = new ArrayList<>();
        if (txt.isEmpty()) {
            return 0;
        }
        if (txt.contains("" "")) {
            String[] split = txt.split("" "");
            for (String s : split) {
                words.add(s);
            }
        } else if (txt.contains("","")) {
            String[] split = txt.split("","");
            for (String s : split) {
                words.add(s);
            }
        } else {
            int count = 0;
            for (char c : txt.toCharArray()) {
                if (Character.isLowerCase(c) && ((int) c - 97) % 2 != 0) {
                    count++;
                }
            }
            return count;
        }
        return words;
    }
}

// SplitWordsTest.java
package scenario3;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link SplitWords}.
 * It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.
 */
class SplitWordsTest {

    @Test
    void testSplitWords1() {
        assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello world!""));
    }

    @Test
    void testSplitWords2() {
        assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello,world!""));
    }

    @Test
    void testSplitWords3() {
        assertEquals(Arrays.asList(""Hello"", ""world,!""), SplitWords.splitWords(""Hello world,!""));
    }

    @Test
    void testSplitWords4() {
        assertEquals(Arrays.asList(""Hello,Hello,world"", ""!""), SplitWords.splitWords(""Hello,Hello,world !""));
    }

    @Test
    void testSplitWords5() {
        assertEquals(3, SplitWords.splitWords(""abcdef""));
    }

    @Test
    void testSplitWords6() {
        assertEquals(2, SplitWords.splitWords(""aaabb""));
    }

    @Test
    void testSplitWords7() {
        assertEquals(1, SplitWords.splitWords(""aaaBb""));
    }

    @Test
    void testSplitWords8() {
        assertEquals(0, SplitWords.splitWords(""""));
    }

    @Test
    void testSplitWords9() {
        assertEquals(Arrays.asList(""Hello"", ""world"", ""this"", ""is"", ""a"", ""test""), SplitWords.splitWords(""Hello world this is a test""));
    }

    @Test
    void testSplitWords10() {
        assertEquals(Arrays.asList(""Hello"", ""world"", ""this"", ""is"", ""a"", ""test""), SplitWords.splitWords(""Hello,world,this,is,a,test""));
    }
}"
chatcmpl-6yR6Q9LIVAJhXdmsxbplGTMEyGawm,/HumanEvalJava/src/main/java/scenario3/id_48.java,16.65261721611023,stop,"// IsPalindrome.java
package scenario3;

class IsPalindrome {

    /**
     * Checks if given string is a palindrome
     *
     * > isPalindrome("""")
     * true
     * > isPalindrome(""aba"")
     * true
     * > isPalindrome(""aaaaa"")
     * true
     * > isPalindrome(""zbcd"")
     * false
     * > isPalindrome(""xywyx"")
     * true
     * > isPalindrome(""xywyz"")
     * false
     * > isPalindrome(""xywzx"")
     * false
     */
    public static Boolean isPalindrome(String text) {
    }
}
","// IsPalindromeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {","// IsPalindrome.java
package scenario3;

class IsPalindrome {

    /**
     * Checks if given string is a palindrome
     *
     * > isPalindrome("""")
     * true
     * > isPalindrome(""aba"")
     * true
     * > isPalindrome(""aaaaa"")
     * true
     * > isPalindrome(""zbcd"")
     * false
     * > isPalindrome(""xywyx"")
     * true
     * > isPalindrome(""xywyz"")
     * false
     * > isPalindrome(""xywzx"")
     * false
     */
    public static Boolean isPalindrome(String text) {
        if (text == null || text.length() == 0) {
            return true;
        }
        int left = 0;
        int right = text.length() - 1;
        while (left < right) {
            if (text.charAt(left) != text.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

// IsPalindromeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
    @Test
    void testEmptyString() {
        assertTrue(IsPalindrome.isPalindrome(""""));
    }

    @Test
    void testSingleCharacterString() {
        assertTrue(IsPalindrome.isPalindrome(""a""));
    }

    @Test
    void testPalindromeString() {
        assertTrue(IsPalindrome.isPalindrome(""aba""));
    }

    @Test
    void testLongPalindromeString() {
        assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
    }

    @Test
    void testNonPalindromeString() {
        assertFalse(IsPalindrome.isPalindrome(""zbcd""));
    }

    @Test
    void testEvenLengthPalindromeString() {
        assertTrue(IsPalindrome.isPalindrome(""xyyxy""));
    }

    @Test
    void testOddLengthPalindromeString() {
        assertTrue(IsPalindrome.isPalindrome(""xywyx""));
    }

    @Test
    void testNonPalindromeStringWithSameFirstAndLastCharacters() {
        assertFalse(IsPalindrome.isPalindrome(""xywyz""));
    }

    @Test
    void testNonPalindromeStringWithSameFirstAndLastCharacters2() {
        assertFalse(IsPalindrome.isPalindrome(""xywzx""));
    }

    @Test
    void testNullString() {
        assertTrue(IsPalindrome.isPalindrome(null));
    }
}"
chatcmpl-6yR7T1BEpWBH6U61cd2jEBElq2x6i,/HumanEvalJava/src/main/java/scenario3/id_133.java,42.53773093223572,stop,"// SumSquares.java
package scenario3;

import java.util.List;

class SumSquares {

    /**
     * You are given a list of numbers.
     * You need to return the sum of squared numbers in the given list,
     * round each element in the list to the upper int(Ceiling) first.
     * Examples:
     * For lst = [1,2,3] the output should be 14
     * For lst = [1,4,9] the output should be 98
     * For lst = [1,3,5,7] the output should be 84
     * For lst = [1.4,4.2,0] the output should be 29
     * For lst = [-2.4,1,1] the output should be 6
     *
     * > sumSquares([1, 2, 3])
     * 14
     * > sumSquares([1.0, 2, 3])
     * 14
     * > sumSquares([1, 3, 5, 7])
     * 84
     * > sumSquares([1.4, 4.2, 0])
     * 29
     * > sumSquares([-2.4, 1, 1])
     * 6
     * > sumSquares([100, 1, 15, 2])
     * 10230
     * > sumSquares([10000, 10000])
     * 200000000
     * > sumSquares([-1.4, 4.6, 6.3])
     * 75
     * > sumSquares([-1.4, 17.9, 18.9, 19.9])
     * 1086
     * > sumSquares([0])
     * 0
     * > sumSquares([-1])
     * 1
     * > sumSquares([-1, 1, 0])
     * 2
     */
    public static int sumSquares(List<Number> lst) {
    }
}
","// SumSquaresTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {","// SumSquares.java
package scenario3;

import java.util.List;

class SumSquares {

    /**
     * You are given a list of numbers.
     * You need to return the sum of squared numbers in the given list,
     * round each element in the list to the upper int(Ceiling) first.
     * Examples:
     * For lst = [1,2,3] the output should be 14
     * For lst = [1,4,9] the output should be 98
     * For lst = [1,3,5,7] the output should be 84
     * For lst = [1.4,4.2,0] the output should be 29
     * For lst = [-2.4,1,1] the output should be 6
     *
     * > sumSquares([1, 2, 3])
     * 14
     * > sumSquares([1.0, 2, 3])
     * 14
     * > sumSquares([1, 3, 5, 7])
     * 84
     * > sumSquares([1.4, 4.2, 0])
     * 29
     * > sumSquares([-2.4, 1, 1])
     * 6
     * > sumSquares([100, 1, 15, 2])
     * 10230
     * > sumSquares([10000, 10000])
     * 200000000
     * > sumSquares([-1.4, 4.6, 6.3])
     * 75
     * > sumSquares([-1.4, 17.9, 18.9, 19.9])
     * 1086
     * > sumSquares([0])
     * 0
     * > sumSquares([-1])
     * 1
     * > sumSquares([-1, 1, 0])
     * 2
     */
    public static int sumSquares(List<Number> lst) {
        int sum = 0;
        for (Number num : lst) {
            int ceil = (int) Math.ceil(num.doubleValue());
            sum += ceil * ceil;
        }
        return sum;
    }
}

// SumSquaresTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {
    
    @Test
    void testSumSquares1() {
        List<Number> lst = Arrays.asList(1, 2, 3);
        int expected = 14;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares2() {
        List<Number> lst = Arrays.asList(1.0, 2, 3);
        int expected = 14;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares3() {
        List<Number> lst = Arrays.asList(1, 3, 5, 7);
        int expected = 84;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares4() {
        List<Number> lst = Arrays.asList(1.4, 4.2, 0);
        int expected = 29;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares5() {
        List<Number> lst = Arrays.asList(-2.4, 1, 1);
        int expected = 6;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares6() {
        List<Number> lst = Arrays.asList(100, 1, 15, 2);
        int expected = 10230;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares7() {
        List<Number> lst = Arrays.asList(10000, 10000);
        int expected = 200000000;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares8() {
        List<Number> lst = Arrays.asList(-1.4, 4.6, 6.3);
        int expected = 75;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares9() {
        List<Number> lst = Arrays.asList(-1.4, 17.9, 18.9, 19.9);
        int expected = 1086;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares10() {
        List<Number> lst = Arrays.asList(0);
        int expected = 0;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares11() {
        List<Number> lst = Arrays.asList(-1);
        int expected = 1;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares12() {
        List<Number> lst = Arrays.asList(-1, 1, 0);
        int expected = 2;
        int actual = SumSquares.sumSquares(lst);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yR8WH7BDBVWD2hemyzzKLwINrRPq,/HumanEvalJava/src/main/java/scenario3/id_144.java,33.17875289916992,stop,"// Simplify.java
package scenario3;

class Simplify {

    /**
     * Your task is to implement a function that will simplify the expression
     * x * n. The function returns True if x * n evaluates to a whole number and False
     * otherwise. Both x and n, are string representation of a fraction, and have the following format,
     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
     *
     * You can assume that x, and n are valid fractions, and do not have zero as denominator.
     *
     * simplify(""1/5"", ""5/1"") = True
     * simplify(""1/6"", ""2/1"") = False
     * simplify(""7/10"", ""10/2"") = False
     *
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/6"", ""2/1"")
     * false
     * > simplify(""5/1"", ""3/1"")
     * true
     * > simplify(""7/10"", ""10/2"")
     * false
     * > simplify(""2/10"", ""50/10"")
     * true
     * > simplify(""7/2"", ""4/2"")
     * true
     * > simplify(""11/6"", ""6/1"")
     * true
     * > simplify(""2/3"", ""5/2"")
     * false
     * > simplify(""5/2"", ""3/5"")
     * false
     * > simplify(""2/4"", ""8/4"")
     * true
     * > simplify(""2/4"", ""4/2"")
     * true
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/5"", ""1/5"")
     * false
     */
    public static Boolean simplify(String x, String n) {
    }
}
","// SimplifyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Simplify}.
* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.
*/
class SimplifyTest {","// Here's the implementation of the Simplify class and the test cases for the simplify method.

// Simplify.java
package scenario3;

class Simplify {

    /**
     * Your task is to implement a function that will simplify the expression
     * x * n. The function returns True if x * n evaluates to a whole number and False
     * otherwise. Both x and n, are string representation of a fraction, and have the following format,
     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
     *
     * You can assume that x, and n are valid fractions, and do not have zero as denominator.
     *
     * simplify(""1/5"", ""5/1"") = True
     * simplify(""1/6"", ""2/1"") = False
     * simplify(""7/10"", ""10/2"") = False
     *
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/6"", ""2/1"")
     * false
     * > simplify(""5/1"", ""3/1"")
     * true
     * > simplify(""7/10"", ""10/2"")
     * false
     * > simplify(""2/10"", ""50/10"")
     * true
     * > simplify(""7/2"", ""4/2"")
     * true
     * > simplify(""11/6"", ""6/1"")
     * true
     * > simplify(""2/3"", ""5/2"")
     * false
     * > simplify(""5/2"", ""3/5"")
     * false
     * > simplify(""2/4"", ""8/4"")
     * true
     * > simplify(""2/4"", ""4/2"")
     * true
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/5"", ""1/5"")
     * false
     */
    public static Boolean simplify(String x, String n) {
        String[] xParts = x.split(""/"");
        String[] nParts = n.split(""/"");

        int xNumerator = Integer.parseInt(xParts[0]);
        int xDenominator = Integer.parseInt(xParts[1]);
        int nNumerator = Integer.parseInt(nParts[0]);
        int nDenominator = Integer.parseInt(nParts[1]);

        int numerator = xNumerator * nNumerator;
        int denominator = xDenominator * nDenominator;

        int gcd = gcd(numerator, denominator);

        numerator /= gcd;
        denominator /= gcd;

        return denominator == 1;
    }

    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}

// SimplifyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Simplify}.
* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.
*/
class SimplifyTest {

    @Test
    void testSimplify1() {
        assertTrue(Simplify.simplify(""1/5"", ""5/1""));
    }

    @Test
    void testSimplify2() {
        assertFalse(Simplify.simplify(""1/6"", ""2/1""));
    }

    @Test
    void testSimplify3() {
        assertTrue(Simplify.simplify(""5/1"", ""3/1""));
    }

    @Test
    void testSimplify4() {
        assertFalse(Simplify.simplify(""7/10"", ""10/2""));
    }

    @Test
    void testSimplify5() {
        assertTrue(Simplify.simplify(""2/10"", ""50/10""));
    }

    @Test
    void testSimplify6() {
        assertTrue(Simplify.simplify(""7/2"", ""4/2""));
    }

    @Test
    void testSimplify7() {
        assertTrue(Simplify.simplify(""11/6"", ""6/1""));
    }

    @Test
    void testSimplify8() {
        assertFalse(Simplify.simplify(""2/3"", ""5/2""));
    }

    @Test
    void testSimplify9() {
        assertFalse(Simplify.simplify(""5/2"", ""3/5""));
    }

    @Test
    void testSimplify10() {
        assertTrue(Simplify.simplify(""2/4"", ""8/4""));
    }

    @Test
    void testSimplify11() {
        assertTrue(Simplify.simplify(""2/4"", ""4/2""));
    }

    @Test
    void testSimplify12() {
        assertTrue(Simplify.simplify(""1/5"", ""5/1""));
    }

    @Test
    void testSimplify13() {
        assertFalse(Simplify.simplify(""1/5"", ""1/5""));
    }
}"
chatcmpl-6yR9Zw1DWORNFbjHcxeX0xiNCtOdH,/HumanEvalJava/src/main/java/scenario3/id_91.java,19.109230041503906,stop,"// IsBored.java
package scenario3;

class IsBored {

    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     *
     * > isBored(""Hello world"")
     * 0
     * > isBored(""Is the sky blue?"")
     * 0
     * > isBored(""I love It !"")
     * 1
     * > isBored(""bIt"")
     * 0
     * > isBored(""I feel good today. I will be productive. will kill It"")
     * 2
     * > isBored(""You and I are going for a walk"")
     * 0
     */
    public static int isBored(String s) {
    }
}
","// IsBoredTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {","// IsBored.java
package scenario3;

class IsBored {

    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     *
     * > isBored(""Hello world"")
     * 0
     * > isBored(""Is the sky blue?"")
     * 0
     * > isBored(""I love It !"")
     * 1
     * > isBored(""bIt"")
     * 0
     * > isBored(""I feel good today. I will be productive. will kill It"")
     * 2
     * > isBored(""You and I are going for a walk"")
     * 0
     */
    public static int isBored(String s) {
        int count = 0;
        String[] sentences = s.split(""[.?!]"");
        for (String sentence : sentences) {
            if (sentence.trim().startsWith(""I "")) {
                count++;
            }
        }
        return count;
    }
}

// IsBoredTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {
    
    @Test
    void testEmptyString() {
        assertEquals(0, IsBored.isBored(""""));
    }
    
    @Test
    void testNoBoredom() {
        assertEquals(0, IsBored.isBored(""Hello world""));
        assertEquals(0, IsBored.isBored(""Is the sky blue?""));
        assertEquals(0, IsBored.isBored(""bIt""));
        assertEquals(0, IsBored.isBored(""You and I are going for a walk""));
    }
    
    @Test
    void testOneBoredom() {
        assertEquals(1, IsBored.isBored(""I love It !""));
        assertEquals(1, IsBored.isBored(""The sky is blue. The sun is shining. I love this weather""));
    }
    
    @Test
    void testMultipleBoredoms() {
        assertEquals(2, IsBored.isBored(""I feel good today. I will be productive. will kill It""));
    }
}"
chatcmpl-6yRAcG8aqoTSUdD0HFzZkxI70d5xN,/HumanEvalJava/src/main/java/scenario3/id_113.java,25.445029735565186,stop,"// OddCount.java
package scenario3;

import java.util.List;

class OddCount {

    /**
     * Given a list of strings, where each string consists of only digits, return a list.
     * Each element i of the output should be ""the number of odd elements in the
     * string i of the input."" where all the i's should be replaced by the number
     * of odd digits in the i'th string of the input.
     *
     * >>> oddCount(['1234567'])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * >>> oddCount(['3',""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     * ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     *
     * > oddCount([""1234567""])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * > oddCount([""3"", ""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     * > oddCount([""271"", ""137"", ""314""])
     * [""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]
     */
    public static List<String> oddCount(List<String> lst) {
    }
}
","// OddCountTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OddCount}.
* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.
*/
class OddCountTest {","// OddCount.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class OddCount {

    /**
     * Given a list of strings, where each string consists of only digits, return a list.
     * Each element i of the output should be ""the number of odd elements in the
     * string i of the input."" where all the i's should be replaced by the number
     * of odd digits in the i'th string of the input.
     *
     * >>> oddCount(['1234567'])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * >>> oddCount(['3',""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     * ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     *
     * > oddCount([""1234567""])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * > oddCount([""3"", ""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     * > oddCount([""271"", ""137"", ""314""])
     * [""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]
     */
    public static List<String> oddCount(List<String> lst) {
        List<String> result = new ArrayList<>();
        for (String str : lst) {
            int count = 0;
            for (char c : str.toCharArray()) {
                if (c % 2 != 0) {
                    count++;
                }
            }
            result.add(""the number of odd elements "" + count + ""n the str"" + (result.size() + 1) + ""ng "" + (result.size() + 1) + "" of the "" + (result.size() + 1) + ""nput."");
        }
        return result;
    }
}

// OddCountTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OddCount}.
* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.
*/
class OddCountTest {

    @Test
    void testOddCount() {
        List<String> input1 = Arrays.asList(""1234567"");
        List<String> expected1 = Arrays.asList(""the number of odd elements 4n the str1ng 1 of the 1nput."");
        assertEquals(expected1, OddCount.oddCount(input1));

        List<String> input2 = Arrays.asList(""3"", ""11111111"");
        List<String> expected2 = Arrays.asList(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str2ng 2 of the 2nput."");
        assertEquals(expected2, OddCount.oddCount(input2));

        List<String> input3 = Arrays.asList(""271"", ""137"", ""314"");
        List<String> expected3 = Arrays.asList(""the number of odd elements 2n the str1ng 1 of the 1nput."", ""the number of odd elements 3n the str2ng 2 of the 2nput."", ""the number of odd elements 2n the str3ng 3 of the 3nput."");
        assertEquals(expected3, OddCount.oddCount(input3));
    }
}"
chatcmpl-6yRBf1W9uVo56079qxjViIoqeQImd,/HumanEvalJava/src/main/java/scenario3/id_29.java,27.70523500442505,stop,"// FilterByPrefix.java
package scenario3;

import java.util.List;

class FilterByPrefix {

    /**
     * Filter an input list of strings only for ones that start with a given prefix.
     *
     * > filterByPrefix([], ""a"")
     * []
     * > filterByPrefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""array""]
     * > filterByPrefix([], ""john"")
     * []
     * > filterByPrefix([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     */
    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {
    }
}
","// FilterByPrefixTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterByPrefix}.
* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.
*/
class FilterByPrefixTest {","// FilterByPrefix.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class FilterByPrefix {

    /**
     * Filter an input list of strings only for ones that start with a given prefix.
     *
     * > filterByPrefix([], ""a"")
     * []
     * > filterByPrefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""array""]
     * > filterByPrefix([], ""john"")
     * []
     * > filterByPrefix([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     */
    public static List<String> filterByPrefix(List<String> strings, String prefix) {
        List<String> filteredStrings = new ArrayList<>();
        for (String s : strings) {
            if (s.startsWith(prefix)) {
                filteredStrings.add(s);
            }
        }
        return filteredStrings;
    }
}

// FilterByPrefixTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterByPrefix}.
* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.
*/
class FilterByPrefixTest {

    @Test
    void testEmptyList() {
        List<String> input = Arrays.asList();
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }

    @Test
    void testNoMatch() {
        List<String> input = Arrays.asList(""bcd"", ""cde"", ""array"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }

    @Test
    void testSingleMatch() {
        List<String> input = Arrays.asList(""abc"", ""bcd"", ""cde"", ""array"");
        List<String> expectedOutput = Arrays.asList(""abc"");
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }

    @Test
    void testMultipleMatches() {
        List<String> input = Arrays.asList(""abc"", ""bcd"", ""cde"", ""array"");
        List<String> expectedOutput = Arrays.asList(""abc"", ""array"");
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }

    @Test
    void testMatchCaseSensitive() {
        List<String> input = Arrays.asList(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"");
        List<String> expectedOutput = Arrays.asList(""xxx"", ""xxxAAA"", ""xxx"");
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""xxx""));
    }

    @Test
    void testMatchCaseInsensitive() {
        List<String> input = Arrays.asList(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"");
        List<String> expectedOutput = Arrays.asList(""xxx"", ""xxxAAA"", ""xxx"");
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""XXX""));
    }

    @Test
    void testPrefixEmptyString() {
        List<String> input = Arrays.asList(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, """"));
    }

    @Test
    void testPrefixNull() {
        List<String> input = Arrays.asList(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, null));
    }

    @Test
    void testInputNull() {
        List<String> input = null;
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }

    @Test
    void testInputContainsNull() {
        List<String> input = Arrays.asList(""xxx"", ""asd"", null, ""john doe"", ""xxxAAA"", ""xxx"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterByPrefix.filterByPrefix(input, ""a""));
    }
}"
chatcmpl-6yRCiEJEqrVDOsgrFSEVyQ8MK1GXd,/HumanEvalJava/src/main/java/scenario3/id_105.java,56.023813247680664,stop,"// ByLength.java
package scenario3;

import java.util.List;

class ByLength {

    /**
     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,
     * reverse the resulting array, and then replace each digit by its corresponding name from
     * ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
     *
     * For example:
     * arr = [2, 1, 1, 4, 5, 8, 2, 3]
     * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
     * -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
     * return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     *
     * If the array is empty, return an empty array:
     * arr = []
     * return []
     *
     * If the array has any strange number ignore it:
     * arr = [1, -1 , 55]
     * -> sort arr -> [-1, 1, 55]
     * -> reverse arr -> [55, 1, -1]
     * return = ['One']
     *
     * > byLength([2, 1, 1, 4, 5, 8, 2, 3])
     * [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     * > byLength([])
     * []
     * > byLength([1, -1, 55])
     * [""One""]
     * > byLength([1, -1, 3, 2])
     * [""Three"", ""Two"", ""One""]
     * > byLength([9, 4, 8])
     * [""Nine"", ""Eight"", ""Four""]
     */
    public static List<Object> byLength(List<Object> arr) {
    }
}
","// ByLengthTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByLength}.
* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.
*/
class ByLengthTest {","// ByLength.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class ByLength {

    /**
     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,
     * reverse the resulting array, and then replace each digit by its corresponding name from
     * ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
     *
     * For example:
     * arr = [2, 1, 1, 4, 5, 8, 2, 3]
     * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
     * -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
     * return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     *
     * If the array is empty, return an empty array:
     * arr = []
     * return []
     *
     * If the array has any strange number ignore it:
     * arr = [1, -1 , 55]
     * -> sort arr -> [-1, 1, 55]
     * -> reverse arr -> [55, 1, -1]
     * return = ['One']
     *
     * > byLength([2, 1, 1, 4, 5, 8, 2, 3])
     * [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     * > byLength([])
     * []
     * > byLength([1, -1, 55])
     * [""One""]
     * > byLength([1, -1, 3, 2])
     * [""Three"", ""Two"", ""One""]
     * > byLength([9, 4, 8])
     * [""Nine"", ""Eight"", ""Four""]
     */
    public static List<String> byLength(List<Integer> arr) {
        List<String> result = new ArrayList<>();
        List<Integer> validNumbers = new ArrayList<>();
        for (int num : arr) {
            if (num >= 1 && num <= 9) {
                validNumbers.add(num);
            }
        }
        Collections.sort(validNumbers);
        Collections.reverse(validNumbers);
        for (int num : validNumbers) {
            switch (num) {
                case 1:
                    result.add(""One"");
                    break;
                case 2:
                    result.add(""Two"");
                    break;
                case 3:
                    result.add(""Three"");
                    break;
                case 4:
                    result.add(""Four"");
                    break;
                case 5:
                    result.add(""Five"");
                    break;
                case 6:
                    result.add(""Six"");
                    break;
                case 7:
                    result.add(""Seven"");
                    break;
                case 8:
                    result.add(""Eight"");
                    break;
                case 9:
                    result.add(""Nine"");
                    break;
            }
        }
        return result;
    }
}

// ByLengthTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByLength}.
* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.
*/
class ByLengthTest {

    @Test
    void testEmptyArray() {
        List<Integer> arr = new ArrayList<>();
        List<String> expected = new ArrayList<>();
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithStrangeNumbers() {
        List<Integer> arr = Arrays.asList(1, -1, 55);
        List<String> expected = Arrays.asList(""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidNumbers() {
        List<Integer> arr = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);
        List<String> expected = Arrays.asList(""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidNumbersInDescendingOrder() {
        List<Integer> arr = Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1);
        List<String> expected = Arrays.asList(""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidNumbersInAscendingOrder() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        List<String> expected = Arrays.asList(""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithOnlyOneValidNumber() {
        List<Integer> arr = Arrays.asList(5);
        List<String> expected = Arrays.asList(""Five"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithNoValidNumbers() {
        List<Integer> arr = Arrays.asList(10, 11, 12, 13);
        List<String> expected = new ArrayList<>();
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithRepeatedValidNumbers() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 2, 1);
        List<String> expected = Arrays.asList(""Three"", ""Two"", ""Two"", ""One"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidAndStrangeNumbers() {
        List<Integer> arr = Arrays.asList(1, 2, -1, 3, 4, 55, 5, 6, 7, 8, 9);
        List<String> expected = Arrays.asList(""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidAndStrangeNumbersInDescendingOrder() {
        List<Integer> arr = Arrays.asList(9, 8, 7, 6, 5, 4, 3, -1, 2, 1, 55);
        List<String> expected = Arrays.asList(""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }

    @Test
    void testArrayWithValidAndStrangeNumbersInAscendingOrder() {
        List<Integer> arr = Arrays.asList(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 55);
        List<String> expected = Arrays.asList(""Nine"", ""Eight"", ""Seven"", ""Six"", ""Five"", ""Four"", ""Three"", ""Two"", ""One"");
        List<String> result = ByLength.byLength(arr);
        assertEquals(expected, result);
    }
}"
chatcmpl-6yRDlfQwzlpt1EOzeXMNqwIC5aqks,/HumanEvalJava/src/main/java/scenario3/id_152.java,49.54739212989807,stop,"// Compare.java
package scenario3;

import java.util.List;

class Compare {

    /**
     * I think we all remember that feeling when the result of some long-awaited
     * event is finally known. The feelings and thoughts you have at that moment are
     * definitely worth noting down and comparing.
     * Your task is to determine if a person correctly guessed the results of a number of matches.
     * You are given two arrays of scores and guesses of equal length, where each index shows a match.
     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
     * the value is 0, and if not, the value is the absolute difference between the guess and the score.
     *
     * example:
     *
     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
     *
     * > compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
     * [0, 0, 0, 0, 3, 3]
     * > compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])
     * [0, 0, 0, 0, 0, 0]
     * > compare([1, 2, 3], [-1, -2, -3])
     * [2, 4, 6]
     * > compare([1, 2, 3, 5], [-1, 2, 3, 4])
     * [2, 0, 0, 1]
     */
    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {
    }
}
","// CompareTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Compare}.
* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.
*/
class CompareTest {","// Compare.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Compare {

    /**
     * I think we all remember that feeling when the result of some long-awaited
     * event is finally known. The feelings and thoughts you have at that moment are
     * definitely worth noting down and comparing.
     * Your task is to determine if a person correctly guessed the results of a number of matches.
     * You are given two arrays of scores and guesses of equal length, where each index shows a match.
     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
     * the value is 0, and if not, the value is the absolute difference between the guess and the score.
     *
     * example:
     *
     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
     *
     * > compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
     * [0, 0, 0, 0, 3, 3]
     * > compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])
     * [0, 0, 0, 0, 0, 0]
     * > compare([1, 2, 3], [-1, -2, -3])
     * [2, 4, 6]
     * > compare([1, 2, 3, 5], [-1, 2, 3, 4])
     * [2, 0, 0, 1]
     */
    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < game.size(); i++) {
            int diff = Math.abs(game.get(i) - guess.get(i));
            result.add(diff);
        }
        return result;
    }
}

// CompareTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Compare}.
* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.
*/
class CompareTest {
    
    @Test
    void testCompare() {
        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);
        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);
        List<Integer> expected1 = Arrays.asList(0, 0, 0, 0, 3, 3);
        assertEquals(expected1, Compare.compare(game1, guess1));
        
        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);
        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);
        List<Integer> expected2 = Arrays.asList(4, 4, 1, 0, 0, 6);
        assertEquals(expected2, Compare.compare(game2, guess2));
        
        List<Integer> game3 = Arrays.asList(1, 2, 3);
        List<Integer> guess3 = Arrays.asList(-1, -2, -3);
        List<Integer> expected3 = Arrays.asList(2, 4, 6);
        assertEquals(expected3, Compare.compare(game3, guess3));
        
        List<Integer> game4 = Arrays.asList(1, 2, 3, 5);
        List<Integer> guess4 = Arrays.asList(-1, 2, 3, 4);
        List<Integer> expected4 = Arrays.asList(2, 0, 0, 1);
        assertEquals(expected4, Compare.compare(game4, guess4));
        
        List<Integer> game5 = Arrays.asList(0, 0, 0, 0, 0, 0);
        List<Integer> guess5 = Arrays.asList(0, 0, 0, 0, 0, 0);
        List<Integer> expected5 = Arrays.asList(0, 0, 0, 0, 0, 0);
        assertEquals(expected5, Compare.compare(game5, guess5));
        
        List<Integer> game6 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> guess6 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> expected6 = Arrays.asList(0, 0, 0, 0, 0);
        assertEquals(expected6, Compare.compare(game6, guess6));
        
        List<Integer> game7 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> guess7 = Arrays.asList(6, 7, 8, 9, 10);
        List<Integer> expected7 = Arrays.asList(5, 5, 5, 5, 5);
        assertEquals(expected7, Compare.compare(game7, guess7));
        
        List<Integer> game8 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> guess8 = Arrays.asList(5, 4, 3, 2, 1);
        List<Integer> expected8 = Arrays.asList(4, 2, 0, 2, 4);
        assertEquals(expected8, Compare.compare(game8, guess8));
        
        List<Integer> game9 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> guess9 = Arrays.asList(0, 0, 0, 0, 0);
        List<Integer> expected9 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expected9, Compare.compare(game9, guess9));
        
        List<Integer> game10 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> guess10 = Arrays.asList(1, 1, 1, 1, 1);
        List<Integer> expected10 = Arrays.asList(0, 1, 2, 3, 4);
        assertEquals(expected10, Compare.compare(game10, guess10));
    }
}"
chatcmpl-6yREof2qxqpyPUZLf3y53LTF4EPD9,/HumanEvalJava/src/main/java/scenario3/id_68.java,41.63550114631653,stop,"// Pluck.java
package scenario3;

import java.util.List;

class Pluck {

    /**
     * Given an array representing a branch of a tree that has non-negative integer nodes
     * your task is to pluck one of the nodes and return it.
     * The plucked node should be the node with the smallest even value.
     * If multiple nodes with the same smallest even value are found return the node that has smallest index.
     * The plucked node should be returned in a list, [ smallest_value, its index ],
     * If there are no even values or the given array is empty, return [].
     *
     * Example 1:
     * - Input: [4,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 2:
     * - Input: [1,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 3:
     * - Input: []
     * - Output: []
     * Example 4:
     * - Input: [5, 0, 3, 0, 4, 2]
     * - Output: [0, 1]
     * - Explanation: 0 is the smallest value, but  there are two zeros,
     * so we will choose the first zero, which has the smallest index.
     *
     * Constraints:
     * 1 <= nodes.length <= 10000
     * 0 <= node.value
     *
     * > pluck([4, 2, 3])
     * [2, 1]
     * > pluck([1, 2, 3])
     * [2, 1]
     * > pluck([])
     * []
     * > pluck([5, 0, 3, 0, 4, 2])
     * [0, 1]
     * > pluck([1, 2, 3, 0, 5, 3])
     * [0, 3]
     * > pluck([5, 4, 8, 4, 8])
     * [4, 1]
     * > pluck([7, 6, 7, 1])
     * [6, 1]
     * > pluck([7, 9, 7, 1])
     * []
     */
    public static List<Object> pluck(List<Object> arr) {
    }
}
","// PluckTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pluck}.
* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.
*/
class PluckTest {","// Pluck.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Pluck {

    /**
     * Given an array representing a branch of a tree that has non-negative integer nodes
     * your task is to pluck one of the nodes and return it.
     * The plucked node should be the node with the smallest even value.
     * If multiple nodes with the same smallest even value are found return the node that has smallest index.
     * The plucked node should be returned in a list, [ smallest_value, its index ],
     * If there are no even values or the given array is empty, return [].
     *
     * Example 1:
     * - Input: [4,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 2:
     * - Input: [1,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 3:
     * - Input: []
     * - Output: []
     * Example 4:
     * - Input: [5, 0, 3, 0, 4, 2]
     * - Output: [0, 1]
     * - Explanation: 0 is the smallest value, but  there are two zeros,
     * so we will choose the first zero, which has the smallest index.
     *
     * Constraints:
     * 1 <= nodes.length <= 10000
     * 0 <= node.value
     *
     * > pluck([4, 2, 3])
     * [2, 1]
     * > pluck([1, 2, 3])
     * [2, 1]
     * > pluck([])
     * []
     * > pluck([5, 0, 3, 0, 4, 2])
     * [0, 1]
     * > pluck([1, 2, 3, 0, 5, 3])
     * [0, 3]
     * > pluck([5, 4, 8, 4, 8])
     * [4, 1]
     * > pluck([7, 6, 7, 1])
     * [6, 1]
     * > pluck([7, 9, 7, 1])
     * []
     */
    public static List<Integer> pluck(List<Integer> arr) {
        List<Integer> result = new ArrayList<>();
        int smallestEven = Integer.MAX_VALUE;
        int smallestEvenIndex = -1;
        for (int i = 0; i < arr.size(); i++) {
            int current = arr.get(i);
            if (current % 2 == 0 && current < smallestEven) {
                smallestEven = current;
                smallestEvenIndex = i;
            }
        }
        if (smallestEvenIndex != -1) {
            result.add(smallestEven);
            result.add(smallestEvenIndex);
        }
        return result;
    }
}

// PluckTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pluck}.
* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.
*/
class PluckTest {

    @Test
    void testPluckWithEvenValues() {
        List<Integer> input = Arrays.asList(4, 2, 3);
        List<Integer> expected = Arrays.asList(2, 1);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithEvenValues2() {
        List<Integer> input = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(2, 1);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithEmptyList() {
        List<Integer> input = Collections.emptyList();
        List<Integer> expected = Collections.emptyList();
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithMultipleZeros() {
        List<Integer> input = Arrays.asList(5, 0, 3, 0, 4, 2);
        List<Integer> expected = Arrays.asList(0, 1);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithMultipleEvenValues() {
        List<Integer> input = Arrays.asList(1, 2, 3, 0, 5, 3);
        List<Integer> expected = Arrays.asList(0, 3);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithRepeatedEvenValues() {
        List<Integer> input = Arrays.asList(5, 4, 8, 4, 8);
        List<Integer> expected = Arrays.asList(4, 1);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithNoEvenValues() {
        List<Integer> input = Arrays.asList(7, 6, 7, 1);
        List<Integer> expected = Arrays.asList(6, 1);
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithNoEvenValues2() {
        List<Integer> input = Arrays.asList(7, 9, 7, 1);
        List<Integer> expected = Collections.emptyList();
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithMaxValues() {
        List<Integer> input = Collections.nCopies(10000, Integer.MAX_VALUE);
        List<Integer> expected = Collections.emptyList();
        assertEquals(expected, Pluck.pluck(input));
    }

    @Test
    void testPluckWithRandomValues() {
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> expected = Arrays.asList(2, 1);
        assertEquals(expected, Pluck.pluck(input));
    }
}"
chatcmpl-6yRFrV2hJH3e2d8KiNfrDrKVAsSM5,/HumanEvalJava/src/main/java/scenario3/id_87.java,63.95718693733215,stop,"// GetRow.java
package scenario3;

import java.util.List;

class GetRow {

    /**
     * * You are given a 2 dimensional data, as a nested lists,
     * which is similar to matrix, however, unlike matrices,
     * each row may contain a different number of columns.
     * Given lst, and integer x, find integers x in the list,
     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that
     * each tuple is a coordinate - (row, columns), starting with 0.
     * Sort coordinates initially by rows in ascending order.
     * Also, sort coordinates of the row by columns in descending order.
     *
     * Examples:
     * getRow([
     * [1,2,3,4,5,6],
     * [1,2,3,4,1,6],
     * [1,2,3,4,5,1]
     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
     * getRow([], 1) == []
     * getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]
     *
     * > getRow([], 1)
     * []
     * > getRow([[1]], 2)
     * []
     * > getRow([[], [1], [1, 2, 3]], 3)
     * [[2, 2]]
     */
    public static List<Object> getRow(List<Object> lst, int x) {
    }
}
","// GetRowTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRow}.
* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.
*/
class GetRowTest {","// GetRow.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class GetRow {

    /**
     * * You are given a 2 dimensional data, as a nested lists,
     * which is similar to matrix, however, unlike matrices,
     * each row may contain a different number of columns.
     * Given lst, and integer x, find integers x in the list,
     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that
     * each tuple is a coordinate - (row, columns), starting with 0.
     * Sort coordinates initially by rows in ascending order.
     * Also, sort coordinates of the row by columns in descending order.
     *
     * Examples:
     * getRow([
     * [1,2,3,4,5,6],
     * [1,2,3,4,1,6],
     * [1,2,3,4,5,1]
     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
     * getRow([], 1) == []
     * getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]
     *
     * > getRow([], 1)
     * []
     * > getRow([[1]], 2)
     * []
     * > getRow([[], [1], [1, 2, 3]], 3)
     * [[2, 2]]
     */
    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < lst.size(); i++) {
            List<Integer> row = lst.get(i);
            for (int j = 0; j < row.size(); j++) {
                if (row.get(j) == x) {
                    List<Integer> tuple = new ArrayList<>();
                    tuple.add(i);
                    tuple.add(j);
                    result.add(tuple);
                }
            }
        }
        result.sort((a, b) -> a.get(0) - b.get(0));
        for (List<Integer> row : result) {
            List<Integer> tuple = lst.get(row.get(0));
            tuple.sort((a, b) -> b - a);
        }
        return result;
    }
}

// GetRowTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRow}.
* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.
*/
class GetRowTest {

    @Test
    void testEmptyList() {
        List<List<Integer>> lst = new ArrayList<>();
        List<List<Integer>> result = GetRow.getRow(lst, 1);
        assertEquals(0, result.size());
    }

    @Test
    void testSingleElementList() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(1));
        List<List<Integer>> result = GetRow.getRow(lst, 2);
        assertEquals(0, result.size());
    }

    @Test
    void testListWithEmptyRow() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(new ArrayList<>());
        lst.add(Arrays.asList(1));
        lst.add(Arrays.asList(1, 2, 3));
        List<List<Integer>> result = GetRow.getRow(lst, 3);
        assertEquals(1, result.size());
        assertEquals(Arrays.asList(2, 2), result.get(0));
    }

    @Test
    void testListWithMultipleRows() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));
        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));
        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));
        List<List<Integer>> result = GetRow.getRow(lst, 1);
        assertEquals(5, result.size());
        assertEquals(Arrays.asList(0, 0), result.get(0));
        assertEquals(Arrays.asList(1, 4), result.get(1));
        assertEquals(Arrays.asList(1, 0), result.get(2));
        assertEquals(Arrays.asList(2, 5), result.get(3));
        assertEquals(Arrays.asList(2, 0), result.get(4));
    }

    @Test
    void testListWithRepeatedElements() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));
        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));
        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));
        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));
        List<List<Integer>> result = GetRow.getRow(lst, 1);
        assertEquals(8, result.size());
        assertEquals(Arrays.asList(0, 0), result.get(0));
        assertEquals(Arrays.asList(1, 4), result.get(1));
        assertEquals(Arrays.asList(1, 0), result.get(2));
        assertEquals(Arrays.asList(2, 5), result.get(3));
        assertEquals(Arrays.asList(2, 0), result.get(4));
        assertEquals(Arrays.asList(3, 4), result.get(5));
        assertEquals(Arrays.asList(3, 0), result.get(6));
        assertEquals(Arrays.asList(3, 4), result.get(7));
    }

    @Test
    void testListWithNegativeElements() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(-1, -2, -3, -4, -5, -6));
        lst.add(Arrays.asList(-1, -2, -3, -4, -1, -6));
        lst.add(Arrays.asList(-1, -2, -3, -4, -5, -1));
        List<List<Integer>> result = GetRow.getRow(lst, -1);
        assertEquals(3, result.size());
        assertEquals(Arrays.asList(0, 0), result.get(0));
        assertEquals(Arrays.asList(1, 4), result.get(1));
        assertEquals(Arrays.asList(2, 5), result.get(2));
    }

    @Test
    void testListWithZeroElements() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(0, 0, 0, 0, 0, 0));
        lst.add(Arrays.asList(0, 0, 0, 0, 1, 0));
        lst.add(Arrays.asList(0, 0, 0, 0, 0, 1));
        List<List<Integer>> result = GetRow.getRow(lst, 0);
        assertEquals(6, result.size());
        assertEquals(Arrays.asList(0, 5), result.get(0));
        assertEquals(Arrays.asList(0, 4), result.get(1));
        assertEquals(Arrays.asList(0, 3), result.get(2));
        assertEquals(Arrays.asList(0, 2), result.get(3));
        assertEquals(Arrays.asList(0, 1), result.get(4));
        assertEquals(Arrays.asList(0, 0), result.get(5));
    }

    @Test
    void testListWithMaxIntegerElements() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE));
        lst.add(Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE));
        lst.add(Arrays.asList(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE));
        List<List<Integer>> result = GetRow.getRow(lst, Integer.MAX_VALUE);
        assertEquals(3, result.size());
        assertEquals(Arrays.asList(0, 2), result.get(0));
        assertEquals(Arrays.asList(1, 3), result.get(1));
        assertEquals(Arrays.asList(2, 4), result.get(2));
    }

    @Test
    void testListWithMinIntegerElements() {
        List<List<Integer>> lst = new ArrayList<>();
        lst.add(Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE));
        lst.add(Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE));
        lst.add(Arrays.asList(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE));
        List<List<Integer>> result = GetRow.getRow(lst, Integer.MIN_VALUE);
        assertEquals(3, result.size());
        assertEquals(Arrays.asList(0, 2), result.get(0));
        assertEquals(Arrays.asList(1, 3), result.get(1));
        assertEquals(Arrays.asList(2, 4), result.get(2));
    }
}"
chatcmpl-6yRGtv0gCUb8BJMGia2fb72J9hPQi,/HumanEvalJava/src/main/java/scenario3/id_129.java,67.43843150138855,length,"// Minpath.java
package scenario3;

import java.util.List;

class Minpath {

    /**
     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k,
     * each cell of the grid contains a value. Every integer in the range [1, N * N]
     * inclusive appears exactly once on the cells of the grid.
     *
     * You have to find the minimum path of length k in the grid. You can start
     * from any cell, and in each step you can move to any of the neighbor cells,
     * in other words, you can go to cells which share an edge with you current
     * cell.
     * Please note that a path of length k means visiting exactly k cells (not
     * necessarily distinct).
     * You CANNOT go off the grid.
     * A path A (of length k) is considered less than a path B (of length k) if
     * after making the ordered lists of the values on the cells that A and B go
     * through (let's call them lst_A and lst_B), lst_A is lexicographically less
     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)
     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
     * lst_A[j] = lst_B[j].
     * It is guaranteed that the answer is unique.
     * Return an ordered list of the values on the cells that the minimum path go through.
     *
     * Examples:
     *
     * Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
     * Output: [1, 2, 1]
     *
     * Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
     * Output: [1]
     *
     * > minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
     * [1, 2, 1]
     * > minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
     * [1]
     * > minpath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)
     * [1, 2, 1, 2]
     * > minpath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)
     * [1, 10, 1, 10, 1, 10, 1]
     * > minpath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)
     * [1, 7, 1, 7, 1]
     * > minpath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1]
     * > minpath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
     * > minpath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)
     * [1, 3, 1, 3, 1, 3, 1, 3]
     * > minpath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)
     * [1, 5, 1, 5, 1, 5, 1, 5]
     * > minpath([[1, 2], [3, 4]], 10)
     * [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
     * > minpath([[1, 3], [3, 2]], 10)
     * [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
     */
    public static List<Integer> minpath(List<List<Integer>> grid, int k) {
    }
}
","// MinpathTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minpath}.
* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.
*/
class MinpathTest {","// Minpath.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Minpath {

    /**
     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k,
     * each cell of the grid contains a value. Every integer in the range [1, N * N]
     * inclusive appears exactly once on the cells of the grid.
     *
     * You have to find the minimum path of length k in the grid. You can start
     * from any cell, and in each step you can move to any of the neighbor cells,
     * in other words, you can go to cells which share an edge with you current
     * cell.
     * Please note that a path of length k means visiting exactly k cells (not
     * necessarily distinct).
     * You CANNOT go off the grid.
     * A path A (of length k) is considered less than a path B (of length k) if
     * after making the ordered lists of the values on the cells that A and B go
     * through (let's call them lst_A and lst_B), lst_A is lexicographically less
     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)
     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
     * lst_A[j] = lst_B[j].
     * It is guaranteed that the answer is unique.
     * Return an ordered list of the values on the cells that the minimum path go through.
     *
     * Examples:
     *
     * Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
     * Output: [1, 2, 1]
     *
     * Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
     * Output: [1]
     *
     * > minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
     * [1, 2, 1]
     * > minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
     * [1]
     * > minpath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)
     * [1, 2, 1, 2]
     * > minpath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)
     * [1, 10, 1, 10, 1, 10, 1]
     * > minpath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)
     * [1, 7, 1, 7, 1]
     * > minpath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1]
     * > minpath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
     * > minpath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)
     * [1, 3, 1, 3, 1, 3, 1, 3]
     * > minpath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)
     * [1, 5, 1, 5, 1, 5, 1, 5]
     * > minpath([[1, 2], [3, 4]], 10)
     * [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
     * > minpath([[1, 3], [3, 2]], 10)
     * [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
     */
    public static List<Integer> minpath(List<List<Integer>> grid, int k) {
        int n = grid.size();
        int[][] visited = new int[n][n];
        List<Integer> path = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dfs(grid, visited, path, i, j, k);
            }
        }
        return path;
    }

    private static void dfs(List<List<Integer>> grid, int[][] visited, List<Integer> path, int i, int j, int k) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid.size() || visited[i][j] == 1) {
            return;
        }
        visited[i][j] = 1;
        path.add(grid.get(i).get(j));
        if (path.size() == k) {
            return;
        }
        dfs(grid, visited, path, i + 1, j, k);
        dfs(grid, visited, path, i - 1, j, k);
        dfs(grid, visited, path, i, j + 1, k);
        dfs(grid, visited, path, i, j - 1, k);
        path.remove(path.size() - 1);
        visited[i][j] = 0;
    }
}

// MinpathTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minpath}.
* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.
*/
class MinpathTest {

    @Test
    void testMinpath1() {
        List<List<Integer>> grid = Arrays.asList(
                Arrays.asList(1, 2, 3),
                Arrays.asList(4, 5, 6),
                Arrays.asList(7, 8, 9)
        );
        List<Integer> expected = Arrays.asList(1, 2, 1);
        List<Integer> actual = Minpath.minpath(grid, 3);
        assertEquals(expected, actual);
    }

    @Test
    void testMinpath2() {
        List<List<Integer>> grid = Arrays.asList(
                Arrays.asList(5, 9, 3),
                Arrays.asList(4, 1, 6),
                Arrays.asList(7, 8, 2)
        );
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = Minpath.minpath(grid, 1);
        assertEquals(expected, actual);
    }

    @Test
    void testMinpath3() {
        List<List<Integer>> grid = Arrays.asList(
                Arrays.asList(1, 2, 3, 4),
                Arrays.asList(5, 6, 7, 8),
                Arrays.asList(9, 10, 11, 12),
                Arrays.asList(13, 14, 15, 16)
        );
        List<Integer> expected = Arrays.asList(1, 2, 1, 2);
        List<Integer> actual = Minpath.minpath(grid, 4);
        assertEquals(expected, actual);
    }

    @Test
    void testMinpath4() {
        List<List<Integer>> grid = Arrays.asList(
                Arrays.asList(6, 4, 13, 10),
                Arrays.asList(5, 7, 12, 1),
                Arrays.asList(3, 16, 11, 15),
                Arrays.asList(8, 14, 9, 2)
        );
        List<Integer> expected = Arrays.asList(1, 10, 1, 10, 1, 10, 1);
        List<Integer> actual = Minpath.minpath(grid, 7);
        assertEquals(expected, actual);
    }

    @Test
    void testMinpath5() {
        List<List<Integer"
chatcmpl-6yRHyZutTHCIqA7lNVjMlnO1yVfYc,/HumanEvalJava/src/main/java/scenario3/id_13.java,16.372644424438477,stop,"// GreatestCommonDivisor.java
package scenario3;

class GreatestCommonDivisor {

    /**
     * Return the greatest common divisor of two integers a and b.
     *
     * > greatestCommonDivisor(3, 5)
     * 1
     * > greatestCommonDivisor(25, 15)
     * 5
     * > greatestCommonDivisor(3, 7)
     * 1
     * > greatestCommonDivisor(10, 15)
     * 5
     * > greatestCommonDivisor(49, 14)
     * 7
     * > greatestCommonDivisor(144, 60)
     * 12
     */
    public static int greatestCommonDivisor(int a, int b) {
    }
}
","// GreatestCommonDivisorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {","// GreatestCommonDivisor.java
package scenario3;

class GreatestCommonDivisor {

    /**
     * Return the greatest common divisor of two integers a and b.
     *
     * > greatestCommonDivisor(3, 5)
     * 1
     * > greatestCommonDivisor(25, 15)
     * 5
     * > greatestCommonDivisor(3, 7)
     * 1
     * > greatestCommonDivisor(10, 15)
     * 5
     * > greatestCommonDivisor(49, 14)
     * 7
     * > greatestCommonDivisor(144, 60)
     * 12
     */
    public static int greatestCommonDivisor(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return greatestCommonDivisor(b, a % b);
        }
    }
}

// GreatestCommonDivisorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
    @Test
    void testGreatestCommonDivisor() {
        assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
        assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
        assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
        assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
        assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
        assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
        assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(1, 1));
        assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(1, 2));
        assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(2, 1));
        assertEquals(2, GreatestCommonDivisor.greatestCommonDivisor(2, 2));
    }
}"
chatcmpl-6yRJ1En0rFJi4wuF80VzG5weyyQCN,/HumanEvalJava/src/main/java/scenario3/id_44.java,23.139204025268555,stop,"// ChangeBase.java
package scenario3;

class ChangeBase {

    /**
     * Change numerical base of input number x to base.
     * return string representation after the conversion.
     * base numbers are less than 10.
     *
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(9, 3)
     * ""100""
     * > changeBase(234, 2)
     * ""11101010""
     * > changeBase(16, 2)
     * ""10000""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(2, 3)
     * ""2""
     * > changeBase(3, 4)
     * ""3""
     * > changeBase(4, 5)
     * ""4""
     * > changeBase(5, 6)
     * ""5""
     * > changeBase(6, 7)
     * ""6""
     * > changeBase(7, 8)
     * ""7""
     */
    public static String changeBase(int x, int base) {
    }
}
","// ChangeBaseTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {","// ChangeBase.java
package scenario3;

class ChangeBase {

    /**
     * Change numerical base of input number x to base.
     * return string representation after the conversion.
     * base numbers are less than 10.
     *
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(9, 3)
     * ""100""
     * > changeBase(234, 2)
     * ""11101010""
     * > changeBase(16, 2)
     * ""10000""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(2, 3)
     * ""2""
     * > changeBase(3, 4)
     * ""3""
     * > changeBase(4, 5)
     * ""4""
     * > changeBase(5, 6)
     * ""5""
     * > changeBase(6, 7)
     * ""6""
     * > changeBase(7, 8)
     * ""7""
     */
    public static String changeBase(int x, int base) {
        if (base < 2 || base > 9) {
            throw new IllegalArgumentException(""Base must be between 2 and 9"");
        }
        StringBuilder sb = new StringBuilder();
        while (x > 0) {
            sb.append(x % base);
            x /= base;
        }
        return sb.reverse().toString();
    }
}

// ChangeBaseTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
    @Test
    void testChangeBase() {
        assertEquals(""22"", ChangeBase.changeBase(8, 3));
        assertEquals(""1000"", ChangeBase.changeBase(8, 2));
        assertEquals(""111"", ChangeBase.changeBase(7, 2));
        assertEquals(""22"", ChangeBase.changeBase(8, 3));
        assertEquals(""100"", ChangeBase.changeBase(9, 3));
        assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
        assertEquals(""10000"", ChangeBase.changeBase(16, 2));
        assertEquals(""1000"", ChangeBase.changeBase(8, 2));
        assertEquals(""111"", ChangeBase.changeBase(7, 2));
        assertEquals(""2"", ChangeBase.changeBase(2, 3));
        assertEquals(""3"", ChangeBase.changeBase(3, 4));
        assertEquals(""4"", ChangeBase.changeBase(4, 5));
        assertEquals(""5"", ChangeBase.changeBase(5, 6));
        assertEquals(""6"", ChangeBase.changeBase(6, 7));
        assertEquals(""7"", ChangeBase.changeBase(7, 8));
    }
}"
chatcmpl-6yRK4cUl9tUbQ6QfOMb0M7TxoXdEx,/HumanEvalJava/src/main/java/scenario3/id_52.java,23.283734798431396,stop,"// BelowThreshold.java
package scenario3;

import java.util.List;

class BelowThreshold {

    /**
     * Return True if all numbers in the list l are below threshold t.
     *
     * > belowThreshold([1, 2, 4, 10], 100)
     * true
     * > belowThreshold([1, 20, 4, 10], 5)
     * false
     * > belowThreshold([1, 20, 4, 10], 21)
     * true
     * > belowThreshold([1, 20, 4, 10], 22)
     * true
     * > belowThreshold([1, 8, 4, 10], 11)
     * true
     * > belowThreshold([1, 8, 4, 10], 10)
     * false
     */
    public static Boolean belowThreshold(List<Integer> l, int t) {
    }
}
","// BelowThresholdTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {","// BelowThreshold.java
package scenario3;

import java.util.List;

class BelowThreshold {

    /**
     * Return True if all numbers in the list l are below threshold t.
     *
     * > belowThreshold([1, 2, 4, 10], 100)
     * true
     * > belowThreshold([1, 20, 4, 10], 5)
     * false
     * > belowThreshold([1, 20, 4, 10], 21)
     * true
     * > belowThreshold([1, 20, 4, 10], 22)
     * true
     * > belowThreshold([1, 8, 4, 10], 11)
     * true
     * > belowThreshold([1, 8, 4, 10], 10)
     * false
     */
    public static Boolean belowThreshold(List<Integer> l, int t) {
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) >= t) {
                return false;
            }
        }
        return true;
    }
}

// BelowThresholdTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
    @Test
    void testAllNumbersBelowThreshold() {
        List<Integer> l = Arrays.asList(1, 2, 4, 10);
        assertTrue(BelowThreshold.belowThreshold(l, 100));
    }

    @Test
    void testSomeNumbersAboveThreshold() {
        List<Integer> l = Arrays.asList(1, 20, 4, 10);
        assertFalse(BelowThreshold.belowThreshold(l, 5));
    }

    @Test
    void testAllNumbersAboveThreshold() {
        List<Integer> l = Arrays.asList(1, 20, 4, 10);
        assertTrue(BelowThreshold.belowThreshold(l, 21));
    }

    @Test
    void testAllNumbersAboveThresholdPlusOne() {
        List<Integer> l = Arrays.asList(1, 20, 4, 10);
        assertTrue(BelowThreshold.belowThreshold(l, 22));
    }

    @Test
    void testSomeNumbersAboveThreshold2() {
        List<Integer> l = Arrays.asList(1, 8, 4, 10);
        assertTrue(BelowThreshold.belowThreshold(l, 11));
    }

    @Test
    void testAllNumbersEqualToThreshold() {
        List<Integer> l = Arrays.asList(1, 8, 4, 10);
        assertFalse(BelowThreshold.belowThreshold(l, 10));
    }

    @Test
    void testEmptyList() {
        List<Integer> l = Arrays.asList();
        assertTrue(BelowThreshold.belowThreshold(l, 10));
    }

    @Test
    void testSingleNumberBelowThreshold() {
        List<Integer> l = Arrays.asList(5);
        assertTrue(BelowThreshold.belowThreshold(l, 10));
    }

    @Test
    void testSingleNumberAboveThreshold() {
        List<Integer> l = Arrays.asList(15);
        assertFalse(BelowThreshold.belowThreshold(l, 10));
    }

    @Test
    void testNullList() {
        List<Integer> l = null;
        assertThrows(NullPointerException.class, () -> {
            BelowThreshold.belowThreshold(l, 10);
        });
    }
}"
chatcmpl-6yRL7lkL8X0qUURn53mNp2QMXaOho,/HumanEvalJava/src/main/java/scenario3/id_53.java,66.39639902114868,length,"// Add.java
package scenario3;

class Add {

    /**
     * Add two numbers x and y
     *
     * > add(0, 1)
     * 1
     * > add(1, 0)
     * 1
     * > add(2, 3)
     * 5
     * > add(5, 7)
     * 12
     * > add(7, 5)
     * 12
     * > add(572, 725)
     * 1297
     * > add(51, 804)
     * 855
     * > add(645, 96)
     * 741
     * > add(712, 853)
     * 1565
     * > add(223, 101)
     * 324
     * > add(76, 29)
     * 105
     * > add(416, 149)
     * 565
     * > add(145, 409)
     * 554
     * > add(535, 430)
     * 965
     * > add(118, 303)
     * 421
     * > add(287, 94)
     * 381
     * > add(768, 257)
     * 1025
     * > add(421, 677)
     * 1098
     * > add(802, 814)
     * 1616
     * > add(510, 922)
     * 1432
     * > add(345, 819)
     * 1164
     * > add(895, 436)
     * 1331
     * > add(123, 424)
     * 547
     * > add(923, 245)
     * 1168
     * > add(23, 438)
     * 461
     * > add(565, 133)
     * 698
     * > add(945, 925)
     * 1870
     * > add(261, 983)
     * 1244
     * > add(139, 577)
     * 716
     * > add(763, 178)
     * 941
     * > add(147, 892)
     * 1039
     * > add(436, 402)
     * 838
     * > add(610, 581)
     * 1191
     * > add(103, 416)
     * 519
     * > add(339, 990)
     * 1329
     * > add(130, 504)
     * 634
     * > add(242, 717)
     * 959
     * > add(562, 110)
     * 672
     * > add(396, 909)
     * 1305
     * > add(887, 703)
     * 1590
     * > add(870, 551)
     * 1421
     * > add(422, 391)
     * 813
     * > add(299, 505)
     * 804
     * > add(346, 56)
     * 402
     * > add(36, 706)
     * 742
     * > add(738, 411)
     * 1149
     * > add(679, 87)
     * 766
     * > add(25, 303)
     * 328
     * > add(161, 612)
     * 773
     * > add(306, 841)
     * 1147
     * > add(973, 411)
     * 1384
     * > add(711, 157)
     * 868
     * > add(471, 27)
     * 498
     * > add(714, 792)
     * 1506
     * > add(38, 206)
     * 244
     * > add(907, 343)
     * 1250
     * > add(23, 760)
     * 783
     * > add(524, 859)
     * 1383
     * > add(30, 529)
     * 559
     * > add(341, 691)
     * 1032
     * > add(167, 729)
     * 896
     * > add(636, 289)
     * 925
     * > add(503, 144)
     * 647
     * > add(51, 985)
     * 1036
     * > add(287, 149)
     * 436
     * > add(659, 75)
     * 734
     * > add(462, 797)
     * 1259
     * > add(406, 141)
     * 547
     * > add(106, 44)
     * 150
     * > add(300, 934)
     * 1234
     * > add(471, 524)
     * 995
     * > add(122, 429)
     * 551
     * > add(735, 195)
     * 930
     * > add(335, 484)
     * 819
     * > add(28, 809)
     * 837
     * > add(430, 20)
     * 450
     * > add(916, 635)
     * 1551
     * > add(301, 999)
     * 1300
     * > add(454, 466)
     * 920
     * > add(905, 259)
     * 1164
     * > add(168, 205)
     * 373
     * > add(570, 434)
     * 1004
     * > add(64, 959)
     * 1023
     * > add(957, 510)
     * 1467
     * > add(722, 598)
     * 1320
     * > add(770, 226)
     * 996
     * > add(579, 66)
     * 645
     * > add(117, 674)
     * 791
     * > add(530, 30)
     * 560
     * > add(776, 345)
     * 1121
     * > add(327, 389)
     * 716
     * > add(596, 12)
     * 608
     * > add(599, 511)
     * 1110
     * > add(936, 476)
     * 1412
     * > add(461, 14)
     * 475
     * > add(966, 157)
     * 1123
     * > add(326, 91)
     * 417
     * > add(392, 455)
     * 847
     * > add(446, 477)
     * 923
     * > add(324, 860)
     * 1184
     * > add(945, 85)
     * 1030
     * > add(886, 582)
     * 1468
     * > add(886, 712)
     * 1598
     * > add(842, 953)
     * 1795
     */
    public static int add(int x, int y) {
    }
}
","// AddTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {","// Add.java
package scenario3;

class Add {

    /**
     * Add two numbers x and y
     *
     * > add(0, 1)
     * 1
     * > add(1, 0)
     * 1
     * > add(2, 3)
     * 5
     * > add(5, 7)
     * 12
     * > add(7, 5)
     * 12
     * > add(572, 725)
     * 1297
     * > add(51, 804)
     * 855
     * > add(645, 96)
     * 741
     * > add(712, 853)
     * 1565
     * > add(223, 101)
     * 324
     * > add(76, 29)
     * 105
     * > add(416, 149)
     * 565
     * > add(145, 409)
     * 554
     * > add(535, 430)
     * 965
     * > add(118, 303)
     * 421
     * > add(287, 94)
     * 381
     * > add(768, 257)
     * 1025
     * > add(421, 677)
     * 1098
     * > add(802, 814)
     * 1616
     * > add(510, 922)
     * 1432
     * > add(345, 819)
     * 1164
     * > add(895, 436)
     * 1331
     * > add(123, 424)
     * 547
     * > add(923, 245)
     * 1168
     * > add(23, 438)
     * 461
     * > add(565, 133)
     * 698
     * > add(945, 925)
     * 1870
     * > add(261, 983)
     * 1244
     * > add(139, 577)
     * 716
     * > add(763, 178)
     * 941
     * > add(147, 892)
     * 1039
     * > add(436, 402)
     * 838
     * > add(610, 581)
     * 1191
     * > add(103, 416)
     * 519
     * > add(339, 990)
     * 1329
     * > add(130, 504)
     * 634
     * > add(242, 717)
     * 959
     * > add(562, 110)
     * 672
     * > add(396, 909)
     * 1305
     * > add(887, 703)
     * 1590
     * > add(870, 551)
     * 1421
     * > add(422, 391)
     * 813
     * > add(299, 505)
     * 804
     * > add(346, 56)
     * 402
     * > add(36, 706)
     * 742
     * > add(738, 411)
     * 1149
     * > add(679, 87)
     * 766
     * > add(25, 303)
     * 328
     * > add(161, 612)
     * 773
     * > add(306, 841)
     * 1147
     * > add(973, 411)
     * 1384
     * > add(711, 157)
     * 868
     * > add(471, 27)
     * 498
     * > add(714, 792)
     * 1506
     * > add(38, 206)
     * 244
     * > add(907, 343)
     * 1250
     * > add(23, 760)
     * 783
     * > add(524, 859)
     * 1383
     * > add(30, 529)
     * 559
     * > add(341, 691)
     * 1032
     * > add(167, 729)
     * 896
     * > add(636, 289)
     * 925
     * > add(503, 144)
     * 647
     * > add(51, 985)
     * 1036
     * > add(287, 149)
     * 436
     * > add(659, 75)
     * 734
     * > add(462, 797)
     * 1259
     * > add(406, 141)
     * 547
     * > add(106, 44)
     * 150
     * > add(300, 934)
     * 1234
     * > add(471, 524)
     * 995
     * > add(122, 429)
     * 551
     * > add(735, 195)
     * 930
     * > add(335, 484)
     * 819
     * > add(28, 809)
     * 837
     * > add(430, 20)
     * 450
     * > add(916, 635)
     * 1551
     * > add(301, 999)
     * 1300
     * > add(454, 466)
     * 920
     * > add(905, 259)
     * 1164
     * > add(168, 205)
     * 373
     * > add(570, 434)
     * 1004
     * > add(64, 959)
     * 1023
     * > add(957, 510)
     * 1467
     * > add(722, 598)
     * 1320
     * > add(770, 226)
     * 996
     * > add(579, 66)
     * 645
     * > add(117, 674)
     * 791
     * > add(530, 30)
     * 560
     * > add(776, 345)
     * 1121
     * > add(327, 389)
     * 716
     * > add(596, 12)
     * 608
     * > add(599, 511)
     * 1110
     * > add(936, 476)
     * 1412
     * > add(461, 14)
     * 475
     * > add(966, 157)
     * 1123
     * > add(326, 91)
     * 417
     * > add(392, 455)
     * 847
     * > add(446, 477)
     * 923
     * > add(324, 860)
     * 1184
     * > add(945, 85)
     * 1030
     * > add(886, 582)
     * 1468
     * > add(886, 712)
     * 1598
     * > add(842, 953)
     * 1795
     */
    public static int add(int x, int y) {
        return x + y;
    }
}

// AddTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {
    @Test
    void testAddition() {
        assertEquals(1, Add.add(0, 1));
        assertEquals(1, Add.add(1, 0));
        assertEquals(5, Add.add(2, 3));
        assertEquals(12, Add.add(5, 7));
        assertEquals(12, Add.add(7, 5));
        assertEquals(1297, Add.add(572, 725));
        assertEquals(855, Add.add(51, 804));
        assertEquals(741, Add.add(645, 96));
        assertEquals(1565, Add.add(712, 853));
        assertEquals(324, Add.add(223, 101));
        assertEquals(105, Add.add(76, 29));
        assertEquals(565, Add.add(416, 149));
        assertEquals(554, Add.add(145, 409));
        assertEquals(965, Add.add(535, 430));
        assertEquals(421, Add.add(118, 303));
        assertEquals(381, Add.add(287, 94));
        assertEquals(1025, Add.add(768, 257));
        assertEquals(1098, Add.add(421, 677));
        assertEquals(1616, Add.add(802, 814));
        assertEquals(1432, Add.add(510, 922));
        assertEquals(1164, Add.add(345, 819));
       "
chatcmpl-6yRMCIqInozINjsU6IfzjNXY5L5I0,/HumanEvalJava/src/main/java/scenario3/id_45.java,28.69894766807556,stop,"// TriangleArea.java
package scenario3;

class TriangleArea {

    /**
     * Given length of a side and high return area for a triangle.
     *
     * > triangleArea(5, 3)
     * 7.5
     * > triangleArea(2, 2)
     * 2.0
     * > triangleArea(10, 8)
     * 40.0
     */
    public static Double triangleArea(int a, int h) {
    }
}
","// TriangleAreaTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {","// TriangleArea.java
package scenario3;

class TriangleArea {

    /**
     * Given length of a side and high return area for a triangle.
     *
     * > triangleArea(5, 3)
     * 7.5
     * > triangleArea(2, 2)
     * 2.0
     * > triangleArea(10, 8)
     * 40.0
     */
    public static Double triangleArea(int a, int h) {
        return (a * h) / 2.0;
    }
}

// TriangleAreaTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
    
    @Test
    void testTriangleArea() {
        assertEquals(7.5, TriangleArea.triangleArea(5, 3));
        assertEquals(2.0, TriangleArea.triangleArea(2, 2));
        assertEquals(40.0, TriangleArea.triangleArea(10, 8));
    }
    
    @Test
    void testTriangleAreaWithZero() {
        assertEquals(0.0, TriangleArea.triangleArea(0, 3));
        assertEquals(0.0, TriangleArea.triangleArea(5, 0));
        assertEquals(0.0, TriangleArea.triangleArea(0, 0));
    }
    
    @Test
    void testTriangleAreaWithNegativeValues() {
        assertEquals(-7.5, TriangleArea.triangleArea(-5, 3));
        assertEquals(-7.5, TriangleArea.triangleArea(5, -3));
        assertEquals(7.5, TriangleArea.triangleArea(-5, -3));
    }
    
    @Test
    void testTriangleAreaWithLargeValues() {
        assertEquals(500000000.0, TriangleArea.triangleArea(1000000000, 1));
        assertEquals(1000000000.0, TriangleArea.triangleArea(1000000000, 2));
        assertEquals(5000000000.0, TriangleArea.triangleArea(1000000000, 10));
    }
    
    @Test
    void testTriangleAreaWithDecimalValues() {
        assertEquals(3.75, TriangleArea.triangleArea(3, 2.5));
        assertEquals(1.5, TriangleArea.triangleArea(1, 3));
        assertEquals(0.5, TriangleArea.triangleArea(0.5, 2));
    }
    
    @Test
    void testTriangleAreaWithLargeDecimalValues() {
        assertEquals(500000000.0, TriangleArea.triangleArea(1000000000, 0.5));
        assertEquals(1000000000.0, TriangleArea.triangleArea(1000000000, 1.0));
        assertEquals(5000000000.0, TriangleArea.triangleArea(1000000000, 5.0));
    }
    
    @Test
    void testTriangleAreaWithMaxValues() {
        assertEquals(Double.MAX_VALUE, TriangleArea.triangleArea(Integer.MAX_VALUE, Integer.MAX_VALUE));
    }
    
    @Test
    void testTriangleAreaWithMinValues() {
        assertEquals(0.0, TriangleArea.triangleArea(Integer.MIN_VALUE, Integer.MIN_VALUE));
    }
    
    @Test
    void testTriangleAreaWithOneValueZero() {
        assertEquals(0.0, TriangleArea.triangleArea(0, 5));
        assertEquals(0.0, TriangleArea.triangleArea(5, 0));
    }
}"
chatcmpl-6yRNFuwChqBnamwYGkrBad4ikoccu,/HumanEvalJava/src/main/java/scenario3/id_12.java,24.795270681381226,stop,"// Longest.java
package scenario3;

import java.util.List;

class Longest {

    /**
     * Out of list of strings, return the longest one. Return the first one in case of multiple
     * strings of the same length. Return null in case the input list is empty.
     *
     * > longest([""a"", ""b"", ""c""])
     * ""a""
     * > longest([""a"", ""bb"", ""ccc""])
     * ""ccc""
     * > longest([])
     * null
     * > longest([""x"", ""y"", ""z""])
     * ""x""
     * > longest([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""])
     * ""zzzz""
     */
    public static String longest(List<Object> strings) {
    }
}
","// LongestTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {","// Longest.java
package scenario3;

import java.util.List;

class Longest {

    /**
     * Out of list of strings, return the longest one. Return the first one in case of multiple
     * strings of the same length. Return null in case the input list is empty.
     *
     * > longest([""a"", ""b"", ""c""])
     * ""a""
     * > longest([""a"", ""bb"", ""ccc""])
     * ""ccc""
     * > longest([])
     * null
     * > longest([""x"", ""y"", ""z""])
     * ""x""
     * > longest([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""])
     * ""zzzz""
     */
    public static String longest(List<String> strings) {
        if (strings.isEmpty()) {
            return null;
        }
        String longestString = strings.get(0);
        for (String s : strings) {
            if (s.length() > longestString.length()) {
                longestString = s;
            }
        }
        return longestString;
    }
}

// LongestTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {

    @Test
    void testLongestWithEmptyList() {
        List<String> strings = Collections.emptyList();
        assertNull(Longest.longest(strings));
    }

    @Test
    void testLongestWithSingleElementList() {
        List<String> strings = Collections.singletonList(""a"");
        assertEquals(""a"", Longest.longest(strings));
    }

    @Test
    void testLongestWithMultipleElementList() {
        List<String> strings = Arrays.asList(""a"", ""bb"", ""ccc"");
        assertEquals(""ccc"", Longest.longest(strings));
    }

    @Test
    void testLongestWithMultipleElementListAndEqualLength() {
        List<String> strings = Arrays.asList(""x"", ""y"", ""z"");
        assertEquals(""x"", Longest.longest(strings));
    }

    @Test
    void testLongestWithMultipleElementListAndEqualLength2() {
        List<String> strings = Arrays.asList(""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc"");
        assertEquals(""zzzz"", Longest.longest(strings));
    }

    @Test
    void testLongestWithNullElement() {
        List<String> strings = Arrays.asList(""a"", null, ""ccc"");
        assertEquals(""ccc"", Longest.longest(strings));
    }

    @Test
    void testLongestWithAllNullElements() {
        List<String> strings = Arrays.asList(null, null, null);
        assertNull(Longest.longest(strings));
    }

    @Test
    void testLongestWithEmptyString() {
        List<String> strings = Arrays.asList(""a"", """", ""ccc"");
        assertEquals(""ccc"", Longest.longest(strings));
    }

    @Test
    void testLongestWithWhitespaceString() {
        List<String> strings = Arrays.asList(""a"", ""  "", ""ccc"");
        assertEquals(""ccc"", Longest.longest(strings));
    }

    @Test
    void testLongestWithSpecialCharacters() {
        List<String> strings = Arrays.asList(""a"", ""bb"", ""c!c"");
        assertEquals(""c!c"", Longest.longest(strings));
    }
}"
chatcmpl-6yROIf9Ww2AeQondXtEsaZondaZRi,/HumanEvalJava/src/main/java/scenario3/id_128.java,32.890278577804565,stop,"// ProdSigns.java
package scenario3;

import java.util.List;

class ProdSigns {

    /**
     * * You are given an array arr of integers and you need to return
     * sum of magnitudes of integers multiplied by product of all signs
     * of each number in the array, represented by 1, -1 or 0.
     * Note: return null for empty arr.
     *
     * Example:
     * >>> prodSigns([1, 2, 2, -4]) == -9
     * >>> prodSigns([0, 1]) == 0
     * >>> prodSigns([]) == None
     *
     * > prodSigns([1, 2, 2, -4])
     * -9
     * > prodSigns([0, 1])
     * 0
     * > prodSigns([1, 1, 1, 2, 3, -1, 1])
     * -10
     * > prodSigns([])
     * null
     * > prodSigns([2, 4, 1, 2, -1, -1, 9])
     * 20
     * > prodSigns([-1, 1, -1, 1])
     * 4
     * > prodSigns([-1, 1, 1, 1])
     * -4
     * > prodSigns([-1, 1, 1, 0])
     * 0
     */
    public static Integer prodSigns(List<Object> arr) {
    }
}
","// ProdSignsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {","// ProdSigns.java
package scenario3;

import java.util.List;

class ProdSigns {

    /**
     * * You are given an array arr of integers and you need to return
     * sum of magnitudes of integers multiplied by product of all signs
     * of each number in the array, represented by 1, -1 or 0.
     * Note: return null for empty arr.
     *
     * Example:
     * >>> prodSigns([1, 2, 2, -4]) == -9
     * >>> prodSigns([0, 1]) == 0
     * >>> prodSigns([]) == None
     *
     * > prodSigns([1, 2, 2, -4])
     * -9
     * > prodSigns([0, 1])
     * 0
     * > prodSigns([1, 1, 1, 2, 3, -1, 1])
     * -10
     * > prodSigns([])
     * null
     * > prodSigns([2, 4, 1, 2, -1, -1, 9])
     * 20
     * > prodSigns([-1, 1, -1, 1])
     * 4
     * > prodSigns([-1, 1, 1, 1])
     * -4
     * > prodSigns([-1, 1, 1, 0])
     * 0
     */
    public static Integer prodSigns(List<Integer> arr) {
        if (arr.isEmpty()) {
            return null;
        }
        int product = 1;
        int sum = 0;
        for (int num : arr) {
            if (num > 0) {
                product *= 1;
                sum += num;
            } else if (num < 0) {
                product *= -1;
                sum += Math.abs(num);
            }
        }
        return product * sum;
    }
}

// ProdSignsTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {
    
    @Test
    void testEmptyList() {
        assertNull(ProdSigns.prodSigns(Collections.emptyList()));
    }
    
    @Test
    void testAllPositiveNumbers() {
        List<Integer> arr = Arrays.asList(1, 2, 2, 4);
        assertEquals(9, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testAllNegativeNumbers() {
        List<Integer> arr = Arrays.asList(-1, -2, -2, -4);
        assertEquals(-9, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testMixedNumbers() {
        List<Integer> arr = Arrays.asList(1, 1, 1, 2, 3, -1, 1);
        assertEquals(-10, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testZeroInList() {
        List<Integer> arr = Arrays.asList(0, 1);
        assertEquals(0, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testMultipleNegativeNumbers() {
        List<Integer> arr = Arrays.asList(2, 4, 1, 2, -1, -1, 9);
        assertEquals(20, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testEqualPositiveAndNegativeNumbers() {
        List<Integer> arr = Arrays.asList(-1, 1, -1, 1);
        assertEquals(4, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testMorePositiveNumbers() {
        List<Integer> arr = Arrays.asList(-1, 1, 1, 1);
        assertEquals(-4, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testZeroAndPositiveNumbers() {
        List<Integer> arr = Arrays.asList(-1, 1, 1, 0);
        assertEquals(0, ProdSigns.prodSigns(arr));
    }
    
    @Test
    void testSingleNumber() {
        List<Integer> arr = Arrays.asList(5);
        assertEquals(5, ProdSigns.prodSigns(arr));
    }
}"
chatcmpl-6yRPLIuLNcL0EMNBD6B6ppd2aJSxa,/HumanEvalJava/src/main/java/scenario3/id_69.java,67.50634813308716,length,"// Search.java
package scenario3;

import java.util.List;

class Search {

    /**
     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than
     * zero, and has a frequency greater than or equal to the value of the integer itself.
     * The frequency of an integer is the number of times it appears in the list.
     * If no such a value exist, return -1.
     * Examples:
     * search([4, 1, 2, 2, 3, 1]) == 2
     * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
     * search([5, 5, 4, 4, 4]) == -1
     *
     * > search([5, 5, 5, 5, 1])
     * 1
     * > search([4, 1, 4, 1, 4, 4])
     * 4
     * > search([3, 3])
     * -1
     * > search([8, 8, 8, 8, 8, 8, 8, 8])
     * 8
     * > search([2, 3, 3, 2, 2])
     * 2
     * > search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])
     * 1
     * > search([3, 2, 8, 2])
     * 2
     * > search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])
     * 1
     * > search([8, 8, 3, 6, 5, 6, 4])
     * -1
     * > search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])
     * 1
     * > search([1, 9, 10, 1, 3])
     * 1
     * > search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])
     * 5
     * > search([1])
     * 1
     * > search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])
     * 4
     * > search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])
     * 2
     * > search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])
     * 1
     * > search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])
     * 4
     * > search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])
     * 4
     * > search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])
     * 2
     * > search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])
     * -1
     * > search([10])
     * -1
     * > search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])
     * 2
     * > search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])
     * 1
     * > search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])
     * 1
     * > search([3, 10, 10, 9, 2])
     * -1
     */
    public static int search(List<Integer> lst) {
    }
}
","// SearchTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {","// Search.java
package scenario3;

import java.util.*;

class Search {

    /**
     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than
     * zero, and has a frequency greater than or equal to the value of the integer itself.
     * The frequency of an integer is the number of times it appears in the list.
     * If no such a value exist, return -1.
     * Examples:
     * search([4, 1, 2, 2, 3, 1]) == 2
     * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
     * search([5, 5, 4, 4, 4]) == -1
     *
     * > search([5, 5, 5, 5, 1])
     * 1
     * > search([4, 1, 4, 1, 4, 4])
     * 4
     * > search([3, 3])
     * -1
     * > search([8, 8, 8, 8, 8, 8, 8, 8])
     * 8
     * > search([2, 3, 3, 2, 2])
     * 2
     * > search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])
     * 1
     * > search([3, 2, 8, 2])
     * 2
     * > search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])
     * 1
     * > search([8, 8, 3, 6, 5, 6, 4])
     * -1
     * > search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])
     * 1
     * > search([1, 9, 10, 1, 3])
     * 1
     * > search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])
     * 5
     * > search([1])
     * 1
     * > search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])
     * 4
     * > search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])
     * 2
     * > search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])
     * 1
     * > search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])
     * 4
     * > search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])
     * 4
     * > search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])
     * 2
     * > search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])
     * -1
     * > search([10])
     * -1
     * > search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])
     * 2
     * > search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])
     * 1
     * > search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])
     * 1
     * > search([3, 10, 10, 9, 2])
     * -1
     */
    public static int search(List<Integer> lst) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }
        int maxNum = -1;
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            int num = entry.getKey();
            int freq = entry.getValue();
            if (num > freq && freq > maxNum) {
                maxNum = freq;
            }
        }
        return maxNum;
    }
}

// SearchTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {
    @Test
    void testSearch1() {
        List<Integer> lst = Arrays.asList(4, 1, 2, 2, 3, 1);
        int expected = 2;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch2() {
        List<Integer> lst = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);
        int expected = 3;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch3() {
        List<Integer> lst = Arrays.asList(5, 5, 4, 4, 4);
        int expected = -1;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch4() {
        List<Integer> lst = Arrays.asList(5, 5, 5, 5, 1);
        int expected = 1;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch5() {
        List<Integer> lst = Arrays.asList(4, 1, 4, 1, 4, 4);
        int expected = 4;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch6() {
        List<Integer> lst = Arrays.asList(3, 3);
        int expected = -1;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch7() {
        List<Integer> lst = Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8);
        int expected = 8;
        int actual = Search.search(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testSearch8() {
        List<Integer> lst = Arrays.asList(2, 3,"
chatcmpl-6yRQQYnsRhHKddvvdSpMRpG6xfGc7,/HumanEvalJava/src/main/java/scenario3/id_86.java,32.74789309501648,stop,"// AntiShuffle.java
package scenario3;

class AntiShuffle {

    /**
     * * Write a function that takes a string and returns an ordered version of it.
     * Ordered version of string, is a string where all words (separated by space)
     * are replaced by a new word where all the characters arranged in
     * ascending order based on ascii value.
     * Note: You should keep the order of words and blank spaces in the sentence.
     *
     * For example:
     * antiShuffle('Hi') returns 'Hi'
     * antiShuffle('hello') returns 'ehllo'
     * antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'
     *
     * > antiShuffle(""Hi"")
     * ""Hi""
     * > antiShuffle(""hello"")
     * ""ehllo""
     * > antiShuffle(""number"")
     * ""bemnru""
     * > antiShuffle(""abcd"")
     * ""abcd""
     * > antiShuffle(""Hello World!!!"")
     * ""Hello !!!Wdlor""
     * > antiShuffle("""")
     * """"
     * > antiShuffle(""Hi. My name is Mister Robot. How are you?"")
     * "".Hi My aemn is Meirst .Rboot How aer ?ouy""
     */
    public static String antiShuffle(String s) {
    }
}
","// AntiShuffleTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {","// AntiShuffle.java
package scenario3;

import java.util.Arrays;

class AntiShuffle {

    /**
     * * Write a function that takes a string and returns an ordered version of it.
     * Ordered version of string, is a string where all words (separated by space)
     * are replaced by a new word where all the characters arranged in
     * ascending order based on ascii value.
     * Note: You should keep the order of words and blank spaces in the sentence.
     *
     * For example:
     * antiShuffle('Hi') returns 'Hi'
     * antiShuffle('hello') returns 'ehllo'
     * antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'
     *
     * > antiShuffle(""Hi"")
     * ""Hi""
     * > antiShuffle(""hello"")
     * ""ehllo""
     * > antiShuffle(""number"")
     * ""bemnru""
     * > antiShuffle(""abcd"")
     * ""abcd""
     * > antiShuffle(""Hello World!!!"")
     * ""Hello !!!Wdlor""
     * > antiShuffle("""")
     * """"
     * > antiShuffle(""Hi. My name is Mister Robot. How are you?"")
     * "".Hi My aemn is Meirst .Rboot How aer ?ouy""
     */
    public static String antiShuffle(String s) {
        if (s == null || s.isEmpty()) {
            return s;
        }
        String[] words = s.split("" "");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            sb.append(chars);
            sb.append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }
}

// AntiShuffleTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {

    @Test
    void testEmptyString() {
        String s = """";
        String expected = """";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testSingleWord() {
        String s = ""Hi"";
        String expected = ""Hi"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testSingleWordSorted() {
        String s = ""hello"";
        String expected = ""ehllo"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleWords() {
        String s = ""Hi. My name is Mister Robot. How are you?"";
        String expected = "".Hi My aemn is Meirst .Rboot How aer ?ouy"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testAllCharactersSame() {
        String s = ""aaaaa"";
        String expected = ""aaaaa"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testAllCharactersDifferent() {
        String s = ""abcd"";
        String expected = ""abcd"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testSpecialCharacters() {
        String s = ""Hello World!!!"";
        String expected = ""Hello !!!Wdlor"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testLeadingAndTrailingSpaces() {
        String s = ""  Hello World!!!  "";
        String expected = ""  Hello !!!Wdlor  "";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testMultipleSpacesBetweenWords() {
        String s = ""Hello   World!!!"";
        String expected = ""Hello   !!!Wdlor"";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }

    @Test
    void testOnlySpaces() {
        String s = ""   "";
        String expected = ""   "";
        String actual = AntiShuffle.antiShuffle(s);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRRTCujtBiv5y2cwwcqHshAe1H7Q,/HumanEvalJava/src/main/java/scenario3/id_153.java,43.99980020523071,stop,"// StrongestExtension.java
package scenario3;

import java.util.List;

class StrongestExtension {

    /**
     * You will be given the name of a class (a string) and a list of extensions.
     * The extensions are to be used to load additional classes to the class. The
     * strength of the extension is as follows: Let CAP be the number of the uppercase
     * letters in the extension's name, and let SM be the number of lowercase letters
     * in the extension's name, the strength is given by the fraction CAP - SM.
     * You should find the strongest extension and return a string in this
     * format: ClassName.StrongestExtensionName.
     * If there are two or more extensions with the same strength, you should
     * choose the one that comes first in the list.
     * For example, if you are given ""Slices"" as the class and a list of the
     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
     * (its strength is -1).
     * Example:
     * for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
     *
     * > strongestExtension(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""])
     * ""Watashi.eIGHt8OKe""
     * > strongestExtension(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""])
     * ""Boku123.YEs.WeCaNe""
     * > strongestExtension(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""])
     * ""__YESIMHERE.NuLl__""
     * > strongestExtension(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""])
     * ""K.TAR""
     * > strongestExtension(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""])
     * ""__HAHA.123""
     * > strongestExtension(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""])
     * ""YameRore.okIWILL123""
     * > strongestExtension(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""])
     * ""finNNalLLly.WoW""
     * > strongestExtension(""_"", [""Bb"", ""91245""])
     * ""_.Bb""
     * > strongestExtension(""Sp"", [""671235"", ""Bb""])
     * ""Sp.671235""
     */
    public static String strongestExtension(String className, List<String> extensions) {
    }
}
","// StrongestExtensionTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {","// StrongestExtension.java
package scenario3;

import java.util.List;

class StrongestExtension {

    /**
     * You will be given the name of a class (a string) and a list of extensions.
     * The extensions are to be used to load additional classes to the class. The
     * strength of the extension is as follows: Let CAP be the number of the uppercase
     * letters in the extension's name, and let SM be the number of lowercase letters
     * in the extension's name, the strength is given by the fraction CAP - SM.
     * You should find the strongest extension and return a string in this
     * format: ClassName.StrongestExtensionName.
     * If there are two or more extensions with the same strength, you should
     * choose the one that comes first in the list.
     * For example, if you are given ""Slices"" as the class and a list of the
     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
     * (its strength is -1).
     * Example:
     * for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
     *
     * > strongestExtension(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""])
     * ""Watashi.eIGHt8OKe""
     * > strongestExtension(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""])
     * ""Boku123.YEs.WeCaNe""
     * > strongestExtension(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""])
     * ""__YESIMHERE.NuLl__""
     * > strongestExtension(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""])
     * ""K.TAR""
     * > strongestExtension(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""])
     * ""__HAHA.123""
     * > strongestExtension(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""])
     * ""YameRore.okIWILL123""
     * > strongestExtension(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""])
     * ""finNNalLLly.WoW""
     * > strongestExtension(""_"", [""Bb"", ""91245""])
     * ""_.Bb""
     * > strongestExtension(""Sp"", [""671235"", ""Bb""])
     * ""Sp.671235""
     */
    public static String strongestExtension(String className, List<String> extensions) {
        String strongestExtension = """";
        int strongestStrength = Integer.MIN_VALUE;
        for (String extension : extensions) {
            int capCount = 0;
            int smCount = 0;
            for (char c : extension.toCharArray()) {
                if (Character.isUpperCase(c)) {
                    capCount++;
                } else if (Character.isLowerCase(c)) {
                    smCount++;
                }
            }
            int strength = capCount - smCount;
            if (strength > strongestStrength) {
                strongestExtension = extension;
                strongestStrength = strength;
            }
        }
        return className + ""."" + strongestExtension;
    }
}

// StrongestExtensionTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {
    @Test
    void testStrongestExtension() {
        assertEquals(""my_class.AA"", StrongestExtension.strongestExtension(""my_class"", Arrays.asList(""AA"", ""Be"", ""CC"")));
        assertEquals(""Watashi.eIGHt8OKe"", StrongestExtension.strongestExtension(""Watashi"", Arrays.asList(""tEN"", ""niNE"", ""eIGHt8OKe"")));
        assertEquals(""Boku123.YEs.WeCaNe"", StrongestExtension.strongestExtension(""Boku123"", Arrays.asList(""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg"")));
        assertEquals(""__YESIMHERE.NuLl__"", StrongestExtension.strongestExtension(""__YESIMHERE"", Arrays.asList(""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321"")));
        assertEquals(""K.TAR"", StrongestExtension.strongestExtension(""K"", Arrays.asList(""Ta"", ""TAR"", ""t234An"", ""cosSo"")));
        assertEquals(""__HAHA.123"", StrongestExtension.strongestExtension(""__HAHA"", Arrays.asList(""Tab"", ""123"", ""781345"", ""-_-"")));
        assertEquals(""YameRore.okIWILL123"", StrongestExtension.strongestExtension(""YameRore"", Arrays.asList(""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-"")));
        assertEquals(""finNNalLLly.WoW"", StrongestExtension.strongestExtension(""finNNalLLly"", Arrays.asList(""Die"", ""NowW"", ""Wow"", ""WoW"")));
        assertEquals(""_.Bb"", StrongestExtension.strongestExtension(""_"", Arrays.asList(""Bb"", ""91245"")));
        assertEquals(""Sp.671235"", StrongestExtension.strongestExtension(""Sp"", Arrays.asList(""671235"", ""Bb"")));
    }
}"
chatcmpl-6yRSWLj9CvsGDf1bQaCi3jTrvTt5F,/HumanEvalJava/src/main/java/scenario3/id_104.java,32.927973985672,stop,"// UniqueDigits.java
package scenario3;

import java.util.List;

class UniqueDigits {

    /**
     * Given a list of positive integers x. return a sorted list of all
     * elements that hasn't any even digit.
     *
     * Note: Returned list should be sorted in increasing order.
     *
     * For example:
     * >>> uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * >>> uniqueDigits([152, 323, 1422, 10])
     * []
     *
     * > uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * > uniqueDigits([152, 323, 1422, 10])
     * []
     * > uniqueDigits([12345, 2033, 111, 151])
     * [111, 151]
     * > uniqueDigits([135, 103, 31])
     * [31, 135]
     */
    public static List<Object> uniqueDigits(List<Integer> x) {
    }
}
","// UniqueDigitsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {","// UniqueDigits.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class UniqueDigits {

    /**
     * Given a list of positive integers x. return a sorted list of all
     * elements that hasn't any even digit.
     *
     * Note: Returned list should be sorted in increasing order.
     *
     * For example:
     * >>> uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * >>> uniqueDigits([152, 323, 1422, 10])
     * []
     *
     * > uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * > uniqueDigits([152, 323, 1422, 10])
     * []
     * > uniqueDigits([12345, 2033, 111, 151])
     * [111, 151]
     * > uniqueDigits([135, 103, 31])
     * [31, 135]
     */
    public static List<Integer> uniqueDigits(List<Integer> x) {
        List<Integer> result = new ArrayList<>();
        for (int num : x) {
            boolean hasEvenDigit = false;
            int temp = num;
            while (temp > 0) {
                int digit = temp % 10;
                if (digit % 2 == 0) {
                    hasEvenDigit = true;
                    break;
                }
                temp /= 10;
            }
            if (!hasEvenDigit) {
                result.add(num);
            }
        }
        result.sort(null);
        return result;
    }
}

// UniqueDigitsTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {

    @Test
    void testUniqueDigits1() {
        List<Integer> input = Arrays.asList(15, 33, 1422, 1);
        List<Integer> expected = Arrays.asList(1, 15, 33);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits2() {
        List<Integer> input = Arrays.asList(152, 323, 1422, 10);
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits3() {
        List<Integer> input = Arrays.asList(12345, 2033, 111, 151);
        List<Integer> expected = Arrays.asList(111, 151);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits4() {
        List<Integer> input = Arrays.asList(135, 103, 31);
        List<Integer> expected = Arrays.asList(31, 135);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits5() {
        List<Integer> input = Arrays.asList(2, 4, 6, 8);
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits6() {
        List<Integer> input = Arrays.asList(1, 3, 5, 7, 9);
        List<Integer> expected = Arrays.asList(1, 3, 5, 7, 9);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits7() {
        List<Integer> input = Arrays.asList(10, 20, 30, 40, 50);
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits8() {
        List<Integer> input = Arrays.asList(11, 22, 33, 44, 55);
        List<Integer> expected = Arrays.asList(11, 33, 55);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits9() {
        List<Integer> input = Arrays.asList(123, 456, 789);
        List<Integer> expected = Arrays.asList(123, 789);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }

    @Test
    void testUniqueDigits10() {
        List<Integer> input = Arrays.asList(123456789);
        List<Integer> expected = Arrays.asList(123456789);
        List<Integer> actual = UniqueDigits.uniqueDigits(input);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRTZmnSo2UnGNZmmyaT1yJ8N10Cw,/HumanEvalJava/src/main/java/scenario3/id_28.java,21.84617304801941,stop,"// Concatenate.java
package scenario3;

import java.util.List;

class Concatenate {

    /**
     * Concatenate list of strings into a single string
     *
     * > concatenate([])
     * """"
     * > concatenate([""a"", ""b"", ""c""])
     * ""abc""
     * > concatenate([])
     * """"
     * > concatenate([""x"", ""y"", ""z""])
     * ""xyz""
     * > concatenate([""x"", ""y"", ""z"", ""w"", ""k""])
     * ""xyzwk""
     */
    public static String concatenate(List<Object> strings) {
    }
}
","// ConcatenateTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {","// Concatenate.java
package scenario3;

import java.util.List;

class Concatenate {

    /**
     * Concatenate list of strings into a single string
     *
     * > concatenate([])
     * """"
     * > concatenate([""a"", ""b"", ""c""])
     * ""abc""
     * > concatenate([])
     * """"
     * > concatenate([""x"", ""y"", ""z""])
     * ""xyz""
     * > concatenate([""x"", ""y"", ""z"", ""w"", ""k""])
     * ""xyzwk""
     */
    public static String concatenate(List<String> strings) {
        StringBuilder sb = new StringBuilder();
        for (String s : strings) {
            sb.append(s);
        }
        return sb.toString();
    }
}

// ConcatenateTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {

    @Test
    void testEmptyList() {
        List<String> strings = Collections.emptyList();
        String result = Concatenate.concatenate(strings);
        assertEquals("""", result);
    }

    @Test
    void testSingleElementList() {
        List<String> strings = Collections.singletonList(""a"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""a"", result);
    }

    @Test
    void testMultipleElementList() {
        List<String> strings = Arrays.asList(""a"", ""b"", ""c"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""abc"", result);
    }

    @Test
    void testListWithNullElement() {
        List<String> strings = Arrays.asList(""a"", null, ""c"");
        String result = Concatenate.concatenate(strings);
        assertNull(result);
    }

    @Test
    void testListWithEmptyStringElement() {
        List<String> strings = Arrays.asList(""a"", """", ""c"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""ac"", result);
    }

    @Test
    void testListWithWhitespaceStringElement() {
        List<String> strings = Arrays.asList(""a"", "" "", ""c"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""a c"", result);
    }

    @Test
    void testListWithNumbers() {
        List<String> strings = Arrays.asList(""1"", ""2"", ""3"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""123"", result);
    }

    @Test
    void testListWithSpecialCharacters() {
        List<String> strings = Arrays.asList(""!"", ""@"", ""#"");
        String result = Concatenate.concatenate(strings);
        assertEquals(""!@#"", result);
    }

    @Test
    void testListWithMixedTypes() {
        List<String> strings = Arrays.asList(""a"", ""1"", ""!"", null);
        String result = Concatenate.concatenate(strings);
        assertNull(result);
    }

    @Test
    void testListWithLargeNumberOfElements() {
        List<String> strings = Collections.nCopies(100000, ""a"");
        String result = Concatenate.concatenate(strings);
        assertEquals(100000, result.length());
    }
}"
chatcmpl-6yRUd81tqTgYsCktQRWxjShhIlXb5,/HumanEvalJava/src/main/java/scenario3/id_112.java,32.845667362213135,stop,"// ReverseDelete.java
package scenario3;

import java.util.List;

class ReverseDelete {

    /**
     * Task
     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
     * then check if the result string is palindrome.
     * A string is called palindrome if it reads the same backward as forward.
     * You should return a tuple containing the result string and True/False for the check.
     * Example
     * For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
     * For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
     * For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
     *
     * > reverseDelete(""abcde"", ""ae"")
     * [""bcd"", false]
     * > reverseDelete(""abcdef"", ""b"")
     * [""acdef"", false]
     * > reverseDelete(""abcdedcba"", ""ab"")
     * [""cdedc"", true]
     * > reverseDelete(""dwik"", ""w"")
     * [""dik"", false]
     * > reverseDelete(""a"", ""a"")
     * ["""", true]
     * > reverseDelete(""abcdedcba"", """")
     * [""abcdedcba"", true]
     * > reverseDelete(""abcdedcba"", ""v"")
     * [""abcdedcba"", true]
     * > reverseDelete(""vabba"", ""v"")
     * [""abba"", true]
     * > reverseDelete(""mamma"", ""mia"")
     * ["""", true]
     */
    public static List<Object> reverseDelete(String s, String c) {
    }
}
","// ReverseDeleteTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {","// ReverseDelete.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class ReverseDelete {

    /**
     * Task
     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
     * then check if the result string is palindrome.
     * A string is called palindrome if it reads the same backward as forward.
     * You should return a tuple containing the result string and True/False for the check.
     * Example
     * For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
     * For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
     * For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
     *
     * > reverseDelete(""abcde"", ""ae"")
     * [""bcd"", false]
     * > reverseDelete(""abcdef"", ""b"")
     * [""acdef"", false]
     * > reverseDelete(""abcdedcba"", ""ab"")
     * [""cdedc"", true]
     * > reverseDelete(""dwik"", ""w"")
     * [""dik"", false]
     * > reverseDelete(""a"", ""a"")
     * ["""", true]
     * > reverseDelete(""abcdedcba"", """")
     * [""abcdedcba"", true]
     * > reverseDelete(""abcdedcba"", ""v"")
     * [""abcdedcba"", true]
     * > reverseDelete(""vabba"", ""v"")
     * [""abba"", true]
     * > reverseDelete(""mamma"", ""mia"")
     * ["""", true]
     */
    public static List<Object> reverseDelete(String s, String c) {
        List<Object> result = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (c.indexOf(s.charAt(i)) == -1) {
                sb.append(s.charAt(i));
            }
        }
        String newString = sb.toString();
        boolean isPalindrome = true;
        for (int i = 0; i < newString.length() / 2; i++) {
            if (newString.charAt(i) != newString.charAt(newString.length() - i - 1)) {
                isPalindrome = false;
                break;
            }
        }
        result.add(newString);
        result.add(isPalindrome);
        return result;
    }
}

// ReverseDeleteTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {
    @Test
    void test1() {
        List<Object> result = ReverseDelete.reverseDelete(""abcde"", ""ae"");
        assertEquals(""bcd"", result.get(0));
        assertFalse((boolean) result.get(1));
    }

    @Test
    void test2() {
        List<Object> result = ReverseDelete.reverseDelete(""abcdef"", ""b"");
        assertEquals(""acdef"", result.get(0));
        assertFalse((boolean) result.get(1));
    }

    @Test
    void test3() {
        List<Object> result = ReverseDelete.reverseDelete(""abcdedcba"", ""ab"");
        assertEquals(""cdedc"", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test4() {
        List<Object> result = ReverseDelete.reverseDelete(""dwik"", ""w"");
        assertEquals(""dik"", result.get(0));
        assertFalse((boolean) result.get(1));
    }

    @Test
    void test5() {
        List<Object> result = ReverseDelete.reverseDelete(""a"", ""a"");
        assertEquals("""", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test6() {
        List<Object> result = ReverseDelete.reverseDelete(""abcdedcba"", """");
        assertEquals(""abcdedcba"", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test7() {
        List<Object> result = ReverseDelete.reverseDelete(""abcdedcba"", ""v"");
        assertEquals(""abcdedcba"", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test8() {
        List<Object> result = ReverseDelete.reverseDelete(""vabba"", ""v"");
        assertEquals(""abba"", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test9() {
        List<Object> result = ReverseDelete.reverseDelete(""mamma"", ""mia"");
        assertEquals("""", result.get(0));
        assertTrue((boolean) result.get(1));
    }

    @Test
    void test10() {
        List<Object> result = ReverseDelete.reverseDelete("""", """");
        assertEquals("""", result.get(0));
        assertTrue((boolean) result.get(1));
    }
}"
chatcmpl-6yRVgKLozpFq05g7cn3TultXnfw1F,/HumanEvalJava/src/main/java/scenario3/id_90.java,33.686582803726196,stop,"// NextSmallest.java
package scenario3;

import java.util.List;

class NextSmallest {

    /**
     * * You are given a list of integers.
     * Write a function next_smallest() that returns the 2nd smallest element of the list.
     * Return null if there is no such element.
     * Examples:
     * nextSmallest([1, 2, 3, 4, 5]) == 2
     * nextSmallest([5, 1, 4, 3, 2]) == 2
     * nextSmallest([]) == None
     * nextSmallest([1, 1]) == None
     *
     * > nextSmallest([1, 2, 3, 4, 5])
     * 2
     * > nextSmallest([5, 1, 4, 3, 2])
     * 2
     * > nextSmallest([])
     * null
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([1, 1, 1, 1, 0])
     * 1
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([-35, 34, 12, -45])
     * -35
     */
    public static Integer nextSmallest(List<Object> lst) {
    }
}
","// NextSmallestTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {","// NextSmallest.java
package scenario3;

import java.util.Collections;
import java.util.List;

class NextSmallest {

    /**
     * * You are given a list of integers.
     * Write a function next_smallest() that returns the 2nd smallest element of the list.
     * Return null if there is no such element.
     * Examples:
     * nextSmallest([1, 2, 3, 4, 5]) == 2
     * nextSmallest([5, 1, 4, 3, 2]) == 2
     * nextSmallest([]) == None
     * nextSmallest([1, 1]) == None
     *
     * > nextSmallest([1, 2, 3, 4, 5])
     * 2
     * > nextSmallest([5, 1, 4, 3, 2])
     * 2
     * > nextSmallest([])
     * null
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([1, 1, 1, 1, 0])
     * 1
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([-35, 34, 12, -45])
     * -35
     */
    public static Integer nextSmallest(List<Integer> lst) {
        if (lst == null || lst.size() < 2) {
            return null;
        }
        Collections.sort(lst);
        int smallest = lst.get(0);
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) != smallest) {
                return lst.get(i);
            }
        }
        return null;
    }
}

// NextSmallestTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {

    @Test
    void testNextSmallestWithValidInput() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(2, NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithValidInput2() {
        List<Integer> lst = Arrays.asList(5, 1, 4, 3, 2);
        assertEquals(2, NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithEmptyList() {
        List<Integer> lst = Collections.emptyList();
        assertNull(NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithSingleElementList() {
        List<Integer> lst = Collections.singletonList(1);
        assertNull(NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithDuplicateElements() {
        List<Integer> lst = Arrays.asList(1, 1, 1, 1, 0);
        assertEquals(1, NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithDuplicateElements2() {
        List<Integer> lst = Arrays.asList(1, 1);
        assertNull(NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithNegativeElements() {
        List<Integer> lst = Arrays.asList(-35, 34, 12, -45);
        assertEquals(-35, NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithNullInput() {
        assertNull(NextSmallest.nextSmallest(null));
    }

    @Test
    void testNextSmallestWithLargeList() {
        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
        assertEquals(2, NextSmallest.nextSmallest(lst));
    }

    @Test
    void testNextSmallestWithLargeList2() {
        List<Integer> lst = Arrays.asList(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);
        assertEquals(2, NextSmallest.nextSmallest(lst));
    }
}"
chatcmpl-6yRWj2XmM0oHZVSUuPJkPHh5Lsuz3,/HumanEvalJava/src/main/java/scenario3/id_145.java,56.39372968673706,stop,"// OrderByPoints.java
package scenario3;

import java.util.List;

class OrderByPoints {

    /**
     * * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     *
     * For example:
     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
     * >>> order_by_points([]) == []
     *
     * > orderByPoints([1, 11, -1, -11, -12])
     * [-1, -11, 1, -12, 11]
     * > orderByPoints([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])
     * [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
     * > orderByPoints([])
     * []
     * > orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])
     * [-3, -32, -98, -11, 1, 2, 43, 54]
     * > orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
     * [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
     * > orderByPoints([0, 6, 6, -76, -21, 23, 4])
     * [-76, -21, 0, 4, 23, 6, 6]
     */
    public static List<Object> orderByPoints(List<Object> nums) {
    }
}
","// OrderByPointsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {","// OrderByPoints.java
package scenario3;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class OrderByPoints {

    /**
     * * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     *
     * For example:
     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
     * >>> order_by_points([]) == []
     *
     * > orderByPoints([1, 11, -1, -11, -12])
     * [-1, -11, 1, -12, 11]
     * > orderByPoints([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])
     * [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
     * > orderByPoints([])
     * []
     * > orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])
     * [-3, -32, -98, -11, 1, 2, 43, 54]
     * > orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
     * [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
     * > orderByPoints([0, 6, 6, -76, -21, 23, 4])
     * [-76, -21, 0, 4, 23, 6, 6]
     */
    public static List<Integer> orderByPoints(List<Integer> nums) {
        Collections.sort(nums, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                int sum1 = 0, sum2 = 0;
                int num1 = Math.abs(o1), num2 = Math.abs(o2);
                while (num1 > 0) {
                    sum1 += num1 % 10;
                    num1 /= 10;
                }
                while (num2 > 0) {
                    sum2 += num2 % 10;
                    num2 /= 10;
                }
                if (sum1 == sum2) {
                    return nums.indexOf(o1) - nums.indexOf(o2);
                }
                return sum1 - sum2;
            }
        });
        return nums;
    }
}

// OrderByPointsTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {

    @Test
    void testOrderByPoints1() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12));
        List<Integer> expected = new ArrayList<>(Arrays.asList(-1, -11, 1, -12, 11));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints2() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46));
        List<Integer> expected = new ArrayList<>(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints3() {
        List<Integer> nums = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints4() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3));
        List<Integer> expected = new ArrayList<>(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints5() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints6() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4));
        List<Integer> expected = new ArrayList<>(Arrays.asList(-76, -21, 0, 4, 23, 6, 6));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints7() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(0, 0, 0, 0, 0));
        List<Integer> expected = new ArrayList<>(Arrays.asList(0, 0, 0, 0, 0));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints8() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints9() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5, -6, -7, -8, -9));
        List<Integer> expected = new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5, -6, -7, -8, -9));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }

    @Test
    void testOrderByPoints10() {
        List<Integer> nums = new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90));
        List<Integer> expected = new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90));
        assertEquals(expected, OrderByPoints.orderByPoints(nums));
    }
}"
chatcmpl-6yRXmiysWvY2pbmXovYWDpywrKXrD,/HumanEvalJava/src/main/java/scenario3/id_132.java,27.63431429862976,stop,"// IsNested.java
package scenario3;

class IsNested {

    /**
     * * Create a function that takes a string as input which contains only square brackets.
     * The function should return True if and only if there is a valid subsequence of brackets
     * where at least one bracket in the subsequence is nested.
     *
     * isNested('[[]]') ➞ True
     * isNested('[]]]]]]][[[[[]') ➞ False
     * isNested('[][]') ➞ False
     * isNested('[]') ➞ False
     * isNested('[[][]]') ➞ True
     * isNested('[[]][[') ➞ True
     *
     * > isNested(""[[]]"")
     * true
     * > isNested(""[]]]]]]][[[[[]"")
     * false
     * > isNested(""[][]"")
     * false
     * > isNested(""[]"")
     * false
     * > isNested(""[[[[]]]]"")
     * true
     * > isNested(""[]]]]]]]]]]"")
     * false
     * > isNested(""[][][[]]"")
     * true
     * > isNested(""[[]"")
     * false
     * > isNested(""[]]"")
     * false
     * > isNested(""[[]][["")
     * true
     * > isNested(""[[][]]"")
     * true
     * > isNested("""")
     * false
     * > isNested(""[[[[[[[["")
     * false
     * > isNested(""]]]]]]]]"")
     * false
     */
    public static Boolean isNested(String string) {
    }
}
","// IsNestedTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {","// IsNested.java
package scenario3;

import java.util.Stack;

class IsNested {

    /**
     * * Create a function that takes a string as input which contains only square brackets.
     * The function should return True if and only if there is a valid subsequence of brackets
     * where at least one bracket in the subsequence is nested.
     *
     * isNested('[[]]') ➞ True
     * isNested('[]]]]]]][[[[[]') ➞ False
     * isNested('[][]') ➞ False
     * isNested('[]') ➞ False
     * isNested('[[][]]') ➞ True
     * isNested('[[]][[') ➞ True
     *
     * > isNested(""[[]]"")
     * true
     * > isNested(""[]]]]]]][[[[[]"")
     * false
     * > isNested(""[][]"")
     * false
     * > isNested(""[]"")
     * false
     * > isNested(""[[[[]]]]"")
     * true
     * > isNested(""[]]]]]]]]]]"")
     * false
     * > isNested(""[][][[]]"")
     * true
     * > isNested(""[[]"")
     * false
     * > isNested(""[]]"")
     * false
     * > isNested(""[[]][["")
     * true
     * > isNested(""[[][]]"")
     * true
     * > isNested("""")
     * false
     * > isNested(""[[[[[[[["")
     * false
     * > isNested(""]]]]]]]]"")
     * false
     */
    public static Boolean isNested(String string) {
        Stack<Character> stack = new Stack<>();
        for (char c : string.toCharArray()) {
            if (c == '[') {
                stack.push(c);
            } else if (c == ']') {
                if (!stack.isEmpty() && stack.peek() == '[') {
                    stack.pop();
                    if (stack.size() > 0) {
                        return true;
                    }
                } else {
                    stack.push(c);
                }
            }
        }
        return false;
    }
}

// IsNestedTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {

    @Test
    void testIsNested1() {
        assertTrue(IsNested.isNested(""[[]]""));
    }

    @Test
    void testIsNested2() {
        assertFalse(IsNested.isNested(""[]]]]]]][[[[[]""));
    }

    @Test
    void testIsNested3() {
        assertFalse(IsNested.isNested(""[][]""));
    }

    @Test
    void testIsNested4() {
        assertFalse(IsNested.isNested(""[]""));
    }

    @Test
    void testIsNested5() {
        assertTrue(IsNested.isNested(""[[[[]]]]""));
    }

    @Test
    void testIsNested6() {
        assertFalse(IsNested.isNested(""[]]]]]]]]]]""));
    }

    @Test
    void testIsNested7() {
        assertTrue(IsNested.isNested(""[][][[]]""));
    }

    @Test
    void testIsNested8() {
        assertFalse(IsNested.isNested(""[[]""));
    }

    @Test
    void testIsNested9() {
        assertFalse(IsNested.isNested(""[]]""));
    }

    @Test
    void testIsNested10() {
        assertTrue(IsNested.isNested(""[[]][[""));
    }

    @Test
    void testIsNested11() {
        assertTrue(IsNested.isNested(""[[][]]""));
    }

    @Test
    void testIsNested12() {
        assertFalse(IsNested.isNested(""""));
    }

    @Test
    void testIsNested13() {
        assertFalse(IsNested.isNested(""[[[[[[[[""));
    }

    @Test
    void testIsNested14() {
        assertFalse(IsNested.isNested(""]]]]]]]]""));
    }
}"
chatcmpl-6yRYpraZIJHBGkheshPMTUiSz1L4Z,/HumanEvalJava/src/main/java/scenario3/id_49.java,20.57826852798462,stop,"// Modp.java
package scenario3;

class Modp {

    /**
     * Return 2^n modulo p (be aware of numerics).
     * >>> modp(3, 5)
     * 3
     * >>> modp(1101, 101)
     * 2
     * >>> modp(0, 101)
     * 1
     * >>> modp(3, 11)
     * 8
     * >>> modp(100, 101)
     * 1
     * > modp(3, 5)
     * 3
     * > modp(1101, 101)
     * 2
     * > modp(0, 101)
     * 1
     * > modp(3, 11)
     * 8
     * > modp(100, 101)
     * 1
     * > modp(30, 5)
     * 4
     * > modp(31, 5)
     * 3
     */
    public static int modp(int n, int p) {
    }
}
","// ModpTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {","// Modp.java
package scenario3;

class Modp {

    /**
     * Return 2^n modulo p (be aware of numerics).
     * >>> modp(3, 5)
     * 3
     * >>> modp(1101, 101)
     * 2
     * >>> modp(0, 101)
     * 1
     * >>> modp(3, 11)
     * 8
     * >>> modp(100, 101)
     * 1
     * > modp(3, 5)
     * 3
     * > modp(1101, 101)
     * 2
     * > modp(0, 101)
     * 1
     * > modp(3, 11)
     * 8
     * > modp(100, 101)
     * 1
     * > modp(30, 5)
     * 4
     * > modp(31, 5)
     * 3
     */
    public static int modp(int n, int p) {
        if (p == 1) {
            return 0;
        }
        int result = 1;
        n = n % p;
        while (p > 0) {
            if ((p & 1) == 1) {
                result = (result * n) % p;
            }
            p = p >> 1;
            n = (n * n) % p;
        }
        return result;
    }
}

// ModpTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {
    @Test
    void testModp1() {
        assertEquals(3, Modp.modp(3, 5));
    }

    @Test
    void testModp2() {
        assertEquals(2, Modp.modp(1101, 101));
    }

    @Test
    void testModp3() {
        assertEquals(1, Modp.modp(0, 101));
    }

    @Test
    void testModp4() {
        assertEquals(8, Modp.modp(3, 11));
    }

    @Test
    void testModp5() {
        assertEquals(1, Modp.modp(100, 101));
    }

    @Test
    void testModp6() {
        assertEquals(4, Modp.modp(30, 5));
    }

    @Test
    void testModp7() {
        assertEquals(3, Modp.modp(31, 5));
    }

    @Test
    void testModp8() {
        assertEquals(0, Modp.modp(0, 1));
    }

    @Test
    void testModp9() {
        assertEquals(0, Modp.modp(0, 2));
    }

    @Test
    void testModp10() {
        assertEquals(0, Modp.modp(0, 3));
    }
}"
chatcmpl-6yRZsRuJ0X8NW1Za1MlSgUzxXrSzB,/HumanEvalJava/src/main/java/scenario3/id_124.java,37.696478605270386,stop,"// ValidDate.java
package scenario3;

class ValidDate {

    /**
     * You have to write a function which validates a given date string and
     * returns True if the date is valid otherwise False.
     * The date is valid if all of the following rules are satisfied:
     * 1. The date string is not empty.
     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
     * 3. The months should not be less than 1 or higher than 12.
     * 4. The date should be in the format: mm-dd-yyyy
     *
     * for example:
     * validDate('03-11-2000') => True
     *
     * validDate('15-01-2012') => False
     *
     * validDate('04-0-2040') => False
     *
     * validDate('06-04-2020') => True
     *
     * validDate('06/04/2020') => False
     *
     * > validDate(""03-11-2000"")
     * true
     * > validDate(""15-01-2012"")
     * false
     * > validDate(""04-0-2040"")
     * false
     * > validDate(""06-04-2020"")
     * true
     * > validDate(""01-01-2007"")
     * true
     * > validDate(""03-32-2011"")
     * false
     * > validDate("""")
     * false
     * > validDate(""04-31-3000"")
     * false
     * > validDate(""06-06-2005"")
     * true
     * > validDate(""21-31-2000"")
     * false
     * > validDate(""04-12-2003"")
     * true
     * > validDate(""04122003"")
     * false
     * > validDate(""20030412"")
     * false
     * > validDate(""2003-04"")
     * false
     * > validDate(""2003-04-12"")
     * false
     * > validDate(""04-2003"")
     * false
     */
    public static Boolean validDate(String date) {
    }
}
","// ValidDateTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {","// ValidDate.java
package scenario3;

class ValidDate {

    /**
     * You have to write a function which validates a given date string and
     * returns True if the date is valid otherwise False.
     * The date is valid if all of the following rules are satisfied:
     * 1. The date string is not empty.
     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
     * 3. The months should not be less than 1 or higher than 12.
     * 4. The date should be in the format: mm-dd-yyyy
     *
     * for example:
     * validDate('03-11-2000') => True
     *
     * validDate('15-01-2012') => False
     *
     * validDate('04-0-2040') => False
     *
     * validDate('06-04-2020') => True
     *
     * validDate('06/04/2020') => False
     *
     * > validDate(""03-11-2000"")
     * true
     * > validDate(""15-01-2012"")
     * false
     * > validDate(""04-0-2040"")
     * false
     * > validDate(""06-04-2020"")
     * true
     * > validDate(""01-01-2007"")
     * true
     * > validDate(""03-32-2011"")
     * false
     * > validDate("""")
     * false
     * > validDate(""04-31-3000"")
     * false
     * > validDate(""06-06-2005"")
     * true
     * > validDate(""21-31-2000"")
     * false
     * > validDate(""04-12-2003"")
     * true
     * > validDate(""04122003"")
     * false
     * > validDate(""20030412"")
     * false
     * > validDate(""2003-04"")
     * false
     * > validDate(""2003-04-12"")
     * false
     * > validDate(""04-2003"")
     * false
     */
    public static Boolean validDate(String date) {
        if (date == null || date.isEmpty()) {
            return false;
        }
        String[] dateParts = date.split(""-"");
        if (dateParts.length != 3) {
            return false;
        }
        int month, day, year;
        try {
            month = Integer.parseInt(dateParts[0]);
            day = Integer.parseInt(dateParts[1]);
            year = Integer.parseInt(dateParts[2]);
        } catch (NumberFormatException e) {
            return false;
        }
        if (month < 1 || month > 12) {
            return false;
        }
        if (day < 1 || day > 31) {
            return false;
        }
        if (month == 2) {
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
                if (day > 29) {
                    return false;
                }
            } else {
                if (day > 28) {
                    return false;
                }
            }
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            if (day > 30) {
                return false;
            }
        }
        return true;
    }
}

// ValidDateTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
    @Test
    void testValidDate() {
        assertTrue(ValidDate.validDate(""03-11-2000""));
        assertFalse(ValidDate.validDate(""15-01-2012""));
        assertFalse(ValidDate.validDate(""04-0-2040""));
        assertTrue(ValidDate.validDate(""06-04-2020""));
        assertTrue(ValidDate.validDate(""01-01-2007""));
        assertFalse(ValidDate.validDate(""03-32-2011""));
        assertFalse(ValidDate.validDate(""""));
        assertFalse(ValidDate.validDate(""04-31-3000""));
        assertTrue(ValidDate.validDate(""06-06-2005""));
        assertFalse(ValidDate.validDate(""21-31-2000""));
        assertTrue(ValidDate.validDate(""04-12-2003""));
        assertFalse(ValidDate.validDate(""04122003""));
        assertFalse(ValidDate.validDate(""20030412""));
        assertFalse(ValidDate.validDate(""2003-04""));
        assertFalse(ValidDate.validDate(""2003-04-12""));
        assertFalse(ValidDate.validDate(""04-2003""));
    }
}"
chatcmpl-6yRavbzxDgGgSViTguCq4XSqoWO72,/HumanEvalJava/src/main/java/scenario3/id_1.java,63.23716998100281,length,"// SeparateParenGroups.java
package scenario3;

import java.util.List;

class SeparateParenGroups {

    /**
     * Input to this function is a string containing multiple groups of nested parentheses.
     * Your goal is to separate those group into separate strings and return the list of those.
     * Separate groups are balanced (each open brace is properly closed) and not nested within each other.
     * Ignore any spaces in the input string.
     *
     * > separateParenGroups(""(()()) ((())) () ((())()())"")
     * [""(()())"", ""((()))"", ""()"", ""((())()())""]
     * > separateParenGroups(""() (()) ((())) (((())))"")
     * [""()"", ""(())"", ""((()))"", ""(((())))""]
     * > separateParenGroups(""(()(())((())))"")
     * [""(()(())((())))""]
     * > separateParenGroups(""( ) (( )) (( )( ))"")
     * [""()"", ""(())"", ""(()())""]
     */
    public static List<String> separateParenGroups(String parenString) {
    }
}
","// SeparateParenGroupsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {","// SeparateParenGroups.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class SeparateParenGroups {

    /**
     * Input to this function is a string containing multiple groups of nested parentheses.
     * Your goal is to separate those group into separate strings and return the list of those.
     * Separate groups are balanced (each open brace is properly closed) and not nested within each other.
     * Ignore any spaces in the input string.
     *
     * > separateParenGroups(""(()()) ((())) () ((())()())"")
     * [""(()())"", ""((()))"", ""()"", ""((())()())""]
     * > separateParenGroups(""() (()) ((())) (((())))"")
     * [""()"", ""(())"", ""((()))"", ""(((())))""]
     * > separateParenGroups(""(()(())((())))"")
     * [""(()(())((())))""]
     * > separateParenGroups(""( ) (( )) (( )( ))"")
     * [""()"", ""(())"", ""(()())""]
     */
    public static List<String> separateParenGroups(String parenString) {
        List<String> result = new ArrayList<>();
        int start = 0;
        int end = 0;
        int count = 0;
        for (int i = 0; i < parenString.length(); i++) {
            char c = parenString.charAt(i);
            if (c == '(') {
                count++;
            } else if (c == ')') {
                count--;
            }
            if (count == 0) {
                end = i;
                result.add(parenString.substring(start, end + 1).replaceAll(""\\s+"", """"));
                start = i + 1;
            }
        }
        return result;
    }
}

// SeparateParenGroupsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {

    @Test
    void testSeparateParenGroups1() {
        List<String> result = SeparateParenGroups.separateParenGroups(""(()()) ((())) () ((())()())"");
        List<String> expected = List.of(""(()())"", ""((()))"", ""()"", ""((())()())"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups2() {
        List<String> result = SeparateParenGroups.separateParenGroups(""() (()) ((())) (((())))"");
        List<String> expected = List.of(""()"", ""(())"", ""((()))"", ""(((())))"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups3() {
        List<String> result = SeparateParenGroups.separateParenGroups(""(()(())((())))"");
        List<String> expected = List.of(""(()(())((())))"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups4() {
        List<String> result = SeparateParenGroups.separateParenGroups(""( ) (( )) (( )( ))"");
        List<String> expected = List.of(""()"", ""(())"", ""(()())"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups5() {
        List<String> result = SeparateParenGroups.separateParenGroups(""()()()()()()()()()()"");
        List<String> expected = List.of(""()"", ""()"", ""()"", ""()"", ""()"", ""()"", ""()"", ""()"", ""()"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups6() {
        List<String> result = SeparateParenGroups.separateParenGroups(""((((((())))))))"");
        List<String> expected = List.of(""((((((())))))))"");
        assertEquals(expected, result);
    }

    @Test
    void testSeparateParenGroups7() {
        List<String> result = SeparateParenGroups.separateParenGroups
chatcmpl-6yRbwmDd39jpLU3StfTkbAvpGNiyd,/HumanEvalJava/src/main/java/scenario3/id_65.java,20.217453241348267,stop,"// CircularShift.java
package scenario3;

class CircularShift {

    /**
     * Circular shift the digits of the integer x, shift the digits right by shift
     * and return the result as a string.
     * If shift > number of digits, return digits reversed.
     *
     * > circularShift(100, 2)
     * ""001""
     * > circularShift(12, 2)
     * ""12""
     * > circularShift(97, 8)
     * ""79""
     * > circularShift(12, 1)
     * ""21""
     * > circularShift(11, 101)
     * ""11""
     */
    public static String circularShift(int x, int shift) {
    }
}
","// CircularShiftTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {","// CircularShift.java
package scenario3;

class CircularShift {

    /**
     * Circular shift the digits of the integer x, shift the digits right by shift
     * and return the result as a string.
     * If shift > number of digits, return digits reversed.
     *
     * > circularShift(100, 2)
     * ""001""
     * > circularShift(12, 2)
     * ""12""
     * > circularShift(97, 8)
     * ""79""
     * > circularShift(12, 1)
     * ""21""
     * > circularShift(11, 101)
     * ""11""
     */
    public static String circularShift(int x, int shift) {
        String str = Integer.toString(x);
        int len = str.length();
        if (shift > len) {
            StringBuilder sb = new StringBuilder(str);
            sb.reverse();
            return sb.toString();
        }
        shift = shift % len;
        String shiftedStr = str.substring(len - shift) + str.substring(0, len - shift);
        return shiftedStr;
    }
}

// CircularShiftTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {
    @Test
    void testCircularShift1() {
        assertEquals(""001"", CircularShift.circularShift(100, 2));
    }

    @Test
    void testCircularShift2() {
        assertEquals(""12"", CircularShift.circularShift(12, 2));
    }

    @Test
    void testCircularShift3() {
        assertEquals(""79"", CircularShift.circularShift(97, 8));
    }

    @Test
    void testCircularShift4() {
        assertEquals(""21"", CircularShift.circularShift(12, 1));
    }

    @Test
    void testCircularShift5() {
        assertEquals(""11"", CircularShift.circularShift(11, 101));
    }

    @Test
    void testCircularShift6() {
        assertEquals(""12345"", CircularShift.circularShift(12345, 0));
    }

    @Test
    void testCircularShift7() {
        assertEquals(""12345"", CircularShift.circularShift(12345, 5));
    }

    @Test
    void testCircularShift8() {
        assertEquals(""54321"", CircularShift.circularShift(12345, 10));
    }

    @Test
    void testCircularShift9() {
        assertEquals(""54321"", CircularShift.circularShift(12345, 15));
    }

    @Test
    void testCircularShift10() {
        assertEquals(""12345"", CircularShift.circularShift(12345, 20));
    }
}"
chatcmpl-6yRczcmPJk6S1tWgyAt2RmOh62yvR,/HumanEvalJava/src/main/java/scenario3/id_108.java,32.689821004867554,stop,"// CountNums.java
package scenario3;

import java.util.List;

class CountNums {

    /**
     * * Write a function count_nums which takes an array of integers and returns
     * the number of elements which has a sum of digits > 0.
     * If a number is negative, then its first signed digit will be negative:
     * e.g. -123 has signed digits -1, 2, and 3.
     * >>> countNums([]) == 0
     * >>> countNums([-1, 11, -11]) == 1
     * >>> countNums([1, 1, 2]) == 3
     *
     * > countNums([])
     * 0
     * > countNums([-1, -2, 0])
     * 0
     * > countNums([1, 1, 2, -2, 3, 4, 5])
     * 6
     * > countNums([1, 6, 9, -6, 0, 1, 5])
     * 5
     * > countNums([1, 100, 98, -7, 1, -1])
     * 4
     * > countNums([12, 23, 34, -45, -56, 0])
     * 5
     * > countNums([0, 1])
     * 1
     * > countNums([1])
     * 1
     */
    public static int countNums(List<Object> arr) {
    }
}
","// CountNumsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {","// CountNums.java
package scenario3;

import java.util.List;

class CountNums {

    /**
     * * Write a function count_nums which takes an array of integers and returns
     * the number of elements which has a sum of digits > 0.
     * If a number is negative, then its first signed digit will be negative:
     * e.g. -123 has signed digits -1, 2, and 3.
     * >>> countNums([]) == 0
     * >>> countNums([-1, 11, -11]) == 1
     * >>> countNums([1, 1, 2]) == 3
     *
     * > countNums([])
     * 0
     * > countNums([-1, -2, 0])
     * 0
     * > countNums([1, 1, 2, -2, 3, 4, 5])
     * 6
     * > countNums([1, 6, 9, -6, 0, 1, 5])
     * 5
     * > countNums([1, 100, 98, -7, 1, -1])
     * 4
     * > countNums([12, 23, 34, -45, -56, 0])
     * 5
     * > countNums([0, 1])
     * 1
     * > countNums([1])
     * 1
     */
    public static int countNums(List<Integer> arr) {
        int count = 0;
        for (int num : arr) {
            int sum = 0;
            int temp = num;
            while (temp != 0) {
                sum += temp % 10;
                temp /= 10;
            }
            if (num < 0) {
                sum *= -1;
            }
            if (sum != 0) {
                count++;
            }
        }
        return count;
    }
}

// CountNumsTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {
    
    @Test
    void testEmptyList() {
        List<Integer> arr = Arrays.asList();
        assertEquals(0, CountNums.countNums(arr));
    }
    
    @Test
    void testAllZeros() {
        List<Integer> arr = Arrays.asList(0, 0, 0);
        assertEquals(0, CountNums.countNums(arr));
    }
    
    @Test
    void testAllNegatives() {
        List<Integer> arr = Arrays.asList(-1, -2, -3);
        assertEquals(0, CountNums.countNums(arr));
    }
    
    @Test
    void testMixedNumbers() {
        List<Integer> arr = Arrays.asList(1, 1, 2, -2, 3, 4, 5);
        assertEquals(6, CountNums.countNums(arr));
    }
    
    @Test
    void testMixedNumbersWithZeros() {
        List<Integer> arr = Arrays.asList(1, 6, 9, -6, 0, 1, 5);
        assertEquals(5, CountNums.countNums(arr));
    }
    
    @Test
    void testMixedNumbersWithNegatives() {
        List<Integer> arr = Arrays.asList(1, 100, 98, -7, 1, -1);
        assertEquals(4, CountNums.countNums(arr));
    }
    
    @Test
    void testMixedNumbersWithNegativesAndZeros() {
        List<Integer> arr = Arrays.asList(12, 23, 34, -45, -56, 0);
        assertEquals(5, CountNums.countNums(arr));
    }
    
    @Test
    void testSinglePositiveNumber() {
        List<Integer> arr = Arrays.asList(1);
        assertEquals(1, CountNums.countNums(arr));
    }
    
    @Test
    void testSingleNegativeNumber() {
        List<Integer> arr = Arrays.asList(-1);
        assertEquals(1, CountNums.countNums(arr));
    }
    
    @Test
    void testMixedNumbersWithSingleZero() {
        List<Integer> arr = Arrays.asList(0, 1);
        assertEquals(1, CountNums.countNums(arr));
    }
}"
chatcmpl-6yRe2x1B2BC7PH60o5NKWp85BTyq7,/HumanEvalJava/src/main/java/scenario3/id_24.java,20.76099944114685,stop,"// LargestDivisor.java
package scenario3;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
    }
}
","// LargestDivisorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {","// Here's an implementation of the largestDivisor method and the test cases for it.

// LargestDivisor.java
package scenario3;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}

// LargestDivisorTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {

    @Test
    void testLargestDivisorFor15() {
        assertEquals(5, LargestDivisor.largestDivisor(15));
    }

    @Test
    void testLargestDivisorFor3() {
        assertEquals(1, LargestDivisor.largestDivisor(3));
    }

    @Test
    void testLargestDivisorFor7() {
        assertEquals(1, LargestDivisor.largestDivisor(7));
    }

    @Test
    void testLargestDivisorFor10() {
        assertEquals(5, LargestDivisor.largestDivisor(10));
    }

    @Test
    void testLargestDivisorFor100() {
        assertEquals(50, LargestDivisor.largestDivisor(100));
    }

    @Test
    void testLargestDivisorFor49() {
        assertEquals(7, LargestDivisor.largestDivisor(49));
    }

    @Test
    void testLargestDivisorFor1() {
        assertEquals(1, LargestDivisor.largestDivisor(1));
    }

    @Test
    void testLargestDivisorForNegativeNumber() {
        assertEquals(1, LargestDivisor.largestDivisor(-10));
    }

    @Test
    void testLargestDivisorForZero() {
        assertEquals(1, LargestDivisor.largestDivisor(0));
    }

    @Test
    void testLargestDivisorForLargeNumber() {
        assertEquals(999999989, LargestDivisor.largestDivisor(999999990));
    }
}"
chatcmpl-6yRf5juMTT6B10N5hV4Lt5RKuT3hg,/HumanEvalJava/src/main/java/scenario3/id_149.java,40.35188007354736,stop,"// SortedListSum.java
package scenario3;

import java.util.List;

class SortedListSum {

    /**
     * Write a function that accepts a list of strings as a parameter,
     * deletes the strings that have odd lengths from it,
     * and returns the resulted list with a sorted order,
     * The list is always a list of strings and never an array of numbers,
     * and it may contain duplicates.
     * The order of the list should be ascending by length of each word, and you
     * should return the list sorted by that rule.
     * If two words have the same length, sort the list alphabetically.
     * The function should return a list of strings in sorted order.
     * You may assume that all words will have the same length.
     * For example:
     * assert sortedListSum([""aa"", ""a"", ""aaa""]) => [""aa""]
     * assert sortedListSum([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
     *
     * > sortedListSum([""aa"", ""a"", ""aaa""])
     * [""aa""]
     * > sortedListSum([""school"", ""AI"", ""asdf"", ""b""])
     * [""AI"", ""asdf"", ""school""]
     * > sortedListSum([""d"", ""b"", ""c"", ""a""])
     * []
     * > sortedListSum([""d"", ""dcba"", ""abcd"", ""a""])
     * [""abcd"", ""dcba""]
     * > sortedListSum([""AI"", ""ai"", ""au""])
     * [""AI"", ""ai"", ""au""]
     * > sortedListSum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""])
     * []
     * > sortedListSum([""aaaa"", ""bbbb"", ""dd"", ""cc""])
     * [""cc"", ""dd"", ""aaaa"", ""bbbb""]
     */
    public static List<Object> sortedListSum(List<String> lst) {
    }
}
","// SortedListSumTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {","// SortedListSum.java
package scenario3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortedListSum {

    /**
     * Write a function that accepts a list of strings as a parameter,
     * deletes the strings that have odd lengths from it,
     * and returns the resulted list with a sorted order,
     * The list is always a list of strings and never an array of numbers,
     * and it may contain duplicates.
     * The order of the list should be ascending by length of each word, and you
     * should return the list sorted by that rule.
     * If two words have the same length, sort the list alphabetically.
     * The function should return a list of strings in sorted order.
     * You may assume that all words will have the same length.
     * For example:
     * assert sortedListSum([""aa"", ""a"", ""aaa""]) => [""aa""]
     * assert sortedListSum([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
     *
     * > sortedListSum([""aa"", ""a"", ""aaa""])
     * [""aa""]
     * > sortedListSum([""school"", ""AI"", ""asdf"", ""b""])
     * [""AI"", ""asdf"", ""school""]
     * > sortedListSum([""d"", ""b"", ""c"", ""a""])
     * []
     * > sortedListSum([""d"", ""dcba"", ""abcd"", ""a""])
     * [""abcd"", ""dcba""]
     * > sortedListSum([""AI"", ""ai"", ""au""])
     * [""AI"", ""ai"", ""au""]
     * > sortedListSum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""])
     * []
     * > sortedListSum([""aaaa"", ""bbbb"", ""dd"", ""cc""])
     * [""cc"", ""dd"", ""aaaa"", ""bbbb""]
     */
    public static List<String> sortedListSum(List<String> lst) {
        List<String> result = new ArrayList<>();
        for (String s : lst) {
            if (s.length() % 2 == 0) {
                result.add(s);
            }
        }
        Collections.sort(result, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                if (s1.length() == s2.length()) {
                    return s1.compareTo(s2);
                } else {
                    return s1.length() - s2.length();
                }
            }
        });
        return result;
    }
}

// SortedListSumTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {
    @Test
    void testEmptyList() {
        List<String> lst = Arrays.asList();
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(0, result.size());
    }

    @Test
    void testNoEvenLengthStrings() {
        List<String> lst = Arrays.asList(""a"", ""bb"", ""ccc"", ""dddd"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(0, result.size());
    }

    @Test
    void testOneEvenLengthString() {
        List<String> lst = Arrays.asList(""aa"", ""a"", ""aaa"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(1, result.size());
        assertEquals(""aa"", result.get(0));
    }

    @Test
    void testMultipleEvenLengthStrings() {
        List<String> lst = Arrays.asList(""ab"", ""a"", ""aaa"", ""cd"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(2, result.size());
        assertEquals(""ab"", result.get(0));
        assertEquals(""cd"", result.get(1));
    }

    @Test
    void testSameLengthDifferentStrings() {
        List<String> lst = Arrays.asList(""d"", ""dcba"", ""abcd"", ""a"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(2, result.size());
        assertEquals(""abcd"", result.get(0));
        assertEquals(""dcba"", result.get(1));
    }

    @Test
    void testSameLengthSameStrings() {
        List<String> lst = Arrays.asList(""AI"", ""ai"", ""au"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(3, result.size());
        assertEquals(""AI"", result.get(0));
        assertEquals(""ai"", result.get(1));
        assertEquals(""au"", result.get(2));
    }

    @Test
    void testDuplicateStrings() {
        List<String> lst = Arrays.asList(""a"", ""b"", ""b"", ""c"", ""c"", ""a"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(0, result.size());
    }

    @Test
    void testLongerStrings() {
        List<String> lst = Arrays.asList(""aaaa"", ""bbbb"", ""dd"", ""cc"");
        List<String> result = SortedListSum.sortedListSum(lst);
        assertEquals(4, result.size());
        assertEquals(""cc"", result.get(0));
        assertEquals(""dd"", result.get(1));
        assertEquals(""aaaa"", result.get(2));
        assertEquals(""bbbb"", result.get(3));
    }
}"
chatcmpl-6yRg8VZ2FQCHIaWpMb8USKQ6yF4o4,/HumanEvalJava/src/main/java/scenario3/id_73.java,38.23798727989197,stop,"// SmallestChange.java
package scenario3;

import java.util.List;

class SmallestChange {

    /**
     * * Given an array arr of integers, find the minimum number of elements that
     * need to be changed to make the array palindromic. A palindromic array is an array that
     * is read the same backwards and forwards. In one change, you can change one element to any other element.
     *
     * For example:
     * smallest_change([1,2,3,5,4,7,9,6]) == 4
     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
     * smallest_change([1, 2, 3, 2, 1]) == 0
     *
     * > smallestChange([1, 2, 3, 5, 4, 7, 9, 6])
     * 4
     * > smallestChange([1, 2, 3, 4, 3, 2, 2])
     * 1
     * > smallestChange([1, 4, 2])
     * 1
     * > smallestChange([1, 4, 4, 2])
     * 1
     * > smallestChange([1, 2, 3, 2, 1])
     * 0
     * > smallestChange([3, 1, 1, 3])
     * 0
     * > smallestChange([1])
     * 0
     * > smallestChange([0, 1])
     * 1
     */
    public static int smallestChange(List<Integer> arr) {
    }
}
","// SmallestChangeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {","// SmallestChange.java
package scenario3;

import java.util.List;

class SmallestChange {

    /**
     * * Given an array arr of integers, find the minimum number of elements that
     * need to be changed to make the array palindromic. A palindromic array is an array that
     * is read the same backwards and forwards. In one change, you can change one element to any other element.
     *
     * For example:
     * smallest_change([1,2,3,5,4,7,9,6]) == 4
     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
     * smallest_change([1, 2, 3, 2, 1]) == 0
     *
     * > smallestChange([1, 2, 3, 5, 4, 7, 9, 6])
     * 4
     * > smallestChange([1, 2, 3, 4, 3, 2, 2])
     * 1
     * > smallestChange([1, 4, 2])
     * 1
     * > smallestChange([1, 4, 4, 2])
     * 1
     * > smallestChange([1, 2, 3, 2, 1])
     * 0
     * > smallestChange([3, 1, 1, 3])
     * 0
     * > smallestChange([1])
     * 0
     * > smallestChange([0, 1])
     * 1
     */
    public static int smallestChange(List<Integer> arr) {
        int count = 0;
        int i = 0;
        int j = arr.size() - 1;
        while (i < j) {
            if (arr.get(i).equals(arr.get(j))) {
                i++;
                j--;
            } else if (arr.get(i) < arr.get(j)) {
                arr.set(i + 1, arr.get(i) + arr.get(i + 1));
                i++;
                count++;
            } else {
                arr.set(j - 1, arr.get(j) + arr.get(j - 1));
                j--;
                count++;
            }
        }
        return count;
    }
}

// SmallestChangeTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {
    @Test
    void testSmallestChange1() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);
        int expected = 4;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange2() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 4, 3, 2, 2);
        int expected = 1;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange3() {
        List<Integer> arr = Arrays.asList(1, 4, 2);
        int expected = 1;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange4() {
        List<Integer> arr = Arrays.asList(1, 4, 4, 2);
        int expected = 1;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange5() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 2, 1);
        int expected = 0;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange6() {
        List<Integer> arr = Arrays.asList(3, 1, 1, 3);
        int expected = 0;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange7() {
        List<Integer> arr = Arrays.asList(1);
        int expected = 0;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange8() {
        List<Integer> arr = Arrays.asList(0, 1);
        int expected = 1;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange9() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        int expected = 9;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }

    @Test
    void testSmallestChange10() {
        List<Integer> arr = Arrays.asList(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);
        int expected = 9;
        int actual = SmallestChange.smallestChange(arr);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRhBDZSK9ucC9wPCcHvTW3Wfla77,/HumanEvalJava/src/main/java/scenario3/id_142.java,51.29067325592041,stop,"// SumSquares1.java
package scenario3;

import java.util.List;

class SumSquares1 {

    /**
     * ""
     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
     *
     * Examples:
     * For lst = [1,2,3] the output should be 6
     * For lst = []  the output should be 0
     * For lst = [-1,-5,2,-1,-5]  the output should be -126
     *
     * > sumSquares([1, 2, 3])
     * 6
     * > sumSquares([1, 4, 9])
     * 14
     * > sumSquares([])
     * 0
     * > sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1])
     * 9
     * > sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1])
     * -3
     * > sumSquares([0])
     * 0
     * > sumSquares([-1, -5, 2, -1, -5])
     * -126
     * > sumSquares([-56, -99, 1, 0, -2])
     * 3030
     * > sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1])
     * 0
     * > sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])
     * -14196
     * > sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])
     * -1448
     */
    public static int sumSquares(List<Object> lst) {
    }
}
","// SumSquares1Test.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {","// SumSquares1.java
package scenario3;

import java.util.List;

class SumSquares1 {

    /**
     * ""
     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
     *
     * Examples:
     * For lst = [1,2,3] the output should be 6
     * For lst = []  the output should be 0
     * For lst = [-1,-5,2,-1,-5]  the output should be -126
     *
     * > sumSquares([1, 2, 3])
     * 6
     * > sumSquares([1, 4, 9])
     * 14
     * > sumSquares([])
     * 0
     * > sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1])
     * 9
     * > sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1])
     * -3
     * > sumSquares([0])
     * 0
     * > sumSquares([-1, -5, 2, -1, -5])
     * -126
     * > sumSquares([-56, -99, 1, 0, -2])
     * 3030
     * > sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1])
     * 0
     * > sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])
     * -14196
     * > sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])
     * -1448
     */
    public static int sumSquares(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 3 == 0) {
                sum += lst.get(i) * lst.get(i);
            } else if (i % 4 == 0 && i % 3 != 0) {
                sum += lst.get(i) * lst.get(i) * lst.get(i);
            } else {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}

// SumSquares1Test.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {
    
    @Test
    void testSumSquares1() {
        List<Integer> lst = Arrays.asList(1, 2, 3);
        int expected = 6;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares2() {
        List<Integer> lst = Collections.emptyList();
        int expected = 0;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares3() {
        List<Integer> lst = Arrays.asList(-1, -5, 2, -1, -5);
        int expected = -126;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares4() {
        List<Integer> lst = Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 1);
        int expected = 9;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares5() {
        List<Integer> lst = Arrays.asList(-1, -1, -1, -1, -1, -1, -1, -1, -1);
        int expected = -3;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares6() {
        List<Integer> lst = Arrays.asList(0);
        int expected = 0;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares7() {
        List<Integer> lst = Arrays.asList(-56, -99, 1, 0, -2);
        int expected = 3030;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares8() {
        List<Integer> lst = Arrays.asList(-1, 0, 0, 0, 0, 0, 0, 0, -1);
        int expected = 0;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares9() {
        List<Integer> lst = Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37);
        int expected = -14196;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSumSquares10() {
        List<Integer> lst = Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10);
        int expected = -1448;
        int actual = SumSquares1.sumSquares(lst);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRiEpjpoB7X4WC8RIZFvLCdryZSM,/HumanEvalJava/src/main/java/scenario3/id_78.java,30.18497323989868,stop,"// HexKey.java
package scenario3;

class HexKey {

    /**
     * You have been tasked to write a function that receives
     * a hexadecimal number as a string and counts the number of hexadecimal
     * digits that are primes (prime number, or a prime, is a natural number
     * greater than 1 that is not a product of two smaller natural numbers).
     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
     * So you have to determine a number of the following digits: 2, 3, 5, 7,
     * B (=decimal 11), D (=decimal 13).
     * Note: you may assume the input is always correct or empty string,
     * and symbols A,B,C,D,E,F are always uppercase.
     * Examples:
     * For num = ""AB"" the output should be 1.
     * For num = ""1077E"" the output should be 2.
     * For num = ""ABED1A33"" the output should be 4.
     * For num = ""123456789ABCDEF0"" the output should be 6.
     * For num = ""2020"" the output should be 2.
     *
     * > hexKey(""AB"")
     * 1
     * > hexKey(""1077E"")
     * 2
     * > hexKey(""ABED1A33"")
     * 4
     * > hexKey(""2020"")
     * 2
     * > hexKey(""123456789ABCDEF0"")
     * 6
     * > hexKey(""112233445566778899AABBCCDDEEFF00"")
     * 12
     * > hexKey([])
     * 0
     */
    public static int hexKey(Object num) {
    }
}
","// HexKeyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {","// HexKey.java
package scenario3;

import java.util.HashSet;
import java.util.Set;

class HexKey {

    /**
     * You have been tasked to write a function that receives
     * a hexadecimal number as a string and counts the number of hexadecimal
     * digits that are primes (prime number, or a prime, is a natural number
     * greater than 1 that is not a product of two smaller natural numbers).
     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
     * So you have to determine a number of the following digits: 2, 3, 5, 7,
     * B (=decimal 11), D (=decimal 13).
     * Note: you may assume the input is always correct or empty string,
     * and symbols A,B,C,D,E,F are always uppercase.
     * Examples:
     * For num = ""AB"" the output should be 1.
     * For num = ""1077E"" the output should be 2.
     * For num = ""ABED1A33"" the output should be 4.
     * For num = ""123456789ABCDEF0"" the output should be 6.
     * For num = ""2020"" the output should be 2.
     *
     * > hexKey(""AB"")
     * 1
     * > hexKey(""1077E"")
     * 2
     * > hexKey(""ABED1A33"")
     * 4
     * > hexKey(""2020"")
     * 2
     * > hexKey(""123456789ABCDEF0"")
     * 6
     * > hexKey(""112233445566778899AABBCCDDEEFF00"")
     * 12
     * > hexKey([])
     * 0
     */
    public static int hexKey(Object num) {
        if (num == null || !(num instanceof String)) {
            return 0;
        }
        String hexNum = (String) num;
        Set<Character> primes = new HashSet<>();
        primes.add('2');
        primes.add('3');
        primes.add('5');
        primes.add('7');
        primes.add('B');
        primes.add('D');
        int count = 0;
        for (int i = 0; i < hexNum.length(); i++) {
            if (primes.contains(hexNum.charAt(i))) {
                count++;
            }
        }
        return count;
    }
}

// HexKeyTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
    @Test
    void testEmptyString() {
        assertEquals(0, HexKey.hexKey(""""));
    }

    @Test
    void testNullInput() {
        assertEquals(0, HexKey.hexKey(null));
    }

    @Test
    void testInvalidInput() {
        assertEquals(0, HexKey.hexKey(123));
    }

    @Test
    void testSinglePrime() {
        assertEquals(1, HexKey.hexKey(""B""));
    }

    @Test
    void testMultiplePrimes() {
        assertEquals(2, HexKey.hexKey(""1077E""));
    }

    @Test
    void testAllPrimes() {
        assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
    }

    @Test
    void testNoPrimes() {
        assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
    }

    @Test
    void testMixedInput() {
        assertEquals(4, HexKey.hexKey(""ABED1A33""));
    }

    @Test
    void testRepeatedPrimes() {
        assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
    }
}"
chatcmpl-6yRjHjC2IFmCf0LEcnLybWkKM5g3Y,/HumanEvalJava/src/main/java/scenario3/id_97.java,15.242253541946411,stop,"// Multiply.java
package scenario3;

class Multiply {

    /**
     * Complete the function that takes two integers and returns
     * the product of their unit digits.
     * Assume the input is always valid.
     * Examples:
     * multiply(148, 412) should return 16.
     * multiply(19, 28) should return 72.
     * multiply(2020, 1851) should return 0.
     * multiply(14,-15) should return 20.
     *
     * > multiply(148, 412)
     * 16
     * > multiply(19, 28)
     * 72
     * > multiply(2020, 1851)
     * 0
     * > multiply(14, -15)
     * 20
     * > multiply(76, 67)
     * 42
     * > multiply(17, 27)
     * 49
     * > multiply(0, 1)
     * 0
     * > multiply(0, 0)
     * 0
     */
    public static int multiply(int a, int b) {
    }
}
","// MultiplyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {","// Multiply.java
package scenario3;

class Multiply {

    /**
     * Complete the function that takes two integers and returns
     * the product of their unit digits.
     * Assume the input is always valid.
     * Examples:
     * multiply(148, 412) should return 16.
     * multiply(19, 28) should return 72.
     * multiply(2020, 1851) should return 0.
     * multiply(14,-15) should return 20.
     *
     * > multiply(148, 412)
     * 16
     * > multiply(19, 28)
     * 72
     * > multiply(2020, 1851)
     * 0
     * > multiply(14, -15)
     * 20
     * > multiply(76, 67)
     * 42
     * > multiply(17, 27)
     * 49
     * > multiply(0, 1)
     * 0
     * > multiply(0, 0)
     * 0
     */
    public static int multiply(int a, int b) {
        int unitA = Math.abs(a) % 10;
        int unitB = Math.abs(b) % 10;
        return unitA * unitB;
    }
}

// MultiplyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
    @Test
    void testMultiplyPositiveNumbers() {
        assertEquals(16, Multiply.multiply(148, 412));
        assertEquals(72, Multiply.multiply(19, 28));
        assertEquals(42, Multiply.multiply(76, 67));
        assertEquals(49, Multiply.multiply(17, 27));
    }

    @Test
    void testMultiplyNegativeNumbers() {
        assertEquals(20, Multiply.multiply(14, -15));
    }

    @Test
    void testMultiplyZero() {
        assertEquals(0, Multiply.multiply(2020, 1851));
        assertEquals(0, Multiply.multiply(0, 1));
        assertEquals(0, Multiply.multiply(0, 0));
    }
}"
chatcmpl-6yRkKlGtXESHLumy5uiAWL9xOT9m2,/HumanEvalJava/src/main/java/scenario3/id_115.java,57.86359906196594,stop,"// MaxFill.java
package scenario3;

import java.util.List;

class MaxFill {

    /**
     * * You are given a rectangular grid of wells. Each row represents a single well,
     * and each 1 in a row represents a single unit of water.
     * Each well has a corresponding bucket that can be used to extract water from it,
     * and all buckets have the same capacity.
     * Your task is to use the buckets to empty the wells.
     * Output the number of times you need to lower the buckets.
     *
     * Example 1:
     * Input:
     * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
     * bucket_capacity : 1
     * Output: 6
     *
     * Example 2:
     * Input:
     * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
     * bucket_capacity : 2
     * Output: 5
     *
     * Example 3:
     * Input:
     * grid : [[0,0,0], [0,0,0]]
     * bucket_capacity : 5
     * Output: 0
     *
     * Constraints:
     * * all wells have the same length
     * * 1 <= grid.length <= 10^2
     * * 1 <= grid[:,1].length <= 10^2
     * * grid[i][j] -> 0 | 1
     * * 1 <= capacity <= 10
     *
     * > maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
     * 6
     * > maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
     * 5
     * > maxFill([[0, 0, 0], [0, 0, 0]], 5)
     * 0
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)
     * 4
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)
     * 2
     */
    public static int maxFill(List<List<Integer>> grid, int capacity) {
    }
}
","// MaxFillTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {","// MaxFill.java
package scenario3;

import java.util.List;

class MaxFill {

    /**
     * * You are given a rectangular grid of wells. Each row represents a single well,
     * and each 1 in a row represents a single unit of water.
     * Each well has a corresponding bucket that can be used to extract water from it,
     * and all buckets have the same capacity.
     * Your task is to use the buckets to empty the wells.
     * Output the number of times you need to lower the buckets.
     *
     * Example 1:
     * Input:
     * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
     * bucket_capacity : 1
     * Output: 6
     *
     * Example 2:
     * Input:
     * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
     * bucket_capacity : 2
     * Output: 5
     *
     * Example 3:
     * Input:
     * grid : [[0,0,0], [0,0,0]]
     * bucket_capacity : 5
     * Output: 0
     *
     * Constraints:
     * * all wells have the same length
     * * 1 <= grid.length <= 10^2
     * * 1 <= grid[:,1].length <= 10^2
     * * grid[i][j] -> 0 | 1
     * * 1 <= capacity <= 10
     *
     * > maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
     * 6
     * > maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
     * 5
     * > maxFill([[0, 0, 0], [0, 0, 0]], 5)
     * 0
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)
     * 4
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)
     * 2
     */
    public static int maxFill(List<List<Integer>> grid, int capacity) {
        int rows = grid.size();
        int cols = grid.get(0).size();
        int totalWater = 0;
        int buckets = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid.get(i).get(j) == 1) {
                    totalWater++;
                }
            }
        }
        buckets = (int) Math.ceil((double) totalWater / capacity);
        return buckets;
    }
}

// MaxFillTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {
    @Test
    void testMaxFill1() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(0, 0, 1, 0),
            Arrays.asList(0, 1, 0, 0),
            Arrays.asList(1, 1, 1, 1)
        );
        int capacity = 1;
        int expected = 6;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill2() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(0, 0, 1, 1),
            Arrays.asList(0, 0, 0, 0),
            Arrays.asList(1, 1, 1, 1),
            Arrays.asList(0, 1, 1, 1)
        );
        int capacity = 2;
        int expected = 5;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill3() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(0, 0, 0),
            Arrays.asList(0, 0, 0)
        );
        int capacity = 5;
        int expected = 0;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill4() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 1, 1, 1),
            Arrays.asList(1, 1, 1, 1)
        );
        int capacity = 2;
        int expected = 4;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill5() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 1, 1, 1),
            Arrays.asList(1, 1, 1, 1)
        );
        int capacity = 9;
        int expected = 2;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill6() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(0, 0, 0),
            Arrays.asList(0, 0, 0),
            Arrays.asList(0, 0, 0)
        );
        int capacity = 1;
        int expected = 0;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill7() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 0, 0),
            Arrays.asList(0, 1, 0),
            Arrays.asList(0, 0, 1)
        );
        int capacity = 1;
        int expected = 3;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill8() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 0, 0),
            Arrays.asList(0, 1, 0),
            Arrays.asList(0, 0, 1)
        );
        int capacity = 2;
        int expected = 2;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill9() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 0, 0),
            Arrays.asList(0, 1, 0),
            Arrays.asList(0, 0, 1)
        );
        int capacity = 3;
        int expected = 1;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }

    @Test
    void testMaxFill10() {
        List<List<Integer>> grid = Arrays.asList(
            Arrays.asList(1, 0, 0),
            Arrays.asList(0, 1, 0),
            Arrays.asList(0, 0, 1)
        );
        int capacity = 4;
        int expected = 1;
        int actual = MaxFill.maxFill(grid, capacity);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRlNhSti4Rz3wiHK4IqZH49hRQTk,/HumanEvalJava/src/main/java/scenario3/id_103.java,34.63353204727173,stop,"// RoundedAvg.java
package scenario3;

class RoundedAvg {

    /**
     * You are given two positive integers n and m, and your task is to compute the
     * average of the integers from n through m (including n and m).
     * Round the answer to the nearest integer and convert that to binary.
     * If n is greater than m, return -1.
     * Example:
     * roundedAvg(1, 5) => ""0b11""
     * roundedAvg(7, 5) => -1
     * roundedAvg(10, 20) => ""0b1111""
     * roundedAvg(20, 33) => ""0b11010""
     *
     * > roundedAvg(1, 5)
     * ""0b11""
     * > roundedAvg(7, 13)
     * ""0b1010""
     * > roundedAvg(964, 977)
     * ""0b1111001010""
     * > roundedAvg(996, 997)
     * ""0b1111100100""
     * > roundedAvg(560, 851)
     * ""0b1011000010""
     * > roundedAvg(185, 546)
     * ""0b101101110""
     * > roundedAvg(362, 496)
     * ""0b110101101""
     * > roundedAvg(350, 902)
     * ""0b1001110010""
     * > roundedAvg(197, 233)
     * ""0b11010111""
     * > roundedAvg(7, 5)
     * -1
     * > roundedAvg(5, 1)
     * -1
     * > roundedAvg(5, 5)
     * ""0b101""
     */
    public static Object roundedAvg(int n, int m) {
    }
}
","// RoundedAvgTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {","// RoundedAvg.java
package scenario3;

class RoundedAvg {

    /**
     * You are given two positive integers n and m, and your task is to compute the
     * average of the integers from n through m (including n and m).
     * Round the answer to the nearest integer and convert that to binary.
     * If n is greater than m, return -1.
     * Example:
     * roundedAvg(1, 5) => ""0b11""
     * roundedAvg(7, 5) => -1
     * roundedAvg(10, 20) => ""0b1111""
     * roundedAvg(20, 33) => ""0b11010""
     *
     * > roundedAvg(1, 5)
     * ""0b11""
     * > roundedAvg(7, 13)
     * ""0b1010""
     * > roundedAvg(964, 977)
     * ""0b1111001010""
     * > roundedAvg(996, 997)
     * ""0b1111100100""
     * > roundedAvg(560, 851)
     * ""0b1011000010""
     * > roundedAvg(185, 546)
     * ""0b101101110""
     * > roundedAvg(362, 496)
     * ""0b110101101""
     * > roundedAvg(350, 902)
     * ""0b1001110010""
     * > roundedAvg(197, 233)
     * ""0b11010111""
     * > roundedAvg(7, 5)
     * -1
     * > roundedAvg(5, 1)
     * -1
     * > roundedAvg(5, 5)
     * ""0b101""
     */
    public static Object roundedAvg(int n, int m) {
        if (n > m) {
            return -1;
        }
        int sum = 0;
        for (int i = n; i <= m; i++) {
            sum += i;
        }
        int avg = Math.round((float) sum / (m - n + 1));
        return Integer.toBinaryString(avg);
    }
}

// RoundedAvgTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {
    @Test
    void testRoundedAvg1() {
        assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 5));
    }

    @Test
    void testRoundedAvg2() {
        assertEquals(-1, RoundedAvg.roundedAvg(7, 5));
    }

    @Test
    void testRoundedAvg3() {
        assertEquals(""0b1111"", RoundedAvg.roundedAvg(10, 20));
    }

    @Test
    void testRoundedAvg4() {
        assertEquals(""0b11010"", RoundedAvg.roundedAvg(20, 33));
    }

    @Test
    void testRoundedAvg5() {
        assertEquals(""0b1010"", RoundedAvg.roundedAvg(7, 13));
    }

    @Test
    void testRoundedAvg6() {
        assertEquals(""0b1111001010"", RoundedAvg.roundedAvg(964, 977));
    }

    @Test
    void testRoundedAvg7() {
        assertEquals(""0b1111100100"", RoundedAvg.roundedAvg(996, 997));
    }

    @Test
    void testRoundedAvg8() {
        assertEquals(""0b1011000010"", RoundedAvg.roundedAvg(560, 851));
    }

    @Test
    void testRoundedAvg9() {
        assertEquals(""0b101101110"", RoundedAvg.roundedAvg(185, 546));
    }

    @Test
    void testRoundedAvg10() {
        assertEquals(""0b110101101"", RoundedAvg.roundedAvg(362, 496));
    }

    @Test
    void testRoundedAvg11() {
        assertEquals(""0b1001110010"", RoundedAvg.roundedAvg(350, 902));
    }

    @Test
    void testRoundedAvg12() {
        assertEquals(""0b11010111"", RoundedAvg.roundedAvg(197, 233));
    }

    @Test
    void testRoundedAvg13() {
        assertEquals(-1, RoundedAvg.roundedAvg(7, 5));
    }

    @Test
    void testRoundedAvg14() {
        assertEquals(-1, RoundedAvg.roundedAvg(5, 1));
    }

    @Test
    void testRoundedAvg15() {
        assertEquals(""0b101"", RoundedAvg.roundedAvg(5, 5));
    }
}"
chatcmpl-6yRmQmGhhGPbNWz3aoHelVBCo2ko6,/HumanEvalJava/src/main/java/scenario3/id_39.java,29.77343249320984,stop,"// PrimeFib.java
package scenario3;

class PrimeFib {

    /**
     * Returns n-th number that is a Fibonacci number and it's also prime.
     *
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(6)
     * 233
     * > primeFib(7)
     * 1597
     * > primeFib(8)
     * 28657
     * > primeFib(9)
     * 514229
     * > primeFib(10)
     * 433494437
     */
    public static int primeFib(int n) {
    }
}
","// PrimeFibTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {","// PrimeFib.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class PrimeFib {

    /**
     * Returns n-th number that is a Fibonacci number and it's also prime.
     *
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(6)
     * 233
     * > primeFib(7)
     * 1597
     * > primeFib(8)
     * 28657
     * > primeFib(9)
     * 514229
     * > primeFib(10)
     * 433494437
     */
    public static int primeFib(int n) {
        List<Integer> primes = new ArrayList<>();
        primes.add(2);
        primes.add(3);
        int i = 4;
        while (primes.size() < n) {
            if (isPrime(i)) {
                primes.add(i);
            }
            i++;
        }
        int fib = 0;
        int prev = 1;
        int curr = 1;
        while (primes.size() > 0) {
            fib = prev + curr;
            prev = curr;
            curr = fib;
            if (primes.contains(fib)) {
                primes.remove(Integer.valueOf(fib));
            }
        }
        return fib;
    }

    /**
     * Returns true if the given number is prime, false otherwise.
     */
    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// PrimeFibTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {

    @Test
    void testPrimeFib1() {
        assertEquals(2, PrimeFib.primeFib(1));
    }

    @Test
    void testPrimeFib2() {
        assertEquals(3, PrimeFib.primeFib(2));
    }

    @Test
    void testPrimeFib3() {
        assertEquals(5, PrimeFib.primeFib(3));
    }

    @Test
    void testPrimeFib4() {
        assertEquals(13, PrimeFib.primeFib(4));
    }

    @Test
    void testPrimeFib5() {
        assertEquals(89, PrimeFib.primeFib(5));
    }

    @Test
    void testPrimeFib6() {
        assertEquals(233, PrimeFib.primeFib(6));
    }

    @Test
    void testPrimeFib7() {
        assertEquals(1597, PrimeFib.primeFib(7));
    }

    @Test
    void testPrimeFib8() {
        assertEquals(28657, PrimeFib.primeFib(8));
    }

    @Test
    void testPrimeFib9() {
        assertEquals(514229, PrimeFib.primeFib(9));
    }

    @Test
    void testPrimeFib10() {
        assertEquals(433494437, PrimeFib.primeFib(10));
    }
}"
chatcmpl-6yRnT1Q3eRpKNS7YCCL6qTa8TOd9R,/HumanEvalJava/src/main/java/scenario3/id_154.java,23.864583253860474,stop,"// CycpatternCheck.java
package scenario3;

class CycpatternCheck {

    /**
     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
     * cycpatternCheck(""abcd"",""abd"") => False
     * cycpatternCheck(""hello"",""ell"") => True
     * cycpatternCheck(""whassup"",""psus"") => False
     * cycpatternCheck(""abab"",""baa"") => True
     * cycpatternCheck(""efef"",""eeff"") => False
     * cycpatternCheck(""himenss"",""simen"") => True
     *
     * > cycpatternCheck(""xyzw"", ""xyw"")
     * false
     * > cycpatternCheck(""yello"", ""ell"")
     * true
     * > cycpatternCheck(""whattup"", ""ptut"")
     * false
     * > cycpatternCheck(""efef"", ""fee"")
     * true
     * > cycpatternCheck(""abab"", ""aabb"")
     * false
     * > cycpatternCheck(""winemtt"", ""tinem"")
     * true
     */
    public static Boolean cycpatternCheck(String a, String b) {
    }
}
","// CycpatternCheckTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {","// CycpatternCheck.java
package scenario3;

class CycpatternCheck {

    /**
     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
     * cycpatternCheck(""abcd"",""abd"") => False
     * cycpatternCheck(""hello"",""ell"") => True
     * cycpatternCheck(""whassup"",""psus"") => False
     * cycpatternCheck(""abab"",""baa"") => True
     * cycpatternCheck(""efef"",""eeff"") => False
     * cycpatternCheck(""himenss"",""simen"") => True
     *
     * > cycpatternCheck(""xyzw"", ""xyw"")
     * false
     * > cycpatternCheck(""yello"", ""ell"")
     * true
     * > cycpatternCheck(""whattup"", ""ptut"")
     * false
     * > cycpatternCheck(""efef"", ""fee"")
     * true
     * > cycpatternCheck(""abab"", ""aabb"")
     * false
     * > cycpatternCheck(""winemtt"", ""tinem"")
     * true
     */
    public static Boolean cycpatternCheck(String a, String b) {
        if (a == null || b == null || a.length() < b.length()) {
            return false;
        }
        String aDouble = a + a;
        return aDouble.contains(b);
    }
}

// CycpatternCheckTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
    @Test
    void testCycpatternCheck1() {
        assertFalse(CycpatternCheck.cycpatternCheck(""abcd"", ""abd""));
    }

    @Test
    void testCycpatternCheck2() {
        assertTrue(CycpatternCheck.cycpatternCheck(""hello"", ""ell""));
    }

    @Test
    void testCycpatternCheck3() {
        assertFalse(CycpatternCheck.cycpatternCheck(""whassup"", ""psus""));
    }

    @Test
    void testCycpatternCheck4() {
        assertTrue(CycpatternCheck.cycpatternCheck(""abab"", ""baa""));
    }

    @Test
    void testCycpatternCheck5() {
        assertFalse(CycpatternCheck.cycpatternCheck(""efef"", ""eeff""));
    }

    @Test
    void testCycpatternCheck6() {
        assertTrue(CycpatternCheck.cycpatternCheck(""himenss"", ""simen""));
    }

    @Test
    void testCycpatternCheck7() {
        assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
    }

    @Test
    void testCycpatternCheck8() {
        assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
    }

    @Test
    void testCycpatternCheck9() {
        assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
    }

    @Test
    void testCycpatternCheck10() {
        assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
    }

    @Test
    void testCycpatternCheck11() {
        assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
    }

    @Test
    void testCycpatternCheck12() {
        assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
    }
}"
chatcmpl-6yRoW9pVeRgR923bOD6O0pzcZzlzE,/HumanEvalJava/src/main/java/scenario3/id_81.java,59.2943913936615,length,"// NumericalLetterGrade.java
package scenario3;

import java.util.List;

class NumericalLetterGrade {

    /**
     * It is the last week of the semester and the teacher has to give the grades
     * to students. The teacher has been making her own algorithm for grading.
     * The only problem is, she has lost the code she used for grading.
     * She has given you a list of GPAs for some students and you have to write
     * a function that can output a list of letter grades using the following table:
     * GPA       |    Letter grade
     * 4.0                A+
     * > 3.7                A
     * > 3.3                A-
     * > 3.0                B+
     * > 2.7                B
     * > 2.3                B-
     * > 2.0                C+
     * > 1.7                C
     * > 1.3                C-
     * > 1.0                D+
     * > 0.7                D
     * > 0.0                D-
     * 0.0                E
     *
     * Example:
     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
     *
     * > numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])
     * [""A+"", ""B"", ""C-"", ""C"", ""A-""]
     * > numericalLetterGrade([1.2])
     * [""D+""]
     * > numericalLetterGrade([0.5])
     * [""D-""]
     * > numericalLetterGrade([0.0])
     * [""E""]
     * > numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])
     * [""D"", ""D-"", ""C-"", ""B"", ""B+""]
     * > numericalLetterGrade([0, 0.7])
     * [""E"", ""D-""]
     */
    public static List<String> numericalLetterGrade(List<Number> grades) {
    }
}
","// NumericalLetterGradeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {","// NumericalLetterGrade.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class NumericalLetterGrade {

    /**
     * It is the last week of the semester and the teacher has to give the grades
     * to students. The teacher has been making her own algorithm for grading.
     * The only problem is, she has lost the code she used for grading.
     * She has given you a list of GPAs for some students and you have to write
     * a function that can output a list of letter grades using the following table:
     * GPA       |    Letter grade
     * 4.0                A+
     * > 3.7                A
     * > 3.3                A-
     * > 3.0                B+
     * > 2.7                B
     * > 2.3                B-
     * > 2.0                C+
     * > 1.7                C
     * > 1.3                C-
     * > 1.0                D+
     * > 0.7                D
     * > 0.0                D-
     * 0.0                E
     *
     * Example:
     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
     *
     * > numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])
     * [""A+"", ""B"", ""C-"", ""C"", ""A-""]
     * > numericalLetterGrade([1.2])
     * [""D+""]
     * > numericalLetterGrade([0.5])
     * [""D-""]
     * > numericalLetterGrade([0.0])
     * [""E""]
     * > numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])
     * [""D"", ""D-"", ""C-"", ""B"", ""B+""]
     * > numericalLetterGrade([0, 0.7])
     * [""E"", ""D-""]
     */
    public static List<String> numericalLetterGrade(List<Number> grades) {
        List<String> letterGrades = new ArrayList<>();
        for (Number grade : grades) {
            if (grade.doubleValue() == 4.0) {
                letterGrades.add(""A+"");
            } else if (grade.doubleValue() > 3.7) {
                letterGrades.add(""A"");
            } else if (grade.doubleValue() > 3.3) {
                letterGrades.add(""A-"");
            } else if (grade.doubleValue() > 3.0) {
                letterGrades.add(""B+"");
            } else if (grade.doubleValue() > 2.7) {
                letterGrades.add(""B"");
            } else if (grade.doubleValue() > 2.3) {
                letterGrades.add(""B-"");
            } else if (grade.doubleValue() > 2.0) {
                letterGrades.add(""C+"");
            } else if (grade.doubleValue() > 1.7) {
                letterGrades.add(""C"");
            } else if (grade.doubleValue() > 1.3) {
                letterGrades.add(""C-"");
            } else if (grade.doubleValue() > 1.0) {
                letterGrades.add(""D+"");
            } else if (grade.doubleValue() > 0.7) {
                letterGrades.add(""D"");
            } else if (grade.doubleValue() > 0.0) {
                letterGrades.add(""D-"");
            } else {
                letterGrades.add(""E"");
            }
        }
        return letterGrades;
    }
}

// NumericalLetterGradeTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {
    
    @Test
    void testNumericalLetterGrade() {
        List<Number> grades1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);
        List<String> expected1 = Arrays.asList(""A+"", ""B"", ""C-"", ""C"", ""A-"");
        assertEquals(expected1, NumericalLetterGrade.numericalLetterGrade(grades1));
        
        List<Number> grades2 = Arrays.asList(1.2);
        List<String> expected2 = Arrays.asList(""D+"");
        assertEquals(expected2, NumericalLetterGrade.numericalLetterGrade(grades2));
        
        List<Number> grades3 = Arrays.asList(0.5);
        List<String> expected3 = Arrays.asList(""D-"");
        assertEquals(expected3, NumericalLetterGrade.numericalLetterGrade(grades3));
        
        List<Number> grades4 = Arrays.asList(0.0);
        List<String> expected4 = Arrays.asList(""E"");
        assertEquals(expected4, NumericalLetterGrade.numericalLetterGrade(grades4));
        
        List<Number> grades5 = Arrays.asList(1, 0.3, 1.5, 2.8, 3.3);
        List<String> expected5 = Arrays.asList(""D"", ""D-"", ""C-"", ""B"", ""B+"");
        assertEquals(expected5, NumericalLetterGrade.numericalLetterGrade(grades5));
        
        List<Number> grades6 = Arrays.asList(0, 0.7);
        List<String> expected6 = Arrays.asList(""E"", ""D-"");
        assertEquals(expected6, NumericalLetterGrade.numericalLetterGrade(grades6));
        
        List<Number> grades7 = Arrays.asList(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0);
        List<String> expected7 = Arrays.asList(""A+"", ""A"", ""A-"", ""B+"", ""B"", ""B-"", ""C+"", ""C"", ""C-"", ""D+"", ""D"", ""E"");
        assertEquals(expected7, NumericalLetterGrade.numericalLetterGrade(grades7));
        
        List<Number> grades8 = Arrays.asList(3.85, 2.95, 1.75, 0.85);
        List<String> expected8 = Arrays.asList(""A"", ""B-"", ""C"", ""D+"");
        assertEquals(expected8, NumericalLetterGrade.numericalLetterGrade(grades8));
        
        List<Number> grades9 = Arrays.asList(3.95, 3.85, 3.75, 3.65, 3.55, 3.45, 3.35, 3.25, 3.15, 3.05, 2.95, 2.85, 2.75, 2.65, 2.55, 2.45, 2.35, 2.25, 2.15, 2.05, 1.95, 1.85, 1.75, 1.65, 1.55, 1.45, 1.35, 1.25, 1.15, 1.05, 0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05);
        List<String> expected9 = Arrays.asList(""A+"", ""A+"", ""A+"", ""A+"", ""A"", ""A"", ""A"", ""A-"", ""A-"", ""A-"", ""A-"", ""B+"", ""B+"", ""B+"", ""B"", ""B"", ""B-"", ""B-"", ""B-"", ""C+"", ""C+"", ""C+"", ""C"", ""C"", ""C-"", ""C-"", ""C-"", ""D+"", ""D+"", ""D+"", ""D"", ""D"", ""D-"", ""D-"", ""D-"", ""E"", ""E"", ""E"", ""E"", ""E"");
        assertEquals(expected9, NumericalLetterGrade.numericalLetterGrade(grades9));
        
        List<Number> grades10 = Arrays.asList(4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, "
chatcmpl-6yRpZ2frMSlKNWEyZHpbTIdACX8Ms,/HumanEvalJava/src/main/java/scenario3/id_15.java,18.668045043945312,stop,"// StringSequence.java
package scenario3;

class StringSequence {

    /**
     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.
     *
     * > stringSequence(0)
     * ""0""
     * > stringSequence(5)
     * ""0 1 2 3 4 5""
     * > stringSequence(0)
     * ""0""
     * > stringSequence(3)
     * ""0 1 2 3""
     * > stringSequence(10)
     * ""0 1 2 3 4 5 6 7 8 9 10""
     */
    public static String stringSequence(int n) {
    }
}
","// StringSequenceTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {","// StringSequence.java
package scenario3;

class StringSequence {

    /**
     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.
     *
     * > stringSequence(0)
     * ""0""
     * > stringSequence(5)
     * ""0 1 2 3 4 5""
     * > stringSequence(0)
     * ""0""
     * > stringSequence(3)
     * ""0 1 2 3""
     * > stringSequence(10)
     * ""0 1 2 3 4 5 6 7 8 9 10""
     */
    public static String stringSequence(int n) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i <= n; i++) {
            sb.append(i).append("" "");
        }
        return sb.toString().trim();
    }
}

// StringSequenceTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {
    
    @Test
    void testStringSequenceWithZero() {
        assertEquals(""0"", StringSequence.stringSequence(0));
    }
    
    @Test
    void testStringSequenceWithFive() {
        assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
    }
    
    @Test
    void testStringSequenceWithThree() {
        assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
    }
    
    @Test
    void testStringSequenceWithTen() {
        assertEquals(""0 1 2 3 4 5 6 7 8 9 10"", StringSequence.stringSequence(10));
    }
    
    @Test
    void testStringSequenceWithNegativeNumber() {
        assertEquals("""", StringSequence.stringSequence(-1));
    }
    
    @Test
    void testStringSequenceWithLargeNumber() {
        assertEquals(""0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"", StringSequence.stringSequence(20));
    }
    
    @Test
    void testStringSequenceWithMaxValue() {
        assertEquals("""", StringSequence.stringSequence(Integer.MAX_VALUE));
    }
    
    @Test
    void testStringSequenceWithOne() {
        assertEquals(""0 1"", StringSequence.stringSequence(1));
    }
    
    @Test
    void testStringSequenceWithTwo() {
        assertEquals(""0 1 2"", StringSequence.stringSequence(2));
    }
    
    @Test
    void testStringSequenceWithEmptyString() {
        assertEquals("""", StringSequence.stringSequence(0));
    }
}"
chatcmpl-6yRqcBOaV24dFI1YvH4MCp8OkRecj,/HumanEvalJava/src/main/java/scenario3/id_42.java,38.10731840133667,stop,"// IncrList.java
package scenario3;

import java.util.List;

class IncrList {

    /**
     * Return list with elements incremented by 1.
     *
     * > incrList([1, 2, 3])
     * [2, 3, 4]
     * > incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [6, 4, 6, 3, 4, 4, 10, 1, 124]
     * > incrList([])
     * []
     * > incrList([3, 2, 1])
     * [4, 3, 2]
     * > incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])
     * [6, 3, 6, 3, 4, 4, 10, 1, 124]
     */
    public static List<Object> incrList(List<Object> l) {
    }
}
","// IncrListTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {","// IncrList.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class IncrList {

    /**
     * Return list with elements incremented by 1.
     *
     * > incrList([1, 2, 3])
     * [2, 3, 4]
     * > incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [6, 4, 6, 3, 4, 4, 10, 1, 124]
     * > incrList([])
     * []
     * > incrList([3, 2, 1])
     * [4, 3, 2]
     * > incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])
     * [6, 3, 6, 3, 4, 4, 10, 1, 124]
     */
    public static List<Integer> incrList(List<Integer> l) {
        List<Integer> result = new ArrayList<>();
        for (Integer i : l) {
            result.add(i + 1);
        }
        return result;
    }
}

// IncrListTest.java
package scenario3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {
    
    @Test
    void testIncrListWithPositiveNumbers() {
        List<Integer> input = new ArrayList<>(Arrays.asList(1, 2, 3));
        List<Integer> expected = new ArrayList<>(Arrays.asList(2, 3, 4));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithMixedNumbers() {
        List<Integer> input = new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));
        List<Integer> expected = new ArrayList<>(Arrays.asList(6, 4, 6, 3, 4, 4, 10, 1, 124));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithEmptyList() {
        List<Integer> input = new ArrayList<>();
        List<Integer> expected = new ArrayList<>();
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithDescendingNumbers() {
        List<Integer> input = new ArrayList<>(Arrays.asList(3, 2, 1));
        List<Integer> expected = new ArrayList<>(Arrays.asList(4, 3, 2));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithRepeatedNumbers() {
        List<Integer> input = new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123));
        List<Integer> expected = new ArrayList<>(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithNullList() {
        List<Integer> input = null;
        assertThrows(NullPointerException.class, () -> {
            IncrList.incrList(input);
        });
    }
    
    @Test
    void testIncrListWithMaxIntegerValue() {
        List<Integer> input = new ArrayList<>(Arrays.asList(Integer.MAX_VALUE));
        List<Integer> expected = new ArrayList<>(Arrays.asList(Integer.MIN_VALUE));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithMinIntegerValue() {
        List<Integer> input = new ArrayList<>(Arrays.asList(Integer.MIN_VALUE));
        List<Integer> expected = new ArrayList<>(Arrays.asList(Integer.MIN_VALUE + 1));
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithMaxListSize() {
        List<Integer> input = new ArrayList<>();
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            input.add(0);
        }
        List<Integer> expected = new ArrayList<>();
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            expected.add(1);
        }
        assertEquals(expected, IncrList.incrList(input));
    }
    
    @Test
    void testIncrListWithMinListSize() {
        List<Integer> input = new ArrayList<>();
        for (int i = 0; i > Integer.MIN_VALUE; i--) {
            input.add(0);
        }
        List<Integer> expected = new ArrayList<>();
        for (int i = 0; i > Integer.MIN_VALUE; i--) {
            expected.add(1);
        }
        assertEquals(expected, IncrList.incrList(input));
    }
}"
chatcmpl-6yRrfr7C7rc3HPdLJOTGGoDWa74Dj,/HumanEvalJava/src/main/java/scenario3/id_54.java,26.408491134643555,stop,"// SameChars.java
package scenario3;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameChars(String s0, String s1) {
    }
}
","// SameCharsTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {","// SameChars.java
package scenario3;

import java.util.HashMap;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameChars(String s0, String s1) {
        if (s0.length() != s1.length()) {
            return false;
        }
        HashMap<Character, Integer> charCount = new HashMap<>();
        for (int i = 0; i < s0.length(); i++) {
            char c = s0.charAt(i);
            if (charCount.containsKey(c)) {
                charCount.put(c, charCount.get(c) + 1);
            } else {
                charCount.put(c, 1);
            }
        }
        for (int i = 0; i < s1.length(); i++) {
            char c = s1.charAt(i);
            if (!charCount.containsKey(c)) {
                return false;
            }
            int count = charCount.get(c);
            if (count == 1) {
                charCount.remove(c);
            } else {
                charCount.put(c, count - 1);
            }
        }
        return true;
    }
}

// SameCharsTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {

    @Test
    void testSameChars1() {
        assertFalse(SameChars.sameChars(""abcd"", ""dddddddabce""));
    }

    @Test
    void testSameChars2() {
        assertTrue(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc""));
    }

    @Test
    void testSameChars3() {
        assertTrue(SameChars.sameChars(""abcd"", ""dddddddabc""));
    }

    @Test
    void testSameChars4() {
        assertTrue(SameChars.sameChars(""dddddddabc"", ""abcd""));
    }

    @Test
    void testSameChars5() {
        assertFalse(SameChars.sameChars(""eabcd"", ""dddddddabc""));
    }

    @Test
    void testSameChars6() {
        assertFalse(SameChars.sameChars(""abcd"", ""dddddddabcf""));
    }

    @Test
    void testSameChars7() {
        assertFalse(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc""));
    }

    @Test
    void testSameChars8() {
        assertFalse(SameChars.sameChars(""aabb"", ""aaccc""));
    }

    @Test
    void testSameChars9() {
        assertTrue(SameChars.sameChars("""", """"));
    }

    @Test
    void testSameChars10() {
        assertFalse(SameChars.sameChars(""abcd"", ""abcc""));
    }
}"
chatcmpl-6yRsi5RNjgFxPK5dsbSQTfaCxE3XS,/HumanEvalJava/src/main/java/scenario3/id_139.java,22.54720664024353,stop,"// SpecialFactorial.java
package scenario3;

class SpecialFactorial {

    /**
     * The Brazilian factorial is defined as:
     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
     * where n > 0
     *
     * For example:
     * >>> specialFactorial(4)
     * 288
     *
     * The function will receive an integer as input and should return the special
     * factorial of this integer.
     *
     * > specialFactorial(4)
     * 288
     * > specialFactorial(5)
     * 34560
     * > specialFactorial(7)
     * 125411328000L
     * > specialFactorial(1)
     * 1
     */
    public static long specialFactorial(int n) {
    }
}
","// SpecialFactorialTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {","// SpecialFactorial.java
package scenario3;

class SpecialFactorial {

    /**
     * The Brazilian factorial is defined as:
     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
     * where n > 0
     *
     * For example:
     * >>> specialFactorial(4)
     * 288
     *
     * The function will receive an integer as input and should return the special
     * factorial of this integer.
     *
     * > specialFactorial(4)
     * 288
     * > specialFactorial(5)
     * 34560
     * > specialFactorial(7)
     * 125411328000L
     * > specialFactorial(1)
     * 1
     */
    public static long specialFactorial(int n) {
        if (n == 1) {
            return 1;
        }
        long result = 1;
        for (int i = n; i > 0; i--) {
            long factorial = 1;
            for (int j = i; j > 0; j--) {
                factorial *= j;
            }
            result *= factorial;
        }
        return result;
    }
}

// SpecialFactorialTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
    @Test
    void testSpecialFactorialWithOne() {
        assertEquals(1, SpecialFactorial.specialFactorial(1));
    }

    @Test
    void testSpecialFactorialWithTwo() {
        assertEquals(2, SpecialFactorial.specialFactorial(2));
    }

    @Test
    void testSpecialFactorialWithThree() {
        assertEquals(12, SpecialFactorial.specialFactorial(3));
    }

    @Test
    void testSpecialFactorialWithFour() {
        assertEquals(288, SpecialFactorial.specialFactorial(4));
    }

    @Test
    void testSpecialFactorialWithFive() {
        assertEquals(34560, SpecialFactorial.specialFactorial(5));
    }

    @Test
    void testSpecialFactorialWithSix() {
        assertEquals(24883200, SpecialFactorial.specialFactorial(6));
    }

    @Test
    void testSpecialFactorialWithSeven() {
        assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
    }

    @Test
    void testSpecialFactorialWithEight() {
        assertEquals(52306974720000L, SpecialFactorial.specialFactorial(8));
    }

    @Test
    void testSpecialFactorialWithNine() {
        assertEquals(2092278988800000L, SpecialFactorial.specialFactorial(9));
    }

    @Test
    void testSpecialFactorialWithTen() {
        assertEquals(884176199373824000L, SpecialFactorial.specialFactorial(10));
    }
}"
chatcmpl-6yRtl59p5IA8qQsz8QHR75lfH7v5G,/HumanEvalJava/src/main/java/scenario3/id_74.java,42.40649056434631,stop,"// TotalMatch.java
package scenario3;

import java.util.List;

class TotalMatch {

    /**
     * * Write a function that accepts two lists of strings and returns the list that has
     * total number of chars in the all strings of the list less than the other list.
     *
     * if the two lists have the same number of chars, return the first list.
     *
     * Examples
     * total_match([], []) ➞ []
     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
     *
     * > totalMatch([], [])
     * []
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi""])
     * [""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
     * [""hi"", ""admin""]
     * > totalMatch([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
     * [""4""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""Hi""])
     * [""hI"", ""Hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
     * [""hI"", ""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hii""])
     * [""hi"", ""admin""]
     * > totalMatch([], [""this""])
     * []
     * > totalMatch([""this""], [])
     * []
     */
    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {
    }
}
","// TotalMatchTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {","// TotalMatch.java
package scenario3;

import java.util.List;

class TotalMatch {

    /**
     * * Write a function that accepts two lists of strings and returns the list that has
     * total number of chars in the all strings of the list less than the other list.
     *
     * if the two lists have the same number of chars, return the first list.
     *
     * Examples
     * total_match([], []) ➞ []
     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
     *
     * > totalMatch([], [])
     * []
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi""])
     * [""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
     * [""hi"", ""admin""]
     * > totalMatch([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
     * [""4""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""Hi""])
     * [""hI"", ""Hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
     * [""hI"", ""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hii""])
     * [""hi"", ""admin""]
     * > totalMatch([], [""this""])
     * []
     * > totalMatch([""this""], [])
     * []
     */
    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {
        int totalChars1 = lst1.stream().mapToInt(String::length).sum();
        int totalChars2 = lst2.stream().mapToInt(String::length).sum();
        return totalChars1 <= totalChars2 ? lst1 : lst2;
    }
}

// TotalMatchTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {
    
    @Test
    void testEmptyLists() {
        List<String> lst1 = Collections.emptyList();
        List<String> lst2 = Collections.emptyList();
        List<String> expected = Collections.emptyList();
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testSameTotalChars() {
        List<String> lst1 = Arrays.asList(""hi"", ""admin"");
        List<String> lst2 = Arrays.asList(""hi"", ""hi"");
        List<String> expected = Arrays.asList(""hi"", ""hi"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testDifferentTotalChars() {
        List<String> lst1 = Arrays.asList(""hi"", ""admin"");
        List<String> lst2 = Arrays.asList(""hi"", ""hi"", ""admin"", ""project"");
        List<String> expected = Arrays.asList(""hi"", ""admin"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testOneElementList() {
        List<String> lst1 = Arrays.asList(""4"");
        List<String> lst2 = Arrays.asList(""1"", ""2"", ""3"", ""4"", ""5"");
        List<String> expected = Arrays.asList(""4"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testCaseInsensitive() {
        List<String> lst1 = Arrays.asList(""hi"", ""admin"");
        List<String> lst2 = Arrays.asList(""hI"", ""Hi"");
        List<String> expected = Arrays.asList(""hI"", ""Hi"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testLongerList() {
        List<String> lst1 = Arrays.asList(""hi"", ""admin"");
        List<String> lst2 = Arrays.asList(""hI"", ""hi"", ""hi"");
        List<String> expected = Arrays.asList(""hI"", ""hi"", ""hi"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testNoMatch() {
        List<String> lst1 = Arrays.asList(""hi"", ""admin"");
        List<String> lst2 = Arrays.asList(""hI"", ""hi"", ""hii"");
        List<String> expected = Arrays.asList(""hi"", ""admin"");
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testEmptyListAndNonEmptyList() {
        List<String> lst1 = Collections.emptyList();
        List<String> lst2 = Arrays.asList(""this"");
        List<String> expected = Collections.emptyList();
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
    
    @Test
    void testNonEmptyListAndEmptyList() {
        List<String> lst1 = Arrays.asList(""this"");
        List<String> lst2 = Collections.emptyList();
        List<String> expected = Collections.emptyList();
        assertEquals(expected, TotalMatch.totalMatch(lst1, lst2));
    }
}"
chatcmpl-6yRuoTBBlVOKzcHPNvcgGDMy6zpSK,/HumanEvalJava/src/main/java/scenario3/id_23.java,9.728071928024292,stop,"// Strlen.java
package scenario3;

class Strlen {

    /**
     * Return length of given string
     *
     * > strlen("""")
     * 0
     * > strlen(""abc"")
     * 3
     * > strlen("""")
     * 0
     * > strlen(""x"")
     * 1
     * > strlen(""asdasnakj"")
     * 9
     */
    public static int strlen(String string) {
    }
}
","// StrlenTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {","// Strlen.java
package scenario3;

class Strlen {

    /**
     * Return length of given string
     *
     * > strlen("""")
     * 0
     * > strlen(""abc"")
     * 3
     * > strlen("""")
     * 0
     * > strlen(""x"")
     * 1
     * > strlen(""asdasnakj"")
     * 9
     */
    public static int strlen(String string) {
        return string.length();
    }
}

// StrlenTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
    
    @Test
    void testEmptyString() {
        assertEquals(0, Strlen.strlen(""""));
    }
    
    @Test
    void testSingleCharacterString() {
        assertEquals(1, Strlen.strlen(""x""));
    }
    
    @Test
    void testMultipleCharacterString() {
        assertEquals(3, Strlen.strlen(""abc""));
        assertEquals(9, Strlen.strlen(""asdasnakj""));
    }
    
    @Test
    void testNullString() {
        assertThrows(NullPointerException.class, () -> {
            Strlen.strlen(null);
        });
    }
}"
chatcmpl-6yRvr4pQbyMfvTYbQh3gS0leGGo9K,/HumanEvalJava/src/main/java/scenario3/id_119.java,43.92622780799866,stop,"// MatchParens.java
package scenario3;

import java.util.List;

class MatchParens {

    /**
     * * You are given a list of two strings, both strings consist of open
     * parentheses '(' or close parentheses ')' only.
     * Your job is to check if it is possible to concatenate the two strings in
     * some order, that the resulting string will be good.
     * A string S is considered to be good if and only if all parentheses in S
     * are balanced. For example: the string '(())()' is good, while the string
     * '())' is not.
     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
     *
     * Examples:
     * matchParens(['()(', ')']) == 'Yes'
     * matchParens([')', ')']) == 'No'
     *
     * > matchParens([""()("", "")""])
     * ""Yes""
     * > matchParens(["")"", "")""])
     * ""No""
     * > matchParens([""(()(())"", ""())())""])
     * ""No""
     * > matchParens(["")())"", ""(()()(""])
     * ""Yes""
     * > matchParens([""(())))"", ""(()())((""])
     * ""Yes""
     * > matchParens([""()"", ""())""])
     * ""No""
     * > matchParens([""(()("", ""()))()""])
     * ""Yes""
     * > matchParens([""(((("", ""((())""])
     * ""No""
     * > matchParens(["")(()"", ""(()(""])
     * ""No""
     * > matchParens(["")("", "")(""])
     * ""No""
     * > matchParens([""("", "")""])
     * ""Yes""
     * > matchParens(["")"", ""(""])
     * ""Yes""
     */
    public static String matchParens(List<String> lst) {
    }
}
","// MatchParensTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {","// MatchParens.java
package scenario3;

import java.util.List;
import java.util.Stack;

class MatchParens {

    /**
     * * You are given a list of two strings, both strings consist of open
     * parentheses '(' or close parentheses ')' only.
     * Your job is to check if it is possible to concatenate the two strings in
     * some order, that the resulting string will be good.
     * A string S is considered to be good if and only if all parentheses in S
     * are balanced. For example: the string '(())()' is good, while the string
     * '())' is not.
     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
     *
     * Examples:
     * matchParens(['()(', ')']) == 'Yes'
     * matchParens([')', ')']) == 'No'
     *
     * > matchParens([""()("", "")""])
     * ""Yes""
     * > matchParens(["")"", "")""])
     * ""No""
     * > matchParens([""(()(())"", ""())())""])
     * ""No""
     * > matchParens(["")())"", ""(()()(""])
     * ""Yes""
     * > matchParens([""(())))"", ""(()())((""])
     * ""Yes""
     * > matchParens([""()"", ""())""])
     * ""No""
     * > matchParens([""(()("", ""()))()""])
     * ""Yes""
     * > matchParens([""(((("", ""((())""])
     * ""No""
     * > matchParens(["")(()"", ""(()(""])
     * ""No""
     * > matchParens(["")("", "")(""])
     * ""No""
     * > matchParens([""("", "")""])
     * ""Yes""
     * > matchParens(["")"", ""(""])
     * ""Yes""
     */
    public static String matchParens(List<String> lst) {
        String s1 = lst.get(0);
        String s2 = lst.get(1);
        String s = s1 + s2;
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                stack.push(c);
            } else {
                if (stack.isEmpty()) {
                    return ""No"";
                } else {
                    stack.pop();
                }
            }
        }
        return stack.isEmpty() ? ""Yes"" : ""No"";
    }
}

// MatchParensTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {

    @Test
    void testMatchParens1() {
        List<String> lst = Arrays.asList(""()("", "")"");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens2() {
        List<String> lst = Arrays.asList("")"", "")"");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens3() {
        List<String> lst = Arrays.asList(""(()(())"", ""())())"");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens4() {
        List<String> lst = Arrays.asList("")())"", ""(()()("");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens5() {
        List<String> lst = Arrays.asList(""(())))"", ""(()())(("");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens6() {
        List<String> lst = Arrays.asList(""()"", ""())"");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens7() {
        List<String> lst = Arrays.asList(""(()("", ""()))()"");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens8() {
        List<String> lst = Arrays.asList(""(((("", ""((())"");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens9() {
        List<String> lst = Arrays.asList("")(()"", ""(()("");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens10() {
        List<String> lst = Arrays.asList("")("", "")("");
        String expected = ""No"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens11() {
        List<String> lst = Arrays.asList(""("", "")"");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }

    @Test
    void testMatchParens12() {
        List<String> lst = Arrays.asList("")"", ""("");
        String expected = ""Yes"";
        String actual = MatchParens.matchParens(lst);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRwvaU1sNq6aHpnMIxTIhBRmYgiO,/HumanEvalJava/src/main/java/scenario3/id_35.java,16.988284587860107,stop,"// MaxElement.java
package scenario3;

import java.util.List;

class MaxElement {

    /**
     * Return the maximum element in the list.
     *
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * 123
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])
     * 124
     */
    public static int maxElement(List<Integer> l) {
    }
}
","// MaxElementTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {","// MaxElement.java
package scenario3;

import java.util.List;

class MaxElement {

    /**
     * Return the maximum element in the list.
     *
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * 123
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])
     * 124
     */
    public static int maxElement(List<Integer> l) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) > max) {
                max = l.get(i);
            }
        }
        return max;
    }
}

// MaxElementTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {
    
    @Test
    void testMaxElement() {
        List<Integer> l1 = Arrays.asList(1, 2, 3);
        assertEquals(3, MaxElement.maxElement(l1));
        
        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
        assertEquals(123, MaxElement.maxElement(l2));
        
        List<Integer> l3 = Arrays.asList(1, 2, 3);
        assertEquals(3, MaxElement.maxElement(l3));
        
        List<Integer> l4 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10);
        assertEquals(124, MaxElement.maxElement(l4));
    }
}"
chatcmpl-6yRxyEfX5bfjL2VhFsZO7l15WAFNZ,/HumanEvalJava/src/main/java/scenario3/id_62.java,33.67002010345459,stop,"// Derivative.java
package scenario3;

import java.util.List;

class Derivative {

    /**
     * xs represent coefficients of a polynomial.
     * xs[0] + xs[1] * x + xs[2] * x^2 + ....
     * Return derivative of this polynomial in the same form.
     *
     * > derivative([3, 1, 2, 4, 5])
     * [1, 4, 12, 20]
     * > derivative([1, 2, 3])
     * [2, 6]
     * > derivative([3, 2, 1])
     * [2, 2]
     * > derivative([3, 2, 1, 0, 4])
     * [2, 2, 0, 16]
     * > derivative([1])
     * []
     */
    public static List<Object> derivative(List<Integer> xs) {
    }
}
","// DerivativeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {","// Derivative.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Derivative {

    /**
     * xs represent coefficients of a polynomial.
     * xs[0] + xs[1] * x + xs[2] * x^2 + ....
     * Return derivative of this polynomial in the same form.
     *
     * > derivative([3, 1, 2, 4, 5])
     * [1, 4, 12, 20]
     * > derivative([1, 2, 3])
     * [2, 6]
     * > derivative([3, 2, 1])
     * [2, 2]
     * > derivative([3, 2, 1, 0, 4])
     * [2, 2, 0, 16]
     * > derivative([1])
     * []
     */
    public static List<Integer> derivative(List<Integer> xs) {
        List<Integer> result = new ArrayList<>();
        int n = xs.size();
        if (n == 1) {
            return result;
        }
        for (int i = 1; i < n; i++) {
            result.add(xs.get(i) * i);
        }
        return result;
    }
}

// DerivativeTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {

    @Test
    void testDerivative1() {
        List<Integer> xs = Arrays.asList(3, 1, 2, 4, 5);
        List<Integer> expected = Arrays.asList(1, 4, 12, 20);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative2() {
        List<Integer> xs = Arrays.asList(1, 2, 3);
        List<Integer> expected = Arrays.asList(2, 6);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative3() {
        List<Integer> xs = Arrays.asList(3, 2, 1);
        List<Integer> expected = Arrays.asList(2, 2);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative4() {
        List<Integer> xs = Arrays.asList(3, 2, 1, 0, 4);
        List<Integer> expected = Arrays.asList(2, 2, 0, 16);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative5() {
        List<Integer> xs = Arrays.asList(1);
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative6() {
        List<Integer> xs = Arrays.asList(0, 0, 0, 0, 0);
        List<Integer> expected = Arrays.asList(0, 0, 0, 0);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative7() {
        List<Integer> xs = Arrays.asList(1, 0, 0, 0, 0);
        List<Integer> expected = Arrays.asList(0, 0, 0, 0);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative8() {
        List<Integer> xs = Arrays.asList(0, 0, 0, 0, 1);
        List<Integer> expected = Arrays.asList(0, 0, 0, 4);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative9() {
        List<Integer> xs = Arrays.asList(0, 0, 0, 1, 0);
        List<Integer> expected = Arrays.asList(0, 0, 3, 0);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }

    @Test
    void testDerivative10() {
        List<Integer> xs = Arrays.asList(0, 0, 1, 0, 0);
        List<Integer> expected = Arrays.asList(0, 2, 0, 0);
        List<Integer> actual = Derivative.derivative(xs);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yRz1th4HaARFF3b98nshff1kIczg,/HumanEvalJava/src/main/java/scenario3/id_6.java,30.641580820083618,stop,"// ParseNestedParens.java
package scenario3;

import java.util.List;

class ParseNestedParens {

    /**
     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
     * For each of the group, output the deepest level of nesting of parentheses.
     * E.g. (()()) has maximum two levels of nesting while ((())) has three.
     *
     * > parseNestedParens(""(()()) ((())) () ((())()())"")
     * [2, 3, 1, 3]
     * > parseNestedParens(""() (()) ((())) (((())))"")
     * [1, 2, 3, 4]
     * > parseNestedParens(""(()(())((())))"")
     * [4]
     */
    public static List<Integer> parseNestedParens(String parenString) {
    }
}
","// ParseNestedParensTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseNestedParens}.
* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.
*/
class ParseNestedParensTest {","// Here's the source code for the ParseNestedParensTest class:

package scenario3;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ParseNestedParensTest {

    @Test
    void testParseNestedParens() {
        List<Integer> expected1 = Arrays.asList(2, 3, 1, 3);
        List<Integer> result1 = ParseNestedParens.parseNestedParens(""(()()) ((())) () ((())()())"");
        assertEquals(expected1, result1);

        List<Integer> expected2 = Arrays.asList(1, 2, 3, 4);
        List<Integer> result2 = ParseNestedParens.parseNestedParens(""() (()) ((())) (((())))"");
        assertEquals(expected2, result2);

        List<Integer> expected3 = Arrays.asList(4);
        List<Integer> result3 = ParseNestedParens.parseNestedParens(""(()(())((())))"");
        assertEquals(expected3, result3);

        List<Integer> expected4 = Arrays.asList(1, 1, 1, 1, 1);
        List<Integer> result4 = ParseNestedParens.parseNestedParens(""() () () () ()"");
        assertEquals(expected4, result4);

        List<Integer> expected5 = Arrays.asList(1, 2, 3, 2, 1);
        List<Integer> result5 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) ()"");
        assertEquals(expected5, result5);

        List<Integer> expected6 = Arrays.asList(1, 2, 3, 2, 1, 2, 3, 2, 1);
        List<Integer> result6 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) () (()) (((()))) (()) ()"");
        assertEquals(expected6, result6);

        List<Integer> expected7 = Arrays.asList(1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1);
        List<Integer> result7 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) ()"");
        assertEquals(expected7, result7);

        List<Integer> expected8 = Arrays.asList(1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1);
        List<Integer> result8 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) ()"");
        assertEquals(expected8, result8);

        List<Integer> expected9 = Arrays.asList(1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1);
        List<Integer> result9 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) ()"");
        assertEquals(expected9, result9);

        List<Integer> expected10 = Arrays.asList(1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1);
        List<Integer> result10 = ParseNestedParens.parseNestedParens(""() (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) () (()) (((()))) (()) ()"");
        assertEquals(expected10, result10);
    }
}"
chatcmpl-6yS04DMxWmLG0NzNFCOluKkQ5DMBV,/HumanEvalJava/src/main/java/scenario3/id_158.java,33.92125201225281,stop,"// FindMax.java
package scenario3;

import java.util.List;

class FindMax {

    /**
     * Write a function that accepts a list of strings.
     * The list contains different words. Return the word with maximum number
     * of unique characters. If multiple strings have maximum number of unique
     * characters, return the one which comes first in lexicographical order.
     *
     * findMax([""name"", ""of"", ""string""]) == ""string""
     * findMax([""name"", ""enam"", ""game""]) == ""enam""
     * findMax([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
     *
     * > findMax([""name"", ""of"", ""string""])
     * ""string""
     * > findMax([""name"", ""enam"", ""game""])
     * ""enam""
     * > findMax([""aaaaaaa"", ""bb"", ""cc""])
     * ""aaaaaaa""
     * > findMax([""abc"", ""cba""])
     * ""abc""
     * > findMax([""play"", ""this"", ""game"", ""of"", ""footbott""])
     * ""footbott""
     * > findMax([""we"", ""are"", ""gonna"", ""rock""])
     * ""gonna""
     * > findMax([""we"", ""are"", ""a"", ""mad"", ""nation""])
     * ""nation""
     * > findMax([""this"", ""is"", ""a"", ""prrk""])
     * ""this""
     * > findMax([""b""])
     * ""b""
     * > findMax([""play"", ""play"", ""play""])
     * ""play""
     */
    public static String findMax(List<String> words) {
    }
}
","// FindMaxTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {","// FindMax.java
package scenario3;

import java.util.*;

class FindMax {

    /**
     * Write a function that accepts a list of strings.
     * The list contains different words. Return the word with maximum number
     * of unique characters. If multiple strings have maximum number of unique
     * characters, return the one which comes first in lexicographical order.
     *
     * findMax([""name"", ""of"", ""string""]) == ""string""
     * findMax([""name"", ""enam"", ""game""]) == ""enam""
     * findMax([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
     *
     * > findMax([""name"", ""of"", ""string""])
     * ""string""
     * > findMax([""name"", ""enam"", ""game""])
     * ""enam""
     * > findMax([""aaaaaaa"", ""bb"", ""cc""])
     * ""aaaaaaa""
     * > findMax([""abc"", ""cba""])
     * ""abc""
     * > findMax([""play"", ""this"", ""game"", ""of"", ""footbott""])
     * ""footbott""
     * > findMax([""we"", ""are"", ""gonna"", ""rock""])
     * ""gonna""
     * > findMax([""we"", ""are"", ""a"", ""mad"", ""nation""])
     * ""nation""
     * > findMax([""this"", ""is"", ""a"", ""prrk""])
     * ""this""
     * > findMax([""b""])
     * ""b""
     * > findMax([""play"", ""play"", ""play""])
     * ""play""
     */
    public static String findMax(List<String> words) {
        String maxWord = """";
        int maxUniqueChars = 0;
        for (String word : words) {
            Set<Character> uniqueChars = new HashSet<>();
            for (char c : word.toCharArray()) {
                uniqueChars.add(c);
            }
            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {
                maxWord = word;
                maxUniqueChars = uniqueChars.size();
            }
        }
        return maxWord;
    }
}

// FindMaxTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
    
    @Test
    void testFindMax1() {
        List<String> words = Arrays.asList(""name"", ""of"", ""string"");
        String expected = ""string"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax2() {
        List<String> words = Arrays.asList(""name"", ""enam"", ""game"");
        String expected = ""enam"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax3() {
        List<String> words = Arrays.asList(""aaaaaaa"", ""bb"", ""cc"");
        String expected = ""aaaaaaa"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax4() {
        List<String> words = Arrays.asList(""abc"", ""cba"");
        String expected = ""abc"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax5() {
        List<String> words = Arrays.asList(""play"", ""this"", ""game"", ""of"", ""footbott"");
        String expected = ""footbott"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax6() {
        List<String> words = Arrays.asList(""we"", ""are"", ""gonna"", ""rock"");
        String expected = ""gonna"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax7() {
        List<String> words = Arrays.asList(""we"", ""are"", ""a"", ""mad"", ""nation"");
        String expected = ""nation"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax8() {
        List<String> words = Arrays.asList(""this"", ""is"", ""a"", ""prrk"");
        String expected = ""this"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax9() {
        List<String> words = Arrays.asList(""b"");
        String expected = ""b"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFindMax10() {
        List<String> words = Arrays.asList(""play"", ""play"", ""play"");
        String expected = ""play"";
        String actual = FindMax.findMax(words);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yS17yMpVe31dxJeVwKiwSvinw7CL,/HumanEvalJava/src/main/java/scenario3/id_19.java,31.86169171333313,stop,"// SortNumbers.java
package scenario3;

class SortNumbers {

    /**
     * Input is a space-delimited string of numbers from 'zero' to 'nine'.
     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
     * Return the string with numbers sorted from smallest to largest
     *
     * > sortNumbers(""three one five"")
     * ""one three five""
     * > sortNumbers("""")
     * """"
     * > sortNumbers(""three"")
     * ""three""
     * > sortNumbers(""three five nine"")
     * ""three five nine""
     * > sortNumbers(""five zero four seven nine eight"")
     * ""zero four five seven eight nine""
     * > sortNumbers(""six five four three two one zero"")
     * ""zero one two three four five six""
     */
    public static String sortNumbers(String numbers) {
    }
}
","// SortNumbersTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {","// SortNumbers.java
package scenario3;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

class SortNumbers {

    /**
     * Input is a space-delimited string of numbers from 'zero' to 'nine'.
     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
     * Return the string with numbers sorted from smallest to largest
     *
     * > sortNumbers(""three one five"")
     * ""one three five""
     * > sortNumbers("""")
     * """"
     * > sortNumbers(""three"")
     * ""three""
     * > sortNumbers(""three five nine"")
     * ""three five nine""
     * > sortNumbers(""five zero four seven nine eight"")
     * ""zero four five seven eight nine""
     * > sortNumbers(""six five four three two one zero"")
     * ""zero one two three four five six""
     */
    public static String sortNumbers(String numbers) {
        if (numbers == null || numbers.isEmpty()) {
            return """";
        }

        Map<String, Integer> numberMap = new HashMap<>();
        numberMap.put(""zero"", 0);
        numberMap.put(""one"", 1);
        numberMap.put(""two"", 2);
        numberMap.put(""three"", 3);
        numberMap.put(""four"", 4);
        numberMap.put(""five"", 5);
        numberMap.put(""six"", 6);
        numberMap.put(""seven"", 7);
        numberMap.put(""eight"", 8);
        numberMap.put(""nine"", 9);

        String[] numberArray = numbers.split("" "");
        Integer[] intArray = new Integer[numberArray.length];

        for (int i = 0; i < numberArray.length; i++) {
            intArray[i] = numberMap.get(numberArray[i]);
        }

        Arrays.sort(intArray, Comparator.naturalOrder());

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < intArray.length; i++) {
            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {
                if (entry.getValue().equals(intArray[i])) {
                    sb.append(entry.getKey()).append("" "");
                    break;
                }
            }
        }

        return sb.toString().trim();
    }
}

// SortNumbersTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {

    @Test
    void testSortNumbersWithValidInput() {
        assertEquals(""one three five"", SortNumbers.sortNumbers(""three one five""));
        assertEquals(""three five nine"", SortNumbers.sortNumbers(""three five nine""));
        assertEquals(""zero four five seven eight nine"", SortNumbers.sortNumbers(""five zero four seven nine eight""));
        assertEquals(""zero one two three four five six"", SortNumbers.sortNumbers(""six five four three two one zero""));
    }

    @Test
    void testSortNumbersWithEmptyInput() {
        assertEquals("""", SortNumbers.sortNumbers(""""));
    }

    @Test
    void testSortNumbersWithSingleNumber() {
        assertEquals(""three"", SortNumbers.sortNumbers(""three""));
    }

    @Test
    void testSortNumbersWithInvalidInput() {
        assertEquals("""", SortNumbers.sortNumbers(""invalid input""));
        assertEquals("""", SortNumbers.sortNumbers(""one two three invalid""));
    }

    @Test
    void testSortNumbersWithDuplicateNumbers() {
        assertEquals(""zero one two three four five six seven eight nine"", SortNumbers.sortNumbers(""zero one two three four five six seven eight nine zero one two three four five six seven eight nine""));
    }

    @Test
    void testSortNumbersWithNumbersInReverseOrder() {
        assertEquals(""zero one two three four five six seven eight nine"", SortNumbers.sortNumbers(""nine eight seven six five four three two one zero""));
    }

    @Test
    void testSortNumbersWithNumbersInRandomOrder() {
        assertEquals(""zero one two three four five six seven eight nine"", SortNumbers.sortNumbers(""five zero four seven nine eight one six two three""));
    }

    @Test
    void testSortNumbersWithNumbersInUpperCase() {
        assertEquals(""zero one two three four five six seven eight nine"", SortNumbers.sortNumbers(""ZERO ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE""));
    }

    @Test
    void testSortNumbersWithNumbersInMixedCase() {
        assertEquals(""zero one two three four five six seven eight nine"", SortNumbers.sortNumbers(""zErO oNe TwO ThReE fOuR fIvE sIx SeVeN eIgHt nInE""));
    }
}"
chatcmpl-6yS2AQ71f8kONx9jYshPJ9yIuipWJ,/HumanEvalJava/src/main/java/scenario3/id_123.java,46.82201862335205,stop,"// GetOddCollatz.java
package scenario3;

import java.util.List;

class GetOddCollatz {

    /**
     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
     *
     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
     * as follows: start with any positive integer n. Then each term is obtained from the
     * previous term as follows: if the previous term is even, the next term is one half of
     * the previous term. If the previous term is odd, the next term is 3 times the previous
     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
     *
     * Note:
     * 1. Collatz(1) is [1].
     * 2. returned list sorted in increasing order.
     *
     * For example:
     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
     *
     * > getOddCollatz(14)
     * [1, 5, 7, 11, 13, 17]
     * > getOddCollatz(5)
     * [1, 5]
     * > getOddCollatz(12)
     * [1, 3, 5]
     * > getOddCollatz(1)
     * [1]
     */
    public static List<Integer> getOddCollatz(int n) {
    }
}
","// GetOddCollatzTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {","// GetOddCollatz.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class GetOddCollatz {

    /**
     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
     *
     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
     * as follows: start with any positive integer n. Then each term is obtained from the
     * previous term as follows: if the previous term is even, the next term is one half of
     * the previous term. If the previous term is odd, the next term is 3 times the previous
     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
     *
     * Note:
     * 1. Collatz(1) is [1].
     * 2. returned list sorted in increasing order.
     *
     * For example:
     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
     *
     * > getOddCollatz(14)
     * [1, 5, 7, 11, 13, 17]
     * > getOddCollatz(5)
     * [1, 5]
     * > getOddCollatz(12)
     * [1, 3, 5]
     * > getOddCollatz(1)
     * [1]
     */
    public static List<Integer> getOddCollatz(int n) {
        List<Integer> oddCollatz = new ArrayList<>();
        oddCollatz.add(1);
        if (n == 1) {
            return oddCollatz;
        }
        int num = n;
        while (num != 1) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                oddCollatz.add(num);
                num = num * 3 + 1;
            }
        }
        oddCollatz.add(num);
        return oddCollatz;
    }
}

// GetOddCollatzTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {
    
    @Test
    void testGetOddCollatzForOne() {
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = GetOddCollatz.getOddCollatz(1);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForFive() {
        List<Integer> expected = Arrays.asList(1, 5);
        List<Integer> actual = GetOddCollatz.getOddCollatz(5);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForTwelve() {
        List<Integer> expected = Arrays.asList(1, 3, 5);
        List<Integer> actual = GetOddCollatz.getOddCollatz(12);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForFourteen() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17);
        List<Integer> actual = GetOddCollatz.getOddCollatz(14);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForTwenty() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17, 19);
        List<Integer> actual = GetOddCollatz.getOddCollatz(20);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForThirty() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17, 19);
        List<Integer> actual = GetOddCollatz.getOddCollatz(30);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForFifty() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17, 19, 23, 27, 31, 41, 47);
        List<Integer> actual = GetOddCollatz.getOddCollatz(50);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForHundred() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17, 19, 23, 27, 31, 41, 47, 59, 71, 75, 77, 83, 87, 91, 107);
        List<Integer> actual = GetOddCollatz.getOddCollatz(100);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForThousand() {
        List<Integer> expected = Arrays.asList(1, 5, 7, 11, 13, 17, 19, 23, 27, 31, 41, 47, 59, 71, 75, 77, 83, 87, 91, 107, 113, 131, 149, 157, 167, 179, 191, 197, 223, 239, 251, 263, 271, 293, 311, 331, 353, 359, 383, 419, 431, 443, 479, 503, 509, 563, 587, 599, 607, 631, 643, 659, 683, 719, 727, 761, 823, 839, 863, 887, 907, 971, 983);
        List<Integer> actual = GetOddCollatz.getOddCollatz(1000);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGetOddCollatzForNegativeNumber() {
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = GetOddCollatz.getOddCollatz(-5);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yS3Dg76E2i1ccoIgzmyYarZyoUA8,/HumanEvalJava/src/main/java/scenario3/id_58.java,31.74276041984558,stop,"// Common.java
package scenario3;

import java.util.List;

class Common {

    /**
     * Return sorted unique common elements for two lists.
     *
     * > common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
     * [1, 5, 653]
     * > common([5, 3, 2, 8], [3, 2])
     * [2, 3]
     * > common([4, 3, 2, 8], [3, 2, 4])
     * [2, 3, 4]
     * > common([4, 3, 2, 8], [])
     * []
     */
    public static List<Object> common(List<Integer> l1, List<Object> l2) {
    }
}
","// CommonTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Common}.
* It contains ten unit test cases for the {@link Common#common(List, List)} method.
*/
class CommonTest {","Here's the source code for the CommonTest class with ten unit test cases for the common() method:

```
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Common}.
 * It contains ten unit test cases for the {@link Common#common(List, List)} method.
 */
class CommonTest {

    @Test
    void testCommonWithTwoNonEmptyLists() {
        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);
        List<Object> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);
        List<Object> expected = Arrays.asList(1, 5, 653);
        List<Object> actual = Common.common(l1, l2);
        Collections.sort(actual);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoListsContainingDuplicates() {
        List<Integer> l1 = Arrays.asList(5, 3, 2, 8);
        List<Object> l2 = Arrays.asList(3, 2);
        List<Object> expected = Arrays.asList(2, 3);
        List<Object> actual = Common.common(l1, l2);
        Collections.sort(actual);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoListsContainingAllElementsInCommon() {
        List<Integer> l1 = Arrays.asList(4, 3, 2, 8);
        List<Object> l2 = Arrays.asList(3, 2, 4);
        List<Object> expected = Arrays.asList(2, 3, 4);
        List<Object> actual = Common.common(l1, l2);
        Collections.sort(actual);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithOneEmptyList() {
        List<Integer> l1 = Arrays.asList(4, 3, 2, 8);
        List<Object> l2 = Collections.emptyList();
        List<Object> expected = Collections.emptyList();
        List<Object> actual = Common.common(l1, l2);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoEmptyLists() {
        List<Integer> l1 = Collections.emptyList();
        List<Object> l2 = Collections.emptyList();
        List<Object> expected = Collections.emptyList();
        List<Object> actual = Common.common(l1, l2);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithOneListContainingNull() {
        List<Integer> l1 = Arrays.asList(1, 2, 3);
        List<Object> l2 = Arrays.asList(null, 2, 3);
        List<Object> expected = Arrays.asList(2, 3);
        List<Object> actual = Common.common(l1, l2);
        Collections.sort(actual);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoListsContainingNull() {
        List<Integer> l1 = Arrays.asList(1, 2, 3, null);
        List<Object> l2 = Arrays.asList(null, 2, 3);
        List<Object> expected = Arrays.asList(2, 3, null);
        List<Object> actual = Common.common(l1, l2);
        Collections.sort(actual);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithOneListContainingOnlyNull() {
        List<Integer> l1 = Arrays.asList(null, null, null);
        List<Object> l2 = Arrays.asList(1, 2, 3);
        List<Object> expected = Collections.emptyList();
        List<Object> actual = Common.common(l1, l2);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoListsContainingOnlyNull() {
        List<Integer> l1 = Arrays.asList(null, null, null);
        List<Object> l2 = Arrays.asList(null, null, null);
        List<Object> expected = Collections.emptyList();
        List<Object> actual = Common.common(l1, l2);
        assertEquals(expected, actual);
    }

    @Test
    void testCommonWithTwoListsContainingDifferentTypes() {
        List<Integer> l1 = Arrays.asList(1, 2, 3);
        List<Object> l2 = Arrays.asList(""1"", ""2"", ""3"");
        List<Object> expected = Collections.emptyList();
        List<Object> actual = Common.common(l1, l2);
        assertEquals(expected, actual);
    }
}
```"
chatcmpl-6yS4GqnRV79cnOsSjTOFTlrmUn0kN,/HumanEvalJava/src/main/java/scenario3/id_162.java,24.26121973991394,stop,"// StringToMd5.java
package scenario3;

class StringToMd5 {

    /**
     * Given a string 'text', return its md5 hash equivalent string.
     * If 'text' is an empty string, return null.
     *
     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
     *
     * > stringToMd5(""Hello world"")
     * ""3e25960a79dbc69b674cd4ec67a72c62""
     * > stringToMd5("""")
     * null
     * > stringToMd5(""A B C"")
     * ""0ef78513b0cb8cef12743f5aeb35f888""
     * > stringToMd5(""password"")
     * ""5f4dcc3b5aa765d61d8327deb882cf99""
     */
    public static String stringToMd5(String text) {
    }
}
","// StringToMd5Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {","import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class StringToMd5 {

    /**
     * Given a string 'text', return its md5 hash equivalent string.
     * If 'text' is an empty string, return null.
     *
     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
     *
     * > stringToMd5(""Hello world"")
     * ""3e25960a79dbc69b674cd4ec67a72c62""
     * > stringToMd5("""")
     * null
     * > stringToMd5(""A B C"")
     * ""0ef78513b0cb8cef12743f5aeb35f888""
     * > stringToMd5(""password"")
     * ""5f4dcc3b5aa765d61d8327deb882cf99""
     */
    public static String stringToMd5(String text) {
        if (text.isEmpty()) {
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] messageDigest = md.digest(text.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : messageDigest) {
                sb.append(String.format(""%02x"", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}

// StringToMd5Test.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {
    @Test
    void testStringToMd5() {
        assertEquals(""3e25960a79dbc69b674cd4ec67a72c62"", StringToMd5.stringToMd5(""Hello world""));
        assertNull(StringToMd5.stringToMd5(""""));
        assertEquals(""0ef78513b0cb8cef12743f5aeb35f888"", StringToMd5.stringToMd5(""A B C""));
        assertEquals(""5f4dcc3b5aa765d61d8327deb882cf99"", StringToMd5.stringToMd5(""password""));
        assertEquals(""d41d8cd98f00b204e9800998ecf8427e"", StringToMd5.stringToMd5(""""));
        assertEquals(""9e107d9d372bb6826bd81d3542a419d6"", StringToMd5.stringToMd5(""The quick brown fox jumps over the lazy dog""));
        assertEquals(""c4ca4238a0b923820dcc509a6f75849b"", StringToMd5.stringToMd5(""1""));
        assertEquals(""c81e728d9d4c2f636f067f89cc14862c"", StringToMd5.stringToMd5(""2""));
        assertEquals(""eccbc87e4b5ce2fe28308fd9f2a7baf3"", StringToMd5.stringToMd5(""3""));
        assertEquals(""a87ff679a2f3e71d9181a67b7542122c"", StringToMd5.stringToMd5(""4""));
    }
}"
chatcmpl-6yS5J2IfDvh0LSQrlPjfmj1oVjdZ6,/HumanEvalJava/src/main/java/scenario3/id_135.java,32.35069942474365,stop,"// CanArrange.java
package scenario3;

import java.util.List;

class CanArrange {

    /**
     * Create a function which returns the largest index of an element which
     * is not greater than or equal to the element immediately preceding it. If
     * no such element exists then return -1. The given array will not contain
     * duplicate values.
     *
     * Examples:
     * canArrange([1,2,4,3,5]) = 3
     * canArrange([1,2,3]) = -1
     *
     * > canArrange([1, 2, 4, 3, 5])
     * 3
     * > canArrange([1, 2, 4, 5])
     * -1
     * > canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10])
     * 2
     * > canArrange([4, 8, 5, 7, 3])
     * 4
     * > canArrange([])
     * -1
     */
    public static int canArrange(List<Object> arr) {
    }
}
","// CanArrangeTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {","// CanArrange.java
package scenario3;

import java.util.List;

class CanArrange {

    /**
     * Create a function which returns the largest index of an element which
     * is not greater than or equal to the element immediately preceding it. If
     * no such element exists then return -1. The given array will not contain
     * duplicate values.
     *
     * Examples:
     * canArrange([1,2,4,3,5]) = 3
     * canArrange([1,2,3]) = -1
     *
     * > canArrange([1, 2, 4, 3, 5])
     * 3
     * > canArrange([1, 2, 4, 5])
     * -1
     * > canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10])
     * 2
     * > canArrange([4, 8, 5, 7, 3])
     * 4
     * > canArrange([])
     * -1
     */
    public static int canArrange(List<Integer> arr) {
        if (arr.isEmpty()) {
            return -1;
        }
        int largestIndex = -1;
        for (int i = 1; i < arr.size(); i++) {
            if (arr.get(i) < arr.get(i - 1)) {
                largestIndex = i - 1;
            }
        }
        return largestIndex;
    }
}

// CanArrangeTest.java
package scenario3;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {
    
    @Test
    void testCanArrange1() {
        List<Integer> arr = Arrays.asList(1, 2, 4, 3, 5);
        int expected = 3;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange2() {
        List<Integer> arr = Arrays.asList(1, 2, 3);
        int expected = -1;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange3() {
        List<Integer> arr = Arrays.asList(1, 2, 4, 5);
        int expected = -1;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange4() {
        List<Integer> arr = Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10);
        int expected = 2;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange5() {
        List<Integer> arr = Arrays.asList(4, 8, 5, 7, 3);
        int expected = 4;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange6() {
        List<Integer> arr = Collections.emptyList();
        int expected = -1;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange7() {
        List<Integer> arr = Arrays.asList(1);
        int expected = -1;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange8() {
        List<Integer> arr = Arrays.asList(1, 2);
        int expected = -1;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange9() {
        List<Integer> arr = Arrays.asList(2, 1);
        int expected = 0;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
    
    @Test
    void testCanArrange10() {
        List<Integer> arr = Arrays.asList(1, 2, 3, 2, 1);
        int expected = 2;
        int actual = CanArrange.canArrange(arr);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yS6Mu17Nk9CBqkYjl5Y9zxaM5r3Y,/HumanEvalJava/src/main/java/scenario3/id_134.java,30.477521419525146,stop,"// CheckIfLastCharIsALetter.java
package scenario3;

class CheckIfLastCharIsALetter {

    /**
     * * Create a function that returns True if the last character
     * of a given string is an alphabetical character and is not
     * a part of a word, and False otherwise.
     * Note: ""word"" is a group of characters separated by space.
     *
     * Examples:
     * checkIfLastCharIsALetter(""apple pie"") ➞ False
     * checkIfLastCharIsALetter(""apple pi e"") ➞ True
     * checkIfLastCharIsALetter(""apple pi e "") ➞ False
     * checkIfLastCharIsALetter("""") ➞ False
     *
     * > checkIfLastCharIsALetter(""apple"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e"")
     * true
     * > checkIfLastCharIsALetter(""eeeee"")
     * false
     * > checkIfLastCharIsALetter(""A"")
     * true
     * > checkIfLastCharIsALetter(""Pumpkin pie "")
     * false
     * > checkIfLastCharIsALetter(""Pumpkin pie 1"")
     * false
     * > checkIfLastCharIsALetter("""")
     * false
     * > checkIfLastCharIsALetter(""eeeee e "")
     * false
     * > checkIfLastCharIsALetter(""apple pie"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e "")
     * false
     */
    public static Boolean checkIfLastCharIsALetter(String txt) {
    }
}
","// CheckIfLastCharIsALetterTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {","// CheckIfLastCharIsALetter.java
package scenario3;

class CheckIfLastCharIsALetter {

    /**
     * * Create a function that returns True if the last character
     * of a given string is an alphabetical character and is not
     * a part of a word, and False otherwise.
     * Note: ""word"" is a group of characters separated by space.
     *
     * Examples:
     * checkIfLastCharIsALetter(""apple pie"") ➞ False
     * checkIfLastCharIsALetter(""apple pi e"") ➞ True
     * checkIfLastCharIsALetter(""apple pi e "") ➞ False
     * checkIfLastCharIsALetter("""") ➞ False
     *
     * > checkIfLastCharIsALetter(""apple"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e"")
     * true
     * > checkIfLastCharIsALetter(""eeeee"")
     * false
     * > checkIfLastCharIsALetter(""A"")
     * true
     * > checkIfLastCharIsALetter(""Pumpkin pie "")
     * false
     * > checkIfLastCharIsALetter(""Pumpkin pie 1"")
     * false
     * > checkIfLastCharIsALetter("""")
     * false
     * > checkIfLastCharIsALetter(""eeeee e "")
     * false
     * > checkIfLastCharIsALetter(""apple pie"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e "")
     * false
     */
    public static Boolean checkIfLastCharIsALetter(String txt) {
        if (txt == null || txt.isEmpty()) {
            return false;
        }
        String[] words = txt.split("" "");
        String lastWord = words[words.length - 1];
        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {
            return true;
        }
        return false;
    }
}

// CheckIfLastCharIsALetterTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {

    @Test
    void testEmptyString() {
        assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
    }

    @Test
    void testSingleLetter() {
        assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
    }

    @Test
    void testSingleLetterWithSpace() {
        assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A ""));
    }

    @Test
    void testSingleLetterWithMultipleSpaces() {
        assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A   ""));
    }

    @Test
    void testSingleLetterWithWord() {
        assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
    }

    @Test
    void testMultipleLettersWithWord() {
        assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pie""));
    }

    @Test
    void testMultipleLettersWithSpace() {
        assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
    }

    @Test
    void testMultipleLettersWithSpaceAndExtraSpace() {
        assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e ""));
    }

    @Test
    void testMultipleWordsWithSpaceAndExtraSpace() {
        assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
    }

    @Test
    void testMultipleWordsWithSpaceAndNumber() {
        assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
    }
}"
chatcmpl-6yS7PzqldnaTymHUMNsQ09Yxw6ilt,/HumanEvalJava/src/main/java/scenario3/id_163.java,33.671014070510864,stop,"// GenerateIntegers.java
package scenario3;

import java.util.List;

class GenerateIntegers {

    /**
     * Given two positive integers a and b, return the even digits between a
     * and b, in ascending order.
     *
     * For example:
     * generateIntegers(2, 8) => [2, 4, 6, 8]
     * generateIntegers(8, 2) => [2, 4, 6, 8]
     * generateIntegers(10, 14) => []
     *
     * > generateIntegers(2, 10)
     * [2, 4, 6, 8]
     * > generateIntegers(10, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(132, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(17, 89)
     * []
     */
    public static List<Object> generateIntegers(int a, int b) {
    }
}
","// GenerateIntegersTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {","// GenerateIntegers.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class GenerateIntegers {

    /**
     * Given two positive integers a and b, return the even digits between a
     * and b, in ascending order.
     *
     * For example:
     * generateIntegers(2, 8) => [2, 4, 6, 8]
     * generateIntegers(8, 2) => [2, 4, 6, 8]
     * generateIntegers(10, 14) => []
     *
     * > generateIntegers(2, 10)
     * [2, 4, 6, 8]
     * > generateIntegers(10, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(132, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(17, 89)
     * []
     */
    public static List<Integer> generateIntegers(int a, int b) {
        List<Integer> result = new ArrayList<>();
        if (a > b) {
            int temp = a;
            a = b;
            b = temp;
        }
        for (int i = a; i <= b; i++) {
            int num = i;
            while (num > 0) {
                int digit = num % 10;
                if (digit % 2 == 0) {
                    result.add(i);
                    break;
                }
                num /= 10;
            }
        }
        return result;
    }
}

// GenerateIntegersTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {
    
    @Test
    void testGenerateIntegers1() {
        List<Integer> expected = Arrays.asList(2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(2, 8);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers2() {
        List<Integer> expected = Arrays.asList(2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(8, 2);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers3() {
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = GenerateIntegers.generateIntegers(10, 14);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers4() {
        List<Integer> expected = Arrays.asList(2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(2, 10);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers5() {
        List<Integer> expected = Arrays.asList(2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(10, 2);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers6() {
        List<Integer> expected = Arrays.asList(2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(132, 2);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers7() {
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = GenerateIntegers.generateIntegers(17, 89);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers8() {
        List<Integer> expected = Arrays.asList(0, 2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(0, 8);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers9() {
        List<Integer> expected = Arrays.asList(0, 2, 4, 6, 8);
        List<Integer> actual = GenerateIntegers.generateIntegers(8, 0);
        assertEquals(expected, actual);
    }
    
    @Test
    void testGenerateIntegers10() {
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = GenerateIntegers.generateIntegers(1, 1);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6yS8ShMccaC7QPpaSWjfDSYHerDvt,/HumanEvalJava/src/main/java/scenario3/id_59.java,20.194982767105103,stop,"// LargestPrimeFactor.java
package scenario3;

class LargestPrimeFactor {

    /**
     * Return the largest prime factor of n. Assume n > 1 and is not a prime.
     *
     * > largestPrimeFactor(2048)
     * 2
     * > largestPrimeFactor(15)
     * 5
     * > largestPrimeFactor(27)
     * 3
     * > largestPrimeFactor(63)
     * 7
     * > largestPrimeFactor(330)
     * 11
     * > largestPrimeFactor(13195)
     * 29
     */
    public static int largestPrimeFactor(int n) {
    }
}
","// LargestPrimeFactorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {","// LargestPrimeFactor.java
package scenario3;

class LargestPrimeFactor {

    /**
     * Return the largest prime factor of n. Assume n > 1 and is not a prime.
     *
     * > largestPrimeFactor(2048)
     * 2
     * > largestPrimeFactor(15)
     * 5
     * > largestPrimeFactor(27)
     * 3
     * > largestPrimeFactor(63)
     * 7
     * > largestPrimeFactor(330)
     * 11
     * > largestPrimeFactor(13195)
     * 29
     */
    public static int largestPrimeFactor(int n) {
        int largestPrime = 2;
        while (n > largestPrime) {
            if (n % largestPrime == 0) {
                n /= largestPrime;
            } else {
                largestPrime++;
            }
        }
        return largestPrime;
    }
}

// LargestPrimeFactorTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {
    @Test
    void testLargestPrimeFactor2048() {
        assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2048));
    }

    @Test
    void testLargestPrimeFactor15() {
        assertEquals(5, LargestPrimeFactor.largestPrimeFactor(15));
    }

    @Test
    void testLargestPrimeFactor27() {
        assertEquals(3, LargestPrimeFactor.largestPrimeFactor(27));
    }

    @Test
    void testLargestPrimeFactor63() {
        assertEquals(7, LargestPrimeFactor.largestPrimeFactor(63));
    }

    @Test
    void testLargestPrimeFactor330() {
        assertEquals(11, LargestPrimeFactor.largestPrimeFactor(330));
    }

    @Test
    void testLargestPrimeFactor13195() {
        assertEquals(29, LargestPrimeFactor.largestPrimeFactor(13195));
    }

    @Test
    void testLargestPrimeFactor2() {
        assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2));
    }

    @Test
    void testLargestPrimeFactor3() {
        assertEquals(3, LargestPrimeFactor.largestPrimeFactor(3));
    }

    @Test
    void testLargestPrimeFactor4() {
        assertEquals(2, LargestPrimeFactor.largestPrimeFactor(4));
    }

    @Test
    void testLargestPrimeFactor5() {
        assertEquals(5, LargestPrimeFactor.largestPrimeFactor(5));
    }
}"
chatcmpl-6yS9YvLmBsyzgQ4yaTEvndnQTuSmi,/HumanEvalJava/src/main/java/scenario3/id_122.java,47.74408411979675,stop,"// AddElements.java
package scenario3;

import java.util.List;

class AddElements {

    /**
     * * Given a non-empty array of integers arr and an integer k, return
     * the sum of the elements with at most two digits from the first k elements of arr.
     *
     * Example:
     *
     * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
     * Output: 24 # sum of 21 + 3
     *
     * Constraints:
     * 1. 1 <= len(arr) <= 100
     * 2. 1 <= k <= len(arr)
     *
     * > addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)
     * -4
     * > addElements([111, 121, 3, 4000, 5, 6], 2)
     * 0
     * > addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)
     * 125
     * > addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
     * 24
     * > addElements([1], 1)
     * 1
     */
    public static int addElements(List<Integer> arr, int k) {
    }
}
","// AddElementsTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {","// AddElements.java
package scenario3;

import java.util.List;

class AddElements {

    /**
     * * Given a non-empty array of integers arr and an integer k, return
     * the sum of the elements with at most two digits from the first k elements of arr.
     *
     * Example:
     *
     * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
     * Output: 24 # sum of 21 + 3
     *
     * Constraints:
     * 1. 1 <= len(arr) <= 100
     * 2. 1 <= k <= len(arr)
     *
     * > addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)
     * -4
     * > addElements([111, 121, 3, 4000, 5, 6], 2)
     * 0
     * > addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)
     * 125
     * > addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
     * 24
     * > addElements([1], 1)
     * 1
     */
    public static int addElements(List<Integer> arr, int k) {
        int sum = 0;
        for (int i = 0; i < k && i < arr.size(); i++) {
            int num = arr.get(i);
            if (num >= 10 && num <= 99 || num <= -10 && num >= -99) {
                sum += num;
            }
        }
        return sum;
    }
}

// AddElementsTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {

    @Test
    void testAddElements1() {
        List<Integer> arr = Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99);
        int k = 3;
        int expected = -4;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements2() {
        List<Integer> arr = Arrays.asList(111, 121, 3, 4000, 5, 6);
        int k = 2;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements3() {
        List<Integer> arr = Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9);
        int k = 4;
        int expected = 125;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements4() {
        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);
        int k = 4;
        int expected = 24;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements5() {
        List<Integer> arr = Arrays.asList(1);
        int k = 1;
        int expected = 1;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements6() {
        List<Integer> arr = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90);
        int k = 9;
        int expected = 450;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements7() {
        List<Integer> arr = Arrays.asList(-10, -20, -30, -40, -50, -60, -70, -80, -90);
        int k = 9;
        int expected = -450;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements8() {
        List<Integer> arr = Arrays.asList(100, 200, 300, 400, 500, 600, 700, 800, 900);
        int k = 9;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements9() {
        List<Integer> arr = Arrays.asList(-100, -200, -300, -400, -500, -600, -700, -800, -900);
        int k = 9;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    @Test
    void testAddElements10() {
        List<Integer> arr = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90);
        int k = 5;
        int expected = 50;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6ySAYVYgwmJnJb26Ce6uVkvpwpN8F,/HumanEvalJava/src/main/java/scenario3/id_18.java,24.271028757095337,stop,"// HowManyTimes.java
package scenario3;

class HowManyTimes {

    /**
     * Find how many times a given substring can be found in the original string. Count overlapping cases.
     *
     * > howManyTimes("""", ""a"")
     * 0
     * > howManyTimes(""aaa"", ""a"")
     * 3
     * > howManyTimes(""aaaa"", ""aa"")
     * 3
     * > howManyTimes("""", ""x"")
     * 0
     * > howManyTimes(""xyxyxyx"", ""x"")
     * 4
     * > howManyTimes(""cacacacac"", ""cac"")
     * 4
     * > howManyTimes(""john doe"", ""john"")
     * 1
     */
    public static int howManyTimes(String string, String substring) {
    }
}
","// HowManyTimesTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {","// HowManyTimes.java
package scenario3;

class HowManyTimes {

    /**
     * Find how many times a given substring can be found in the original string. Count overlapping cases.
     *
     * > howManyTimes("""", ""a"")
     * 0
     * > howManyTimes(""aaa"", ""a"")
     * 3
     * > howManyTimes(""aaaa"", ""aa"")
     * 3
     * > howManyTimes("""", ""x"")
     * 0
     * > howManyTimes(""xyxyxyx"", ""x"")
     * 4
     * > howManyTimes(""cacacacac"", ""cac"")
     * 4
     * > howManyTimes(""john doe"", ""john"")
     * 1
     */
    public static int howManyTimes(String string, String substring) {
        if (string == null || substring == null || substring.isEmpty()) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i <= string.length() - substring.length(); i++) {
            if (string.substring(i, i + substring.length()).equals(substring)) {
                count++;
            }
        }
        return count;
    }
}

// HowManyTimesTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {

    @Test
    void testEmptyString() {
        assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
    }

    @Test
    void testSingleCharString() {
        assertEquals(3, HowManyTimes.howManyTimes(""aaa"", ""a""));
    }

    @Test
    void testMultipleCharString() {
        assertEquals(3, HowManyTimes.howManyTimes(""aaaa"", ""aa""));
    }

    @Test
    void testEmptySubstring() {
        assertEquals(0, HowManyTimes.howManyTimes(""xyxyxyx"", """"));
    }

    @Test
    void testMultipleOccurrences() {
        assertEquals(4, HowManyTimes.howManyTimes(""xyxyxyx"", ""x""));
    }

    @Test
    void testOverlappingOccurrences() {
        assertEquals(4, HowManyTimes.howManyTimes(""cacacacac"", ""cac""));
    }

    @Test
    void testSingleOccurrence() {
        assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""john""));
    }

    @Test
    void testSubstringLongerThanString() {
        assertEquals(0, HowManyTimes.howManyTimes(""a"", ""aa""));
    }

    @Test
    void testNullString() {
        assertEquals(0, HowManyTimes.howManyTimes(null, ""a""));
    }

    @Test
    void testNullSubstring() {
        assertEquals(0, HowManyTimes.howManyTimes(""aaa"", null));
    }
}"
chatcmpl-6ySBbFmPguq2WydO13Prt8xPHBtG8,/HumanEvalJava/src/main/java/scenario3/id_159.java,38.78426504135132,stop,"// Eat.java
package scenario3;

import java.util.List;

class Eat {

    /**
     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,
     * but now you need to eat more carrots to complete the day's meals.
     * you should return an array of [ total number of eaten carrots after your meals,
     * the number of carrots left after your meals ]
     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
     *
     * Example:
     * * eat(5, 6, 10) -> [11, 4]
     * * eat(4, 8, 9) -> [12, 1]
     * * eat(1, 10, 10) -> [11, 0]
     * * eat(2, 11, 5) -> [7, 0]
     *
     * Variables:
     *
     * @number : integer
     * the number of carrots that you have eaten.
     * @need : integer
     * the number of carrots that you need to eat.
     * @remaining : integer
     * the number of remaining carrots that exist in stock
     *
     * Constrain:
     * * 0 <= number <= 1000
     * * 0 <= need <= 1000
     * * 0 <= remaining <= 1000
     *
     * Have fun :)
     *
     * > eat(5, 6, 10)
     * [11, 4]
     * > eat(4, 8, 9)
     * [12, 1]
     * > eat(1, 10, 10)
     * [11, 0]
     * > eat(2, 11, 5)
     * [7, 0]
     * > eat(4, 5, 7)
     * [9, 2]
     * > eat(4, 5, 1)
     * [5, 0]
     */
    public static List<Integer> eat(int number, int need, int remaining) {
    }
}
","// EatTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {","// Here's the source code for the Eat class and the EatTest class with ten unit test cases for the eat method.

// Eat.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class Eat {

    /**
     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,
     * but now you need to eat more carrots to complete the day's meals.
     * you should return an array of [ total number of eaten carrots after your meals,
     * the number of carrots left after your meals ]
     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
     *
     * Example:
     * * eat(5, 6, 10) -> [11, 4]
     * * eat(4, 8, 9) -> [12, 1]
     * * eat(1, 10, 10) -> [11, 0]
     * * eat(2, 11, 5) -> [7, 0]
     *
     * Variables:
     *
     * @number : integer
     * the number of carrots that you have eaten.
     * @need : integer
     * the number of carrots that you need to eat.
     * @remaining : integer
     * the number of remaining carrots that exist in stock
     *
     * Constrain:
     * * 0 <= number <= 1000
     * * 0 <= need <= 1000
     * * 0 <= remaining <= 1000
     *
     * Have fun :)
     *
     * > eat(5, 6, 10)
     * [11, 4]
     * > eat(4, 8, 9)
     * [12, 1]
     * > eat(1, 10, 10)
     * [11, 0]
     * > eat(2, 11, 5)
     * [7, 0]
     * > eat(4, 5, 7)
     * [9, 2]
     * > eat(4, 5, 1)
     * [5, 0]
     */
    public static List<Integer> eat(int number, int need, int remaining) {
        List<Integer> result = new ArrayList<>();
        int totalEaten = number + need;
        int leftOver = remaining - need;
        if (leftOver < 0) {
            totalEaten += leftOver;
            leftOver = 0;
        }
        result.add(totalEaten);
        result.add(leftOver);
        return result;
    }
}

// EatTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {

    @Test
    void testEat1() {
        List<Integer> result = Eat.eat(5, 6, 10);
        assertEquals(11, result.get(0));
        assertEquals(4, result.get(1));
    }

    @Test
    void testEat2() {
        List<Integer> result = Eat.eat(4, 8, 9);
        assertEquals(12, result.get(0));
        assertEquals(1, result.get(1));
    }

    @Test
    void testEat3() {
        List<Integer> result = Eat.eat(1, 10, 10);
        assertEquals(11, result.get(0));
        assertEquals(0, result.get(1));
    }

    @Test
    void testEat4() {
        List<Integer> result = Eat.eat(2, 11, 5);
        assertEquals(7, result.get(0));
        assertEquals(0, result.get(1));
    }

    @Test
    void testEat5() {
        List<Integer> result = Eat.eat(4, 5, 7);
        assertEquals(9, result.get(0));
        assertEquals(2, result.get(1));
    }

    @Test
    void testEat6() {
        List<Integer> result = Eat.eat(4, 5, 1);
        assertEquals(5, result.get(0));
        assertEquals(0, result.get(1));
    }

    @Test
    void testEat7() {
        List<Integer> result = Eat.eat(0, 0, 0);
        assertEquals(0, result.get(0));
        assertEquals(0, result.get(1));
    }

    @Test
    void testEat8() {
        List<Integer> result = Eat.eat(1000, 0, 1000);
        assertEquals(1000, result.get(0));
        assertEquals(1000, result.get(1));
    }

    @Test
    void testEat9() {
        List<Integer> result = Eat.eat(0, 1000, 0);
        assertEquals(1000, result.get(0));
        assertEquals(0, result.get(1));
    }

    @Test
    void testEat10() {
        List<Integer> result = Eat.eat(1000, 1000, 1000);
        assertEquals(2000, result.get(0));
        assertEquals(0, result.get(1));
    }
}"
chatcmpl-6ySCezT5xzTHvzDKI9T04ZnoNUNqh,/HumanEvalJava/src/main/java/scenario3/id_63.java,22.981115341186523,stop,"// Fibfib.java
package scenario3;

class Fibfib {

    /**
     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fibfib(0) == 0
     * fibfib(1) == 0
     * fibfib(2) == 1
     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.
     *
     * > fibfib(2)
     * 1
     * > fibfib(1)
     * 0
     * > fibfib(5)
     * 4
     * > fibfib(8)
     * 24
     * > fibfib(10)
     * 81
     * > fibfib(12)
     * 274
     * > fibfib(14)
     * 927
     */
    public static int fibfib(int n) {
    }
}
","// FibfibTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {","// Fibfib.java
package scenario3;

class Fibfib {

    /**
     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fibfib(0) == 0
     * fibfib(1) == 0
     * fibfib(2) == 1
     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.
     *
     * > fibfib(2)
     * 1
     * > fibfib(1)
     * 0
     * > fibfib(5)
     * 4
     * > fibfib(8)
     * 24
     * > fibfib(10)
     * 81
     * > fibfib(12)
     * 274
     * > fibfib(14)
     * 927
     */
    public static int fibfib(int n) {
        if (n == 0 || n == 1) {
            return 0;
        } else if (n == 2) {
            return 1;
        } else {
            int[] fib = new int[n + 1];
            fib[0] = 0;
            fib[1] = 0;
            fib[2] = 1;
            for (int i = 3; i <= n; i++) {
                fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];
            }
            return fib[n];
        }
    }
}

// FibfibTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {
    @Test
    void testFibfib0() {
        assertEquals(0, Fibfib.fibfib(0));
    }

    @Test
    void testFibfib1() {
        assertEquals(0, Fibfib.fibfib(1));
    }

    @Test
    void testFibfib2() {
        assertEquals(1, Fibfib.fibfib(2));
    }

    @Test
    void testFibfib3() {
        assertEquals(1, Fibfib.fibfib(3));
    }

    @Test
    void testFibfib4() {
        assertEquals(2, Fibfib.fibfib(4));
    }

    @Test
    void testFibfib5() {
        assertEquals(4, Fibfib.fibfib(5));
    }

    @Test
    void testFibfib6() {
        assertEquals(9, Fibfib.fibfib(6));
    }

    @Test
    void testFibfib7() {
        assertEquals(20, Fibfib.fibfib(7));
    }

    @Test
    void testFibfib8() {
        assertEquals(24, Fibfib.fibfib(8));
    }

    @Test
    void testFibfib9() {
        assertEquals(81, Fibfib.fibfib(10));
    }
}"
chatcmpl-6ySDhTJetF4THdEIU2hR3d2ZJwZJY,/HumanEvalJava/src/main/java/scenario3/id_7.java,33.136115074157715,stop,"// FilterBySubstring.java
package scenario3;

import java.util.List;

class FilterBySubstring {

    /**
     * Filter an input list of strings only for ones that contain given substring
     * > filterBySubstring([], ""a"")
     * []
     * > filterBySubstring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""bacd"", ""array""]
     * > filterBySubstring([], ""john"")
     * []
     * > filterBySubstring([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx"")
     * [""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run"")
     * [""grunt"", ""prune""]
     */
    public static List<Object> filterBySubstring(List<Object> strings, String substring) {
    }
}
","// FilterBySubstringTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {","// FilterBySubstring.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class FilterBySubstring {

    /**
     * Filter an input list of strings only for ones that contain given substring
     * > filterBySubstring([], ""a"")
     * []
     * > filterBySubstring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""bacd"", ""array""]
     * > filterBySubstring([], ""john"")
     * []
     * > filterBySubstring([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx"")
     * [""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run"")
     * [""grunt"", ""prune""]
     */
    public static List<String> filterBySubstring(List<String> strings, String substring) {
        List<String> filteredStrings = new ArrayList<>();
        for (String str : strings) {
            if (str.contains(substring)) {
                filteredStrings.add(str);
            }
        }
        return filteredStrings;
    }
}

// FilterBySubstringTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {

    @Test
    void testEmptyList() {
        List<String> input = Arrays.asList();
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""a""));
    }

    @Test
    void testNoMatch() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""j""));
    }

    @Test
    void testSingleMatch() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList(""abc"");
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""a""));
    }

    @Test
    void testMultipleMatches() {
        List<String> input = Arrays.asList(""abc"", ""bacd"", ""cde"", ""array"");
        List<String> expectedOutput = Arrays.asList(""abc"", ""bacd"", ""array"");
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""a""));
    }

    @Test
    void testMatchAtBeginning() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList(""abc"");
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""ab""));
    }

    @Test
    void testMatchAtEnd() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList(""abc"");
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""bc""));
    }

    @Test
    void testMatchInMiddle() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList(""abc"");
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""b""));
    }

    @Test
    void testMatchCaseSensitive() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""A""));
    }

    @Test
    void testMatchSubstringIsLonger() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""abcd""));
    }

    @Test
    void testMatchSubstringIsShorter() {
        List<String> input = Arrays.asList(""abc"", ""def"", ""ghi"");
        List<String> expectedOutput = Arrays.asList();
        assertEquals(expectedOutput, FilterBySubstring.filterBySubstring(input, ""ab""));
    }
}"
chatcmpl-6ySEklWHMpeWoO9M1ciX1ceF8HVPC,/HumanEvalJava/src/main/java/scenario3/id_34.java,48.620368003845215,stop,"// Unique.java
package scenario3;

import java.util.List;

class Unique {

    /**
     * Return sorted unique elements in a list
     *
     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [0, 2, 3, 5, 9, 123]
     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [0, 2, 3, 5, 9, 123]
     */
    public static List<Integer> unique(List<Integer> l) {
    }
}
","// UniqueTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {","// UniqueTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {
    
    @Test
    void testUniqueWithEmptyList() {
        List<Integer> l = Arrays.asList();
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithOneElementList() {
        List<Integer> l = Arrays.asList(5);
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithAllElementsUnique() {
        List<Integer> l = Arrays.asList(5, 3, 2, 9, 0, 123);
        List<Integer> expected = Arrays.asList(0, 2, 3, 5, 9, 123);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithAllElementsSame() {
        List<Integer> l = Arrays.asList(5, 5, 5, 5, 5, 5);
        List<Integer> expected = Arrays.asList(5);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithSomeElementsRepeated() {
        List<Integer> l = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);
        List<Integer> expected = Arrays.asList(0, 2, 3, 5, 9, 123);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithNegativeElements() {
        List<Integer> l = Arrays.asList(-5, -3, -2, -9, 0, -123);
        List<Integer> expected = Arrays.asList(-123, -9, -5, -3, -2, 0);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithMixedElements() {
        List<Integer> l = Arrays.asList(5, -3, 5, -2, 3, 3, -9, 0, 123);
        List<Integer> expected = Arrays.asList(-9, -3, -2, 0, 3, 5, 123);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithNullList() {
        List<Integer> l = null;
        assertThrows(NullPointerException.class, () -> Unique.unique(l));
    }
    
    @Test
    void testUniqueWithLargeList() {
        List<Integer> l = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                                          21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                                          41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                                          61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                                          81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                                               21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                                               41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                                               61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                                               81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
    
    @Test
    void testUniqueWithDuplicateElements() {
        List<Integer> l = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> actual = Unique.unique(l);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6ySFnKMUyWzsu79uMgRBvHjYJjlvX,/HumanEvalJava/src/main/java/scenario3/id_118.java,38.21482729911804,stop,"// GetClosestVowel.java
package scenario3;

class GetClosestVowel {

    /**
     * You are given a word. Your task is to find the closest vowel that stands between
     * two consonants from the right side of the word (case sensitive).
     *
     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't
     * find any vowel met the above condition.
     *
     * You may assume that the given string contains English letter only.
     *
     * Example:
     * getClosestVowel(""yogurt"") ==> ""u""
     * getClosestVowel(""FULL"") ==> ""U""
     * getClosestVowel(""quick"") ==> """"
     * getClosestVowel(""ab"") ==> """"
     *
     * > getClosestVowel(""yogurt"")
     * ""u""
     * > getClosestVowel(""full"")
     * ""u""
     * > getClosestVowel(""easy"")
     * """"
     * > getClosestVowel(""eAsy"")
     * """"
     * > getClosestVowel(""ali"")
     * """"
     * > getClosestVowel(""bad"")
     * ""a""
     * > getClosestVowel(""most"")
     * ""o""
     * > getClosestVowel(""ab"")
     * """"
     * > getClosestVowel(""ba"")
     * """"
     * > getClosestVowel(""quick"")
     * """"
     * > getClosestVowel(""anime"")
     * ""i""
     * > getClosestVowel(""Asia"")
     * """"
     * > getClosestVowel(""Above"")
     * ""o""
     */
    public static String getClosestVowel(String word) {
    }
}
","// GetClosestVowelTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {","// GetClosestVowel.java
package scenario3;

class GetClosestVowel {

    /**
     * You are given a word. Your task is to find the closest vowel that stands between
     * two consonants from the right side of the word (case sensitive).
     *
     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't
     * find any vowel met the above condition.
     *
     * You may assume that the given string contains English letter only.
     *
     * Example:
     * getClosestVowel(""yogurt"") ==> ""u""
     * getClosestVowel(""FULL"") ==> ""U""
     * getClosestVowel(""quick"") ==> """"
     * getClosestVowel(""ab"") ==> """"
     *
     * > getClosestVowel(""yogurt"")
     * ""u""
     * > getClosestVowel(""full"")
     * ""u""
     * > getClosestVowel(""easy"")
     * """"
     * > getClosestVowel(""eAsy"")
     * """"
     * > getClosestVowel(""ali"")
     * """"
     * > getClosestVowel(""bad"")
     * ""a""
     * > getClosestVowel(""most"")
     * ""o""
     * > getClosestVowel(""ab"")
     * """"
     * > getClosestVowel(""ba"")
     * """"
     * > getClosestVowel(""quick"")
     * """"
     * > getClosestVowel(""anime"")
     * ""i""
     * > getClosestVowel(""Asia"")
     * """"
     * > getClosestVowel(""Above"")
     * ""o""
     */
    public static String getClosestVowel(String word) {
        String vowels = ""aeiouAEIOU"";
        int index = -1;
        for (int i = word.length() - 2; i > 0; i--) {
            if (vowels.indexOf(word.charAt(i)) != -1) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            return """";
        }
        for (int i = index - 1; i > 0; i--) {
            if (vowels.indexOf(word.charAt(i)) == -1 && vowels.indexOf(word.charAt(i + 1)) != -1 && vowels.indexOf(word.charAt(i - 1)) != -1) {
                return String.valueOf(word.charAt(i));
            }
        }
        return """";
    }
}

// GetClosestVowelTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {
    @Test
    void testGetClosestVowel1() {
        assertEquals(""u"", GetClosestVowel.getClosestVowel(""yogurt""));
    }

    @Test
    void testGetClosestVowel2() {
        assertEquals(""U"", GetClosestVowel.getClosestVowel(""FULL""));
    }

    @Test
    void testGetClosestVowel3() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""quick""));
    }

    @Test
    void testGetClosestVowel4() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""ab""));
    }

    @Test
    void testGetClosestVowel5() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""eAsy""));
    }

    @Test
    void testGetClosestVowel6() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""ali""));
    }

    @Test
    void testGetClosestVowel7() {
        assertEquals(""a"", GetClosestVowel.getClosestVowel(""bad""));
    }

    @Test
    void testGetClosestVowel8() {
        assertEquals(""o"", GetClosestVowel.getClosestVowel(""most""));
    }

    @Test
    void testGetClosestVowel9() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""ba""));
    }

    @Test
    void testGetClosestVowel10() {
        assertEquals(""i"", GetClosestVowel.getClosestVowel(""anime""));
    }

    @Test
    void testGetClosestVowel11() {
        assertEquals("""", GetClosestVowel.getClosestVowel(""Asia""));
    }

    @Test
    void testGetClosestVowel12() {
        assertEquals(""o"", GetClosestVowel.getClosestVowel(""Above""));
    }
}"
chatcmpl-6ySGqoOcprkMwdr6ja2lh84zjXxiq,/HumanEvalJava/src/main/java/scenario3/id_22.java,37.837119340896606,stop,"// FilterIntegers.java
package scenario3;

import java.util.List;

class FilterIntegers {

    /**
     * Filter given list of any Java values only for integers.
     *
     * > filterIntegers([""a"", 3.14, 5])
     * [5]
     * > filterIntegers([1, 2, 3, ""abc"", {}, []])
     * [1, 2, 3]
     * > filterIntegers([])
     * []
     * > filterIntegers([4, {}, [], 23.2, 9, ""adasd""])
     * [4, 9]
     * > filterIntegers([3, ""c"", 3, 3, ""a"", ""b""])
     * [3, 3, 3]
     */
    public static List<Object> filterIntegers(List<Object> values) {
    }
}
","// FilterIntegersTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {","// FilterIntegers.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class FilterIntegers {

    /**
     * Filter given list of any Java values only for integers.
     *
     * > filterIntegers([""a"", 3.14, 5])
     * [5]
     * > filterIntegers([1, 2, 3, ""abc"", {}, []])
     * [1, 2, 3]
     * > filterIntegers([])
     * []
     * > filterIntegers([4, {}, [], 23.2, 9, ""adasd""])
     * [4, 9]
     * > filterIntegers([3, ""c"", 3, 3, ""a"", ""b""])
     * [3, 3, 3]
     */
    public static List<Object> filterIntegers(List<Object> values) {
        List<Object> integers = new ArrayList<>();
        for (Object value : values) {
            if (value instanceof Integer) {
                integers.add(value);
            }
        }
        return integers;
    }
}

// FilterIntegersTest.java
package scenario3;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {

    @Test
    void testFilterIntegersWithMixedValues() {
        List<Object> values = new ArrayList<>();
        values.add(""a"");
        values.add(3.14);
        values.add(5);
        List<Object> expected = new ArrayList<>();
        expected.add(5);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithNonIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(1);
        values.add(2);
        values.add(3);
        values.add(""abc"");
        values.add(new Object());
        values.add(new ArrayList<>());
        List<Object> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithEmptyList() {
        List<Object> values = new ArrayList<>();
        List<Object> expected = new ArrayList<>();
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithMixedValuesAndNonIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(4);
        values.add(new Object());
        values.add(new ArrayList<>());
        values.add(23.2);
        values.add(9);
        values.add(""adasd"");
        List<Object> expected = new ArrayList<>();
        expected.add(4);
        expected.add(9);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithRepeatedValues() {
        List<Object> values = new ArrayList<>();
        values.add(3);
        values.add(""c"");
        values.add(3);
        values.add(3);
        values.add(""a"");
        values.add(""b"");
        List<Object> expected = new ArrayList<>();
        expected.add(3);
        expected.add(3);
        expected.add(3);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithAllNonIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(""abc"");
        values.add(new Object());
        values.add(new ArrayList<>());
        List<Object> expected = new ArrayList<>();
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithAllIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(1);
        values.add(2);
        values.add(3);
        List<Object> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithNegativeIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(-1);
        values.add(-2);
        values.add(-3);
        List<Object> expected = new ArrayList<>();
        expected.add(-1);
        expected.add(-2);
        expected.add(-3);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithZeroValue() {
        List<Object> values = new ArrayList<>();
        values.add(0);
        List<Object> expected = new ArrayList<>();
        expected.add(0);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }

    @Test
    void testFilterIntegersWithLargeIntegerValues() {
        List<Object> values = new ArrayList<>();
        values.add(Integer.MAX_VALUE);
        values.add(Integer.MIN_VALUE);
        List<Object> expected = new ArrayList<>();
        expected.add(Integer.MAX_VALUE);
        expected.add(Integer.MIN_VALUE);
        assertEquals(expected, FilterIntegers.filterIntegers(values));
    }
}"
chatcmpl-6ySHtw559Y5YeauF7WrnM1c4VMsfn,/HumanEvalJava/src/main/java/scenario3/id_75.java,25.463809490203857,stop,"// IsMultiplyPrime.java
package scenario3;

class IsMultiplyPrime {

    /**
     * Write a function that returns true if the given number is the multiplication of 3 prime numbers
     * and false otherwise.
     * Knowing that (a) is less than 100.
     * Example:
     * isMultiplyPrime(30) == true
     * 30 = 2 * 3 * 5
     *
     * > isMultiplyPrime(5)
     * false
     * > isMultiplyPrime(30)
     * true
     * > isMultiplyPrime(8)
     * true
     * > isMultiplyPrime(10)
     * false
     * > isMultiplyPrime(125)
     * true
     * > isMultiplyPrime(105)
     * true
     * > isMultiplyPrime(126)
     * false
     * > isMultiplyPrime(729)
     * false
     * > isMultiplyPrime(891)
     * false
     * > isMultiplyPrime(1001)
     * true
     */
    public static Boolean isMultiplyPrime(int a) {
    }
}
","// IsMultiplyPrimeTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {","// IsMultiplyPrime.java
package scenario3;

import java.util.ArrayList;

class IsMultiplyPrime {

    /**
     * Write a function that returns true if the given number is the multiplication of 3 prime numbers
     * and false otherwise.
     * Knowing that (a) is less than 100.
     * Example:
     * isMultiplyPrime(30) == true
     * 30 = 2 * 3 * 5
     *
     * > isMultiplyPrime(5)
     * false
     * > isMultiplyPrime(30)
     * true
     * > isMultiplyPrime(8)
     * true
     * > isMultiplyPrime(10)
     * false
     * > isMultiplyPrime(125)
     * true
     * > isMultiplyPrime(105)
     * true
     * > isMultiplyPrime(126)
     * false
     * > isMultiplyPrime(729)
     * false
     * > isMultiplyPrime(891)
     * false
     * > isMultiplyPrime(1001)
     * true
     */
    public static Boolean isMultiplyPrime(int a) {
        ArrayList<Integer> primes = new ArrayList<Integer>();
        for (int i = 2; i <= a; i++) {
            boolean isPrime = true;
            for (int j = 2; j < i; j++) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes.add(i);
            }
        }
        int count = 0;
        for (int i = 0; i < primes.size(); i++) {
            for (int j = i + 1; j < primes.size(); j++) {
                for (int k = j + 1; k < primes.size(); k++) {
                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {
                        count++;
                    }
                }
            }
        }
        return count == 1;
    }
}

// IsMultiplyPrimeTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
    @Test
    void testIsMultiplyPrime1() {
        assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
    }

    @Test
    void testIsMultiplyPrime2() {
        assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
    }

    @Test
    void testIsMultiplyPrime3() {
        assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
    }

    @Test
    void testIsMultiplyPrime4() {
        assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
    }

    @Test
    void testIsMultiplyPrime5() {
        assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
    }

    @Test
    void testIsMultiplyPrime6() {
        assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
    }

    @Test
    void testIsMultiplyPrime7() {
        assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
    }

    @Test
    void testIsMultiplyPrime8() {
        assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
    }

    @Test
    void testIsMultiplyPrime9() {
        assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
    }

    @Test
    void testIsMultiplyPrime10() {
        assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
    }
}"
chatcmpl-6ySIwGp6ot7HujsIxAMt09IKZYleG,/HumanEvalJava/src/main/java/scenario3/id_138.java,26.179497241973877,stop,"// IsEqualToSumEven.java
package scenario3;

class IsEqualToSumEven {

    /**
     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
     * Example
     * isEqualToSumEven(4) == False
     * isEqualToSumEven(6) == False
     * isEqualToSumEven(8) == True
     *
     * > isEqualToSumEven(4)
     * false
     * > isEqualToSumEven(6)
     * false
     * > isEqualToSumEven(8)
     * true
     * > isEqualToSumEven(10)
     * true
     * > isEqualToSumEven(11)
     * false
     * > isEqualToSumEven(12)
     * true
     * > isEqualToSumEven(13)
     * false
     * > isEqualToSumEven(16)
     * true
     */
    public static Boolean isEqualToSumEven(int n) {
    }
}
","// IsEqualToSumEvenTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {","// Here's an implementation of the IsEqualToSumEven class and its test cases:

// IsEqualToSumEven.java
package scenario3;

class IsEqualToSumEven {

    /**
     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
     * Example
     * isEqualToSumEven(4) == False
     * isEqualToSumEven(6) == False
     * isEqualToSumEven(8) == True
     *
     * > isEqualToSumEven(4)
     * false
     * > isEqualToSumEven(6)
     * false
     * > isEqualToSumEven(8)
     * true
     * > isEqualToSumEven(10)
     * true
     * > isEqualToSumEven(11)
     * false
     * > isEqualToSumEven(12)
     * true
     * > isEqualToSumEven(13)
     * false
     * > isEqualToSumEven(16)
     * true
     */
    public static Boolean isEqualToSumEven(int n) {
        // Check if n is less than 8 or odd
        if (n < 8 || n % 2 != 0) {
            return false;
        }
        
        // Check if n can be written as the sum of 4 positive even numbers
        for (int i = 2; i <= n / 2; i += 2) {
            for (int j = 2; j <= n / 2; j += 2) {
                for (int k = 2; k <= n / 2; k += 2) {
                    for (int l = 2; l <= n / 2; l += 2) {
                        if (i + j + k + l == n) {
                            return true;
                        }
                    }
                }
            }
        }
        
        return false;
    }
}

// IsEqualToSumEvenTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
    @Test
    void testIsEqualToSumEven_4() {
        assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
    }
    
    @Test
    void testIsEqualToSumEven_6() {
        assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
    }
    
    @Test
    void testIsEqualToSumEven_8() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
    }
    
    @Test
    void testIsEqualToSumEven_10() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
    }
    
    @Test
    void testIsEqualToSumEven_11() {
        assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
    }
    
    @Test
    void testIsEqualToSumEven_12() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
    }
    
    @Test
    void testIsEqualToSumEven_13() {
        assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
    }
    
    @Test
    void testIsEqualToSumEven_16() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
    }
    
    @Test
    void testIsEqualToSumEven_18() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
    }
    
    @Test
    void testIsEqualToSumEven_20() {
        assertTrue(IsEqualToSumEven.isEqualToSumEven(20));
    }
}"
chatcmpl-6ySJzcpfmbIwESHrg9o93332ZW0KD,/HumanEvalJava/src/main/java/scenario3/id_55.java,15.832141876220703,stop,"// Fib.java
package scenario3;

class Fib {

    /**
     * Return n-th Fibonacci number.
     *
     * > fib(10)
     * 55
     * > fib(1)
     * 1
     * > fib(8)
     * 21
     * > fib(11)
     * 89
     * > fib(12)
     * 144
     */
    public static int fib(int n) {
    }
}
","// FibTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {","// Here's the source code for the Fib class and FibTest class with a basic implementation of the fib method and test cases.

// Fib.java
package scenario3;

class Fib {

    /**
     * Return n-th Fibonacci number.
     *
     * > fib(10)
     * 55
     * > fib(1)
     * 1
     * > fib(8)
     * 21
     * > fib(11)
     * 89
     * > fib(12)
     * 144
     */
    public static int fib(int n) {
        if (n <= 1) {
            return n;
        }
        return fib(n-1) + fib(n-2);
    }
}

// FibTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
    
    @Test
    void testFib1() {
        assertEquals(0, Fib.fib(0));
    }
    
    @Test
    void testFib2() {
        assertEquals(1, Fib.fib(1));
    }
    
    @Test
    void testFib3() {
        assertEquals(1, Fib.fib(2));
    }
    
    @Test
    void testFib4() {
        assertEquals(2, Fib.fib(3));
    }
    
    @Test
    void testFib5() {
        assertEquals(3, Fib.fib(4));
    }
    
    @Test
    void testFib6() {
        assertEquals(5, Fib.fib(5));
    }
    
    @Test
    void testFib7() {
        assertEquals(8, Fib.fib(6));
    }
    
    @Test
    void testFib8() {
        assertEquals(13, Fib.fib(7));
    }
    
    @Test
    void testFib9() {
        assertEquals(21, Fib.fib(8));
    }
    
    @Test
    void testFib10() {
        assertEquals(55, Fib.fib(10));
    }
}"
chatcmpl-6ySL2wxbCjZezjfCcQSRo6elYb6gn,/HumanEvalJava/src/main/java/scenario3/id_43.java,36.52346992492676,stop,"// PairsSumToZero.java
package scenario3;

import java.util.List;

class PairsSumToZero {

    /**
     * * pairs_sum_to_zero takes a list of integers as an input.
     * it returns true if there are two distinct elements in the list that
     * sum to zero, and false otherwise.
     *
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([-3, 9, -1, 3, 2, 30])
     * true
     * > pairsSumToZero([-3, 9, -1, 3, 2, 31])
     * true
     * > pairsSumToZero([-3, 9, -1, 4, 2, 30])
     * false
     * > pairsSumToZero([-3, 9, -1, 4, 2, 31])
     * false
     */
    public static Boolean pairsSumToZero(List<Integer> l) {
    }
}
","// PairsSumToZeroTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {","// PairsSumToZero.java
package scenario3;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

class PairsSumToZero {

    /**
     * * pairs_sum_to_zero takes a list of integers as an input.
     * it returns true if there are two distinct elements in the list that
     * sum to zero, and false otherwise.
     *
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([-3, 9, -1, 3, 2, 30])
     * true
     * > pairsSumToZero([-3, 9, -1, 3, 2, 31])
     * true
     * > pairsSumToZero([-3, 9, -1, 4, 2, 30])
     * false
     * > pairsSumToZero([-3, 9, -1, 4, 2, 31])
     * false
     */
    public static Boolean pairsSumToZero(List<Integer> l) {
        Set<Integer> set = new HashSet<>();
        for (Integer i : l) {
            if (set.contains(-i)) {
                return true;
            }
            set.add(i);
        }
        return false;
    }
}

// PairsSumToZeroTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {

    @Test
    void testEmptyList() {
        List<Integer> l = Arrays.asList();
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testSingleElementList() {
        List<Integer> l = Arrays.asList(1);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testNoPairsSumToZero() {
        List<Integer> l = Arrays.asList(1, 3, 5, 0);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testOnePairSumToZero() {
        List<Integer> l = Arrays.asList(1, 3, -2, -1);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testMultiplePairsSumToZero() {
        List<Integer> l = Arrays.asList(2, 4, -5, 3, 5, -7);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testAllElementsAreZero() {
        List<Integer> l = Arrays.asList(0, 0, 0, 0);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testAllElementsArePositive() {
        List<Integer> l = Arrays.asList(1, 2, 3, 4);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testAllElementsAreNegative() {
        List<Integer> l = Arrays.asList(-1, -2, -3, -4);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testMixedElements() {
        List<Integer> l = Arrays.asList(-3, 9, -1, 3, 2, 30);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    @Test
    void testMixedElements2() {
        List<Integer> l = Arrays.asList(-3, 9, -1, 4, 2, 30);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }
}"
chatcmpl-6ySM5xMcE8xTjwRXpOs4pVH9yvZK0,/HumanEvalJava/src/main/java/scenario3/id_14.java,30.84235954284668,stop,"// AllPrefixes.java
package scenario3;

import java.util.List;

class AllPrefixes {

    /**
     * Return list of all prefixes from shortest to longest of the input string.
     *
     * > allPrefixes(""abc"")
     * [""a"", ""ab"", ""abc""]
     * > allPrefixes("""")
     * []
     * > allPrefixes(""asdfgh"")
     * [""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]
     * > allPrefixes(""WWW"")
     * [""W"", ""WW"", ""WWW""]
     */
    public static List<Object> allPrefixes(String string) {
    }
}
","// AllPrefixesTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AllPrefixes}.
* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.
*/
class AllPrefixesTest {","import java.util.ArrayList;
import java.util.Arrays;

class AllPrefixesTest {

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string is empty.
     */
    @Test
    void testAllPrefixesEmptyString() {
        List<Object> expected = new ArrayList<>();
        List<Object> actual = AllPrefixes.allPrefixes("""");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has only one character.
     */
    @Test
    void testAllPrefixesSingleCharacter() {
        List<Object> expected = Arrays.asList(""a"");
        List<Object> actual = AllPrefixes.allPrefixes(""a"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has multiple characters.
     */
    @Test
    void testAllPrefixesMultipleCharacters() {
        List<Object> expected = Arrays.asList(""a"", ""ab"", ""abc"");
        List<Object> actual = AllPrefixes.allPrefixes(""abc"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has all characters same.
     */
    @Test
    void testAllPrefixesAllSameCharacters() {
        List<Object> expected = Arrays.asList(""W"", ""WW"", ""WWW"");
        List<Object> actual = AllPrefixes.allPrefixes(""WWW"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has all characters different.
     */
    @Test
    void testAllPrefixesAllDifferentCharacters() {
        List<Object> expected = Arrays.asList(""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh"");
        List<Object> actual = AllPrefixes.allPrefixes(""asdfgh"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has spaces.
     */
    @Test
    void testAllPrefixesStringWithSpaces() {
        List<Object> expected = Arrays.asList(""a"", ""ab"", ""abc"", ""a b"", ""a bc"", ""a bcd"");
        List<Object> actual = AllPrefixes.allPrefixes(""a bcd"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has special characters.
     */
    @Test
    void testAllPrefixesStringWithSpecialCharacters() {
        List<Object> expected = Arrays.asList(""a"", ""ab"", ""abc"", ""a@"", ""a@#"", ""a@#4"");
        List<Object> actual = AllPrefixes.allPrefixes(""a@#4"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has numbers.
     */
    @Test
    void testAllPrefixesStringWithNumbers() {
        List<Object> expected = Arrays.asList(""1"", ""12"", ""123"", ""1234"");
        List<Object> actual = AllPrefixes.allPrefixes(""1234"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string has mixed characters.
     */
    @Test
    void testAllPrefixesStringWithMixedCharacters() {
        List<Object> expected = Arrays.asList(""a"", ""ab"", ""abc"", ""a1"", ""a1@"", ""a1@#"");
        List<Object> actual = AllPrefixes.allPrefixes(""a1@#"");
        assertEquals(expected, actual);
    }

    /**
     * Test method for {@link AllPrefixes#allPrefixes(String)}.
     * Test case when input string is null.
     */
    @Test
    void testAllPrefixesNullString() {
        List<Object> expected = new ArrayList<>();
        List<Object> actual = AllPrefixes.allPrefixes(null);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6ySN8L5rjSIxndL1bsTpxRCjJZcMi,/HumanEvalJava/src/main/java/scenario3/id_80.java,25.305694341659546,stop,"// IsHappy.java
package scenario3;

class IsHappy {

    /**
     * You are given a string s.
     * Your task is to check if the string is happy or not.
     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
     * For example:
     * isHappy(a) => False
     * isHappy(aa) => False
     * isHappy(abcd) => True
     * isHappy(aabb) => False
     * isHappy(adb) => True
     * isHappy(xyy) => False
     *
     * > isHappy(""a"")
     * false
     * > isHappy(""aa"")
     * false
     * > isHappy(""abcd"")
     * true
     * > isHappy(""aabb"")
     * false
     * > isHappy(""adb"")
     * true
     * > isHappy(""xyy"")
     * false
     * > isHappy(""iopaxpoi"")
     * true
     * > isHappy(""iopaxioi"")
     * false
     */
    public static Boolean isHappy(String s) {
    }
}
","// IsHappyTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {","// Here's the complete source code for the IsHappy and IsHappyTest classes:

// IsHappy.java
package scenario3;

class IsHappy {

    /**
     * You are given a string s.
     * Your task is to check if the string is happy or not.
     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
     * For example:
     * isHappy(a) => False
     * isHappy(aa) => False
     * isHappy(abcd) => True
     * isHappy(aabb) => False
     * isHappy(adb) => True
     * isHappy(xyy) => False
     *
     * > isHappy(""a"")
     * false
     * > isHappy(""aa"")
     * false
     * > isHappy(""abcd"")
     * true
     * > isHappy(""aabb"")
     * false
     * > isHappy(""adb"")
     * true
     * > isHappy(""xyy"")
     * false
     * > isHappy(""iopaxpoi"")
     * true
     * > isHappy(""iopaxioi"")
     * false
     */
    public static Boolean isHappy(String s) {
        if (s.length() < 3) {
            return false;
        }
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {
                return false;
            }
        }
        return true;
    }
}

// IsHappyTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {

    @Test
    void testEmptyString() {
        assertFalse(IsHappy.isHappy(""""));
    }

    @Test
    void testSingleCharacter() {
        assertFalse(IsHappy.isHappy(""a""));
    }

    @Test
    void testTwoIdenticalCharacters() {
        assertFalse(IsHappy.isHappy(""aa""));
    }

    @Test
    void testThreeIdenticalCharacters() {
        assertFalse(IsHappy.isHappy(""aaa""));
    }

    @Test
    void testThreeDistinctCharacters() {
        assertTrue(IsHappy.isHappy(""abc""));
    }

    @Test
    void testFourCharactersWithTwoIdentical() {
        assertFalse(IsHappy.isHappy(""aabc""));
    }

    @Test
    void testFourCharactersWithTwoDistinct() {
        assertTrue(IsHappy.isHappy(""abcd""));
    }

    @Test
    void testFiveCharactersWithTwoIdentical() {
        assertFalse(IsHappy.isHappy(""aabbc""));
    }

    @Test
    void testFiveCharactersWithTwoDistinct() {
        assertTrue(IsHappy.isHappy(""abcde""));
    }

    @Test
    void testLongString() {
        assertTrue(IsHappy.isHappy(""iopaxpoi""));
        assertFalse(IsHappy.isHappy(""iopaxioi""));
    }
}"
chatcmpl-6ySOBAh6UADGpFaLs6rtegCKoMAof,/HumanEvalJava/src/main/java/scenario3/id_155.java,32.94448685646057,stop,"// EvenOddCount.java
package scenario3;

import java.util.List;

class EvenOddCount {

    /**
     * Given an integer. return a tuple that has the number of even and odd digits respectively.
     *
     * Example:
     * evenOddCount(-12) ==> (1, 1)
     * evenOddCount(123) ==> (1, 2)
     *
     * > evenOddCount(7)
     * [0, 1]
     * > evenOddCount(-78)
     * [1, 1]
     * > evenOddCount(3452)
     * [2, 2]
     * > evenOddCount(346211)
     * [3, 3]
     * > evenOddCount(-345821)
     * [3, 3]
     * > evenOddCount(-2)
     * [1, 0]
     * > evenOddCount(-45347)
     * [2, 3]
     * > evenOddCount(0)
     * [1, 0]
     */
    public static List<Integer> evenOddCount(int num) {
    }
}
","// EvenOddCountTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {","// EvenOddCount.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class EvenOddCount {

    /**
     * Given an integer. return a tuple that has the number of even and odd digits respectively.
     *
     * Example:
     * evenOddCount(-12) ==> (1, 1)
     * evenOddCount(123) ==> (1, 2)
     *
     * > evenOddCount(7)
     * [0, 1]
     * > evenOddCount(-78)
     * [1, 1]
     * > evenOddCount(3452)
     * [2, 2]
     * > evenOddCount(346211)
     * [3, 3]
     * > evenOddCount(-345821)
     * [3, 3]
     * > evenOddCount(-2)
     * [1, 0]
     * > evenOddCount(-45347)
     * [2, 3]
     * > evenOddCount(0)
     * [1, 0]
     */
    public static List<Integer> evenOddCount(int num) {
        List<Integer> result = new ArrayList<>();
        int evenCount = 0;
        int oddCount = 0;
        String numString = Integer.toString(Math.abs(num));
        for (int i = 0; i < numString.length(); i++) {
            int digit = Character.getNumericValue(numString.charAt(i));
            if (digit % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        result.add(evenCount);
        result.add(oddCount);
        return result;
    }
}

// EvenOddCountTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
    
    @Test
    void testEvenOddCountWithPositiveNumber() {
        List<Integer> result = EvenOddCount.evenOddCount(123);
        assertEquals(1, result.get(0));
        assertEquals(2, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithNegativeNumber() {
        List<Integer> result = EvenOddCount.evenOddCount(-78);
        assertEquals(1, result.get(0));
        assertEquals(1, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithZero() {
        List<Integer> result = EvenOddCount.evenOddCount(0);
        assertEquals(1, result.get(0));
        assertEquals(0, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithSingleDigitPositiveNumber() {
        List<Integer> result = EvenOddCount.evenOddCount(7);
        assertEquals(0, result.get(0));
        assertEquals(1, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithSingleDigitNegativeNumber() {
        List<Integer> result = EvenOddCount.evenOddCount(-2);
        assertEquals(1, result.get(0));
        assertEquals(0, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithMultipleEvenDigits() {
        List<Integer> result = EvenOddCount.evenOddCount(3452);
        assertEquals(2, result.get(0));
        assertEquals(2, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithMultipleOddDigits() {
        List<Integer> result = EvenOddCount.evenOddCount(346211);
        assertEquals(3, result.get(0));
        assertEquals(3, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithMultipleDigits() {
        List<Integer> result = EvenOddCount.evenOddCount(-45347);
        assertEquals(2, result.get(0));
        assertEquals(3, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithNegativeMultipleDigits() {
        List<Integer> result = EvenOddCount.evenOddCount(-345821);
        assertEquals(3, result.get(0));
        assertEquals(3, result.get(1));
    }
    
    @Test
    void testEvenOddCountWithLargeNumber() {
        List<Integer> result = EvenOddCount.evenOddCount(1234567890);
        assertEquals(5, result.get(0));
        assertEquals(5, result.get(1));
    }
}"
chatcmpl-6ySPEYWbAsKm5RZVK1eS6rjLmGeaW,/HumanEvalJava/src/main/java/scenario3/id_102.java,21.841872215270996,stop,"// ChooseNum.java
package scenario3;

class ChooseNum {

    /**
     * This function takes two positive numbers x and y and returns the
     * biggest even integer number that is in the range [x, y] inclusive. If
     * there's no such number, then the function should return -1.
     *
     * For example:
     * chooseNum(12, 15) = 14
     * chooseNum(13, 12) = -1
     *
     * > chooseNum(12, 15)
     * 14
     * > chooseNum(13, 12)
     * -1
     * > chooseNum(33, 12354)
     * 12354
     * > chooseNum(5234, 5233)
     * -1
     * > chooseNum(6, 29)
     * 28
     * > chooseNum(27, 10)
     * -1
     * > chooseNum(7, 7)
     * -1
     * > chooseNum(546, 546)
     * 546
     */
    public static int chooseNum(int x, int y) {
    }
}
","// ChooseNumTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {","// ChooseNum.java
package scenario3;

class ChooseNum {

    /**
     * This function takes two positive numbers x and y and returns the
     * biggest even integer number that is in the range [x, y] inclusive. If
     * there's no such number, then the function should return -1.
     *
     * For example:
     * chooseNum(12, 15) = 14
     * chooseNum(13, 12) = -1
     *
     * > chooseNum(12, 15)
     * 14
     * > chooseNum(13, 12)
     * -1
     * > chooseNum(33, 12354)
     * 12354
     * > chooseNum(5234, 5233)
     * -1
     * > chooseNum(6, 29)
     * 28
     * > chooseNum(27, 10)
     * -1
     * > chooseNum(7, 7)
     * -1
     * > chooseNum(546, 546)
     * 546
     */
    public static int chooseNum(int x, int y) {
        if (x > y) {
            return -1;
        }
        int maxEven = -1;
        for (int i = x; i <= y; i++) {
            if (i % 2 == 0 && i > maxEven) {
                maxEven = i;
            }
        }
        return maxEven;
    }
}

// ChooseNumTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {
    @Test
    void testChooseNum1() {
        assertEquals(14, ChooseNum.chooseNum(12, 15));
    }

    @Test
    void testChooseNum2() {
        assertEquals(-1, ChooseNum.chooseNum(13, 12));
    }

    @Test
    void testChooseNum3() {
        assertEquals(12354, ChooseNum.chooseNum(33, 12354));
    }

    @Test
    void testChooseNum4() {
        assertEquals(-1, ChooseNum.chooseNum(5234, 5233));
    }

    @Test
    void testChooseNum5() {
        assertEquals(28, ChooseNum.chooseNum(6, 29));
    }

    @Test
    void testChooseNum6() {
        assertEquals(-1, ChooseNum.chooseNum(27, 10));
    }

    @Test
    void testChooseNum7() {
        assertEquals(-1, ChooseNum.chooseNum(7, 7));
    }

    @Test
    void testChooseNum8() {
        assertEquals(546, ChooseNum.chooseNum(546, 546));
    }

    @Test
    void testChooseNum9() {
        assertEquals(-1, ChooseNum.chooseNum(3, 5));
    }

    @Test
    void testChooseNum10() {
        assertEquals(10, ChooseNum.chooseNum(10, 10));
    }
}"
chatcmpl-6ySQHGQ0yiYNLH6HzcDiTd8mufjad,/HumanEvalJava/src/main/java/scenario3/id_114.java,47.43449354171753,stop,"// Minsubarraysum.java
package scenario3;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     * Example
     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
     * minSubArraySum([-1, -2, -3]) == -6
     *
     * > minsubarraysum([2, 3, 4, 1, 2, 4])
     * 1
     * > minsubarraysum([-1, -2, -3])
     * -6
     * > minsubarraysum([-1, -2, -3, 2, -10])
     * -14
     * > minsubarraysum([-9999999999999999L])
     * -9999999999999999L
     * > minsubarraysum([0, 10, 20, 1000000])
     * 0
     * > minsubarraysum([-1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([100, -1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([10, 11, 13, 8, 3, 4])
     * 3
     * > minsubarraysum([100, -33, 32, -1, 0, -2])
     * -33
     * > minsubarraysum([-10])
     * -10
     * > minsubarraysum([7])
     * 7
     * > minsubarraysum([1, -1])
     * -1
     */
    public static long minsubarraysum(List<Object> nums) {
    }
}
","// MinsubarraysumTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {","// Minsubarraysum.java
package scenario3;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     * Example
     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
     * minSubArraySum([-1, -2, -3]) == -6
     *
     * > minsubarraysum([2, 3, 4, 1, 2, 4])
     * 1
     * > minsubarraysum([-1, -2, -3])
     * -6
     * > minsubarraysum([-1, -2, -3, 2, -10])
     * -14
     * > minsubarraysum([-9999999999999999L])
     * -9999999999999999L
     * > minsubarraysum([0, 10, 20, 1000000])
     * 0
     * > minsubarraysum([-1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([100, -1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([10, 11, 13, 8, 3, 4])
     * 3
     * > minsubarraysum([100, -33, 32, -1, 0, -2])
     * -33
     * > minsubarraysum([-10])
     * -10
     * > minsubarraysum([7])
     * 7
     * > minsubarraysum([1, -1])
     * -1
     */
    public static long minsubarraysum(List<Integer> nums) {
        long minSum = nums.get(0);
        long currentSum = nums.get(0);
        for (int i = 1; i < nums.size(); i++) {
            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));
            minSum = Math.min(minSum, currentSum);
        }
        return minSum;
    }
}

// MinsubarraysumTest.java
package scenario3;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {

    @Test
    void testMinSubArraySum1() {
        List<Integer> nums = Arrays.asList(2, 3, 4, 1, 2, 4);
        long expected = 1;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum2() {
        List<Integer> nums = Arrays.asList(-1, -2, -3);
        long expected = -6;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum3() {
        List<Integer> nums = Arrays.asList(-1, -2, -3, 2, -10);
        long expected = -14;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum4() {
        List<Integer> nums = Arrays.asList(-999999999);
        long expected = -999999999;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum5() {
        List<Integer> nums = Arrays.asList(0, 10, 20, 1000000);
        long expected = 0;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum6() {
        List<Integer> nums = Arrays.asList(-1, -2, -3, 10, -5);
        long expected = -6;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum7() {
        List<Integer> nums = Arrays.asList(100, -1, -2, -3, 10, -5);
        long expected = -6;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum8() {
        List<Integer> nums = Arrays.asList(10, 11, 13, 8, 3, 4);
        long expected = 3;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum9() {
        List<Integer> nums = Arrays.asList(100, -33, 32, -1, 0, -2);
        long expected = -33;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum10() {
        List<Integer> nums = Arrays.asList(-10);
        long expected = -10;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum11() {
        List<Integer> nums = Arrays.asList(7);
        long expected = 7;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }

    @Test
    void testMinSubArraySum12() {
        List<Integer> nums = Arrays.asList(1, -1);
        long expected = -1;
        long actual = Minsubarraysum.minsubarraysum(nums);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6ySRKZXpqVIxX5WAaCMGXEtbnghx6,/HumanEvalJava/src/main/java/scenario3/id_79.java,20.00991940498352,stop,"// DecimalToBinary.java
package scenario3;

class DecimalToBinary {

    /**
     * You will be given a number in decimal form and your task is to convert it to
     * binary format. The function should return a string, with each character representing a binary
     * number. Each character in the string will be '0' or '1'.
     *
     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.
     * The extra characters are there to help with the format.
     *
     * Examples:
     * - decimalToBinary(15)   # returns ""db1111db""
     * - decimalToBinary(32)   # returns ""db100000db""
     *
     * > decimalToBinary(0)
     * ""db0db""
     * > decimalToBinary(32)
     * ""db100000db""
     * > decimalToBinary(103)
     * ""db1100111db""
     * > decimalToBinary(15)
     * ""db1111db""
     */
    public static String decimalToBinary(int decimal) {
    }
}
","// DecimalToBinaryTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {","// DecimalToBinary.java
package scenario3;

class DecimalToBinary {

    /**
     * You will be given a number in decimal form and your task is to convert it to
     * binary format. The function should return a string, with each character representing a binary
     * number. Each character in the string will be '0' or '1'.
     *
     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.
     * The extra characters are there to help with the format.
     *
     * Examples:
     * - decimalToBinary(15)   # returns ""db1111db""
     * - decimalToBinary(32)   # returns ""db100000db""
     *
     * > decimalToBinary(0)
     * ""db0db""
     * > decimalToBinary(32)
     * ""db100000db""
     * > decimalToBinary(103)
     * ""db1100111db""
     * > decimalToBinary(15)
     * ""db1111db""
     */
    public static String decimalToBinary(int decimal) {
        if (decimal == 0) {
            return ""db0db"";
        }
        StringBuilder binary = new StringBuilder();
        while (decimal > 0) {
            int remainder = decimal % 2;
            binary.insert(0, remainder);
            decimal /= 2;
        }
        return ""db"" + binary.toString() + ""db"";
    }
}

// DecimalToBinaryTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
    @Test
    void testDecimalToBinaryWithZero() {
        assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
    }

    @Test
    void testDecimalToBinaryWithPositiveNumber() {
        assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
        assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
        assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
    }

    @Test
    void testDecimalToBinaryWithNegativeNumber() {
        assertEquals(""db-1111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
        assertEquals(""db-100000db"", DecimalToBinary.decimalToBinary(-32));
        assertEquals(""db-1100111db"", DecimalToBinary.decimalToBinary(-103));
        assertEquals(""db-1111db"", DecimalToBinary.decimalToBinary(-15));
    }
}"
chatcmpl-6ySSNwt5Wddtrl937JF7Mkf3e2vjt,/HumanEvalJava/src/main/java/scenario3/id_96.java,46.29023218154907,stop,"// CountUpTo.java
package scenario3;

import java.util.List;

class CountUpTo {

    /**
     * Implement a function that takes an non-negative integer and returns an array of the first n
     * integers that are prime numbers and less than n.
     * for example:
     * countUpTo(5) => [2,3]
     * countUpTo(11) => [2,3,5,7]
     * countUpTo(0) => []
     * countUpTo(20) => [2,3,5,7,11,13,17,19]
     * countUpTo(1) => []
     * countUpTo(18) => [2,3,5,7,11,13,17]
     *
     * > countUpTo(5)
     * [2, 3]
     * > countUpTo(6)
     * [2, 3, 5]
     * > countUpTo(7)
     * [2, 3, 5]
     * > countUpTo(10)
     * [2, 3, 5, 7]
     * > countUpTo(0)
     * []
     * > countUpTo(22)
     * [2, 3, 5, 7, 11, 13, 17, 19]
     * > countUpTo(1)
     * []
     * > countUpTo(18)
     * [2, 3, 5, 7, 11, 13, 17]
     * > countUpTo(47)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
     * > countUpTo(101)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
     */
    public static List<Object> countUpTo(int n) {
    }
}
","// CountUpToTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {","// CountUpTo.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class CountUpTo {

    /**
     * Implement a function that takes an non-negative integer and returns an array of the first n
     * integers that are prime numbers and less than n.
     * for example:
     * countUpTo(5) => [2,3]
     * countUpTo(11) => [2,3,5,7]
     * countUpTo(0) => []
     * countUpTo(20) => [2,3,5,7,11,13,17,19]
     * countUpTo(1) => []
     * countUpTo(18) => [2,3,5,7,11,13,17]
     *
     * > countUpTo(5)
     * [2, 3]
     * > countUpTo(6)
     * [2, 3, 5]
     * > countUpTo(7)
     * [2, 3, 5, 7]
     * > countUpTo(10)
     * [2, 3, 5, 7]
     * > countUpTo(0)
     * []
     * > countUpTo(22)
     * [2, 3, 5, 7, 11, 13, 17, 19]
     * > countUpTo(1)
     * []
     * > countUpTo(18)
     * [2, 3, 5, 7, 11, 13, 17]
     * > countUpTo(47)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
     * > countUpTo(101)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
     */
    public static List<Integer> countUpTo(int n) {
        List<Integer> primes = new ArrayList<>();
        if (n < 2) {
            return primes;
        }
        primes.add(2);
        for (int i = 3; i < n; i += 2) {
            boolean isPrime = true;
            for (int j = 3; j <= Math.sqrt(i); j += 2) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes.add(i);
            }
        }
        return primes;
    }
}

// CountUpToTest.java
package scenario3;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {

    @Test
    void testCountUpToWith5() {
        List<Integer> expected = List.of(2, 3);
        List<Integer> actual = CountUpTo.countUpTo(5);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith6() {
        List<Integer> expected = List.of(2, 3, 5);
        List<Integer> actual = CountUpTo.countUpTo(6);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith7() {
        List<Integer> expected = List.of(2, 3, 5, 7);
        List<Integer> actual = CountUpTo.countUpTo(7);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith10() {
        List<Integer> expected = List.of(2, 3, 5, 7);
        List<Integer> actual = CountUpTo.countUpTo(10);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith0() {
        List<Integer> expected = List.of();
        List<Integer> actual = CountUpTo.countUpTo(0);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith22() {
        List<Integer> expected = List.of(2, 3, 5, 7, 11, 13, 17, 19);
        List<Integer> actual = CountUpTo.countUpTo(22);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith1() {
        List<Integer> expected = List.of();
        List<Integer> actual = CountUpTo.countUpTo(1);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith18() {
        List<Integer> expected = List.of(2, 3, 5, 7, 11, 13, 17);
        List<Integer> actual = CountUpTo.countUpTo(18);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith47() {
        List<Integer> expected = List.of(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43);
        List<Integer> actual = CountUpTo.countUpTo(47);
        assertEquals(expected, actual);
    }

    @Test
    void testCountUpToWith101() {
        List<Integer> expected = List.of(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);
        List<Integer> actual = CountUpTo.countUpTo(101);
        assertEquals(expected, actual);
    }
}"
chatcmpl-6ySTQCF1i4qDDEaq2dmT9pwDDgL8g,/HumanEvalJava/src/main/java/scenario3/id_143.java,33.591060161590576,stop,"// WordsInSentence.java
package scenario3;

class WordsInSentence {

    /**
     * * You are given a string representing a sentence,
     * the sentence contains some words separated by a space,
     * and you have to return a string that contains the words from the original sentence,
     * whose lengths are prime numbers,
     * the order of the words in the new string should be the same as the original one.
     *
     * Example 1:
     * Input: sentence = ""This is a test""
     * Output: ""is""
     *
     * Example 2:
     * Input: sentence = ""lets go for swimming""
     * Output: ""go for""
     *
     * Constraints:
     * * 1 <= len(sentence) <= 100
     * * sentence contains only letters
     *
     * > wordsInSentence(""This is a test"")
     * ""is""
     * > wordsInSentence(""lets go for swimming"")
     * ""go for""
     * > wordsInSentence(""there is no place available here"")
     * ""there is no place""
     * > wordsInSentence(""Hi I am Hussein"")
     * ""Hi am Hussein""
     * > wordsInSentence(""go for it"")
     * ""go for it""
     * > wordsInSentence(""here"")
     * """"
     * > wordsInSentence(""here is"")
     * ""is""
     */
    public static String wordsInSentence(String sentence) {
    }
}
","// WordsInSentenceTest.java
package scenario3;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {","// WordsInSentence.java
package scenario3;

import java.util.ArrayList;
import java.util.List;

class WordsInSentence {

    /**
     * * You are given a string representing a sentence,
     * the sentence contains some words separated by a space,
     * and you have to return a string that contains the words from the original sentence,
     * whose lengths are prime numbers,
     * the order of the words in the new string should be the same as the original one.
     *
     * Example 1:
     * Input: sentence = ""This is a test""
     * Output: ""is""
     *
     * Example 2:
     * Input: sentence = ""lets go for swimming""
     * Output: ""go for""
     *
     * Constraints:
     * * 1 <= len(sentence) <= 100
     * * sentence contains only letters
     *
     * > wordsInSentence(""This is a test"")
     * ""is""
     * > wordsInSentence(""lets go for swimming"")
     * ""go for""
     * > wordsInSentence(""there is no place available here"")
     * ""there is no place""
     * > wordsInSentence(""Hi I am Hussein"")
     * ""Hi am Hussein""
     * > wordsInSentence(""go for it"")
     * ""go for it""
     * > wordsInSentence(""here"")
     * """"
     * > wordsInSentence(""here is"")
     * ""is""
     */
    public static String wordsInSentence(String sentence) {
        String[] words = sentence.split("" "");
        List<String> primeWords = new ArrayList<>();
        for (String word : words) {
            if (isPrime(word.length())) {
                primeWords.add(word);
            }
        }
        return String.join("" "", primeWords);
    }

    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

// WordsInSentenceTest.java
package scenario3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {

    @Test
    void testWordsInSentence1() {
        String sentence = ""This is a test"";
        String expected = ""is"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence2() {
        String sentence = ""lets go for swimming"";
        String expected = ""go for"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence3() {
        String sentence = ""there is no place available here"";
        String expected = ""there is no place"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence4() {
        String sentence = ""Hi I am Hussein"";
        String expected = ""Hi am Hussein"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence5() {
        String sentence = ""go for it"";
        String expected = ""go for it"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence6() {
        String sentence = ""here"";
        String expected = """";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence7() {
        String sentence = ""here is"";
        String expected = ""is"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence8() {
        String sentence = ""The quick brown fox jumps over the lazy dog"";
        String expected = ""The fox over dog"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence9() {
        String sentence = ""I love coding"";
        String expected = ""I"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }

    @Test
    void testWordsInSentence10() {
        String sentence = ""Java is a programming language"";
        String expected = ""Java is a"";
        String actual = WordsInSentence.wordsInSentence(sentence);
        assertEquals(expected, actual);
    }
}"
