ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yY9SO07UH2pJoHQLXWqrjmQ9ZrGg,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/EventSet.java,24.012166738510132,stop,"// EventSet.java
import java.util.Vector;
import java.util.List;

public class EventSet {

    /**
     * Returns the total number of events in the set*
     */
    public int size();
}
","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains ten unit test cases for the {@link EventSet#size()} method.
*/
class EventSetTest {","@Test
void testEmptySet() {
    EventSet eventSet = new EventSet();
    assertEquals(0, eventSet.size());
}

@Test
void testSingleEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    assertEquals(1, eventSet.size());
}

@Test
void testMultipleEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    eventSet.add(new Event(""Event 3""));
    assertEquals(3, eventSet.size());
}

@Test
void testDuplicateEvents() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.add(event1);
    assertEquals(1, eventSet.size());
}

@Test
void testNullEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(null);
    assertEquals(0, eventSet.size());
}

@Test
void testAddAndRemoveEvent() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.remove(event1);
    assertEquals(0, eventSet.size());
}

@Test
void testRemoveNonExistingEvent() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.remove(new Event(""Event 2""));
    assertEquals(1, eventSet.size());
}

@Test
void testAddAllEvents() {
    EventSet eventSet = new EventSet();
    List<Event> events = new Vector<>();
    events.add(new Event(""Event 1""));
    events.add(new Event(""Event 2""));
    events.add(new Event(""Event 3""));
    eventSet.addAll(events);
    assertEquals(3, eventSet.size());
}

@Test
void testClearEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    eventSet.clear();
    assertEquals(0, eventSet.size());
}

@Test
void testContainsEvent() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    assertTrue(eventSet.contains(event1));
} 
}"
chatcmpl-6yYAV8l7Yq8aqXZF5y9G3fCavP990,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/DocumentSet.java,42.06156539916992,stop,"// DocumentSet.java
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;

/**
 * A Document Set is a group of documents written by the same author.
 * This can be used to facilitate event sets that are larger than just
 * a single document, which may be more indicative of an author's
 * entire body of work.
 */
public class DocumentSet {

    /**
     * Number of documents currently registered in this set of documents*
     */
    public int documentCount();
}
","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {","public class DocumentSetTest {

    /**
     * Test case to check if documentCount() returns 0 for an empty DocumentSet.
     */
    @Test
    public void testDocumentCountEmptySet() {
        DocumentSet documentSet = new DocumentSet();
        assertEquals(0, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count for a DocumentSet with one document.
     */
    @Test
    public void testDocumentCountOneDocument() {
        DocumentSet documentSet = new DocumentSet();
        documentSet.addDocument(new Document(""Document 1""));
        assertEquals(1, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count for a DocumentSet with multiple documents.
     */
    @Test
    public void testDocumentCountMultipleDocuments() {
        DocumentSet documentSet = new DocumentSet();
        documentSet.addDocument(new Document(""Document 1""));
        documentSet.addDocument(new Document(""Document 2""));
        documentSet.addDocument(new Document(""Document 3""));
        assertEquals(3, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after removing a document from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterRemovingDocument() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(""Document 1"");
        Document document2 = new Document(""Document 2"");
        documentSet.addDocument(document1);
        documentSet.addDocument(document2);
        documentSet.removeDocument(document1);
        assertEquals(1, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing multiple documents from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterAddingAndRemovingMultipleDocuments() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(""Document 1"");
        Document document2 = new Document(""Document 2"");
        Document document3 = new Document(""Document 3"");
        documentSet.addDocument(document1);
        documentSet.addDocument(document2);
        documentSet.addDocument(document3);
        documentSet.removeDocument(document2);
        documentSet.addDocument(new Document(""Document 4""));
        assertEquals(3, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing the same document multiple times from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterAddingAndRemovingSameDocument() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(""Document 1"");
        documentSet.addDocument(document1);
        documentSet.removeDocument(document1);
        documentSet.addDocument(document1);
        documentSet.removeDocument(document1);
        assertEquals(0, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing multiple documents with the same name from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterAddingAndRemovingDocumentsWithSameName() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(""Document 1"");
        Document document2 = new Document(""Document 1"");
        documentSet.addDocument(document1);
        documentSet.addDocument(document2);
        documentSet.removeDocument(document1);
        assertEquals(1, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing documents with different names from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterAddingAndRemovingDocumentsWithDifferentNames() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(""Document 1"");
        Document document2 = new Document(""Document 2"");
        documentSet.addDocument(document1);
        documentSet.addDocument(document2);
        documentSet.removeDocument(document1);
        assertEquals(1, documentSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing documents with null names from the DocumentSet.
     */
    @Test
    public void testDocumentCountAfterAddingAndRemovingDocumentsWithNullNames() {
        DocumentSet documentSet = new DocumentSet();
        Document document1 = new Document(null);
        Document document2 = new Document(null);
        documentSet.addDocument(document1);
        documentSet.addDocument(document2);
        documentSet.removeDocument(document1);
        assertEquals(1, documentSet.documentCount());
    }
}"
chatcmpl-6yYBYDfEEhX8yePNO6b6bV1hQoy2K,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/Document.java,23.25948452949524,stop,"// Document.java
import java.io.*;
import java.util.Vector;

/**
 *   Code for storing and processing individual documents of any type.
 */
public class Document {

    /**
     * Convert processed document into one really long string.
     * I'm not quite sure yet why this ever would need to be done.
     */
    public String stringify();
}
","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains ten unit test cases for the {@link Document#stringify()} method.
*/
class DocumentTest {","// Here's an example implementation of the Document class and its test class:

// Document.java
public class Document {
    private String content;

    public Document(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    public String stringify() {
        return content.replaceAll(""\\s+"", """");
    }
}

// DocumentTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DocumentTest {
    @Test
    public void testStringify() {
        Document doc = new Document(""This is a test document."");
        assertEquals(""Thisisatestdocument."", doc.stringify());
    }

    @Test
    public void testStringifyWithWhitespace() {
        Document doc = new Document(""This is a test document."");
        assertEquals(""Thisisatestdocument."", doc.stringify());
    }

    @Test
    public void testStringifyWithNumbers() {
        Document doc = new Document(""12345"");
        assertEquals(""12345"", doc.stringify());
    }

    @Test
    public void testStringifyWithSpecialCharacters() {
        Document doc = new Document(""!@#$%^&*()"");
        assertEquals(""!@#$%^&*()"", doc.stringify());
    }

    @Test
    public void testStringifyWithMixedCharacters() {
        Document doc = new Document(""This is a test document with 12345 and !@#$%^&*()."");
        assertEquals(""Thisisatestdocumentwith12345and!@#$%^&*()."", doc.stringify());
    }

    @Test
    public void testStringifyWithEmptyString() {
        Document doc = new Document("""");
        assertEquals("""", doc.stringify());
    }

    @Test
    public void testStringifyWithNullString() {
        Document doc = new Document(null);
        assertNull(doc.stringify());
    }

    @Test
    public void testStringifyWithSingleCharacter() {
        Document doc = new Document(""a"");
        assertEquals(""a"", doc.stringify());
    }

    @Test
    public void testStringifyWithMultipleSpaces() {
        Document doc = new Document(""This   is   a   test   document."");
        assertEquals(""Thisisatestdocument."", doc.stringify());
    }

    @Test
    public void testStringifyWithTabs() {
        Document doc = new Document(""This\tis\ta\ttest\tdocument."");
        assertEquals(""Thisisatestdocument."", doc.stringify());
    }
}"
