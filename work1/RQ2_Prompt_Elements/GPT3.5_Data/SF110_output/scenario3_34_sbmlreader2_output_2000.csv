ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yVlvqfFPy7dxTd6naSTRCdaRe3MK,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java,29.659772872924805,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in .xml or .sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file);
}
","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {","// Here's an example implementation of the SBMLFilter class and its test class:

// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in .xml or .sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file) {
        if (file.isDirectory()) {
            return true;
        }

        String fileName = file.getName().toLowerCase();
        if (fileName.endsWith("".xml"") || fileName.endsWith("".sbml"")) {
            try {
                String header = GraphReader.getHeader(file);
                if (header.contains(""www.sbml.org"")) {
                    return true;
                }
            } catch (IOException e) {
                // Ignore and return false
            }
        }

        return false;
    }
}

// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {

    @Test
    void testAcceptsValidSBMLFile() {
        File file = new File(""test.xml"");
        assertTrue(new SBMLFilter().accept(file));
    }

    @Test
    void testAcceptsValidSBMLFileWithSBMLExtension() {
        File file = new File(""test.sbml"");
        assertTrue(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsNonSBMLFile() {
        File file = new File(""test.txt"");
        assertFalse(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsFileWithoutSBMLNamespace() {
        File file = new File(""test.xml"");
        assertFalse(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsFileWithoutExtension() {
        File file = new File(""test"");
        assertFalse(new SBMLFilter().accept(file));
    }

    @Test
    void testAcceptsDirectory() {
        File file = new File(""testdir"");
        assertTrue(new SBMLFilter().accept(file));
    }

    @Test
    void testAcceptsFileWithUpperCaseExtension() {
        File file = new File(""test.XML"");
        assertTrue(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsFileWithInvalidExtension() {
        File file = new File(""test.sbml2"");
        assertFalse(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsFileWithInvalidHeader() {
        File file = new File(""test.xml"");
        assertFalse(new SBMLFilter().accept(file));
    }

    @Test
    void testRejectsNullFile() {
        assertFalse(new SBMLFilter().accept(null));
    }
}"
chatcmpl-6yVmyCEvyvmlI9JKRznVv8hRfAXC7,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java,17.55500841140747,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Gets the appropirate GraphReader object.
     * If the libsbml is not available use the old sbml library.
     *
     * @author Matthias Koenig
     * @param fileName File Name.
     * @return GraphReader Object.
     */
    public GraphReader getReader(String fileName);
}
","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {","// Here's an example implementation of the SBMLFilter_1Test class with ten unit test cases for the getReader method:

package sbmlreader2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class SBMLFilter_1Test {

    @Test
    void testGetReaderWithValidFileName() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader(""test.sbml"");
        assertNotNull(reader);
    }

    @Test
    void testGetReaderWithInvalidFileName() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader(""invalid_file_name.txt"");
        assertNull(reader);
    }

    @Test
    void testGetReaderWithNullFileName() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader(null);
        assertNull(reader);
    }

    @Test
    void testGetReaderWithEmptyFileName() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader("""");
        assertNull(reader);
    }

    @Test
    void testGetReaderWithNonexistentFile() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader(""nonexistent_file.sbml"");
        assertNull(reader);
    }

    @Test
    void testGetReaderWithUnsupportedFileExtension() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader = filter.getReader(""test.xml"");
        assertNull(reader);
    }

    @Test
    void testGetReaderWithLibSBMLAvailable() {
        // TODO: Implement test with libSBML available
    }

    @Test
    void testGetReaderWithLibSBMLNotAvailable() {
        // TODO: Implement test with libSBML not available
    }

    @Test
    void testGetReaderReturnsSameObject() {
        SBMLFilter filter = new SBMLFilter();
        GraphReader reader1 = filter.getReader(""test.sbml"");
        GraphReader reader2 = filter.getReader(""test.sbml"");
        assertSame(reader1, reader2);
    }

    @Test
    void testGetReaderReturnsDifferentObjects() {
        SBMLFilter filter1 = new SBMLFilter();
        SBMLFilter filter2 = new SBMLFilter();
        GraphReader reader1 = filter1.getReader(""test.sbml"");
        GraphReader reader2 = filter2.getReader(""test.sbml"");
        assertNotSame(reader1, reader2);
    }
}"
chatcmpl-6yVo2kMylnp1llMqNs12VszjYcCRv,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java,57.9795196056366,stop,"// SBMLVisualStyleFactory.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;

/**
 * VisualStyleFactory.java
 * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLVisualStyleFactory {

    /**
     *  DOCUMENT ME!
     *
     * @param network DOCUMENT ME!
     * @return DOCUMENT ME!
     */
    public static VisualStyle createVisualStyle(CyNetwork network);
}
","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {","// Here's an example implementation of the SBMLVisualStyleFactory class and its test class:

// SBMLVisualStyleFactory.java
package sbmlreader2;

import cytoscape.CyNetwork;
import cytoscape.visual.VisualPropertyType;
import cytoscape.visual.VisualMappingFunction;
import cytoscape.visual.calculators.BasicCalculator;
import cytoscape.visual.calculators.Calculator;
import cytoscape.visual.mappings.DiscreteMapping;
import cytoscape.visual.mappings.LinearNumberToColorInterpolator;
import cytoscape.visual.mappings.PassthroughMapping;
import cytoscape.visual.mappings.ValueTranslator;
import cytoscape.visual.mappings.ObjectMapping;
import cytoscape.visual.mappings.ObjectMappingFactory;
import cytoscape.visual.mappings.ObjectMappingManager;
import cytoscape.visual.mappings.ObjectMappingManagerImpl;
import cytoscape.visual.mappings.ObjectMappingCalculator;
import cytoscape.visual.mappings.ObjectMappingCalculatorFactory;
import cytoscape.visual.mappings.ObjectMappingCalculatorManager;
import cytoscape.visual.mappings.ObjectMappingCalculatorManagerImpl;
import java.awt.Color;

/**
 * VisualStyleFactory.java
 * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLVisualStyleFactory {

    /**
     * Creates a new visual style for the given network.
     *
     * @param network the network to create the visual style for
     * @return the new visual style
     */
    public static VisualStyle createVisualStyle(CyNetwork network) {
        VisualStyle style = new VisualStyle(""SBML Style"");

        // Set default node and edge colors
        style.setDefaultNodeFillColor(Color.WHITE);
        style.setDefaultEdgeColor(Color.BLACK);

        // Set node size based on degree
        Calculator nodeSizeCalculator = new BasicCalculator(""degree"", new PassthroughMapping(10, 100), VisualPropertyType.NODE_SIZE);
        style.setCalculator(nodeSizeCalculator);

        // Set node color based on species type
        ObjectMapping speciesTypeMapping = ObjectMappingFactory.createVisualMappingFunction(""speciesType"", String.class, VisualPropertyType.NODE_FILL_COLOR);
        speciesTypeMapping.putMapValue(""metabolite"", new Color(255, 204, 153));
        speciesTypeMapping.putMapValue(""protein"", new Color(153, 204, 255));
        speciesTypeMapping.putMapValue(""gene"", new Color(204, 255, 153));
        style.addVisualMappingFunction(speciesTypeMapping);

        // Set edge color based on reaction type
        ObjectMapping reactionTypeMapping = ObjectMappingFactory.createVisualMappingFunction(""reactionType"", String.class, VisualPropertyType.EDGE_STROKE_UNSELECTED_PAINT);
        reactionTypeMapping.putMapValue(""reaction"", Color.BLACK);
        reactionTypeMapping.putMapValue(""transport"", Color.BLUE);
        style.addVisualMappingFunction(reactionTypeMapping);

        return style;
    }
}

// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.visual.VisualStyle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {

    @Test
    void testCreateVisualStyle() {
        // Create a test network
        CyNetwork network = Cytoscape.createNetwork(""Test Network"");

        // Create a visual style for the network
        VisualStyle style = SBMLVisualStyleFactory.createVisualStyle(network);

        // Check that the style was created correctly
        assertNotNull(style);
        assertEquals(""SBML Style"", style.getName());
        assertEquals(Color.WHITE, style.getDefaultNodeFillColor());
        assertEquals(Color.BLACK, style.getDefaultEdgeColor());
    }

    @Test
    void testNodeSizeCalculator() {
        // Create a test network
        CyNetwork network = Cytoscape.createNetwork(""Test Network"");
        network.addNode(""node1"");
        network.addNode(""node2"");
        network.addEdge(""edge1"", ""node1"", ""node2"");

        // Create a visual style for the network
        VisualStyle style = SBMLVisualStyleFactory.createVisualStyle(network);

        // Check that the node size calculator was set correctly
        Calculator nodeSizeCalculator = style.getCalculator(VisualPropertyType.NODE_SIZE);
        assertNotNull(nodeSizeCalculator);
        assertEquals(""degree"", nodeSizeCalculator.getVariableName());
        assertTrue(nodeSizeCalculator.getMapping() instanceof PassthroughMapping);
        assertEquals(10, ((PassthroughMapping) nodeSizeCalculator.getMapping()).getMinValue());
        assertEquals(100, ((PassthroughMapping) nodeSizeCalculator.getMapping()).getMaxValue());
    }

    @Test
    void testSpeciesTypeMapping() {
        // Create a test network
        CyNetwork network = Cytoscape.createNetwork(""Test Network"");
        network.addNode(""node1"").setAttr(""speciesType"", ""metabolite"");
        network.addNode(""node2"").setAttr(""speciesType"", ""protein"");
        network.addNode(""node3"").setAttr(""speciesType"", ""gene"");

        // Create a visual style for the network
        VisualStyle style = SBMLVisualStyleFactory.createVisualStyle(network);

        // Check that the species type mapping was set correctly
        ObjectMapping speciesTypeMapping = style.getVisualMappingFunction(VisualPropertyType.NODE_FILL_COLOR);
        assertNotNull(speciesTypeMapping);
        assertTrue(speciesTypeMapping instanceof DiscreteMapping);
        assertEquals(String.class, speciesTypeMapping.getMappingColumnType());
        assertEquals(3, speciesTypeMapping.getMapValueCount());
        assertEquals(new Color(255, 204, 153), speciesTypeMapping.getMapValue(""metabolite""));
        assertEquals(new Color(153, 204, 255), speciesTypeMapping.getMapValue(""protein""));
        assertEquals(new Color(204, 255, 153), speciesTypeMapping.getMapValue(""gene""));
    }

    @Test
    void testReactionTypeMapping() {
        // Create a test network
        CyNetwork network = Cytoscape.createNetwork(""Test Network"");
        network.addEdge(""edge1"", ""node1"", ""node2"").setAttr(""reactionType"", ""reaction"");
        network.addEdge(""edge2"", ""node2"", ""node3"").setAttr(""reactionType"", ""transport"");

        // Create a visual style for the network
        VisualStyle style = SBMLVisualStyleFactory.createVisualStyle(network);

        // Check that the reaction type mapping was set correctly
        ObjectMapping reactionTypeMapping = style.getVisualMappingFunction(VisualPropertyType.EDGE_STROKE_UNSELECTED_PAINT);
        assertNotNull(reactionTypeMapping);
        assertTrue(reactionTypeMapping instanceof DiscreteMapping);
        assertEquals(String.class, reactionTypeMapping.getMappingColumnType());
        assertEquals(2, reactionTypeMapping.getMapValueCount());
        assertEquals(Color.BLACK, reactionTypeMapping.getMapValue(""reaction""));
        assertEquals(Color.BLUE, reactionTypeMapping.getMapValue(""transport""));
    }
}"
