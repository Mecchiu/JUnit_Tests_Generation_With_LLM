ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yTB6kohq0wp1jeJKQ5Oy6VHEN4xd,/EvoSuiteBenchmark/original/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat.java,11.34477949142456,stop,"// HSSFDataFormat.java
/*
 * HSSFDataFormat.java
 *
 * Created on December 18, 2001, 12:42 PM
 */
package org.apache.poi.hssf.usermodel;

import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.record.FormatRecord;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;

public class HSSFDataFormat {

    private static List builtinFormats = createBuiltinFormats();

    private Vector formats = new Vector();

    private Workbook workbook;

    // Flag to see if need to
    private boolean movedBuiltins = false;

    /**
     * Construncts a new data formatter.  It takes a workbook to have
     * access to the workbooks format records.
     * @param workbook the workbook the formats are tied to.
     */
    public HSSFDataFormat(Workbook workbook) {
    }

    private static synchronized List createBuiltinFormats();

    public static List getBuiltinFormats();

    public static short getBuiltinFormat(String format);

    /**
     * Get the format index that matches the given format
     *  string, creating a new format entry if required.
     * Aliases text to the proper format as required.
     * @param format string matching a built in format
     * @return index of format.
     */
    public short getFormat(String format);

    public String getFormat(short index);

    public static String getBuiltinFormat(short index);

    public static int getNumberOfBuiltinBuiltinFormats();
}
","// HSSFDataFormatTest.java
/*
 * HSSFDataFormat.java
 *
 * Created on December 18, 2001, 12:42 PM
 */
package org.apache.poi.hssf.usermodel;

import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.record.FormatRecord;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HSSFDataFormat}.
* It contains ten unit test cases for the {@link HSSFDataFormat#getFormat(String)} method.
*/
class HSSFDataFormatTest {","// Test class of HSSFDataFormat
package org.apache.poi.hssf.usermodel;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class HSSFDataFormatTest {
    
    @Test
    void testGetFormat() {
        HSSFDataFormat dataFormat = new HSSFDataFormat(null);
        short index = dataFormat.getFormat(""0.00"");
        assertEquals(0x2, index);
        
        index = dataFormat.getFormat(""#,##0.00"");
        assertEquals(0x3, index);
        
        index = dataFormat.getFormat(""0.00%"");
        assertEquals(0xa, index);
        
        index = dataFormat.getFormat(""0.00E+00"");
        assertEquals(0x12, index);
        
        index = dataFormat.getFormat(""##0.0E+0"");
        assertEquals(0x11, index);
        
        index = dataFormat.getFormat(""yyyy/mm/dd"");
        assertEquals(0x2d, index);
        
        index = dataFormat.getFormat(""d-mmm-yy"");
        assertEquals(0x0e, index);
        
        index = dataFormat.getFormat(""hh:mm:ss"");
        assertEquals(0x16, index);
        
        index = dataFormat.getFormat(""0.00_);[Red]\\(0.00\\)"");
        assertEquals(0x10, index);
        
        index = dataFormat.getFormat(""0.00_);\\(0.00\\)"");
        assertEquals(0xf, index);
    }
}"
