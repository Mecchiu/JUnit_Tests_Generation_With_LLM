ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yPpAN4YGc2qbNXjcJM6NdLO1y9w9,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/EventSet.java,42.98942828178406,stop,"// EventSet.java
import java.util.Vector;
import java.util.List;

public class EventSet {

    public int size() {
        return events.size();
    }
}
","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains ten unit test cases for the {@link EventSet#size()} method.
*/
class EventSetTest {","@Test
void testEmptyEventSetSize() {
    EventSet eventSet = new EventSet();
    assertEquals(0, eventSet.size());
}

@Test
void testEventSetSizeWithOneEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetSizeWithMultipleEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    eventSet.add(new Event(""Event 3""));
    assertEquals(3, eventSet.size());
}

@Test
void testEventSetSizeAfterRemovingEvent() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.add(new Event(""Event 2""));
    eventSet.add(new Event(""Event 3""));
    eventSet.remove(event1);
    assertEquals(2, eventSet.size());
}

@Test
void testEventSetSizeAfterClearing() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    eventSet.add(new Event(""Event 3""));
    eventSet.clear();
    assertEquals(0, eventSet.size());
}

@Test
void testEventSetSizeWithNullEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(null);
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetSizeWithDuplicateEvents() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.add(event1);
    assertEquals(2, eventSet.size());
}

@Test
void testEventSetSizeWithDifferentTypesOfEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Meeting(""Meeting 1""));
    eventSet.add(new Task(""Task 1""));
    assertEquals(3, eventSet.size());
}

@Test
void testEventSetSizeWithEmptyEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""""));
    eventSet.add(new Meeting(""""));
    eventSet.add(new Task(""""));
    assertEquals(3, eventSet.size());
}

@Test
void testEventSetSizeWithEventsWithSameName() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Meeting(""Event 1""));
    eventSet.add(new Task(""Event 1""));
    assertEquals(3, eventSet.size());
}
}"
chatcmpl-6yPqDzOIpGTTimJGUQfGxZnOInKlo,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/DocumentSet.java,19.9937264919281,stop,"// DocumentSet.java
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;

/**
 * A Document Set is a group of documents written by the same author.
 * This can be used to facilitate event sets that are larger than just
 * a single document, which may be more indicative of an author's
 * entire body of work.
 */
public class DocumentSet {

    public int documentCount() {
        return documents.size();
    }
}
","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {","// Here's an example implementation of the DocumentSetTest class with ten unit test cases for the documentCount() method:

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class DocumentSetTest {

    @Test
    void testEmptyDocumentSet() {
        DocumentSet set = new DocumentSet();
        assertEquals(0, set.documentCount());
    }

    @Test
    void testSingleDocumentSet() {
        DocumentSet set = new DocumentSet();
        set.addDocument(new Document(""Hello world!""));
        assertEquals(1, set.documentCount());
    }

    @Test
    void testMultipleDocumentSet() {
        DocumentSet set = new DocumentSet();
        set.addDocument(new Document(""Hello world!""));
        set.addDocument(new Document(""Goodbye world!""));
        assertEquals(2, set.documentCount());
    }

    @Test
    void testDuplicateDocuments() {
        DocumentSet set = new DocumentSet();
        Document doc = new Document(""Hello world!"");
        set.addDocument(doc);
        set.addDocument(doc);
        assertEquals(2, set.documentCount());
    }

    @Test
    void testNullDocument() {
        DocumentSet set = new DocumentSet();
        set.addDocument(null);
        assertEquals(0, set.documentCount());
    }

    @Test
    void testRemoveDocument() {
        DocumentSet set = new DocumentSet();
        Document doc = new Document(""Hello world!"");
        set.addDocument(doc);
        set.removeDocument(doc);
        assertEquals(0, set.documentCount());
    }

    @Test
    void testRemoveNonexistentDocument() {
        DocumentSet set = new DocumentSet();
        Document doc = new Document(""Hello world!"");
        set.removeDocument(doc);
        assertEquals(0, set.documentCount());
    }

    @Test
    void testAddNullDocument() {
        DocumentSet set = new DocumentSet();
        set.addDocument(null);
        assertEquals(0, set.documentCount());
    }

    @Test
    void testAddMultipleNullDocuments() {
        DocumentSet set = new DocumentSet();
        set.addDocument(null);
        set.addDocument(null);
        assertEquals(0, set.documentCount());
    }

    @Test
    void testAddAndRemoveDocuments() {
        DocumentSet set = new DocumentSet();
        Document doc1 = new Document(""Hello world!"");
        Document doc2 = new Document(""Goodbye world!"");
        set.addDocument(doc1);
        set.addDocument(doc2);
        set.removeDocument(doc1);
        assertEquals(1, set.documentCount());
    }
}"
chatcmpl-6yPrGte4Q6aHOKKHKUXNsOUhzC1dd,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/Document.java,47.03753900527954,stop,"// Document.java
import java.io.*;
import java.util.Vector;

/**
 *   Code for storing and processing individual documents of any type.
 */
public class Document {

    public String stringify() {
        String t = new String();
        for (int i = 0; i < procText.size(); i++) t += (char) procText.elementAt(i);
        return t;
    }
}
","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains ten unit test cases for the {@link Document#stringify()} method.
*/
class DocumentTest {","Here's the code for the DocumentTest class with ten unit test cases for the stringify() method:

```
import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Document}.
 * It contains ten unit test cases for the {@link Document#stringify()} method.
 */
class DocumentTest {

    @Test
    void testEmptyDocument() {
        Document doc = new Document();
        assertEquals("""", doc.stringify());
    }

    @Test
    void testSingleCharDocument() {
        Document doc = new Document();
        doc.procText.add((int) 'a');
        assertEquals(""a"", doc.stringify());
    }

    @Test
    void testMultiCharDocument() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        assertEquals(""hello"", doc.stringify());
    }

    @Test
    void testDocumentWithSpaces() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        doc.procText.add((int) ' ');
        doc.procText.add((int) 'w');
        doc.procText.add((int) 'o');
        doc.procText.add((int) 'r');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'd');
        assertEquals(""hello world"", doc.stringify());
    }

    @Test
    void testDocumentWithNewlines() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        doc.procText.add((int) '\n');
        doc.procText.add((int) 'w');
        doc.procText.add((int) 'o');
        doc.procText.add((int) 'r');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'd');
        assertEquals(""hello\nworld"", doc.stringify());
    }

    @Test
    void testDocumentWithSpecialChars() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        doc.procText.add((int) '!');
        doc.procText.add((int) '@');
        doc.procText.add((int) '#');
        doc.procText.add((int) '$');
        doc.procText.add((int) '%');
        assertEquals(""hello!@#$%"", doc.stringify());
    }

    @Test
    void testDocumentWithUnicodeChars() {
        Document doc = new Document();
        doc.procText.add(0x1F600); // grinning face emoji
        doc.procText.add(0x1F601); // grinning face with smiling eyes emoji
        doc.procText.add(0x1F602); // face with tears of joy emoji
        assertEquals(""\uD83D\uDE00\uD83D\uDE01\uD83D\uDE02"", doc.stringify());
    }

    @Test
    void testDocumentWithMixedChars() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        doc.procText.add((int) ' ');
        doc.procText.add(0x1F600); // grinning face emoji
        doc.procText.add((int) ' ');
        doc.procText.add((int) 'w');
        doc.procText.add((int) 'o');
        doc.procText.add((int) 'r');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'd');
        assertEquals(""hello \uD83D\uDE00 world"", doc.stringify());
    }

    @Test
    void testDocumentWithNullChars() {
        Document doc = new Document();
        doc.procText.add((int) 'h');
        doc.procText.add((int) 'e');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'o');
        doc.procText.add(0);
        doc.procText.add((int) 'w');
        doc.procText.add((int) 'o');
        doc.procText.add((int) 'r');
        doc.procText.add((int) 'l');
        doc.procText.add((int) 'd');
        assertEquals(""hello\0world"", doc.stringify());
    }

    @Test
    void testDocumentWithMaxIntChars() {
        Document doc = new Document();
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            doc.procText.add(i % 256);
        }
        assertEquals(Integer.MAX_VALUE, doc.stringify().length());
    }

    @Test
    void testDocumentWithMaxIntPlusOneChars() {
        Document doc = new Document();
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            doc.procText.add(i % 256);
        }
        doc.procText.add(0);
        assertEquals(Integer.MAX_VALUE + 1, doc.stringify().length());
    }
}
```"
