[
    {
        "id": "chatcmpl-6yM0ObIMbP66kV2len1iUTolTvL2O",
        "object": "chat.completion",
        "created": 1679842288,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 454,
            "completion_tokens": 1789,
            "total_tokens": 2243
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n}"
            }
        ],
        "time_taken": 73.86698651313782,
        "prompt_id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java",
        "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n",
        "test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {",
        "original_generated_code": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_noSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSortingDesc_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table ORDER BY column DESC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column = :param\";\n        loader.setSql(sql);\n        HashMap<String, Object> params = new HashMap<>();\n        params.put(\"param\", \"value\");\n        loader.setPas(params);\n        loader.setSort(\"column\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(0);\n        loader.setLimit(10);\n        String sortedSql = \"SELECT * FROM table WHERE column = :param ORDER BY column ASC\";\n        when(session.createSQLQuery(sortedSql)).thenReturn(query);\n        when(query.setParameter(\"param\", \"value\")).thenReturn(query);\n        when(query.setFirstResult(0)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        List<Object> rows = mock(List.class);\n        when(query.list()).thenReturn(rows);\n        assertEquals(rows, loader.loadDataWithSql());\n        verify(session).createSQLQuery(sortedSql);\n        verify(query).setParameter(\"param\", \"value\");\n        verify(query).setFirstResult(0);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n    }\n}",
        "applied_heuristics": ""
    }
]