[
    {
        "id": "chatcmpl-6yTu1C6hnHzbnDovlzvVhd97AyfL8",
        "object": "chat.completion",
        "created": 1679872645,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 547,
            "completion_tokens": 207,
            "total_tokens": 754
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// StartupOptionsTest.java\npackage macaw.system;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link StartupOptions}.\n * It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.\n */\nclass StartupOptionsTest {\n\n    @Test\n    void testUseDemo() {\n        StartupOptions options = new StartupOptions();\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// StartupOptionsTest.java\npackage macaw.system;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link StartupOptions}.\n * It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.\n */\nclass StartupOptionsTest {\n\n    @Test\n    void testUseDemo() {\n        StartupOptions options = new StartupOptions();\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n    }\n}"
            }
        ],
        "time_taken": 7.075134992599487,
        "prompt_id": "/EvoSuiteBenchmark/original/69_lhamacaw/src/main/java/macaw/system/StartupOptions.java",
        "original_code": "// StartupOptions.java\npackage macaw.system;\n\npublic class StartupOptions {\n\n    // ==========================================\n    private boolean useDemo;\n\n    private String databaseName;\n\n    private String dbDriverName;\n\n    private String dbUser;\n\n    private String dbPassword;\n\n    private String server;\n\n    private String port;\n\n    private int maximumNumberOfConnections;\n\n    // ==========================================\n    public StartupOptions() {\n    }\n\n    // ==========================================\n    public void processCommandLineArguments(String[] arguments);\n\n    public String getDatabaseURI();\n\n    /**\n     * @return the dbUser\n     */\n    public String getDbUser();\n\n    /**\n     * @param dbUser the dbUser to set\n     */\n    public void setDbUser(String dbUser);\n\n    /**\n     * @return the dbPassword\n     */\n    public String getDbPassword();\n\n    /**\n     * @param dbPassword the dbPassword to set\n     */\n    public void setDbPassword(String dbPassword);\n\n    /**\n     * @return the server\n     */\n    public String getServer();\n\n    /**\n     * @param server the server to set\n     */\n    public void setServer(String server);\n\n    /**\n     * @return the port\n     */\n    public String getPort();\n\n    /**\n     * @param port the port to set\n     */\n    public void setPort(String port);\n\n    /**\n     * @return the useDemo\n     */\n    public boolean useDemo();\n\n    /**\n     * @param useDemo the useDemo to set\n     */\n    public void setUseDemo(boolean useDemo);\n\n    /**\n     * @return the databaseName\n     */\n    public String getDatabaseName();\n\n    /**\n     * @param databaseName the databaseName to set\n     */\n    public void setDatabaseName(String databaseName);\n\n    /**\n     * @return the dbDriverName\n     */\n    public String getDbDriverName();\n\n    /**\n     * @param dbDriverName the dbDriverName to set\n     */\n    public void setDbDriverName(String dbDriverName);\n\n    /**\n     * @return the maximumNumberOfConnections\n     */\n    public int getMaximumNumberOfConnections();\n\n    /**\n     * @param maximumNumberOfConnections the maximumNumberOfConnections to set\n     */\n    public void setMaximumNumberOfConnections(int maximumNumberOfConnections);\n}\n",
        "test_prompt": "// StartupOptionsTest.java\npackage macaw.system;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartupOptions}.\n* It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.\n*/\nclass StartupOptionsTest {",
        "original_generated_code": "// StartupOptionsTest.java\npackage macaw.system;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link StartupOptions}.\n * It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.\n */\nclass StartupOptionsTest {\n\n    @Test\n    void testUseDemo() {\n        StartupOptions options = new StartupOptions();\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n\n        options.setUseDemo(false);\n        assertFalse(options.useDemo());\n\n        options.setUseDemo(true);\n        assertTrue(options.useDemo());\n    }\n}",
        "applied_heuristics": ""
    }
]