ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yM0ObIMbP66kV2len1iUTolTvL2O,/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java,73.86698651313782,stop,"// Loader.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

public class Loader {

    public List loadDataWithSql() {
        session = HibernateSessionFactory.currentSession();
        this.getQuerySql();
        if (sort != null && sort != """") {
            if (this.sql.indexOf(""order by"") > 0) {
                this.sql = this.sql.substring(0, this.sql.indexOf(""order by"")) + "" order by "" + sort + "" "" + dir;
            } else {
                this.sql = this.sql + "" order by "" + sort + "" "" + dir;
            }
        }
        query = session.createSQLQuery(this.sql);
        if (pas != null) {
            query = this.getParams(query, pas);
        }
        if (paging) {
            query.setFirstResult(start);
            query.setMaxResults(limit);
        }
        List rows = query.list();
        HibernateSessionFactory.closeSession();
        this.setRs(rows);
        return rows;
    }
}
","// LoaderTest.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.
*/
class LoaderTest {","// LoaderTest.java
package com.hf.sfm.util;

import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

/**
 * Test class of {@link Loader}.
 * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.
 */
class LoaderTest {

    private Loader loader;
    private Session session;
    private Query query;

    @BeforeEach
    void setUp() {
        loader = new Loader();
        session = mock(Session.class);
        query = mock(Query.class);
        HibernateSessionFactory.setSession(session);
    }

    @Test
    void testLoadDataWithSql_noParams_noSorting_noPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        when(session.createSQLQuery(sql)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sql);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_withParams_noSorting_noPaging() {
        String sql = ""SELECT * FROM table WHERE column = :param"";
        loader.setSql(sql);
        HashMap<String, Object> params = new HashMap<>();
        params.put(""param"", ""value"");
        loader.setPas(params);
        when(session.createSQLQuery(sql)).thenReturn(query);
        when(query.setParameter(""param"", ""value"")).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sql);
        verify(query).setParameter(""param"", ""value"");
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_noParams_withSorting_noPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        loader.setSort(""column"");
        loader.setDir(""ASC"");
        String sortedSql = ""SELECT * FROM table ORDER BY column ASC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_noParams_withSortingDesc_noPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        loader.setSort(""column"");
        loader.setDir(""DESC"");
        String sortedSql = ""SELECT * FROM table ORDER BY column DESC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_withParams_withSorting_noPaging() {
        String sql = ""SELECT * FROM table WHERE column = :param"";
        loader.setSql(sql);
        HashMap<String, Object> params = new HashMap<>();
        params.put(""param"", ""value"");
        loader.setPas(params);
        loader.setSort(""column"");
        loader.setDir(""ASC"");
        String sortedSql = ""SELECT * FROM table WHERE column = :param ORDER BY column ASC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        when(query.setParameter(""param"", ""value"")).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).setParameter(""param"", ""value"");
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_noParams_noSorting_withPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        loader.setPaging(true);
        loader.setStart(0);
        loader.setLimit(10);
        when(session.createSQLQuery(sql)).thenReturn(query);
        when(query.setFirstResult(0)).thenReturn(query);
        when(query.setMaxResults(10)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sql);
        verify(query).setFirstResult(0);
        verify(query).setMaxResults(10);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_withParams_noSorting_withPaging() {
        String sql = ""SELECT * FROM table WHERE column = :param"";
        loader.setSql(sql);
        HashMap<String, Object> params = new HashMap<>();
        params.put(""param"", ""value"");
        loader.setPas(params);
        loader.setPaging(true);
        loader.setStart(0);
        loader.setLimit(10);
        when(session.createSQLQuery(sql)).thenReturn(query);
        when(query.setParameter(""param"", ""value"")).thenReturn(query);
        when(query.setFirstResult(0)).thenReturn(query);
        when(query.setMaxResults(10)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sql);
        verify(query).setParameter(""param"", ""value"");
        verify(query).setFirstResult(0);
        verify(query).setMaxResults(10);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_noParams_withSorting_withPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        loader.setSort(""column"");
        loader.setDir(""ASC"");
        loader.setPaging(true);
        loader.setStart(0);
        loader.setLimit(10);
        String sortedSql = ""SELECT * FROM table ORDER BY column ASC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        when(query.setFirstResult(0)).thenReturn(query);
        when(query.setMaxResults(10)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).setFirstResult(0);
        verify(query).setMaxResults(10);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_noParams_withSortingDesc_withPaging() {
        String sql = ""SELECT * FROM table"";
        loader.setSql(sql);
        loader.setSort(""column"");
        loader.setDir(""DESC"");
        loader.setPaging(true);
        loader.setStart(0);
        loader.setLimit(10);
        String sortedSql = ""SELECT * FROM table ORDER BY column DESC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        when(query.setFirstResult(0)).thenReturn(query);
        when(query.setMaxResults(10)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).setFirstResult(0);
        verify(query).setMaxResults(10);
        verify(query).list();
    }

    @Test
    void testLoadDataWithSql_withParams_withSorting_withPaging() {
        String sql = ""SELECT * FROM table WHERE column = :param"";
        loader.setSql(sql);
        HashMap<String, Object> params = new HashMap<>();
        params.put(""param"", ""value"");
        loader.setPas(params);
        loader.setSort(""column"");
        loader.setDir(""ASC"");
        loader.setPaging(true);
        loader.setStart(0);
        loader.setLimit(10);
        String sortedSql = ""SELECT * FROM table WHERE column = :param ORDER BY column ASC"";
        when(session.createSQLQuery(sortedSql)).thenReturn(query);
        when(query.setParameter(""param"", ""value"")).thenReturn(query);
        when(query.setFirstResult(0)).thenReturn(query);
        when(query.setMaxResults(10)).thenReturn(query);
        List<Object> rows = mock(List.class);
        when(query.list()).thenReturn(rows);
        assertEquals(rows, loader.loadDataWithSql());
        verify(session).createSQLQuery(sortedSql);
        verify(query).setParameter(""param"", ""value"");
        verify(query).setFirstResult(0);
        verify(query).setMaxResults(10);
        verify(query).list();
    }
}"
