ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yRmwE9S6P4CgdgPZnVKXUQW3vlh1,/EvoSuiteBenchmark/original/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilter.java,19.220213890075684,stop,"// HTMLFilter.java
package com.imsmart.servlet;

public final class HTMLFilter {

    public static String filter(String message) {
        if (message == null)
            return (null);
        char[] content = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length + 50);
        for (int i = 0; i < content.length; i++) {
            switch(content[i]) {
                case '<':
                    result.append(""&lt;"");
                    break;
                case '>':
                    result.append(""&gt;"");
                    break;
                case '&':
                    result.append(""&amp;"");
                    break;
                case '""':
                    result.append(""&quot;"");
                    break;
                default:
                    result.append(content[i]);
            }
        }
        return (result.toString());
    }
}
","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {","// Here's an example of how you can complete the HTMLFilterTest class:

@Test
void testNullInput() {
    assertNull(HTMLFilter.filter(null));
}

@Test
void testEmptyInput() {
    assertEquals("""", HTMLFilter.filter(""""));
}

@Test
void testNoSpecialCharacters() {
    String input = ""This is a test message."";
    assertEquals(input, HTMLFilter.filter(input));
}

@Test
void testLessThan() {
    String input = ""This is < a test message."";
    String expected = ""This is &lt; a test message."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testGreaterThan() {
    String input = ""This is > a test message."";
    String expected = ""This is &gt; a test message."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testAmpersand() {
    String input = ""This is & a test message."";
    String expected = ""This is &amp; a test message."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testDoubleQuotes() {
    String input = ""This is \"" a test message."";
    String expected = ""This is &quot; a test message."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testMultipleSpecialCharacters() {
    String input = ""This is < a test message with & and \"" characters >."";
    String expected = ""This is &lt; a test message with &amp; and &quot; characters &gt;."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testLongInput() {
    String input = ""This is a very long test message with lots of special characters like <, >, &, and \""."";
    String expected = ""This is a very long test message with lots of special characters like &lt;, &gt;, &amp;, and &quot;."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testInputWithNewlines() {
    String input = ""This is a test message.\nIt has multiple lines.\nAnd some special characters like <, >, &, and \""."";
    String expected = ""This is a test message.\nIt has multiple lines.\nAnd some special characters like &lt;, &gt;, &amp;, and &quot;."";
    assertEquals(expected, HTMLFilter.filter(input));
}

@Test
void testInputWithTabs() {
    String input = ""This is a test message.\tIt has tabs.\tAnd some special characters like <, >, &, and \""."";
    String expected = ""This is a test message.\tIt has tabs.\tAnd some special characters like &lt;, &gt;, &amp;, and &quot;."";
    assertEquals(expected, HTMLFilter.filter(input));
}"
