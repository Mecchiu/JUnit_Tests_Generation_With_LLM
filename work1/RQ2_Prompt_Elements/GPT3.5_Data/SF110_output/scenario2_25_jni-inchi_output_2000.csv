ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yapw6xUhRw9HG1kfhDn7eA8ep7wD,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_0Test.java,71.55507564544678,stop,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    /**
     * <p>Convenience method for generating 0D stereo parities at tetrahedral
     * atom centres.
     *
     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>
     * <pre>
     *  4 neighbors
     *
     *           X                    neighbor[4] : {#W, #X, #Y, #Z}
     *           |                    central_atom: #A
     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral
     *           |
     *           Z
     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is 'e' otherwise 'o'
     *  Example (see AXYZW above): if W is above the plane XYZ then parity = 'e'
     *
     *  3 neighbors
     *
     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}
     *            /          /        central_atom: #A
     *        X--A  (e.g. O=S   )     type        : INCHI_StereoType_Tetrahedral
     *            \          \
     *             Z          Z
     *
     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is 'e',
     *                                                         otherwise 'o'
     *  unknown parity = 'u'
     *  Example (see AXYZ above): if A is above the plane XYZ then parity = 'e'
     *  This approach may be used also in case of an implicit H attached to A.
     *
     *  ==============================================
     *  Note. Correspondence to CML 0D stereo parities
     *  ==============================================
     *  a list of 4 atoms corresponds to CML atomRefs4
     *
     *  tetrahedral atom
     *  ================
     *  CML atomParity > 0 <=> INCHI_PARITY_EVEN
     *  CML atomParity < 0 <=> INCHI_PARITY_ODD
     *
     *                               | 1   1   1   1  |  where xW is x-coordinate of
     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a
     *  CML atomParity = determinant | yW  yX  yY  yZ |  'right-handed' Cartesian
     *                               | zW  zX  xY  zZ |  coordinate system)
     * </pre>
     *
     * @param atC Central atom
     * @param at0 Neighbour atom 0
     * @param at1 Neighbour atom 1
     * @param at2 Neighbour atom 2
     * @param at3 Neighbour atom 3
     * @param parity Parity
     */
    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);
        return stereo;
    }
}
","// JniInchiStereo0D_0Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_0Test {","// Test case 1: Test with all atoms null
@Test
public void testCreateNewTetrahedralStereo0D_NullAtoms() {
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(null, null, null, null, null, INCHI_PARITY.EVEN);
    assertNull(stereo);
}

// Test case 2: Test with central atom null
@Test
public void testCreateNewTetrahedralStereo0D_NullCentralAtom() {
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(null, at0, at1, at2, at3, INCHI_PARITY.EVEN);
    assertNull(stereo);
}

// Test case 3: Test with all neighbour atoms null
@Test
public void testCreateNewTetrahedralStereo0D_NullNeighbourAtoms() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, null, null, null, null, INCHI_PARITY.EVEN);
    assertNull(stereo);
}

// Test case 4: Test with parity null
@Test
public void testCreateNewTetrahedralStereo0D_NullParity() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, null);
    assertNull(stereo);
}

// Test case 5: Test with valid inputs and even parity
@Test
public void testCreateNewTetrahedralStereo0D_EvenParity() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, INCHI_PARITY.EVEN);
    assertNotNull(stereo);
    assertEquals(INCHI_STEREOTYPE.TETRAHEDRAL, stereo.getStereoType());
    assertEquals(INCHI_PARITY.EVEN, stereo.getParity());
}

// Test case 6: Test with valid inputs and odd parity
@Test
public void testCreateNewTetrahedralStereo0D_OddParity() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, INCHI_PARITY.ODD);
    assertNotNull(stereo);
    assertEquals(INCHI_STEREOTYPE.TETRAHEDRAL, stereo.getStereoType());
    assertEquals(INCHI_PARITY.ODD, stereo.getParity());
}

// Test case 7: Test with valid inputs and unknown parity
@Test
public void testCreateNewTetrahedralStereo0D_UnknownParity() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, INCHI_PARITY.UNKNOWN);
    assertNotNull(stereo);
    assertEquals(INCHI_STEREOTYPE.TETRAHEDRAL, stereo.getStereoType());
    assertEquals(INCHI_PARITY.UNKNOWN, stereo.getParity());
}

// Test case 8: Test with valid inputs and null stereo type
@Test
public void testCreateNewTetrahedralStereo0D_NullStereoType() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, null, INCHI_PARITY.EVEN);
    assertNotNull(stereo);
    assertEquals(INCHI_STEREOTYPE.TETRAHEDRAL, stereo.getStereoType());
    assertEquals(INCHI_PARITY.EVEN, stereo.getParity());
}

// Test case 9: Test with valid inputs and invalid stereo type
@Test
public void testCreateNewTetrahedralStereo0D_InvalidStereoType() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    assertNull(stereo);
}

// Test case 10: Test with valid inputs and null parity
@Test
public void testCreateNewTetrahedralStereo0D_NullParity2() {
    JniInchiAtom atC = new JniInchiAtom();
    JniInchiAtom at0 = new JniInchiAtom();
    JniInchiAtom at1 = new JniInchiAtom();
    JniInchiAtom at2 = new JniInchiAtom();
    JniInchiAtom at3 = new JniInchiAtom();
    JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, null);
    assertNull(stereo);
}
}"
chatcmpl-6yar6qqfR6U6R3cXeAU6EM5EG1hMj,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_1Test.java,70.53155183792114,stop,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    /**
     * <p>Convenience method for generating 0D stereo parities at stereogenic
     * double bonds.
     *
     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>
     * <pre>
     *  =============================================
     *  stereogenic bond >A=B< or cumulene >A=C=C=B<
     *  =============================================
     *
     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order
     *  X                           central_atom : NO_ATOM
     *   \            X      Y      type         : INCHI_StereoType_DoubleBond
     *    A==B         \    /
     *        \         A==B
     *         Y
     *
     *  parity= 'e'    parity= 'o'   unknown parity = 'u'
     *
     *  ==============================================
     *  Note. Correspondence to CML 0D stereo parities
     *  ==============================================
     *
     *  stereogenic double bond and (not yet defined in CML) cumulenes
     *  ==============================================================
     *  CML 'C' (cis)      <=> INCHI_PARITY_ODD
     *  CML 'T' (trans)    <=> INCHI_PARITY_EVEN
     * </pre>
     *
     * @param at0 Neighbour atom 0
     * @param at1 Neighbour atom 1
     * @param at2 Neighbour atom 2
     * @param at3 Neighbour atom 3
     * @param parity Parity
     * @return
     */
    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);
        return stereo;
    }
}
","// JniInchiStereo0D_1Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_1Test {","// Test case 1: Test with valid input parameters
@Test
void testCreateNewDoublebondStereo0D_validInput() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    JniInchiStereo0D stereo = JniInchiStereo0D.createNewDoublebondStereo0D(at0, at1, at2, at3, INCHI_PARITY.EVEN);
    assertNotNull(stereo);
}

// Test case 2: Test with null input parameters
@Test
void testCreateNewDoublebondStereo0D_nullInput() {
    assertThrows(NullPointerException.class, () -> {
        JniInchiStereo0D.createNewDoublebondStereo0D(null, null, null, null, null);
    });
}

// Test case 3: Test with invalid parity
@Test
void testCreateNewDoublebondStereo0D_invalidParity() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D.createNewDoublebondStereo0D(at0, at1, at2, at3, null);
    });
}

// Test case 4: Test with invalid neighbour atoms
@Test
void testCreateNewDoublebondStereo0D_invalidNeighbourAtoms() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D.createNewDoublebondStereo0D(at0, at1, at2, null, INCHI_PARITY.EVEN);
    });
}

// Test case 5: Test with invalid stereo type
@Test
void testCreateNewDoublebondStereo0D_invalidStereoType() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, null, INCHI_PARITY.EVEN);
    });
}

// Test case 6: Test with invalid central atom
@Test
void testCreateNewDoublebondStereo0D_invalidCentralAtom() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D stereo = new JniInchiStereo0D(at0, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    });
}

// Test case 7: Test with invalid neighbour atom count
@Test
void testCreateNewDoublebondStereo0D_invalidNeighbourAtomCount() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, null, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    });
}

// Test case 8: Test with invalid neighbour atom order
@Test
void testCreateNewDoublebondStereo0D_invalidNeighbourAtomOrder() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at2, at1, at3, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    });
}

// Test case 9: Test with invalid neighbour atom types
@Test
void testCreateNewDoublebondStereo0D_invalidNeighbourAtomType() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    assertThrows(IllegalArgumentException.class, () -> {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    });
}

// Test case 10: Test with valid input parameters and null central atom
@Test
void testCreateNewDoublebondStereo0D_nullCentralAtom() {
    JniInchiAtom at0 = new JniInchiAtom(1, ""C"");
    JniInchiAtom at1 = new JniInchiAtom(2, ""C"");
    JniInchiAtom at2 = new JniInchiAtom(3, ""C"");
    JniInchiAtom at3 = new JniInchiAtom(4, ""C"");
    JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, INCHI_PARITY.EVEN);
    assertNotNull(stereo);
}
}"
chatcmpl-6yasEcQpCK4Uc5cYkJJZ2erhDOY0x,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_0Test.java,44.59201955795288,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Adds atom to inchi molecule.
     *
     * @param atom Atom to add
     * @return Added atom
     */
    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addAtom(JniInchiAtom atom) {
        atomList.add(atom);
        return atom;
    }
}
","// JniInchiStructure_0Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructure_0Test {","// Here's an implementation of the JniInchiStructure_0Test class with ten unit test cases for the addAtom method:

class JniInchiStructure_0Test {

    @Test
    void testAddAtom() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom = new JniInchiAtom();
        JniInchiAtom addedAtom = structure.addAtom(atom);
        assertEquals(atom, addedAtom);
    }

    @Test
    void testAddAtomNull() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(NullPointerException.class, () -> {
            structure.addAtom(null);
        });
    }

    @Test
    void testAddAtomDuplicate() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom = new JniInchiAtom();
        structure.addAtom(atom);
        assertThrows(IllegalArgumentException.class, () -> {
            structure.addAtom(atom);
        });
    }

    @Test
    void testAddAtomMultiple() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        JniInchiAtom atom3 = new JniInchiAtom();
        structure.addAtom(atom1);
        structure.addAtom(atom2);
        structure.addAtom(atom3);
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        atomList.add(atom2);
        atomList.add(atom3);
        assertEquals(atomList, structure.getAtomList());
    }

    @Test
    void testAddAtomOrder() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        JniInchiAtom atom3 = new JniInchiAtom();
        structure.addAtom(atom1);
        structure.addAtom(atom2);
        structure.addAtom(atom3);
        List<JniInchiAtom> atomList = structure.getAtomList();
        assertEquals(atom1, atomList.get(0));
        assertEquals(atom2, atomList.get(1));
        assertEquals(atom3, atomList.get(2));
    }

    @Test
    void testAddAtomList() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        JniInchiAtom atom3 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        atomList.add(atom2);
        atomList.add(atom3);
        structure.addAtomList(atomList);
        assertEquals(atomList, structure.getAtomList());
    }

    @Test
    void testAddAtomListNull() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(NullPointerException.class, () -> {
            structure.addAtomList(null);
        });
    }

    @Test
    void testAddAtomListDuplicate() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        atomList.add(atom2);
        structure.addAtomList(atomList);
        assertThrows(IllegalArgumentException.class, () -> {
            structure.addAtomList(atomList);
        });
    }

    @Test
    void testAddAtomListOrder() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        JniInchiAtom atom3 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        atomList.add(atom2);
        atomList.add(atom3);
        structure.addAtomList(atomList);
        List<JniInchiAtom> addedAtomList = structure.getAtomList();
        assertEquals(atom1, addedAtomList.get(0));
        assertEquals(atom2, addedAtomList.get(1));
        assertEquals(atom3, addedAtomList.get(2));
    }

    @Test
    void testGetAtomList() {
        JniInchiStructure structure = new JniInchiStructure();
        List<JniInchiAtom> atomList = structure.getAtomList();
        assertNotNull(atomList);
        assertTrue(atomList.isEmpty());
    }
}"
chatcmpl-6yatHdYZMPt2oE41ojKMxb8nP4DrS,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_1Test.java,51.700071573257446,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Adds bond to inchi molecule.
     *
     * @param bond Bond to add
     * @return Added bond
     */
    @SuppressWarnings(""unchecked"")
    public JniInchiBond addBond(JniInchiBond bond) {
        bondList.add(bond);
        return bond;
    }
}
","// JniInchiStructure_1Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructure_1Test {","// Here's an implementation of the JniInchiStructure_1Test class with ten unit test cases for the addBond method:

class JniInchiStructure_1Test {

    @Test
    void testAddBond() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        JniInchiBond addedBond = structure.addBond(bond);
        assertEquals(bond, addedBond);
    }

    @Test
    void testAddMultipleBonds() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond1 = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        JniInchiBond bond2 = new JniInchiBond(2, 3, JniInchiBond.BondType.DOUBLE);
        JniInchiBond bond3 = new JniInchiBond(3, 4, JniInchiBond.BondType.TRIPLE);
        structure.addBond(bond1);
        structure.addBond(bond2);
        structure.addBond(bond3);
        List<JniInchiBond> expectedBonds = new ArrayList<>();
        expectedBonds.add(bond1);
        expectedBonds.add(bond2);
        expectedBonds.add(bond3);
        assertEquals(expectedBonds, structure.getBondList());
    }

    @Test
    void testAddNullBond() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(NullPointerException.class, () -> {
            structure.addBond(null);
        });
    }

    @Test
    void testAddDuplicateBond() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        structure.addBond(bond);
        assertThrows(IllegalArgumentException.class, () -> {
            structure.addBond(bond);
        });
    }

    @Test
    void testAddBondWithInvalidAtomIndex() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond(0, 1, JniInchiBond.BondType.SINGLE);
        assertThrows(IllegalArgumentException.class, () -> {
            structure.addBond(bond);
        });
    }

    @Test
    void testAddBondWithInvalidBondType() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond(1, 2, null);
        assertThrows(IllegalArgumentException.class, () -> {
            structure.addBond(bond);
        });
    }

    @Test
    void testGetBondList() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond1 = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        JniInchiBond bond2 = new JniInchiBond(2, 3, JniInchiBond.BondType.DOUBLE);
        JniInchiBond bond3 = new JniInchiBond(3, 4, JniInchiBond.BondType.TRIPLE);
        structure.addBond(bond1);
        structure.addBond(bond2);
        structure.addBond(bond3);
        List<JniInchiBond> expectedBonds = new ArrayList<>();
        expectedBonds.add(bond1);
        expectedBonds.add(bond2);
        expectedBonds.add(bond3);
        assertEquals(expectedBonds, structure.getBondList());
    }

    @Test
    void testGetBondListWithNoBonds() {
        JniInchiStructure structure = new JniInchiStructure();
        List<JniInchiBond> expectedBonds = new ArrayList<>();
        assertEquals(expectedBonds, structure.getBondList());
    }

    @Test
    void testGetBondListIsUnmodifiable() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        structure.addBond(bond);
        List<JniInchiBond> bondList = structure.getBondList();
        assertThrows(UnsupportedOperationException.class, () -> {
            bondList.add(new JniInchiBond(2, 3, JniInchiBond.BondType.DOUBLE));
        });
    }

    @Test
    void testAddBondAfterGettingBondList() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond1 = new JniInchiBond(1, 2, JniInchiBond.BondType.SINGLE);
        JniInchiBond bond2 = new JniInchiBond(2, 3, JniInchiBond.BondType.DOUBLE);
        structure.addBond(bond1);
        List<JniInchiBond> bondList = structure.getBondList();
        structure.addBond(bond2);
        List<JniInchiBond> expectedBonds = new ArrayList<>();
        expectedBonds.add(bond1);
        assertEquals(expectedBonds, bondList);
    }

}"
chatcmpl-6yauKWpfpQQn4P1obujsGCHF0aQ9x,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_2Test.java,35.90301060676575,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Adds 0D stereo parity to inchi molecule.
     *
     * @param parity Parity to add
     * @return Added parity
     */
    @SuppressWarnings(""unchecked"")
    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {
        stereoList.add(parity);
        return parity;
    }
}
","// JniInchiStructure_2Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructure_2Test {","// Here's an example implementation of the JniInchiStructure_2Test class with ten unit test cases for the addStereo0D method:

class JniInchiStructure_2Test {

    @Test
    void testAddStereo0D() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiStereo0D parity = new JniInchiStereo0D();
        JniInchiStereo0D result = structure.addStereo0D(parity);
        assertEquals(parity, result);
    }

    @Test
    void testAddStereo0DNull() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(NullPointerException.class, () -> {
            structure.addStereo0D(null);
        });
    }

    @Test
    void testAddStereo0DListSize() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiStereo0D parity1 = new JniInchiStereo0D();
        JniInchiStereo0D parity2 = new JniInchiStereo0D();
        structure.addStereo0D(parity1);
        structure.addStereo0D(parity2);
        assertEquals(2, structure.getStereo0DList().size());
    }

    @Test
    void testAddStereo0DListContents() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiStereo0D parity1 = new JniInchiStereo0D();
        JniInchiStereo0D parity2 = new JniInchiStereo0D();
        structure.addStereo0D(parity1);
        structure.addStereo0D(parity2);
        List<JniInchiStereo0D> list = structure.getStereo0DList();
        assertTrue(list.contains(parity1));
        assertTrue(list.contains(parity2));
    }

    @Test
    void testAddStereo0DListUnmodifiable() {
        JniInchiStructure structure = new JniInchiStructure();
        List<JniInchiStereo0D> list = structure.getStereo0DList();
        assertThrows(UnsupportedOperationException.class, () -> {
            list.add(new JniInchiStereo0D());
        });
    }

    @Test
    void testAddStereo0DListNotNull() {
        JniInchiStructure structure = new JniInchiStructure();
        assertNotNull(structure.getStereo0DList());
    }

    @Test
    void testAddStereo0DListEmpty() {
        JniInchiStructure structure = new JniInchiStructure();
        assertTrue(structure.getStereo0DList().isEmpty());
    }

    @Test
    void testAddStereo0DListImmutable() {
        JniInchiStructure structure = new JniInchiStructure();
        List<JniInchiStereo0D> list1 = structure.getStereo0DList();
        List<JniInchiStereo0D> list2 = structure.getStereo0DList();
        assertSame(list1, list2);
    }

    @Test
    void testAddStereo0DListClear() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiStereo0D parity = new JniInchiStereo0D();
        structure.addStereo0D(parity);
        structure.getStereo0DList().clear();
        assertTrue(structure.getStereo0DList().isEmpty());
    }

    @Test
    void testAddStereo0DListRemove() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiStereo0D parity = new JniInchiStereo0D();
        structure.addStereo0D(parity);
        structure.getStereo0DList().remove(parity);
        assertTrue(structure.getStereo0DList().isEmpty());
    }
}"
chatcmpl-6yavNieXEGAsZUT77IJ5R9ffJDKPD,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_3Test.java,32.84025859832764,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Returns atom from structure.
     *
     * @param i Index of atom to return.
     * @return
     */
    public JniInchiAtom getAtom(final int i) {
        return (JniInchiAtom) atomList.get(i);
    }
}
","// JniInchiStructure_3Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructure_3Test {","// Here's an implementation of the JniInchiStructure_3Test class with ten unit test cases for the getAtom() method.

class JniInchiStructure_3Test {

    @Test
    void testGetAtomReturnsCorrectAtom() {
        JniInchiAtom atom1 = new JniInchiAtom();
        JniInchiAtom atom2 = new JniInchiAtom();
        JniInchiAtom atom3 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        atomList.add(atom2);
        atomList.add(atom3);
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertEquals(atom1, structure.getAtom(0));
        assertEquals(atom2, structure.getAtom(1));
        assertEquals(atom3, structure.getAtom(2));
    }

    @Test
    void testGetAtomThrowsIndexOutOfBoundsExceptionWhenIndexIsNegative() {
        JniInchiAtom atom1 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertThrows(IndexOutOfBoundsException.class, () -> structure.getAtom(-1));
    }

    @Test
    void testGetAtomThrowsIndexOutOfBoundsExceptionWhenIndexIsGreaterThanSize() {
        JniInchiAtom atom1 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertThrows(IndexOutOfBoundsException.class, () -> structure.getAtom(1));
    }

    @Test
    void testGetAtomThrowsIndexOutOfBoundsExceptionWhenStructureIsEmpty() {
        List<JniInchiAtom> atomList = new ArrayList<>();
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertThrows(IndexOutOfBoundsException.class, () -> structure.getAtom(0));
    }

    @Test
    void testGetAtomThrowsNullPointerExceptionWhenStructureIsNull() {
        JniInchiStructure structure = null;
        assertThrows(NullPointerException.class, () -> structure.getAtom(0));
    }

    @Test
    void testGetAtomReturnsNullWhenAtomListIsNull() {
        JniInchiStructure structure = new JniInchiStructure(null);
        assertNull(structure.getAtom(0));
    }

    @Test
    void testGetAtomReturnsNullWhenIndexIsEqualToSize() {
        JniInchiAtom atom1 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertNull(structure.getAtom(1));
    }

    @Test
    void testGetAtomReturnsNullWhenIndexIsGreaterThanSize() {
        JniInchiAtom atom1 = new JniInchiAtom();
        List<JniInchiAtom> atomList = new ArrayList<>();
        atomList.add(atom1);
        JniInchiStructure structure = new JniInchiStructure(atomList);
        assertNull(structure.getAtom(2));
    }

    @Test
    void testGetAtomReturnsNullWhenIndexIsNegativeAndAtomListIsNull() {
        JniInchiStructure structure = new JniInchiStructure(null);
        assertNull(structure.getAtom(-1));
    }

    @Test
    void testGetAtomReturnsNullWhenIndexIsGreaterThanSizeAndAtomListIsNull() {
        JniInchiStructure structure = new JniInchiStructure(null);
        assertNull(structure.getAtom(1));
    }
}"
chatcmpl-6yawQM21oVeb7eREnUUDZCArszHQi,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_4Test.java,30.72879672050476,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Returns bond from structure.
     *
     * @param i Index of bond to return.
     * @return
     */
    public JniInchiBond getBond(final int i) {
        return (JniInchiBond) bondList.get(i);
    }
}
","// JniInchiStructure_4Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructure_4Test {","// Here's an implementation of the JniInchiStructure_4Test class with ten unit test cases for the getBond() method.

class JniInchiStructure_4Test {

    @Test
    void testGetBondWithValidIndex() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond = new JniInchiBond();
        structure.bondList.add(bond);
        assertEquals(bond, structure.getBond(0));
    }

    @Test
    void testGetBondWithNegativeIndex() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(IndexOutOfBoundsException.class, () -> {
            structure.getBond(-1);
        });
    }

    @Test
    void testGetBondWithIndexGreaterThanSize() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(IndexOutOfBoundsException.class, () -> {
            structure.getBond(1);
        });
    }

    @Test
    void testGetBondWithEmptyList() {
        JniInchiStructure structure = new JniInchiStructure();
        assertThrows(IndexOutOfBoundsException.class, () -> {
            structure.getBond(0);
        });
    }

    @Test
    void testGetBondWithNullList() {
        JniInchiStructure structure = new JniInchiStructure();
        structure.bondList = null;
        assertThrows(NullPointerException.class, () -> {
            structure.getBond(0);
        });
    }

    @Test
    void testGetBondWithNonBondObjectInList() {
        JniInchiStructure structure = new JniInchiStructure();
        structure.bondList.add(new Object());
        assertThrows(ClassCastException.class, () -> {
            structure.getBond(0);
        });
    }

    @Test
    void testGetBondWithNullObjectInList() {
        JniInchiStructure structure = new JniInchiStructure();
        structure.bondList.add(null);
        assertThrows(NullPointerException.class, () -> {
            structure.getBond(0);
        });
    }

    @Test
    void testGetBondWithValidIndexAndMultipleBonds() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond1 = new JniInchiBond();
        JniInchiBond bond2 = new JniInchiBond();
        structure.bondList.add(bond1);
        structure.bondList.add(bond2);
        assertEquals(bond2, structure.getBond(1));
    }

    @Test
    void testGetBondWithValidIndexAndMultipleTypesOfBonds() {
        JniInchiStructure structure = new JniInchiStructure();
        JniInchiBond bond1 = new JniInchiBond();
        JniInchiBond bond2 = new JniInchiBond();
        structure.bondList.add(bond1);
        structure.bondList.add(new Object());
        structure.bondList.add(bond2);
        assertEquals(bond2, structure.getBond(2));
    }

    @Test
    void testGetBondWithValidIndexAndMultipleNullBonds() {
        JniInchiStructure structure = new JniInchiStructure();
        structure.bondList.add(null);
        structure.bondList.add(null);
        JniInchiBond bond = new JniInchiBond();
        structure.bondList.add(bond);
        assertEquals(bond, structure.getBond(2));
    }
}"
chatcmpl-6yaxTC76APo02PHVjnreNifSlP2DY,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_5Test.java,2.3185863494873047,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    /**
     * Returns stereo parity from structure.
     *
     * @param i Index of stereo parity to return.
     * @return
     */
    public JniInchiStereo0D getStereo0D(final int i) {
        return (JniInchiStereo0D) stereoList.get(i);
    }
}
","// JniInchiStructure_5Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructure_5Test {","I'm sorry, but the code you provided is incomplete. It seems that the class `JniInchiStructure_5Test` is not properly closed. Can you please provide the complete code so I can assist you better?"
chatcmpl-6yayWKGxSl9Qq7icOE8Cp5DU1zgKX,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_0Test.java,56.604387521743774,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    /**
     * Calculates the InChIKey for an InChI string.
     *
     * @param inchi source InChI string
     * @return InChIKey output
     * @throws JniInchiException
     */
    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            return wrapper.GetINCHIKeyFromINCHI(inchi);
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapper_0Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapper_0Test {","// JniInchiWrapper_0Test.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link JniInchiWrapper}.
 * It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
 */
class JniInchiWrapper_0Test {

    @Test
    void testGetInchiKey_NullInchi() {
        assertThrows(IllegalArgumentException.class, () -> JniInchiWrapper.getInchiKey(null));
    }

    @Test
    void testGetInchiKey_EmptyInchi() {
        assertThrows(JniInchiException.class, () -> JniInchiWrapper.getInchiKey(""""));
    }

    @Test
    void testGetInchiKey_InvalidInchi() {
        assertThrows(JniInchiException.class, () -> JniInchiWrapper.getInchiKey(""invalid inchi""));
    }

    @Test
    void testGetInchiKey_ValidInchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(inchi);
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithAuxInfo() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertNotNull(output.getAuxInfo());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithFixedH() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasFixedH());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithReconnected() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasReconnected());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithWarnings() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasWarning());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithFixedHAndReconnected() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasFixedH());
        assertTrue(output.hasReconnected());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithFixedHAndWarnings() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasFixedH());
        assertTrue(output.hasWarning());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

    @Test
    void testGetInchiKey_ValidInchiWithReconnectedAndWarnings() throws JniInchiException {
        String inchi = ""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"";
        JniInchiOutput output = JniInchiWrapper.getInchiOutput(inchi);
        assertNotNull(output);
        assertTrue(output.hasReconnected());
        assertTrue(output.hasWarning());
        JniInchiOutputKey key = JniInchiWrapper.getInchiKey(output.getInchi());
        assertNotNull(key);
        assertEquals(""UHOVQNZJYSORNB-UHFFFAOYSA-N"", key.getKey());
    }

}"
chatcmpl-6yazZcMqSrEDcX9NDKcHcywRDugog,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_1Test.java,64.85852789878845,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    /**
     * <p>Checks if the string represents valid InChI/standard InChI.</p>
     *
     * @param inchi source InChI
     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result
     *               may not be strict.
     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting
     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of
     */
    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            int ret = wrapper.CheckINCHI(inchi, strict);
            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);
            if (retStatus == null) {
                throw new JniInchiException(""Unknown return status: "" + ret);
            }
            return retStatus;
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapper_1Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapper_1Test {","// JniInchiWrapper_1Test.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link JniInchiWrapper}.
 * It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
 */
class JniInchiWrapper_1Test {

    @Test
    void testCheckInchi_NullInchi() {
        assertThrows(IllegalArgumentException.class, () -> JniInchiWrapper.checkInchi(null, true));
    }

    @Test
    void testCheckInchi_ValidInchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.VALID_STANDARD, status);
    }

    @Test
    void testCheckInchi_InvalidInchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        inchi = inchi.replace(""C"", ""X"");
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.INVALID_INPUT, status);
    }

    @Test
    void testCheckInchi_UnknownStatus() {
        JniInchiWrapper wrapper = JniInchiWrapper.getWrapper();
        wrapper.getLock();
        try {
            int ret = wrapper.CheckINCHI(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"", true);
            INCHI_STATUS status = INCHI_STATUS.getValue(ret);
            assertNull(status);
        } finally {
            wrapper.releaseLock();
        }
    }

    @Test
    void testCheckInchi_StrictFalse() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, false);
        assertEquals(INCHI_STATUS.OKAY, status);
    }

    @Test
    void testCheckInchi_StrictTrue() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.VALID_STANDARD, status);
    }

    @Test
    void testCheckInchi_StrictTrue_InvalidInchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        inchi = inchi.replace(""C"", ""X"");
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.INVALID_INPUT, status);
    }

    @Test
    void testCheckInchi_StrictTrue_InvalidInchi2Inchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        inchi = inchi.replace(""C"", ""X"");
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.INVALID_INPUT, status);
    }

    @Test
    void testCheckInchi_StrictTrue_InvalidInchi2Inchi_FalseAlarm() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        inchi = inchi.replace(""C"", ""X"");
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.INVALID_INPUT, status);
    }

    @Test
    void testCheckInchi_StrictTrue_InvalidInchi2Inchi_ExactMatch() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        inchi = inchi.replace(""C"", ""X"");
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi, true);
        assertEquals(INCHI_STATUS.INVALID_INPUT, status);
    }

    @Test
    void testCheckInchi_StrictTrue_ValidInchi2Inchi() throws JniInchiException {
        String inchi = ""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6?/m1/s1"";
        String inchi2 = JniInchiWrapper.getInchi2FromInchi(inchi);
        INCHI_STATUS status = JniInchiWrapper.checkInchi(inchi2, true);
        assertEquals(INCHI_STATUS.VALID_STANDARD, status);
    }
}"
chatcmpl-6yb0cbaWOSBaM0odLpVZlhc8Gug93,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java,28.62495994567871,stop,"// Main.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 * Simple test class, for debugging purposes.
 *
 * @author sea36
 */
public class Main {

    /**
     * Provide test structure.
     *
     * @return
     */
    public static JniInchiStructure getTestMolecule() {
        JniInchiStructure struct = new JniInchiStructure();
        JniInchiAtom a1 = struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, ""C""));
        JniInchiAtom a2 = struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, ""C""));
        JniInchiAtom a3 = struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, ""N""));
        JniInchiAtom a4 = struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, ""C""));
        JniInchiAtom a5 = struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, ""O""));
        JniInchiAtom a6 = struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, ""O""));
        a1.setImplicitH(1);
        a3.setImplicitH(2);
        a4.setImplicitH(3);
        a5.setImplicitH(1);
        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);
        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));
        return struct;
    }
}
","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {

    /**
     * Test method for {@link Main#getTestMolecule()}.
     */
    @Test
    void testGetTestMolecule() {
        JniInchiStructure struct = Main.getTestMolecule();
        assertNotNull(struct);
        assertEquals(6, struct.getNumAtoms());
        assertEquals(5, struct.getNumBonds());
        assertEquals(""InChI=1S/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)"", struct.getInchi());
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)"", struct.getInchi(""InChI""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)"", struct.getInchi(""InChI=1/""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)/f/h5H,6H2"", struct.getInchi(""InChI=1/charge""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)/f/h5H,6H2/i/hD3"", struct.getInchi(""InChI=1/ReconnectedXYZ""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)/f/h5H,6H2/i/hD3"", struct.getInchi(""InChI=1/ReconnectedXYZ/SPXYZ""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)/f/h5H,6H2/i/hD3"", struct.getInchi(""InChI=1/ReconnectedXYZ/SPXYZ/Options""));
        assertEquals(""InChI=1/C4H5NO/c1-2-4(6)5-3-1/h1-3H2,(H,5,6)/f/h5H,6H2/i/hD3"", struct.getInchi(""InChI=1/ReconnectedXYZ/SPXYZ/Options/ChiralFlag""));
    }
}"
