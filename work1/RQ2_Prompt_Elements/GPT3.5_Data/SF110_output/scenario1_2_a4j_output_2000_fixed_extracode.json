[
    {
        "id": "chatcmpl-6yLTKsZHDg6nX7Y1TSzdb0y8lUB35",
        "object": "chat.completion",
        "created": 1679840238,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 309,
            "completion_tokens": 984,
            "total_tokens": 1293
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// A4j_0Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.\n*/\nclass A4j_0Test {\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value.\n     */\n    @Test\n    void testBlendedSearchNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch);\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"type\" parameter.\n     */\n    @Test\n    void testBlendedSearchType() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"all\", blendedSearch.getType());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"searchTerm\" parameter.\n     */\n    @Test\n    void testBlendedSearchSearchTerm() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"test\", blendedSearch.getSearchTerm());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"products\" property.\n     */\n    @Test\n    void testBlendedSearchProductsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getProducts());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"cart\" property.\n     */\n    @Test\n    void testBlendedSearchCartNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getCart());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"suggestions\" property.\n     */\n    @Test\n    void testBlendedSearchSuggestionsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getSuggestions());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"relatedSearches\" property.\n     */\n    @Test\n    void testBlendedSearchRelatedSearchesNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getRelatedSearches());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"pagination\" property.\n     */\n    @Test\n    void testBlendedSearchPaginationNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getPagination());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"facets\" property.\n     */\n    @Test\n    void testBlendedSearchFacetsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFacets());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"filters\" property.\n     */\n    @Test\n    void testBlendedSearchFiltersNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFilters());\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// A4j_0Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.\n*/\nclass A4j_0Test {\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value.\n     */\n    @Test\n    void testBlendedSearchNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch);\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"type\" parameter.\n     */\n    @Test\n    void testBlendedSearchType() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"all\", blendedSearch.getType());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"searchTerm\" parameter.\n     */\n    @Test\n    void testBlendedSearchSearchTerm() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"test\", blendedSearch.getSearchTerm());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"products\" property.\n     */\n    @Test\n    void testBlendedSearchProductsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getProducts());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"cart\" property.\n     */\n    @Test\n    void testBlendedSearchCartNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getCart());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"suggestions\" property.\n     */\n    @Test\n    void testBlendedSearchSuggestionsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getSuggestions());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"relatedSearches\" property.\n     */\n    @Test\n    void testBlendedSearchRelatedSearchesNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getRelatedSearches());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"pagination\" property.\n     */\n    @Test\n    void testBlendedSearchPaginationNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getPagination());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"facets\" property.\n     */\n    @Test\n    void testBlendedSearchFacetsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFacets());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"filters\" property.\n     */\n    @Test\n    void testBlendedSearchFiltersNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFilters());\n    }\n}"
            }
        ],
        "time_taken": 43.45500659942627,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_0Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public BlendedSearch BlendedSearch(String searchTerm, String type) {\n        Search search = new Search();\n        return search.Blended(searchTerm, type);\n    }\n}\n",
        "test_prompt": "// A4j_0Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.\n*/\nclass A4j_0Test {",
        "original_generated_code": "// A4j_0Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.\n*/\nclass A4j_0Test {\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value.\n     */\n    @Test\n    void testBlendedSearchNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch);\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"type\" parameter.\n     */\n    @Test\n    void testBlendedSearchType() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"all\", blendedSearch.getType());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a valid value for the \"searchTerm\" parameter.\n     */\n    @Test\n    void testBlendedSearchSearchTerm() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertEquals(\"test\", blendedSearch.getSearchTerm());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"products\" property.\n     */\n    @Test\n    void testBlendedSearchProductsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getProducts());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"cart\" property.\n     */\n    @Test\n    void testBlendedSearchCartNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getCart());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"suggestions\" property.\n     */\n    @Test\n    void testBlendedSearchSuggestionsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getSuggestions());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"relatedSearches\" property.\n     */\n    @Test\n    void testBlendedSearchRelatedSearchesNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getRelatedSearches());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"pagination\" property.\n     */\n    @Test\n    void testBlendedSearchPaginationNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getPagination());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"facets\" property.\n     */\n    @Test\n    void testBlendedSearchFacetsNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFacets());\n    }\n    \n    /**\n     * Test case to verify that the BlendedSearch method returns a non-null value for the \"filters\" property.\n     */\n    @Test\n    void testBlendedSearchFiltersNotNull() {\n        A4j a4j = new A4j();\n        BlendedSearch blendedSearch = a4j.BlendedSearch(\"test\", \"all\");\n        assertNotNull(blendedSearch.getFilters());\n    }\n}",
        "applied_heuristics": ""
    },
    {
        "id": "chatcmpl-6yLUNhAP5nkifQDPNpogGAs4Xag6Q",
        "object": "chat.completion",
        "created": 1679840303,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 321,
            "completion_tokens": 729,
            "total_tokens": 1050
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// A4j_1Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.\n*/\nclass A4j_1Test {\n    \n    @Test\n    void testKeywordSearch() {\n        A4j a4j = new A4j();\n        ProductInfo productInfo = a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"1\");\n        assertNotNull(productInfo);\n    }\n    \n    @Test\n    void testKeywordSearchWithNullSearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(null, \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptySearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"\", \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", null, \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", null, \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", null);\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithInvalidPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"invalid\");\n        });\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// A4j_1Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.\n*/\nclass A4j_1Test {\n    \n    @Test\n    void testKeywordSearch() {\n        A4j a4j = new A4j();\n        ProductInfo productInfo = a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"1\");\n        assertNotNull(productInfo);\n    }\n    \n    @Test\n    void testKeywordSearchWithNullSearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(null, \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptySearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"\", \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", null, \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", null, \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", null);\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithInvalidPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"invalid\");\n        });\n    }\n}"
            }
        ],
        "time_taken": 32.42323446273804,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_1Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {\n        Search search = new Search();\n        return search.Keyword(searchTerm, productLine, type, page);\n    }\n}\n",
        "test_prompt": "// A4j_1Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.\n*/\nclass A4j_1Test {",
        "original_generated_code": "// A4j_1Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.\n*/\nclass A4j_1Test {\n    \n    @Test\n    void testKeywordSearch() {\n        A4j a4j = new A4j();\n        ProductInfo productInfo = a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"1\");\n        assertNotNull(productInfo);\n    }\n    \n    @Test\n    void testKeywordSearchWithNullSearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(null, \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptySearchTerm() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"\", \"electronics\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", null, \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyProductLine() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"\", \"all\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", null, \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyType() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"\", \"1\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithNullPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", null);\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithEmptyPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"\");\n        });\n    }\n    \n    @Test\n    void testKeywordSearchWithInvalidPage() {\n        A4j a4j = new A4j();\n        assertThrows(IllegalArgumentException.class, () -> {\n            a4j.KeywordSearch(\"laptop\", \"electronics\", \"all\", \"invalid\");\n        });\n    }\n}",
        "applied_heuristics": ""
    },
    {
        "id": "chatcmpl-6yLVQrCozpFqe9taCoOKJsEy8vhFP",
        "object": "chat.completion",
        "created": 1679840368,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 314,
            "completion_tokens": 1138,
            "total_tokens": 1452
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// A4j_2Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.\n*/\nclass A4j_2Test {\n\t\t// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testActorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Tom Hanks\", result.getActorName());\n    assertEquals(\"movies\", result.getMode());\n    assertEquals(\"1\", result.getPage());\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidActorName() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Invalid Actor\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidMode() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"invalid mode\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidPage() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"invalid page\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsEmptyProductListForNoResults() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1000\"; // unlikely to have any results\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(0, result.getProducts().size());\n}\n\n@Test\nvoid testActorSearchReturnsProductsForValidInput() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 0);\n}\n\n@Test\nvoid testActorSearchReturnsUniqueProducts() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(result.getProducts().size(), result.getProducts().stream().distinct().count());\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfRating() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getRating() >= result.getProducts().get(i + 1).getRating());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfReleaseYear() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getReleaseYear() >= result.getProducts().get(i + 1).getReleaseYear());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfPrice() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getPrice() >= result.getProducts().get(i + 1).getPrice());\n    }\n}\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// A4j_2Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.\n*/\nclass A4j_2Test {\n\t\t// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testActorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Tom Hanks\", result.getActorName());\n    assertEquals(\"movies\", result.getMode());\n    assertEquals(\"1\", result.getPage());\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidActorName() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Invalid Actor\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidMode() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"invalid mode\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidPage() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"invalid page\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsEmptyProductListForNoResults() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1000\"; // unlikely to have any results\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(0, result.getProducts().size());\n}\n\n@Test\nvoid testActorSearchReturnsProductsForValidInput() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 0);\n}\n\n@Test\nvoid testActorSearchReturnsUniqueProducts() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(result.getProducts().size(), result.getProducts().stream().distinct().count());\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfRating() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getRating() >= result.getProducts().get(i + 1).getRating());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfReleaseYear() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getReleaseYear() >= result.getProducts().get(i + 1).getReleaseYear());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfPrice() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getPrice() >= result.getProducts().get(i + 1).getPrice());\n    }\n}\n}"
            }
        ],
        "time_taken": 45.093377351760864,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_2Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public ProductInfo ActorSearch(String actorName, String mode, String page) {\n        Search search = new Search();\n        return search.ActorSearch(actorName, mode, page);\n    }\n}\n",
        "test_prompt": "// A4j_2Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.\n*/\nclass A4j_2Test {",
        "original_generated_code": "// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testActorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Tom Hanks\", result.getActorName());\n    assertEquals(\"movies\", result.getMode());\n    assertEquals(\"1\", result.getPage());\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidActorName() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Invalid Actor\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidMode() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"invalid mode\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsNullForInvalidPage() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"invalid page\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testActorSearchReturnsEmptyProductListForNoResults() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1000\"; // unlikely to have any results\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(0, result.getProducts().size());\n}\n\n@Test\nvoid testActorSearchReturnsProductsForValidInput() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 0);\n}\n\n@Test\nvoid testActorSearchReturnsUniqueProducts() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(result.getProducts().size(), result.getProducts().stream().distinct().count());\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfRating() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getRating() >= result.getProducts().get(i + 1).getRating());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfReleaseYear() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getReleaseYear() >= result.getProducts().get(i + 1).getReleaseYear());\n    }\n}\n\n@Test\nvoid testActorSearchReturnsProductsInDescendingOrderOfPrice() {\n    // Arrange\n    A4j a4j = new A4j();\n    String actorName = \"Tom Hanks\";\n    String mode = \"movies\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.ActorSearch(actorName, mode, page);\n\n    // Assert\n    assertNotNull(result);\n    assertTrue(result.getProducts().size() > 1);\n    for (int i = 0; i < result.getProducts().size() - 1; i++) {\n        assertTrue(result.getProducts().get(i).getPrice() >= result.getProducts().get(i + 1).getPrice());\n    }\n}",
        "applied_heuristics": "H7"
    },
    {
        "id": "chatcmpl-6yLWTcFZpXV9KNfT0DOk2QHWYsD7G",
        "object": "chat.completion",
        "created": 1679840433,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 315,
            "completion_tokens": 44,
            "total_tokens": 359
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// A4j_3Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.\n*/\nclass A4j_3Test {\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// A4j_3Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.\n*/\nclass A4j_3Test {\n}"
            }
        ],
        "time_taken": 2.1427624225616455,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_3Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public ProductInfo ArtistSearch(String artistName, String mode, String page) {\n        Search search = new Search();\n        return search.ArtistSearch(artistName, mode, page);\n    }\n}\n",
        "test_prompt": "// A4j_3Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.\n*/\nclass A4j_3Test {",
        "original_generated_code": "I'm sorry, but the code you provided is incomplete. It seems that the class `A4j_3Test` is not closed properly. Can you please provide the complete code so I can assist you better?",
        "applied_heuristics": "H7"
    },
    {
        "id": "chatcmpl-6yLXW69wUSadtS9fSH0A01vmxTZyC",
        "object": "chat.completion",
        "created": 1679840498,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 307,
            "completion_tokens": 893,
            "total_tokens": 1200
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// A4j_4Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.\n*/\nclass A4j_4Test {\n\t\t// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testAuthorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Harry Potter and the Philosopher's Stone\", result.getTitle());\n    assertEquals(\"J.K. Rowling\", result.getAuthor());\n    assertEquals(\"9780747532743\", result.getIsbn());\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"John Doe\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"999\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = null;\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = null;\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"   \";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"   \";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowl!ng\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1!\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// A4j_4Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.\n*/\nclass A4j_4Test {\n\t\t// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testAuthorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Harry Potter and the Philosopher's Stone\", result.getTitle());\n    assertEquals(\"J.K. Rowling\", result.getAuthor());\n    assertEquals(\"9780747532743\", result.getIsbn());\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"John Doe\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"999\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = null;\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = null;\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"   \";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"   \";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowl!ng\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1!\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n}"
            }
        ],
        "time_taken": 34.10667395591736,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_4Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public ProductInfo AuthorSearch(String authorName, String page) {\n        Search search = new Search();\n        return search.AuthorSearch(authorName, page);\n    }\n}\n",
        "test_prompt": "// A4j_4Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.\n*/\nclass A4j_4Test {",
        "original_generated_code": "// Here's an example of how you could write unit tests for the A4j class:\n\n@Test\nvoid testAuthorSearchReturnsProductInfo() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNotNull(result);\n    assertEquals(\"Harry Potter and the Philosopher's Stone\", result.getTitle());\n    assertEquals(\"J.K. Rowling\", result.getAuthor());\n    assertEquals(\"9780747532743\", result.getIsbn());\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"John Doe\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageNotFound() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"999\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = null;\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsNull() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = null;\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageIsEmpty() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"   \";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsOnlyWhitespace() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"   \";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenAuthorNameContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowl!ng\";\n    String page = \"1\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}\n\n@Test\nvoid testAuthorSearchReturnsNullWhenPageContainsSpecialCharacters() {\n    // Arrange\n    A4j a4j = new A4j();\n    String authorName = \"J.K. Rowling\";\n    String page = \"1!\";\n\n    // Act\n    ProductInfo result = a4j.AuthorSearch(authorName, page);\n\n    // Assert\n    assertNull(result);\n}",
        "applied_heuristics": "H7"
    },
    {
        "id": "chatcmpl-6yLYZ6hS83VqS8eVPPDZzAghZmhL2",
        "object": "chat.completion",
        "created": 1679840563,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 309,
            "completion_tokens": 755,
            "total_tokens": 1064
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// Here's an example of how you could implement the A4j_5Test class:\n\npackage net.kencochrane.a4j;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass A4j_5Test {\n    \n    @Test\n    void testAddToCart() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"2\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(2, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartInvalidAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"invalid_asin\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartInvalidQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"invalid_quantity\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNegativeQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"-1\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartZeroQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"0\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"999\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(999, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartExceedMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"1000\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(null, \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", null);\n        assertNull(cart);\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// Here's an example of how you could implement the A4j_5Test class:\n\npackage net.kencochrane.a4j;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass A4j_5Test {\n    \n    @Test\n    void testAddToCart() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"2\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(2, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartInvalidAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"invalid_asin\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartInvalidQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"invalid_quantity\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNegativeQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"-1\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartZeroQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"0\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"999\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(999, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartExceedMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"1000\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(null, \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", null);\n        assertNull(cart);\n    }\n}"
            }
        ],
        "time_taken": 31.218533277511597,
        "prompt_id": "/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_5Test.java",
        "original_code": "// A4j.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\n\n/**\n * http://www.KenCochrane.net\n * User: Ken Cochrane\n * Date: Aug 1, 2003\n * Time: 7:39:44 PM\n */\npublic class A4j {\n\n    public ShoppingCart AddtoCart(String asin, String quantity) {\n        Cart cart = new Cart();\n        return cart.AddtoCart(asin, quantity);\n    }\n}\n",
        "test_prompt": "// A4j_5Test.java\npackage net.kencochrane.a4j;\n\nimport net.kencochrane.a4j.DAO.Cart;\nimport net.kencochrane.a4j.DAO.Product;\nimport net.kencochrane.a4j.DAO.Search;\nimport net.kencochrane.a4j.beans.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link A4j}.\n* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.\n*/\nclass A4j_5Test {",
        "original_generated_code": "// Here's an example of how you could implement the A4j_5Test class:\n\npackage net.kencochrane.a4j;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass A4j_5Test {\n    \n    @Test\n    void testAddToCart() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"2\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(2, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartInvalidAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"invalid_asin\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartInvalidQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"invalid_quantity\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNegativeQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"-1\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartZeroQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"0\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"999\");\n        assertNotNull(cart);\n        assertEquals(1, cart.getItems().size());\n        assertEquals(\"B00X4WHP5E\", cart.getItems().get(0).getAsin());\n        assertEquals(999, cart.getItems().get(0).getQuantity());\n    }\n    \n    @Test\n    void testAddToCartExceedMaxQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"1000\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"\", \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullAsin() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(null, \"2\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartEmptyQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", \"\");\n        assertNull(cart);\n    }\n    \n    @Test\n    void testAddToCartNullQuantity() {\n        A4j a4j = new A4j();\n        ShoppingCart cart = a4j.AddtoCart(\"B00X4WHP5E\", null);\n        assertNull(cart);\n    }\n}",
        "applied_heuristics": ""
    }
]