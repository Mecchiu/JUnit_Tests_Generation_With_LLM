ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yY9DJokJ4t9DNTnrMSdWVvClZWXn,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/EventSet.java,23.879815101623535,stop,"// EventSet.java
import java.util.Vector;
import java.util.List;

public class EventSet {

    /**
     * Returns the total number of events in the set*
     */
    public int size() {
        return events.size();
    }
}
","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains ten unit test cases for the {@link EventSet#size()} method.
*/
class EventSetTest {","@Test
void testEmptyEventSet() {
    EventSet eventSet = new EventSet();
    assertEquals(0, eventSet.size());
}

@Test
void testEventSetWithOneEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetWithMultipleEvents() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    eventSet.add(new Event(""Event 3""));
    assertEquals(3, eventSet.size());
}

@Test
void testEventSetWithDuplicateEvents() {
    EventSet eventSet = new EventSet();
    Event event1 = new Event(""Event 1"");
    eventSet.add(event1);
    eventSet.add(event1);
    assertEquals(2, eventSet.size());
}

@Test
void testEventSetWithNullEvent() {
    EventSet eventSet = new EventSet();
    eventSet.add(null);
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetWithEmptyEventName() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""""));
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetWithWhitespaceEventName() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""   ""));
    assertEquals(1, eventSet.size());
}

@Test
void testEventSetWithMixedEventNames() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""""));
    eventSet.add(new Event(""   ""));
    eventSet.add(new Event(""Event 2""));
    assertEquals(2, eventSet.size());
}

@Test
void testEventSetWithLargeNumberOfEvents() {
    EventSet eventSet = new EventSet();
    for (int i = 0; i < 1000000; i++) {
        eventSet.add(new Event(""Event "" + i));
    }
    assertEquals(1000000, eventSet.size());
}

@Test
void testEventSetWithConcurrentModification() {
    EventSet eventSet = new EventSet();
    eventSet.add(new Event(""Event 1""));
    eventSet.add(new Event(""Event 2""));
    for (Event event : eventSet) {
        eventSet.add(new Event(""Event 3""));
    }
    assertEquals(2, eventSet.size());
}
}"
chatcmpl-6yYAGtPzmhE8Xd6wcnpmrCgRUMNKZ,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/DocumentSet.java,48.22219753265381,stop,"// DocumentSet.java
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;

/**
 * A Document Set is a group of documents written by the same author.
 * This can be used to facilitate event sets that are larger than just
 * a single document, which may be more indicative of an author's
 * entire body of work.
 */
public class DocumentSet {

    /**
     * Number of documents currently registered in this set of documents*
     */
    public int documentCount() {
        return documents.size();
    }
}
","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {","public class DocumentSetTest {

    /**
     * Test case to check if documentCount() returns 0 for an empty DocumentSet.
     */
    @Test
    public void testDocumentCountEmpty() {
        DocumentSet docSet = new DocumentSet();
        assertEquals(0, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count for a DocumentSet with one document.
     */
    @Test
    public void testDocumentCountOne() {
        DocumentSet docSet = new DocumentSet();
        docSet.addDocument(new Document(""Document 1""));
        assertEquals(1, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count for a DocumentSet with multiple documents.
     */
    @Test
    public void testDocumentCountMultiple() {
        DocumentSet docSet = new DocumentSet();
        docSet.addDocument(new Document(""Document 1""));
        docSet.addDocument(new Document(""Document 2""));
        docSet.addDocument(new Document(""Document 3""));
        assertEquals(3, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after removing a document from a DocumentSet.
     */
    @Test
    public void testDocumentCountAfterRemove() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        Document doc2 = new Document(""Document 2"");
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.removeDocument(doc1);
        assertEquals(1, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing documents from a DocumentSet.
     */
    @Test
    public void testDocumentCountAddRemove() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        Document doc2 = new Document(""Document 2"");
        Document doc3 = new Document(""Document 3"");
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.removeDocument(doc1);
        docSet.addDocument(doc3);
        assertEquals(2, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing the same document from a DocumentSet.
     */
    @Test
    public void testDocumentCountAddRemoveSame() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        docSet.addDocument(doc1);
        docSet.removeDocument(doc1);
        docSet.addDocument(doc1);
        docSet.removeDocument(doc1);
        assertEquals(0, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing multiple documents from a DocumentSet.
     */
    @Test
    public void testDocumentCountAddRemoveMultiple() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        Document doc2 = new Document(""Document 2"");
        Document doc3 = new Document(""Document 3"");
        Document doc4 = new Document(""Document 4"");
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.addDocument(doc3);
        docSet.addDocument(doc4);
        docSet.removeDocument(doc1);
        docSet.removeDocument(doc3);
        assertEquals(2, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing multiple documents, including duplicates, from a DocumentSet.
     */
    @Test
    public void testDocumentCountAddRemoveDuplicates() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        Document doc2 = new Document(""Document 2"");
        Document doc3 = new Document(""Document 3"");
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.addDocument(doc3);
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.removeDocument(doc1);
        docSet.removeDocument(doc2);
        assertEquals(1, docSet.documentCount());
    }

    /**
     * Test case to check if documentCount() returns the correct count after adding and removing multiple documents, including duplicates, from a DocumentSet.
     */
    @Test
    public void testDocumentCountAddRemoveDuplicates2() {
        DocumentSet docSet = new DocumentSet();
        Document doc1 = new Document(""Document 1"");
        Document doc2 = new Document(""Document 2"");
        Document doc3 = new Document(""Document 3"");
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.addDocument(doc3);
        docSet.addDocument(doc1);
        docSet.addDocument(doc2);
        docSet.removeDocument(doc1);
        docSet.removeDocument(doc2);
        docSet.addDocument(doc3);
        assertEquals(2, docSet.documentCount());
    }
}"
chatcmpl-6yYBJnAnV95qxOgsIWEcHkDfkyNcp,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/Document.java,46.66584134101868,stop,"// Document.java
import java.io.*;
import java.util.Vector;

/**
 *   Code for storing and processing individual documents of any type.
 */
public class Document {

    /**
     * Convert processed document into one really long string.
     * I'm not quite sure yet why this ever would need to be done.
     */
    public String stringify() {
        String t = new String();
        for (int i = 0; i < procText.size(); i++) t += (char) procText.elementAt(i);
        return t;
    }
}
","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains ten unit test cases for the {@link Document#stringify()} method.
*/
class DocumentTest {","// Test case 1: Test if the method returns an empty string when the processed text vector is empty.
@Test
public void testStringifyEmptyVector() {
    Document doc = new Document();
    String result = doc.stringify();
    assertEquals("""", result);
}

// Test case 2: Test if the method returns the correct string when the processed text vector contains only one character.
@Test
public void testStringifySingleChar() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('a');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""a"", result);
}

// Test case 3: Test if the method returns the correct string when the processed text vector contains multiple characters.
@Test
public void testStringifyMultipleChars() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('a');
    procText.add('b');
    procText.add('c');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""abc"", result);
}

// Test case 4: Test if the method returns the correct string when the processed text vector contains special characters.
@Test
public void testStringifySpecialChars() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('!');
    procText.add('@');
    procText.add('#');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""!@#"", result);
}

// Test case 5: Test if the method returns the correct string when the processed text vector contains spaces.
@Test
public void testStringifySpaces() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add(' ');
    procText.add(' ');
    procText.add(' ');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""   "", result);
}

// Test case 6: Test if the method returns the correct string when the processed text vector contains new lines.
@Test
public void testStringifyNewLines() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('\n');
    procText.add('\n');
    procText.add('\n');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""\n\n\n"", result);
}

// Test case 7: Test if the method returns the correct string when the processed text vector contains a mix of characters, spaces, and new lines.
@Test
public void testStringifyMix() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('a');
    procText.add(' ');
    procText.add('\n');
    procText.add('b');
    procText.add('c');
    procText.add('\n');
    procText.add(' ');
    procText.add('d');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""a \nbc\n d"", result);
}

// Test case 8: Test if the method returns the correct string when the processed text vector contains Unicode characters.
@Test
public void testStringifyUnicode() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('\u00C0');
    procText.add('\u00C1');
    procText.add('\u00C2');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""\u00C0\u00C1\u00C2"", result);
}

// Test case 9: Test if the method returns the correct string when the processed text vector contains a mix of ASCII and Unicode characters.
@Test
public void testStringifyAsciiUnicodeMix() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('a');
    procText.add('\u00C0');
    procText.add('b');
    procText.add('\u00C1');
    procText.add('c');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""a\u00C0b\u00C1c"", result);
}

// Test case 10: Test if the method returns the correct string when the processed text vector contains a mix of upper and lower case characters.
@Test
public void testStringifyCaseMix() {
    Document doc = new Document();
    Vector<Character> procText = new Vector<Character>();
    procText.add('a');
    procText.add('B');
    procText.add('c');
    procText.add('D');
    doc.procText = procText;
    String result = doc.stringify();
    assertEquals(""aBcD"", result);
}
}"
