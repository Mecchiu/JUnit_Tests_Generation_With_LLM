[
    {
        "id": "chatcmpl-6yPpAN4YGc2qbNXjcJM6NdLO1y9w9",
        "object": "chat.completion",
        "created": 1679856968,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 125,
            "completion_tokens": 572,
            "total_tokens": 697
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// EventSetTest.java\n\n\nimport java.util.Vector;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EventSet}.\n* It contains ten unit test cases for the {@link EventSet#size()} method.\n*/\nclass EventSetTest {\n\t\t@Test\nvoid testEmptyEventSetSize() {\n    EventSet eventSet = new EventSet();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithOneEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithMultipleEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterRemovingEvent() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.remove(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterClearing() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.clear();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithNullEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(null);\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDuplicateEvents() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDifferentTypesOfEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Meeting 1\"));\n    eventSet.add(new Task(\"Task 1\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEmptyEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"\"));\n    eventSet.add(new Meeting(\"\"));\n    eventSet.add(new Task(\"\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEventsWithSameName() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Event 1\"));\n    eventSet.add(new Task(\"Event 1\"));\n    assertEquals(3, eventSet.size());\n}\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// EventSetTest.java\n\n\nimport java.util.Vector;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EventSet}.\n* It contains ten unit test cases for the {@link EventSet#size()} method.\n*/\nclass EventSetTest {\n\t\t@Test\nvoid testEmptyEventSetSize() {\n    EventSet eventSet = new EventSet();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithOneEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithMultipleEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterRemovingEvent() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.remove(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterClearing() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.clear();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithNullEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(null);\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDuplicateEvents() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDifferentTypesOfEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Meeting 1\"));\n    eventSet.add(new Task(\"Task 1\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEmptyEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"\"));\n    eventSet.add(new Meeting(\"\"));\n    eventSet.add(new Task(\"\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEventsWithSameName() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Event 1\"));\n    eventSet.add(new Task(\"Event 1\"));\n    assertEquals(3, eventSet.size());\n}\n}"
            }
        ],
        "time_taken": 42.98942828178406,
        "prompt_id": "/EvoSuiteBenchmark/original/100_jgaap/src/main/java/EventSet.java",
        "original_code": "// EventSet.java\nimport java.util.Vector;\nimport java.util.List;\n\npublic class EventSet {\n\n    public int size() {\n        return events.size();\n    }\n}\n",
        "test_prompt": "// EventSetTest.java\n\n\nimport java.util.Vector;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EventSet}.\n* It contains ten unit test cases for the {@link EventSet#size()} method.\n*/\nclass EventSetTest {",
        "original_generated_code": "@Test\nvoid testEmptyEventSetSize() {\n    EventSet eventSet = new EventSet();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithOneEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithMultipleEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterRemovingEvent() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.remove(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeAfterClearing() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Event(\"Event 2\"));\n    eventSet.add(new Event(\"Event 3\"));\n    eventSet.clear();\n    assertEquals(0, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithNullEvent() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(null);\n    assertEquals(1, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDuplicateEvents() {\n    EventSet eventSet = new EventSet();\n    Event event1 = new Event(\"Event 1\");\n    eventSet.add(event1);\n    eventSet.add(event1);\n    assertEquals(2, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithDifferentTypesOfEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Meeting 1\"));\n    eventSet.add(new Task(\"Task 1\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEmptyEvents() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"\"));\n    eventSet.add(new Meeting(\"\"));\n    eventSet.add(new Task(\"\"));\n    assertEquals(3, eventSet.size());\n}\n\n@Test\nvoid testEventSetSizeWithEventsWithSameName() {\n    EventSet eventSet = new EventSet();\n    eventSet.add(new Event(\"Event 1\"));\n    eventSet.add(new Meeting(\"Event 1\"));\n    eventSet.add(new Task(\"Event 1\"));\n    assertEquals(3, eventSet.size());\n}\n}",
        "applied_heuristics": ""
    },
    {
        "id": "chatcmpl-6yPqDzOIpGTTimJGUQfGxZnOInKlo",
        "object": "chat.completion",
        "created": 1679857033,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 202,
            "completion_tokens": 527,
            "total_tokens": 729
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// Here's an example implementation of the DocumentSetTest class with ten unit test cases for the documentCount() method:\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DocumentSetTest {\n\n    @Test\n    void testEmptyDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testSingleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        assertEquals(1, set.documentCount());\n    }\n\n    @Test\n    void testMultipleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        set.addDocument(new Document(\"Goodbye world!\"));\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testDuplicateDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.addDocument(doc);\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveNonexistentDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddMultipleNullDocuments() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddAndRemoveDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc1 = new Document(\"Hello world!\");\n        Document doc2 = new Document(\"Goodbye world!\");\n        set.addDocument(doc1);\n        set.addDocument(doc2);\n        set.removeDocument(doc1);\n        assertEquals(1, set.documentCount());\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// Here's an example implementation of the DocumentSetTest class with ten unit test cases for the documentCount() method:\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DocumentSetTest {\n\n    @Test\n    void testEmptyDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testSingleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        assertEquals(1, set.documentCount());\n    }\n\n    @Test\n    void testMultipleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        set.addDocument(new Document(\"Goodbye world!\"));\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testDuplicateDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.addDocument(doc);\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveNonexistentDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddMultipleNullDocuments() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddAndRemoveDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc1 = new Document(\"Hello world!\");\n        Document doc2 = new Document(\"Goodbye world!\");\n        set.addDocument(doc1);\n        set.addDocument(doc2);\n        set.removeDocument(doc1);\n        assertEquals(1, set.documentCount());\n    }\n}"
            }
        ],
        "time_taken": 19.9937264919281,
        "prompt_id": "/EvoSuiteBenchmark/original/100_jgaap/src/main/java/DocumentSet.java",
        "original_code": "// DocumentSet.java\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.StringTokenizer;\nimport java.util.*;\n\n/**\n * A Document Set is a group of documents written by the same author.\n * This can be used to facilitate event sets that are larger than just\n * a single document, which may be more indicative of an author's\n * entire body of work.\n */\npublic class DocumentSet {\n\n    public int documentCount() {\n        return documents.size();\n    }\n}\n",
        "test_prompt": "// DocumentSetTest.java\n\n\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.StringTokenizer;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DocumentSet}.\n* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.\n*/\nclass DocumentSetTest {",
        "original_generated_code": "// Here's an example implementation of the DocumentSetTest class with ten unit test cases for the documentCount() method:\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DocumentSetTest {\n\n    @Test\n    void testEmptyDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testSingleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        assertEquals(1, set.documentCount());\n    }\n\n    @Test\n    void testMultipleDocumentSet() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(new Document(\"Hello world!\"));\n        set.addDocument(new Document(\"Goodbye world!\"));\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testDuplicateDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.addDocument(doc);\n        assertEquals(2, set.documentCount());\n    }\n\n    @Test\n    void testNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.addDocument(doc);\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testRemoveNonexistentDocument() {\n        DocumentSet set = new DocumentSet();\n        Document doc = new Document(\"Hello world!\");\n        set.removeDocument(doc);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddNullDocument() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddMultipleNullDocuments() {\n        DocumentSet set = new DocumentSet();\n        set.addDocument(null);\n        set.addDocument(null);\n        assertEquals(0, set.documentCount());\n    }\n\n    @Test\n    void testAddAndRemoveDocuments() {\n        DocumentSet set = new DocumentSet();\n        Document doc1 = new Document(\"Hello world!\");\n        Document doc2 = new Document(\"Goodbye world!\");\n        set.addDocument(doc1);\n        set.addDocument(doc2);\n        set.removeDocument(doc1);\n        assertEquals(1, set.documentCount());\n    }\n}",
        "applied_heuristics": ""
    },
    {
        "id": "chatcmpl-6yPrGte4Q6aHOKKHKUXNsOUhzC1dd",
        "object": "chat.completion",
        "created": 1679857098,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 166,
            "completion_tokens": 1255,
            "total_tokens": 1421
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "\nimport java.io.*;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link Document}.\n * It contains ten unit test cases for the {@link Document#stringify()} method.\n */\nclass DocumentTest {\n\n    @Test\n    void testEmptyDocument() {\n        Document doc = new Document();\n        assertEquals(\"\", doc.stringify());\n    }\n\n    @Test\n    void testSingleCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'a');\n        assertEquals(\"a\", doc.stringify());\n    }\n\n    @Test\n    void testMultiCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        assertEquals(\"hello\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpaces() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNewlines() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '\\n');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\nworld\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpecialChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '!');\n        doc.procText.add((int) '@');\n        doc.procText.add((int) '#');\n        doc.procText.add((int) '$');\n        doc.procText.add((int) '%');\n        assertEquals(\"hello!@#$%\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithUnicodeChars() {\n        Document doc = new Document();\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add(0x1F601); // grinning face with smiling eyes emoji\n        doc.procText.add(0x1F602); // face with tears of joy emoji\n        assertEquals(\"\\uD83D\\uDE00\\uD83D\\uDE01\\uD83D\\uDE02\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMixedChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello \\uD83D\\uDE00 world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNullChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add(0);\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\0world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMaxIntChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        assertEquals(Integer.MAX_VALUE, doc.stringify().length());\n    }\n\n    @Test\n    void testDocumentWithMaxIntPlusOneChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        doc.procText.add(0);\n        assertEquals(Integer.MAX_VALUE + 1, doc.stringify().length());\n    }\n}\n"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "\nimport java.io.*;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link Document}.\n * It contains ten unit test cases for the {@link Document#stringify()} method.\n */\nclass DocumentTest {\n\n    @Test\n    void testEmptyDocument() {\n        Document doc = new Document();\n        assertEquals(\"\", doc.stringify());\n    }\n\n    @Test\n    void testSingleCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'a');\n        assertEquals(\"a\", doc.stringify());\n    }\n\n    @Test\n    void testMultiCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        assertEquals(\"hello\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpaces() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNewlines() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '\\n');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\nworld\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpecialChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '!');\n        doc.procText.add((int) '@');\n        doc.procText.add((int) '#');\n        doc.procText.add((int) '$');\n        doc.procText.add((int) '%');\n        assertEquals(\"hello!@#$%\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithUnicodeChars() {\n        Document doc = new Document();\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add(0x1F601); // grinning face with smiling eyes emoji\n        doc.procText.add(0x1F602); // face with tears of joy emoji\n        assertEquals(\"\\uD83D\\uDE00\\uD83D\\uDE01\\uD83D\\uDE02\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMixedChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello \\uD83D\\uDE00 world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNullChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add(0);\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\0world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMaxIntChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        assertEquals(Integer.MAX_VALUE, doc.stringify().length());\n    }\n\n    @Test\n    void testDocumentWithMaxIntPlusOneChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        doc.procText.add(0);\n        assertEquals(Integer.MAX_VALUE + 1, doc.stringify().length());\n    }\n}\n"
            }
        ],
        "time_taken": 47.03753900527954,
        "prompt_id": "/EvoSuiteBenchmark/original/100_jgaap/src/main/java/Document.java",
        "original_code": "// Document.java\nimport java.io.*;\nimport java.util.Vector;\n\n/**\n *   Code for storing and processing individual documents of any type.\n */\npublic class Document {\n\n    public String stringify() {\n        String t = new String();\n        for (int i = 0; i < procText.size(); i++) t += (char) procText.elementAt(i);\n        return t;\n    }\n}\n",
        "test_prompt": "// DocumentTest.java\n\n\nimport java.io.*;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Document}.\n* It contains ten unit test cases for the {@link Document#stringify()} method.\n*/\nclass DocumentTest {",
        "original_generated_code": "Here's the code for the DocumentTest class with ten unit test cases for the stringify() method:\n\n```\nimport java.io.*;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link Document}.\n * It contains ten unit test cases for the {@link Document#stringify()} method.\n */\nclass DocumentTest {\n\n    @Test\n    void testEmptyDocument() {\n        Document doc = new Document();\n        assertEquals(\"\", doc.stringify());\n    }\n\n    @Test\n    void testSingleCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'a');\n        assertEquals(\"a\", doc.stringify());\n    }\n\n    @Test\n    void testMultiCharDocument() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        assertEquals(\"hello\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpaces() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNewlines() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '\\n');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\nworld\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithSpecialChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) '!');\n        doc.procText.add((int) '@');\n        doc.procText.add((int) '#');\n        doc.procText.add((int) '$');\n        doc.procText.add((int) '%');\n        assertEquals(\"hello!@#$%\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithUnicodeChars() {\n        Document doc = new Document();\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add(0x1F601); // grinning face with smiling eyes emoji\n        doc.procText.add(0x1F602); // face with tears of joy emoji\n        assertEquals(\"\\uD83D\\uDE00\\uD83D\\uDE01\\uD83D\\uDE02\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMixedChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) ' ');\n        doc.procText.add(0x1F600); // grinning face emoji\n        doc.procText.add((int) ' ');\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello \\uD83D\\uDE00 world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithNullChars() {\n        Document doc = new Document();\n        doc.procText.add((int) 'h');\n        doc.procText.add((int) 'e');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'o');\n        doc.procText.add(0);\n        doc.procText.add((int) 'w');\n        doc.procText.add((int) 'o');\n        doc.procText.add((int) 'r');\n        doc.procText.add((int) 'l');\n        doc.procText.add((int) 'd');\n        assertEquals(\"hello\\0world\", doc.stringify());\n    }\n\n    @Test\n    void testDocumentWithMaxIntChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        assertEquals(Integer.MAX_VALUE, doc.stringify().length());\n    }\n\n    @Test\n    void testDocumentWithMaxIntPlusOneChars() {\n        Document doc = new Document();\n        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n            doc.procText.add(i % 256);\n        }\n        doc.procText.add(0);\n        assertEquals(Integer.MAX_VALUE + 1, doc.stringify().length());\n    }\n}\n```",
        "applied_heuristics": "H2"
    }
]