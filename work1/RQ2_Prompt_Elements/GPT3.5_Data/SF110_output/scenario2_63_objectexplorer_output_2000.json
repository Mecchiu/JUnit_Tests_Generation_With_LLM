[
{
    "id": "chatcmpl-6yamrQySS2lLNqB96EHRxNWH3f22s",
    "object": "chat.completion",
    "created": 1679899109,
    "model": "gpt-3.5-turbo-0301",
    "usage": {
        "prompt_tokens": 299,
        "completion_tokens": 779,
        "total_tokens": 1078
    },
    "choices": [
        {
            "message": {
                "role": "assistant",
                "content": "Here's the source code for the `LoggerFactoryTest` class:\n\n```\n// LoggerFactoryTest.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * Test class of {@link LoggerFactory}.\n * It contains ten unit test cases for the {@link LoggerFactory#make()} method.\n */\nclass LoggerFactoryTest {\n\n    @Test\n    void testMake() {\n        Logger logger = LoggerFactory.make();\n        assertNotNull(logger);\n    }\n\n    @Test\n    void testMakeSameClass() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = LoggerFactory.make();\n        assertEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeDifferentClass() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestClass().getLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeNull() {\n        Thread.currentThread().setContextClassLoader(null);\n        Logger logger = LoggerFactory.make();\n        assertNotNull(logger);\n    }\n\n    @Test\n    void testMakeThread() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestThread().getLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeAnonymousClass() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestClass() {}.getLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeInnerClass() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestClass.InnerClass().getLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeStaticInnerClass() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = TestClass.StaticInnerClass.getLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeLambda() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestClass().getLambdaLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    @Test\n    void testMakeMethodReference() {\n        Logger logger1 = LoggerFactory.make();\n        Logger logger2 = new TestClass().getMethodReferenceLogger();\n        assertNotEquals(logger1.getName(), logger2.getName());\n    }\n\n    private static class TestClass {\n        Logger getLogger() {\n            return LoggerFactory.make();\n        }\n\n        Logger getLambdaLogger() {\n            Runnable r = () -> {\n                Logger logger = LoggerFactory.make();\n                assertNotNull(logger);\n            };\n            r.run();\n            return LoggerFactory.make();\n        }\n\n        Logger getMethodReferenceLogger() {\n            Runnable r = LoggerFactory::make;\n            r.run();\n            return LoggerFactory.make();\n        }\n\n        private class InnerClass {\n            Logger getLogger() {\n                return LoggerFactory.make();\n            }\n        }\n\n        private static class StaticInnerClass {\n            static Logger getLogger() {\n                return LoggerFactory.make();\n            }\n        }\n    }\n\n    private static class TestThread extends Thread {\n        Logger getLogger() {\n            return LoggerFactory.make();\n        }\n\n        @Override\n        public void run() {\n            Logger logger = LoggerFactory.make();\n            assertNotNull(logger);\n        }\n    }\n}\n```\n\nThis class contains ten unit test cases for the `LoggerFactory.make()` method. The tests cover various scenarios, such as creating a logger in the same class, creating a logger in a different class, creating a logger in an anonymous class, creating a logger in an inner class, creating a logger in a lambda expression, and creating a logger in a method reference. The tests also cover scenarios where the context class loader is null and where the logger is created in a separate thread."
            },
            "finish_reason": "stop",
            "index": 0
        }
    ],
    "time_taken": 35.31021285057068,
    "prompt_id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/util/LoggerFactory.java",
    "original_code": "// LoggerFactory.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\n\n/**\n * Factory f\ufffdr Log4J.\n *\n * @author Stefan Jockenh\ufffdvel\n * @see http://www.javaspecialists.eu/archive/Issue137.html\n * @see http://shemnon.com/speling/2006/12/dry-logs-there-are-better-ways.html\n *      --> comment\n */\npublic final class LoggerFactory {\n\n    /**\n     * Erzeugt einen Logger in der aufrufenden Klasse.\n     *\n     * @return Logger\n     */\n    public static Logger make() {\n        // Throwable t = new Throwable();\n        // StackTraceElement directCaller = t.getStackTrace()[1];\n        // return Logger.getLogger(directCaller.getClassName());\n        final Thread t = Thread.currentThread();\n        final StackTraceElement directCaller = t.getStackTrace()[2];\n        final String className = directCaller.getClassName();\n        return Logger.getLogger(className);\n    }\n}\n",
    "test_prompt": "// LoggerFactoryTest.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoggerFactory}.\n* It contains ten unit test cases for the {@link LoggerFactory#make()} method.\n*/\nclass LoggerFactoryTest {"
},
{
    "id": "chatcmpl-6yanur0opXyFQLwroeXVfOW1Soq4K",
    "object": "chat.completion",
    "created": 1679899174,
    "model": "gpt-3.5-turbo-0301",
    "usage": {
        "prompt_tokens": 356,
        "completion_tokens": 689,
        "total_tokens": 1045
    },
    "choices": [
        {
            "message": {
                "role": "assistant",
                "content": "// ExplorerModelBuilderTest.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplorerModelBuilder}.\n* It contains ten unit test cases for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.\n*/\nclass ExplorerModelBuilderTest {\n\n    @Test\n    void testCreateNewExplorerModelWithFigure() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertNotNull(model);\n        assertNotNull(model.getExplorerFigure());\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsDifferentModels() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model1 = builder.createNewExplorerModelWithFigure();\n        ExplorerModel model2 = builder.createNewExplorerModelWithFigure();\n        assertNotSame(model1, model2);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsDifferentFigures() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model1 = builder.createNewExplorerModelWithFigure();\n        ExplorerModel model2 = builder.createNewExplorerModelWithFigure();\n        assertNotSame(model1.getExplorerFigure(), model2.getExplorerFigure());\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsExplorerFigure() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertTrue(model.getExplorerFigure() instanceof ExplorerFigureBuilder);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsListBoxFigure() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertTrue(model.getExplorerFigure().getListBoxFigure() instanceof ListBoxFigure);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsTextBoxFigure() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertTrue(model.getExplorerFigure().getTextBoxFigure() instanceof TextBoxFigure);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsExplorerDrawingPanel() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertTrue(model.getExplorerFigure().getExplorerDrawingPanel() instanceof ExplorerDrawingPanel);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureReturnsExplorerManager() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertTrue(model.getExplorerFigure().getExplorerManager() instanceof ExplorerManager);\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureConnectsModelAndFigure() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertEquals(model, model.getExplorerFigure().getExplorerModel());\n    }\n\n    @Test\n    void testCreateNewExplorerModelWithFigureConnectsFigureAndModel() {\n        ExplorerModelBuilder builder = new ExplorerModelBuilder();\n        ExplorerModel model = builder.createNewExplorerModelWithFigure();\n        assertEquals(model.getExplorerFigure(), model.getExplorerFigure().getExplorerModel().getExplorerFigure());\n    }\n}"
            },
            "finish_reason": "stop",
            "index": 0
        }
    ],
    "time_taken": 29.167948007583618,
    "prompt_id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/model/ExplorerModelBuilder.java",
    "original_code": "// ExplorerModelBuilder.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigure;\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport de.paragon.explorer.figure.ListBoxFigure;\nimport de.paragon.explorer.figure.TextBoxFigure;\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\nimport de.paragon.explorer.util.ExplorerManager;\n\npublic final class ExplorerModelBuilder {\n\n    /**\n     * Kommentar: Diese Methode erzeugt ein neues ExplorerModel, eine neue\n     * ExplorerFigure und verknuepft diese beiden.\n     */\n    public ExplorerModel createNewExplorerModelWithFigure() {\n        ExplorerModel explModl;\n        ExplorerFigure explFig;\n        explModl = new ExplorerModel();\n        explFig = this.getExplorerFigureBuilder().createNewExplorerFigure();\n        this.connect(explModl, explFig);\n        return explModl;\n    }\n}\n",
    "test_prompt": "// ExplorerModelBuilderTest.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigure;\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport de.paragon.explorer.figure.ListBoxFigure;\nimport de.paragon.explorer.figure.TextBoxFigure;\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\nimport de.paragon.explorer.util.ExplorerManager;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplorerModelBuilder}.\n* It contains ten unit test cases for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.\n*/\nclass ExplorerModelBuilderTest {"
}
]