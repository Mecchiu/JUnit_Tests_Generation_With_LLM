ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6yRltNaBMdGcqdsK8vJGObCcjskKY,/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser.java,24.11777687072754,stop,"// HtmlContentParser.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;

/**
 * @author : sunwj
 * @since 0.1
 *        Date: Mar 31, 2007
 *        Time: 10:03:07 PM
 *        <p/>
 *        html content parser using Jericho
 * todo does it need to devided into 2 different implementation?
 */
public class HtmlContentParser implements StringContentParser, StreamContentParser {

    public String extractPlainText(String textContent) throws ContentParserException {
        Source contentSource = new Source(textContent);
        return contentSource.extractText();
    }
}
","// HtmlContentParserTest.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains ten unit test cases for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParserTest {","// Here's an example implementation of the HtmlContentParserTest class with ten unit test cases for the extractPlainText method:

package org.asphodel.parser;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class HtmlContentParserTest {

    @Test
    void testExtractPlainTextWithEmptyString() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText("""");
        assertEquals("""", result);
    }

    @Test
    void testExtractPlainTextWithSimpleHtml() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><h1>Hello World!</h1></body></html>"");
        assertEquals(""Hello World!"", result);
    }

    @Test
    void testExtractPlainTextWithNestedHtml() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><h1>Hello <em>World</em>!</h1></body></html>"");
        assertEquals(""Hello World!"", result);
    }

    @Test
    void testExtractPlainTextWithSpecialCharacters() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><p>&copy; 2021</p></body></html>"");
        assertEquals(""Â© 2021"", result);
    }

    @Test
    void testExtractPlainTextWithScriptTags() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><script>alert('Hello World!');</script></body></html>"");
        assertEquals("""", result);
    }

    @Test
    void testExtractPlainTextWithStyleTags() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><head><style>body { background-color: yellow; }</style></head><body><h1>Hello World!</h1></body></html>"");
        assertEquals(""Hello World!"", result);
    }

    @Test
    void testExtractPlainTextWithComments() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><!-- This is a comment --><body><h1>Hello World!</h1></body></html>"");
        assertEquals(""Hello World!"", result);
    }

    @Test
    void testExtractPlainTextWithEntities() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><p>&lt;Hello World!&gt;</p></body></html>"");
        assertEquals(""<Hello World!>"", result);
    }

    @Test
    void testExtractPlainTextWithMultipleSpaces() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><p>Hello     World!</p></body></html>"");
        assertEquals(""Hello World!"", result);
    }

    @Test
    void testExtractPlainTextWithNewLines() throws ContentParserException {
        HtmlContentParser parser = new HtmlContentParser();
        String result = parser.extractPlainText(""<html><body><p>Hello\nWorld!</p></body></html>"");
        assertEquals(""Hello World!"", result);
    }
}"
