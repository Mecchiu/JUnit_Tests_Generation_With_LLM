[
    {
        "id": "chatcmpl-6yUJOfOKm3CpvmA8dXsYoYfArWwt2",
        "object": "chat.completion",
        "created": 1679874218,
        "model": "gpt-3.5-turbo-0301",
        "usage": {
            "prompt_tokens": 463,
            "completion_tokens": 1488,
            "total_tokens": 1951
        },
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column1\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(10);\n        loader.setLimit(20);\n        when(session.createSQLQuery(\"SELECT * FROM table order by column1 ASC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.setFirstResult(10)).thenReturn(query);\n        when(query.setMaxResults(20)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table order by column1 ASC\");\n        verify(query).setFirstResult(10);\n        verify(query).setMaxResults(20);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(5);\n        loader.setLimit(10);\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.setParameter(\"param1\", \"value1\")).thenReturn(query);\n        when(query.setParameter(\"param2\", \"value2\")).thenReturn(query);\n        when(query.setFirstResult(5)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).setFirstResult(5);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noResults() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of();\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_exceptionThrown() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenThrow(HibernateException.class);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSession() {\n        HibernateSessionFactory.setSession(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullQuery() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSql() {\n        loader.setSql(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_emptySql() {\n        loader.setSql(\"\");\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n}"
                },
                "finish_reason": "stop",
                "index": 0,
                "text": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column1\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(10);\n        loader.setLimit(20);\n        when(session.createSQLQuery(\"SELECT * FROM table order by column1 ASC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.setFirstResult(10)).thenReturn(query);\n        when(query.setMaxResults(20)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table order by column1 ASC\");\n        verify(query).setFirstResult(10);\n        verify(query).setMaxResults(20);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(5);\n        loader.setLimit(10);\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.setParameter(\"param1\", \"value1\")).thenReturn(query);\n        when(query.setParameter(\"param2\", \"value2\")).thenReturn(query);\n        when(query.setFirstResult(5)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).setFirstResult(5);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noResults() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of();\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_exceptionThrown() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenThrow(HibernateException.class);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSession() {\n        HibernateSessionFactory.setSession(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullQuery() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSql() {\n        loader.setSql(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_emptySql() {\n        loader.setSql(\"\");\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n}"
            }
        ],
        "time_taken": 47.25805616378784,
        "prompt_id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java",
        "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n",
        "test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {",
        "original_generated_code": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\n/**\n * Test class of {@link Loader}.\n * It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n */\nclass LoaderTest {\n\n    private Loader loader;\n    private Session session;\n    private Query query;\n\n    @BeforeEach\n    void setUp() {\n        loader = new Loader();\n        session = mock(Session.class);\n        query = mock(Query.class);\n        HibernateSessionFactory.setSession(session);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_noSorting_noPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_noPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        loader.setSort(\"column1\");\n        loader.setDir(\"ASC\");\n        loader.setPaging(true);\n        loader.setStart(10);\n        loader.setLimit(20);\n        when(session.createSQLQuery(\"SELECT * FROM table order by column1 ASC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object(), new Object());\n        when(query.setFirstResult(10)).thenReturn(query);\n        when(query.setMaxResults(20)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table order by column1 ASC\");\n        verify(query).setFirstResult(10);\n        verify(query).setMaxResults(20);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_withParams_withSorting_withPaging() {\n        String sql = \"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2\";\n        loader.setSql(sql);\n        loader.setPas(new HashMap<>() {{\n            put(\"param1\", \"value1\");\n            put(\"param2\", \"value2\");\n        }});\n        loader.setSort(\"column3\");\n        loader.setDir(\"DESC\");\n        loader.setPaging(true);\n        loader.setStart(5);\n        loader.setLimit(10);\n        when(session.createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\")).thenReturn(query);\n        List<Object> expected = List.of(new Object(), new Object());\n        when(query.setParameter(\"param1\", \"value1\")).thenReturn(query);\n        when(query.setParameter(\"param2\", \"value2\")).thenReturn(query);\n        when(query.setFirstResult(5)).thenReturn(query);\n        when(query.setMaxResults(10)).thenReturn(query);\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(\"SELECT * FROM table WHERE column1 = :param1 AND column2 = :param2 order by column3 DESC\");\n        verify(query).setParameter(\"param1\", \"value1\");\n        verify(query).setParameter(\"param2\", \"value2\");\n        verify(query).setFirstResult(5);\n        verify(query).setMaxResults(10);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_noResults() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(query);\n        List<Object> expected = List.of();\n        when(query.list()).thenReturn(expected);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(expected, actual);\n        verify(session).createSQLQuery(sql);\n        verify(query).list();\n        verifyNoMoreInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_exceptionThrown() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenThrow(HibernateException.class);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSession() {\n        HibernateSessionFactory.setSession(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullQuery() {\n        String sql = \"SELECT * FROM table\";\n        loader.setSql(sql);\n        when(session.createSQLQuery(sql)).thenReturn(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verify(session).createSQLQuery(sql);\n        verifyNoMoreInteractions(session);\n        verifyZeroInteractions(query);\n    }\n\n    @Test\n    void testLoadDataWithSql_nullSql() {\n        loader.setSql(null);\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n\n    @Test\n    void testLoadDataWithSql_emptySql() {\n        loader.setSql(\"\");\n\n        List<Object> actual = loader.loadDataWithSql();\n\n        assertEquals(List.of(), actual);\n        verifyZeroInteractions(session, query);\n    }\n}",
        "applied_heuristics": ""
    }
]