ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-6ybAGH9uJz75z9ow7Ubn0KdbbAnuY,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_0Test.java,41.37220549583435,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * implements Comparable
     *
     * @param node Object
     * @return int values 0 for same and 1 for different
     */
    public int compareTo(Object node);
}
","// ASTNode_0Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#compareTo(Object)} method.
*/
class ASTNode_0Test {","// Here's an example implementation of the ASTNode class and a test class for it:

// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable<ASTNode>, java.io.Serializable {

    private String name;
    private ArrayList<ASTNode> children;

    public ASTNode(String name) {
        this.name = name;
        this.children = new ArrayList<>();
    }

    public void addChild(ASTNode child) {
        this.children.add(child);
    }

    public String getName() {
        return this.name;
    }

    public ArrayList<ASTNode> getChildren() {
        return this.children;
    }

    @Override
    public int compareTo(ASTNode node) {
        if (this.name.equals(node.getName())) {
            return 0;
        } else {
            return 1;
        }
    }
}

// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#compareTo(ASTNode)} method.
*/
class ASTNodeTest {

    @Test
    void testCompareTo_SameName() {
        ASTNode node1 = new ASTNode(""test"");
        ASTNode node2 = new ASTNode(""test"");
        assertEquals(0, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_DifferentName() {
        ASTNode node1 = new ASTNode(""test1"");
        ASTNode node2 = new ASTNode(""test2"");
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_NullName() {
        ASTNode node1 = new ASTNode(null);
        ASTNode node2 = new ASTNode(null);
        assertEquals(0, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_NullNameAndDifferentName() {
        ASTNode node1 = new ASTNode(null);
        ASTNode node2 = new ASTNode(""test"");
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_DifferentNameAndNullName() {
        ASTNode node1 = new ASTNode(""test"");
        ASTNode node2 = new ASTNode(null);
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_SameNameAndChildren() {
        ASTNode node1 = new ASTNode(""test"");
        ASTNode node2 = new ASTNode(""test"");
        node1.addChild(new ASTNode(""child1""));
        node2.addChild(new ASTNode(""child1""));
        assertEquals(0, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_DifferentNameAndChildren() {
        ASTNode node1 = new ASTNode(""test1"");
        ASTNode node2 = new ASTNode(""test2"");
        node1.addChild(new ASTNode(""child1""));
        node2.addChild(new ASTNode(""child1""));
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_SameNameAndDifferentChildren() {
        ASTNode node1 = new ASTNode(""test"");
        ASTNode node2 = new ASTNode(""test"");
        node1.addChild(new ASTNode(""child1""));
        node2.addChild(new ASTNode(""child2""));
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_DifferentNameAndDifferentChildren() {
        ASTNode node1 = new ASTNode(""test1"");
        ASTNode node2 = new ASTNode(""test2"");
        node1.addChild(new ASTNode(""child1""));
        node2.addChild(new ASTNode(""child2""));
        assertEquals(1, node1.compareTo(node2));
    }

    @Test
    void testCompareTo_NullNameAndChildren() {
        ASTNode node1 = new ASTNode(null);
        ASTNode node2 = new ASTNode(null);
        node1.addChild(new ASTNode(""child1""));
        node2.addChild(new ASTNode(""child1""));
        assertEquals(0, node1.compareTo(node2));
    }
}"
chatcmpl-6ybBJ1zwn45qeQKZUHOexdhPMTVoH,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_1Test.java,32.89240765571594,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     *  reads the node in from a file
     *
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename);
}
","// ASTNode_1Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.
*/
class ASTNode_1Test {","// Here's an example implementation of the ASTNode class and a test class for it:

// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.ArrayList;

public class ASTNode implements Comparable<ASTNode>, Serializable {
    private String value;
    private ArrayList<ASTNode> children;

    public ASTNode(String value) {
        this.value = value;
        this.children = new ArrayList<>();
    }

    public void addChild(ASTNode child) {
        this.children.add(child);
    }

    public ArrayList<ASTNode> getChildren() {
        return this.children;
    }

    public String getValue() {
        return this.value;
    }

    /**
     * Reads the node in from a file
     *
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            return (ASTNode) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public int compareTo(ASTNode o) {
        return this.value.compareTo(o.getValue());
    }
}

// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link ASTNode}.
 * It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.
 */
class ASTNodeTest {
    @Test
    void testGetTreeWithValidFile() {
        ASTNode root = ASTNode.getTree(""valid_tree.ser"");
        assertNotNull(root);
        assertEquals(""root"", root.getValue());
        ArrayList<ASTNode> children = root.getChildren();
        assertEquals(2, children.size());
        assertEquals(""child1"", children.get(0).getValue());
        assertEquals(""child2"", children.get(1).getValue());
    }

    @Test
    void testGetTreeWithInvalidFile() {
        ASTNode root = ASTNode.getTree(""invalid_tree.ser"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithNonexistentFile() {
        ASTNode root = ASTNode.getTree(""nonexistent_tree.ser"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithNullFilename() {
        ASTNode root = ASTNode.getTree(null);
        assertNull(root);
    }

    @Test
    void testGetTreeWithEmptyFilename() {
        ASTNode root = ASTNode.getTree("""");
        assertNull(root);
    }

    @Test
    void testGetTreeWithDirectory() {
        ASTNode root = ASTNode.getTree(""src"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithTextFile() {
        ASTNode root = ASTNode.getTree(""test.txt"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithImageFile() {
        ASTNode root = ASTNode.getTree(""test.png"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithAudioFile() {
        ASTNode root = ASTNode.getTree(""test.mp3"");
        assertNull(root);
    }

    @Test
    void testGetTreeWithVideoFile() {
        ASTNode root = ASTNode.getTree(""test.mp4"");
        assertNull(root);
    }
}"
chatcmpl-6ybCMroYEIN405dpqy46S8FqMFC0w,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_2Test.java,15.250203847885132,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     *
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree();
}
","// ASTNode_2Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#createTree()} method.
*/
class ASTNode_2Test {","// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     *
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree() {
        // implementation of createTree method
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(this);
        for (ASTNode child : children) {
            node.add(child.createTree());
        }
        return node;
    }
}

// ASTNode_2Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#createTree()} method.
*/
class ASTNode_2Test {
    @Test
    void testCreateTree() {
        // test cases for createTree method
        ASTNode node1 = new ASTNode();
        ASTNode node2 = new ASTNode();
        ASTNode node3 = new ASTNode();
        node1.addChild(node2);
        node2.addChild(node3);
        DefaultMutableTreeNode treeNode = node1.createTree();
        assertEquals(treeNode.getUserObject(), node1);
        assertEquals(treeNode.getChildAt(0).getUserObject(), node2);
        assertEquals(treeNode.getChildAt(0).getChildAt(0).getUserObject(), node3);
    }
}"
chatcmpl-6ybDP4Xi2tHn13p8ymMYkJLG0X3eN,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAParser.java,1.9983370304107666,stop,"// JMCAParser.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;

public class JMCAParser implements Parser {

    /**
     * parse implements parse for Parser
     * precondition is the intermediatFile is set
     *
     * @param rdr Reader
     * @return ASTNode
     */
    public ASTNode parse(Reader rdr);
}
","// JMCAParserTest.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCAParserTest {","I'm sorry, but the code you provided is incomplete. It seems that the JMCAParserTest class is not properly closed. Please provide the complete code so I can assist you better."
chatcmpl-6ybESPa7Fm36kFmnepJUwEeuutaDQ,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/UILayoutDisplayAnalyzer.java,26.4015793800354,stop,"// UILayoutDisplayAnalyzer.java
package com.soops.CEN4010.JMCA;

/**
 * <p>Title: Group 2 Project </p>
 *
 * <p>Class: CEN4010 Fall 2005</p>
 *
 * <p>Description: Description: UILayoutDisplayAnalyzer implements a dummy Analyzer
 *    use for UI layout  </p>
 *
 * <p>Instructor Dr. Stoeklin</p>
 *
 * @author Group 2
 */
public class UILayoutDisplayAnalyzer implements Analyzer {

    /**
     * no operational implementation of Analyzer
     *
     * @param dummy ASTNode not used for dummy output
     * @return display string
     */
    public String analyze(ASTNode dummy);
}
","// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {","// Here's an example of how you can write unit tests for the UILayoutDisplayAnalyzer class

@Test
void testAnalyzeWithNullASTNode() {
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(null);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithValidASTNode() {
    ASTNode node = new ASTNode();
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithEmptyASTNode() {
    ASTNode node = new ASTNode("""");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingWhitespace() {
    ASTNode node = new ASTNode(""   "");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingSpecialCharacters() {
    ASTNode node = new ASTNode(""!@#$%^&*()"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingNumbers() {
    ASTNode node = new ASTNode(""1234567890"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingLetters() {
    ASTNode node = new ASTNode(""abcdefghijklmnopqrstuvwxyz"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingMixedCharacters() {
    ASTNode node = new ASTNode(""a1!b2@c3#d4$e5%f6^g7&h8*i9(j0)"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingNewline() {
    ASTNode node = new ASTNode(""Hello\nWorld"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}

@Test
void testAnalyzeWithASTNodeContainingTab() {
    ASTNode node = new ASTNode(""Hello\tWorld"");
    UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
    String result = analyzer.analyze(node);
    assertEquals(""Dummy output for UI layout analysis"", result);
}
}"
chatcmpl-6ybFVpqnoRbon0vr75dhHvXdrqztR,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAAnalyzer.java,50.01167178153992,stop,"// JMCAAnalyzer.java
package com.soops.CEN4010.JMCA;

import java.util.*;

/**
 * <p>Title: JMCAAnalyzer </p>
 *
 * <p>Description: implements Analyzer</p>
 *
 * Group2 for CEN4010 at FSU - Fall 2005
 */
public class JMCAAnalyzer implements Analyzer {

    /**
     * Analyze the ASTree and return a formatted string
     *
     * @param root ASTNode
     * @return String
     */
    public String analyze(ASTNode root);
}
","// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {","// Here's an example implementation of the JMCAAnalyzer and its test class:

// JMCAAnalyzer.java
package com.soops.CEN4010.JMCA;

import java.util.*;

/**
 * <p>Title: JMCAAnalyzer </p>
 *
 * <p>Description: implements Analyzer</p>
 *
 * Group2 for CEN4010 at FSU - Fall 2005
 */
public class JMCAAnalyzer implements Analyzer {

    /**
     * Analyze the ASTree and return a formatted string
     *
     * @param root ASTNode
     * @return String
     */
    public String analyze(ASTNode root) {
        // implementation goes here
    }
}

// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {
    @Test
    void testEmptyAST() {
        ASTNode root = new ASTNode();
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = """";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testSingleStatement() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode(""statement"", ""x = 5;""));
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. statement\n   x = 5;\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMultipleStatements() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode(""statement"", ""x = 5;""));
        root.addChild(new ASTNode(""statement"", ""y = 10;""));
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. statement\n   x = 5;\n2. statement\n   y = 10;\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testNestedStatements() {
        ASTNode root = new ASTNode();
        ASTNode ifNode = new ASTNode(""if"", ""if (x > 5) {"");
        ifNode.addChild(new ASTNode(""statement"", ""y = 10;""));
        root.addChild(ifNode);
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. if\n   if (x > 5) {\n      1. statement\n         y = 10;\n   }\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testFunctionDeclaration() {
        ASTNode root = new ASTNode();
        ASTNode funcNode = new ASTNode(""function"", ""public void foo() {"");
        funcNode.addChild(new ASTNode(""statement"", ""x = 5;""));
        root.addChild(funcNode);
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. function\n   public void foo() {\n      1. statement\n         x = 5;\n   }\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testClassDeclaration() {
        ASTNode root = new ASTNode();
        ASTNode classNode = new ASTNode(""class"", ""public class MyClass {"");
        classNode.addChild(new ASTNode(""statement"", ""private int x;""));
        root.addChild(classNode);
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. class\n   public class MyClass {\n      1. statement\n         private int x;\n   }\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testMethodCall() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode(""statement"", ""foo();""));
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. statement\n   foo();\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testVariableDeclaration() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode(""statement"", ""int x = 5;""));
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. statement\n   int x = 5;\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testExpression() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode(""statement"", ""x = 5 + y;""));
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. statement\n   x = 5 + y;\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
    
    @Test
    void testLoop() {
        ASTNode root = new ASTNode();
        ASTNode whileNode = new ASTNode(""while"", ""while (x < 10) {"");
        whileNode.addChild(new ASTNode(""statement"", ""x++;""));
        root.addChild(whileNode);
        JMCAAnalyzer analyzer = new JMCAAnalyzer();
        String expected = ""1. while\n   while (x < 10) {\n      1. statement\n         x++;\n   }\n"";
        String actual = analyzer.analyze(root);
        assertEquals(expected, actual);
    }
}"
