ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
e6e03892-279e-4e92-9302-a20d7ada6133,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,56.974404096603394,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {
public static int STATE_VALUE, EVENT_VALUE;
	@Test
	public void state_and_event_are_correct() {
		assertEquals(STATE_VALUE, Transition.trigger(T.STATE, T.EVENT).getStateValue());
		assertEquals(""start"", Transition.trigger(T.EVENT, T.STATE).getEvent().name());
	}
	@Test
	public void state_and_event_are_correct_with_guides(){
		assertEquals(STATE_VALUE, Transition.trigger(T.STATE, T.EVENT, T.GUIDE).getStateValue());
		assertEquals(""start"", Transition.trigger(T.EVENT, T.STATE, T.GUIDE).getEvent().name());
	}
	@Test
	public void end_transition_with_guides(){
		assertTrue(Transition.trigger(T.GUIDE).equals(IState.END));
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.END));
	}
	@Test
	public void end_event_guider(){
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.END));
	}
	@Test
	public void end_end_transition_with_guides(){
		assertTrue(Transition.trigger(T.GUIDE, T.EVENT).equals(IState.END));
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.END));
	}
	@Test
	public void end_end_event_guider(){
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.END));
	}
	@Test
	public void final_transition_with_guides(){
		assertTrue(Transition.trigger(T.GUIDE, T.EVENT).equals(IState.FINAL));
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.FINAL));
	}
	@Test
	public void final_end_transition(){
		assertFalse(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.FINAL));
	}
	@Test
	public void to_end_transition(){
		assertTrue(Transition.trigger(T.GUIDE, T.EVENT).equals(IState.FINAL));
	}
	@Test
	public void to_final_transition(){
		assertTrue(Transition.trigger(T.EVENT, T.GUIDE).equals(IState.FINAL));
	}

	// Test Case 9.2:
	@Test
	public void test_to_matching_state_with_guides(){
		assertEquals(""State 1, event 4"", Transition.trigger(T.GUIDE, T.EVENT).getEvent().name());
		assertEquals(""State 1, event 6"", Transition.trigger(T.GUIDE, T.EVENT, T.GUIDE).getEvent().name());
	}
	@Test
	public void test_to_matching_state_with_end(){
		assertEquals(""State 1, event 4"", Transition.trigger(T.GUIDE, T.EVENT, T.END).getEvent().name());
		assertEquals(""State 1, event 6"", Transition.trigger(T.GUIDE, T.EVENT, T.END, T.GUIDE).getEvent().name());
	}
}
// Transition_0Test.java"
6a119d11-e984-43f0-9743-77948c602e3f,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,56.54980683326721,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {

    @Test
    public void transition_1_shouldBeTrueForStartState_whenTrueHasStartState() {
        final IState startState = new StateMachineStartState(""startState"");
        final Event triggerEvent = new Event(""triggerEvent"");
        assertFalse(""triggered transition is false"", Transition.willTrigger(startState, triggerEvent));
    }

    /**
     * This {@link Transition} contains 2 guard conditions.
     * The test below ensures that all conditions evaluate to true and therefore
     * the transition executes and returns the new state that the state machine
     * is in.
     */
    @Test
    public void transition_1_shouldBeTrueForEvent_whenTrueHasEvent(){
        final IState startState = new StateMachineStartState(""startState"");
        final Event triggerEvent = new Event(""triggerEvent"");
        final IGuardCondition guardConditionA = new GuardCondition(""guardCondA"", GuardType.A2, true);
        final IGuardCondition guardConditionB = new GuardCondition(""guardCondB"", GuardType.A2, true);

        final IState eventState = new StateMachineEventState(""eventState"");
        final IState transitionState = new EventState(""transitionState"");
        final Event newEvent = new Event(""event"");

        /* guard conditions should be a part of guardConditions
        * 1.  When all conditions evaluate to true
        * 2.  triggered state is set */
        assertTrue(""conditions should be in an event's guards"", Transition.willTrigger(newStateMachineState,newEvent));
        assertTrue(""conditions should be in a started event state"", Transition.willTrigger(eventState,newEvent));
        assertTrue(""conditions should be in an "" + transitionState, Transition.willTrigger(transitionState,newEvent));
        assertTrue(""new event states in event are all events"",newEvent.equals(new Event(""event"")));
        assertTrue(""guardConditionA evaluates to true"", guardConditionA.evaluate(triggerEvent));
        assertTrue(""guardConditionB evaluates to true"", guardConditionB.evaluate(triggerEvent));

        /* guard conditions should have been used to create a start state */
        final IState startingState = newStateMachineState;
      
        assertEquals(""states are equal"", startingState, newStateMachineState);
        assertTrue(""start State should not be set as trigger state"", newStateMachineState.equals(triggerState));
        assertTrue(""new events in new transition should be the event"", newEvent.equals(newTransitionState));
        assertTrue(""new event states in transitions should be all events"",newEvent.equals(newTransitionState));
        assertTrue(""new event states in new event should be equal to starting state"",newEvent.equals(startingState));

        /* 2.1. guardConditions are the same as the ones at the start state
        * 1.  trigger state should equal the trigger state at event event */
        assertEquals(""guardConditions are the same"", guardConditionA.getGuardCondition(), guardConditionB.getGuardCondition());
   
        /* 2.2. guardCondition should be different if all conditions at all are
        *    False  = No Guard Conditions - default = always true
        * 1.  trigger state is set and the initial state does not
        * 2.1. guardConditions are the same as the ones at the start state
        * 2.2. guardCondition should not be set if all conditions at all are False
        * 2.3. when true evaluates to true but guardConditions are different
        * 2.3. evaluate guarded state condition
        * 3.  guard condition should be set as this is a started event */
        final IGuardCondition stateGuardCondition = new GuardCondition(""stateGuardCondition"", GuardType.A2, false);
        final IStateStateCondition transformedStateCondition = stateGuardCondition.transformEquals(new GuardStateConditionFactory(newStateMachineState).getRuleState().createStateStateConditionFromState());
        assertFalse(""guardConditionA evaluates to false if guard conditions are different at all"",guardConditionA.evaluate(triggerEvent));
        assertFalse(""guardConditions are different at all - default TRUE"",guardConditionA.evaluate(newEvent));
        assertFalse(""guardConditionB evaluates to false if guard conditions are different at all"",guardConditionB.evaluate(triggerEvent));
        assertFalse(""guardConditions are different at all - false true"", guardConditionA.evaluate(newEvent));
        assertFalse(""guardConditions are different at all - false false"", guardConditionB.evaluate(newEvent));
    }
}
// Transition_1Test.java"
8d4e0316-8108-4fb8-b56c-3884a1987b60,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,32.47803092002869,stop,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {
 	/**
		 * Executes the given test case.
		 */
		@Test
		public void test() {
				String str1 = ""hello"";
				String MatchesGuardConditionCondition = new StringMatchesGuardCondition();
				str1 = (String) MatchesGuardConditionCondition.evaluate(str1);
				assertEquals(str1, ""hello"");
				assertFalse(MatchesGuardConditionCondition.evaluate(Integer.valueOf(123)));
		}
}
		 
		 

// StringMatchesGuardConditionTest.java/TestStringMatchesGuardCondition.java"
5cd052b6-7977-4c02-afec-85a1cbba9656,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,60.54338359832764,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public static EndState getSingleton() {
        return SINGLETON;
    }
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {

	/**
	 * Unit test for the {@link EndState#getSingleton()} method.
	 * @junit.Ignore
	 */
    @Test
    public void testGetSingleton() {
        assertNotNull(EndState.getSingleton());
    }
}

/**
*  EndState extends java/lang/Object with a constructor containing at least a single
 *  argument. It extends {@link java/lang/Object} in order to have the {@link java/lang/Object#equals} or {@link java/lang/Object#hashCode} and
 *  to generate a unique hash code of itself.
* @author :Don Stewart
* @since :0.0.1
**/
class EndState_1 extends java.lang.Object {
	
	/**
	 * Constructor of class EndState
	 * Generated by Eclipse
	 */
	private EndState(){
		throw new AssertionFailure(""Do not call the static members in super class"");
	}

	/**
	 * Two end states with the same state are equal.
	 * @junit.Ignore
	 * @since :0.0.1
	 */
	@Test
	@org.junit.Test
	public void testEqualsSelf() {
		assertTrue(EqualsBuilder.reflectionEquals(this));
	}

	/**
	 * Two end states with different state are unequal.
	 * @junit.Ignore
	 * @since :0.0.1
	 */
	@Test
	@org.junit.Test
	public void testNotEqualsSelf() {
		assertFalse(EqualsBuilder.reflectionEquals(null));
	}
}
"
e2485152-a409-4003-a1a8-71327c07bed7,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,60.382036447525024,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {
/**
	 * Test of constructor of an object of {@link EndState}.
	 */
			private String state;
			
		/**
		 * @throws java.lang.Exception
		 */
		@Test
		public void testToObject() throws Exception {
			java.lang.EndState instance1 = 
					this.newInstance(java.lang.EndState.class.getSimpleName() + ""1"");
			java.lang.EndState instance2 = this.newInstance(java.lang.EndState.class.getSimpleName() + ""2"");
		}
}

"
554f2757-3721-49b7-9197-5270e4f6c4ca,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,60.476253509521484,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public static StartState getSingleton() {
        return SINGLETON;
    }
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {
/**
		* The singleton instance of {@link StartState} should be a singleton instance.
		* Creation date: (19/02/01 4:22:22 PM)
		*
		* @throws IllegalStateException
		*    If {@link StartState#getSingleton()} does not return a singleton instance.
		*    There must be exactly one non-null instance to be valid.
		*/
    @junit.jupiter.Unit
    @Test
    void getSingleton_illegalStateTest() {
	  assertTrue(StartState.getSingleton().getClass() == StartState.class);
    }

		/**
		* Create instance of {@link StartState} with only a single instance of {@link StartState} class.
		* Testing this case by setting the instance of {@link StartState} to {@code null} by setting its
		*      {@link java.lang.IllegalStateException} static field to exception class {@link NullPointerException}.
		*    Creation date: (19/02/01 4:22:22 PM)
		*    In method: {@link com.example.jockmacmad.jstate.state.StartState#getSingleton()}
		*/
    @junit.jupiter.Unit
    @Test
    void getSingletonWith_illegalStateTest_nullTest() {
	  assertTrue(null == StartState.getSingletonWith());
    }

		/**
		* Test equals implementation of {@link Object#equals(Object)}.
		*    Creation time: (11/06/2013 07:19:23 PM)
		*    Author: Don Stewart
		*/
    @junit.jupiter.Test
    void getSingletonWith_equals_2_1_Test() {
	  EqualsBuilder equalsBuilder = new EqualsBuilder();
	  equalsBuilder.appendSuper(false);
	  equalsBuilder.append(StartState.class, null, null);
	  assertTrue(equalsBuilder.isEquals());

	  equalsBuilder = new EqualsBuilder();
	  equalsBuilder.appendSuper(false);
	  equalsBuilder.append(StartState.class, null, null);   
	
	  assertFalse(""Null and non-null objects should be distinct"", equalsBuilder.isEquals());

	  equalsBuilder = new EqualsBuilder();
	  equalsBuilder.appendSuper(false);
	  equalsBuilder.append(null, null, null);   
	
	  assertFalse(""Different objects should be distinct"", equalsBuilder.isEquals());
    }

		/**
		* Test hash generation via {@link HashCodeBuilder}, {@link HashCodeBuilder}, {@link HashCodeBuilder}, and
		* {@link EqualsBuilder}.
		*    Creation time: (11/06/2013 06:34:28 PM)
		*    Author: Don Stewart
		*/
    @junit.jupiter.Test
    void getSingletonWith_hashCode_Test() {
	  int hashCode;
	  hashCode = -619303046;
	  assertEquals(""Different hash codes should be different"", hashCode, 
		        new HashCodeBuilder(hashCode, 1339558923).hashCode());
	  hashCode = new HashCodeBuilder(hashCode, 1339558923).appendSuper(false).toHashCode();
	  assertNotEquals(""Different hash code should be different"", hashCode, 
		                new HashCodeBuilder(hashCode, 1339558923).toHashCode());
	}

		/**
		* Test {@link String#valueOf()} and 
		*    {@link String#toString()} implementations.
		*    Creation time: (10/12/2013 02:16:09 PM)
		*    Author: Don Stewart
		*/
    @junit.jupiter.Test
    void getSingletonWith_toString_Test() {

	  String string = null;
	  string = null;

	  final int hashCode = 30;
	  string = null;
	  assertEquals(""String to string differs"",
		  ""StartState [null]"", 
		  string.toString());
	  string = ""a"";
	  assertEquals(""String to string differs with int"", 
		  ""StartState [a]"", 
		  string.toString());

	  assertEquals(""String to string differs with int"", 
		  ""StartState [a]"", 
		  new String(string.toCharArray()));

	  assertEquals(""String to string differs with int"", 
		  ""StartState [a]"", 
		  ""\""a\"": \""b\"""");

	  string = ""A"";
	  assertEquals(""Should be in String representation"", 
		  ""StartState [A]"", 
		  string.toString());
	  assertEquals(""Should be in String representation"", 
		  ""StartState A"", 
		  string.toString());

        string = ""StartState [a]"";
	  assertEquals(""Should be in String representation"", 
		  ""StartState [a]"", 
		  string.toString());

	  final StringBuilder stringBuilder = new StringBuilder();
	  stringBuilder.append(""Escape sequence"");
	  assertEquals(""End of StringBuilder differs"", 
		  ""StartState e"", 
		  stringBuilder.toString());

	  stringBuilder.append(""New char sequence"");
	  assertEquals(""StartState n"", 
		  ""StartState n"", 
		  stringBuilder.toString());

	  stringBuilder.append('X');
	  assertEquals(""StartState o"", 
		  ""StartState o"", 
		  stringBuilder.toString());

	  stringBuilder.setLength(0);
	  assertEquals(""StartState E"", 
		  ""StartState e"", 
		  stringBuilder.toString());
    }

    /**
     * Class of the state machine that is to be tested.
     * Testing case: {@code null} returned by {@link StartState#getSingleton()}.
     *    Creation time: (19/02/01 4:22:27 PM)
     */
    @junit.jupiter.Category(Category.TESTS)
    public final static class Main {

	/** Singleton {@link org.junit.jupiter.api.Test} test case for {@link StartState#getSingleton()} method. */
	public final static class DefaultStartState {

	    private static final Object SINGLETON = new StartState();

	    @junit.jupiter.Test
	    @Test
	    public void test_getSingleton_illegalStateTest() {
		assertTrue(StartState.getSingleton().getClass() == StartState.class);
	    }

	    /**
	     * Test overriding {@link #getSingleton_test()} to return a non-singleton instance.
	     *    This case does not test that a state that is non-singleton has a reference to itself.
	     *    Creation date: (29/10/2013 16:03:06 PM)
	     "
0dfd6d13-31d4-4fb8-90fc-3767fa7651ea,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,11.559014081954956,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {

    @Test
	public void testEquals() {
		assertTrue( new java.util.Date().equals( new java.util.Date() ) );
		assertTrue( new java.util.Date().equals( ""hello"" ) );
		assertFalse( new java.util.Date().equals( new java.sql.Timestamp( 0 ) ) );
		assertFalse( new java.util.Date().equals( new java.util.Timestamp( 0 ) ) );
	}

    @Test
	public void testHashCode() {
		assertTrue( new java.util.Date().equals( new java.util.Date() ) );
		assertTrue( new java.util.Date().equals( ""hello"" ) );
		assertTrue( new java.util.Date().equals( new java.sql.Timestamp( 0 ) ) );
		assertTrue( new java.util.Date().equals( new java.util.Timestamp( 0 ) ) );
	}

	@Test
	public void testToString() {
		assertEquals( new java.util.Date().toString(), new java.util.Date().toString() );
		assertEquals( new java.util.Date().toString(), ""hello"" );
	}
}
"
