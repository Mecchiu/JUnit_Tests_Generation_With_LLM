ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
1fa85959-6c3d-4aae-b817-cde35ba926b7,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/Game.java,58.434096336364746,stop,"// Game.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;

/**
 * This class coordinates rounds, entrants, and the simulation frame buffer.
 *
 * @author Daniel Pitts
 */
public class Game implements RoundListener {

    /**
     * Execute one step in the simulation.
     */
    public synchronized boolean stepRound() {
        if (round == null) {
            return false;
        }
        getRound().step();
        return round != null;
    }
}
","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains one unit test case for the {@link Game#stepRound()} method.
*/
class GameTest {","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains one unit test case for the {@link Game#stepRound()} method.
*/
class GameTest {
// Game.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;

/**
 * This class coordinates rounds, entrants, and the simulation frame buffer.
 *
 * @author Daniel Pitts
 */
public class Game implements RoundListener {

    /**
     * Execute one step in the simulation.
     */
    public synchronized boolean stepRound() {
        if (round == null) {
            return false;
        }
        getRound().step();
        return round!= null;
    }
}

// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains one unit test case for the {@link Game#stepRound()} method.
*/
class GameTest {
		/**
		* This test class is derived from {@link Game} and is executed like
		* an unit test.
		* Each unit test in this class corresponds to a {@link Robot} created
		* by a RobotFactory.
		*/
	
        @Test
        void round() {
            Game rd = null;
            Robot r = RobotFactory.robotNew();

            List<Robot> robots = new ArrayList<>();
            robots.add(r);

            rd = new Game();
            rd.append(robots);
            rd.addRoundListener(new RoundListener() {


                
                
                
                /**
                 * Run step of round
                 */

                
                @Override
                protected boolean roundStep(SimulationObserver sim) {
                    round = r;
                    roundState = RoundState.RUNNING;
                    return true;
                }

            });
            int nRound = 0;
            for (int n = rd.getRoundStartFrame() - 1; n > 0; n--) {
                r = rd.getRound(n);
                                                        
                r.getRobotScore().getScoreKeeper().addKeeper(6);
                r.executeRobotStep();
                sim.getWorld().reset();

                nRound++;
                if (nRound > 1) {
                    break;
                }
            }
            rd.step();

            if (nRound > 1) {
                fail(""failed to step through the game."");
            }
//            System.out.println(""Done"");
            assertTrue(rd.getRoundState()==RoundState.RUNNING);
        }
}
"
1b47bb34-58df-48bc-a270-efec201c9ff2,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/Arena.java,58.92995738983154,length,"// Arena.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;

/**
 * The Arena is the virtual world within which the simulation occurs.
 *
 * @author Daniel Pitts
 */
public class Arena {

    /**
     * Get the number of robots still active in the arena.
     *
     * @return the number of robots still active in the arena.
     */
    public int countActiveRobots() {
        return activeRobots.size();
    }
}
","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains one unit test case for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains one unit test case for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {

    @Test
    public void testAllActiveRobotsActive(){
        Arena arena = new Arena();
        //System.out.println(""countActiveRobots: ""+ arena.countActiveRobots());
    }

    @Test
    public void testActiveRobotsNoDamage(){
        Arena arena = new Arena();
        int count = arena.countActiveRobots();
        // System.out.println(""countActiveRobots: ""+ new Integer(count));
        assertTrue(""A robot should have one active one"", count == 1);		
    }

    @Test
    public void testActiveRobotsBadDamage(){
        Arena arena = new Arena();
        double damage = 0.1;
        CollidableArenaObject ro = new CollidableArenaObject(damage);
        int count = arena.countActiveRobots();
        //System.out.println(""count: ""+ count);
        assertTrue(""A robot should have one active one"", count == 1);		
        for(int i = 0; i < RobotSpawner.MAX_ROBOTS; i++){
            Roboteer shooter = RobotSpawner.getRoboteer(i);
            boolean noDamage = false;
            if(shooter == RobotSpawner.NO_SHOOTER){
                noDamage = true;
			}
            if(ro.equals(shooter.getTarget()) && noDamage){
                fail(""Found bad damage object in active robot at "" + i);
            }
        }
    }

    @Test
    public void testActiveRobotsActiveSameDisplacement(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1))
        .forEach(ro -> assertTrue(""Robot should see same offset in same displacement"", ro.getRadius() > 0));
    }

    @Test
    public void testActiveRobotsActiveDifferentDisplacement(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,2,2,2,2,2))
        .forEach(ro -> assertTrue(""Robot should see same offset when changing displacement"", ro.getRadius() > 0));
    }

	@Test
    public void testActiveRobotsActiveChangeDamage(){
        double damageX = 0.1;
        double damageY = 0.1;
        Collection<CollidableArenaObject> ros = Arrays.asList(new CollidableArenaObject(damageX,damageY));
        int count = arena.countActiveRobots();
        for(int i = 0; i < RobotSpawner.MAX_ROBOTS; i++){
            Roboteer shooter = RobotSpawner.getRoboteer(i);
            if(robs.indexOf(shooter.getTarget()) == 0){
                String msg = ""Active robot should not see itself as a damage object with one"";
                msg += "" offset"";
                if(shooter!= RobotSpawner.NO_SHOOTER)
					msg += "" at offset "" + shooter.getTargetAsDistance();
                msg = msg + "" as a damaged robot at "" + (i + 1);
                msg += "" for "" + robotSpawner.MAX_ROBOTS + "" robots"";
                msg += "", but I have a robot at "" + i + "" with a "" +robs.size()+ "" damage object attached"";
                msg = msg + "". This means that I must update this robot or make it inactive after next robot death."";
                throw new RuntimeException(msg);
            }
        }
    }

    @Test
    public void testActiveRobotsActiveRandomDisplacement(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1))
        .forEach(ro -> assertTrue(""Robot should see same offset in same displacement"", ro.getRadius() > 0));
    }

	@Test
    public void testActiveRobotsActiveDifferentDisplacement(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,2,2,2,2,2))
        .forEach(ro -> assertTrue(""Robot should see same offset when changing displacement"", ro.getRadius() > 0));
    }

	@Test
    public void testDestroyedRobotsCount(){
		Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1)).forEach(ro -> {
            ArenaObject oldActiveRobot = ro.getActiveRobot(); 
            assertNull(""active robot should not exist anymore"", oldActiveRobot);
        });
    }
    
    @Test
    public void testDestroyedRobotsRotation(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1)).forEach(ro -> {
            Roboteer oldActiveRobot = ro.getActiveRobot();
            assertNull(""active robot should not exist anymore"", oldActiveRobot);
        });
    }
	
    @Test
    public void testDestroyedRobotsRotations(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1)).forEach(ro -> {
            CollidableArenaObject roc = ro.getTarget();
            CollidableArenaObject newRo = null;
            double rotX = (ro.getRadius()*2);
            double rotY = (ro.getRadius()*2);
            if(roc instanceof DamageInflicter){
                newRo = new CollidableArenaObject(ro.getRadius()+rotX,ro.getRadius()+rotY);
            } else if (roc instanceof DamageInflicter2D){
                newRo = new CollidableArenaObject(ro.getRadius() + rotX,ro.getRadius()+rotY);
            } else {
                newRo = new CollidableArenaObject(ro.getRadius() + rotX,ro.getRadius() + rotY);
            }
            assertNotNull(""Collidable arena object disappeared"",newRo);
            assertFalse(""Collidable arena object has been destroyed, I shouldn't be able to destroy it"",newRo.isPresent());
        });
    }
    
    @Test
    public void testMaxDamageCount(){
        Arrays.asList(Arrays.asList(0,0,0,0,0,1,1,1,1,1)).forEach(ro -> {
            CollidableArenaObject roc = ro.getTarget();
            int maxDamage = 40;
            long expectedRobotCount = maxDamage + (10 * (ro"
82a99815-9fde-44bc-9e6e-2b1b80ddc098,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/HardwareBus.java,61.36624002456665,length,"// HardwareBus.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/**
 * Represents all the hardware connected to a single robot.
 *
 * @author Daniel Pitts
 */
public class HardwareBus {

    /**
     * Read from a specific port.
     *
     * @param portNumber the port to read from
     * @return the value read.
     */
    public short readPort(int portNumber) {
        return ports.get(portNumber).read();
    }
}
","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains one unit test case for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains one unit test case for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {

    /**
     * Test cases.
     */
    @Test
    public void writePortTest() {
        byte b0 = 10;
        byte b3 = 35;
        byte b2 = 33;
        short s0 = 10;
        short s3 = 35;
        short s2 = 33;
        
        byte[] data = {b0, b1, b2 };
        
        // Set b3 and s2
        HardwareBus.writePort(3, 20);
        assertEquals(Byte.toString(b3), Byte.toString(data[3]));
        assertEquals(Byte.toString(s3), Byte.toString(data[4]));


        // Set b0 and s2
        HardwareBus.writePort(0, 20);
        assertEquals(Byte.toString(b0), Byte.toString(data[0]));
        assertEquals(Byte.toString(s2), Byte.toString(data[1]));
        
        // Invalid ports => AssertException
        assertThrows(NullPointerException.class, () -> {
            HardwareBus.writePort(10, 20);
        });
        
        // Invalid hardware => AssertException
        assertThrows(ClassCastException.class, () -> {
            HardwareBus.writePort(2, 30);
        });
        
        // Invalid hardware => AssertException
        assertThrows(InvalidParameterException.class, () -> {
            HardwareBus.writePort(2, -16);
        });
        
        // Invalid data => AssertException 
        assertThrows(InvalidDataException.class, () -> {
            HardwareBus.writePort(2, 30, data);
        });

        // Invalid data => AssertException 
        assertThrows(InvalidDataException.class, () -> {
            HardwareBus.writePort(2, 30, s3);
        });

        // Valid ports => Array of bytes
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {s2};
            HardwareBus.writePort(2, 30, data);
        });

        // Valid data => byte[]
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {s0, s1};
            HardwareBus.writePort(2, 30, data);
        });
        
        // Valid data => byte[]
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {s0};
            HardwareBus.writePort(2, 30, data);
        });
        
    }

    @Test
    public void readPortTest() {
        byte[] data = {10,35,25};
        byte[] expectedData = {""10"", ""35"", ""25""};
        
        // Set data
        HardwareBus.readPort(0);
        byte[] testData = new byte[data.length];
        for (int i = 0; i < data.length; i++) {
            testData[i] = data[i];
        }
        assertArrayEquals(expectedData, testData);
        
        // Unset the data
        HardwareBus.readPort(3);
        expectedData = new byte[data.length];
        if (data.length!= expectedData.length) {
            System.out.println(""Warning: Data is truncated at position ""
                    + Arrays.toString(expectedData)+ "" to position ""
                    + Arrays.toString(data));
        }
        for (int i = 0; i < data.length; i++) {
            testData[i] = expectedData[i];
        }
        assertArrayEquals(expectedData, testData);
        
        // Invalid ports => AssertException
        assertThrows(IndexOutOfBoundsException.class, () -> {
            HardwareBus.readPort(-10);
        });
        
        // Invalid hardware => AssertException
        assertThrows(ClassCastException.class, () -> {
            HardwareBus.readPort(2);
        });

        // Valid ports => Array of bytes
        assertThrows(IndexOutOfBoundsException.class, () -> {
            byte[] data = {10};
            HardwareBus.readPort(2, data.length);
        });

        // Valid data => byte[]
        assertThrows(IndexOutOfBoundsException.class, () -> {
            byte[] data = {10};
            HardwareBus.readPort(2, data.length);
        });

        // Valid data => byte[]
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {10};
            HardwareBus.readPort(2, data.length);
        });

        // Valid data => byte[]
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {s2};
            HardwareBus.readPort(2, data.length);
        });

        // Valid data => byte[]
        assertThrows(ClassCastException.class, () -> {
            byte[] data = {s0};
            HardwareBus.readPort(2, data.length);
        });
    }

    @Test
    public void portHandlerTest() {
        byte[] data = {10,35,25};
        Collection<PortHandler<byte[]>> handlers = createHandlers(data);
        
        for (PortHandler<byte[]> handler : handlers) {
            assertEquals(100, handler.get());
        }
        
        // Unset the data
        Collection<PortHandler<byte[]>> handlers2 = createHandlers(new byte[]);
        assertArrayEquals(new ArrayList<>(), handlers2);
        
        // Invalid ports => AssertException
        assertThrows(NullPointerException.class, () -> {
            PortHandler<byte[]> handler = new PortHandler<>();
            assertEquals(100, (int) handler.get());
        });
        
        // Invalid hardware => AssertException
        assertThrows(ClassCastException.class, () -> {
            PortHandler<byte[]> handler = new PortHandler<>();
            assertEquals(100, (int) handler.get());
        });
        
        // Valid ports => Array of bytes
        Collection<PortHandler<byte[]>> handlers3 = createHandlers(data);
        assertArrayEquals(new ArrayList<>(), handlers3);
        
        // Valid data => byte[]
        Collection<PortHandler<byte[]>> handlers4 = createHandlers(new byte[]);
        assertArrayEquals(new ArrayList<>(), handlers4);
        
        // Valid data => byte[]
        Collection<PortHandler<byte[]>> handlers5 = createHandlers(new byte[]);
        assertArrayEquals(new ArrayList<>(), handlers5);
        
        // Valid data => byte[]
        Collection<PortHandler<byte[]>> handlers6 = createHandlers(new byte[]);
        assertArrayEquals(new ArrayList<>(), handlers6);
    }
    
    private Collection<PortHandler<byte[]>> createHandlers(byte[] data) {
        Collection<byte[]> handlers = new ArrayList<>();
        for (Port"
de982f9f-6256-4bbe-909a-bcfd952cdf48,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_0Test.java,51.70641779899597,stop,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }
}
","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains one unit test case for the {@link Memory#size()} method.
*/
class Memory_0Test {","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains one unit test case for the {@link Memory#size()} method.
*/
class Memory_0Test {

    /**
     * Test method for {@link Memory#size()}.
     */
    @Test
    void test_size() {
    	
        // Arrays.asList
    	List<MemoryArray> arrayList = new MemoryArrayList<>();
        for (int i = 0; i < 100_000; i++) {
	        arrayList.add(new MemoryArray(i, i*10, 2000, i*5));
        }
        assertTrue(""Memory.size() not a singleton!"", Memory.size()!= 0);
        assertEquals(""Memory.size is wrong!"", Memory.size(), arrayList.size());
        ArrayList<MemoryArray> originalArrayList = new ArrayList<>(Arrays.asList(arrayList));
        
        // Arrays_0Test
        List<MemoryArray> testArrayList = new ArrayList<>();
        for (int i = 0; i < 1000; i++) {
            testArrayList.add(
                    new MemoryArray(-123, 100_000 + i, 1000, (i & 0x1) == 0? 0 : i >> 1)
            );
        }
        assertTrue(""Memory_0Test not a one-dimensional array!"", Memory_0Test.isOneDimensionalArray(testArrayList.asList()));
        assertEquals(""Memory_0Test array not copied to correct list!"", Memory_0Test.toList(arrayList), testArrayList.asList());
        List<MemoryArray> allArrayList = new ArrayList<>();
        allArrayList.addAll(arrayList);
        allArrayList.addAll(testArrayList);
        assertTrue(""Memory_0Test array lists not identical!"", Memory_0Test.equals(arrayList, allArrayList));
    	assertTrue(""Memory_0Test array lists not identical!"", Memory_0Test.equals(testArrayList, allArrayList));
    }
    
    /**
     * Test method for {@link #isOneDimensionalArray(List<MemoryArray> elements)}.
     */
    @Test
    public void test_oneDimensionalArrayList() {
    	List<MemoryArray> list1 = new MemoryArrayList<>();
    	list1.add(new MemoryArray(1023, 200, 0, 0));
    	list1.add(new MemoryArray(2048, 30, 0, 0));
    	
    	List<MemoryArray> list2 = new MemoryArrayList<>();
    	list2.add(new MemoryArray(1023, 0, 0, 0));
    	list2.add(new MemoryArray(2048, 0, 0, 0));
    	
    	assertFalse(""Memory_0Test one-dimensional array list equal to empty!"",
            Memory_0Test.equals(list1, new MemoryArrayList<>(list2)));
    	
    	list1 = new MemoryArrayList<>();
    	list1.add(new MemoryArray(1023, 200, 0, 0));
    	list1.add(new MemoryArray(2048, 30, 0, 0));
    	
    	list2 = new MemoryArrayList<>();
    	list2.add(new MemoryArray(1023, 0, 0, 0));
    	list2.add(new MemoryArray(2048, 0, 0, 0));
    	
    	assertTrue(""Memory_0Test one-dimensional array list not equal to correct list!"",
            Memory_0Test.equals(list1, new MemoryArrayList<>(list2)));
    	
    	list1 = new MemoryArrayList<>();
    	list1.add(new MemoryArray(1023, 200, 0, 0));
    	list1.add(new MemoryArray(2048, 0, 0, 0));
   	
    	list2 = new ArrayList<>();
	 	list2.add(new MemoryArray(1023, 0, 0, 0));
	 	list2.add(new MemoryArray(2048, 0, 0, 0));
    	assertFalse(""Memory_0Test one-dimensional array list not equal to correct list!"",
            Memory_0Test.equals(list1, new ArrayList<>()));
 	}
    
    /**
	 * Test method for {@link #isOneDimensionalArray(List<MemoryArray> elements)}.
	 */
    @Test
    public void test_oneDimensionalArrayList_size0() {
    	List<MemoryArray> list1 = Memory.newList(0);
    	list1.add(new MemoryArray(1023, 200, 0, 0));
    	list1.add(new MemoryArray(2048, 30, 0, 0));
    	
    	List<MemoryArray> list2 = Memory.newList(0);
    	list2.add(new MemoryArray(1023, 0, 0, 0));
    	list2.add(new MemoryArray(2048, 0, 0, 0));
    	
    	assertTrue(""Memory_0Test list not equal to correct list!"",
            Memory_0Test.equals(list1, new MemoryArrayList(list2)));
    	assertEquals(""Memory_0Test list not equal to correct list!"",
    	        list1,
    	        new MemoryArrayList(list2).asList());
    }
    
    /**
	 * Test method for {@link #isOneDimensionalArray(List<MemoryArray> elements)}.
	 */
    @Test
    public void test_oneDimensionalArrayList_size1() {
    	List<MemoryArray> list1 = Memory.newList(1);
    	list1.add(new MemoryArray(1023, 200, 0, 0));
    	list1.add(new MemoryArray(2048, 30, 0, 0));
    	
    	List<MemoryArray> list2 = Memory.newList(1);
    	list2.add(new MemoryArray(1023, 0, 0, 0));
    	list2.add(new MemoryArray(2048, 0, 0, 0));
    	
    	assertFalse(""Memory_0Test list not equal to correct list!"",
            Memory_0Test.equals(list1, new MemoryArrayList(list2)));
    	assertEquals(""Memory_0Test list not equal to correct list!"",
    	        list1,
    	        new MemoryArrayList(list2).asList());
    }
}
"
e7daa4ae-6aa0-4c9b-bf71-a55673757580,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_1Test.java,61.566811084747314,stop,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }
}
","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains one unit test case for the {@link Memory#get(int)} method.
*/
class Memory_1Test {","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains one unit test case for the {@link Memory#get(int)} method.
*/
class Memory_1Test {
/**
		 * @throws NullPointerException if {@link ArrayList} is {@code null}
		 */
	private static void errorHandler(List<String> message) {
        assertNull(""message"",message);
	}

	static final MemoryArray[] arrays = {
		MemoryArray_1Test.testArray
	};
	private List<String> message;
	private MemoryArray testArray;

		/**
		 * @return the tests array
		 */
	private static MemoryArray[] getArrays() {
        return arrays;
	}

	/**
	 * Runs the tests.
	 *
	 * @throws NullPointerException if any argument is {@code null}
	 */
	@Test
	public void testArray() {
		// Run every unit of test
		for (MemoryArrayArray arrayTest : testArray) {
			System.out.println(""ArrayTest: "" + arrayTest);
		}
		assertTrue(""ArrayTest: array not created"", testArray!= null);
		for (int i = 0; i < arrays.length; ++i) {
			// Run every unit of test
			for (MemoryArray arrayTest : getArrays()) {
				System.out.println(""arrayTest: "" + arrayTest);
			}
			assertTrue(""ArrayTest: array not created"", arrayTest!= null);
		}
	}

	/**
	 * Sets the test array.
	 *
	 * @param array the array
	 */
	public static void setTestArray(MemoryArrayArray array) {
		testArray = array;
	}

		/**
	 * Executes a unit test
	 */
	public static void test() {
		// Set the test array
		Memory_1Test.setTestArray(testArray);

		// Run every unit of test
		for (int i = 0; i < arrays.length; i++) {
			// Run every unit of test
			for (int j = 0; j < arrays[i].size(); ++j) {
				testArrays(i)[j];
			}
			for (int j = 0; j < arrays.length - (i - 1); ++j) {
				testArrays(i)[j];
			}
			testArrays(i);
			for (int j = 0; j < arrays.length; j++) {
				testArrays(i[j]);
			}
		}
	}
	
	/**
	 * Test all the arrays
	 *
	 * @param size the size of the arrays
	 */
	public static void testArrays(int size) {
        list := new List<String>();
		for (int i = 0; i < size; ++i) {
			System.out.println(""test array"" + i);
			testArray.get(size*i);
			try {
				list.add(testArray.get(0));
				testArray.get(size*i);
				assertFalse(list.contains(testArray.get(0)));
			} catch (ArrayIndexOutOfBoundsException e) {
				errorHandler.indexOutOfBoundsError(size * i + 1, e);
			}
			for (; list.size() < size; ++list) {
				testArrays(list);
			}
		}
		// assertFalse(""list did not contain all arrays"", list.containsAll(list));
	}
}
"
3b37fce5-d3ab-49f9-bd36-ac35af6aa646,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Program.java,63.794697999954224,stop,"// Program.java
package net.virtualinfinity.atrobots.computer;

/**
 * A Program is a ROM definition.
 *
 * @author Daniel Pitts
 */
public class Program {

    /**
     * Creates a read-only memory array with the program code pre-flashed.
     *
     * @return the memory array.
     */
    public MemoryArray createProgramMemory() {
        final ReadOnlyMemoryArray readOnlyMemoryArray = new ReadOnlyMemoryArray(programCode.length);
        readOnlyMemoryArray.flash(programCode);
        return readOnlyMemoryArray;
    }
}
","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains one unit test case for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains one unit test case for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {

	@Test
    public void programTest() throws Exception {
			
		final Program program = new Program();
		final MemoryArray programMemoryArray = program.createProgramMemory();
		
    final MemoryArray[] inputMemoryArray = {
    			new MemoryArray(new byte[] {(byte)0xF0, (byte)0xF1, (byte)0xF2, (byte)0xF3,
                    (byte)0xF4, (byte)0xF5, (byte)0xF6, (byte)0xF7, (byte)0xF8, (byte)0xF9,
                    (byte)0xFA, (byte)0xFB, (byte)0xFC, (byte)0xFD, (byte)0xFE,
                    (byte)0xFF}),
    			new MemoryArray(new byte[] {(byte)0x5A, (byte)0x5B, (byte)0x5C, (byte)0x5D,
                    (byte)0x5E, (byte)0x5F, (byte)0x60, (byte)0x61, (byte)0x62, (byte)0x63,
                    (byte)0x64, (byte)0x65, (byte)0x66, (byte)0x67,
                    (byte)0x68, (byte)0x69, (byte)0x6A, (byte)0x6B, (byte)0x6C,
                    (byte)0x6D, (byte)0x6E, (byte)0x6F, (byte)0x70, (byte)0x71,
                    (byte)0x72, (byte)0x73, (byte)0x74, (byte)0x75, (byte)0x76,
                    (byte)0x77, (byte)0x78, (byte)0x79, (byte)0x7A, (byte)0x7B,
                    (byte)0x7C, (byte)0x7D, (byte)0x7E, (byte)0x7F}),
    			new MemoryArray(new byte[] {(byte)0x54, (byte)0x55, (byte)0x56, (byte)0x57,
                    (byte)0x58, (byte)0x59, (byte)0x5A, (byte)0x5B, (byte)0x5C, (byte)0x5D,
                    (byte)0x5E, (byte)0x5F, (byte)0x60, (byte)0x61, (byte)0x62, (byte)0x63,
                    (byte)0x64, (byte)0x65, (byte)0x66, (byte)0x67,
                    (byte)0x68, (byte)0x69, (byte)0x6A, (byte)0x6B, (byte)0x6C,
                    (byte)0x6D, (byte)0x6E, (byte)0x6F, (byte)0x70, (byte)0x71,
                    (byte)0x72, (byte)0x73, (byte)0x74, (byte)0x75, (byte)0x76,
                    (byte)0x77, (byte)0x78, (byte)0x79, (byte)0x7A, (byte)0x7B,
                    (byte)0x7C, (byte)0x7D, (byte)0x7E, (byte)0x7F}),
    }
		
		
    final MemoryArray[] expectedOutputArray = {
    			new MemoryArray(new byte[] {(byte)0xF0, (byte)0xF1, (byte)0xF2, (byte)0xF3,
                    (byte)0xF4, (byte)0xF5, (byte)0xF6, (byte)0xF7, (byte)0xF8, (byte)0xF9,
                    (byte)0xFA, (byte)0xFB, (byte)0xFC, (byte)0xFD, (byte)0xFE,
                    (byte)0xFF}),
    			new MemoryArray(new byte[] {(byte)0x5A, (byte)0x5B, (byte)0x5C, (byte)0x5D,
                    (byte)0x5E, (byte)0x5F, (byte)0x60, (byte)0x61, (byte)0x62, (byte)0x63,
                    (byte)0x64, (byte)0x65, (byte)0x66, (byte)0x67, (byte)0x68, (byte)0x69,
                    (byte)0x6A, (byte)0x6B, (byte)0x6C, (byte)0x6D, (byte)0x6E, (byte)0x6F,
                    (byte)0x70, (byte)0x71, (byte)0x72, (byte)0x73, (byte)0x74, (byte)0x75,
                    (byte)0x76, (byte)0x77, (byte)0x78, (byte)0x79, (byte)0x7A, (byte)0x7B,
                    (byte)0x7C, (byte)0x7D, (byte)0x7E, (byte)0x7F}),
    			new MemoryArray(new byte[] {(byte)0x54, (byte)0x55, (byte)0x56, (byte)0x57,
                    (byte)0x58, (byte)0x59, (byte)0x5A, (byte)0x5B, (byte)0x5C, (byte)0x5D,
                    (byte)0x5E, (byte)0x5F, (byte)0x60, (byte)0x61, (byte)0x62, (byte)0x63,
                    (byte)0x64, (byte)0x65, (byte)0x66, (byte)0x67, (byte)0x68, (byte)0x69,
                    (byte)0x6A, (byte)0x6B, (byte)0x6C, (byte)0x6D, (byte)0x6E, (byte)0x6F,
                    (byte)0x70, (byte)0x71, (byte)0x72, (byte)0x73, (byte)0x74, (byte)0x75,
                    (byte)0x76, (byte)0x77, (byte)0x78, (byte)0x79, (byte)0x7A, (byte)0x7B,
                    (byte)0x7C, (byte)0x7D, (byte)0x7E, (byte)0x7F}),
    };
	
		
		System.out.println(""["" + program.programCode.toString() + ""]"");
		checkArrayEquals(expectedOutputArray, program);
		System.out.println(""Program "" + program);
	}
      
}
"
baba1d25-63f4-40a7-8e23-67d2db464784,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_0Test.java,59.57038617134094,stop,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }
}
","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains one unit test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains one unit test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {
 /**
		  * Tests {@link AtRobotCompilerOutput#createRobotFactory(String)}.
		  * @throws IllegalStateException if there are compiler errors.
		  *
		  * @throws Exception may be thrown by the calling method.
		  */
		@Test
		 void testCreateRobotFactory()
				throws Exception {
				int result = 0;
				result += testGetProgram(
						""{@link Program#PROGRAM}"",
						new AtRobotCompilerOutput_0_GetProgram_0()
						);
				result += testGetProgram(
						""{@link Program#PPROGRAM}"",
						new AtRobotCompilerOutput_0_GetProgram_1()
						);
				result += testHardwareSpecifications(
						""{@link DebugInfo#DEBUGINFO}"",
						new AtRobotCompilerOutput_0_GetHardwareSpecifications_0()
						);
				result += testHardwareSpecifications(
						""{@link DebugInfo#NO_PROGRAM}"",
						new AtRobotCompilerOutput_0_GetHardwareSpecifications_1()
						);
				assertEquals(""GetProgram_0"", result, 1);
		}
}


"
7665db9f-24ac-4c1c-a5c5-ddd2b1d385f5,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_1Test.java,13.444575071334839,stop,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }
}
","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains one unit test case for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains one unit test case for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {
@Test
		public void hasErrors() {
			assertFalse(AtRobotCompilerOutput.hasErrors());
			AtRobotCompilerOutput instance = new AtRobotCompilerOutput();
			assertTrue(instance.hasErrors());
		}
		@Test
		public void getErrors()
				throws Exception {
			DebugInfo info = new DebugInfo();
			AtRobotCompilerOutput.compilerOutput =
					new AtRobotCompilerOutput(Program.getProgram(info),
							DebugInfo.getInstance().getJVM(), info);
			AtRobotCompilerOutput instance = new AtRobotCompilerOutput();
			String err = instance.getErrors();
			assertNotNull(err);
			assertTrue(err.contains(""Failed""));
		}
}"
b56a085e-3bf5-4fb3-8670-df3586cf9979,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test.java,61.81435036659241,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }
}
","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {
/**
		 * Compile the specific ""Test1.java"".
		 *
		 * @throws IOException if there is a problem reading from the file.
		 * @throws TokenNotFoundException if the token could not be successfully retrieved from the file.
		 */
        @Test
        public void compile_1() throws IOException, TokenNotFoundException {
        	final File temp = File.createTempFile(""atrobots-"", "".java"");
        	try {
  	    		String content = ""package net.virtualinfinity.atrobots.compiler.test1;\n""
  	    				+ ""\n""
  	    				+ ""import net.virtualinfinity.atrobots.compiler.lib"";
	    	    final OutputStream out = new BufferedOutputStream(new FileOutputStream(temp));
	    		try {
		    		new CompilerWriterImpl(content)
		    		.compile(new FileInputStream(temp));
	    		} finally {
	    			out.close();
	    		}

//   				final BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(temp)));
//   				try {
//   				final String line = in.readLine();
//   				if (line == null){
//   					System.out.println(""line is null"");
//   					return;
//   				}else{
//   					System.out.println(line);
//   				}
//   				} finally {
//   				in.close();
//   				}

        	} finally {
        		temp.delete();
        	}
        }
}"
94a70087-2d4c-490f-93b4-20cee95094f7,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test.java,61.85075306892395,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }
}
","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {
@Test
    public void test() throws IOException {
        AtRobotCompilerOutput result = new AtRobotCompilerOutput();
        InputStreamReader reader = new InputStreamReader( new ByteArrayInputStream( ""Hello World: "".getBytes()) );

        result.compile(reader);

        System.out.println(result);

        reader.close();
    }

    @Test
    public void runTest() throws IOException {
        File f = new File(""tests/robot.txt"");
        assertFalse(f.exists());
        AtRobotCompilerOutput result = AtRobotCompiler.compile(new FileInputStream(f));

        assertTrue(f.length() > 0);

        assertEquals(f.length(), result.size());
    }
}
"
0d351f33-331c-4b58-8db6-2f41374e55d1,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_2Test.java,38.06217646598816,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }
}
","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {

    private final TestUtils utils = new TestUtils();

    @Test
    public void shouldCompileTest() throws Exception {
        new File(this.utils.tempOutDir(), ""compileTest.java"").delete(); // Clear the temp output
        // In here, we want the tests to work even if compilation fails, so we're going to
        // write out the test code.
        test(this.utils.tempOutDir());
    }


    private void test(String directory) throws Exception {
		
        String[] classNames = { ""/TestAtRobots-2.cla"", ""/atRobots-2.cla"" };

        String testSrc = this.utils.tempOutDir(""compileTest.java"");
        StringWriter sw = new StringWriter();
        AtRobotCompilerOutput compiled = AtRobotCompiler.compile(new FileInputStream(this.utils.tempOutDir() + testSrc), classNames, sw);

		// Check the source read from our stdout
		String text = sw.toString();
		System.arraycopy(text.toCharArray(), 0, text.toCharArray(), text.length(), text.length());

		// Check the classes read from our stdout
		assertEquals(classNames.length + 1, Utils.readLines(text.toCharArray(), 0, text.length()).length);
		
		// Set up the test class
		String actualTestClass = Utils.readLines(text.toCharArray(), 0, text.length()).next();

        String actualName = actualTestClass.substring(actualTestClass.lastIndexOf('.') + 1);
        System.out.println(""Actual Class: "" + actualTestClass);

		// Now check the results
		Class foundClass = this.utils.loadClass(actualTestClass);
		Class actualClass  = foundClass.asSubclass(java.io.Serializable.class);

		assertEquals(classesAreConcrete(foundClass), classesAreConcrete(actualClass));
		assertEquals(classesAreSerializable(foundClass), classesAreSerializable(actualClass));
		assertEquals(classesAreConcrete(foundClass), classesAreConcrete(actualClass));
		assertEquals(classesAreSerializable(foundClass), classesAreSerializable(actualClass));
		assertEquals(classesAreConcrete(foundClass) == classesAreConcrete(actualClass), true);
    }

	/** 
	 * Checks the contents of two classes are compatible.
	 * Example usage:
	 * java.io.FileReader classA =... 
	 * java.util.LinkedList classB =...
	 * 
	 * @param a the first class of the two
	 * @param b the second class of the first class
	 * @return the contents of the two
	 * @throws Exception an exception is thrown if the test fails
	 */
	private static boolean classesAreConcrete(Class a, Class b) throws Exception {
		if (a.getSuperclass() == null) {
			return (Class.class.isAssignableFrom(b));

		} else if ((Class.class.isAssignableFrom(a.getSuperclass()) && b.equals(a.getSuperclass()))) {
			return true;
		} else {
			throw new RuntimeException(""Class A is a sub-class "" + a + "" and "" + b + "" of "" + a.getSuperclass() + "", but it is not"");
		}
	}

	/**
	 * Checks the contents of two classes are serializable.
	 * Example usage:
	 * java.io.FileReader classA =...
	 * java.util.LinkedList classB =...
	 *
	 * @param from the first class of the two
	 * @param to the second class of the first class
	 * @return the contents of the two
	 */
	private static boolean classesAreSerializable(Class a, Class b) throws Exception {
		if (a.getSuperclass() == null) {
			return! classesAreConcrete(b, a);
		} else if ((Class.class.isAssignableFrom(a.getSuperclass()) &&!b.equals(a.getSuperclass()))) {
			return! classesAreSerializable(b, a);
		} else {
			throw new RuntimeException(""Class A is a sub-class "" + a + "" and "" + b + "" of "" + a.getSuperclass() + "", but it is serializable"");
		}
	}

	private static class TestUtils extends Class {
		public TestUtils() throws Exception {
		    super(AtRobotCompiler_2Test.class.getName(), null, new Class[] { java.io.FileReader.class, java.lang.Object.class });
		}

		public static String tempOutDir() throws Exception {
			return utils.getTempFile(""atrobots-"", "".class"", "".java"");
		}
	}
}
"
90547840-b562-48f1-8bc1-bc6d544ec677,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_3Test.java,55.19011640548706,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains one unit test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {

    /**
     * Test case for {@link AtRobotCompiler#compile(LineNumberReader)}.
     */
    @Test
    public void test_compile() {
        //System.out.println(""test_compile"");

        String expected = ""\ntest_compile\n\n"";

        assertEquals(expected, compile.compile("""").toString());

        expected = ""\ntest_compile\n\n"";

        assertEquals(expected, compile.compile(""\tabc\n\n"").toString());
    }
}


"
