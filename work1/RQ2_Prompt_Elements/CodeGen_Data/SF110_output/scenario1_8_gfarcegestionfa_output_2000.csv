ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
796be8d6-eae3-4b39-a9f4-61050de0f04a,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,41.06778025627136,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {

	public FenetrePrincipale_0Test() {
		//Initialisation
        java.awt.EventQueue.invokeLater( () -> {
            //Create and set up frame
            JFrame frame = new FenetrePrincipale();
            frame.setVisible(true);
        });   
    }
	/**
	 * Test of function setDateLimForm
	 * @throws Exception
	*/
	@Test
    void testDataMoyenne() throws Exception {
        FenetrePrincipale_0Test testObj = this;
        FenetrePrincipale.setDateLimForm(calqueJour, calqueMois, calqueAnnee, testObj);
    }

    /**
	 * Test of function setDateLimForm
	 * @throws Exception
	*/
	@Test
    void test01() throws Exception {
	    Controler.getCurrentController().run(new Runnable(){
	        public void run() {
	            JFrame frame = new FenetrePrincipale(calqueJour, calqueMois, calqueAnnee);
	            frame.setVisible(true);
	        }
	    });
    }
	/**
	 * Test of function setDateLimForm
	 * @throws Exception
	*/
	@Test
    void test02() throws Exception {
	    Controler.getCurrentController().run(new Runnable(){
	        public void run() {
	            JFrame frame = new FenetrePrincipale(calqueJour, calqueMois, calqueAnnee);
	            frame.setVisible(true);
	        }
	    });
    }
	/**
	 * Test of function setDateLimForm
	 * @throws Exception
	*/
	@Test
    void test03() throws Exception {
	    Controler.getCurrentController().run(new Runnable(){
	        public void run() {
	            JFrame frame = new FenetrePrincipale(calqueJour, calqueMois, calqueAnnee);
	            frame.setVisible(true);
	        }
	    });
    }

    /**
	 * Test of function setDateLimForm
	 * @throws Exception
	*/
	@Test
    void test04() throws Exception {
	    Controler.getCurrentController().run(new Runnable(){
	        public void run() {
	            double result = 0.0;

	            //Calcul du calcul : par rapport à le calque déjà calculée
	            double calcul = (calqueJour * calqueMois) + calqueAnnee;
	            if(calcul > 0.0)
	            {
	                result = calcul;
	            }
	            else
	            {
	                result = calcul;
	            }
	            //Calcul du déjà calculé
	            double resultTemp = 0.0;
	            //Calcul du déjà calculé : par rapport à l'annee déjà calculée
                calqueAnnee = (Long)Calendar.getInstance().clone();
                calqueAnnee.add(Calendar.MONTH, -1);

                calqueMois = (Long)Calendar.getInstance().clone();
                calqueMois.add(Calendar.MONTH, -1);
                calqueAnnee.set(Calendar.YEAR, calqueAnnee.get(Calendar.YEAR));
                calqueMois.set(Calendar.MONTH, calqueMois.get(Calendar.MONTH));
                calqueMois.set(Calendar.DATE, calqueMois.get(Calendar.DATE));
                calqueMois.add(Calendar.DATE, 1);        

                resultTemp = resultTemp;
                calqueMois.set(Calendar.YEAR, calqueMois.get(Calendar.YEAR));
                resultTemp = resultTemp;
                calqueMois.set(Calendar.YEAR, calqueMois.get(Calendar.YEAR));
                resultTemp = resultTemp;
                calqueMois.set(Calendar.YEAR, calqueMois.get(Calendar"
7cd0c462-efef-416e-981e-b6cb825131ea,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,40.84992051124573,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {

  @SuppressWarnings(""static-method"")
  @Test
  void test() {
	  // creation de la requete
	  new Controler();
		
	  // recherche des données légales
	  Candidat c = Controler.test().get();
		
	  // recherche des données légales en fait
	  Identite[] p = Controler.test().getIdentite();
					
		
	  /************************** DANNE DU PARTICULIER ************************/
		
//		{
//			String valeur = ""<html><head/><body><p>CASTE DE LA POURMEMENT</p><p><strong>1</strong><br>DANNE DU PARTICULIER</p></body></html>"".replaceAll(""<"", """").replaceAll("">"", """");
//			ValeurFormation.formation(valeur);
//		}
//
//		{
//			String valeur = ""<html><head/><body><p>POURMEMENT UN CONSEQUANTE</p><p><strong>1</strong><br>DANNE DU PARTICULIER</p></body></html>"".replaceAll(""<"", """").replaceAll("">"", """");
//			ValeurFormation.formation(valeur);
//		}
//
//		{
//			String valeur  = ""<html><head/><body><p>POURMEMENT UN CONSEQUANTE</p><p><strong>1</strong><br>PAS DE DANNE DU PARTICULIER</p></body></html>"".replaceAll(""<"", """").replaceAll("">"", """");
//			ValeurFormation.formation(valeur);
//                        
//		}
//
//		{
//			String valeur  = ""<html><head/><body><p>POURMEMENT UN CONSEQUANTE</p><p><strong>1</strong><br>PAS DE DANNE DU PARTICULIER</p></body></html>"".replaceAll(""<"", """").replaceAll("">"", """");
//            String vaule  = ""<html><head/><body><p>POURMEMENT UN CONSEQUANTE</p><p><strong>1</strong><br>PAS DE DANNE DU PARTICULIER</p></body></html>"".replaceAll(""<"", """").replaceAll("">"", """");
//            assertNotNull(vaule);		
//        }
		
		System.out.println(""test()"");
	  
	  /************************** PARTICULIER ************************/
		
//		{
//			Date d = Controler.test().get().getDataset();
//            String s = Controler.test().get().getFormationP().getFormation().get(d.getDayOfWeek()).getFormationNo();
//			assertEquals(Voucher.TYPE_VOUS_FENOTRESPONSE, new ResponseFormation().formation(s)   );
//		}
//
//		{
//			Date d = Controler.test().get().getDataset();
//            String s = Controler.test().get().getAnneeD();
//			assertEquals(Voucher.TYPE_GALLON_FENOTRESPONSE, new Formation().formation(s));
//			assertTrue(""formationNombre() = "" + Formation.formationNombre() + "", not "" + new Formation().formationNombre(), Formation.formationNombre().equals(s));
//		}
	  
	  {
	    Date d = Controler.test().get().getDataset();
	    Date d1;
	    try {
	      d1 = d.getDayOfWeek() == Calendar.MONDAY? d : Controler.test().get().getAnneeD();
	    } catch (Exception p) {
		  fail(""Aucun jour d'année nécessaire"");	    
	    }
		{
			String valeur = ""<"
1647ce63-be85-46bd-821e-09726bda68fe,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java,16.366191387176514,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {

    @Test
    void test() {
        /* ModifTableStockage_0Test.java:6:: */
        // Si on peut déclarer 2 colonnes
        modifTableStockage = new ModifTableStockage(2);
		
        // On passe directement la modification (modifTableStockage.ajouterLigne())
        modifTableStockage.ajouterLigne();
        
        assertEquals(2, modifTableStockage.getNbLignes());
        assertEquals(modifTableStockage.getNbColonnes(), modifTableStockage.nbLignes + modifTableStockage.nbColonnes +1);
    }
}"
ca317932-7e25-47a6-912c-1d5d8a050e1e,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,61.33142828941345,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {

	
    /**
     * Test of ajoute le colonne en argument de jTableStockage.
     */
    @Test
    public void test_colonneMail() {
		System.out.println(""test_colonneMail"");
		TableStockageTable tableStockage = getTableStockage_1_1(""Envoyer e-Mail a:"", ""Maile en valeur"");
        JOptionPane.showMessageDialog(null,tableStockage,""Test du mode de colonne"");
        assertNotNull(tableStockage);
    }

    /**
     * Retourne le table Stockage modifié.
     */
    static TableStockageTable getTableStockage_1_1(String ligne, String mail) {
        TableStockageTable tableStockage = new TableStockageTable(5, 2);
        for (int i = 0; i < 5; i++) {
            checkBox1(tableStockage.getRows()[i], i,ligne, mail);
        }
        checkBox2(tableStockage.getRows()[4], 4, ligne, mail);
        return tableStockage;
    }


    /**
     * Test of checkBox1.
     */
    @Test
    public void test_checkBox1() {
        System.out.println(""Colonne 1 checkBox1"");
        checkBox1(tableStockage.getRows()[4], tableStockage.getRows()[4], ""maile"", (String)null);
    }

    /**
     * Test of checkBox2.
     */
    @Test
    public void test_checkBox2() {
        System.out.println(""Colonne 2 checkBox2"");
        checkBox2(tableStockage.getRows()[6], 4, ""maile"", (String)null);
    }

    /**
     * Test of checkBox3.
     */
    @Test
    public void test_checkBox3() {
        System.out.println(""Colonne 3 checkBox3"");
        checkBox3(tableStockage.getRows()[7], 4, (String)null);
    }

    /**
     * Fait ce checbox4 ci-dessous.
     */
    @Test
    public void test_checkBox4() {
        System.out.println(""Colonne 4 checkBox4"");
        checkBox4(tableStockage.getRows()[8], 4, (String)null);
    }

    /**
     * Test of checkBox5.
     */
    @Test
    public void test_checkBox5() {
        System.out.println(""Colonne 5 checkBox5"");
        checkBox5(tableStockage.getRows()[9], 4, ""maile"", (String)null);
    }

    /**
     * Fait ce checbox6 ci-dessous.
     */
    @Test
    public void test_checkBox6() {
        System.out.println(""Colonne 6 checkBox6"");
        checkBox6(tableStockage.getRows()[10], 4, (String)null);
    }

    /**
     * Fait ce checbox7 ci-dessous.
     */
    @Test
    public void test_checkBox7() {
        System.out.println(""Colonne 7 checkBox7"");
        checkBox7(tableStockage.getRows()[11], 4, (String)null);
    }

    /**
     * Test of checkBox8.
     */
    @Test
    public void test_checkBox8() {
        System.out.println(""Colonne 8 checkBox8"");
        checkBox8(tableStockage.getRows()[12], 4, (String)null);
    }

    /**
     * Fait ce checbox9 ci-dessous.
     */
    @Test
    public void test_checkBox9() {
        System.out.println(""Colonne 9 checkBox9"");
        checkBox9(tableStockage.getRows()[13], 4, (String)null);
    }

    /**
     * Fait ce checkbox10 ci-dessous.
     */
    @Test
    public void test_checkBox10() {
        System.out.println(""Colonne 10 checkBox10"");
        checkBox10(tableStockage.getRows()[14], 4, (String)null);
    }
}"
8c1df0dc-a2bb-47b1-a59d-f36e1d326de9,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java,41.192649364471436,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {
// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j!= this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}

// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {
		/**
		* Unit test case for {@link ModifTableStockage#selectMail()}.
		*/
		@Test
		public void unit_test_1() {
                selectMail(); // si le message est ok, alors le mail sera envoyé dans un table
                // Sinon
                assertEquals(ts.getValueAt(0, 0), Boolean.TRUE);
        }
		/**
		* Unit test case for {@link ModifTableStockage#selectMail()}.
		*/
		@Test
		public void unit_test_2() {
                assertEquals(ts.getValueAt(0, 0), Boolean.TRUE);
                selectMail();
                assertEquals(ts.getValueAt(0, 0), Boolean.FALSE);
		}
		/**
		* Unit test case for {@link ModifTableStockage#selectMail()}.
		*/
		@Test
		public void unit_test_3() {
                JOptionPane.showMessageDialog(null, ""La liste du mail sera envoyée!"");
                assertEquals(ts.getValueAt(0, 0), Boolean.FALSE);
                assertTrue(ts.getValueAt(0, 0).equals(""""));
		}
}
"
34a28503-e66e-4afb-b41b-d0362b585c0f,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,48.11726641654968,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {
/**
		* It contains one unit test case for the {@link Controler#findAllFormation()} method.
		* It executes several methods.
		* There is one exception in the last one.
		* @throws FienetreChoixException 
		* @throws ParseException 
		* @throws WriteException 
		* @throws RowsExceededException 
		* @throws DaoFactoryException 
		* @throws DaoFactoryException 
		* @throws WriteException 
		* @throws ParseException 
		* @throws IOException 
		*/
	@Test

	public void findAllFormationTestCase() throws FienetreChoixException, ParseException, WriteException{
            WritingXLS xls = TestHelper.createXLS(null, null, null, null);

            //Initialize data source
            final FormulaDao formulaDao = DaoFactory.createFormulaDao();
            final IdentiteDao identiteDao = DaoFactory.createIdentiteDao(identiteDao.getBaseDataLayer());

            Formation testFormation = new Formation(
                    formulaDao.findFormation(""0"", null, null),
                    identiteDao.findIdentite(""0"", null)
            );

            testFormation.setBase(""base"");
            //Fait la conversion pour fait un test
            Formation testFormationConversion = testFormation.toMap();


            Calendar now = Calendar.getInstance();

            Collection<Formation> formations = FormulaDaoFactory.dao.findFormations();
            for(Formation formation : formations) {
                System.out.println(formation);
            }

            //Fetture d'une des détails
            String[] values = testFormation.getValues();
            String[] valuesConversion = testFormationConversion.getValues();
            assertEquals(values.length, valuesConversion.length);
            //N'est pas fait lorsque elle est prises
            testFormation.setValues(values);
            formulaDao.createFormation(testFormation);
            formulaDao.createFormation(testFormationConversion);

            //Permitoir de mettre de fait une fois l'effet
            testFormation = new Formation(
                    testFormation.getFormation(),
                    0,
                    0       //Fait l'identite
            );

            //Fetture d'une des détails
            values = testFormation.getValues();
            valuesConversion = testFormationConversion.getValues();
            assertEquals(values.length, valuesConversion.length);
            //Fetture de l'identite par défaut, et l'identite ne peut pas beaucoup
            assertNotEquals(0, valuesConversion[0].ordinal());
            //Filtre d'identites
            FormationDao formDao = DaoFactory.createFormationDao();
            Collection<Formation> filtered = formDao.findFormations();
            System.out.println(formFiltered);

            //Fetture d'une de la nouvelle fois, il est ajoutée
            //TEST
            formFormationTest(testFormation,values,filtered);
            //Fetture d'une de de la nouvelle fois, il etage la bonne position
            formFormationTest(testFormationConversion,values,filtered);
            //Fetture d'un détails, la bonne position est de 0
            FormationFormationToDTOTest(testFormation,valuesConversion,filtered,now);
            //Fetture d'un détails, la bonne position est à 0 +1
            FormationOneToZeroTotDTOTest(testFormationConversion,valuesConversion,filtered);
    }
    /**
     * Méthode qui test le permet de convertir l'identite dont une identite a ete et
     * le permet de convertir de un formé qui n'est pas la présente
     * @param testFormation
     */
    public static void checkFormation(FormationFormation testFormation) {
            assertNotNull(testFormation);
            //La type de forme n'est pas une identite. On veut de faire de l'intérieur. 
            assertEquals(testFormation.getFormation(),Formation.TypeForm);
            //La type de forme n'est pas une identite. On veut de faire de l'intérieur
    }
    /**
     * Permet de convertir les différentes identites de l'action qui n'utilise pas leurs paramètres
     * @param testFormation
     * @param values
     * @param filtered
     * @throws WriteException
     * @throws RowsExceededException
     * @throws ParseException
     */
    private static void formFormationTest(FormationFormation testFormation, String[] values, Collection<Formation> filtered) throws WriteException, RowsExceededException, ParseException {
        String[] valuesConversion = testFormDefinitionConversion(testFormion"
