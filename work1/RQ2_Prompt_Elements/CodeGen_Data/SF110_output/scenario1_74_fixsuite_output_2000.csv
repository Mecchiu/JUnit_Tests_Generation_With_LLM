ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
fc7866f6-3be0-437d-b02d-4ae23f8deea9,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,66.0919816493988,length,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {
// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents!= null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }
}

// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {
		/**
		 * Tests if required in component with a given name is true.
		 * @param componentName
		 * @return
		 */
    public boolean isRequiredInComponent(String componentName) {
        for (FixInfo otherFixInfo : this.getFixes()) {
            if (otherFixInfo.isRequiredInComponent(componentName)) {
                return true;
            }
        }
        return false;
    }

		/**
		 * Unit test for {@link FieldInfo#isRequiredInComponent(String)}.
		 * @throws Exception
		 */
	@Test
    void test_01() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqString()}.
		 * @throws Exception
		 */
	@Test
    void test_02() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#isRequired(String)}.
		 * @throws Exception
		 */
	@Test
    void test_03() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(String)}.
		 * @throws Exception
		 */
	@Test
    void test_04() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(String, String)}.
		 * @throws Exception
		 */
	@Test
    void test_05() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(Integer, String)}.
		 * @throws Exception
		 */
	@Test
    void test_06() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(String, Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_07() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(Integer, String)}.
		 * @throws Exception
		 */
	@Test
    void test_08() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getString(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_09() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getFixes()}.
		 * @throws Exception
		 */
	@Test
    void test_10() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqCount()}.
		 * @throws Exception
		 */
	@Test
    void test_11() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqId()}.
		 * @throws Exception
		 */
	@Test
    void test_12() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqString(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_13() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqString(Integer, String)}.
		 * @throws Exception
		 */
	@Test
    void test_14() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqString(String, Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_15() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqString(Integer, Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_16() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqInteger(String)}.
		 * @throws Exception
		 */
	@Test
    void test_17() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqInteger(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_18() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqStringList(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_19() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqStringList(String, Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_20() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getReqStringList(Integer, Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_21() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#isMultiValue()}.
		 * @throws Exception
		 */
	@Test 
    void test_22() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getMultiValueStringList()}.
		 * @throws Exception
		 */
	@Test
    void test_23() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#isRequired(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_24() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getRequiredInt(String)}.
		 * @throws Exception
		 */
	@Test
    void test_25() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getMultiValueString(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_26() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#isRequiredInteger(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_27() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getInteger(String)}.
		 * @throws Exception
		 */
	@Test
    void test_28() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getInteger(Integer)}.
		 * @throws Exception
		 */
	@Test
    void test_29() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#isOptional(String)}.
		 * @throws Exception
		 */
	@Test
    void test_30() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getOptionalString(String)}.
		 * @throws Exception
		 */
	@Test
    void test_31() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getNullable(String)}.
		 * @throws Exception
		 */
	@Test
    void test_32() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getRequiredStrList(String)}.
		 * @throws Exception
		 */
	@Test
    void test_33() throws Exception {

    }

	/**
		 * Unit test for {@link FieldInfo#getInvalidStrList(int)}.
		 * @throws Exception
		 */
	@Test
    void test_34() throws Exception {"
54251b29-3af7-4e92-af81-7dc14a18793f,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,54.71313500404358,stop,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

    private static final List<String> validValues = new ArrayList<>();
    
	static {
        List<String> allFields = new ArrayList<String>(){{
            add(""field-name"");
            add(""field-desc"");
            add(""field-type-code"");
            add(""field-group-code"");
            add(""field-type-name"");
        }};
        List<String> allTypes = new ArrayList<String>(){{
            add(""application-encoding"");
        }};
        List<String> allGroups = new ArrayList<String>(){{
            add(""group-name"");
            add(""group-name"");
        }};

        String firstKey = allFields.get(0);
        String secondKey = allTypes.get(0);
        allFields.add(""field-name2"");
        allEncoding.add(""UTF-8"");
        allTypes.add(""group1"");
        allGroups.add(""group2"");

        for ( String key : allFields ) {
        	validValues.add(key);
        }
        for ( String type : allTypes ) {
        	validValues.add(type);
        }
        for ( String group : allGroups ) {
        	validValues.add(group);
        }
        
        
    }};
    
    @Test
    public void shouldCreateInstanceWithValidValues() {
        FieldInfo fi = new FieldInfo();
        assertNotNull(fi);
        assertTrue(!fi.isValidValue(anyValue()));
        assertFalse(fi.isValidValue(notValidValue()));
        assertTrue(fi.isValidValue(String.format(""unknown$"")));
        
    }
    
    private static String anyValue() {
        return FieldInfo_1.class.getName().replaceFirst(""${name}"", """"),
                String.format(""${desc}"", ""description""),
                String.format(""${type}"", ""application-encoding""),
                String.format(""${group}"", ""group-name""),
                Integer.valueOf(allFields.size()).toString(),
                Integer.toString(allEncoding.size()),
                Integer.toString(allGroups.size()),
                FieldInfo_1.class.getName().replaceAll(""${name}"", """"),
                FieldInfo_1.class.getName().replaceAll(""${desc}"", """")
        		.replaceAll(""${type}"", """").replaceAll(""${group}"", """")
        		.replaceAll(""${enc_int}"", """").replaceAll(""${field_name}"", """")
               .replaceAll(""^([a-zA-Z0-9_]{1})([a-zA-Z0-9_]{1})([a-zA-Z0-9_]{1})([a-zA-Z0-9_]{1})$"", """"),
                FieldInfo_2.class.getName().replaceAll(""${name}"", """").replaceAll(""${desc}"", """")
               .replaceAll(""^([a-zA-Z0-9_]{1})([a-zA-Z0-9_]{0,3})([a-zA-Z0-9_]{2,3})$"", """"),
                FieldInfo_3.class.getName().replaceAll(""${desc}"", """").replaceAll(""^([a-zA-Z0-9_]{1,3})$"", """"),
                FieldInfo_4.class.getName().replaceAll(""${field_name}"", """").replaceAll(""@$"", ""$""),
                FieldInfo_5.class.getName().replaceAll(""${desc}"", """", true).replaceAll(""@$"", ""$""),
                FieldInfo_6.class.getName().replaceAll(""${desc}"", """").replaceAll(""@$"", ""$""),
                FieldInfo_7.class.getName().replaceAll(""${desc}"", """").replaceAll(""@$"", ""$""),
                FieldInfo_8.class.getName().replaceAll(""${desc}"", """").replaceAll(""@$"", ""$""),
                FieldInfo_9.class.getName().replaceAll(""${desc}"", """").replaceAll(""@$"", ""$""),
                FieldInfo_10.class.getName().replaceAll(""${desc}"", """").replaceAll(""@$"", ""$"")
        		.replaceAll(""^(.*)$"", ""$1""),
                List.class.getName().replaceAll(""^$"", ""."").replaceAll(""\\$"", ""."") }
               .format(validValues), true);
    }
    
    private static String validValues = """";
    
    private static String validEncoding = """";

    private static String validValues_1_1 =
            ""\t\t<field-name>
                    \t\t\t<label>${field_name_label}</label>
                        \t\t\t<description>${field_name_description}</description>
                    \t\t</field-name>\n""
           , ""  \t\t<field-name>
                    \t\t\t<label>${field_name_label}</label>\n""
            ""\t\t\t<description>${field_name_description}</description>\n""
            "" \t\t</field-name>\n"";

    private static String validValues_1_10 =
           		""  \t\t<field-name>\n""
                   , ""  \t\t\t<label>${field_name_label}</label>\n""
                   , ""  \t\t\t<description>${field_name_description}</description>\n""
                    ""\t\t\t</field-name>\n"";
    
    private static String validValues_1_2 =
            ""  \t\t<field-name>\n""
                   , ""  \t\t\t<label>${field_name_label}</label>\n""
                   , ""  \t\t\t<description>${field_name_description}</description>\n""
                    ""\t\t\t</field-name>\n"";
    
    private static String validValues_0_5 =
            ""  \t\t<field-name>\n""
                   , ""  \t\t\t<label>${field_name_label}</label>\n""
                   , ""  \t\t\t<description>${field_name_description}</description>\n""
                    ""\t\t\t</field-name>\n"";
    
}

"
9e0d0bc1-8d15-4ce2-a12c-67033e0e5f4b,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,62.9168643951416,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber!= null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }
}

// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {
		private final static String EXPECTED_TEST_VAL = ""a-s-0-s-s-0"";
		private final static String EXPECTED_FIELD = ""field"";
        private final static String EXPECTED_FIELD_VALUE = "".0"";
		private final static String[] expectedTest = {"""", ""{0}"", ""{0.0}"", ""{0.0.0}"",
				""a-v-d-v-v'"", ""(a-b-c-d)e-f-i-k""};
	@Test
		void getField() throws Exception {

			final DictionaryInfo info = new DictionaryInfo();
			info.setField(0);
			assertTrue(""Field must be 0"", info.getField() == 0);

			info.setField(1);
			assertTrue(""Field must be 2"", info.getField() == 2);

			info.setField(7);
			assertEquals(""Unmarshal value for 7"", 0, info.getField());

			info.setField(255);
			assertEquals(""Unmarshal value for 255"", EXPECTED_FIELD_VALUE, info.getField());

			List<byte[]> bytes = new ArrayList<>();
			bytes.add("""".getBytes());
			bytes.add(new byte[]{'b', 'e', 'i', (byte)0x0, (byte)0xd, (byte)0, (byte)0x0});
			bytes.add(new byte[]{'b', 'e', 'i', (byte)0x0, (byte)0xd, (byte)0, (byte)0x0});
			bytes.add(new byte[]{'b', 'e', 'i', (byte)0x0, (byte)0xd, (byte)0, (byte)0x0});
			ArrayList<byte[]> list = new ArrayList<>(bytes);
			assertEquals(""Marshalling for null"", 0, list.size());

			TreeMap<String, DictionaryInfo.FieldInfo> fieldList = new TreeMap<>();
			fieldList.put(""type"", new DictionaryInfo.FieldInfo());
			fieldList.get(""type"").setTagNumber(7);
			byte[] fieldBytes =
				""type"".getBytes(DictionaryInfo.getCharsetName(DictionaryInfo.getDefaultCharset())).clone();
			fieldList.get(""type"").getValue().setValue(fieldBytes);
			TreeMap<String, DictionaryInfo.DictionaryInfo> dictionaryInfo = info.getDictionaryInfo(fieldList, true);
			assertTrue(""Error not found field"", dictionaryInfo!= null && dictionaryInfo.size() == 1);
			assertEquals(""Error found field"", new String(expectedTest, 0, expectedTest.length),
					dictionaryInfo.get(""type"").getValue().getValue());

		}
}

// DictionaryInfo_1Test.java
"
e103bc7f-cc45-4597-8947-29de63b447c6,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,62.72899389266968,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(String name) {
        if (fieldsByName!= null) {
            return fieldsByName.get(name);
        }
        return null;
    }
}

// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {
		   	/**
				*
				* @throws java.lang.UnsupportedOperationException
				* @throws java.io.IOException
				*/
	public static void main(String[] args) throws java.lang.Exception, java.io.IOException {
		   		List <String> strings = new ArrayList <String> ();
		   		strings.add(""FIX.20"");
		   		strings.add(""FIX.32"");
		   		strings.add(""FIX.42"");
		   		strings.add(""FIX.48"");
		   		strings.add(""FIX.48S"");
		   		strings.add(""FIX.4X"");
		   		strings.add(""FIX.6X"");
		   		strings.add(""FIX.8X"");
		   		strings.add(""FIX.9X"");
		   		strings.add(""FIX.11X"");
		   		strings.add(""FIX.12X"");
		   		strings.add(""FIX.14X"");
		   		for (String string : strings) {
				   	System.out.print(string);
		   	}
		   }
}

"
5519fd59-4d50-4780-a0e5-c24bf5d5aa0e,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,62.745407581329346,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(int id) {
        if (componentsById!= null) {
            return componentsById.get(id);
        }
        return null;
    }
}

// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {
		
    @jailed
    List<ComponentInfo> componentsById;
        
	@jailed
    public DictionaryInfo getDictionaryInfo() {
        return dictionariesById;
    }

    @jailed
    void setComponentsByName(List<ComponentInfo> componentsById) {
        this.componentsById = componentsById;
        for (ComponentInfo component: componentsById) {

        }
    }

    @Test
    void testConstructor1() {
	  List<ComponentInfo> componentsById = new ArrayList<>();

	  setComponentsByName(componentsById);

    }

    @Test
    void testConstructor2() {
        List<ComponentInfo> componentsById = null;

        setComponentsById(componentsById);

    }

    @Test
    void testConstructor3() {
        List<ComponentInfo> componentsById = new ArrayList<>();

        setComponentsById(componentsById);
    }
}
"
fcf68fe3-4fbc-4ec5-b9f9-7c6dcbfb16bf,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,62.60934042930603,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(String name) {
        if (componentsByName!= null) {
            return componentsByName.get(name);
        }
        return null;
    }
}

// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
		// List of components
		public static final List<ComponentInfo> components = new ArrayList<>();

		// Root component name
		public static final String rootComponent = ""FIX.7.0.18"";

		// Dictionaries
		private final TreeMap<String, TreeMap<Integer, ComponentInfo>> dictionaries = new TreeMap<>();

		// Find the first dictionary where the component
		// has the name ""FIX.7.0.18""
		static {
			dictionaries.put(rootComponent, new TreeMap<Integer, ComponentInfo>());
			dictionaries.get(rootComponent).put(16, new DictionaryInfo.ComponentInfo(16, false));
			dictionaries.get(rootComponent).put(17, new DictionaryInfo.ComponentInfo(17, true));
		}

		public DictionaryInfo_3Test() {
			super();
		}

		// Test for getComponents
		@Test
		public void testGetComponents() throws Exception {
			testRoot(new ArrayList<String>(), 0);
		}

		@Test
		public void testGetComponents_WithDuplicateComponent_Error() throws Exception {
			testRoot(new ArrayList<String>(), 1);
			testRoot(new ArrayList<String>(), 2);
		}

		@Test
		public void testGetComponents_TwoComponents() throws Exception {
			testRoot(new ArrayList<String>(), 0);
			testRoot(new ArrayList<String>(), 1);
		}

		@Test
		public void testGetComponents_OneComponent_Error() throws Exception {
			// This test contains 2 tests cases
			// 1) ""FIX.7.0.18"" and ""FIX.7.0.19""
			//	are defined in multiple dictionaries.
			//	If dictionaries is empty then tests can be aborted.
			// 2) ""FIX.7.0.18"" and ""FIX.7.0.19""
			//	are defined in dictionary ""FIX.7.0.18"", but in a different
			//	component. If dictionary contains a component, tests fail.
			// It means that the component which should be defined is not
			// in dictionary.
			testRoot(new ArrayList<String>(), 0);
			testRoot(new ArrayList<String>(), 1);
			testRoot(new ArrayList<String>(), 2);

			// Invalid: dictionary has two components
			testRoot(new ArrayList<String>(), 1);
		}

		@Test
		public void testGetComponents_NoDictionaryAvailable() throws Exception {
			testRoot(new ArrayList<>(), 2);
		}

		@Test
		public void testGetComponents_OneComponent() throws Exception {
			testRoot(new ArrayList<>(), 0);
			testRoot(new ArrayList<>(), 1);
		}

		private void testRoot(List<String> components, int expectedError) throws Exception {
			System.out.println(""\nTest: "" + components.toString());

			// Test if components are defined
			if (components!= null) {
				boolean allEqual = true;
				for (ComponentInfo c : components) {
					List<String> children = c.getComponents();
					allEqual = allEqual && children.contains(rootComponent + "":"");

					// If the children is equal to the dictionary then fail
					if (allEqual) {
						System.out.println(""     Component: "" + c.getName());
						assertTrue(rootComponent + "" with name "" + c.getName() + "" is defined in the dictionary."", dictionaries.containsKey(rootComponent) && dictionaries.get(rootComponent).containsKey(16, c));
						assertTrue(""FIX.7.0.18, but not FIX.7.0.19"", dictionaries.get(rootComponent).get(16, c).getName().equals(rootComponent + "":FIX.7.0.18""));
						assertTrue(""FIX.7.0.19, but not FIX.7.0.18"", dictionaries.get(rootComponent).get(17, c).getName().equals(rootComponent + "":FIX.7.0.19""));
					} else {
						// Assert if the components are different
						assertTrue(""FIX.7.0.16 not being defined in dictionary"", dictionaries.containsKey(rootComponent) && dictionaries.get(rootComponent).containsKey(16, c));
						// Assert if the components are different
						assertTrue(""FIX.7.0.17 not being defined in dictionary"", dictionaries.get(rootComponent).get(16, c).getName().equals(rootComponent + "":FIX.7.0.17""));
					}
				}
				assertTrue(""FIX.7.0.18 not being defined in dictionary"", dictionaries.containsKey(rootComponent) && dictionaries.get(rootComponent).containsKey(16, c));
				assertTrue(""FIX.7.0.19 not being defined in dictionary"", dictionaries.get(rootComponent).get(17, c).getName().equals(rootComponent + "":FIX.7.0.19""));
			}
		}

}
"
f36136f3-099b-4d31-8133-e3cef223371f,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,50.2729229927063,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(int id) {
        if (messagesById!= null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }
}

// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {
		/**
		 * unit test case for {@link DictionaryInfo#getMessage(int)}
		  @Test
		  */
		@Test
    public void getMessageWithID0() {
        //
        String message0 = ""This is its text"";
        DictionaryInfo dictionaryInfo = new DictionaryInfo();
        message0 = listDictionaryInfo(dictionaryInfo, 0, message0);
        //getMessage(0) == null? MessageInfo.INVENTORY : getMessage(message0);
        assertEquals(message0, getMessage(0));
    }
	
		/**
		* unit test case for {@link DictionaryInfo#listDictionaryInfo(List, int)}
		 */
		@Test
    public void listDictionaryInfoWithIDs0ByID0() {
        // list the results
        List list = new ArrayList();
        List result = listDictionaryInfo(list, 0, ""This is its text"");
        // assert the list values are as expected
        assertEquals(0, result.size());

        DictionaryInfo dictionaryInfo = new DictionaryInfo();
        List resultDictionary = listDictionaryInfo(list, 0, ""This is its text"");

        // list the information dictionaries
        resultDictionary = listDictionaryInfo(resultDictionary, 0, ""This is its text"");
        //
        assertEquals(1, resultDictionary.size());
        for (int i = 0; i < resultDictionary.size(); i++) {
            //
            DictionaryInfo item = (DictionaryInfo) resultDictionary.get(i);
            //
            assertNotNull(item.getMessage(0));
            assertNotNull(item.getString());
        }

        //
        DictionaryInfo newItem = new DictionaryInfo();
        dictionaryInfo.addDictionary(newItem);
        assertEquals(newItem, dictionaryInfo);

        // create an empty dictionary (so the key is not a dictionary)
        List keyList = new ArrayList();
        keyList.add(""This is its text"");
        dictionaryInfo.addDictionary(keyList);
        assertEquals(1, dictionaryInfo.size());
    }
	
	
		/**
		* unit test case for {@link DictionaryInfo#listDictionaryInfo(List, int)}
		 */
		@Test
    public void listDictionaryInfoWithIds0ByID0ByID1() {
        // create the list
        List list = new ArrayList();
        list.add(""This is its text"");
        List result = listDictionaryInfo(list, 0, ""This"", 2, ""is"");

        // list the information dictionaries
        result = listDictionaryInfo(result, 0, ""This"", 2, ""is"");
        assertEquals(2, result.size());
	}
	
	
    /**
    * unit test case for {@link DictionaryInfo#getMessage(int)}
    * list the messages in a list of dictionaries.
    */
    @Test
    public void listOfMessages() {
		MessageInfo message0 = new MessageInfo();
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
        //create the list
        List list = new ArrayList();
        list.add(message0);
        list.add(dictionaryInfo); // list the dictionaries
        // the list values
        assertEquals(2, list.size());
        //
        assertEquals(0, list.indexOf(message0));
        /*if (list.size() > 2) {
            String listMessage = list.get(0).getDescription();
            String listDictionary = list.get(1).getName();
            assertNotNull(listMessage);
            assertNotNull(listDictionary);
        }*/

    }

    private TreeMap<Integer, String> listDictionaryInfo(List list, int id, String key, int from, String to) {
        //
        assertEquals((size() + 1) * 1024, key.length());
        // 
        DictionaryInfo item = new DictionaryInfo();
        item.setMessage(from, to);
        item = listDictionaryInfo(list, id, key, from, to);

        //
        item.setString(from, to);
        //
        return item.getMessage(from, to);
    }
}
	





"
7871b1c4-5c83-40d0-b591-c1a3c4c8e77e,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,59.515042781829834,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {
// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(String name) {
        if (messagesByName!= null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }
}

// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {
		
    @Test
    public void getMessage_1Test() {
        //Test case 1
        TreeMap<String, MessageInfo> mapping = new TreeMap<String, MessageInfo>(),
                expected = new TreeMap<String, MessageInfo>();
		expected.put(""Mapping"", mapping);
		MessageInfo m0 = new MessageInfo(), m1 = new MessageInfo(), mC1 = new MessageInfo(), mC2 = new MessageInfo();
		mapping.put(""message"", m0);
		mapping.put(""m2"", m1);
		mapping.put(""m3"", m1);
		mapping.put(""message_1"", mC1);
        DictionaryInfo d = new DictionaryInfo();
        assertTrue(mapping.containsKey(""mapping""));
        assertTrue(mapping.equals(expected));
        assertTrue(d.getMessage(m0.getName())!= null);
        assertEquals(mv1.getMessage(m0.getName()), mv0.getMessage(m0.getName()));
        assertEquals(mv1.getMessage(m1.getName()), mv1.getMessage(m1.getName()));
        assertEquals(mv1.getMessage(m2.getName()), mv2.getMessage(m2.getName()));
        assertEquals(mv1.getMessage(m3.getName()), mv3.getMessage(m3.getName()));

        //Test case 2
        TreeMap<String, MessageInfo> mapping1 = new TreeMap<String, MessageInfo>(),
                expected1 = new TreeMap<String, MessageInfo>();
        mapping1.put(""mapping"", mapping);
        mapping1.put(""m3"", m1);
        mapping1.put(""message_1"", mC1);
        mapping1.put(""m4"", m1);
        mapping1.put(""m5"", m1);
        d = new DictionaryInfo(mapping);
        assertTrue(mapping.containsKey(""mapping""));
        assertTrue(mapping.equals(expected1));
        assertTrue(d.getMessage(m0.getName()).equals(mv1.getMessage(m0.getName())));
        assertTrue(d.getMessage(m1.getName()).equals(mv1.getMessage(m1.getName())));
        assertTrue(d.getMessage(m2.getName()).equals(mv1.getMessage(m2.getName())));
        assertTrue(d.getMessage(m3.getName()).equals(mv1.getMessage(m3.getName())));
        assertTrue(d.getMessage(""Mapping"").equals(mv1.getMessage(""Mapping"")));
        assertFalse(d.getM2().equals(mv1.getM2()));
        assertTrue(d.getM2().equals(mv1.getM2()));
        assertFalse(d.getM2().equals(mv1.getM2()));

		//Test case 3
		expected1.put(""Mapping"", mapping1);
		expected1.put(""M2"", m1);
		TreeMap<String, MessageInfo> mapping2 = new TreeMap<String, MessageInfo>(),
                expected2 = new TreeMap<String, MessageInfo>();
        mapping2.put(""mapping"", mapping);
        mapping2.put(""m3"", m1);
        mapping2.put(""message_1"", mC1);
        d = new DictionaryInfo(mapping2);
        assertTrue(mapping.equals(expected2));
        assertTrue(d.getMessage(m0.getName()).equals(mv1.getMessage(m0.getName())));
        assertTrue(d.getMessage(m1.getName()).equals(mv1.getMessage(m1.getName())));
        assertTrue(d.getMessage(m2.getName()).equals(mv1.getMessage(m2.getName())));
        assertTrue(d.getMessage(""Mapping"").equals(mv1.getMessage(""Mapping"")));
        assertFalse(d.getM2().equals(mv1.getM2()));
        assertTrue(d.getM2().equals(mv1.getM2()));


        //Test case 4
        assertFalse(d.getMapping().containsKey(""Mapping_Mapping_Mapping_Mapping_Mapping""));
        MessageInfo mDummy = new MessageInfo();
        assertFalse(mV.getMapping().containsKey(""Mapping_Mapping_Mapping_Mapping""));
        dDummy = new DictionaryInfo(mV);
        assertTrue(dV.containsKey(""Mapping""));
        assertTrue(dV.containsKey(""Mapping_Mapping_Mapping_Mapping""));
        assertEquals(dV.getMessage(mDummy.getName()), dDummy.getMessage(mDummy.getName()));


    }

    private static final MessageInfo mv1 = new MessageInfo();
    private static final MessageInfo mv2 = new MessageInfo();
    private static final MessageInfo mv3 = new MessageInfo();

    static final List<MessageInfo> mV = new ArrayList<MessageInfo>();
    static final List<MessageInfo> mC1 = new ArrayList<MessageInfo>();
    static final List<MessageInfo> mA = new ArrayList<MessageInfo>();
    static final List<MessageInfo> mB = new ArrayList<MessageInfo>();
}
"
