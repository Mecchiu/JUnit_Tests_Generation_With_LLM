ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
f8e29db5-7bd1-46a3-96a2-109ff17b9b1e,/EvoSuiteBenchmark/original/69_lhamacaw/src/main/java/macaw/system/StartupOptions.java,54.36259746551514,stop,"// StartupOptions.java
package macaw.system;

public class StartupOptions {

    // ==========================================
    private boolean useDemo;

    private String databaseName;

    private String dbDriverName;

    private String dbUser;

    private String dbPassword;

    private String server;

    private String port;

    private int maximumNumberOfConnections;

    // ==========================================
    public StartupOptions() {
    }

    // ==========================================
    public void processCommandLineArguments(String[] arguments);

    public String getDatabaseURI();

    /**
     * @return the dbUser
     */
    public String getDbUser();

    /**
     * @param dbUser the dbUser to set
     */
    public void setDbUser(String dbUser);

    /**
     * @return the dbPassword
     */
    public String getDbPassword();

    /**
     * @param dbPassword the dbPassword to set
     */
    public void setDbPassword(String dbPassword);

    /**
     * @return the server
     */
    public String getServer();

    /**
     * @param server the server to set
     */
    public void setServer(String server);

    /**
     * @return the port
     */
    public String getPort();

    /**
     * @param port the port to set
     */
    public void setPort(String port);

    /**
     * @return the useDemo
     */
    public boolean useDemo();

    /**
     * @param useDemo the useDemo to set
     */
    public void setUseDemo(boolean useDemo);

    /**
     * @return the databaseName
     */
    public String getDatabaseName();

    /**
     * @param databaseName the databaseName to set
     */
    public void setDatabaseName(String databaseName);

    /**
     * @return the dbDriverName
     */
    public String getDbDriverName();

    /**
     * @param dbDriverName the dbDriverName to set
     */
    public void setDbDriverName(String dbDriverName);

    /**
     * @return the maximumNumberOfConnections
     */
    public int getMaximumNumberOfConnections();

    /**
     * @param maximumNumberOfConnections the maximumNumberOfConnections to set
     */
    public void setMaximumNumberOfConnections(int maximumNumberOfConnections);
}
","// StartupOptionsTest.java
package macaw.system;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartupOptions}.
* It contains one unit test case for the {@link StartupOptions#useDemo()} method.
*/
class StartupOptionsTest {","// StartupOptionsTest.java
package macaw.system;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartupOptions}.
* It contains one unit test case for the {@link StartupOptions#useDemo()} method.
*/
class StartupOptionsTest {

	/**
	 * @throws Exception thrown if anything goes wrong
	*/
	@Test
	public void testConstructorWithRequiredParameters() throws Exception {

		StartupOptions options = new StartupOptions();
		
		assertTrue(""Expected "" + STARTUP_OPTIONS + "" to be initialized, but "" + options + "" was not initialized"", options!= null);
		
		assertTrue(""Expected "" + ""startup options class path to contain the absolute path to StartupOptions.class"", options instanceof StartupOptions);

		assertTrue(""Expected no database parameters"", options.getDatabaseName() == null || options.getDatabaseName().endsWith(""database""));
		assertTrue(""Expected no server parameters"", options.getServer() == null || options.getServer().endsWith(""/""));
		assertTrue(""Expected no database parameters"", options.getPort() == null || options.getPort().length() == 0);
		assertTrue(""Expected no maximumConnection value"", options.getMaximumNumberOfConnections() == -1 || options.getMaximumNumberOfConnections() >= 0);

		assertTrue(""Expected the \""useDemo\"" parameter to be set to "" + STARTUP_OPTIONS, options.getUseDemo());
	}
	@Test
	public void testConstructorWithOptionalParameters(String databaseName, String dbDriverName, String dbUser, String dbPassword, String server, String port, int maximumConnection) throws Exception {

		StartupOptions options = new StartupOptions();
		
		assertTrue(""Expected "" + ""startup options class path to contain the absolute path to StartupOptions.class"", options!= null);

		assertTrue(""Expected no database parameters"", options.getDatabaseName() == databaseName);
		assertTrue(""Expected no server parameters"", options.getServer() == null || server.endsWith(""/""));
		assertTrue(""Expected no database parameters"", options.getPort() == null || port.length() == 0);
		assertTrue(""Expected no maximumConnection value"", options.getMaximumNumberOfConnections() == maximumConnection);

		assertTrue(""Expected the \""useDemo\"" parameter to be set to "" + STARTUP_OPTIONS, options.getUseDemo());
		assertTrue(""Expected "" + ""param 'useDemo' to contain "" + STARTUP_OPTIONS_USE_DEMO + ""="" + ""true"", options.useDemo() == true);
		assertTrue(""Expected the \""databaseName' parameter to be set to "" + STARTUP_OPTIONS_DATABASE_NAME, options.getDatabaseName()!= null);
		assertTrue(""Expected "" + ""param 'databaseName' to contain "" + STARTUP_OPTIONS_DATABASE_NAME + ""="" + databaseName + "".database"", options.databaseName.endsWith(databaseName + "".database""));
		assertTrue(""Expected "" + ""param 'databaseName' to contain "" + STARTUP_OPTIONS_DATABASE_NAME + ""="" + databaseName + "".database"", options.databaseName.endsWith(databaseName.substring(0, databaseName.length() - databaseName.charAt(databaseName.length() - 1))));
		assertTrue(""Expected "" + ""param 'port' to contain "" + STARTUP_OPTIONS_PORT + ""="" + databaseName + "".database"", options.port.startsWith(""port.""));
		assertTrue(""Expected "" + ""param 'port' to contain "" + STARTUP_OPTIONS_PORT + ""="" + databaseName + "".database"", options.port.startsWith(""hostname.""));
		assertTrue(""Expected "" + ""param'server' to contain "" + STARTUP_OPTIONS_SERVER + ""="" + databaseName + "".database"", options.server.endsWith(""/""));
		assertTrue(""Expected "" + ""param'server' to contain "" + STARTUP_OPTIONS_SERVER + ""="" + databaseName + "".database"", options.server.endsWith(databaseName.substring(0, databaseName.length() - databaseName.charAt(databaseName.length() - 1))));
		assertTrue(""Expected "" + ""param'maximumConnection' to contain "" + STARTUP_OPTIONS_MAXIMUM_CONNECTION + ""="" + databaseName + "".database"", options.maximumConnection >= databaseName.length());
	}
	@Test
	public void testProcessCommandLineArgumentsWithEmptyString() throws Exception {
		
		StartupOptions options = new StartupOptions();
		
		assertTrue(""Expected "" + STARTUP_OPTIONS + "" to be initialized, but "" + options + "" was not initialized"", options!= null);

		assertTrue(""Expected "" + ""database name to end with 'database'."", options.getDatabaseName().endsWith(""database""));
	}
	
}"
