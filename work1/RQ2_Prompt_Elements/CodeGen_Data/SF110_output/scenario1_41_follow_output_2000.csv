ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
7318d5af-b310-4541-80a4-a911d7e39de8,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/config/EnumeratedProperties.java,39.842737436294556,stop,"// EnumeratedProperties.java
package ghm.follow.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/**
 * Extension of {@link java.util.Properties} which allows one to specify property values which are
 * Lists of Strings.
 *
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class EnumeratedProperties extends Properties {

    public List<String> getEnumeratedProperty(String key) {
        ArrayList<String> values = new ArrayList<String>();
        int i = 0;
        String value;
        while ((value = this.getProperty(key + delimiter + i++)) != null) {
            values.add(value);
        }
        return values;
    }
}
","// EnumeratedPropertiesTest.java
package ghm.follow.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EnumeratedProperties}.
* It contains one unit test case for the {@link EnumeratedProperties#getEnumeratedProperty(String)} method.
*/
class EnumeratedPropertiesTest {","// EnumeratedPropertiesTest.java
package ghm.follow.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EnumeratedProperties}.
* It contains one unit test case for the {@link EnumeratedProperties#getEnumeratedProperty(String)} method.
*/
class EnumeratedPropertiesTest {
// EnumeratedProperties.java
package ghm.follow.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/**
 * Extension of {@link java.util.Properties} which allows one to specify property values which are
 * Lists of Strings.
 *
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class EnumeratedProperties extends Properties {

    public List<String> getEnumeratedProperty(String key) {
        ArrayList<String> values = new ArrayList<String>();
        int i = 0;
        String value;
        while ((value = this.getProperty(key + delimiter + i++))!= null) {
            values.add(value);
        }
        return values;
    }
}

// EnumeratedPropertiesTest.java
package ghm.follow.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EnumeratedProperties}.
* It contains one unit test case for the {@link EnumeratedProperties#getEnumeratedProperty(String)} method.
*/
class EnumeratedPropertiesTest {
		
	private final String delimiter = "","";
	
	/**
	* Test of the getEnumeratedProperty function, of static class ghm.follow.config.EnumeratedProperties.
	*/
	@Test
    public void testGetEnumeratedProperty() {
		// We'll set up two properties here
		Properties p = new Properties();
		p.put(EnumeratedProperties.PROP_KEY.toString(), new ArrayList<String>());
		p.put(EnumeratedProperties.PROP_KEY.toString(), null);
		
		// We'll now assert that the getEnumeratedProperty method returns something we can assign to
		assertEquals(""No enumerated values found."", new ArrayList<String>(), EnumeratedProperties.getEnumeratedProperty(""""));
		//
		// Now test the getEnumeratedProperty function for a map property
		assertEquals(""getEnumeratedValueForKey in a map does return the enumerated values."", ""key"", EnumeratedProperties.getEnumeratedProperty(""KEY""));
		assertEquals(""getEnumeratedValueForKey in a map does return the enumerated values."", ""value"", EnumeratedProperties.getEnumeratedValueForKey(""KEY""));
		//
		// Finally test for a null value. It should get the getEnumeratedValueForKey method
		assertEquals(""Expected null value for non-enumerated values."", null, EnumeratedProperties.getEnumeratedValueForKey(null));
		
	}
	
}
"
eb362600-2419-49eb-b96b-094abc5cac79,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/io/JTextPaneDestination.java,52.24338459968567,stop,"// JTextPaneDestination.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;

/**
 * Implementation of {@link OutputDestination} which appends Strings to a {@link JTextPane}.
 *
 * @see OutputDestination
 * @see JTextPane
 * @author <a href=""mailto:carl.hall@gmail.com"">Carl Hall</a>
 */
public class JTextPaneDestination implements OutputDestination {

    public boolean autoPositionCaret() {
        return autoPositionCaret;
    }
}
","// JTextPaneDestinationTest.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JTextPaneDestination}.
* It contains one unit test case for the {@link JTextPaneDestination#autoPositionCaret()} method.
*/
class JTextPaneDestinationTest {","// JTextPaneDestinationTest.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JTextPaneDestination}.
* It contains one unit test case for the {@link JTextPaneDestination#autoPositionCaret()} method.
*/
class JTextPaneDestinationTest {

	private static final Logger logger = Logger.getLogger(""test"");

    @SuppressWarnings(""unused"")
	private static final int AUTO_POSITION_CANCELLATION = 0;

    private JTextPaneDestination textPaneDestination;
	
    /**
 * Constructor of {@link JTextPaneDestination}.
 * @throws IllegalArgumentException if {@link #autoPositionCaret} is not set.
 */
	
    public JTextPaneDestinationTest(Boolean autoPositionCancellation)
        throws IllegalArgumentException {
		logger.log(Level.INFO, ""Test of "" + JTextPaneDestination.class.getName() + "" set to "" + Boolean.toString(autoPositionCancellation));
		assertTrue(""The class "" + JTextPaneDestination.class.getName() + "" must be set to Boolean.TRUE"", autoPositionCancellation);
		textPaneDestination = new JTextPaneDestination();		
    }

	  /**
	 * This method tests the set and get autoPositionCaret method.
	 */
    @Test
    public void testAutoWriteToTarget() {
        //Test setAutoPositionCaret
        textPaneDestination.autoPositionCaret = false;
        String newText = ""Test text"";
        try { new TextPaneWriter(); }
        catch (IOException e) {
            if (logger.isLoggable(Level.INFO)) logger.log(Level.INFO, ""Caught exception in "" + new TextPaneWriter().getClass().getName() + "": "" + e.getMessage());
        }
        assertEquals(newText, textPaneDestination.autoPositionCaretStr.toString());
        textPaneDestination.autoPositionCaretStr = ""some random str"";
        assertEquals(newText, textPaneDestination.autoPositionCaretStr.toString());
        //Test getAutoPositionCaret
        textPaneDestination.autoPositionCaret = true;
        assertEquals(newText, textPaneDestination.autoPositionCaretStr.toString());
    }

    /**
	 * This method tests the auto position cursor for output.
	 */
    @Test
    public void testCursorPositionAutoWrite() {
		textPaneDestination.autoPositionCaretStr = ""Test text"";
		try { new TextPaneWriter(); }
		catch (IOException e) {
			if (logger.isLoggable(Level.INFO)) logger.log(Level.INFO, ""Caught exception in "" + new TextPaneWriter().getClass().getName() + "": "" + e.getMessage());
		}
		textPaneDestination.cursorPosition = 2;
        //Test setAutoPositionCaret
		textPaneDestination.autoWrite = false;
		try { new TextPaneWriter(); }
        catch (IOException e) {
            if (logger.isLoggable(Level.INFO)) logger.log(Level.INFO, ""Caught exception in "" + new TextPaneWriter().getClass().getName() + "": "" + e.getMessage());
        }
		assertFalse(""The cursorPosition should have been set to -1"", textPaneDestination.cursorPosition == -1);
		assertEquals(""The cursorPosition should have been saved as -1"", textPaneDestination.cursorPosition, -1);
        //Test getAutoWrite
		textPaneDestination.autoWrite = true;
        assertEquals(""The write flag should be set to TRUE"", textPaneDestination.autoWrite, true);
		textPaneDestination.autoWrite = false;
        assertFalse(""The return value should have been saved to 0"", textPaneDestination.autoWrite);
        textPaneDestination.autoWrite = true;
        assertEquals(""The write flag should be set to TRUE"", textPaneDestination.autoWrite, true);
	}
	
	 /**
	 * This method tests the auto position cursor for input.
	 */
    @Test
    public void testCursorPositionInput() {
		textPaneDestination.autoPositionCaretStr = ""Test text"";
		try { new TextPaneWriter(); }
        catch (IOException e) {
            if (logger.isLoggable(Level.INFO)) logger.log(Level.INFO, ""Caught exception in "" + new TextPaneWriter().getClass().getName() + "": "" + e.getMessage());
        }
		//Test setAutoWrite
		textPaneDestination.autoWrite = false;
		try { new TextPaneWriter(); }
        catch (IOException e) {
            if (logger.isLoggable(Level.INFO)) logger.log(Level.INFO, ""Caught exception in "" + new TextPaneWriter().getClass().getName() + "": "" + e.getMessage());
        }
		//Test setAutoPositionCaret
		textPaneDestination.autoPositionCaret = true;
		textPaneDestination.autoWrite = false;

		textPaneDestination.autoPositionCaretStr = ""some random str"";
		assertEquals(""The autoPosition cursor position should have been saved as 2"", textPaneDestination.cursorPosition, 2);
		textPaneDestination.writeToTarget();
		textPaneDestination.autoPositionCaretStr = ""the last 5 str"";
		//Test getAutoWrite
		textPaneDestination.autoWrite = true;
		textPaneDestination.autoPositionCaret = true;
		textPaneDestination.writeToTarget();
		assertEquals(""The autoWrite flag should be set to True"", textPaneDestination.autoWrite, true);
		textPaneDestination.autoWrite = false;
        assertFalse(""The Writeflag should have been set to FALSE"", textPaneDestination.autoWrite);
        textPaneDestination.autoWrite = true;
        assertTrue(""The Writeflag should have been set to True"", textPaneDestination.autoWrite);
        textPaneDestination.autoWrite = false;
        assertFalse(""The Return value should have been set to FALSE"", textPaneDestination.autoWrite);
    }
}
"
75edc5bd-36d2-493c-9f92-3750cfb0c692,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/io/JTextComponentDestination.java,62.18566870689392,stop,"// JTextComponentDestination.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;

/**
 * Implementation of {@link OutputDestination} which appends Strings to a {@link JTextComponent}.
 *
 * @see OutputDestination
 * @see JTextCompnent
 * @author <a href=""mailto:carl.hall@gmail.com"">Carl Hall</a>
 */
public class JTextComponentDestination extends FilterableOutputDestination {

    public boolean autoPositionCaret() {
        return autoPositionCaret;
    }
}
","// JTextComponentDestinationTest.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JTextComponentDestination}.
* It contains one unit test case for the {@link JTextComponentDestination#autoPositionCaret()} method.
*/
class JTextComponentDestinationTest {","// JTextComponentDestinationTest.java
package ghm.follow.io;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JTextComponentDestination}.
* It contains one unit test case for the {@link JTextComponentDestination#autoPositionCaret()} method.
*/
class JTextComponentDestinationTest {

    @Test
    public void autoPositionCaretTest() {
        JTextComponent tc;
		// set the auto position caret off
        tc = new JTextComponent(JTextComponent.AUTO_POSITION_OFF);
        assertFalse(tc.getPrintableAttribute(""enabled""));
        assertTrue(tc.getPrintableAttribute(""enabled""));
        assertFalse(tc.getCaretPosition() == 0);
		// check the returned auto position caret position
		assertEquals(tc.getCaretPosition(), tc.getPrintableAttribute(""position""));
        tc.setCaretPosition(1);
		// the position should stay unchanged
		assertEquals(tc.getPrintableAttribute(""position""), tc.getCaretPosition());
    }
		
	@Test
    public void notEnableIfCaretPositionIsNull() {
        JTextComponent tc;
        // set the enabled=false flag
		tc = new JTextComponent(JTextComponent.ENABLE_CARET_WHEN_HIGHLIGHT_FALSE);
        assertTrue(tc.getPrintableAttribute(""enabled""));
        assertFalse(tc.getPrintableAttribute(""enabled""));
        assertFalse(tc.getCaretPosition() == 0);
		// check the returned auto position caret position for enabled=false
		try {
      	     tc.setCaretPosition(null);
      	     assertEquals(tc.getCaretPosition(), tc.getPrintableAttribute(""position""));
        } catch(BadLocationException ex) {				
			assertEquals(Level.SEVERE,Logger.getLogger(this.getClass().getName()).getLevel());				
		}
		// set the enabled=false flag again, enabled is true
        tc.setPrintableAttribute(""enabled"",JTextComponent.ENABLE_CARET_WHEN_HIGHLIGHT_FALSE);
        assertFalse(tc.getPrintableAttribute(""enabled""));
        assertFalse(tc.getPrintableAttribute(""enabled""));
        assertTrue(tc.getPrintableAttribute(""enabled""));
        assertFalse(tc.getCaretPosition() == 0);
		// the position should stay unchanged
		assertEquals(tc.getPrintableAttribute(""position""), tc.getCaretPosition());
	}
}
"
7d823d23-03c4-4336-b408-692ccb1eca03,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/search/SearchableTextPane_0Test.java,51.73473286628723,length,"// SearchableTextPane.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;

public class SearchableTextPane extends JTextArea {

    public int search(String term) {
        if (term != null && term.length() > 0) {
            if (term.equals(lastSearchTerm)) {
                // assume to start at the beginning
                int pos = 0;
                // if there is a previous search position, start there plus the
                // length
                // of the last term so that last term again isn't found again
                if (lastSearchPos != -1) {
                    pos = lastSearchPos + lastSearchTerm.length();
                }
                lastSearchPos = search(lastSearchTerm, pos);
            } else {
                lastSearchPos = search(term, 0);
            }
        }
        // remember the term if it was found
        if (lastSearchPos == -1) {
            lastSearchTerm = null;
        } else {
            lastSearchTerm = term;
        }
        return lastSearchPos;
    }
}
","// SearchableTextPane_0Test.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchableTextPane}.
* It contains one unit test case for the {@link SearchableTextPane#search(String)} method.
*/
class SearchableTextPane_0Test {","// SearchableTextPane_0Test.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchableTextPane}.
* It contains one unit test case for the {@link SearchableTextPane#search(String)} method.
*/
class SearchableTextPane_0Test {
// SearchableTextPane.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;

public class SearchableTextPane extends JTextArea {

    public int search(String term) {
        if (term!= null && term.length() > 0) {
            if (term.equals(lastSearchTerm)) {
                // assume to start at the beginning
                int pos = 0;
                // if there is a previous search position, start there plus the
                // length
                // of the last term so that last term again isn't found again
                if (lastSearchPos!= -1) {
                    pos = lastSearchPos + lastSearchTerm.length();
                }
                lastSearchPos = search(lastSearchTerm, pos);
            } else {
                lastSearchPos = search(term, 0);
            }
        }
        // remember the term if it was found
        if (lastSearchPos == -1) {
            lastSearchTerm = null;
        } else {
            lastSearchTerm = term;
        }
        return lastSearchPos;
    }
}

// SearchableTextPane_0Test.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchableTextPane}.
* It contains one unit test case for the {@link SearchableTextPane#search(String)} method.
*/
class SearchableTextPane_0Test {
		//============================================================================================
		// test cases
		//============================================================================================

    @Test
    public void test_0_Constructor() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        assertFalse(""setParent(null)"", searchableTextPane.getParent() == null);
    }

    @Test
    public void test_0_FirstSentence() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        assertTrue(""setFirstSentenceDocument("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceDocument() instanceof DefaultDocument);
        assertTrue(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        assertSame(""firstSentenceDocument"", searchableTextPane.getFirstSentenceDocument() instanceof DefaultDocument, searchableTextPane.getFirstSentenceDocument());
        assertSame(""firstSentenceText"", searchableTextPane.getFirstSentenceText() instanceof DefaultText, searchableTextPane.getFirstSentenceText());
        searchableTextPane.setFirstSentenceDocument(null);
    }

    @Test
    public void test_0_SetParent() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        assertFalse(""setParent(null)"", searchableTextPane.getParent() == null);
        searchableTextPane.setParent(null);
    }

    @Test
    public void test_0_SetFirstSentenceText() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        //setFirstSentenceText(""First sentence""); // to set ""First sentence""
        searchableTextPane.setFirstSentenceText(""First sentence"");
        assertTrue(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        assertTrue(""setFirstSentenceDocument("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceDocument() instanceof DefaultDocument);
        searchableTextPane.setFirstSentenceText(""""); // to clear ""First (sentence)
        assertTrue(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        searchableTextPane.setFirstSentenceText(""""); // to clear ""First (sentence)""
        assertTrue(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        searchableTextPane.setFirstSentenceText(""""); // to clear ""First sentence""
        assertTrue(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        final Document document = new DefaultDocument();
        searchableTextPane.setFirstSentenceDocument(""First sentence"");
        assertFalse(""setFirstSentenceText("" + searchableTextPane + "")"", searchableTextPane.getFirstSentenceText() instanceof DefaultText);
        searchableTextPane.setFirstSentenceDocument(document);
    }

    @Test
    public void test_0_SetText() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        searchableTextPane.setText(""First sentence""); // to set ""First sentence""
        searchableTextPane.setText(""Second sentence""); // to set ""Second sentence""
        assertTrue(""setText("" + searchableTextPane + "")"", searchableTextPane.getText() instanceof DefaultText);
        assertTrue(""setText("" + searchableTextPane + "")"", searchableTextPane.getText() instanceof DefaultText);
    }

    @Test
    public void test_0_SetDocument() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        searchableTextPane.setDocument(null);
        assertTrue(""setDocument("" + searchableTextPane + "")"", searchableTextPane.getDocument() == null);
        searchableTextPane.setDocument(new DefaultDocument());
        assertTrue(""setDocument("" + searchableTextPane + "")"", searchableTextPane.getDocument()!= null);
        // if there's no text to append to the document, the last position is at the end of the document
        searchableTextPane.setText("""");
    }

    @Test
    public void test_0_HighlightTerm() {
        final SearchableTextPane searchableTextPane = new SearchableTextPane();
        assertTrue(""setHighlightTerm("" + searchableTextPane + "")"", searchableTextPane.getHighlightTerm() instanceof DefaultHighlighter.DefaultHighlightPainter);
        searchableTextPane.setHighlightTerm(null);
    }
	
	@Test
	public void test_1_IsSearchableWithTerm() {
		final SearchableTextPane searchableTextPane = new SearchableTextPane();
		final List<Object> results = new ArrayList<>();
		final DefaultHighlighter highlighter = (DefaultHighlighter)searchableTextPane.getHighlighter();
		searchableTextPane.addTag(null, 0, 0, new DefaultHighlighter.DefaultHighlightPainter(new DefaultHighlightPainter.DefaultHighlightInfoBgPainter() {
			@Override
			public Color getDefaultColorOfHighlightInfo() {
				return null;
			}

			@Override
			public Color getDefaultColorOfDefaultInfoBg() {
				return null;"
d2f87988-e79e-42ca-b2a8-6557b10ba3e4,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/search/SearchableTextPane_1Test.java,52.99749445915222,stop,"// SearchableTextPane.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;

public class SearchableTextPane extends JTextArea {

    public int search(String term, int startPos) {
        int pos = 0;
        try {
            Document doc = getDocument();
            String text = doc.getText(0, doc.getLength());
            // Search for pattern
            pos = text.indexOf(term, startPos);
        } catch (BadLocationException e) {
            // just return -1;
            log.log(Level.WARNING, ""BadLocationException in SearchableTextPane"", e);
            pos = -1;
        }
        return pos;
    }
}
","// SearchableTextPane_1Test.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchableTextPane}.
* It contains one unit test case for the {@link SearchableTextPane#search(String, int)} method.
*/
class SearchableTextPane_1Test {","// SearchableTextPane_1Test.java
package ghm.follow.search;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchableTextPane}.
* It contains one unit test case for the {@link SearchableTextPane#search(String, int)} method.
*/
class SearchableTextPane_1Test {

	@Test
	void testStartPos() {
		
		String text = ""this is a test"";
		int searchStartPos = 16;
		
		JTextArea textArea = new JTextArea(200);
		DefaultHighlighter.DEFAULT_ATTRIBUTE_STRATEGY.setAttribute(textArea, ""searchStartIndex"", searchStartPos);
		
		DefaultHighlighter.DEFAULT_ATTRIBUTE_STRATEGY.apply(textArea);

//		search(text, searchStartPos);
		assertTrue(searchStartPos + text.length() * 2 <= getLength());
		assertEquals(text, textArea.getText());
		assertEquals(text, textArea.getText(0,searchStartPos));

	}

//	@Test
//	public void testHighlightPainterComponent() {
//		
//		
//	}
}

// SearchableTextPane_1Test.java
"
aa2def1e-fa1a-4c1d-a16a-666c286aa584,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/gui/FileFollowingPane.java,55.74139666557312,stop,"// FileFollowingPane.java
package ghm.follow.gui;

import ghm.follow.FileFollower;
import ghm.follow.io.JTextComponentDestination;
import ghm.follow.io.OutputDestination;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 * A component which allows one to view a text file to which information is being asynchronously
 * appended.
 *
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class FileFollowingPane extends JScrollPane {

    public boolean autoPositionCaret() {
        return destination.autoPositionCaret();
    }
}
","// FileFollowingPaneTest.java
package ghm.follow.gui;

import ghm.follow.FileFollower;
import ghm.follow.io.JTextComponentDestination;
import ghm.follow.io.OutputDestination;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollowingPane}.
* It contains one unit test case for the {@link FileFollowingPane#autoPositionCaret()} method.
*/
class FileFollowingPaneTest {","// FileFollowingPaneTest.java
package ghm.follow.gui;

import ghm.follow.FileFollower;
import ghm.follow.io.JTextComponentDestination;
import ghm.follow.io.OutputDestination;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollowingPane}.
* It contains one unit test case for the {@link FileFollowingPane#autoPositionCaret()} method.
*/
class FileFollowingPaneTest {
/**
		 * @param args 
		 */
		public static void main(String[] args) {
			Logger.getLogger(FileFollowingPaneTest.class.getName()).setLevel(Level.SEVERE);
			Logger.getLogger(JTextComponentDestination.class.getName()).setLevel(Level.FINE);

		}
		public FileFollowingPaneTest() {
	}

	/** Test method for
	 * {@link org.junit.jupiter.api.Repeats#breakRepeats()}. */
	@Test
	public void testBreakRepeats() {
		SearchableTextPane sp = new SearchableTextPane(new UncompressedContent());
		sp.start();
		FileOutputStream fos = new FileOutputStream(sep.getTextFolder().toURI().getPath() + File.separator + ""test"");
		fos = new BufferedOutputStream(fos);
		sp.append(new JTextComponentDestination(new FileTextComponent(fos, ""javadoc"")), false, true);
		sp.append(new JTextComponentDestination(new FileTextComponent(fos, ""html"")), false, true);
		fos.close();
		String[] results = sp.stop();
		assertTrue(results[0].startsWith(""<b>First line""));
		assertTrue(results[1].startsWith(""<b>Second line""));
		}
	}
		
		private UncompressedContent uncc;
		private OutputDestination ood;
		private JTextComponentDestination dest;
		private JTextComponentDestination sep;
		private SearchableTextPane sp;
				
		FileFollowingPane() {
			uncc = new UncompressedContent();
			sp = new SearchableTextPane(uncc);			
			ood = new OutputDestination();
			sep = new JTextComponentDestination(new FileTextComponent(sep, ""javadoc""));
			sep.addListener(new UncompressedContent.ContentListListener() {

				@Override
				public void sizeChanged(Document doc, int oldDocSize,
				                          int newDocSize, int changedSize) {
					if (newDocSize!= oldDocSize) { // to avoid bug
						System.gc();
					}				
				}					
				
			});
		}
	

	public class UncompressedContent {
	
		public Document getDocument() {
			Document res = null;
			try {
				res = getDocumentImpl();
			} catch (IOException e) {
				throw new Error(""Document not set"");
			}
			return res;
		}
		
		public Document getDocumentImpl() throws IOException {
			return se.getDocument();
		}
	}
	
	private class JTextComponentDestination extends OutputDestination {
		private JTextPane jtp;
		
		public JTextComponentDestination(JTextPane jtp) {
			this.jtp = jtp;
		}
		
		public Document getDocument() {
			return (Document)jtp.getDocument();
		}
		
		public Document getDocumentImpl() throws IOException {
			return getDocument().getDefaultRootElement().getDocument();
		}
	}

	@Test 
	public void testUncompressedText() {
			
		FileFollowingPaneTest.uncc.append(sep.getTextFolder().toURI().getPath(), null); // to test auto-positioning
		assertTrue(sep.getTextFolder().list().length == 1);
		
		FileFollowingPaneTest.uncc.append(sep.getTextFolder().toURI().getPath(), new JTextComponentDestination(sep));
		assertTrue(sep.getTextFolder().list().length == 2);
		
		FileFollowingPaneTest.uncc.append(sep.getTextFolder().toURI().getPath(), null); // to test auto-positioning
		assertTrue(sep.getTextFolder().list().length == 1);
		
		FileFollowingPaneTest.uncc.complete();
			
	}
	
	private int size0 = 0;
	protected void start() {
		dest.append(sep.getTextFolder().toURI().getPath() + File.separator + ""test"", new JTextComponentDestination(sep));

		sep.addListener(new JTextComponentDestination.ContentTypeListener() {

			@Override
			public void contentTypeChanged(JTextComponent c) {
				size0 ++;
			}
		});
	}

         /**
		 * @param fc 
		 * @param text 
		 * @param sep
		 * @param dest 
		 * @return 
		 * @throws BadLocationException 
         * @throws IOException 
         */
       protected boolean createDocument(JTextComponent dest, String text, String sep, String ct) throws BadLocationException, IOException{
               Document doc = getDocumentImpl();
               doc.setText(text);
               doc.addDocumentListener(new DocumentListener() {

                    @Override
                    public void addUpdateListener(DocumentListener listener) {
                    }

                    @Override
                    public void removeUpdate(DocumentListener listener) {
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e) {
                    }

               });
               return true;
            }


@Override
public void onClose() {
    super.onClose();
    sep.removeListener(new JTextComponentDestination.ContentTypeListener() {

        @Override
        public void contentTypeChanged(JTextComponent c) {
            size0 --;
        }
    });
    sep.removeListener(new JTextComponentDestination.ContentTypeListener() {

        @Override
        public void contentTypeChanged(JTextComponent c) {
            size0 --;
        }
    });
}


}"
e2639b2d-9b56-40c1-887f-f7e7ceeae766,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/FileFollower_0Test.java,56.54206681251526,stop,"// FileFollower.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Instances of this class 'follow' a particular text file, assmebling that
 * file's characters into Strings and sending them to instances of
 * {@link OutputDestination}. The name and behavior of this class are inspired
 * by the '-f' (follow) flag of the UNIX command 'tail'.
 *
 * @see OutputDestination
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class FileFollower {

    public boolean addOutputDestination(OutputDestination outputDestination) {
        return outputDestinations.add(outputDestination);
    }
}
","// FileFollower_0Test.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollower}.
* It contains one unit test case for the {@link FileFollower#addOutputDestination(OutputDestination)} method.
*/
class FileFollower_0Test {","// FileFollower_0Test.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollower}.
* It contains one unit test case for the {@link FileFollower#addOutputDestination(OutputDestination)} method.
*/
class FileFollower_0Test {
static final String TEXT =
        ""Hello!\n"" +
        ""This is a message.\n"";
    boolean caughtException;
    private static Logger logger = Logger.getLogger(FileFollower_0Test.class.getName());

    @Test
    public void testAddOutputDestination() {
        final File f = new File(""targetDir/FileFollower_0Test.txt"");
        final OutputDestination outputDestination = new OutputDestination(f);
        assertTrue(outputDestination.isSet());

        assertTrue(f.exists());
        assertTrue(f.exists());

        assertTrue(f.isFile());
        assertTrue(f.isFile());
        assertFalse(f.isDirectory());
    }

    @Test
    public void testAddOutputDestinationFail() {
        final FileFollower lf = new FileFollower(""/path/to/file"");
        try {
            lf.addOutputDestination(getOutputDestination());
            fail(""Adding a non-existing OutputDestination should not succeed."");
        }
        catch (IllegalArgumentException e) {
            assertTrue(true);
        }

        try {
            lf.addOutputDestination(null);
            fail(""Adding a null OutputDestination should not succeed."");
        }
        catch (NullPointerException e) {
            assertTrue(true);
        }

    }

    private void write(FileOutputStream fos) throws IOException {
        fos.write(TEXT.getBytes());
    }

    @Test
    public void testReadOutputsThroughFile() throws IOException, Exception {
        final FileInputStream fis = new BufferedInputStream(new FileInputStream(""file""));
        final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(""src""));
        final List<String> lines;

        final File f = new File(""targetDir2/textFile.txt"");
        final FileInputStream fis2 = new FileInputStream(f);
        final int[] outputLines = new int[1];
        if (FileFollower_0Test.caughtException == false) {
            bis.read(new byte[1024]);
        }
        fis2.read(new byte[1024]);

        final StringBuilder sb = new StringBuilder();
        while (true) {
            final int len = bis.read();
            if (len == -1) break;
            sb.append((char) len);
        }

        lines = sb.toString().split(""\n"");

        assertEquals(""File is not right!"", ""Hello!\n"", lines.get(0));

        final List<String> newLines;
        newLines = new ArrayList<String>(lines.size());
        for (String line : lines) {
            newLines.add(line);
        }

        write(fis2);
        write(fis);

        assertSame(lines, newLines);

        write(fos);
        write(fis2);
    }
	private OutputDestination getOutputDestination() {
		final String pattern = ""^FileFollower_0Test.py[.\\/]{0,9}[.]?Test [.\\/].*$"";
		final String text = """";

		final File tmpDir = File.createTempFile(""targetDir"", ""txt"");
		tmpDir.delete();

		final InputDestination fd = new TestInputDestination(tmpDir);
		return new OutputDestination(fd);
	}

}
"
beaf44e0-2d8d-40da-83e7-372d00663d02,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/FileFollower_1Test.java,58.164687156677246,length,"// FileFollower.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Instances of this class 'follow' a particular text file, assmebling that
 * file's characters into Strings and sending them to instances of
 * {@link OutputDestination}. The name and behavior of this class are inspired
 * by the '-f' (follow) flag of the UNIX command 'tail'.
 *
 * @see OutputDestination
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class FileFollower {

    public boolean removeOutputDestination(OutputDestination outputDestination) {
        return outputDestinations.remove(outputDestination);
    }
}
","// FileFollower_1Test.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollower}.
* It contains one unit test case for the {@link FileFollower#removeOutputDestination(OutputDestination)} method.
*/
class FileFollower_1Test {","// FileFollower_1Test.java
package ghm.follow;

import ghm.follow.io.OutputDestination;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFollower}.
* It contains one unit test case for the {@link FileFollower#removeOutputDestination(OutputDestination)} method.
*/
class FileFollower_1Test {
    
    @Test
    public void test1() throws IOException {
        File source = new File(""TestFile"");
        File destination = new File(""dest"");
	
        // create a source and destination File objects by their name
        destination.getParentFile().mkdirs();
        File sourceF = new File(source.getParentFile(), source.getName());
        File destinationF = new File(destination.getParentFile(), destination.getName());
        
        // create a list of destination files
        List<File> destinationFiles = new ArrayList<>();
        destinationFiles.add(destinationF);
        
        // create a list of source files
        List<File> sourceFiles = new ArrayList<>();
        sourceFiles.add(sourceF);
        
        // execute the first action for each test of the test.
        List<String> lines = new ArrayList<>();
        lines.add(""//this is a test."");
        lines.add(""//this is a test."");
        lines.add(""//this is more..."");
        lines.add(""//this is more..."");
        lines.add(""//this is more..."");
        lines.add(""//this is more more."");
        lines.add(""//this is more more."");
        lines.add(""//this is more more more."");
        lines.add(""//this is more more more more."");
        lines.add(""//this is more, more more."");
        lines.add(""//this is more, more again."");
        lines.add(""//this is more, more again again."");
        lines.add(""//this is more, more again again again."");
        lines.add(""//this is more, more again again again again."");
        lines.add(""//this is more, more again again again again again."");
        lines.add(""//this is more, more again again again again again again."");
        lines.add(""//this is more, more, more again."");
        lines.add(""//this is more, more, more again."");
        lines.add(""//this is more, more, more again."");
        lines.add(""//this is more, more, more again again."");
        lines.add(""//this is more, most..."");
        lines.add(""//this is most times."");
        lines.add(""//this is most times again."");
        lines.add(""//this is most times again."");
        lines.add(""//this is most times, times again."");
        lines.add(""//this is most times, times again times again."");
        lines.add(""//this is most times, times times times times times times times times."");
        lines.add(""//this is most times, times times times times times times times same, times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times now."");    
        lines.add(""//this is most times, times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times only, almost, times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times time times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times times"";
        outputDestination.sendLines(lines, FileFollower.REPLY_CONFIRM, sourceFiles, destinationFiles, destination.toString());
        if ((lines.size() == 3) || (lines.size() == 4)) {
            assertTrue((lines.get(0).length() > 0));
            assertTrue((lines.get(1).length() > 0));
            System.out.println(lines.get(0));
            assertTrue((lines.get(1).length() > 0));
            System.out.println(lines.get(1));
        } else {
            System.out.println(""FAIL"");
            
        }
    }
    
    private List<OutputDestination> outputDestinations = new ArrayList<>();
    
    /*
	    @Test
	    public void test2() throws IOException {
		    
		    String input = ""\n"";
		    
		    outputDestinations.add(new OutputDestination(""unix""));
            outputDestinations.add(new FileDestination(new File(""/"")));
            
            addLinesToFile(outputDestinations.get(0), ""first line"", input);
            
            List<String> lines = new ArrayList<>();
            
            lines.add(""//this line also counts."");
            addLinesToFile(lines.get(0), ""this line already counts"", """");
            lines.add(""//this also counts."");
            lines.add(""//this line counts."");
            lines.add(""//this line also counts."");
            
            lines.add(""//this also counts."");
            lines.add(""//this line also counts"
059bcc36-2dc7-4ae4-be02-22a232d55edf,/EvoSuiteBenchmark/original/41_follow/src/main/java/ghm/follow/FollowApp.java,9.49225115776062,length,"// FollowApp.java
package ghm.follow;

import ghm.follow.config.Configure;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.event.WindowTracker;
import ghm.follow.gui.About;
import ghm.follow.gui.Clear;
import ghm.follow.gui.ClearAll;
import ghm.follow.gui.Close;
import ghm.follow.gui.Debug;
import ghm.follow.gui.Delete;
import ghm.follow.gui.DeleteAll;
import ghm.follow.gui.DndFileOpener;
import ghm.follow.gui.Edit;
import ghm.follow.gui.Exit;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.FollowAppAction;
import ghm.follow.gui.Menu;
import ghm.follow.gui.ComponentBuilder;
import ghm.follow.gui.Open;
import ghm.follow.gui.Pause;
import ghm.follow.gui.PopupMenu;
import ghm.follow.gui.Reset;
import ghm.follow.gui.StartupStatus;
import ghm.follow.gui.TabbedPane;
import ghm.follow.gui.ToolBar;
import ghm.follow.gui.FollowAppAction.ActionContext;
import ghm.follow.nav.Bottom;
import ghm.follow.nav.NextTab;
import ghm.follow.nav.PreviousTab;
import ghm.follow.nav.Top;
import ghm.follow.search.ClearAllHighlights;
import ghm.follow.search.ClearHighlights;
import ghm.follow.search.Find;
import ghm.follow.search.SearchableTextPane;
import ghm.follow.systemInterface.DefaultSystemInterface;
import ghm.follow.systemInterface.SystemInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class' main() method is the entry point into the Follow application.
 *
 * @see #main(String[])
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class FollowApp {

    public static ImageIcon getIcon(Class<?> clazz, String iconNameKey) {
        String filename = getResourceString(iconNameKey);
        URL url = clazz.getResource(filename);
        LOG.finer(""Class: "" + clazz + "", iconNameKey: "" + iconNameKey);
        LOG.finer(""filename: "" + filename);
        LOG.finer(""url: "" + url);
        ImageIcon icon = null;
        if (url != null) {
            icon = new ImageIcon(url);
            LOG.finer(""errored: "" + (java.awt.MediaTracker.ERRORED == icon.getImageLoadStatus()));
        }
        return icon;
    }
}
","// FollowAppTest.java
package ghm.follow;

import ghm.follow.config.Configure;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.event.WindowTracker;
import ghm.follow.gui.About;
import ghm.follow.gui.Clear;
import ghm.follow.gui.ClearAll;
import ghm.follow.gui.Close;
import ghm.follow.gui.Debug;
import ghm.follow.gui.Delete;
import ghm.follow.gui.DeleteAll;
import ghm.follow.gui.DndFileOpener;
import ghm.follow.gui.Edit;
import ghm.follow.gui.Exit;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.FollowAppAction;
import ghm.follow.gui.Menu;
import ghm.follow.gui.ComponentBuilder;
import ghm.follow.gui.Open;
import ghm.follow.gui.Pause;
import ghm.follow.gui.PopupMenu;
import ghm.follow.gui.Reset;
import ghm.follow.gui.StartupStatus;
import ghm.follow.gui.TabbedPane;
import ghm.follow.gui.ToolBar;
import ghm.follow.gui.FollowAppAction.ActionContext;
import ghm.follow.nav.Bottom;
import ghm.follow.nav.NextTab;
import ghm.follow.nav.PreviousTab;
import ghm.follow.nav.Top;
import ghm.follow.search.ClearAllHighlights;
import ghm.follow.search.ClearHighlights;
import ghm.follow.search.Find;
import ghm.follow.search.SearchableTextPane;
import ghm.follow.systemInterface.DefaultSystemInterface;
import ghm.follow.systemInterface.SystemInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FollowApp}.
* It contains one unit test case for the {@link FollowApp#getIcon(Class, String)} method.
*/
class FollowAppTest {","// FollowAppTest.java
package ghm.follow;

import ghm.follow.config.Configure;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.event.WindowTracker;
import ghm.follow.gui.About;
import ghm.follow.gui.Clear;
import ghm.follow.gui.ClearAll;
import ghm.follow.gui.Close;
import ghm.follow.gui.Debug;
import ghm.follow.gui.Delete;
import ghm.follow.gui.DeleteAll;
import ghm.follow.gui.DndFileOpener;
import ghm.follow.gui.Edit;
import ghm.follow.gui.Exit;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.FollowAppAction;
import ghm.follow.gui.Menu;
import ghm.follow.gui.ComponentBuilder;
import ghm.follow.gui.Open;
import ghm.follow.gui.Pause;
import ghm.follow.gui.PopupMenu;
import ghm.follow.gui.Reset;
import ghm.follow.gui.StartupStatus;
import ghm.follow.gui.TabbedPane;
import ghm.follow.gui.ToolBar;
import ghm.follow.gui.FollowAppAction.ActionContext;
import ghm.follow.nav.Bottom;
import ghm.follow.nav.NextTab;
import ghm.follow.nav.PreviousTab;
import ghm.follow.nav.Top;
import ghm.follow.search.ClearAllHighlights;
import ghm.follow.search.ClearHighlights;
import ghm.follow.search.Find;
import ghm.follow.search.SearchableTextPane;
import ghm.follow.systemInterface.DefaultSystemInterface;
import ghm.follow.systemInterface.SystemInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FollowApp}.
* It contains one unit test case for the {@link FollowApp#getIcon(Class, String)} method.
*/
class FollowAppTest {
// FollowApp.java
package ghm.follow;

import ghm.follow.config.Configure;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.event.WindowTracker;
import ghm.follow.gui.About;
import ghm.follow.gui.Clear;
import ghm.follow.gui.ClearAll;
import ghm.follow.gui.Close;
import ghm.follow.gui.Debug;
import ghm.follow.gui.Delete;
import ghm.follow.gui.DeleteAll;
import ghm.follow.gui.DndFileOpener;
import ghm.follow.gui.Edit;
import ghm.follow.gui.Exit;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.FollowAppAction;
import ghm.follow.gui.Menu;
import ghm.follow.gui.ComponentBuilder;
import ghm.follow.gui.Open;
import ghm.follow.gui.Pause;
import ghm.follow.gui.PopupMenu;
import ghm.follow.gui.Reset;
import ghm.follow.gui.StartupStatus;
import ghm.follow.gui.TabbedPane;
import ghm.follow.gui.ToolBar;
import ghm.follow.gui.FollowAppAction.ActionContext;
import ghm.follow.nav.Bottom;
import ghm.follow.nav.NextTab;
import ghm.follow.nav.PreviousTab;
import ghm.follow.nav.Top;
import ghm.follow.search.ClearAllHighlights;
import ghm.follow.search.ClearHighlights;
import ghm.follow.search.Find;
import ghm.follow.search.SearchableTextPane;
import ghm.follow.systemInterface.DefaultSystemInterface;
import ghm.follow.systemInterface.SystemInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class' main() method is the entry point into the Follow application.
 *
 * @see #main(String[])
 * @author <a href=""mailto:greghmerrill@yahoo.com"">Greg Merrill</a>
 */
public class FollowApp {

    public static ImageIcon getIcon(Class<?> clazz, String iconNameKey) {
        String filename = getResourceString(iconNameKey);
        URL url = clazz.getResource(filename);
        LOG.finer(""Class: "" + clazz + "", iconNameKey: "" + iconNameKey);
        LOG.finer(""filename: "" + filename);
        LOG.finer(""url: "" + url);
        ImageIcon icon = null;
        if (url!= null) {
            icon = new ImageIcon(url);
            LOG.finer(""errored: "" + (java.awt.MediaTracker.ERRORED == icon.getImageLoadStatus()));
        }
        return icon;
    }
}

// FollowAppTest.java
package ghm.follow;

import ghm.follow.config.Configure;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.event.WindowTracker;
import ghm.follow.gui.About;
import ghm.follow.gui.Clear;
import ghm.follow.gui.ClearAll;
import ghm.follow.gui.Close;
import ghm.follow.gui.Debug;
import ghm.follow.gui.Delete;
import ghm.follow.gui.DeleteAll;
import ghm.follow.gui.DndFileOpener;
import ghm.follow.gui.Edit;
import ghm.follow.gui.Exit;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.FollowAppAction;
import ghm.follow.gui.Menu;
import ghm.follow.gui.ComponentBuilder;
import ghm.follow.gui.Open;
import ghm.follow.gui.Pause;
import ghm.follow.gui.PopupMenu;
import ghm.follow.gui.Reset;
import ghm.follow.gui.StartupStatus;
import ghm.follow.gui.TabbedPane;
import ghm.follow.gui.ToolBar;
import ghm.follow.gui.FollowAppAction.ActionContext;
import ghm.follow.nav.Bottom;
import ghm.follow.nav.NextTab;
import ghm.follow.nav.PreviousTab;
import ghm.follow.nav.Top;
import ghm.follow.search.ClearAllHighlights;
import ghm.follow.search.ClearHighlights;
import ghm.follow.search.Find;
import ghm.follow.search.SearchableTextPane;
import ghm.follow.systemInterface.DefaultSystemInterface;
import ghm.follow.systemInterface.SystemInterface;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FollowApp}.
* It contains one unit test case for the {@link FollowApp#getIcon(Class, String)} method.
*/
class FollowAppTest {
		// Constants --------------------------------------------------------------

		// Static --------------------------------------------------------------
		/** For testing purposes only. */
		static final String TESTMENU = ""FollowAppTest"";
		/** For testing purposes only. */
		static final String TESTDATA = ""DataForTesting"";

		// Class Data --------------------------------------------------------------

		// Variables --------------------------------------------------------------

		// Instance Data ---------------------------------------------------------------

		// Constructors --------------------------------------------------------------

		// Static --------------------------------------------------------------

		// Constructors --------------------------------------------------------------

		/**
		* Default Constructor.
		*/
		public FollowAppTest() {
			LOG.finer( ""Initializion"" );
		}
		/**
"
