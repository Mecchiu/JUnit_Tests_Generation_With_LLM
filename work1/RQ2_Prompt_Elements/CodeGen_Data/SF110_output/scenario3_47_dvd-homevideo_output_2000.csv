ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
3c35e403-9d68-41d5-81bc-6553e3f0cce3,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Burn.java,65.55652070045471,stop,"// Burn.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author Shane Santner
 * This class burns the DVD file structure previously created by
 * dvd-author to a DVD disc.
 */
public class Burn {

    /**
     * Optionally burn to DVD when complete and no errors, uses growisofs
     *
     * @param DVD_GUI This is the GUI object used to control the form
     * return   A boolean to determine if an error occurred in the function
     */
    public boolean BurnToDVD(GUI DVD_GUI);
}
","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains one unit test case for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains one unit test case for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {

    /**
     * @param args the command line arguments
     */
		public static void main(String[] args) {
			System.setProperty(""javax.imageio.spi.legacy.ClassLoaderUtil"", ""org.junit.jupiter.api.extension.ConditionStackUtil$LocalClassLoaderUtil"");
    }

	/**
	 * This method is called before any other test code may be run
	 *
	 * @param args command line arguments
	 */
		@Test
		public void BurnSetup(String[] args) {

		}

	/**
	 * This method is called after executing the main
	 * teardown and zero exceptions
	 */
		@Test
		public void BurnTestComplete() throws IOException {

		}
}
"
a1dfc508-2703-43f4-bfd6-0f6dd0a92db9,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_0Test.java,57.79612350463867,stop,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init();
}
","// Menu_0Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains one unit test case for the {@link Menu#init()} method.
*/
class Menu_0Test {","// Menu_0Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains one unit test case for the {@link Menu#init()} method.
*/
class Menu_0Test {

	/**
	* Test with a background picture created
	*
	* @throws java.io.IOException
	*/
	@Test
    public void test01() throws IOException {
        try {
			BufferedWriter tmp = new BufferedWriter(new FileWriter(""menu_test""));
			tmp.write(""Title 0 test"");
			tmp.newLine();
			tmp.newLine();
			tmp.write(""Title 0 test"");
		try {
			tmp.flush();
		} catch (IOException e) {
			assertEquals(
				""Error writing into a file"",
				e.getMessage());
		}
		// Test default background file.
		tmp.write(""Title 0 test"");
			tmp.newLine();
			tmp.flush();
		tmp.write(""Title 0 test"");
		tmp.flush();
        } catch (FileNotFoundException e) {
			assertTrue(
				""Menu does not contain the correct title 0 test"",
				false);
		}
	}
	
	/**
	* Builds a menu from a set of titles
	*
	* @param titles The set of titles to create
	*/ 
	public void buildMenu(String[] titles) throws IllegalArgumentException, NullPointerException {
        
		// Create our menu object
		File file = new File(""menu_test"");
		Menu m;
		
		// Build a menu object
		InputStreamReader isr =
			new InputStreamReader(
                new FileInputStream(""menu_test_isr""));
        BufferedReader rdr =
            new BufferedReader(isr);
        String line;
        
		// Read until we stop reading
		while ((line = rdr.readLine())!= null) {
			// Add a new line to the menu object
            m = new Menu();
            
            // Use the last line of the header and set the correct title 0
			//for each title and add a new line to the menu object
			StringTokenizer st = new StringTokenizer(line);
			while (st.hasMoreTokens()) {
				String title = st.nextToken();
				
				st = new StringTokenizer(title);
				int titleID = Integer.parseInt(st.nextToken());
				String titleTitle0 = st.nextToken();
				int titleVolume0 = Integer.parseInt(titleTitle0);

				// Check if title ID is valid
                if (this.isValidTitleID(titleID)) {
                    m.addTitle(titleID, titleTitle0, titleVolume0);
				} else {
					System.out.println(""Invalid title ID"");
					assertEquals(
						""Invalid title ID"",
						0,
						titleID);				
				}
				
			}
			m.buildMenu();
			
			// Check if we have a menu object
			file = m.getMenuFile();
			System.out.println(""Menu file is "" + file);
			
			if (file.exists()) {
                m.setTitleID(0, null, 0);
			} else {
				System.out.println(""Error: Missing menu file for "" +
                		""title ID = 0"");
				assertEquals(
					""Menu object does not contain a title 0 text!"",
					0,
					0);
			}
			
		}
		
        assertTrue(""No exception"", true);
	}
        
        /**
	* Tests if a title ID falls within a valid range.
	* Does so by checking if one of the three is an even digit
	*/
	private boolean isValidTitleID(int titleID) {
                    
		// Test if title ID is a digit
                if (titleID < 0 || titleID >= 10) {
                    System.out.println(""Title ID out of range"");
                    assertTrue(
                        ""invalid title ID"", false);
                }
                
                // Test if the fourth digit is an even integer
		int volumeInt = titleID
                    * 256
                    + (titleID / 256)
                    * 256
                    + (titleID / 256)
                    * 256
                    ;
		if (!(volumeInt % 10 == 0)) {
                    System.out.println(""odd"");
		}
		return true;
	}
	
}"
4c1ff984-9061-435a-8fae-ccf89ca44fc8,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_1Test.java,57.552286863327026,stop,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Creates the xml file to pass to dvdauthor
     *
     * @param m_GUI This is the GUI object used to control the form
     */
    public boolean createXML();
}
","// Menu_1Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains one unit test case for the {@link Menu#createXML()} method.
*/
class Menu_1Test {","// Menu_1Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains one unit test case for the {@link Menu#createXML()} method.
*/
class Menu_1Test {

	// Method to create xml file
	
	public boolean createXML() throws FileNotFoundException, FileAccessException {
		
		// Write out xml
		
		try {
			writeXML();
																					
		} catch (IOException io) {
			System.out.println(""IO Exception occured...""); io.printStackTrace();
		}
								 
		System.out.println(""Test completed"");
		
		return true;
	}
	
	// Method to write out the xml
	
	public void writeXML() throws IOException {
				
		// Get dvdauthor inputstream		
				
		File dvdauth = new File(""dvdauthor.in"");
				
		// Get dvdauthor outputstream		
		
		FileWriter fo = new FileWriter(""out""+"".html"");
				
		// Write out xml
		FileInputStream fi = new FileInputStream(dvdauth);
		File file = new File(dvdauth.getParent()+""/""+dvdauth.getName().replace("".in"", "".html""));
		BufferedInputStream bis = new BufferedInputStream(fi);
		BufferedOutputStream bo = new BufferedOutputStream(fo);
				
		// Close stream
		 
		bo.close();
		
		// Close file
		
		bo.close();
		fi.close();
		
		
		System.out.println(""Write out xml Success"");
	}
		  
	
	// Test for method ""void Menu_1Test()""
	// Test for method ""void addVideo(""int,String,boolean)...""
	@Test public void test1() {
		System.out.println(""Test 1"");
		int video1 = 12345;
		String title1 = ""Title of first video clip"";
		boolean isLast = true;
		
		StringTokenizer st = new StringTokenizer(title1,""_"");
		while (st.hasMoreTokens()) st.nextToken();
		String videoclip = """";
		
		for (int i=0;i<st.countTokens();i++) videoclip += st.nextToken();
		
		MenuItem item = new Menu_1TestItem();
		Menu.addVideo(video1,videoclip,isLast,item);
		
		String output = menu1(""VIDEO"",item);
	   	assertEquals(""Return value of menu1 does not match video1"", menu1(item,new String[]{""VIDEO"",videoclip},isLast,item),output);
		assertEquals(""Return value for addVideo"", menu1(item, new String[]{""VIDEO"",videoclip,isLast},isLast,item),output);
	}
	
	

	public void test2() throws FileNotFoundException, IOException, ClassNotFoundException{
				
		String xmlFileName = new File(""xmlFileName"").toString();
		File file = new File(xmlFileName);
		
		// Write out the Xml File
		
		FileInputStream fi = new FileInputStream(file) ;
		FileWriter fo = new FileWriter(""out""+"".html"");
		
		// Write out the Xml File
		
		BufferedInputStream bis = new BufferedInputStream(fi);
		
		String xml = getXML(bis, fo);
		
		// Clean up		
		
		fi.close();
		
		
		System.out.println(""Test 2"");
		
	}

	/**
	 * This is the method name used in the menu.xml
     *
	 * @param is InputStream created from a BufferedInputStream
	 * @return InputStream generated from buffered file
	 *
	 */
    
    protected InputStream getXML(InputStream is, FileOutputStream fo) throws FileNotFoundException, IOException {
	BufferedInputStream bis = new BufferedInputStream(is) ;
        FileInputStream fi = new FileInputStream(fo) ;
        File xml = new File(""Menu_xmlFileName.nfo"");
        
        // Write the title to the FileOutputStream
	  
	  BufferedWriter bw = new BufferedWriter(
	    new FileWriter(xml.getAbsolutePath())) ;
	  
	  bw.write(bw.getBuffer()+""</doc>"");
	  bw.close() ;
        bw = null;
	  
        // Now write out the menu content
        
	  String s = getXML(bis,fo);
        
	  return new ByteArrayInputStream(s.getBytes(),""UTF-8"",""menu"" ) ;
    }
    
	public String getXML(InputStream is) throws FileNotFoundException, IOException{
		return getXML(is,null);
	}
    
	
		
		
	// Test for method ""void Menu_1Test()""
	// Method: addVideo(""java.lang.String,java.lang.String,boolean)...""
	
	
	public void test4() throws FileNotFoundException, IOException, ClassNotFoundException{
		String xmlFileName = new File(""menu.xml"").toString();
		
	File menu = new File(xmlFileName);
	
	String xml = getXML(new FileInputStream(menu),null);
	
	assertEquals(""Return value for getXML:  menu.xml does not match menu content"", menu.getAbsolutePath(), xml);
	}

}
"
9b890555-3cb8-461d-bc1c-eb3a2e26c0dc,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Author.java,58.36708903312683,stop,"// Author.java
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;

/**
 * @author Shane Santner
 * This class create the DVD filesystem that will be burned
 * to disc.
 *
 * TODO - Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Author {

    /**
     * Create a DVD filestructure necessary to play in dvd player using dvdauthor
     *
     * @param DVD_GUI This is the GUI object used to control the form
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean CreateDVDFileStructure(GUI DVD_GUI);
}
","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains one unit test case for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains one unit test case for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {
/**
		* Constructs a test cases of {@link Author#CreateDVDFileStructure(GUI)}
		* @throws IOException when the test fails
		*/
    public static void TestCase() throws IOException {
		try{
			GUI myGUI = new Author(new File(""User""), ""0.000.004.008"", 2);
			System.out.println(myGUI);
			assertEquals(0,myGUI.Get_Index());

			myGUI = new Author(new File(""User""), ""0.000.004.008"", 1000);
			System.out.println(myGUI);
			assertEquals(0,myGUI.Get_Index());
			}
			catch(IllegalArgumentException e){ System.err.println(""Illegal Argument Exception: "" + e.getMessage());  }
			catch (InterruptedException e) {
				System.err.println(""Unexpected Interrupted Exception: "" + e.getMessage());
			}
	}
}



"
41451545-5fd8-4aff-8f2f-99e50fdcacf2,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Capture.java,58.67262029647827,length,"// Capture.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 * @author Shane Santner
 * The Capture class utilizes dvgrab to capture audio and video
 * data from a dv camcorder.  It captures for the amount of time
 * specified by the user.
 *
 * TODO - Is there a way to get the camcorder time from dvgrab?
 *        This would be a more accurate way of determining when
 *        to stop the camcorder.  Also need to handle input, output
 *        and error streams more appropriatly.
 */
public class Capture implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init();
}
","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains one unit test case for the {@link Capture#init()} method.
*/
class CaptureTest {","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains one unit test case for the {@link Capture#init()} method.
*/
class CaptureTest {

	/**
	 * Default constructor
	 */
	CaptureTest() {
	}

	/**
	 * Tests if the function returns a success value between 0 and 1
	 * on the expected value and 1 on the actual value. 
	 */
	@Test
	public void testCapture() throws IOException {
		

		// Read sample file
		String samplePath = ""/Users/sam.kord/Downloads/MyDVD/Sample.txt"";
		File sampleFile = new File(samplePath);
			
		// Create files
		BufferedWriter outFile = new BufferedWriter(new FileWriter(sampleFile.getPath()));
		BufferedWriter outVideoFile = new BufferedWriter(new FileWriter(""/Users/sam.kord/Downloads/MyDVD/Media2""));
		BufferedWriter outAudioFile = new BufferedWriter(new FileWriter(""/Users/sam.kord/Downloads/MyDVD/Media1""));
		BufferedWriter errStream = new BufferedWriter(new FileWriter(""/Users/sam.kord/Downloads/MyDVD/error""));
		outVideoFile.write(sampleFile.getPath());
		outVideoFile.write(""\n"");
		outAudioFile.write(sampleFile.getPath());
		outAudioFile.write(""\n"");
		outStream.write(""\n"");
		outStream.write("""");
		
		// Capture
		this.init();
		
		
		
		// Get number of frames
		int frames = 0;
		
		// Read the input file
		File f = new File(""/Users/sam.kord/Downloads/MyDVD/Media2"");
		FileInputStream fin = new FileInputStream(f);
		String line;
		
		// Read the header line from the input file
		do {
			line = fin.readLine();
			
		}
		while(this.getError() &&!line.equals(""""));
				
		// Skip the header to the end
		while(!fin.readLine().equals(""""));
		
		frames = Integer.parseInt(line.substring(7).trim());
		
		if (this.getError()) {
			// Failed to read the number of frames to read, so show the error message.
			System.err.println(JOptionPane.showMessageDialog(null, ""Error read"", ""Error"", JOptionPane.ERROR_MESSAGE));
			
			// Show the error messages as well
			System.err.println(this.getErrors());
			this.getErrors();
			
		
		}
		
		// Close the streams
		fin.close();
		
		// Close the streams
		outFile.close();
		outVideoFile.close();
		outAudioFile.close();
		
		if (this.getError()) {
			// Show the error messages as well
			System.err.println(this.getErrors());
			this.getErrors();
		}

		if (frames > 100) {
			// Should be able to read every frame
			this.getVideoCapture();
		} else {
			// Reads every frame of more than 100 ms
			// This may happen if the video doesn't have enough frames to read 
			// from it.  Read 100 ms to see if we could read as many as possible.
			this.getVideoCapture();
		}
		
		// Wait for the capture done function
		int loop = 0;
		
		while (loop < 1000) {
			boolean done = this.getVideoCapture();
			
			
			if (this.getError()) {
				if (!done) {
					System.err.println(System.currentTimeMillis() + "" error"");
					this.getErrors();
					System.err.println(System.currentTimeMillis() + "" error"");
				}
			}
			
			if (done) {
				System.out.println(System.currentTimeMillis() + "" successfully read"");
				break;
			}
			
			while(System.currentTimeMillis() < 10000) {
				this.getVideoCapture();				
			}
			
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}
			
			loop++;
		}
		
		this.getVideoCapture();
	}
	
	/**
	 * @return
	 */
	public boolean getError() {
		BufferedReader err = null;
		BufferedReader out = null;
		BufferedWriter errStream = null;
		
		// Wait for the output stream
		
		try {
			out = new BufferedReader(new InputStreamReader(System.in));
			throw new Exception(""Stopped waiting"");
		} catch (FileNotFoundException e) {
			System.err.println(e);
	    } catch (IOException e) {
			System.err.println(e);
			throw new RuntimeException(e);
		} catch (Exception e) {
			System.err.println(e);
			throw new RuntimeException(e);
		}

		try {
			err = new BufferedReader(new InputStreamReader(System.in));
			throw new Exception(""Stopped waiting"");
		} catch (FileNotFoundException e) {
			System.err.println(e);
	    } catch (IOException e) {
			System.err.println(e);
			throw new RuntimeException(e);
		} catch (Exception e) {
			System.err.println(e);
			throw new RuntimeException(e);
		}
		
		try {
			errStream = new BufferedWriter(new FileWriter(""/Users/sam.kord/Downloads/MyDVD/error""));
		} catch (FileNotFoundException e) {
			System.err.println(e);
	    } catch (IOException e) {
			System.err.println(e);
	    } catch (Exception e) {
			System.err.println(e);
			throw new RuntimeException(e);
		}
		
		while (true) {
			if (err.skipLine().equals("""")) {
				break;
			}
			
			if (!err.readLine().equals("""")) {
				return true;
			}
		}
		
		if (out.skipLine().equals("""")) {
			return false;
		}
		
		System.err.println(""Stopped reading file: "" + out.skipLine());
		
		try {
			errStream.write(out.skipLine());
			
			String errLine;
			if (!err.readLine().equals(""ERROR:"")) {
				errLine = err.readLine();
			}

				
		} catch (Exception e) {
			System.err.println(e);
			"
b561f8a9-9938-4d80-999c-5e5d049e08dc,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_0Test.java,56.71568775177002,length,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules();
}
","// GUI_0Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#checkForModules()} method.
*/
class GUI_0Test {","// GUI_0Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#checkForModules()} method.
*/
class GUI_0Test {
 static public final boolean checkForModules();
        public static boolean m_stop;
		static public final String m_dvdPath = ""/home/visha9/Desktop/DVD/"";
		static public final String m_videoPath = ""/home/visha9/Desktop/TV/"";

		public static void main(String args[]) throws java.io.IOException {
			System.out.println(""\nTest class of "" + java.lang.System.getProperty(""os.name"") + "": ""
					+ java.lang.System.getProperty(""os.version""));
            if (m_stop) {
				return;
			}

            // Create a new video recorder and install into our system wide instance
            JFileChooser fd = new JFileChooser();

            // Show the dialog box asking for a path to a user provided
            // file.
			fd.setFileFilter(new FileFilter() {
				private String[] filters = {""*.dv"", ""*.avi"", ""*.tvi""};
                public boolean accept(final File file) {
					// return true if the file is a.dv file OR if it is a 
					//.avi file OR if the file is a.tif file
					try {
						int m = 0;
						for (int i = 0; i < filters.length; i++) {
							String extension = filters[i];
							if (file.getName().endsWith(extension)) {
								m++;
								if (m == filters.length || filesAreEqual(file, file.getParentFile(), ext)) {
									return true;
								}
							}
						}
						return false;
					} catch (Exception e) {
						return false;
					}
				}
				void getExtensions(String[] result) {
					// Result contains the.dv,.avi, and.tif files that should be 
					// included in result[]
					for (int i = 0; i < filters.length; i++) {
						String extension = filters[i];
						if (extension.endsWith("".dv"")) {
							result[i] = ""dv"";
						} else if (extension.endsWith("".tvi"")) {
							result[i] = ""tvi"";
						}
						System.out.println(""Result File Name: "" + result[i]);
					}
				}
	            }
            );

            File filterFile = null; // the file that is to be browsed
	        if (m_dvdPath.contains(""/home/visha9/"") 
	                && fd.showOpenDialog() == JFileChooser.APPROVE_OPTION) {
                filterFile = fd.getSelectedFile();
	        }
	        File filterFileVideo = null;
	        if (m_dvdPath.contains(""/home/visha9/"") 
	                && filterFileVideo = fd.getSelectedFile()) {
                System.out.print(""The video drive "" + m_dvdPath + "" is detected!! "");
	        } else if ((m_dvdPath.contains(""/home/visha9/"") 
	                        && filterFile = fd.getSelectedFile())) {
                System.out.print(""The video drive "" + m_dvdPath + "" is detected!! "");
        } else {
            System.out.print(""There is no video "" + m_dvdPath + "", yet!"");
			System.out.println(""This is an input argument that needs manual selection."");
            }

            if (filterFile == null) {
                // use default path for *.avi files
                filterFileVideo = new File(m_dvdPath);
                // check if the file is available from the system wide instance
                // or not.
                if (!filterFile.exists() || fileExists(filterFile)) {
                    throw new Exception(""File "" + filterFile + "" is not a valid dv file!"");
                } else {
                    System.out.println(""File "" + filterFile + "" is a valid dv file."");
                }
            }
			try {
				// open our JFileChooser object and specify a mode.
				fd.setSelectedFile(filterFile);
				// we have to be carefully careful with this because the appends
				// will change the case of the filepath, so the check below won't
		            // work correctly in this case.
				//JFileChooser cho = new
		            //JFileChooser(""/home/visha9/Desktop/TV/"");
			        fd.setFileFilter(new FileFilter() {
					public boolean accept(File f) {
						return fd.getFileFilter().accept(f);
					}

					public String getDescription() {
						return ""dv files (*.dv), avi files (*.avi), and tvi files (*.tvi)"";
					}
				});
			} catch (FileNotFoundException e) {
				System.out.println(""File Not Found: "" + e.getMessage());
				String exceptionMessage = e.getClass().getName() + "" - "" + e.getMessage();
				System.out.println(exceptionMessage);
				// System.out.println(""Exception message: "" + exceptionMessage);
				// check for a better exception based on the filter.
				throw new Exception(exceptionMessage);
			}

            // make sure the user didn't hit cancel when we had no other choice.
            if (m_stop) {
            	return;
            }

            Message m = new Message();
			// make sure the file and video are ready for testing
			m.addResponse();
			// send the test message
			m.request(new byte[]{0});
		        // wait for the message to be returned
		        mj = this.readResponse();
		        String response = """";
		        switch (mj.getResponse_type()) {
			      case 0: // success
				    break;
			      case 1: // Error
				    System.out.println(""Error occurred (Error: "" + mj.getValue() + "")"");
				    break;
			      case 2: // No Response
				    System.out.println(""No Response has been received"");
				    break;
			}
		        response = mj.response();
		        if(response == null) {
			  		// TODO: The code below will not work in any of the environments
			  		//	   the message system is currently in-built
		"
55e62ae4-5c28-445a-a56b-42f73890b1ef,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_1Test.java,57.29108142852783,stop,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Displays a message box with the supplied text and yes/no options
     *
     * @param message The message to display in the box
     */
    public int MessageBox(String message);
}
","// GUI_1Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#MessageBox(String)} method.
*/
class GUI_1Test {","// GUI_1Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#MessageBox(String)} method.
*/
class GUI_1Test {
public GUI_1Test() {
			
		}
        /**
        * Run a test case for the
     * {@link GUI#MessageBox(String)} method.
     */
	
	
        @Test
        public void showMessage() {
            try {
                String message = ""Error 1"";
                GUI.MessageBox(message);
                assertTrue(""Message should not be blank: "" + message, message!= """");
            } catch (Exception e) {
                fail(""Error 1; "" + e.getMessage());
            }
        }
        @Test
        public void editMessage() throws Exception {
            File editedFile = File.createTempFile(""EditMsg"", ""txt"");
            String message = ""Error 2"";
            try {
                GUI.MessageBox(message, editedFile, ""txt"", ""error"");
            } catch (Exception e) {
                fail(""Error 2; "" + e.getMessage());
            }
            
            try {
                GUI.MessageBox(message);
            } catch (Exception e) {
                fail(""Error 2 cannot edit message"");
            }
        }
	
        @Test
        public void createEditor() throws Exception {
            File editedFile = File.createTempFile(""EditMsg"", ""txt"");
            String message = ""Error 3"";
            
            try {
                GUI.MessageBox(message, editedFile, ""txt"", ""edit"");
            } catch (Exception e) {
                fail(""Error 3; "" + e.getMessage());
        }
            
            try {
                GUI.MessageBox(message);
            } catch (Exception e) {
                fail(""Error 3 cannot edit message"");
            }
        }

        @Test
        public void find() throws Exception {
            File editedFile = File.createTempFile(""FindEdit"", ""txt"");
            String message = ""Error 4"";
            
            checkFile(message);

            
            try {
                GUI.find(message, true);
            } catch (Exception e) {
                fail(""Error 4 should not happen"");
            }
            
            try {
                GUI.find(message, false);
            } catch (Exception e) {
                fail(""Error 4 should not happen"");
			}
		}

        /**
        *
        * FileFilter for text and dvd
     */
	
    static final String[] FILTERS = {File.separator + ""*.txt"",
                                    ""-.dv""};
    
    /** Creates a file with files.
     */
    private void checkFile(String message) throws FileNotFoundException {
        
        String fileName = ""fileName"";
        byte[] fileByte = message.getBytes();
        File f = new File(fileName);
        BufferedWriter out = new BufferedWriter(new FileWriter (f));

        for (String filter : FILTERS) {
            FileFilter[] filters = f.getFileSystem().getFileObjects
            (new FileFilter [] {new FileFilter()});
            for (FileFilter filter1 : filters) {
                if (filter == """" || filter1.accept(f) == false) {

                    //System.err.println(""File Name is "" + fileName);
                    out.write(fileName);
                    out.write("" "");
                    out.write(message);

                    out.newLine();
            
                    out.close();
                    
                    while (! out.checkCanceled())
                        out = new BufferedWriter(new FileWriter (f));
                    
                }
            }
        }
        out.close();
    }
}

"
23713cbe-91cb-47a0-9cd7-164097435e65,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_2Test.java,56.70082497596741,length,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Check dvd-homevideo for runtime errors
     *
     * @param fileName This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName);
}
","// GUI_2Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#ErrorCheck(String)} method.
*/
class GUI_2Test {","// GUI_2Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains one unit test case for the {@link GUI#ErrorCheck(String)} method.
*/
class GUI_2Test {
/**
		 * This method performs a quick test checking for runtime errors.
		 * @param name The string where a tokenizer can be added to the
		 * filename to have to be verified. This can be used to check the
		 * string passed as parameter
		 * @throws FileNotFoundException The exception is thrown when a file
		 * could not be found.
		 */
    @Test
    void ErrorCheck(String name) throws FileNotFoundException {
        System.out.println(""Test: ErrorCheck"");

        // Add a tokenizer to the name argument to validate 
        // the tokenized string
        StringTokenizer st = new StringTokenizer(name, "" "", true);
        
        // Create a new instance of the test class to be created
        // and create a new JOptionPane on the class.
        GUI err;
        try {
            // Open the error checking dialog. This should return the 
            // appropriate dialog
            err = new GUI(""Error"");
            
            // Get the dialog
            // The error checking dialog is now set to the test class, 
            // so we call its ""show"" method on it. This will attempt to 
            // create the appropriate dialog, and show it for the test.
            err.showDialog();
            
            // Get the dialog size
            JOptionPane op;
            op  = err.getOptionPane();
        } catch (Exception e) {
            // Test that an exception is thrown when the dialog was 
            // created
            System.err.println(""Caught exception"");
            e.printStackTrace();
            throw e;
        }
                
        // Check if error is encountered already in the test case
        if(err.ErrorCheck(st.nextToken()) == false)
            fail(""Error not detected!"");

        return;
    }

	/**
	 * Checks if there are errors in the test case. If there are, an
	 * instance of the JOptionPane will not be displayed, the dialog should
	 * be closed.
	 * @return The boolean that indicate the test case is done.
	 */
	public boolean ErrorCheck() {
		System.out.println(""Test: ErrorCheck"");

		// Add a tokenizer to the name argument to get the dialog size
		StringTokenizer st = new StringTokenizer(GUI.class.getName(),"" "",true);
		StringTokenizer st2 = new StringTokenizer(GUI_2Test.class.getName(),"" "",true);

		return(st.nextToken().charAt(0)=='1') && (st2.hasMoreTokens()==false);

	}
    
    /**
* Constructor of main.
*/ 
    public GUI_2Test() {
      super();
        // Create a file chooser
        JFileChooser fc = new JFileChooser("""");
        
        try {
            // Set the chooser filename. This is the path where the test
            // will be run.
            String filename =
                   ""../Test_"";
            fc.setCurrentDirectory(new File(filename));

            // Save the filechooser
            FileDialog fd = new FileDialog(fc, ""Set test directory"");
            
            // Initialize the file name to be used.
            String dir = fc.getSelectedFile().getAbsolutePath();
            fd.setDirectory(dir);
            
            // Initialize the file chooser
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            
            fc.setSelectedFile(fd.getSelectedFile());
            
        } catch (Exception e) {
        	e.printStackTrace();
            fail(""Can not set the chooser with the test."");
        }
	}

//  Main
   public static void main(String args[]) { 
  
   String input = """";
   GUI_2Test gui = new GUI_2Test();
       
   // Create a log file to display when the tests is run
   BufferedWriter rw = new BufferedWriter(new FileWriter( ""gui_2test_log.txt"",""1252""));

       
       // Create a file for the file-name argument
   String fileName = ""gui_2test_log.txt"";
 
       
       // Add a line
       try {
        input = ""Hello, World!"";
       } catch (Exception e) {
      	    e.printStackTrace();
       }    
   }

}



// class GUIs is a dummy class to help us create a setter
// and a getter for the test-case's attributes
class GUIs {

    public  GUIs(String name) {
        System.out.println(""Test: GUI is created: ""+name);
        name = name.replaceAll(""<"", """").replaceAll("">"", """");
        GUISetterGUIShouldBeCreated = true;
    }

    public  GUISetterGUIShouldBeCreated GUISetterGUIShouldBeCreated 
    { return GUISetterGUIShouldBeCreated;} 


    public static GuisetterGUIShouldBeCreated setterGUIShouldBeCreated
    (GUIs instance, boolean val ) {
        GUIs instance2 = new GUIs(instance.name);
        GUIs.setterGUIShouldBeCreated = instance2;
        GUISetterGUIShouldBeCreated = val;
        return GUIs.setterGUIShouldBeCreated;
    }

    public static void main(String args[]) {

       GUIs.GUISetterGUIShouldBeCreated GUISetterGUIShouldBeCreated = false;
       GUI_2Test GUi = GUIs.GUI(GUISetterGUIShouldBeCreated);
       
       if (GUi.ErrorCheck()== false)
       {
      	  JOptionPane jp = new JOptionPane();
      	  
	  	  jp.setTitle(""Log In"");   
	  	  JPanel jp2 = new JPanel(null);
	  	  jp2.add(Gui.GUI_2Test.class.getSimpleName());
		
			int result = JOptionPane.showConfirmDialog(null, jp2, """",
		                                           JOptionPane.YES_NO_OPTION)  ;
                    System.out.println(result);
	      }
        System.out.println(GUi.ErrorCheck());
        System.exit(0); }


        


};

"
5b04e185-7c4f-4be0-8223-c4c3510312ee,/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Convert.java,58.60942220687866,stop,"// Convert.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class is used to transcode the video captured
 * from the digital camcorder into mpeg4, the DVD compatible
 * format.  It explicitly calls the transcode command
 * after meticulously preparing the options that can be passed
 * to transcode.
 *
 * TODO - Break mplex out into its own class.
 *        Figure out how to calculate remaining time even if
 *        video was not captured from the camcorder during the
 *        current session.
 *        Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Convert implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init();
}
","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains one unit test case for the {@link Convert#init()} method.
*/
class ConvertTest {","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains one unit test case for the {@link Convert#init()} method.
*/
class ConvertTest {

	// Constants 
	private final static int DEFAULT_DURATION = -1;
	private final static String DEFAULT_OUT_NAME = """";
	private final static String DEFAULT_IN_NAME = """";
	private final static int DEFAULT_QUALITY = 0;
	
	
	
	
	// Constructor 
    ConvertTest(){
		
	}//Constructor
	
	
	
    // Run tests:
    @Test
    public void test1() throws Exception{
        //System.out.print(""Testing a basic run of Convert"");
        //String inputFile = ""/Users/shansom/Documents/projects/M/Mplex/1.0/test/"";
        String inputFile = ""/Users/shansom/Documents/repos/hanoi1/Hanoi/test/"";
        System.out.print(""Testing the transcode command... "");
        Process convert = Runtime.getRuntime().exec(
            ""/usr/bin/convert -f "" + inputFile + "" -o "" + 
            new File(DEFAULT_OUT_NAME).getAbsolutePath() + "" "" +
            new File(DEFAULT_QUALITY));
        
        String output = """";
		
        BufferedReader reader = new BufferedReader(new InputStreamReader(convert, ""UTF-8""));
        
        boolean success = false;
        String line;
        
        while ((line = reader.readLine())!= null) {
            output += line + ""\n"";
        }
        
        
        inputFile = ""/Users/shansom/Documents/repos/hanoi1/Hanoi/test/"";        
		
        inputFile = inputFile+""video.m4a"";
		
        convert = Runtime.getRuntime().exec(
            ""/usr/bin/convert -f "" + inputFile + "" -o "" + 
            new File(DEFAULT_OUT_NAME).getAbsolutePath() + "" "" +
            DEFAULT_QUALITY);
        
        Thread.sleep(1500);
    
        success = false;
        boolean runOk = false;
        while (!success) {
            System.err.print(""Retry... "");
            try {
                Thread.sleep(400);
                //convert.waitFor();
                runOk = true;
            } catch (InterruptedException ie) {
            }
        	
            System.err.println();
            try {
                output = convert.read();
                //System.err.println(output.toString());
            } catch (InterruptedException e) {
            }
        	
            if (!runOk) {
                System.err.println();
                System.err.print(""Error: "");
                System.err.println(""\n"");
                System.err.println(inputFile + ""\n"");
                System.err.println(output.toString());
                System.exit(1);
            }//end success wait
        
            inputFile = ""/Users/shansom/Documents/repos/hanoi1/Hanoi/test/"";
        }//end sleep
        
        System.out.println(output.substring(0, output.length()-1));
        
        File convertedFile = new File(new File(inputFile).getAbsoluteFile().getParentFile() + ""/"" + 
        		new File(DEFAULT_OUT_NAME).getPath().substring(0, DEFAULT_OUT_NAME.length()) + "".m4a"");	
        output = new String(FileUtils.readFileBytes(convertedFile));  
        
        StringTokenizer tokenizer = null;
        String inputString = new String(output);
        
        tokenizer = new StringTokenizer(inputString, ""\n\r"");
        
        int outputLineNumber = 0;
        while (tokenizer.hasMoreTokens() && outputLineNumber < DEFAULT_QUALITY) {
			
			outputLineNumber++;
            System.err.print(""\nOutput found at line "" + outputLineNumber + "" of file "" + inputFile + "" = "" + outputString+ ""\n"");
                
            tokenizer.nextToken().replaceAll(""\"""", """");
			
		    System.err.println("""");
            tokenizer = null;
        }//end last loop

        /*
        try {
            OutputStream out = new FileOutputStream(new File(""/Users/shansom/Documents/repos/hanoi1/Hanoi/test/mplex.m4a""));
            out.write(""I am in the "" + inputFile + "". \n"" + ""\n"" );
            //OutputStream out = convert.getOutputStream();
        } catch (IOException e) {
            System.err.println(""Can't create "" + outputFile + "" from "" + inputFile + ""\n"" );
        }
        */
	}//end test1
	
	
	
	
	
	
	
	
	

}//end ConvertTest Class"
