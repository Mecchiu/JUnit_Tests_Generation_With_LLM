ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
a2422669-495a-4261-9c4b-772522eb6b42,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,49.59759330749512,length,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    /**
     * the game master should not use silent mode.
     * He has to know all results
     *
     * @return false
     */
    public boolean silent() {
        return false;
    }
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {

    InternalGmHeroFrameTest(String name) { }

    String getName(){ return ""InternalGmHeroFrameTest.java""; }

    void setSilent(boolean bool){}
    
    /**
    * Test class constructor of {@link InternalGmHeroFrame}.
    * @throws Exception any exception thrown by {@link InternalGmHeroFrame}
    */
    @Test
    public void constructor(){
    	final InternalGmHeroFrame frame = new InternalGmHeroFrame(""InternalGmHeroFrameTest"");
    	testName(frame,InternalGmHeroFrame.name());
    }

    /**
    * test {@link InternalGmHeroFrame#internalFrame()} method:
        no parent
        should return null
    */
    @Test
    public void internalFrame(){
    	final InternalGmHeroFrame frame = newInternalGmHeroFrame(""InternalGmHeroFrameTest"");
    	final JInternalFrame jfb = frame.internalFrame();
		testNull(jfb);
    }

    /**
	* test the other method of {@link InternalGmHeroFrame}
    * @throws Exception any exception thrown by {@link InternalGmHeroFrame}
    */
    @Test
    public void externalFrame(){
        final JInternalFrame jfb = newInternalGmHeroFrame(""UnknownFrame"");
        final Hero enemy = new Hero(""enemy"");
        final Hero player = new Hero(""player"");
        jfb.setSelected(player);
        assertSame(enemy, jfb.getModel().getSelected());
        jfb.setSelected(enemy);
        assertNull(jfb.getModel().getSelected());
        jfb.setSelected(player);
        assertNotNull(jfb.getSelected());
        jfb.setSelected(enemy);
        assertSame(enemy, jfb.getSelected());
        assertNull(jfb.getModel().getSelected());
        assertNull(jfb.tree.getSelectionModel().getLeadSelectionPath());
        assertEquals(""player"", frame.tree.getSelectionModel().getLeadSelectionPath());
    }

    /**
    * test the other method of {@link InternalGmHeroFrame}
    * @throws Exception any exception thrown by {@link InternalGmHeroFrame}
    */
    @Test
    public void nullSelection(){
		final InternalGmHeroFrame frame = newInternalGmHeroFrame(""UnknownFrame"");
		final JInternalFrame jfb = frame.internalFrame();
		assertNull(jfb.getSelected());
		assertSame(Hero.class, jfb.getModel().getSelected().getClass());
        assertNull(jfb.tree.getSelectionModel().getLeadSelectionPath());
    }
    
    private void assertEquals(JInternalFrame frame, JInternalFrame expectedJfb){
        assertEquals(expectedJfb.getName(), frame.getName());
        assertEquals(""InternalGmHeroFrame"", frame.getClass().getName());
        //assertEquals(null, frame.tree.getSelectionModel().getLeadSelectionPath());
        assertTrue(frame.getModel().equals(expectedJfb.getModel()));
        assertFalse(frame.getModel().isSelected());
        assertFalse(frame.getModel().isCollapsed());
        assertEquals(frame.tree.getSelectionModel(), expectedJfb.tree.getSelectionModel());
    }
    
    private JInternalFrame newInternalGmHeroFrame(String nam) {
        InternalGmHeroFrame frame = new InternalGmHeroFrame(nam);
        //System.out.println(""newInternalGmHeroFrame "" + nam);
        return frame;
    }

    private JInternalFrame newInternalGmHeroFrame(String nam, int min, int max) {
        InternalGmHeroFrame frame = newInternalGmHeroFrame(nam, min, max);
        //System.out.println(""newInternalGmHeroFrame "" + nam + "" -> "" + min + "".. "" + max);
        return frame;
    }

    private JInternalFrame newInternalGmHeroFrame(String nam, int min, int max,
            boolean isFullScreen) {
        InternalGmHeroFrame frame = newInternalGmHeroFrame(nam, min, max, isFullScreen);
        //System.out.println(""new InternalGmHeroFrame "" + frame);
        return frame;
    }

    private InternalGmHeroFrame newInternalGmHeroFrame(String nam, int min, int max,
            boolean isFullScreen, int extraSelection) {
        InternalGmHeroFrame frame = newInternalGmHeroFrame(nam, min, max, isFullScreen,
                extraSelection);
        //System.out.println(""newInternalGmHeroFrame "" + frame);
        return frame;
    }

    private JInternalFrame newInternalGmHeroFrame(String nam, int min, int max,
            boolean isFullScreen, int extraSelection,
            String initialSelection) {
        InternalGmHeroFrame frame = newInternalGmHeroFrame(nam, min, max, isFullScreen,
                extraSelection, initialSelection);
        //System.out.println(""newInternalGmHeroFrame "" + frame);
        return frame;
    }"
7c870a04-3e56-4626-93a2-00a4587d3cac,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java,59.875672340393066,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     *
     * @return the result as string
     */
    public String roll() {
        if (t != null)
            return rollTalent();
        if (attrib != null)
            return rollAttr();
        if (w != null) {
            return rollFight();
        }
        return "" missing Talent, Spell, ..."";
    }
}
","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {
// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     *
     * @return the result as string
     */
    public String roll() {
        if (t!= null)
            return rollTalent();
        if (attrib!= null)
            return rollAttr();
        if (w!= null) {
            return rollFight();
        }
        return "" missing Talent, Spell,..."";
    }
}

// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {
		
}

/**
 * Test class of Challenge_1Test.java
 * It contains one unit test case for the {@link Challenge_1#roll()} method.
*/
class Challenge_1Test {		
	/**
	 * Test that checks and rolls if the first unit is a talent
	 * @throws Exception - test fails with a random Exception.
	 */
	@Test
    public void testRoll() throws Exception
	{
		// test with a number of talents
		final int numTalents = 10+Math.abs(System.currentTimeMillis())%3;
		final Talent firstTalent 	= new Talent(""Talent""+System.currentTimeMillis(), numTalents, 0);
		final Talent secondTalent 	= new Talent(""Talent""+(System.currentTimeMillis()%3)+1, numTalents, 1);
		String r;
		rollTalent();
		switch(firstTalent.getAbility())
		{
			case Talent.ability_war :
			case Talent.ability_war_2 :
				r = ""fail"";
				break;
			default:
				r = ""succeed"";
		}
		//test with a number of attributes
		final int numAttributes = 10+Math.abs(System.currentTimeMillis())%3;
		final int indexOfAttribute 		=  Math.abs(System.currentTimeMillis()%3)+1;
		final Ability attrib 				= new Ability(indexOfAttribute, numAttributes, 0, 0);
		secondTalent.setAbility(attrib.getName());
		String s;
		string += ""r: ""+r+"",\tattrib: ""+attrib.getName();
		rollAttr();
		switch(attrib.getAbility())
		{
			case Ability.ability_damage :
				s = ""fail"";
				break;
			case Ability.ability_special_attribute:
				s = ""succeed"";
				break;
			default:
				s = ""fail"";
		}
		switch(s) {
			case ""succeed"":
			case ""fail"":
				rollFight();
				break;
			case ""succeed_0"" :
				break;
			default :
				break;
		}
		s = ""r: ""+r+"",\ttag: ""+attrib.getName();
		rollTalent();
		r=""pass"";
		switch(attrib.getIndex())
		{ 
			case Skill.index_attr
				s = ""succeed_0"";
				break;
			case Skill.index_power
				s = ""fail_0"";
				break;
			default :
				s = ""pass"";
				break;
		}
		s=""pass"";
		switch(s) {
			case ""succeed_0"" :
				break;
			default :
				break;
		}
		//checks with a number of weapons
		final int wNum = 10+Math.abs(System.currentTimeMillis())%3;
		final Weapon w 				= new Weapon(""Weapon""+System.currentTimeMillis(), wNum, 0, 0);
		string += "" wNum: ""+wNum+""\thint: ""+wNum;
		rollFight();
		switch(wNum)
		{
			case 11:
				break;
			case 12:
				r=""pass"";
				break;
			default :
				r=""pass"";
				
		}
		string+="",\twNum: ""+wNum+""\t\tweapon: ""+w+""\thint: ""+wNum;
		rollFight();
		switch(wNum)
		{
			case 11:
				break;
			case 12:
				r=""pass"";
				break;
			default :
				r=""pass"";
				

		}
		if (s!= r) {
			// checks when first and second talents are the same
			final Ability otherAttrib = new Ability(indexOfAttribute, numAttributes, 0, 0);
			string += "",other attrib: ""+otherAttrib.getName();
			s=""pass"";
			switch(otherAttrib.getAbility()) {
				case Ability.ability_damage :
					s = ""succeed"";
					break;
				case Ability.ability_special_attribute:
					s = ""succeed_0"";
					break;
				default:
					s = ""pass"";
				
			}
			switch(wNum)
			{
				case 11:
				case 12:
					r=""pass"";
					break;
			}
			r=""pass"";
			s=""fail"";
			switch(s) {
				case ""succeed"":
				case ""fail"":
				break;
				case ""fail_0"":
					s=""pass"";
					break;
				default :
					s=""pass"";
			}
			assertTrue(s.equals(r));
			fail(""Tests do not pass because wNum: ""+wNum+""\twindow is: ""+wNum;
			
		}
		string += ""\t\twindow is: ""+wNum;
		rollFight();
		switch(attrib.getSpell())
		{
			case Talent.ability_skill_1 :
				s = ""succeed"";
				break;
			default:
				s = ""fail"";
		}
		assertTrue(s.equals(r));
		fail(""Tests do not pass because attrib is: ""+attrib.getName());
		
	}
}"
ec494637-4c34-460d-8f79-79e9f7e3e4e4,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java,59.49467182159424,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    /**
     * roll a dice with variable sides
     *
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides) {
        int ret = -1;
        ret = (int) Math.rint((Math.random() * sides)) % sides + 1;
        return ret;
    }
}
","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {
private final int RATE = 100;
		private final int SIDE = 3;

		/**
    * Test of {@link Challenge#dice(int)}.
    * Tests a random die.
	*/
    @Test
    public void testDice_Rand() {
		System.out.println(""dice(int)"");
    	final int SIDE = 3;
		int sides = 3;
		Vector<Integer> rolls = new Vector<Integer>(); // to hold the ids
		int result = 0;
		for (int i = 0; i < SIDE; i++) {
			Rolls.set(i, RATE);
		}
		int d = Math.abs(Challenge.dice(sides));
		Challenge_1Test.validateDice(""rolls.size"", SIDE, SIDE);
		assertEquals(1, 2, result, ""1);"" + SIDE + ""<="");
		result = (int) Math.floor(Challenge.dice(2));
		Challenge_1Test.validateDice(""rolls.size"", SIDE, SIDE);
		assertEquals(1, 2, result, ""1"");
		result = (int) Math.floor(Challenge.dice(SIDE * 2));
		assertEquals(2, 2, result, ""2);"" + SIDE * 2);
	}

	/** Test of {@link Challenge#dice(int)}.
	* Tests a random die.
	* This test is not covered by the testDice method to be kept as the reference
	* since the implementation is not to be covered, thus this test method won't
	* be generated in a production project.
	*/
	private void testDice(String testName) {
		System.out.println(testName + "" - dice()"");
    	final int SIDE = 3;
		int sides = 3;
		Vector<Integer> rolls = new Vector<Integer>(); // to hold the ids
		int result = 0;
		for (int i = 0; i < SIDE; i++) {
			Rolls.set(i, RATE);
		}
		int d = Math.abs(Challenge.dice(sides));
		Challenge_1Test.validateDice(testName, SIDE, SIDE);
		assertEquals(1, 2, result, ""1);"" + SIDE + ""<="");
		result = (int) Math.floor(Challenge.dice(2));
		Challenge_1Test.validateDice(testName, SIDE, SIDE);
		assertEquals(1, 2, result, ""1"");

		result = (int) Math.floor(Challenge.dice(SIDE * 2));
		Challenge_1Test.validateDice(testName, SIDE, SIDE);
		assertEquals(2, 2, result, ""2);"" + SIDE * 2);
	}

	private void validateDice(String testName, int sides, int total) {
		System.out.println(testName + ""dice = "" + sides);
		assertEquals(total, sides, ""number of die"");
	}

	public static int dice(int sides) {
		int result = 0;
		for (int i = 0; i < sides; i++) {
			result = (i == sides? result + (int) (Math.random() * Math.pow(RATE, 7)) : (int) Math.random());
		}
		return result;
	}

	public static Vector<Integer> rollDice() {
		int rolls = 0;
		Vector<Integer> result = new Vector<Integer>(); // to hold ids
		for (int i = 0; i < SIDE; i++) {
			rolls = (int) Math.floor(Challenge.dice(SIDE));
			result.add(rolls);
		}
		return result;
	}

	public static void validateDice(String testName, int sides, int total) {
		boolean isResult = true;
		boolean failure = false;
		int rolled = 0;
		for (int i = 0; i < total; i++) {
			result = rollDice();
			for (int j = 0; j < sides; j++) {
				try {
					result.set(i, (int) (Math.random() * Math.pow(RATE, 7)));
					isResult = true;
					break;
				} catch (NullPointerException e) {
				}
			}
			if (!isResult) {
				failure = ""roll fails!"";
				break;
			}
		}

		assertEquals(total, result.size(), testName);
		assertEquals(sides, rolled);
		assertEquals(failure, failure);
	}
}
"
e18fb72f-eaab-4e30-942a-6f79402aa33d,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java,60.131656646728516,stop,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 *
 * @author bernshausen
 */
public class Hero implements Serializable {

    /**
     * return the value of the attribute described by the shortcut
     *
     * @param shortcut the shortcut of the attribute
     * @return the value
     */
    public int getAttrValue(String shortcut) {
        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.elementAt(i).getShortcut().equals(shortcut)) {
                return attributes.elementAt(i).getValue();
            }
        }
        return -1;
    }
}
","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {

    @Test
    void test1() throws HeroException {
		
		Hero hero = new Hero();
                
                hero.insertAttribute(""id"", ""1"");
                
		//check it throws if no id attribute
                assertThrows(InvalidKeyException.class, () -> hero.getAttrShort(""id""));
                
                //check it throws if id attribute does not exists
                Document doc = new Document(hero.getElement());
                Vector <Element> elements = doc.getRoot().getElementsByTag(""attribute"");
                assertDoesNotContain(elements, hero.getElement());
                
		// check it throws if value of id is wrong
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""this stuff does not exist""));
		
                //check it throws if value of id is NULL
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(null));
                
		//check it throws if value of id is 0
		assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
		//check it throws if value of id is null
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(null));
                
		//check it throws if value of id is not valid integer
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
                //check it throws if value of id is invalid integer
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
                //check it throws if value of id is invalid boolean
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
                //check it throws if value of id is not value of character
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
                //check it throws if value of id is not valid boolean
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(""id""));
                
		//check it throws if the value is NULL
                Vector <Element> children = hero.getElement().getElements();
                Iterator <Element> childrenIter = children.iterator();
                Element child = childrenIter.next();
                assertThrows(IllegalArgumentException.class, () -> child.getText());
                
		//check it throws if a value is null
                Vector <Element> children2 = hero.getElement().getElements();
                children2.elementAt(0).getText();
                assertThrows(IllegalArgumentException.class, () -> children2.elementAt(0).getText());
                
		//check it throws if a value is a wrong primitive
                assertThrows(IllegalArgumentException.class, () -> hero.getAttrValue(12));
                
        }
        
		
}
"
