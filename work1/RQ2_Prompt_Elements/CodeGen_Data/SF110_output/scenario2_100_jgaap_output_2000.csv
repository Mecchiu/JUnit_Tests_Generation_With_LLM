ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
87281ec3-b6bb-4ff0-8aab-7a77c1c65fab,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/EventSet.java,69.15545439720154,stop,"// EventSet.java
import java.util.Vector;
import java.util.List;

public class EventSet {

    /**
     * Returns the total number of events in the set*
     */
    public int size() {
        return events.size();
    }
}
","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains one unit test case for the {@link EventSet#size()} method.
*/
class EventSetTest {","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains one unit test case for the {@link EventSet#size()} method.
*/
class EventSetTest {

		/**
		* {@link EventSet} contains one event.
		*/
		public static final String EVENT_NAME = ""EVENT_NAME""; 
	
		int eventCounter = 0;
		
		@Test
		public void create() {
			
			EventSet EventSet = new EventSet();
			
			assertEquals(0, EventSet.size());
			assertNotNull(EventSet);
			EventList Events = EventSet.getEvents();
			assertNotNull(Events);
			assertEquals(0, Events.size());
			
		}

		@Test
		public void getEventByName() {
			
			EventList Events = new EventList();
			List<String> EventsList = new Vector<String>();
			EventsList.add(EVENT_NAME);
			
			assertNotNull(EventsList);
			assertEquals(EVENT_NAME, Events.get(0));
			
			Events = null;
		
			try {
				Events = new EventList();
			}
			catch (Exception e) {
				
			}
			assertNotNull(Events);
		
			assertTrue(!EventsList.contains(EVENT_NAME));
			
			Events = null;
		
		}
		
		@Test
		public void containsEvent() {
			
			
			List<String> EventsList = new Vector<String>();
	
			EventSet EventSet = new EventSet();
			EventEvent Event = new EventEvent();
		
			EventList Events = EventSet.getEvents();
			
			assertTrue(!EventsList.contains(EVENT_NAME));
			EventsList.add(EVENT_NAME);
			assertTrue(!EventsList.contains(Event_NameOfEventName));
			
			EventsList.add(EVENT_NameOfEventName);
			assertTrue(!EventsList.contains(Event_NameOfEventName));
			
			assertTrue(EventsList.contains(EV_NameOfEventName));
			
			assertFalse(EventsList.contains(Event_NameOfEventName));
			
			
			
		}

		@Test
		public void containsEventWhenNonContainedEvent() {
			
			EventSet EventSet = new EventSet();
			
			assertTrue(EventSet.contains(Event_NameOfEventName));
			
		}

		
		@Test
		public void notContainsEvent() {
			
			EventSet EventSet = new EventSet();
			
			assertTrue(!EventSet.notContains(EVENT_NAME));
			
		}

		@Test
		public void containsEventWhenMoreContainedEvent() {
			
			EventSet EventSet = new EventSet();
	
			List<String> EventsList = new Vector<String>();
			EventList Events = EventSet.getEvents();
			
			EventsList.add(EVENT_NAME);
			EventsList.add(EV_NameOfEventName);
			
			EventsList.add(EVENT_NameOfEventName);
			EventsList.add(EV_NameOfEventName);
			
			assertTrue(!(EventSet.contains(Events.get(0)))
					&&!(EventSet.contains(Events.get(5)))
					&&!(EventSet.contains(Events.get(3))));
			
		}

	
	}"
01f19867-a643-4896-91cc-e7b061b69789,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/DocumentSet.java,63.663782358169556,stop,"// DocumentSet.java
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;

/**
 * A Document Set is a group of documents written by the same author.
 * This can be used to facilitate event sets that are larger than just
 * a single document, which may be more indicative of an author's
 * entire body of work.
 */
public class DocumentSet {

    /**
     * Number of documents currently registered in this set of documents*
     */
    public int documentCount() {
        return documents.size();
    }
}
","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains one unit test case for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains one unit test case for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {
 @Test
		  public void test() {
				   System.out.println ( ""test documentSet().documentCount()"" );
		       synchronized( documentCount_Mutex ) {
			      documentCount = 2; // reset
			    }

		       synchronized( documentCount_Mutex ) {			
			      documentCount = 3; // reset
		    	}
		     }
}
"
7cc49679-53af-48ba-b495-4885e94f346d,/EvoSuiteBenchmark/original/100_jgaap/src/main/java/Document.java,57.36030101776123,stop,"// Document.java
import java.io.*;
import java.util.Vector;

/**
 *   Code for storing and processing individual documents of any type.
 */
public class Document {

    /**
     * Convert processed document into one really long string.
     * I'm not quite sure yet why this ever would need to be done.
     */
    public String stringify() {
        String t = new String();
        for (int i = 0; i < procText.size(); i++) t += (char) procText.elementAt(i);
        return t;
    }
}
","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains one unit test case for the {@link Document#stringify()} method.
*/
class DocumentTest {","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains one unit test case for the {@link Document#stringify()} method.
*/
class DocumentTest {

        /**
         * Test method for {@link Document#Document(String)}.
         */
        @Test
        public void testDocumentS() {
            String s = ""hello"";
            Document doc = Document.Document(s);
            assertEquals(s, stringify());
            assertEquals(new Document(s), doc);
        }

        /**
         * Test method for {@link Document#Document(String)}.
         */
        @Test
        public void testDocument() {
            String s = ""hello world"";
            Document doc = Document.Document(s);
            assertEquals(s, stringify());
            assertEquals(new Document(s), doc);
        }

        /**
         * Test method for {@link Document#readTextFile(String)}
         */
        @Test
        public void testDocumentReadTextFile() throws IOException {
            File f = new File(""testdata/test3"");
            Reader reader = new FileReader(f);
            Document doc = Document.readTextFile(reader);
            assertEquals(f, f);
            assertEquals(f.length(), doc.length());
            assertEquals(f, new File(f.getParent()));
            assertEquals(2, doc.toString().length());
        }

        /**
         * Test method for {@link Document#writeTextFile(String)}
         */
        @Test
        public void testDocumentWriteTextFile() throws IOException {
            Writer writer = new FileWriter(new File(""testdata/test3""));
            Document doc = new Document(writer);
            String s = ""test"";
            assertEquals(s, doc.stringify());
            assertEquals(new Document(s), doc);
            doc = new Document();
            assertEquals(s, doc.stringify());
            assertNull(doc.writeTextFile(""textx""));
        }

        /**
         * Test method for {@link Document#isValid(String)}.
         */
        @Test
        public void testDocumentIsValid() {
            Document doc = new Document();
            assertTrue(doc.isValid(""something""));
            doc = new Document("""");
            assertFalse(doc.isValid(""something""));
            doc = new Document("""");
            assertTrue(doc.isValid(""something<anything>""));
        }


        /**
         * Test method for {@link Document#getTextFile(int)}.
         */
        @Test
        public void testDocumentGetTextFile() throws DocumentException {
            Vector textVector = new Vector();
            Document doc = Document.getTextFile(textVector);
            assertNull(doc.writeTextFile(""textx""));
        }

	  /** Test doc = null Test */
	  @Test
	  public void testInvalidFile() throws DocumentException {
	    Vector textVector = new Vector();
	    Document doc = Document.createTextFile(""invalidfile"");
	    String s = ""invalidfile"";
	    Document.stringify(s, textVector);
	    assertTrue(""File can't be null"", doc.isValid(s));
	    assertNull(""File can't be null"", doc.writeTextFile(s));
	  }

	  /** Test doc = null Test */
	  @Test
	  public void testLineEnding() throws DocumentException {
	    Vector textVector = new Vector();
	    Document doc = Document.createTextFile(""lineendings.txt"");
	    String s = ""invalidfile"";
	    Document.stringify(s, textVector);
	    assertTrue(""File can't be null"", doc.isValid(s));
	    assertNull(""File can't be null"", doc.writeTextFile(s));
	  }

    }

}
"
