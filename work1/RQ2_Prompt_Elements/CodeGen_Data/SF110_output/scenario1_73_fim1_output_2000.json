[
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n    protected static final Logger logger = Logger.getLogger(getBinaryMessageClass().getName());\n    \n    protected AdminInterface adminInterface;\n    protected ClientInterface clientInterface;\n    protected UnicastRemoteObject adminInterface_RemoteObject;\n    protected UnicastRemoteObject clientInterface_RemoteObject;\n    protected static int serverThreadCount_ = 2;\n    \n    protected void loginToTheServer() throws Exception {\n        System.out.println(\"Running login\");\n        Object objServer = Naming.lookup(\"rmi:////\" + \"localhost\" + \":\" + \"50051\" + \"/\" + \"server\" + \"?rmi/opengeo.registry\");\n        new Logger() {{\n            setLevel(Level.FINER);\n        }};\n        String strObjServer = (String) objServer;\n        System.out.println(\"Test running from server\");\n        System.setProperty(\"javax.net.ssl.trustStore\", \"/opt/myserver/myclient\");\n        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"store\");\n        System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"_\");\n        \n        if (!StringEncoder64.isEncoding(strObjServer)) {\n            throw new RuntimeException(\"The server must have an encoding, no decoding\");\n        }\n        \n        System.out.println(\"Connecting to the server....\");\n        adminInterface = new AdminInterface();\n        clientInterface = new ClientInterface();\n        \n        adminInterface.attachInterface(adminInterface_RemoteObject);\n        clientInterface.attachInterface(clientInterface_RemoteObject);\n    }\n    \n    /**\n     * Test of execute method, of class osa.ora.server.admin.AdminInterface.\n     */\n    @Test\n    public void test_execute_ShouldSendMessageIfMessageIsSent() throws Exception {\n    \tSystem.out.println(\"TEST: execute, message is transmitted\");\n        try {\n            for (int i = 0; i < serverThreadCount_; ++i) {\n                new SendRefreshContactThread().start();\n            }\n            Object objNewLoginBean = new LoginBean();\n            adminInterface.setNewLoginBean(objNewLoginBean);\n            adminInterface.setLoginTime(Calendar.getInstance());\n            Object objSendRefreshContactThread = sendRefreshContactMessage();\n            new SendRefreshContactThread().start();\n            sendRefreshContactMessage(objNewLoginBean);\n            new SendUserUpdatedStatusThread().start();\n            sendUserUpdatedStatusMessage(objNewLoginBean);\n            System.out.println(\"TEST: test has ended\");\n            for (int i = 0; i < serverThreadCount_; ++i) {\n                new SendUserUpdatedStatusThread().start();\n            }\n            sendUserUpdatedStatusMessage(objNewLoginBean);\n            Object objSendKickOffByLoginMessageThread = sendKickOffByLoginMessage();\n            new SendKickOffByLoginMessageThread().start();\n            sendKickOffByLoginMessageMessage(objNewLoginBean);\n            new SendKickOffMessageThread().start();\n            sendKickOffByLoginMessageMessage(objNewLoginBean);\n        } catch (Exception e) {\n            e.printStackTrace();\n\t    }\n    }\n    \n\t/**\n\t * Test of getNewUsesThreadCount method, of class osa.ora.server.ClientInterface.\n\t */\n\t@Test\n    public void test_ShouldGetTheThreadsCountForLogin() throws Exception {\n        System.out.println(\"Test of the class '{}' that extends '{}'.\", new Object[] { ClientInterface.class, \n            NormalChatServer.class });\n    \tObject objNewLoginBean = new LoginBean();\n    \tClientInterface cmdNewLogin = new ClientInterface();\n    \tSystem.out.println(\"TEST:  the method should return a new instance with login thread \");\n        cmdNewLogin",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n    private boolean isOK = true;\n    private String mylogger = \"(MyLogger)\";\n    private boolean isS = true;\n    \n    private final static Hashtable registryUsers = new Hashtable(); \n    private final static Hashtable registryUsers2 = new Hashtable();\n    \n    private final static String myMessage =  \"Hello\";\n    private final static  ServerSettingBean myServerSettingBean = \n    new ServerSettingBeanImpl (\"test\", 30);\n    private final static int myServerPort = 4444;\n    private final static String myServerServerDir = \"/home/oora-test-4\";\n    private final static String myServerServerName = \"test-3\"; \n    \n    private boolean setS = false;\n    private ClientInterface MyClientIface = null;\n\t\t\n    private void login() {\t\n        LoginBean loginBean = new LoginBean (\"test-4\");\t\t\n\t\tString message=\"Hello user\";\n\t\t\n        String myServerSettingBeanName = \"test-\";\n\t\t\n        StringEncoder64.doUnescape(myServerSettingBeanName);\t\t\t\t\n        StringEncoder64.doUnescape(myMessage);\n        \n        LoginBean loginBean2 = new LoginBean (\"test-4\");\n\t\t\n\t\tStringEncoder64.doUnescape(loginBeanName);\t\t\n        StringEncoder64.doUnescape(myServerSettingBeanName);\t\t\n        StringEncoder64.doUnescape(loginBean2.getName());\n                         \n        myMessage = \"Hallo \" + \"Hallo \" + loginBean.getName() + \" hat \" + loginBeanName + \"\";         \n        Message messageObject = new TextMessage(myMessage, \"Hallo \" + \"Hallo \" + loginBean.getName() + \" hat \" + loginBeanName + \"\", \"test-4\");\n        \n        messageObject.setMessage(\"Hello world\");\n        \n    }\n    \n    private void pingMyServer() {\n    \tStringEncoder64.doUnescape(ClientInterface.ClientName);\n    \t\n        int pingDelaySeconds = 10;\n        for(int i =0; i < pingDelaySeconds; i++) {\n        \tif(setS)\n\t    \t    break;\t\n        \ttry {\n\t    \t    Thread.sleep(1000);\n\t        }\n        \t catch (InterruptedException e) {};\n        }\n        setS = true;\n    }\n    \n    \n    @Test\n    public void test_login() {\n        LoginBean loginBean = new LoginBean(\"test-1\");\n        StringEncoder64.doUnescape(loginBeanName);\n\t\t\n\t\t\t\t\n\t\tlogin();\n        setS=true;\n    }\n    \n    public boolean test_isOK() {\n        return isOK;\n    }\n    \n    public void test_test_OK() {\t\n        if (test_isOK()) {\n        \tassertNotNull(\"The login of server should not be null!\", MyServerBean.getMyServerBean());\n        \tassertEquals(\"The logined user should have been \" + \"MyUser\", MyUserName, MyServerBean.getMyServerBean().getName());\n        \tMyServerIface.sendMessage(new TextMessage(\"OK\"););\n        \tassertTrue(\"the last message should be OK\", isOK);\n            MyServerInterface MyServerBean2 = MyServerIface.getMyServerBean();\n            setS = true;\n            assertNotNull(MyServerBean2);\n            assertEquals(MyServerIface.getMyServerBean(), MyServerBean2);\n            PingServer pinger = new PingServer(\"8\", 8);\n            assertTrue(\"Ping Server should be valid\", isOK);\n            pinger.run();\n            assertFalse(\"Ping Server should NOT respond with true\", isOK);\n        } else { \n        \tTestCase.getFail(this, \"Test not OK!\"); \n        \tMyServerIf",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\tprivate static final int PING_MILLIS = 10000;\n\t/**\n\t * {@link #TEST_LOGGER} - the logger of {@link #TEST_LOGGER} class.\n\t */\n\tprivate static Logger TEST_LOGGER = Logger.getLogger(RegularTest.class.getName());\n\t/**\n\t * A new object is created for the test {@link #TEST_LOGGER}.\n\t */\n\tHashtable<String, String> TestBean = new Hashtable<String, String>();\n\t/**\n\t * A setter to register the logger for the test {@link #TEST_LOGGER} using {@link #setLogger(java.util.logging.Logger)}.\n\t */\n\tprivate void SetLoggerForTEST(final Logger logger) {\n\t\tTEST_LOGGER.setUseParentHandlers(false);\n\t\tTEST_LOGGER.setUseParentHandlers(false);\n\t\tTEST_LOGGER.setUseParentHandlers(false);\n\t\tTEST_LOGGER.setUseParentHandlers(false);\n\n\t\tStringEncoder64 myUTF8Encoder = new StringEncoder64(\"UTF-8\");\n\t\tmyUTF8Encoder.addPropertyChangeListener(TEST_LOGGER);\n\n\t\tTEST_LOGGER.addHandler(new FileHandler(\"/home/peterpeter/logs/test-output-file.log\", 30, 30, true));\n\t\tTEST_LOGGER.setLevel(Level.WARNING);\n\t\tTEST_LOGGER.setLevel(Level.SEVERE);\n\t}\n\t/**\n\t * The new object of the test {@link #TEST_LOGGER} is created with {@link #setLogger(java.util.logging.Logger)}. This method is invoked by the test {@link #TEST_LOGGER}.\n\t */\n\tpublic static void setLoggerForTest(final Logger logger) {\n\t\tSetLoggerForTEST(logger);\n\t}\n\t/**\n\t * The new object of the test {@link #TEST_LOGGER} is created with {@link #setLogger(java.util.logging.Logger)}. This method is invoked immediately.\n\t */\n\tpublic static void loggerForTest() {\n\t\tTEST_LOGGER.info(\"Invoke loggerForTest() successfully\");\n\t}\n\t/**\n\t * The new object of the test {@link #TEST_LOGGER} is created with {@link #setLoggerForTest(java.util.logging.Logger)}. This method is invoked by {@link #loggerForTest()} immediatly.\n\t */\n\tpublic static void loggerForTestImp() {\n\t\tTestBean.put(\"INFO-1\", \"LOGIN-1\");\n\t}\n\t/**\n\t * The new object of the test {@link #TEST_LOGGER} is created with {@link #setLoggerForTest(java.util.logging.Logger)}. This method is invoked immediately.\n\t */\n\tpublic static void loggerForTestImp() {\n\t\tTestBean.put(\"INFO-2\", \"LMS-2\" );\n\t}\n\t/**\n\t * The new object of the test {@link #TEST_LOGGER} is created with {@link #setLoggerForTest(java.util.logging.Logger)}. This method is invoked by {@link #loggerForTest()} immediately.\n\t */\n\tpublic static void loggerForTestAfterLogin(final LoginBean loginBean) {\n\t\tTestBean.put(\"INFO-3\", \"LMS-3\" );\n\t}\n\t/**\n\t * The new thread runs this program in order to ping users in the first thread for a given duration.\n\t */\n\tprivate void pingUsersInFirstThread() {\n\t\tfinal SendKickOffByLoginMessageThread myT = new SendKickOffByLoginMessageThread();\n\t\tmyT.initialize(5);\n\n\t\tfinal SendRefreshContactThread myR = new SendRefreshContactThread(myT);\n\t\tmy",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n\tStringEncoder64 stringEncoder64;\n\t\n    public ServerInterface getServerInterface() {\n        return new ServerInterface();\n    }\n\n\tpublic static HOSTTYPE getHostType() {\n\t    return HOSTTYPE.HOSTTYPE_FAMILY;\n\t}\n\n\tprotected void runTest() throws Exception {\n\t    //logger.info(\"Creating an instance of the ServerInterface\");\n\t    new ServerServer(new IConstant(\"X_Y\"),null);\n\t\t\n\t    new SendUserUpdatedStatusThread().start();\n\t    new SendRefreshContactThread().start();\n\t    new SendUserUpdatedStatusThread().start();\n\t    new SendRefreshContactThread().start();\n\t    new SendKickOffMessageThread().start();\n\n\t    //logger.info(\"Creating the server\");\n\t    Registry r = LocateRegistry.getRegistry(0);\n\t    UnicastRemoteObject ri = (UnicastRemoteObject) r.lookup(\"Admin Interface\");\n\t    assertTrue(\"The Admin Interface is not available\", ri!= null);\n\t    //logger.info(\"New User has successfully logged in\");\n            new ClientInterface().isLogin(); //This is needed by ThreadPool.java and JT.java\n            ServerSettingBean s = new ServerSettingBean();\n\t    //s.setHostName(\"localhost\");\n\t    ServerSettingBean.LOGON = 1;\n\t    try {\n\t        Logger.getLogger(\"\").setLevel(Level.ALL);\n\t    } catch (SecurityException e) {\n\t        //No logon\n\t    }\n\t    StringEncoder64.setStringEncoder(\"FQQ\",false);\n\t    stringEncoder64 = StringEncrypter.encrypt(\"FQQ\",0);\n\t    new ClientInterface().connectToHost();\n\t    new ClientInterface().changeAdmin();\n\t    new SendKickOffByLoginMessageThread().start();\n\t    new SendUserUpdatedStatusThread().start();\n\t    new SendRefreshContactThread().start();\n\t    new SendUserUpdatedStatusThread().start();\n\t    new SendRefreshContactThread().start();\n\t    new SendRefreshContactThread().start();\n\n\t\tnew SendUserUpdatedStatusThread();\n\n\t}\n\n\tprivate void createServerServer() throws Exception {\n\t\tJOptionPane.showMessageDialog (null, \n\t\t\t\t\"Starting the Real Time Online IRC Client (X_Y) Server (Version : 1.0)\",\n\t\t\t\t\"Server Start\"\n\t\t);\n\t}\n\t\n\tpublic void verify(long testStarted) {\n\t\tSystem.out.println(\"===========================================\");\n\t\tSystem.out.println(\"Hello from JUnit for ModernChatServer.\");\n\t\tSystem.out.println(\"===========================================\");\n        Calendar c = Calendar.getInstance();\n        c.setTime(new Timestamp(System.currentTimeMillis()));\n        c.add(Calendar.YEAR, 30);\n        String year = \"\" + c.get(Calendar.YEAR);\n        String month = \"\" + c.get(Calendar.MONTH) + 1;\n        String date = \"\" + c.get(Calendar.DATE) + 1;\n        String hour = \"\" + c.get(Calendar.HOUR_OF_DAY) + 1;\n        String minute = \"\" + c.get(Calendar.MINUTE);\n \n        Logger.getLogger(\"\").setLevel(Level.ALL);\n \n        String s = \"[X_Y] Hello from JUnit for ModernChatServer.\\n\";\n        s = \"=== \" + hour + \" \"+ month + \" \" + date  + \"===\\n\\n\";\n \n        /* TODO: check if the server is running */\n        assertTrue(year.equals(\"\" + c.get(Calendar.YEAR) + \"30\"));\n        assertTrue(month.equals(\"\" + c.get(Calendar.MONTH) + 1) && date.equals(\"\" + c.get(Calendar.DATE)));\n\n\t    new SendRefreshContact",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t/**\n         * Run method test.\n         * It run for every single instance in the server.\n         *\n         * @throws Exception if the first assertion\n         * \t\t\t\t fails.\n         */\n        @Test\n    public void RunTest() throws Exception {\n        try {\n            logger.setLevel(Level.FINER);\n\n            if(JOptionPane.showConfirmDialog(null, \"Do you really want to start the server?\", \"Confirmation\", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {\n                logger.log(Level.SEVERE, \"You have run out of resources for some reason.\");\n                logger.log(Level.INFO, StringEncrypter.Encrypter.EncodeUTF8(StringEncrypter.Encrypter.decrypt(StringEncrypter.Encrypter.Encrpy.Encrypt(StringEncrypter.Encrypter.decrpy(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.encrpy(StringEncrypter.Encrypter.encrpa(StringEncrypter.Encrypter.encrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.DecCrypt(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.Encrypt(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.encrpy(StringEncrypter.Encrypter.Decrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.Encrypt(StringEncrypter.Encrypter.Encrpy(StringEncrypter.Encrypter.encrpa(StringEncrypter.Encrypter.Encrypt(StringEncrypter.Encrypter.encrpa(StringEncrypter.Encrypter.encrpa(StringEncrypter.Encrypter.encrypt(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.encrypt(StringEncrypter.Encrypter.decrpy(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.Encrypter.decrpa(StringEncrypter.En",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t@Test\n\t\tpublic void method_GetLogger() throws NamingException, MalformedURLException, RemoteException {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\t}\n\n// RemoteControlInterface \nclass ChatControlInterface implements ClientInterface, Runnable {\n\t\tprivate int i;\n\t\t\n\t\tpublic ChatControlInterface(int i) {\n\t\t\tthis.i = i;\n\t\t}\n\t\t\n\t\tpublic void run() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tSystem.out.printf(\"Remote I is %d \\n\",i);\n\t\t}\n}\n\npublic final class UserBean {\n\t\n\tprivate UsersBD usersBD;\n\tprivate ClientInterface clients;\n\t\n\tpublic UserBean(UsersBD usersBD, ClientInterface clients) {\n\t\tthis.usersBD = usersBD;\n\t\tthis.clients = clients;\n\t}\n\n\tpublic String getName() {\n\t\treturn \"name_\" + i;\n\t}\n\tpublic void setName(String name) {\n\t\ti++;\n\t}\n\tpublic char getStatus() {\n\t\treturn 3;\n\t}\n\tpublic UserBean(UserBean a) {\n\t\tthis.usersBD = a.usersBD;\n\t}\n}\n\n// RemoteControlInterface \nclass ChatInterface extends UnicastRemoteObject implements ChatControlInterface {\n\t\n\tpublic ChatInterface(int i) throws NamingException\n    {\n        super();\n\t}\n\t\n\tpublic ChatControlInterface(int i,ClientInterface clients) {\n\t    super(i);\n\t    this.clients = clients;\n\t}\n}\n\npublic final class User {\n\t\n\tprivate int ID;\n\tprivate String name;\n\tprivate int status;\n\tprivate String password;\n\tprivate UserBean userBean;\n\tpublic User(){\n\t\t\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic UserBean getBinary() {\n\t\treturn userBean;\n\t}\n\tpublic void setBinary(UserBean userBean) {\n\t\tthis.userBean = userBean;\n\t}\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\tpublic int getID() {\n\t\treturn ID;\n\t}\n\tpublic void setID(int ID) {\n\t\tthis.ID = ID;\n\t}\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\tpublic void setUser(UserBean user) throws RemoteException {\n        \tuser.setName(name);\n\t\tuser.setPassword(password);\n\t\tclients.send(new ChatInterface(ID), new UserBean(user));\n\t}\n}\n\n@Override\npublic void sendByLoginMessage(LoginBean a) throws RemoteException {\n\tUser user = UsersBD.getLoggedUserByName(a);\n    setPassword(StringEncoder64.encode(user.getName()+\":\"+user.getPassword()));\n\tString message = \"{\\\"text\\\":\"+a.getStatus()+\",\"+a.getName()+\"}\";\n\tsendByLoginMessage(message,\"utf-8\");\n}\n@Override\npublic void sendByRefreshMessage(String a) throws RemoteException {\n\tString password = UsersBD.getCloak(0);\n\tUsersBD.setCloak(a,password);\n\tsendByRefreshMessage(a);\n}\n@Override\npublic void sendByUpdateStatusMessage(String a1) throws RemoteException {\n\tsendByLoginMessage(loginMessage(a1));\n\tint i = Integer.valueOf(a1);\n\tString message = \"{\\\"text\\\":\"+i+\",\"+a1+\"}\";\n\tString message1 = \"{'id': '\"+a1+\"','password': '\"+password+\"'}\";\n\tsendByRefreshMessage(message1);\n}\n\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n    /**\n    Test for ping users thread.\n    **/\n    @Test\n    public void runPingUsersThreadPongingUsers_Success() {\n\n\t\ttry {\n\t\t\tClientInterface c = new ClientInterface();\n\t\t\t//c.sendHelloWorld(\"Hello World\");\n\t\t\t// c.isThereAnyLogin();\n\t\t\tc.sendGetLoggedUsers();\n\t\t\tLoginBean lu = c.createLoginBean( \"jdoe\", \"111111111111\" );\n\t\t\tc.sendLoginSuccessful(lu);\n\t\t\tc.getUserInformation( c.loginWithUserServer );\n\t\t\tc.loginWithRemoteServerThread = null;\n\t\t\tc.newLogin(lu, 2);\n\t\t\tSendRefreshUserUpdatedStatusThread rsc = new SendRefreshUserUpdatedStatusThread();\n\t\t\trsc.run();\n\t\t\t//rsc.waitUntilLoginRefreshed();\n\t\t} catch (RemoteException exc) {\n\t\t\tfail(exc.toString());\n\t\t} catch (Naming.NamingException exc) {\n\t\t\tfail(exc.toString());\n\t\t}\n\t}\n\n    /**\n     Test for the ServerInterface's method pingUsers.\n     **/\n    @Test\n    public void runPingUsersThreadPongingUsers_Failure() {\n        try {\n            new ServerInterface();\n\t\t\t//Test case where user login failed\n        } catch (Exception exc) {\n            fail( exc.toString());\n        }\n    }\n\n\n    /**\n     Test for the Thread for ping users thread.\n     * @throws Exception\n     * It contains a test case for the ClientInterface.\n     **/\n    @Test\n    boolean pingUsers_Success() throws Exception {\n\n        ClientInterface c = new ClientInterface();\n\n        //Test case where user login failed\n        c.sendPing( \"jdoe\", \"111111111111\" );\n        c.isThereAnyLogin();\n        c.sendPingSuccessful( c.loginWithUserServer );\n        c.newLogin( c.loginWithRemoteServerThread, c.newUserServer, ServerSettingBean.pingTestServer );\n\n        c.getUserInformation( c.loginWithUserServer );\n        c.loginWithRemoteServerThread = null;\n\n        c.getUserInformation( c.loginWithRemoteServerThread );\n\n        // Ping users thread success\n\n        c.pingUsers();\n        Thread.currentThread().sleep(500);\n\n        //Test case for ping after being pinged users\n        assertEquals(\"\", c.loginWithUserServer);\n\n        /*\n         * Test for login success after ping\n         */\n        c.isThereAnyLogin();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.SECOND, 5);\n\n        c.newLogin( c.loginWithRemoteServerThread, c.loginWithUserServer, ServerSettingBean.loginTestServer );\n\n        c.getUserInformation( c.loginWithUserServer );\n        cal.add(Calendar.SECOND, 5);\n        c.isThereAnyLogin();\n    }\n    /**\n     *\n     */\n    @Test\n    public void runPingUsersThreadPongingServer_Success() {\n\n        try {\n            ClientInterface c = new ClientInterface();\n\n            //Test case when user login failed\n            c.sendPingWithMessageServer( c.loginWithUserServer, c.loginWithMessageServer,\n                        c.loginWithMyServer, c.loginWithMyUserServer, c.logoutLogSuccessful );\n            c.isThereAnyLogin();\n            c.sendPingSuccessful( c.loginWithUserServer );\n            c.logoutLogSuccessful();\n\n            c.getUserInformation( c.loginWithUserServer );\n            c.loginWithRemoteServerThread = null;\n            c.newLogin( c.loginWithRemoteServerThread, c.loginWithUserServer, c.loginWithMyServer,\n                    c.loginWithMyUserServer, c.logoutLogSuccessful );\n\n            c.newLogin( c.loginWithMyRemoteServerThread, c.loginWithRemoteServerThread,\n                    c.loginWithMyUserServer, c.loginWithMyServer, c",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n\tprivate final static StringServerInterface ServerInterface = new StringServerInterface();\n\tprivate final static Logger log = Logger.getLogger(\"log\");\n\tprivate final static Hashtable<String, IConstant> constantsSetByClient = new Hashtable() {{\n\t\tput(ClientInterface.HOST_NAME, IConstant.HOST_NAME);\n\t\tput(\"TEST1\", IConstant.HOST_NAME);\n\t\tput(\"TEST2\", IConstant.HOST_NAME);\n\t}};\n\t\n\tprivate final StringEncoder64 passwordEncoder64;\n\tprivate final StringEncoder64 tokenEncoder64;\n\tprivate final String password;\n\tprivate final String token;\n\tprivate final int port;\n\n\t/**\n\t * Class under Test\n\t*/\n\tpublic ModernChatServer_0Test() {\n\t\tpasswordEncoder64 = new StringEncoder64();\n\t\ttokenEncoder64 = new StringEncoder64();\n\t\tpassword = \"test01\";\n\t\ttoken = \"test02\";\n\t\tport = 1235;\n\t\tlog.info(String.format(\"Starting %s instance\", Class.forName(ServerInterface.class.getCanonicalName()).getCanonicalName()));\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link osa.ora.server.client.ClientInterface#getToken(java.lang.String)}.\n\t * @throws Exception\n\t*/\n\t@Test\n\tpublic final void test_getToken_1() throws Exception {\n\t\tUser user1 = new User(\"test1\");\n\t\tuser1.setPassword(passwordEncoder64.getRandomString());\n\t\tUser user2 = new User(\"test2\");\n\t\tuser2.setPassword(passwordEncoder64.getRandomString());\n\t\tResultBean result;\n\t\t\n\t\t//Send the user online\n\t\tthis.SendUserUpdatedStatusMessageThread = new SendUserUpdatedStatusMessageThread(user1, true, false);\n\t\tthis.SendUserUpdatedStatusMessageThread.start();\n\t\twaitForLoginMessageThread(10000);\n\t\t\n\t\t//Check the result: user is online\n\t\tassertTrue(!this.SendRefreshContactMessageThread.isAlive());\n\t\t\n\t\t//Try to login that will succeed in the test. User should be online now. \n\t\tresult = this.SendRefreshContactMessageThread.getResult(new WaitTimeoutCallback<ResultBean>(new CountOfThreads<MessageCallbackThread>(3), this.SendRefreshContactMessageThread));\n\t\tassertTrue(!((ResultBean) result.getBody()).success());\n\t\t\n\t\t//Send the user offline\n\t\tthis.SendUserUpdatedStatusMessageThread = new SendUserUpdatedStatusMessageThread(user2, false, true);\n\t\tthis.SendUserUpdatedStatusMessageThread.start();\n\t\twaitForLoginMessageThread(10000);\n\t\t\n\t\t//Check the result again\n\t\tresult = this.SendRefreshContactMessageThread.getResult(new WaitTimeoutCallback<ResultBean>(new CountOfThreads<MessageCallbackThread>(10), this.SendRefreshContactMessageThread));\n\t\tassertTrue(((ResultBean) result.getBody()).success());\n\t\t\n\t\t//Check if the user is online again\n\t\tresult = this.SendRefreshContactMessageThread.getResult(new WaitTimeoutCallback<ResultBean>(new CountOfThreads<MessageCallbackThread>(2), this.SendRefreshContactMessageThread));\n\t\tassertTrue(((ResultBean) result.getBody()).success());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link osa.ora.server.client.ClientInterface#getToken(java.lang.String)}.\n\t * @throws Exception\n\t*/\n\t@Test\n\tpublic final void test_getToken_2() throws Exception {\n\t\tString token2;\n\t\t\n\t\t//Send a message, it should send by username and not by password\n\t\tResultBean result = this.SendUserUpdatedStatusMessageThread.getResult(new WaitTimeoutCallback<ResultBean>(new CountOfThreads<MessageCallbackThread>(3), this.SendRefreshContactMessageThread));\n\t\tassertTrue(",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\tstatic Logger logger \t\t\t\t\t= Logger.getLogger(ModernChatServer_0Test.class.getName());\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n\n// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {\n\t\t\n\tLogger logger;\n\tstatic final Logger getLogger() {\n\t\treturn logger;\n\t}\n\t\n\t/**\n\t * Test method for {@link osa.ora.server.ModernChatServer#getLogger()}.\n\t*/\n\t@Test\n\tpublic void testGetLogger() {\n\t\tlogger = new Logger(\"logger\");\n\t}\n          \n        @Test\n//\t@JUnitHttpServerTest(port=3000)\n\tpublic void testSendKickOffByLoginMessageThread() throws Exception {\n\t\tSendKickOffByLoginMessageThread sendKickOffByLoginThread = new SendKickOffByLoginMessageThread();\n\t\tassertNotNull(\"sendKickOffByLoginThread is null!\",sendKickOffByLoginThread);\n\t\tsendKickOffByLoginThread.setName(\"test send kick off by login message thread\");\n\t\tlogger.log(Level.INFO, \"Sending kick off by login message\");\n\t}\n\t\n\t@Test\n\tpublic void testSendRefreshContactThread() throws Exception {\n\t\tSendRefreshContactThread sendRefreshContactThread = new SendRefreshContactThread();\n\t\tassertNotNull(\"sendRefreshContactThread is null!\",sendRefreshContactThread);\n\t\tsendRefreshContactThread.setName(\"test send refresh contact thread\");\n\t\tlogger.log(Level.INFO, \"Sending refresh contact message\");\n\t}\n\t\n\t@Test\n\tpublic void testSendBinaryMessageWithEncrpecy() throws Exception {\n\t\tBinaryMessage m = new BinaryMessage();\n\t\tassertNull(\"BinaryMessage not added\", m);\n\t}\n\t\n    @Test\n    public void testSendUserUpdatedStatusThread() throws Exception {\n        SendUserUpdatedStatusThread sendUserUpdatedStatusThread = new SendUserUpdatedStatusThread();\n      sendUserUpdatedStatusThread.run();\n    }\n\n\t@Test\n\tpublic void testSendUserUpdatedStatusThread() throws Exception {\n\t\tString userId = \"userId\";\n\t\tString status = \"status\";\n\t\tString username = \"username\";\n\t\tString encryptedDataLength = \"encryptedDataLength\";\n\t\tString encryptionAlgorithm = \"encryptionAlgorithm\";\n\t\t\n\t\tString msg = \"abcdefghijklmnopqrst\";\n\t\tBinaryMessage newBinaryMessage = new BinaryMessage(msg);\n\t\tResultBean resultCode = new BCPBean(\"0\");\n    \t\n    \tlogger.log(Level.INFO, \"Sending binary message with timestamp \"+Calendar.getInstance().getTime());\n\t\tnewBinaryMessage.setTimestamp();\n\t\tnewHolder.setServerResultBean(resultCode);\n\t\tnewHolder.setBinaryMessage(newBinaryMessage);\n\t\t\n\t\tNewHolderPane newHolderPane = new NewHolderPane();\n\t\tnewHolderPane.setContainerHolder(newHolder);\n\t//\tSendMessageThread sendMessageThread = new SendMessageThread((Vector)newHolderPane,0,1);\n\t//\tClient client = ClientMgrSingleton.getClientSingleton().getClient();\n\t//\tSendMessageThread.setTime(1);\n\t\tnewMessageThread.sendMessageToClient(newHolderPane);\n\t}\n\n\t@Test\n\tpublic void testSendUserUpdatedStatusThreadWithServerSetting() throws Exception {\n\t\tString userId = \"userId\";\n\t\tString status = \"status\";\n\t\tString username = \"username\";\n\t\tString encryptedDataLength = \"encryptedDataLength\";\n\t\tString encryptionAlgorithm = \"encryptionAlgorithm\";\n\t\t\n\t\tString msg = \"abcdefghijklmnopqrst\";\n\t\tBinaryMessage newBinaryMessage = new BinaryMessage(msg);\n\t\tResultBean resultCode = new BCPBean(\"0\");\n    \t\n    \tlogger.log(Level.INFO, \"Sending binary message with timestamp \"+Calendar.getInstance().getTime());\n \t\tnewBinaryMessage.setTimestamp();\n\t\tNewHolderPane newHolderPane = new NewHolderPane();\n        NewHolderPane.setContainerHolder(newHolder);\n        ClientInterface ci",
            "finish_reason": "length"
        }
    ],
    "id": "5aa7d918-f8a7-4455-bfe5-5ede51c45c94",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_0Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public static Logger getLogger() {\n        return logger;\n    }\n}\n",
    "test_prompt": "// ModernChatServer_0Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#getLogger()} method.\n*/\nclass ModernChatServer_0Test {",
    "time_taken": 39.2083306312561,
    "usage": {
        "prompt_tokens": 1107
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t\n    public static UsersBD usersBD = null;\n\n    @Test\n    public void Test1() throws Exception {\n\n        System.out.println(this.ping());\n    }\n}\n\n// ClientInterface_1Test_1.java\nclass ClientInterface_1Test_1 extends UnicastRemoteObject implements ClientInterface {\n\n    public ClientInterface_1Test_1() throws RemoteException {\n\n        try {\n            Naming.rebind(\"/\", this);\n        } catch (NamingException e) {\n            e.printStackTrace();\n        }//System.out.println(\"binding OK\");\n    }\n\n    public static Hashtable<String, String> getMessageAndReply(String content, String reply) throws RemoteException, java.rmi.RemoteException {\n        return (Hashtable<String, String>)RemoteMethod.call(\"/\",\n                \"/\",\n                \"getMessageAndReply\",\n                1, 1, new String[]{content, reply}\n        );\n\n    }\n\n    public static Hashtable<String, String> getMessageAndReply(String content, String reply, String server) throws RemoteException, java.rmi.RemoteException {\n        return (Hashtable<String, String>)RemoteMethod.call(\"/\",\n                \"/\",\n                \"getMessageAndReply\",\n                1, 1, new String[]{content, reply, ICConstant.ServerSettingBean.getServerName() + \"/\" + server}\n        );\n\n    }\n}\n\npublic class Main {\n    public static String testString = null;\n\n    public static void main(String[] args) throws Exception {\n        System.setSecurityManager(null);\n        JOptionPane.setDefaultInitialLocation(new java.awt.Point(200, 100));\n\n        new ClientInterface_1Test_1(1);\n        new ClientInterface_1Test_2(1);\n//        new ClientInterface_2(1);\n        new ClientInterface_3();\n        new ServerInterface_1Test();\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\tprivate ServerInterface _server;\n\t\t\n\t\t\n\t\t/**\n\t\t * Default no args constructor\n\t\t */\n\t\tpublic ModernChatServer_1Test() {\n\t\t}\n\n\t\t/**\n\t\t * Main Entry Point of the Thread which runs for ping thread\n\t\t */\t\n\t\tpublic void main() {\n\t\t\ttry {\n\t\t\t\tjavax.swing.SwingUtilities.invokeAndWait(this); \n\t\t\t} \n\t\t\tcatch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t/**\n\t * The constant USER_A_NAME must be an valid user name. It cannot be empty string.\n\t */\n    public String USER_A_NAME = new String(\"Hello\");\n    /**\n     * The constant USER_A_EMAIL represents the email address of a existing user. It must not be\n     * empty string.\n     */\n    public String USER_A_EMAIL = \"kahui.paul@kahui.net\";\n    /**\n\t * The constant CLOSE_CLIENTS_CMD. The boolean value indicates to stop the chat client\n\t * thread.\n\t */\n    public boolean CLOSE_CLIENTS  = false;\n    /**\n\t\t * The constant PING_CLIENTS_CMD. It means all the chat clients need to do a pong.\n\t */\n    public String PING_CLIENTS_CMD = \"ping\";\n    /**\n\t * The constant LOGIN_USER. The boolean value indicates to login a user.\n\t */\n    public boolean LOGIN_USER  = false;\n\t/**\n    * The constant SERVER_THREAD_PING. The boolean value indicates to test if it's a client\n    * thread that needs to do a server ping on connection.\n    */\n    public boolean SERVER_THREAD_PING = true;\n    /**\n\t * The int value is the time between server refreshes.\n\t */\n    public Hashtable<String, String>  RES_THUMB  = new Hashtable<>();\n    /**\n    * The int value is the time between server refreshes.\n    */\n    public Hashtable<String, String>  SER_THUMB  = new Hashtable<>();\n    /**\n    * The name of the file for a room. This file is a temporary file created during testing\n    */\n    public String ROOM_ROOT    = \"A_NEW_ROOM_NAME\";\n\t/**\n\t* The name of the file used in chat login. This file is a temporary file created during\n\t* testing (should be located in the chat directory)\n\t*/\n    public String CLIENT_ROOT  = \"A_NEW_CLIENT_ROOT\";\n    /**\n\t* The name of the file used in chat update status. This file is a temporary file created while\n\t* testing\n\t*/\n    public String STATUS_ROOT  = \"A_NEW_STATUS_ROOT\";\n    /**\n\t* The name of the new room. This is a name of the new room which will be used in the file\n\t* {@link #ROOM_ROOT} (if not exist then a new room is created).\n\t*/\n    public String NEW_ROOM_A_NAME = \"A_NEW_ROOM_A_NAME\";\n    /**\n\t* The name of the new room. This is a name of the new room which will be used in the file\n\t* {@link #ROOM_ROOT} (if not exist then a new room is created).\n\t*/\n    public String ROOM_A_NAME  = \"A_ROOM_A_NAME\";\n\t/**The time to run the main testing thread. */\n    public int TIME_REFRESH_ME  = 60;\n    /**\n    * The time to run this test.\n    */\n    public long TEST_TIME = 60 * 1000 * 1;\n\n    /**\n\t* This file creates a new file for chat server logs and creates a temporary file to\n\t* check if the files are actually not there.\n\t*/\n    public static final String CHAT_LOG_MESSAGES_DIR = CLIENT_ROOT + \"/chat-log/\" + new StringEncoder64().encode(String.valueOf(System.currentTimeMillis()));\n    /**\n\t* The list of existing test messages.\n\t*/\n    private static Vector<JOptionPane.OptionPane> LOG = new Vector<>();\n    /**\n\t* The file to be used by the server when it writes to the chatlog files.\n\t*/\n    private static String CHAT_LOG_PATH  = \"CHAT_LOG\"; \n    /**\n\t*",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t\n\tfinal String BASE_URL = \"http://b1.net:1234/b1\"; // base url address for all the test tests\n\tfinal String RMI_URL = BASE_URL + IConstant.RMI_URL;\t\n\tfinal String RMI_SERVICE_PASS = BASE_URL + IConstant.RMI_SERVICE_PASS;\n\tfinal String RMI_SERVICE_PASS_PASS = BASE_URL + IConstant.RMI_SERVICE_PASS_PASS;\n\n\t// private Logger log;\n\t// Constructor \n\t/**\n\t* @param args arguments are the port number of the server and the host name.\n\t* @throws java.rmi.RemoteException\n\t* @throws osa.ora.server.BeanServerNotFoundException\n\t*/\n\tpublic static void send_ping_request(String port, String host) throws RemoteException, Exception {\n\t\t//log.info(\"RMI RPC port is \" + port + \" and host is \" + host);\n\t\t\n\t\t//RMI client side\n        Registry[] registry = LocateRegistry.getRegistry(port, host);\n\t\t//Create a Client interface.\n\t\tClientInterface rmiClient = new ClientInterface(registry[0]);\n        //Create a Server thread to handle the RMI service call.\n        RemoteObject rmiServer = UnicastRemoteObject.exportObject(rmiClient, 0); \n        //Start the server.\n        Registry.receiveServerControl(rmiServer, null, null, 0);\n\t\t\n    //log.setLevel(Logger.SEVERE);\n    //log.setLevel(Level.ALL);\n    Calendar calendar = Calendar.getInstance();\n    log.severe(calendar.get(calendar.HOUR_OF_DAY)+\" \"+calendar.get(calendar.MINUTE)+\" \"+calendar.get(calendar.SECOND)+\" \"+calendar.get(calendar.MILLISECOND)+\" \"+calendar.getTime() + \":\"\n    \t\t+host+\":\"+port);\n    //Thread.sleep(5000);\n    }\n    \n}\nclass ClientInterface {\n\tClientInterface(Registry registry) throws RemoteException {\n\t\t\n\t}\n\t\n}\n\nclass ServerSettingBean {\n\tstatic ServerConnectionBean[] BEANS = {\n\t\t\tnew UserSettingBean(\"user1\"),\n\t\t\tnew UserSettingBean(\"user2\")\n\t};\n\tstatic void sendUpdateStatus(ServerConnectionBean bean) {\n\n\t\t// Send status of all users\n\t\tVector<String> v = bean.getAllUsers();\n\t\tfor (int i=0; i<v.size(); ++i) {\n\t\t\tString s = (String) v.get(i);\n\t\t\tSystem.out.println(s);\n\t\t\tSystem.out.println(bean.getUserIndex(s) == i);\n\t\t\tRemoteBean beanRemote = bean.GetRemoteBean(s, null);\n\t\t\tSystem.out.println(beanRemote.getPassword());\n\t\t\tSystem.out.println(beanRemote!= null? (beanRemote instanceof B2_UserBean? \"remote\" : \"local\") : \"un\");\n\t\t}\n\t\tbean.setChanged();\n\t\t\n\t};\n}\nclass UserSettingBean {\n\tstatic Vector<String> beans = new Vector<String>();\n\tstatic Vector<Object> beansLocal = new Vector<Object>();\n\t// static public boolean getPassword(String username, B2_UserBean bean){\n\tstatic public boolean getPassword(String username, ClientInterface client) throws RemoteException {\n\t\t//Bean beanRemote = client.GetRemoteBean(username, null);\n\t\t\n\t    try {\n\t\t\t//Get all users.\n\t\t\tbeansLocal.clear();\n\t\t\tbeansL2b(beansLocal);\n\t\t\t//Get the password for the user name.\n\t\t\tbean = new B2_UserBean(client);\n\t\t} catch (Exception exc) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\texc.printStackTrace();\n\t\t}\n\t\treturn true;\n\t}",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\tString serverName;\n\t\tString msgHost;\n\t\tBinaryMessage message;\n\t\tServerSettingBean settingBean;\n\t\tpublic StringEncoder64 keyF = new StringEncoder64();\n\t\tSimpleFormatter sfLog = new SimpleFormatter();\n\n\n\t\t@Test\n    //@FixJavadoc\n    //Get rid of the parameter\n\t\tpublic void ping() throws NamingException, RemoteException{\n\n        if(SettingBean.isEnableServer()){\n            Registry registry = LocateRegistry.createRegistry(SettingBean.port);\n        }\n\t\t//Get Server Setting\n\t\tregistry = LocateRegistry.getRegistry();\n\n        User user = new User(\"root\", \"\");\n        Hashtable<String, String> userInfo = (Hashtable<String, String>)user.getUserInfo();\n        Integer userInfoArray[] = new Integer[2];\n        userInfoArray[0] = (Integer)userInfo.get(SettingBean.User0) ;\n        userInfoArray[1] = Integer.valueOf(SettingBean.User1);\n        \n\n        SettingBean.setServer_host(serverName);\n        SettingBean.setHost(msgHost);\n        SettingBean.setUser(userName(StringEncoder64.hexString(userInfoArray)));\n        SettingBean.setPasswd(StringEncoder64.hexString(userInfoArray));\n\n\t\ttry {\n\n\t\t\tnew ServerSettingBean(SettingBean.port, SettingBean.domain, SettingBean.user).launch();\n\n\t\t\twhile (SettingBean.IsOnline()) {\n\n\t\t\t\tsynchronized (sockLock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsockLock.wait();\n                    } catch (InterruptedException ie) {\n                        fail(ie.getMessage());\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsendOnlineRefresh();\n\n\t\t\t\t\tSystem.out.println(\"ServerName :\" + SettingBean.server_name);\n\t\t\t\t\tSystem.out.println(\"Host      :\" + SettingBean.host);\n\t\t\t\t\tSystem.out.println(\"IP       :\" + SettingBean.ip);\n\t\t\t\t\tSystem.out.println(\"SendHost  :\" + SettingBean.send_host);\n\t\t\t\t\tSystem.out.println(\"UserName :\" + SettingBean.user);\n\t\t\t\t\tSystem.out.println(\"Password :\" + SettingBean.passwd);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\n\t\t\t\t\t} catch (InterruptedException ie) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsockLock.notify();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\n\t\t\te.printStackTrace();\n\t\t}\n\n\n\n    }\n    /**\n    * The name of the logginbean which contains the userName\n    * @param userInfo\n    * @return\n    */\n\tpublic static String userName(StringEncoder64 userInfoArray) {\n\n        //The last element of userInfoArray is always as an \"null\" string\n\t\ttry {\n        \tuserNameByIP(userInfoArray[Integer.valueOf(SettingBean.ip)].getBytes());\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        } catch (UnsupportedEncodingException e1) {\n            e1.printStackTrace();\n        } catch (URISyntaxException e1) {\n            e1.printStackTrace();\n        } catch (RemoteException e1) {\n        \tif(SettingBean.IsConnected()) {\n            \treturn \"Invalid Host\";\n            }\n            else{\n                e1.printStackTrace();\n            }\n        }\n\n        return new String(userInfoArray[Integer.valueOf(SettingBean.user)].getBytes());\n\t}\n\n\t/**\n\t * If the specified host is an IP address it will be mapped to the corresponding user's ip address\n\t * @param bytes\n\t * @return\n\t * @throws IOException\n\t * @throws URISyntaxException\n\t */\n\tpublic static String userNameByIP(byte[] bytes) throws IOException, URIS",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t\n\n    private final String serverName = \"server1\";\n    private final String serverPonateName = \"server1\";\n    private final String chatPassword = \"123\";\n\n    private final String user1EmailId = \"123\";\n\n    private ClientInterface client1, client2, client3;\n\n    private ServerSettingBean set1 = new ServerSettingBean();\n\n    private ServerInfoBean info10 = new ServerInfoBean();\n\n\n    private final String server1Password = StringEncoder64.encode(serverPonateName);\n    //private final String password = \"123\";\n\n    private UsersBD users1;\n\n    private boolean connect = false;\n\n    @Override\n    public void run() {\n\n        // Setup the objects\n        try {\n            //server1\n            final LocateRegistry registry;\n            registry = (LocateRegistry) Naming.lookup(\"rmi://localhost/RMI//B2\");\n\n            registerUser((String) Naming.lookup(\"b2/user/user1\"), user1EmailId);\n            registerServer((String) Naming.lookup(\"b2/server1/server1\"), serverName, user1EmailId, serverId, set1, info10);\n\n            assertTrue(StringEncoder64.validate(password));\n\n             //registerClient((String) Naming.lookup(\"b2/server1/server1\"), client1, user1EmailId);\n            // ClientProxy clientProxy = new ClientProxy(registry, client1, false, user1EmailId);\n\n            connect = true;\n            assertTrue(\"Login has failed. Server is already running.\", info10.isLoggedOn());\n\n        } catch (Exception e) {\n            System.err.println(\"Exception: \" + e.getClass().getName() + \" \" + e.getMessage());\n            e.printStackTrace();\n            System.exit(2);\n        }\n\n    }\n\n    @Override\n    public void createServer(Vector<String> users, Vector<String> groups) {\n\n/*        try {\n            final ClientProxy clientProxy = new ClientProxy(registry, client1, false, user1EmailId);\n\n            groups = new Vector<>(groups.size());\n            //groups.add(\"1\");\n            groups.add(\"2\");\n            groups = new Vector<>(users.size());\n            users.add(\"user1\");\n\n            final JOptionPane pane = new JOptionPane();\n            pane.setOptions(new int[]{JOptionPane.DEFAULT});\n            pane.setOption(JOptionPane.NO_OPTION, \"\");\n            pane.setOption(JOptionPane.OK_OPTION, \"\");\n            pane.setVisible(true);\n\n            clientProxy.setGroup(\"Group of Users\");\n            clientProxy.setUsers(users);\n            clientProxy.setGroups(groups);\n            clientProxy.setServer(\"Server of Users\");\n\n            final UnicastRemoteObject server = ( UnicastRemoteObject ) registry.lookup(serverName);\n\n            log(\"creating server\");\n\n            try {\n                ((ServerInterface) server).register(clientProxy);\n\n                setUser(user1EmailId, clientProxy.getUserId());\n\n                System.out.println(\"Server successfully created: \" + server.getServerId());\n\n            } catch (Exception e) {\n                System.err.println(\"Error : \" + e.getClass().getName() + \" : \" + e.getMessage());\n                e.printStackTrace();\n                System.exit(2);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Server error: \" + e.getClass().getName() + \" : \" + e.getMessage());\n            e.printStackTrace();\n            System.exit(2);\n        }*/\n\n\n            } catch(Exception e) {\n           System.err.println(\"An error occured!!\");\n           e.printStackTrace();\n           System.exit(1);\n}\n\n    @Override\n    public void destroyServer() {\n        try {\n            logout(client1);\n            log",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\tVector<String> logins = new Vector<String>();\n\t\tVector<String> updates = new Vector<String>();\n\t\tVector<String> users = new Vector<String>();\n\t\tServerInterface chatServer;\n\t\tServerInterface clientServer;\n\n\t // create a chat server\n//\t\tRegistry registry = LocateRegistry.getRegistry();\n        Registry registry = null;                         // to get rid of dead server\n        \n//\t\ttry {\n//\t\t\t// create a chat server using the RMI registry.\n//\t\t\t// the registry can be used to get list and put of all users and rooms in same namespace\n//\t\t\tregistry = LocateRegistry.getRegistry();\n//\t\t\tchatServer = UnicastRemoteObject.exportObject(new chatServer(), \"ChatServer\");\n//\t\t\tregistry.rebind(\"ChatServer\", chatServer);\n//\t\t} catch (NoClassDefFoundError e) {\n//\t\t\tlog.log(Level.WARNING, \"Can't use RMI registry, this is a bug in J2ME\");\n//\t\t\te.printStackTrace();\n//\t\t\tassertTrue(\"Can't use RMI registry\", false);\n//\t\t}\n\n//\t\tassertTrue(\"ChatService is not properly bound.\", \n//                        chatServer instanceof ServerInterface);\n//\t\tassertTrue(\"ChatServer is not correctly registered.\", \n//                        chatServer.equals(Registry.ROOT_OBJECT));\n\n//\t\tRegistry.addServer(\"ChatServer\", chatServer);\n\n\t\t\n\n\t /**\n\t * @throws java.rmi.NamingException\n\t * @throws java.rmi.RemoteException\n\t */\n    @Test\n    public void test() throws NamingException, RemoteException, BadServerResponse {\n        // register and create a chat interface\n        chatServer = UnicastRemoteObject.createRemoteObj(\"ChatServer\", \n        \t\tStringEncoder64.encoding);\n\t\t//chatServer.main((String[]) null);   // the default initialization\n\n\t\tClientInterface i = new ClientInterface(\"ChatServer\", \"admin@test\",\n\t\t\t\tStringEncrypter.encoder64, users);\n        chatServer.register(i);\n        Registry.addInterface(i.getRegistryName(), i);\n\n        // create a client object for the administrator\n        i = new ClientInterface(\"ChatServer\", \"client@test\", \n            StringEncrypter.encoder64, chatServer);\n\n\t\t// register and create a chat interface\n\t\tIUserInterface ui = new usersBD();\n\t\tClientInterface c = new ClientInterface(\"ChatServer\", \n        \t\tStringEncoder64.encoder64, ui, users);\n\t\t//register the user interface, we do not use ui, but client@test is the same\n        try {\n            ui.register(c);\n        } catch (RemoteException e) {\n            assertTrue(false, \"Can't register user to the server\");\n        }\n        ui = null;\n\t\t\n        c = new ClientInterface(\"ChatServer\", \"client@test\",\n    \t\tStringEncrypter.encoder64, chatServer);\n\n\t\t// create a client object for the administrator\n    \ti = new ClientInterface(\"ChatServer\", \"admin@test\",\n    \t\t\tStringEncrypter.encoder64, users);\n\n    \ttry {\n    \t\tusersBD usersBD = User.getUsersBD();\n    \t\tVector<User> usersBd = usersBD.obtainAll();\n    \t\tusersBD.addUser(\"testUser1\");\n    \t\tusersBD.addUser(\"testUser2\");\n    \t\tusersBD.addUser(\"testUser3\");    \t\t\n    \t\tusersBD.removeUser(\"testUser1\");\n    \t\tusersBD.addUser(\"testUser4\");\n    \t\tusers.add(usersBd);\n    \t} catch (RemoteException e) {\n    \t\te.printStackTrace();\n\t\t\tassertTrue(false, \"Can't fetch users.\");  \n    \t}\n        \n        users.add(ui);                                    \n    \ttry {\n    \t\tusersBd = User.getUsersBD();\n    \t\tusersBd.remove(usersBd.size() - 1);\n\n    \t}",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\tprivate ClientInterface ci;\n\t\tprivate static final int PING_INTERVAL = 30;\n\t\tprivate static final int TIMEOUT = 120;\n\t\tprivate Vector<String> currentClients;\n\t\tprivate Vector<BinaryMessage> currentMsgs;\n\t\tprivate Vector<String> tempMsgs;\n\n\t\tprivate User loggedUser;\n\t\tprivate String currentServerName;\n\t\tprivate Logger log;\n\t\tprivate String loginError;\n\t\tprivate String loginSucceeded;\n\t\tprivate int onlineCount;\n\t\tprivate int onlineNum;\n\t\tprivate User newUser;\n\t\tprivate String password;\n\t\tprivate String unLoginError;\n\n\n\t\t@Test\n\t\tvoid pingAllUsers() {\n\t\t\tSystem.out.println(\"Test: ServerTest.pingAllUsers\");\n\n\t\t\tClientInterface ci = new ClientInterface();\n\t\t\ttry {\n\t\t\t\tci.setServerName(currentServerName);\n\t\t\t\tci.pingAllUsers();\n\t\t\t} finally {\n\t\t\t\tci.shutdown();\n\t\t\t}\n\t\t\tOnlineCount.setOnlineCount(onlineCount);\n\t\t\tcurrentClients = ci.getClientManager().getClients();\n\t\t\tonlineCount = OnlineCount.getOnlineCount();\n\n\t\t\tassertTrue(\"Ping successful\", ci.getClientManager().getPingResult() == ClientManagerImpl.PASSWORD_PASSWORD);\n\t\t\tassertTrue(\"Ping successful\", ci.getClientManager().getPingResult(password) == \"PASSWORD_PASSWORD\");\n\n\t\t\tcurrentUsersMsgCount.set(0);\n\t\t\tcurrentClientsMsgCount.set(0);\n\t\t\tSystem.out.println(\"Client count : \" + currentUsersMsgCount.get() + \" / \" + currentClientsMsgCount.get());\n\t\t}\n\n\t\t@Test\n\t\tvoid pingAllClients() {\n\t\t\tSystem.out.println(\"Test: ServerTest.pingAllClients\");\n\n\t\t\tClientInterface ci = new ClientInterface();\n\t\t\ttry {\n\t\t\t\tci.setServerName(currentServerName);\n\t\t\t\tci.pingAllClients();\n\t\t\t} finally {\n\t\t\t\tci.shutdown();\n\t\t\t}\n\t\t\tonlineCount = OnlineCount.getOnlineCount();\n\n\t\t\tassertTrue(\"Ping successful\", ci.getClientManager().getPingResult() == ClientManagerImpl.PASSWORD_PASSWORD);\n\t\t\tassertTrue(\"Ping successful\", ci.getClientManager().getPingResult(password) == \"PASSWORD_PASSWORD\");\n\n\t\t\tcurrentClientsMsgCount.set(0);\n\t\t\tcurrentUsersMsgCount.set(0);\n\t\t}\n\n\t\t@Test\n\t\tvoid pingServer() {\n\t\t\tSystem.out.println(\"Test: ServerTest.pingServer\");\n\n\t\t\tRegistry registry = createTestRegistry();\n\t\t\ttry {\n\t\t\t\tRegistry.bind(Registry.HOST, currentServerName, registry);\n\n\n\t\t\t\tfinal String encoding = StringEncrypter.getConverter();\n\t\t\t\tlog = Logger.getLogger(StringEncrypter.class);\n\t\t\t\tlog.setLevel(Level.ALL);\n\n\t\t\t\tsendPing();\n\n\t\t\t\tif (currentServerName.equals(log.getServer(Logger.getLogger(StringEncrypter.class)))\n\t\t\t\t\t\t&& currentClientsMsgCount.get() == 0\n\t\t\t\t\t\t&& currentUsersMsgCount.get() == 0) {\n\t\t\t\t\tassertEquals(\"Ping failed\", \"PASSWORD_PASSWORD\", registry.invoke(log.getServer(Logger.getLogger(StringEncrypter.class)), \"ping\", new Object[]{});\n\t\t\t\t} else {\n\t\t\t\t\tboolean failed = (registry.invoke(log.getServer(Logger.getLogger(StringEncrypter.class)), \"ping\", new Object[]{})).equals(\"Pass Password\");\n\t\t\t\t\tif (!failed) {\n\t\t\t\t\t\tassertEquals(\"Ping failed\", \"PASSWORD_PASSWORD\", registry.invoke(log.getServer(Logger.getLogger(StringEncrypter.class)), \"ping\", new Object[]{});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tString userToFail = registry.lookup(\"user/0/login\");\n\t\t\t\t\t\tloginSucceeded = registry.invoke(log.getServer(Logger.getLogger(StringEncrypter.class)),\n\t\t\t\t\t\t\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t\n\t@Test\n\tvoid pingThread() {\t\n\t\tClientInterface iClient = ClientInterface\n\t\t\t\t.getInstance();\n\t\tiClient.ping();\n\t}\n\n\t@Test\n\tvoid pingNoThread()\n\t{\n\t\ttry {\n\t\t\tRegistry myReg  = (Registry)Naming.lookup(\"rmi:///registry\");\n\t\t} catch (RemoteException e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Client must be running on RMI.\");\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void pingByDegreeId() throws InterruptedException {\n\t\tGroup newGroup = new Group();\n\t\tnewGroup.setName(\"Hello1G\");\n\t\tnewGroup.setType(IConstant.GROUP_NAMES[1]);\n\t\tnewGroup.setState(IConstant.GROUP_STATE_NOTSET);\n\t\tHashtable <String,Object> propeties = new Hashtable <String, Object>();\n\t\tGroup g = ((RemoteGroup)newGroup).newInstance(\n\t\t\t\tnew User (IConstant.USER_FIRSTNAME,\n\t\t\t\tIConstant.USER_LASTNAME_NOTSET,\n\t\t\t\tIConstant.USER_EMAIL,\n\t\t\t\tIConstant.USER_PW_NOTSET));\n\t\tg.setState(IConstant.GROUP_STATE_ONLINE);\n\t\tnewGroup.setProperty(IConstant.GROUP_PROPERTY_NAME, g)\n\t\t\t\t.setProperty(IConstant.GROUP_PROPERTY_SESSION_ID, 123);\n\n\t\tClientInterface iClient = ClientInterface\n\t\t\t\t.getInstance();\n\t\tVector<User> users = iClient.getUsers();\n\n\t\tClientInterface.getInstance().initGroup(\n\t\t\t\tnewGroup.getName(), newGroup.getType(), UsersBD.GROUP_MEMORY);\n\n\t\tiClient.getGroupProperty(newGroup.getName(), UsersBD.GROUP_PROPERTY_SESSION_ID);\n\n\t\tArrayList<String> results = new ArrayList<String>();\n\t\t\n\t\ttry {\n\t\t\tfor (Enumeration<User> usersEnum = users.elements();usersEnum.hasMoreElements();) {\n\t\t\t\tUser mUser = usersEnum.nextElement();\n\t\t\t\tif (\n\t\t\t\t\t\t(mUser.getPassword().length() == 0) && \n\t\t\t\t\t\t(mUser.getName().length() < 5)\n\t\t\t\t) {\n\t\t\t\t\tresults.add(mUser.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (RemoteException e) {\n\t\t}\n\t\t\n\n\t\t\n\t\tif (p2 == null){\n\t\t\tp2 = new Hashtable <String,Object>();\n\t\t\tp2.put (\"p2\", results);\n\t\t\tClientInterface.getInstance().addGroupProperty(\n\t\t\t\tClientInterface.GROUP_PROPERTY_NAME, users, UsersBD.GROUP_MEMORY);\n\t\t} else {\n\t\t\tVector<String> p2V = new Vector<String>();\n\t\t\tfor (String s : p2.keySet()) {\n\t\t\t\tp2V.add(s);\n\t\t\t}\n\t\t\tp2V.add(ClientInterface.GROUP_PROPERTY_NAME);\n\n\t\t\tHashtable<String,Object> p2h = new Hashtable<String,Object>();\n\t\t\tp2h.putAll(p2);\n\n\t\t\tArrayList<String> p2a = new ArrayList<String>();\n\t\t\t// add ids to array\n\t\t\tString[] ids = (String[])p2h.keySet().toArray(\n\t\t\t\t\tnew String[0]);\n\t\t\tfor (final String id : ids) { // loop\n\t\t\t\tp2a.add(id + \":\" + p2V.removeFirst());\n\t\t\t}\n\t\t\tp2 = p2h;\n\t\t\tp2V.add(\"P2:\");\n\t\t\tp2V.addAll(p2a);\n\t\t\tClientInterface.getInstance().setGroupProperty(\n\t\t\t\t\tClientInterface.GROUP_PROPERTY_NAME, users, UsersBD.GROUP_MEMORY);\n\t\t}\n\t\t\n\t\t\n\t\tiClient.setGroupProperty(ClientInterface.GROUP_PROPERTY_NAME,\n\t\t\tnew Group",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n\n// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {\n\t\t\n    @Test\n    public void testPing() {\n        Real.put(\"Server.ping()\", new ServerBean_Ping());\n        assertTrue(pinger.ping());\n        Real.put(\"isPing\", Boolean.valueOf(pinger.ping()));\n        assertNotNull(pinger.getPing());\n        \n        Real.put(\"Server.ping()\", new ServerBean_Ping());\n        assertTrue(pinger.ping());\n        Real.put(\"isPing - 1\", Boolean.valueOf(pinger.ping()));\n        assertFalse(Real.get(isPing));\n        for (int i = 0; i < 10000.50; i++) {\n            Real.put(\"Server.ping()\", new ServerBean_Ping());\n            assertTrue(pinger.ping());\n            Real.put(\"isPing - 2\", Boolean.valueOf(pinger.ping()));\n            assertTrue(pinger.getPingStatus());\n        }\n      \n        Real.put(\"isPing - 3\", Boolean.valueOf(pinger.ping()));\n        assertFalse(Real.get(isPing));\n        Real.put(\"isPing\", Boolean.valueOf(pinger.getPingStatus()));\n        assertFalse(Real.get(isPing));\n        Real.put(\"send\", Send.valueOf(pinger.getSend()));\n        Real.put(\"send - 1\", Send.valueOf(pinger.getSendStatus()));\n        Real.put(\"send - 2\", Send.valueOf(pinger.getSendStatus()));\n        Real.put(\"send - 3\", Send.valueOf(pinger.getSendStatus()));\n        Real.put(\"send - 4\", Send.valueOf(pinger.getSendStatus()));\n        \n        Real.put(\"isSend\", Boolean.valueOf(pinger.getSendStatus()));\n        Real.put(\"isSend - 1\", Boolean.valueOf(pinger.getSendStatus()));\n        \n        Real.put(\"newRoom\", new Room(0, 3, \"Test Room\"));\n        Real.put(\"newGroup\", new Group(\"New group!\", \"Group name!\"));\n        Real.put(\"result\", ResultBean.valueOf(pinger.getResult()));\n    }\n    \n    @Test\n    public void testRun() throws InterruptedException {\n        Real.put(\"start\",  start.value());\n        Real.put(\"login\",   Login.value);\n        Real.put(\"getFriendsUsers\", GetFriends.value);\n        Real.put(\"send\",     Send.valueOf(start.getSend()));\n        Real.put(\"getFriends\", GetFriends.value);\n        Real.put(\"getFriends - 1\", GetFriends.value);\n        Real.put(\"getFriends - 2\", GetFriends.value);\n        Real.put(\"getFriends - 3\", GetFriends.value);\n        Real.put(\"getFriends - 4\", GetFriends.value);\n        Real.put(\"getFriends\", GetFriends.value);\n        Real.put(\"getFriends - 1\", GetFriends.value);\n        Real.put(\"getFriends - 2\", GetFriends.value);\n        Real.put(\"getFriends - 3\", GetFriends.value);\n        Real.put(\"getFriends - 4\", GetFriends.value);\n        \n        Real.put(\"init\", \"start\");\n        Real.put(\"send\", Send.valueOf(ping.getSend()));\n        Real.put(\"updateGroup\", new ServerSettingBean(true));\n        Real.put(\"getUser\", GetUser.value);\n        Real.put(\"addUser\", AddUser.value);\n        Real.put(\"removeUser\", RemoveUser.value);\n        \n        Real.put(\"deleteUser\", \"deleteUser\");\n        Real.put(\"send\", Send.valueOf(send.getSend()));\n        Real.put(\"send - 1\", Send.valueOf(send.getSendStatus()));\n        Real.put(\"send - 2\", Send.valueOf(send.getSendStatus()));\n        Real.put(\"send - 3\", Send.valueOf(send.getSendStatus()));\n        Real",
            "finish_reason": "length"
        }
    ],
    "id": "e1524841-bf03-46d4-84e5-6c3ad4c6e78d",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_1Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean ping() {\n        return true;\n    }\n}\n",
    "test_prompt": "// ModernChatServer_1Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#ping()} method.\n*/\nclass ModernChatServer_1Test {",
    "time_taken": 39.22322940826416,
    "usage": {
        "prompt_tokens": 1101
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n\t//\n    @Test\n    public void test() throws Exception {\n        new JOptionPane(new JTextMessage(\"Welcome to \" + getClass().getSimpleName() + \"!\")).setVisible(true);\n        ClientInterface cf = new ClientInterface(false, false, null);\n        ClientInterface oldClientInterface = null;\n        try {\n\t        String hostName = java.net.InetAddress.getByName(org.junit.platform.comm.nio.naming.NamingConstants.JUNIT_HOSTNAME)\n\t               .getHostAddress();\n            System.out.println(\"Host Address for the JVM : \" + hostName);\n            StringEncoder64.decodeString(\"Test Test Message\");\n            System.out.println();\n\n            String addr = \"localhost\";\n            String host = hostName;\n\n            String encryptionKey = StringEncrypter.getInstance(\"*_PASSWORD\").encrypt('*');\n            int port = 2468;\n            String encryptedPass = StringEncrypter.getInstance(\"*_PASSWORD\").encrypt(passwordEnc.decrypt(encryptionKey));\n\n            //set connection parameters\n            Registry reg = LocateRegistry.getRegistry2(addr, port);\n\n            //set the key\n            String newEncryptionKey = StringEncrypter.getInstance(\"Test Test Message\").decrypt(encryptionKey);\n\n            //set encryption key\n            System.out.println(\"New encryption key \" + newEncryptionKey);\n\n            //set the cipher\n            System.setProperty(\"crypto.dh.p\", newEncryptionKey);\n\n            //server setting.\n            ServerSettingBean settingBean = new ServerSettingBean();\n\n\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t/**\n\t\t * Test method for {@link java.lang.Object#toString()}.\n\t\t */\n        @Test\n    public void testToString() {\n        GetLogger logger = new GetLogger();\n        logger.log(Level.INFO, \"toString() test\");\n    }\n    \n\t/** Test method for {@link java.lang.Object#getMessage()}. */\n\t@Test\n    public void testGetMessage() {\n\t\tOldMockUsersBean newUsersBean = new OldMockUsersBean();\n        mockNewUsers = new UsersBD(newUsersBean);\n    \tmockNewUsers.execute();\n        assertNotNull(\"Test\", mockNewUsers.getMessage());\n    }\n    \n\t/** Test method for {@link java.lang.Object#getMessage()}. */\n\t@Test\n    public void testGetMessage2() {\n\t\tOldMockUsersBean newUsersBean = new OldMockUsersBean();\n        \n        mockNewUsers = new UsersBD(newUsersBean);\n        \n        //Get User from DB\n        String email = StringEncoder64.decodeStringUTF8(newUsersBean.getEmail());\n    \tmockNewUsers.setEmail(email);\n    \tmockNewUsers.execute();\n    \t\n    \tmockNewUsers = new UsersBD(newUsersBean);\n        \n        //Get User from DB\n        String pass = StringEncoder64.decrypt(newUsersBean.getPassword());\n    \tmockNewUsers.execute();\n    \t\n    \tString pass3 = StringEncoder64.decrypt(newUsersBean.getPassword());\n    \t\n        assertNot",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n    /**\n     * Sets up the network.\n     * @return\n     */\n\t@Test\n    public void setUp() {\n\t\ttry {\n\t\t\tString ipAdd = \"192.168.1.1\";\n\t\t\tipAdd = StringEncoder64.decodeStringUTF8(ipAdd);\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tString newIPAdd;\n                                         newIPAdd = StringEncoder64.decodeStringUTF8(\"\" + ipAdd + \"1\");\n\t\t\t\tipAdd = newIPAdd;\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tgetLogger().log(Level.SEVERE, \"\", t);\n\t\t\tassertTrue(false);\n\t\t}\n\t\tfor (int i=0; i< 10; i++){\n\t\t    String testIP = \"192.168.1.1\";\n\t\t    testIP = StringEncoder64.decodeStringUTF8(testIP);\n                User user = UsersBD.getInstance().getUsersByAddress(testIP)[0];\n\t\t    if (user!= null) {\n\t\t      assertTrue(false);\n\t\t    }\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t* Test login message.\n\t* @throws RemoteException\n\t*/\n    @Test\n    public void test_LoginMessage() throws RemoteException{\n        String name = \"test_LoginMessage\";\n        new User(1L, name);\n        String msg = \"Test message for the user. Please try again.\";\n        new TextMessage(2L, msg);\n\t}\n\t\n\t/**\n\t* Test login by password message.\n\t* @throws RemoteException\n\t*/\n    @",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n\t/**\n\t * Class for test methods of this class.\n\t*/\n\t@Test\n\tvoid testSignIn_01() {\n\t\tassert (signIn(createClient(\"oorandaid8\"), \"oorandaid8@hotmail.com\", \"pass\", \"127.0.0.1\"));\n\t}\n\t\n\t/**\n\t* Class for test methods of this class.\n\t* @throws RemoteException\n\t*/\n\t@Test\n\tvoid testSignIn_02() throws RemoteException {\n\t\tClientInterface cf1 = null;\n\t\ttry {\n\t\t\tcf1 = createClient(\"oorandaid8\");\n\t\t} catch (Exception exc) {\n\t\t\texc.printStackTrace();\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\tClientInterface cf2 = null;\n\t\ttry {\n\t\t\tcf2 = createClient(\"oorandaid6\");\t\t\t\n\t\t} catch (Exception exc) {\n\t\t\texc.printStackTrace();\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\tassert (!signIn(cf1, \"oorandaid8\", \"pass\", \"127.0.0.1\")); // sign in to ooradaid8 with wrong username and password.\n\t\tassert (signIn(cf2, \"oorandaid8\", \"pass\", \"127.0.0.1\")); // sign in to ooradaid6 with wrong username and password.\n\t}\n\t\n\tprivate ClientInterface createClient(String ipAddress) throws URISyntaxException, RemoteException {\n\t\tString[] hosts = {\"localhost\", ipAddress, \"127.0.0.1\"};\n\t\tString[] ports = {\"6379\", 12345, \"\"};\n\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t/**\n\t\t* SimpleFormatter : \n\t\t*/\n\t\tprivate SimpleFormatter formatter = new SimpleFormatter();\n\n\t/**\n\t* String Encoding :\n\t*/\n\tprivate StringEncoder64 serverBcEnc = new StringEncoder64();\n\tprivate StringEncoder64 clientBebEnc = new StringEncoder64();\n\n\t/**\n\t* Bc Encoding : \n\t*/\n\tprivate StringEncoder64 serverBebEnc = new StringEncoder64();\n\n\t/**\n\t* Bc Encoding :\n\t*/\n\tprivate ClientInterface connectedClient = null;\n\tprivate Vector<Integer> connectedClients;\n\t\n\t/**\n\t* Client Interface : \n\t*/\n\tprivate ClientInterface clientInterface = null;\n\n\t/**\n\t* Connection :\n\t*/\n\tprivate RealmConfig clientRealmConfig;\n\n\t/**\n\t* PasswordEnc : \n\t*/\n\tprivate StringEncoder64 clientPwEnc = new StringEncoder64();\n\tprivate String serverPwd = null;\n\n\t/**\n\t* Result : \n\t*/\n\tprivate ResultBean resultBean = null;\n\t\n\t/**\n\t* String Encrpyr : \n\t*/\n\tprivate SimpleFormatter formatter = new SimpleFormatter();\n\tprivate Hashtable<String, String> globalKeys = new Hashtable<>();\n\t\n\t/**\n\t* Hashtable : \n\t*/\n\tprivate Hashtable<String, String> localKeys = new Hashtable<>();\n\tprivate Hashtable<String, String> secretKeys = new Hashtable<>();\n\tprivate Hashtable<String, String> sessionKeys = new Hashtable<>();\n\n\t/**\n\t* Constants : \n\t*/\n\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n\t@Test\n\tvoid test1() throws URISyntaxException {\n\t\tinitServer();\n\t\tif (isServerRunning(\"TEST1\")) {\n\t\t\tint test_id = 1;\n\t\t\tString server_test = StringEncrypter.getInstance(\"TEST1\").encrypt(StringEncrypter.getInstance(\"TEST2\").encrypt(server_test));\n\t\t\tSystem.out.println(\"Server test is:\" + server_test);\n\t\t\twhile (test_id<=ServerSettingBean.MAX_CONNECTIONS) {\n\t\t\t\tString rmiServer_test = StringEncrypter.getInstance(\"TEST1\").encrypt(TEST1.get(test_id).getServer());\n\t\t\t\tSystem.out.println(\"RMI Server test is:\" + rmiServer_test);\n\t\t\t\tServerSettingBean.MAX_CONNECTIONS = TestEncounter.incrementNextInt(\"\" + ServerSettingBean.MAX_CONNECTIONS, ServerSettingBean.MAX_CONNECTIONS);\n\t\t\t\ttest_id++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Test\n\tvoid test2() throws URISyntaxException {\n\t\tinitServer();\n\t\tString s = StringEncrypter.getInstance(\"TEST2\").encrypt(StringEncrypter.getInstance(\"TEST3\").encrypt(StringEncrypter.getInstance(\"TEST4\").encrypt(server_test)));\n\t\tSystem.out.println(\"Server test is:\" + s);\n\t\twhile (s!=null &&!s.isEmpty()) {\n\t\t\tString server_test = StringEncrypter.getInstance(\"TEST2\").encrypt(StringEncrypter.getInstance(\"TEST3\").encrypt(StringEncry",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t/**\n * Basic thread class for sending user presence to the server.\n */\n    private static class ServerSendUserStatusThread extends SendUserUpdatedStatusThread {\n        /**\n         * Constructors.\n         * @param cf The {@link ClientInterface} to send message to.\n         */\n        ServerSendUserStatusThread(ClientInterface cf) {\n            super(cf);\n        }\n\n        /**\n         * Send user update to the server.\n         * @return the {@link ClientInterface} as String.\n         * @throws RemoteException thrown if network communication exception.\n         */\n        public String send() throws RemoteException {\n            try {\n\t\t\t\tThread.sleep(1000);\n            } catch (InterruptedException ex) {\n                 JOptionPane.showMessageDialog(null, ex.getMessage());\n            }\n            return \"I am here\";\n        }\n    }\n    /**\n    * Constructor for the server interface.\n    * @param bd The {@link UsersBD} as well as the server {@link ClientInterface}.\n    * @throws URISyntaxException\n    */\n    public ModernChatServer(UsersBD bd, ClientInterface cf) throws URISyntaxException {\n        super(bd, cf);\n    }\n\n    /**\n     * Test for {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n     */\n    @Test\n    public void TestSignIn() throws RemoteException {\n        new ServerSendUserStatusThread(null).start();\n        //1.sign in\n        BinaryMessage bm = new BinaryMessage();\n        bm.getBody().addMsg(\"hello\");\n        SendUserUpdatedStatusThread sendUserUpdatedStatusThread = new SendUser",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n    private static final Logger log = Logger.getLogger(\"Standard Test\");\n\t\n\tString[] secToken = null;\n\tHashtable<String, ClientInterface> connectedClients = new Hashtable<String, ClientInterface>();\n\tHashtable<Integer, Boolean> connectedClientsIPs = new Hashtable<Integer, Boolean>();\n\tString[] passwords = null;//Hashtable<String, Boolean>[];\n\tVector<BinaryMessage> users = new Vector<BinaryMessage>();\n\tVector<ResultBean> resultB = new Vector<ResultBean>();\n\tString[] rooms = null;//Vector<String];\n\tVector<User> usersForRoom = new Vector<User>();\n\tVector<User> lastUser = new Vector<User>();\n\tVector<ServerSettingBean> serverSettingB = new Vector<ServerSettingBean>();\n\tVector<IConstant> iconss = new Vector<IConstant>();\n\tVector<String> contacts = new Vector<String>();\n\t\n\t/**\n\t * @param params\n\t */\n\t@Test\n\tpublic void RunWithoutPassword() {\n\t\tGetUsersPasswordServerServer2_2Test serverServer = new GetUsersPasswordServerServer2_2Test();\n\t\tserverServer.startServer();\n\t}\n\t/**\n\t * @param params\n\t */\n\t@Test\n\tpublic void RunWithIncorrectPassword() {\n\t\n\t\tGetUsersPasswordServerServer2_2Test serverServer = new GetUsersPasswordServerServer2_2Test();\n\t\tserverServer.startServer();\n\t}\n\t/**\n\t * @param params\n\t */\n\t@Test\n\tpublic void RunWithIncorrectUser() {\n\t\n\t\tGetUsers",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\tstatic {\n            System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n\t\t\tStringEncoder64.add(\"UTF-8\");\n\t\t\tStringEncrypter.add(\"UTF-16LE\", \"UTF-16LE\");\n\t\t\tStringEncrypter.add(\"UTF-8\", \"UTF-8\");\n\t\t}\n\n\t\t//Private Variable which contain the client interface\n\t\t//this variable is used for unit testing\n        private ClientInterface cf;\n\n        /**\n         * Private Variable which contains the user instance\n         * this variable is used for unit testing\n         */\n        private User oldUser;\n\n        //Private Variable which contain the old password for the encrypted message\n        //this variable is used for unit testing\n        private String encOldPassword;\n\n        /**\n         * Private Variable which contain the new password for the encrypted message\n         * this variable is used for unit testing\n         */\n        private String encNewPassword;\n\n        /**\n         * Private Variable which contain the password for the encrypted message\n         * this variable is used for unit testing\n         */\n        private String passwordEnc;\n\n\t\t/**\n         * Private Variable which contain the client interface for the test\n         * of the server\n         */\n        private ClientInterface clientInterface;\n\n        /**\n         * Private Variable which contains the password for the encrypted message\n         * this variable is used for unit testing\n         */\n        private String passwords;\n\n        /**\n         * Private Variable which contains the old password for the encrypted message\n         * this variable is used for unit testing\n         */\n        private String passOldPassword;\n\n\t\t/**\n         * Private Variable which contains the old password for the encrypted message\n         * this variable is used for unit testing\n         */\n        private String passNewPassword;\n\n\t\t/**\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null && ipAddress!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user!= null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne!= null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd!= null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {\n\t\t\n\tprivate static final Logger LOG = Logger.getLogger(ModernChatServer.class.getName());\n\t\n\tprivate static final String EMAIL = \"testemj@gmail.com\"; //This is a testing only\n\tprivate static final String PASS = \"\"; //For the password only testing\n\tprivate static final String PASSED = \"passed\"; //Because with the password\n\tprivate static final String P_TTL = \"P_TTL\"; //This is a testing with the server.TTL value\n\tprivate static final String IP = \"127.0.0.1\"; //Parsing the ip of the localhost here\n\tprivate static final String IP2 = IP; //We don't parse the ip address of the remote host here, just IP\n\tprivate static final String PASSWORD = \"pass\";\n\tprivate static final String PASSWORD2 = \"pass2\";\n\tprivate static final String TTL = \"2d\";\n\tprivate static final String TTL2 = \"#2d#\"; //This is a testing with the server.TTL value\n\tprivate static final String IP_TTL = \"%6d %6d %6d %6d %6d P%6d#2f\";\n\tprivate static final String IP2_TTL = IP_TTL;\n\tprivate static final String IP3 = IP; //The remote host for the test case\n\tprivate static final String PASS2 = \"pass2\";\n\tprivate static final String PASS3 = \"pass3\";\n\tprivate static final String IP_IPADDRESS = \"%6d %6d %6d %6d %6d P%6d#2f\";\n\tprivate static final String IP_IPADDRESS2 = IP_IPADDRESS;\n",
            "finish_reason": "length"
        }
    ],
    "id": "47b8f3c2-c77c-4d02-8b64-9f4e07b751ee",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_2Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {\n        LoginBean loginBean = null;\n        //authenticate User\n        //DB authentication....\n        if (emailAddr != null && password != null && ipAddress != null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            //System.out.println(\"email=\"+email);\n            User user = authenticateUser(email, password);\n            if (user != null) {\n                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);\n                //System.out.println(\"ip=\"+ipAddress);\n                ClientInterface oldOne = connectedClients.get(user.getId());\n                if (oldOne != null) {\n                    String ipAdd = connectedClientsIPs.get(user.getId());\n                    if (ipAdd != null && ipAdd.equals(ipAddress)) {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);\n                        sendKickOffByLoginMessageThread.start();\n                    } else {\n                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);\n                        sendKickOffByLoginMessageThread.start();\n                    }\n                }\n                connectedClients.put(user.getId(), cf);\n                connectedClientsIPs.put(user.getId(), ipAddress);\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                loginBean = new LoginBean();\n                loginBean.setUser(user);\n                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                loginBean.setAuthToken(clientAuthToken);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n",
    "test_prompt": "// ModernChatServer_2Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.\n*/\nclass ModernChatServer_2Test {",
    "time_taken": 18.97510814666748,
    "usage": {
        "prompt_tokens": 1656
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t\n    private static final int MILLI_CALENDAR_DAYS_FOR_LOGGED_ONS = 30;\n    private static final int MILLI_CALENDAR_DAYS_FOR_NODE_OF_SERVER = 10;\n    private final String ENTRY_FOLDER = ChatServer.class.getResource(\"/\").toString();\n    private final String EXIT_FOLDER = ENTRY_FOLDER + \"/\";\n    private final String DATENAMES = \"/datename.dat.txt\";\n     \n    @Test\n    void setServerInterface() throws RemoteException {        \t\n        MainWindow w = new MainWindow(); \t\t\n        new ServerSettingBean();\n        new ClientInterface();\n    }\n    \n    @Test\n    void sendTestPass() throws Exception {\n        System.out.println(\"1. Send a text message for the Server, with an exception\");\n        String message = \"Hello I am I!\";\n        System.out.println(\"2. Login for the Server\");\n        LoginBean login = new LoginBean();        \t\n        User user = login.login();\n        BinaryMessage b = new BinaryMessage(message);\n        b.setUserId(user.getId());\n        b.setTimestamp(1);\n        \n        ResultBean result = sendSendMessage(login, b);       \n        if (result.getCode() == IConstant.TIMEOUT) {\n            log.warning(\"Server Time out!\");\n        }\n        System.out.println(\"3. Validate the message!\");\n        assertTrue(result.getCode() == IConstant.SUCCESS);\n    }   \t  \n    \n    @Test\n    void sendTestSendMessage() throws RemoteException {        \t        \n        System.out.println(\"1. Send a text message for the Server\");\n        String message = \"Hello I am I!\";\n        System.out.println(\"2. Login for the Server\");\n        LoginBean login = new LoginBean();        \t\n        User user = login.login();\n        \n        BinaryMessage b = new BinaryMessage(message);\n        b.setUserId(user.getId());\n        b.setTimestamp(1);\n        \n        ResultBean result = sendSendMessage(login, b);                \n        \n        System.out.println(\"3. Validate the message!\");\n        assertFalse(result.getCode() == IConstant.SUCCESS);\n        assertTrue(result.getCode() == IConstant.TIMED_OUT);\n    }    \t  \n    \n    @Test\n    void sendTestSendMessageAndUserUpdateStatus() throws RemoteException {        \t\n        System.out.println(\"1. Send a text message for the Server\");\n        String message = \"Hello I am I!\";\n        System.out.println(\"2. Login for the Server\");\n        LoginBean login = new LoginBean();        \t\n        User user = login",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t\n        \n\t/**\n\t* Method name: run\n\t* Description :\n\t* Input : - String email\n\t*  - String email from server in serverDB\n\t* Output : ResultBean\n\t* @throws RemoteException\n\t*/\n    @Test\n    public void run() throws RemoteException {\n\t\tString email = Realm_3Test.generateEmail();\n\t\tString password = Realm_3Test.createUser(email, \"123\");\n\t\tOldPassword = passwordEnc.encrypt(password);\n\t\tUser user = User.generateUser(email, Realm_3Test.createPasswordHash(password));\n\t\tBinaryMessage message = new BinaryMessage();\n\t\tmessage.setFrom(email);\n\t\tmessage.setTo(email);\n\t\tmessage.setId(user.getId());\n\t\tmessage.setContent(\"Testing Message \" + System.currentTimeMillis());\n\t\tuserBD.updateUser(user);\n\t\tResultBean result = new ResultBean(true, IConstant.SUCCESS, \"Result1\");\n\t\tSystem.out.println(\"The test has started\");\n\t\t// start test if the users not changed password\n\t\tresult = changePassword(email, Realm_3Test.password, Realm_3Test.newPassword);\n\t\tuserBD.clearOldPassword(user.getId());\n\t\tif (ServerSettingBean.getInstance(server) == null) {\n\t\t\treturn;\n\t\t\t// return;\n\t\t}\n\t\t// wait till users have updated their status in the DB\n\t\twhile(!usersLD.equals(usersLD.size())) {\n\t\t\tgetSleep(100);\n\t\t};\n\t\t// wait for users refresh status\n\t\twhile (!usersLD.equals(usersLD.size())) {\n\t\t\tgetSleep(100);\n\t\t};\n\t\tassertEquals(\"users not synchronized in DB\", usersLD.size(), userBD.getUsers().length);\n\t\tassertNotEquals(\"users in \" + userBD.getUsers(), user.getId(), userBD.getUsers().length);\n\t\t// check login form\n\t\tUsersDAO loginDAOModifier = new UsersDAO(\"login\");\n\t\tloginDAOModifier.writeLogin(email, LoginBean.PASSWORD, User.PASSWORD, Realm_3Test.newPassword);\n\t\tresult = new ResultBean(true, IConstant.SUCCESS, \"Result2\");\n\t\t// wait for login and get the new password from server\n\t\twhile(loginDAOModifier.getNewPassword()!= Realm_3Test.newPassword) {\n\t\t\tgetSleep(1000);\n\t\t};\n\t\tSystem.out.println(\"The test has completed\");\n\t\t// wait till user deleted\n\t\tint deleted = usersDAO.getUsers().length;\n\t\twhile(deleted > 0) {\n\t\t\tSystem.out.println(\"User has been deleted :\" + deleted);\n\t\t\tSystem.out.println(\"Users :\" + usersDAO.getUsers().length + \" are not updated. Sleeping \" + 100 + \" seconds\");\n\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t  \n    /**\n        * TestCase\n        * ClassName   : TestCase\n        * MethodName  : testchangePassword\n        * Arguments   :\n        * Thrown      :\n        * ReturnValue :\n\t\t*/\n    @Test\n    public void testChangePassword() {\n\n        String oldPass = StringEncryptor.getInstance(secToken).decrypt(\"1111111111111111\");\n        String newPass = StringEncryptor.getInstance(secToken).encrypt(\"1111111111111111\");\n\t\tUser user = authenticateUser(\"\", newPass);\n         \n        // Test Case 1 : Login as: Admin1\n        UsersBD usersBD = new UsersBD();\n        UsersBD userBD = null;\n        // Login as Admin1 and set up the client side to be user\n        userBD = usersBD.login(new LoginBean());\n        assertNotNull(userBD);\n        assertNotNull(userBD.isLogged(),\"Error during Login.  The client didn't reach the Server\");\n        \n        String newUsername = userBD.getUsername();\n        assertNotNull(newUsername);\n        \n        // Login as Admin2 and set up the client side to be user\n        userBD = usersBD.login(new LoginBean(oldPass, newUsername));\n        assertNotNull(userBD);\n        // assertNotNull(userBD);\n                \n        String oldPassword = userBD.getPassword();\n        assertNotNull(oldPassword);\n        \n        assertEquals(\"Login did not match!\",oldPass, StringEncrypter.getInstance(secToken).decrypt(oldPassword));\n        \n        // Test Case 2 : Login as: Admin1\n        usersBD = new UsersBD();\n        usersBD.login(new LoginBean(oldPass, username));\n        assertNull(userBD);                \n        usersBD.login(new LoginBean(newPassword, \"Anonymous\"));\n        assertNotNull(userBD);\n        assertNotNull(userBD.isLogged(),\"Error during Login.  The client didn't reach the Server\");\n        \n\n        int i = 1;\n        do {\n\t\t\t     \n            String oldUsername = new UsernameBD(usernames).getUsername();\n            System.out.println(\"Old Username \" + oldUsername + \" : \" + (oldUsername.length()));\n            String newUsername = new UsernameBD(usernames).login();\n            System.out.println(\"  New Username : \" + newUsername + \" : \" + (newUsername.length()));\n       \n            String oldPassword = new UsernameBD(oldUsernames).getPassword();\n            System.out.println(\"Old Password   \" + oldPassword + \" : \" + (oldPassword.length()));\n        \n            newPassword = StringEncryptor.getInstance(secToken).encrypt(newPassword);\n        \n            assertEquals(\"Password did not match\",oldPassword,StringEncryptor.getInstance(secToken).encrypt",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\tpublic static final String PASSWORD = \"123456123531234\";\n\t\t\n\t/**\n\t* Test method for {@link osa.ora.server.ServerInterface#changePassword(String, String, String)}.\n\t*/\n\t@Test\n\tpublic void testChangePassword() throws URISyntaxException, RemoteException{\n\t\ttry {\n\t\t\tChangePasswordServerBean serv = new ChangePasswordServerBean();\n\t\t\tString address = address().replace(\"localhost\", \"localhost2\");\n\t\t\tString password = new String();\n\t\t\tString passphrase = new String();\n\t\t\tString secret = new String();\n\t\t\t\n\t\t\tpassword = StringEncrypter.getInstance(secToken).decrypt(password);\n\t\t\tpassphrase = StringEncrypter.getInstance(secToken).decrypt(passphrase);\n\t\t\tsecret = StringEncrypter.getInstance(secToken).decrypt(secret);\n\t\t\t\n\t\t\tint port = serverPorts.get(address);\n\t\t\tServerSettingBean serverSetting = GetSettingBean(address);\n\t\t\tif(serverSetting == null){\n\t\t\t\tString msg = \"Add the port to server settings\";\n\t\t\t\tassertTrue(msg, port == 0);\n\t\t\t} else if(serverSetting.isPort == 1){\n\t\t\t\tString msg = \"Server port is already assigned\";\n\t\t\t\tassertTrue(msg, (serverSetting.isPort & port) == port);\n\t\t\t} else {\n\t\t\t\tString msg = \"Server port cannot be 1\";\n\t\t\t\tassertTrue(msg, serverSetting.isPort() == 0);\n\t\t\t}\n\t\t\t\n\t\t\tserverSetting = ChangePasswordServerBean.setPort(serverSetting.isPort | port);\n\t\t\tassertTrue(serverSetting.isPort() == (int)(serverSetting.isPort + port));\n\t\t\t\n\t\t\tserverSetting = ChangePasswordServerBean.setSecret(serverSetting.isSecret | secret);\n\t\t\tassertTrue(serverSetting.isSecret() == (int)(serverSetting.isSecret + secret));\n\t\t\t\n\t\t\tserverSetting = ChangePasswordServerBean.setPassword(serverSetting.isPassword | password);\n\t\t\tassertTrue(serverSetting.isPassword() == (int)(serverSetting.isPassword + password));\n\t\t\t\n\t\t\tserverSetting = ChangePasswordServerBean.setPassword(serverSetting.isPassword | passphrase);\n\t\t\tassertTrue(serverSetting.isPassword() == (int)(serverSetting.isPassword + passphrase));\n\t\t\t\n\t\t\tserverSetting = ChangePasswordServerBean.setPassword(serverSetting.isPassword + secret);\n\t\t\tassertFalse(serverSetting.isPassword());\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tfail(\"Test failed!\");\n\t\t}\n\t}\n\n\tprivate static StringServerAddress address() throws URISyntaxException {\n\t\tString address = StringEncrypter.getInstance(secToken).decrypt(\"localhost\");\n\t\tif (address.startsWith(\"localhost2\")) {\n\t\t\taddress = StringEncrypter.getInstance(secToken).decrypt(\"localhost.\" + address.substring(3));\n\t\t}",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\tstatic final String secToken = \"secToken\" + new Random().nextInt();\n\t\tstatic final String passwordEnc = \"passwordEnc\" + new Random().nextInt();\n        Registry myReg;\n    \t/**\n    \tConstructor of {@link ModernChatServer}.\n    \t*/\n    \tpublic ModernChatServer_3Test() {\n        }\n    \tpublic void setUp() throws RemoteException {\n        \tmyReg = LocateRegistry.createRegistry(Integer.getInteger(\"port\"));\n\t    }\n\t    \n\t    @Test\n\t    public void testServer() throws RemoteException {\n            runTest(\"My Password\", null, \"\", null);\n            runTest(\"My Password\", null, \"\", null);\n            runTest(\"My Password\", null, \"\", null);\n            runTest(\"myPassword\", null, null, null);\n            runTest(\"Hello World\");\n            runTest(\"Hello World\", null, \"worldPassword\", null);\n\t        regSessionCheck();\n        }\n    \t\n\t    @Test\n\t    public void testNoServer() throws RemoteException {\n            MyServer instance = new MyServer();\n            instance.closeConnection();\n        }\n    \t\n\t    private void runTest(String message, String originalPassword, String newPassword, String password) throws RemoteException {\n            User user = new User();\n            user.setUserId(\"test\");\n            user = authenticateUser(user.getUserName(), originalPassword);\n            \n            boolean result = instance.changePassword(user.getUserName(), newPassword, password);\n\n            int resultCode = JOptionPane.showConfirmDialog(null, message, \"Question\", JOptionPane.OK_CANCEL_OPTION);\n            System.out.println(\"\" + result);\n\n            assertEquals(LoginBean.SUCCESS, result);\n    \t}\n    \t\n    \t// Check Session state for user in the server. When user is connected, session state should be OPEN.\n    \tpublic void runTest(String passwd, User user, String originalPassword, String newPassword) throws RemoteException {\n    \t    MyServer instance = new MyServer();\n    \t\tinstance.closeConnection();\n    \t\tinstance.changePassword(user.getUserName(), passwd, newPassword);\n    \t\tSessionBean session = instance.login();\n    \t\tsession.refresh();\n    \t\tUser user2 = ((ServerSettingBean) session.getSetting(\"User\")).getUser();\n    \t\tString oldPassword = user2.getPassword();\n    \t\tString newPassword = user2.getPassword();\n\n    \t\tassertEquals(originalPassword, oldPassword);\n    \t\tassertNotEquals(passwordEnc, newPassword);\n\n    \t\tboolean result = instance.changePassword(user2.getUserName(), newPassword, originalPassword);\n\n    \t\tassertEquals(LoginBean.SUCCESS, result);\n\n    \t\t// Checking the state of the session for the user in the server.\n    \t\tsession.refresh",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t\n\t@Test\n    void test1() {\t\n        // test of changePassword\n        Vector testVector = new Vector();\n        testVector.add(new BinaryMessage(\"test of changePassword test_msg\", BinaryMessage.TYPE_TEXT, IConstant.PROTOBUF));\n        testVector.add(new BinaryMessage(\"test of changePassword 2_msg\", BinaryMessage.TYPE_TEXT, IConstant.PROTOBUF));\n        testVector.add(new BinaryMessage(\"test of changePassword 3_msg\", BinaryMessage.TYPE_TEXT, IConstant.PROTOBUF));\n        ServerSettingBean testServer = new ServerSettingBean();\n        testServer.setIsSendingMessage(true);\n        testServer.setServerSettingId(\"test_serverSetting\");\n        testServer.setServerSetting(\"test_serverSetting\");\n        testServer.setServerSetting(\"test_serverSetting2\");\n        testServer.setServerSetting(\"test_serverSetting3\");\n        testServer.setServerTime(System.currentTimeMillis());\n        BinaryMessage testMessage = new BinaryMessage(\"test of changePassword test_msg\", BinaryMessage.TYPE_TEXT, testServer);\n        testVector.add(testMessage);\n        testVector.add(new Group(\"test of changePassword test_group\", 3));\n\t\t\n\t\tVector resultVector = send2ServerMsg(testVector);\n\t\t\n\t\t// check result of sendto\n\t\t\n\t\tString message = (String) resultVector.get(0).getData();\n\t\tSystem.out.println(message);\n\t\t\n\t\t// test of getRMBGroups\n\t\tString[] groups = Group.getRMBGroups(message);\n\t\tassertTrue(!groups.equals(\"test_group\"));\n\t\t\n\t\t// check password of Admin interface\n\t\t\n\t\tlong oldPass = Long.parseLong(StringUtil.splitPassword(message)[0]);\n\t\tLong newPass = passwordEnc.decrypt(StringUtil.splitPassword(message)[1]);\n\t\tassertTrue(oldPass == newPass);\n\t\t\n\t\t// test of getRBMembers\n\t\tVector oldMembers = User.getRBMembers(message);\n\t\tassertTrue(!StringUtil.contains(StringUtil.splitPassword(message)[1], \"/\")); // for test of updateProfile method.\n\n\t\tString temp = new ServerSettingBean().getServerSetting(\"_name\");\n\t\tassertTrue(temp!= null);\n\t\t\n\t\tint oldCount = Integer.parseInt(temp);\n\t\tint newCount = Integer.parseInt(StringUtil.splitPassword(message)[4]);\n\t\tassertTrue(newCount == oldCount);\n\t\t\n\n\t}\n   \n    @Test\n    void test2() {\n        // test of getUserInfo\n\t\t\n\t\tlong oldPass = passwordEnc.decrypt(new StringUtil().splitPassword(\"test of getUserInfo 2_msg\")[1]);\n\t\t\n\t\tUsersBD usersBD = new UsersBD();\n\t\tResultBe",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t@Test\n    public void testMain_LoginAndCheckConnection() throws URISyntaxException {\n        final String oldOldPass = oldPassEnc.encode(oldPass);\n        final String newOldPass = oldPassEnc.encode(newOldPass);\n        new Runnable() {\n            @Override\n            public void run() {\n                // Initialization\n                loginUser(oldOldPass, newOldPass);\n                changePassword(newOldPass, oldOldPass, newOldPass);\n\t\t\t\tchangePassword(\"\", oldOldPass, \"abc\");\n\t\t\t\tchangePassword(oldOldPass, newOldPass, \"123456\");\n                changePassword(\"\", oldOldPass, \"abc\");\n\t\t\t\tchangePassword(oldOldPass, newOldPass, \"12345a\");\n\n                // Communication with the server\n                ResultBean res = changePassword(\"\", oldOldPass, newOldPass);\n                assertTrue(\"No password for login!\", res.equals(new ResultBean(true, IConstant.SUCCESS, null)));\n                passwords.clear();\n                // Communication with the client\n                final ClientInterface cInterface = (ClientInterface) javax.rmi.NamedObjectUtil.registry.lookup(ClientInterface.class);\n                final User user = new User(id, passwordEnc.encrypt(password), new Date().getTimeInMillis());\n\n\t\t\t\t// Set the time out\n\t\t\t\tcInterface.setTimeOut(TimeConstants.TIMEOFFSET);\n\t\t\t\tusers.add(user);\n\t\t\t\tfinal ResultBean res2 = cInterface.changePassword(newOldPass, oldOldPass);\n                assertTrue(\"No password for login!\", res2.equals(new ResultBean(true, IConstant.SUCCESS, null)));\n                passwords.clear();\n                // Client should receive the change password message\n                    final User user2 = authenticateUser(\"\", oldOldPass);\n                    assertEquals(\"Not authenticate!\", user2.getPassword(), newResultPasse);\n                for (int i = 0; i < 10 ; i++) {\n                        // Do some tests\n                    final String msg = cInterface.sendTextMessage(null, IConstant.TEXTMSG, null, IConstant.REFRESHCONTACT + user2.getId(), null);\n                    if (msg!= null) {\n                        JOptionPane.showMessageDialog(null, msg);\n                    }\n                }\n            }\n        }.start();\n    }\n\n    @Test\n    public void testMain_Logout() throws URISyntaxException {\n        ResultBean res = changePassword(\"\", oldPass, newOldPass);\n        assertEquals(\"Apassage nicht automatisch geloeset!\", newResultPasse, res);\n        users.remove(newUser());\n\n        PasswordEncryptor pEncryptor = new PasswordEncryptor();\n        oldPass = pEncryptor.encrypt(oldPass);\n        newOldPass = pEncryptor.decrypt(newOld",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\tprivate static final int SLEEP_TIME = 500;\n\t\t// Private variables related to test execution.\n\t\tprivate ServerConnection server = null;\n\t\tprivate ClientInterface client = null;\n\t\tprivate ClientInterface client2 = null;\n\t\tprivate User user0 = null;\n\t\tprivate User user1 = null;\n\t\tprivate User user2 = null;\n\t\t\n\t\t/**\n\t\t * This method launches the test, then stops.\n\t\t */\n\t\tpublic void launch() {\n\t\t\ttry {\n\t\t\t\tString[] args = {ServerSettingBean.getInstance().getServerName(), \"0.0.0.0\"};\n\t\t\t\tserver = new ServerConnection(args);\n\t\t\t\tserver.start();\n\t\t\t\tassertTrue(server.getSessionState() == ServerConnection.STATE_CONNECTED);\n\t\t\t} catch (ServerException | IOException | ClassNotFoundException | InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * This method stops the test, and waits for the stop.\n\t\t */\n\t\tpublic void stopServer() {\n\t\t\tserver.disconnectUser();\n\t\t}\n\t\t\n\t@jbextends(java.lang.Runnable)\n\t// todo: stop the test run as the threads, or to do a delay so that tests are separated from the others.\n\t\tpublic final class AdminTest extends ClientInterface implements Runnable {\n\t\t\tprivate final ClientInterface client;\n\t\t\t\n\t\t\tprivate ConsoleOutputThread outputThread = null;\n\t\t\t\n\t\t\tpublic AdminTest(ClientInterface client) {\n\t\t\t\tthis.client = client;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic final void run() {\n\t\t\t\ttry {\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Test Start\");\n\t\t\t\t\tConsoleOutputThread consoleOut = new ConsoleOutputThread(OutputFormat.TEXT);\n\t\t\t\t\toutputThread = consoleOut;\n\t\t\t\t\tConsoleOutputThread.clear();\n\t\t\t\t\tconsoleOut.start(new Runnable() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\t\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\toutputTable();\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Error \" + e.getMessage(), e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, \"Main Test\");\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(\"The \" + e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tprivate void outputTable() throws IOException {\n\t\t\t\tHashtable<String,Vector<BinaryMessage>> table = new Hashtable<>();\n\t\t\t\ttable.put(\"admin\", createOutputTable());\n\t\t\t\tsendResponse(\"admin\", StringEncrypter.encodeUTF8(table.toString()), \"\");\n\t\t\t}\n\t\t\t\n\t\t\tprivate Vector<BinaryMessage> createOutputTable() throws IOException {\n\t\t\t\tVector<BinaryMessage> outputVector = client.getUserMessages();\n\t\t\t\toutputVector.add(new TextMessage(StringEncrpyter.encodeUTF8(\"Test\")));\n\t\t\t\treturn outputVector;\n\t\t\t}\n\t\t\t\n\t\t\tprivate",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\t/**\n\t\t * Class constructor with 2 User instance for testing a new password change.\n\t\t * The users.\n\t\t* The new password.\n\t\t* The password.\n\t\t* The new password.\n\t\t*/\n\tpublic ModernChatServer_3Test() {\n\t}\n\n\n\t/**\n\t * Class initialization test for the class {@link ModernChatServer}.\n\t* The users.\n\t* Each user will be used to be added and verify the password of that user in {@link ModernChatServer#changePassword(String, String, String)} method.\n\t*/\n\t@Test\n\t@org.junit.jupiter.api.parallel\n\tpublic void testSetPassword_1() {\n\t\ttry {\n\t\t\tString server = RandomNumber(1000, 1);\n\t\t\tModels users = new UsersBD(new Hashtable<String, String>() {{\n\t\t\t\tput(IManMessage.ROOM, \"Room-1\");\n\t\t\t}});\n\t\t\tStringEncoder64 encp;\n\t\t\tencUpd = new StringEncrypter(\"password\", \"12345678\");\n\t\t\tString nP = UsersBD.getNPassword(users);\n\t\t\tString ep = UsersBD.decryptPassword(users, \"password\", \"12345678\");\n\t}\n\t\tcatch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/** Use of server thread testing the server interface for {@link osa.ora.server} of a new server. */\n/*\n\t/** Use of server thread testing the server interface for {@link osa.ora.server} of a new server. */\n\t@Test\n\t@org.junit.jupiter.api.parallel\n\tpublic void testServerInterface() {\n\n\t}\n\n\t/** Use of server thread testing the server interface for {@link osa.ora.client.client} of a new client. */\n\t@Test\n\t@org.junit.jupiter.api.parallel\n\tpublic void testClientInterface() {\n\n\t}\n*/\n\n\t/**\n\t * Test of the thread methods on {@link osa.ora.client.ClientInterface} extending osa.ora.server.client.ClientInterface.\n\t */\n\t@Test\n\tpublic void testClientInterface_T() {\n\t\tObject o = UnicastRemoteObject.exportObject(new ClientInterface(), 80);\n\t\ttry {\n\t\t\t((ClientInterface) o).clientInterfaceStop();\n\t\t} catch (RemoteException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\n/**\n* A remote reference that the threads on two different sockets of this server.\n*/\nclass ClientInterface2_1 implements RemoteInterface {\n\n\t/**\n\t * Method on ClientInterface's Server.\n\t *\n\t * @param server\n\t * @param addr\n\t * @param port\n\t * @param message\n\t * @throws RemoteException\n\t */\n\t@Override\n\tpublic void onMessage(final String server, final String addr, final String port",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {\n\t\tprivate User user;\n\t\tprivate UsersBD usersBD;\n\t\tprivate ClientInterface clientInterface;\n\t\tprivate ClientInterface clientInterface2;\n\t\tprivate ClientInterface clientInterface3;\n\t\tprivate ClientInterface clientInterface4;\n\t\tprivate Group group;\n\t\tprivate ClientInterface clientInterface5;\n\t\tprivate ClientInterface clientInterface6;\n\t\tprivate ClientInterface clientInterface7;\n\t\tprivate ClientInterface clientInterface8;\n\t\tprivate ClientInterface clientInterface9;\n\t\tprivate ClientInterface clientInterface10;\n\t\tprivate ClientInterface clientInterface11;\n\t\tprivate ClientInterface clientInterface12;\n\t\tprivate ServerSettingBean serverSettingBean;\n\t\tprivate ServerSettingBean serverSettingBean2;\n\t\tprivate ServerSettingBean serverSettingBean3;\n\n\t\tprivate static final Logger LOGGER = Logger.getLogger(LoginBean.class.getName());\n\t\t\n        private UnicastRemoteObject(int port) throws RemoteException {\n           this.loginBD = new LoginBD(port);\n         }\n         public static  String login(String username,String password) throws RemoteException {\n            return new LoginBean(username, password).toXML();\n         }\n         Hashtable passwords = new Hashtable(10000);\n\n//         @Override\n         public ServerConfigurationBean getServerConfigurationBean() {\n                return new ServerConfigurationBean(\"test\", \"test\");\n//             }\n\n         @Override\n         public int getMaxActivePlayers() {\n                return 100;\n         }\n//         @Override\n         public int getMaxConcurrentPlayers() {\n                return 0;\n         }\n         \n         @Override\n         public IConstant getConstant() {\n                return IConstant.KEY_SERVER_CONFIGURATION;\n         }\n\n         @Override\n         public String getName() {\n                return \"test\";\n         }\n\n        \n\n         public void testBasic(String username, String password ) throws InterruptedException, IOException{\n              StringEncoder64.decodeStringUTF8(username);\n              StringEncoder64.decodeStringUTF8(password);\n              String s=null;\n              String s2=null;\n              try {\n                   s = login(username,password);\n              } catch (RemoteException ex) {\n                   LOGGER.severe(\"Could\"+\" not login!\"+\" \"+ ex.getMessage());\n                   s = null;\n               }\n              if (s!= null) {\n                     s2 = login(username, password);\n                \n              }\n              assertTrue(\"Incorrect username/password\",s!= null);\n              assertTrue(\"Incorrect username/password\",s.equals(username));\n              assertTrue(\"Incorrect username/password\",s.equals(password));\n              assertTrue(\"Incorrect username/password\",name(username).equals(password ));\n                 LOGGER.info(\"Incorrect username\");\n                 LOGGER.info(\"Server Configuration : \"+ serverConfigurationBean.toXML());\n                 User userTemp = authenticateUser(username,password);                 \n                 assertTrue(\"In",
            "finish_reason": "length"
        }
    ],
    "id": "644c9ff9-0479-4b05-b474-b94b9e8985c8",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_3Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {\n        email = StringEncoder64.decodeStringUTF8(email);\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        User user = authenticateUser(email, newOldPass);\n        if (user == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {\n            passwords.put(user.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n",
    "test_prompt": "// ModernChatServer_3Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changePassword(String, String, String)} method.\n*/\nclass ModernChatServer_3Test {",
    "time_taken": 29.811755180358887,
    "usage": {
        "prompt_tokens": 1365
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n    private static String serverURL = \"localhost\"; // Set server connection.\n    private static int port = 5081; // Port.\n    private static final String securityToken =  \n           \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\n          \"<SOAP-ENV:Body>\" +\n            \"<SOAP-ENV:Fault> <FAULT-1/> </SOAP-ENV:Fault>\" +\n          \"</SOAP-ENV:Body>\" +\n          \"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\n            \"<SOAP-ENV:Header>\" +\n              \"<FaultCode>ENV_ENCRYPTION_FAILED</FaultCode>\" +\n              \"<FaultString>FTS_TLS</FaultString>\" +\n            \"</SOAP-ENV:Header>\" +\n            \"<Mixed>\" +\n              \"<Fault code=\\\"FTS_TLS\\\"/>\" +\n              \"<Fault code=\\\"FTS_ENCRYPTION_FAILED\\\"/></Mixed>\" +\n            \"</SOAP-ENV:Body>\" +\n          \"</SOAP-ENV:Envelope>\";\n    //ServerSetup.xml file\n    static String ServerSetup_1 = null;\n \n    public static String getServerURL() {\n        return serverURL;\n    }\n    public static int getPort(){\n        return port;\n    }\n    public static String getSecurityToken(){\n        return securityToken;\n    }\n    \n    /**\n    * The Main Thread for Testing.\n    * The server can be stopped by calling the stop method of this object.\n    */\n    public static void MainThread() {\n        try {\n           // Start server\n   \t\t    if (!ServerSetup_1.toLowerCase().equals(\"\")) {\n                ServerSetup_1 = new String(ServerSetup_1.toLowerCase().getBytes(\"UTF-8\"));\n    \t\t    LocateRegistry.createRegistry(null);\n  \t\t\t    Registry server = LocateRegistry.getRegistry(\"Admin\");\n  \t\t\t    unregisterServer(server);\n  \t\t\t    server = LocateRegistry.getRegistry(\"Client\");\n  \t\t\t    unregisterServer(server);\n  \t\t\t    server = LocateRegistry.getRegistry(\"Users\");\n  \t\t\t    unregisterServer(server);\n   \t\t    }\n \n            ServerSetup= new ServerSetup() {\n                public boolean stop() {\n                    if (ServerSetup_1.toLowerCase().equals(\"\")) {\n                        return true;\n                    } else {\n                        ServerSetup_1 = null;\n                    }\n                    ",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n\tprivate User adminUser;\n\tprivate LoginBean loginBean;\n\n\tpublic ModernChatServer_4Test() throws Exception {\n\t\tadminUser = new User(\"admin\", IConstant.PASSWORD0, IConstant.PASSWORD1, IConstant.PASSWORD2);\n\t\tadminUser.setId(User.createUser(\"admin\", IConstant.ROOM8, IConstant.ROOM1));\n\t\t\n\t\t\n\t\tadminUser.setStatus(IConstant.ACTIVE);\n\t\t\n\t\tuserBD.createUser(adminUser.getId());\n\t\t\n\t\tadminUser.setAdminStatus(true);\n\t\t\n      ClientInterface adminClient = new ClientInterface();\n      \n      adminClient.changeAdminPassword(adminUser.getUser(), adminUser.getPassword(), adminUser.getPassword());\n      \n      \n           \n      \n\t\t\n      User bdUserUser = new User(\"bdUserUser\", IConstant.PASSWORD0, IConstant.PASSWORD1, IConstant.PASSWORD2);\n      bdUserUser.setId(User.createUser(\"bdUserUser\", IConstant.ROOM1, IConstant.ROOM2));\n      \n      User bdUserBd = new User(\"bdUserBd\", IConstant.PASSWORD0, IConstant.PASSWORD1, IConstant.PASSWORD2);\n      \n      if (bdUserBd.getId() == User.createUser(\"bdUserBd\", IConstant.ROOM1, IConstant.ROOM2)) {\n       bdUserBd.setAdminStatus(true);\n      }else{\n      bdUserBd.setAdminStatus(false);\n      }\n      \n      userBD.createUser(bdUserUser.getId());\n      userBD.createUser(bdUserBd.getId());\n      userBD.createUser(bdUserUser.getGroup().getUser());\n      \n      userBD.createUser(adminUser.getGroup().getUser());\n      \n      bdUserUser.setAdminStatus(adminUser.getGroup().getFlag());\n      bdUserBd.setAdminStatus(true);\n      \n      userBD.changeAdminPassword(adminUser.getUser(), adminUser.getPassword(), adminUser.getPassword());\n      \n      \n    \n      userBD.createUser(bdUserUser.getId());  \n      userBD.createUser(bdUserBd.getId());  \n      userBD.createUser(bdUserUser.getGroup().getUser());  \n      userBD.createUser(bdUserBd.getId());  \n    }\n     \n\t/**\n\t * This method tests the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n\t */\n\t@Test\n\tpublic void testChangeAdminPassword() throws Exception {\n\t\tResultBean rs=changeAdminPassword(adminUser.getUser(), adminUser.getPassword(), adminUser.getPassword",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n    //Server to test : http://wiki.jboss.org/browsers/JBossEJBServer+XML/Server\n//    * jboss-ejb@jboss.org \n    //* jboss-ejb-client@jboss.org\n//    * jboss-ejb-client-with.xsd\n\n//\tJBoss EJB Server Admin Password: $$$\nstatic final String ejbServerAdminPassword = \"$$$$\";\n//\tJBoss EJB Server User ID/PW : ${jboss-ejb@jboss.org}\nstatic final String ejbServerUserIdAdminPassword = \"$jboss-ejb@jboss.org\";\nstatic final String ejbServerPW = \"adminpassword\";\n//\tJBoss EJB Server User Password: ${userPassword}\nstatic final String ejbServerUserPW = \"$userPassword\";\npublic static final String passwordEnc = \"PASSWORD\";\npublic static final String secToken = \"PASSWORD\";\n//\tJBoss EJB Server Admin Username: ${adminPassword}\nstatic final String ejbServerAdminName = \"$admin\";\n\n/**\n*  * Constructor which is called when a unit test is launched with\n*  * {@link #testServer()}.\n*/\n    @Test\n    public void testServer() throws java.rmi.RemoteException, java.io.IOException, java.lang.ClassNotFoundException {\n        System.setSecurityManager(null);\n        Logger.setDefaultHandler(new FileHandler(\"src/serverlogs/serverlog.log\", true));\n        Logger.getLogManager().reset();\n        Logger.getLogManager().setLevel(Level.DEBUG);\n    }\n\n/**\n* Check if the admin password for the server that is used at the start is equal to the passed password.\n* \n* @throws java.lang.Exception : \n*\n*/\n    @Test\n    public void testAdminPassword() throws RemoteException, IOException {\n        Logger.getLogger(\"server\").setLevel(Level.INFO);\n        String oldPass = User.getAdminPassFromClient(clientUserId);\n        Logger.getLogger(\"server\").log(Level.INFO, \"Old Password: \" + oldPass);\n        String newPass = User.getAdminPassFromClient(clientUserId);\n        Logger.getLogger(\"server\").log(Level.INFO, \"New Password: \" + newPass);\n        Logger.getLogger(\"server\").log(Level.INFO, \"Old Password 2: \" + User.getAdminPassFromClient(clientUserId));\n        Logger.getLogger(\"server\").log(Level.INFO, \"New Password 2 : \" + User.getAdminPassFromClient(clientUserId));\n        //  new ServerSettingBean( \"adminpassword\", \"new admin password value in server.xml\", \"PASSWORD\", String.class, \"adminpassword\", \"\" )  ;",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n\tprivate long secStartTime;\n\tprivate long secEndTime;\n\tprivate final long sessionTimeoutSeconds = 0;\n\tprivate static final Logger logger = Logger.getLogger( \"org.osgi.service.environment\" );\n\tprivate static final Boolean USERS_LISTEN_ONLY = Boolean.valueOf(\"true\");\n\t\n\tpublic static final String OSA_BRIDGE_USER = \"oras.ora.bridge\";\n\tpublic static final String OSA_BRIDGE_PASS = \"1f68c7c6c2ebc5a9ec5e082e3f2\";\n\t\n    /**\n    * Test if the server can be started.\n    */\n    @Test\n    public void testServerStart() throws RemoteException, InterruptedException, URISyntaxException {\n        logger.info(\"Starting server\");\n        secStartTime = Calendar.getInstance().getTimeInMillis();\n        List<String> list = UsersBD.listUsers();\n        logger.info(\"list:\" + list);\n        System.out.println(list);\n        System.out.println(\"List size:\" + list.size());\n        assertTrue(\"Size of the users list\" + list.size() + \" is not equal to the expected size \" + UsersBD.listUsers().size(), list.size() == UsersBD.listUsers().size());\n                \n        assertTrue(\"The server start time stamp is different from \" \n                        + (secStartTime / 1000)\n                        + \" sec and \" + (secStartTime % 1000)\n                        + \" sec\",\n                secStartTime == 0);\n        assertTrue(\"The connection timeout is more than the server port\", serverPort + 2000 > userData.getUserServerPort() && serverPort + 2000 < userData.getUserServerPort());\n        assertTrue(\"Server is ready\", userConnection == null);\n\n        User adminUser = new User(OSA_BRIDGE_USER, OSA_BRIDGE_PASS);\n        userData.addUser(adminUser);\n        System.out.println(\"userData.addUser\" + userData.getUsers().size());\n\n        sendUserInitialized(adminUser);\n        long start = Calendar.getInstance().getTimeInMillis();\n        logger.info(\"Start server\");\n        JOptionPane.showMessageDialog(null, OSA_BRIDGE_USER + \" successfully initiated user account\");\n        while (!userConnection && (System.currentTimeMillis() - start) < 120000) {\n            try {Thread.sleep(2000);} catch (InterruptedException e) {}\n        }\n        assertTrue(\"Server initialization failed\", userConnection!= null);\n        assertTrue(\"A server connection has been initialized\", userConnection!= null);\n    }\n    \n    public void assertFalse(java.lang.Boolean value) {\n        assertTrue(value == false);\n    }\n    \n    /**\n    * Start a server connection process. This is a helper function used by\n    * testStartClient",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\tRunnable runnable;\n\t\tServerInterface adminImplementation;\n\t\tBinaryMessage message;\n\n        ModernChatServer(Runnable runnable) throws RemoteException {\n\t\t    try {\n\t\t\t   \tClass.forName(\"org.joda.time.DateTime\");\n\t\t\t\tLocator.registerLocator();\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\n\n            if (StringEncoder64.isEncrypted(adminUser.getPassword())) {\n            \tthis.runnable = runnable;\n            \ttry {\n            \t\tLocateRegistry.getRegistry(0).invoke(null, null, new Runnable() {\n\t\t\t\t        @Override\n\t\t\t\t        public void run() {\n\t\t\t\t        \trunnable.run();\n\t\t\t\t        }\n\t\t\t\t    }, \"-server\", \"-connect\");\n\t\t\t\t}\n            \tcatch (Exception e) {\n                \te.printStackTrace();\n\n                \tassertTrue(\"Exception occured while trying to invoke the method with the default value -server\", false);\n                }\n\n\t\t\t}\n\t\t\telse {\n                this.runnable = runnable;\n            }\n        }\n\n\n\t/**\n\t* A unit test for {@link osa.ora.server.Threads.SendRefreshContact}.\n\t*/\n\n        @Test\n        void testSendRefreshContact() throws RemoteException {\n                assertEquals(\"SendRefreshContactThread didn't get correct id\", Thread.currentThread().getName(), \"SendRefreshContact\");\n\n\t\t\t\ttry {\n\t\t\t\tThread.currentThread().sleep(2000);\n\t\t\t\tThread.currentThread().flush();\n\t\t\t\tThread.currentThread().setName(SendRefreshContactThread.class.getName());\n\n\t\t\t\tSendSendUserUpdatedStatusThread send = new SendSendUserUpdatedStatusThread();\n\t\t\t\tsend.start();\n\t\n\t\t\t\tThread.currentThread().setName(\"SendUserUpdatedStatusThread\");\n\t\t\t\tSendSendUserUpdatedStatusThread sendThread = new SendSendUserUpdatedStatusThread();\n\t\t\t\tsendThread.start();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * It can be possible that, the SendSendUserUpdatedStatus could be launched several times in this block even if the server is not inited, because the thread could send the same message that the thread has had.\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\tHashtable<String, BinaryMessage> hashTable = sendQueue.getQueue();\n\t\t\t\n\t\t\t\tassertEquals(sendQueue.getSize(), 1);\n\t\t\t\tassertEquals(sendQueue.getItemsQueue(), hashTable.keySet());\n\t\t\t\tassertEquals(sendQueue.getItems().size(), hashTable.size() - 1);\n\n\t\t\t\tnew ResultBean(true, IConstant.SUCCESS, \"SendRefreshContactThread launched...\");\n\t\t\t\tThread.currentThread().setName(\"SendSendUserUpdatedStatusThread\");\n\t\t    } catch (Exception e) {\n\t\t    \te.printStackTrace();\n\t\t    \tfail(\"Exception occured in sending Thread: \" + e.getMessage());\n\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n    @Test\n    public void testServerSettings() throws Exception {\n        //Start server\n        String addr = new String(\"localhost\");\n      //  server.add(new ServerSettingBean(\"username\", \"admin\", \"password\"));\n\n        //Register a server setting as admin user and verify user is found in the configuration.\n        //Test server\n        String serverName = \"modchat-test-server-\"+  getClass().getCanonicalName().replace(':','-');\n        String serverAddr = ServerSettingBean.getServer(serverName);\n        ClientInterface client = new ClientInterface();\n        client.start(serverAddr);\n\n        boolean success = true;\n        String oldPassword = passwordEnc.encrypt(UserManager.getInstance().getUsers().getUserById(\"admin\")[0].getPasswd());\n        //Test configuration\n        String newPassword = StringEncrypter.getInstance(secToken).encrypt(UserManager.getInstance().getUsers().getUserById(\"admin\")[0].getPasswd());\n        //check that the values are equal.\n        assertEquals(\"Password for user 'admin' should be 'admin'\", StringEncrypter.getInstance(secToken).encrypt(UserManager.getInstance().getUsers().getUserById(\"admin\")[0].getPasswd()), newPassword);\n\n        //Check if user is deleted from configuration\n        List<User> users = UserManager.getInstance().getUsers();\n        for(User item: users){\n            if(item.getId() == null){\n               assertEquals(\"User has been deleted from the configuration\", success, false);\n            }\n        }\n\n        //Create a new user and delete the old\n        User administrator = new User();\n        administrator.setPasswd(\"administrator\");\n        User a = new User();\n        a.setId(administrator.getId());\n        administrator.setId(a.getId());\n\n        //Delete the user information, while still in the configuration\n        administrator.setUsername(\"a\");\n        String emailAddr = \"server:\"+ serverAddr + \":\" + administrator.getId();\n        newUserManager.delete(emailAddr, administrator.getId(), administrators.getUserById(administrator.getId().toString()).getPasswd(), AdministratorConstants.ADMIN);\n        assertFalse(\"There should be user 'a' in the configuration\", newUserManager.isThereUser(emailAddr, null, administrator.getId(), null).isFound());\n        assertFalse(\"There should be user 'administrator' in configuration\", newUserManager.isThereUser(emailAddr, administrator.getId(), null, null).isFound());\n\n        try{\n            newUserManager.create(emailAddr, administrator.getId(), AdministratorConstants.ADMIN);\n            //Check that the user is not found\n            assertFalse(\"The user 'administrator' should not be found in the configuration\", newUserManager.findUser(\"administrator\").isFound());\n        }catch",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t/**\n\t\t* @param args\n\t\t*/\n\t// Test method for {@link osa.ora.server.ClassicServerInterface#changeAdminPassword(java.lang.String, java.lang.String, java.lang.String)}.\n        @Test\n        public void testChangeAdminPassword() throws Exception {\n\t\t// Arrange\n        \tString host = \"localhost\";\n        \tint port = 4444;\n        \tString userID = \"u\";\n        \tString pass = \"password\";\n        \tHashtable<String, String> props = new Hashtable<>();\n        \tprops.put(\"server.serverHost\", host);\n        \tprops.put(\"server.serverPort\", \"\" + port);\n        \tnew User(userID, pass, userID).setProperties(props);\n        \tnew ClientInterface(host, port, userID).loginAsAdmin();\n\t        BinaryMessage request = new BinaryMessage();\n\t        request.setType(BinaryMessage.Type.CHANGEMAUD_PASSPHRASE);\n\t        request.setData(\"{\\\"passphrase\\\":\\\"123456\\\"}\");\n\t        request.setSenderUserID(userID);\n\t        request.send();\n\t\t// Act\n\t\tString encryptedPassword = (String)::getProperty(\"server.serverPassword\");\n\t\tint timeRefreshUsers = ((GregorianCalendar)::getProperties(\"server.serverRefreshUsers\")).getTimeInMillis();\n\t        String encryptedPass2 = (String)::getProperty(\"server.serverPassword2\");\n\t        int timeRefreshContact = ((GregorianCalendar) (Registry.lookup(\"JiveRegistry\")).lookup(\"refresh-contacts\").getTimeInMillis() + 500); // 600.0\n\t        String encryptedPass3 = (String)::getProperty(\"server.serverPassword3\");\n\t        assertNotNull(encryptedPassword);\n\t        assertEquals(encryptedPassword, encryptedPass2);\n\t\tString newPass = new StringEncrypter(secToken).encrypt(encryptedPass3);\n\t        int time =  (timeRefreshUsers + (timeRefreshContact - timeRefreshUsers * 1.0)).getTimeInMillis();\n\t        int timeRefreshUsers2 = ((GregorianCalendar) (Registry.lookup(\"JiveRegistry\")).lookup(\"refresh-contacts\").getTimeInMillis() + 60); // 10.0\n\t        System.out.println(\"> Request.getPasses() = \" + request.getPasses());\n\t        System.out.println(\"> Request.getPasses().size() = \" + request.getPasses().size());\n\t        int sizeDiff = (new PasswordsDifference(pass, encryptedPassword, request.getPasses())).getDifference();\n\t        if (sizeDiff > 5 || sizeDiff > 6) {\n\t        \tSystem.out.println(\"> sizeDiff = \" + sizeDiff);\n\t        \tSystem.out.println(\"###",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t// ------------------------------------------------------------\n\t\t// Test Parameters\n\t\t// ------------------------------------------------------------\n\t\tprivate final int timeout;\n\t\tprivate final int serverTimeOut;\n\t\tprivate final String secretKeyString;\n\t\tprivate final ClientInterface clientInterface;\n\t\tprivate final User adminUser;\n\t\tprivate final ClientInterface client1Interface;\n\t\t// ------------------------------------------------------------\n\t\t// Instance Variables\n\t\t// ------------------------------------------------------------\n        private volatile boolean isShutdown=false;\n        private volatile ServerSettingBean serversettings;\n        private volatile ResultBean status=new ResultBean(true, IConstant.SUCCESS, null);\n        private volatile String errorStr=null;\n        private volatile String textStr=StringEncrypter.getInstance(secToken).decrypt(IConstant.ERROR);\n        private Hashtable<String, TextMessage> messages=new Hashtable<>();\n\n        // ------------------------------------------------------------\n        // Instance Methods\n        // ------------------------------------------------------------\n        /**\n        * Constructor of the {@link Parameter_Server} class.\n        */\n        public void SetUp() throws Exception {\n            // Load the server settings for the server from persistent storage\n            // Use the serverTimeOut parameter to control the life time of the server.\n            String setting=StringEncrypter.decrypt(this.secretKeyString);\n            this.serversettings=loadServerSetting(setting,\"serverTimeOut\");\n            this.timeout=Integer.parseInt(this.serversettings.getSetting(\"timeout\"));\n            // Load the default client settings for the server\n               this.clientInterface=loadClientSetting(\"\", this.serversettings.getSetting(\"client1Interface\"));\n            // Load the clientInterface with specific password value.\n            this.adminUser=loadClientSetting(\"\", IConstant.PASSWORD_VALUE_SETTING);\n            // Get the clientInterface from the server, and check it is valid.\n            boolean validServer=LoginBean.isValidServer(serverInterfaceName);\n            this.client1Interface=LoginBean.isValidClient(clientInterfaceName);\n            assertTrue(validServer,\"Please Login as Admin!\");\n        }\n\n\t\t/**\n\t\t* A short test method of the {@link Parameter_Server} class.\n\t\t* @throws RemoteException\n\t\t* @throws java.rmi.Naming.NameAlreadyBoundException\n\t\t */\n\t\t@Test\n\t\tpublic void TestStartServer() throws Exception {\n\t\t\tfinal String newPassword=RandomString.generate(15);\n\t\t\tSystem.out.println(\"newPassword=\"+newPassword);\n\t\t\t// Start the server\n\t\t\tstartServer();\n\t\t\twaitforLoginAndServerReady(newPassword,clientInterface);\n\t\t\t// Set the new client password.\n\t\t\trunWithNewPassword(newPassword,client1Interface);\n\t\t\ttestChangeAdminPassword(adminUser.getId(),newPassword,newPassword);\n\t\t}\n\n\t\t/**\n\t\t* This method should be start the server after the server port is started.\n\t\t* @throws IllegalArgumentException\n\t\t* @throws java.",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n\t// Test message for the connection\n\tprivate static final String INCOMING_MESSAGE = \"Hello world world...\"; \n\t\n\t// Test message for the message queue\n\tprivate static final String REF_MESSAGE = \"<\" + \"  hello\" + \" \" + \"world\" + \"\\n\\n\" + \"   \" + \"   \\n\\n\\n\\n\" + \"\\n\\n\" + \"[\" + \"  \" + \"   \" + \"  \" + \"  \" + \"  \" + \"  \" + \"  \" + \"  \" + \"  \" + \"]\\n  \\n\\n\\n\\n\" + \" \" + \"   \" + \"  \\n\\n \\n \\t\\u8bd7\\u751f\\u5024,\";\n\t\n\t// Test messages for the sent message queue\n\tprivate static final String UPDATE_MESSAGE = \"Hi World\"; \n\t\n\t// Test messages for the sent message queue\n\tprivate static final String USERNAME = \"Hello world\";\n\t\n\tclass StringEncrypterTest extends StringEncrypter<String> {\n\t\t\n\t\t@Override\n\t\tpublic String stringAsHexadecimal() {\n\t\t    final char[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n\t\t\t\t\n\t\t    return \"\";\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String stringAsBinary() {\n\t\t    final char[] decimal = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n\t\t\t\treturn new String(digits);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String stringAsHex(String value, int len) {\n\t\t\tif (!(value==null || value.isEmpty())) {\n\t\t\t\treturn new String(digits);\n\t\t\t}\n\t\t\tif (value.length() < len) {\n\t\t\t\tvalue = value.substring(0,  len);\n\t\t\t}\n\t\t\treturn new String(digits);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String stringAsString(String value, int len) {\n\t\t\treturn value == null? \"\" : value;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String encrypt(String value) {\n\t\t\treturn value == null? \"\" : value;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String decrypt(String encrypted) {\n\t\t\treturn encrypted == null || encrypted.isEmpty()? \"\" : encrypted;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String decryptText(String encrypted) {\n\t\t\tfinal String str = new String(((encrypted == null)? \"\" : encrypted).getBytes());\n\t\t\treturn encrypted!= null &&!encrypted.isEmpty()? new String(str.getBytes",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n\n// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {\n\t\t\n    private Hashtable<String, User> users;\n    private UsersBD usersBD;\n    final String host = \"localhost\";\n\n    /**\n     * {@link ModernChatServer_4Test#testChangeAdminPassword}\n     */\n    String changeAdminPassword(String emailAddr, String newPass, String oldPass) throws RemoteException {\n        String passwordEnc = StringEncrypter.getInstance(secToken).encrypt(oldPass);\n        String newPass1 = StringEncrypter.getInstance(secToken).encrypt(newPass);\n        if (newPass1.equals(newPass)) {\n            return null;\n        }\n        String newPass2 = StringEncrypter.getInstance(secToken).encrypt(newPass);\n        if (newPass1.equals(newPass2)) {\n            return null;\n        }\n        if (passwordEnc.equals(oldPass) && (newPass1.equals(newPass2))) {\n            return null;\n        }\n        return newPass1;\n    }\n    /**\n     * {@link #testChangeAdminPassword}\n     */\n    @Test\n    public void testChangeAdminPassword() throws RemoteException {\n        String newPass = StringEncrypter.getInstance(secToken).encrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(\"*\")).encrypt(StringEncrypter.getInstance(secToken).encrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).encrypt(newPass))))))))))));\n    }\n    \n    /**\n     * {@link #testChangeAdminPassword}\n     */\n    String changePassword(User user, String password) throws RemoteException {\n    \tString newPasswordEnc = StringEncrypter.getInstance(secToken).encrypt(user.getPassword() + \"*\");\n        byte newPassBytes = newPasswordEnc.getBytes(\"UTF-8\");\n        byte[] bytes = new PasswordsProvider.getPasswordBytes().get(user.getId());\n        for(int i= 0;i<64;i++) {\n            if(password.equals(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(StringEncrypter.getInstance(secToken).decrypt(newPassBytes))))) {\n            \tstringEq(newPassBytes, user.getPassword(), StringEncrypter.getInstance(secToken).encrypt(newPassBytes));\n                return newPassBytes;\n            }\n            bytes",
            "finish_reason": "length"
        }
    ],
    "id": "405b4833-74b6-4c95-a06c-0514e81ebd78",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_4Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {\n        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);\n        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);\n        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);\n        if (loginBean == null) {\n            return new ResultBean(false, IConstant.ERROR, \"Invalid Password!\");\n        }\n        oldPass = passwordEnc.encrypt(oldPass);\n        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);\n        newPass = passwordEnc.encrypt(newPass);\n        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {\n            passwords.put(adminUser.getId(), newPass);\n            return new ResultBean(true, IConstant.SUCCESS, null);\n        }\n        return new ResultBean(false, IConstant.ERROR, \"Error During Applying New Password!\");\n    }\n}\n",
    "test_prompt": "// ModernChatServer_4Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.\n*/\nclass ModernChatServer_4Test {",
    "time_taken": 29.884971857070923,
    "usage": {
        "prompt_tokens": 1363
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t/**\n\t\t* Main method of the test class.\n\t\t*/\n    @Test\n    void test() throws UnauthorizedException, NoSuchMethodException, IllegalAccessException, ClassNotFoundException, RemoteException, URISyntaxException {\n        ServerSettingBean defaultSetting = new ServerSettingBean();\n        \n\t\tServerSettings settings = ServerSettings.get(defaultSetting);\n\n        int port = settings.getPort();\n        if (port < 1024) {\n            port = 2048;\n        }\n\t\t\n        boolean isSecureChat = port == 54321;\n        \n\t\tHashtable<String, Object> properties = new Hashtable<>();\n        properties.put(\"org.apache.log4j.PropertyConfigurator\", \"com.caucho.log4j.PropertyConfigurator\");\n        properties.put(\"log_name\", \"TestLog\");\n        properties.put(\"log_level\",Level.INFO);\n        SimpleFormatter formatter = new SimpleFormatter();\n        properties.put(\"log_formatter\",formatter);\n        properties.put(\"log_file\", \"\" + (\"log4j.properties\"));\n        properties.put(\"log_path\", \"\" + \"log\");\n        properties.put(\"log_file_size\", \"\" + \"\" + \"\" + \"\");\n        properties.put(\"log_file_is_file\", \"\" + \"\" + \"\" + \"\");\n        properties.put(\"log_enable_std_out\", \"\" + \"\" + \"\" +",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t\n    @org.junit.jupiter.api.Test\n    void createNewServer() throws Exception {\n        if (runAsLocalServer()) {\n            org.junit.jupiter.api.TestInfo testInfo = org.junit.jupiter.api.TestInfo.create(\"Creates a new {@link org.junit.jupiter.api.Assignment} instance for the testing\",\n                           Boolean.TRUE);\n            if (isTestClassAndroidManifest()==true) {\n                testInfo.setLogMessage(\"Cannot run tests as androidManifest\");\n            }\n\n            ModernChatServer.testNewServer(testInfo);\n        } else {\n            org.junit.jupiter.api.TestInfo testInfo = org.junit.jupiter.api.TestInfo.create(\"Creates a new {@link org.junit.jupiter.api.Assignment} instance for the testing\",\n                           Boolean.TRUE);\n            if (isTestClassAndroidManifest()==true) {\n                testInfo.setLogMessage(\"Cannot run tests as androidManifest\");\n            }\n\n            LocalServer.testNewServer(testInfo);\n        }\n    }\n\n    /**\n     * Run a new TestInstance as a Server.\n     * @return TestInfo for running the test\n     * @throws Exception\n     */\n    private org.junit.jupiter.api.TestInfo testNewServer(org.junit.jupiter",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t//@Test\n/**\n    @Test\n */\npublic void testSendSecureTextMessage() throws URISyntaxException, RemoteException, NotRunningException {\n        //create a server\n        final ServerSettingBean setting = new ServerSettingBean();\n        setting.setProperty1(new Calendar().getTimeInMillis().toString());\n        setting.setProperty2(\"\");\n        setting.setProperty3(\"\");\n        setting.setProperty4(\"\");\n        setting.setProperty5(1);\n//        setting.setProperty6(22);\n//        setting.setProperty7(22.0);\n//        setting.setProperty8(1.0);\n//        setting.setProperty9(22);\n        setting.setPropertyBinaryMessage(\"\"); //the default setting is None - no binary\n\n//        setting.setProperty10(new Date().toString());\n//        setting.setProperty11(new Object());\n        setting.setProperty12(true);\n//        setting.setProperty13(true);\n//        setting.setProperty14(\"\");\n//        setting.setProperty15(\"\");\n//        setting.setProperty16(true);\n//        setting.setProperty17(new Integer(16).toString());\n//        setting.setProperty18(false);\n//        setting.setProperty19(24);\n//        setting.setProperty20(true);\n//        setting.setProperty21(\"\");\n//        setting.setProperty22(24.0);\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\tprivate User user = new User();\n\t\tprivate User user2 = new User();\n\t\tprivate ClientInterface client = null;\n    \n    public ModernChatServer_5Test() throws Exception {\n        //Create a new instance of the server\n        String serverSettingBean = \"serverSettingBean=java.lang.System.out\";\n        ServerSettingBean serverSetting = new ServerSettingBean();\n        serverSetting.setPropertyInServerSetting(serverSettingBean);\n        \n        String encryptionBean = \"encryptionBean=java.lang.System.out\";\n        StringEncrypter encryption = new StringEncrypter();\n        encryption.setBean( encryptionBean);\n        \n        Vector<String> clients = new Vector<String>();\n        clients.add(\"java.lang.Processing\");\n        \n        new ClientConfigBean().setClients(clients);\n        new ClientConfigBean().setEncryptionBean(encryptionBean);\n\n        JOptionPane.showMessageDialog(null, \"Welcome to the classic ORS server\", \"Welcome to the classic ORS server\", JOptionPane.INFORMATION_MESSAGE);\n\n        String secret = \"\";\n        String password = \"\";\n        try {\n                secret = String.valueOf(System.getProperty(\"java.security.auth.login.config\").split(\" \")[1]);\n                password = String.valueOf(System.getProperty(\"java.security.auth.sas",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t/**\n\t     * 1. run ping users and checks that they are still connected.\n\t     * 2. run server\n\t     * 3. check that login message for the connected user are send.\n\t     */\n\n\t    @Test\n    public void testPingUsers()  {\n        ClientInterface cf = new ClientInterface(new UsersBD());\n        Thread pingUsers = new PingUsersThread(cf);\n        pingUsers.start();\n    }\n\n\t    @Test\n    public void testServer() throws URISyntaxException {\n\t\tString testString1 = StringEncoder64.Encoder(new SimpleFormatter().Format(\"{3} {4}\"));\n\t\tSystem.out.println(\"testing server\");\n\t\tString testString2 = StringEncoder64.Encoder(new SimpleFormatter().Format(\"{%u %s %s}\"));\n\n\t\tString encrypted_String = StringEncrypter.encrypt(StringEncrypter.DECRYPT(), testString1);\n\t\tString encrypted_String2 = StringEncrypter.encrypt(StringEncrypter.DECRYPT(), testString2);\n\n\t\tSystem.out.println(encrypted_String);\n\t\tSystem.out.println(encrypted_String2);\n\n\t\tSystem.out.println(\"*** \"+ encrypted_String.substring(1, 32));\n\t\tSystem.out.println(\"*** \"+ encrypted_String2.substring(1, 32));\n\n\t\tRealServer realServer = new RealServer();\n\t\tSystem.out.",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t/**\n\t\t* Test the the secured string message receive by {@link ModernChatServer#sendSecureTextMessage(TextMessage)}\n\t\t*/\n\t\t@Test\n\t\tvoid testSecureStrMessage() throws URISyntaxException, RemoteException {\n\t\t\tString user = \"testuser\";\n\t\t\tString app = \"testapp\";\n\t\t\tString pass = \"testpass\";\n\t\t\tString time = \"testtime\";\n\n\t\t\t// test the the secured string message receive by {@link ModernChatServer#sendSecureTextMessage(TextMessage)}\n\t\t\tsendSecureTextMessage(new TextMessage(user, app, pass, time));\n\n\t\t\t// check if message is encrypted correctly\n\t\t\tString strEncryptedMessage = StringEncoder64.encrypt(user+\"$\");\n\t\t\tassertEquals(\"User from Server cannot correctly be encrypted\", user + \"$\", strEncryptedMessage);\n\n\t\t\t// check if encrypted string can be decrypted\n\t\t\tString expectedMessage = StringEncrypter.decrypt(user+\"$\", pass);\n\t\t\tassertEquals(\"Returned encrypted string cannot be the decrypted string\", expectedMessage, user + \"$\");\n\t\t}\n\n\t\t@Test\n\t\tvoid testSimpleMessage() throws URISyntaxException, RemoteException {\n\t\t\tString user = \"testuser\";\n\n\t\t\tString app = \"testapp\";\n\n\t\t\tString pass = \"testpass\";\n\t\t\tString time = \"testtime\";\n\t\t\tString result = \"result\";\n\n\t\t\t// test the the secured message receive by {@link ModernChatServer#sendSecureTextMessage(",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\tprivate ClientInterface client = new ClientInterface();\n    ModernChatServer _server;\n\t\t\t\tprivate User user = null;\n\t\t\t\tprivate String password = null;\n\t\t\t\tprivate String username = null;\n\t\t\t\tprivate String nickname = null;\n\t\t\t\tprivate String hostname = null;\n\t\t\t\tprivate boolean isLogged = false;\n\t\t\t\tprivate boolean isRegistered = false;\n\t\t\t\tprivate boolean isRegisteredUser = false;\n\t\t\t\tboolean send = true;\n\t\tprivate ClientInterface client1 = null;\n\t\t\n\t\tboolean sendSecureTextMessageToUser(TextMessage msg, ClientInterface cf)\n\t\t{\n\t\t\tString send = \"\";\n\t\t\tString userId = msg.getToUserId();\n\t\t\tboolean result = false;\n\t\t\tif(msg.getMessage() == IConstant.TEXT_MESSAGE_SUCCESS) {\n\t\t\t\tif(client.sendMessage(userId, \"\", msg.getContent()) == true) {\n\t\t\t\t\tresult = send = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(send && result == false) {\n\t\t\t\tSystem.out.println(\"You have failed to send a message\");\n\t\t\t}\n    \n\t\t\treturn result;\n\t\t\t\n\t\t}\n\t\tprivate Vector<String> getRooms(){\t\t\n\t\t\tVector<String> result = new Vector<String>();\n\n\t\t\tfor(int i =0; i<getGroups().size(); i++) {\n\t\t\t\tresult.add(getGroups().get(i).getRoom());\n\t\t\t}\n\t\t\tfor(int i",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t@Test\n    public void initServerThread_1() throws RemoteException, LoginBean, LoginException {\n\tserver.setServerInterface(new ServerService());\n        String s = \"Hello\";\n        server.write(new TextMessage(true, s));\n        server.write(new TextMessage(false, s));\n    }\n}\npublic class ServerService extends UnicastRemoteObject implements ServerInterface {\n    private static Logger logger = createLogger(ServerService.class.getName());\n    private final Hashtable<Integer, ClientInterface> connectedClients;\n    private Hashtable<Integer, ClientInterface> connectedClient = new Hashtable<Integer,ClientInterface>();\n    private Server s;\n    public ServerService()\n        throws NamingException {\n        s = new Server(\"\");\n        String serverReg = \"REG:\\\\\" + StringEncrypter.addBytes((String) Naming.lookup(\"REG:\" + IConstant.TMP_REG).toString());\n        s.openConnection(serverReg);\n         logger.fine(\"Server registed\");\n        s.run();\n        //regist to connect to the chat server\n        //regist to be able to call login method\n    }\n     public synchronized void\n        registerClient(int userId,ClientInterface client) throws RemoteException {\n        //regist for connect to chat\n        //regist for disconnect client\n        //regist for register contact method\n        //regist for setRoom parameter\n        ",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\tString test_name;\n\t\tBinaryMessage msg;\n\n\t\tpublic ModernChatServer_5Test(String test_name) {\n\t\t\tthis.test_name = test_name;\n\n\t\t}\n\n\n\t\t@Test\n\t\tpublic void test1() throws Exception {\n\t\t\tassertNotNull(connectAndReceive(null));\n\t\t\tassertTrue(true);\n\n\t\t}\n\n\t\t/**\n\t\t* Test if {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method works fine.\n\t\t*/\n\t\t@Test\n\t\tpublic void test2() throws Exception {\n\t\t\tsendSecureTextMessage(msg);\n\t\t\tassertNotNull(connectAndReceive(null));\n\t\t\tassertTrue(true);\n\n\t\t}\n\n\t\t/**\n\t\t* Test if {@link ModernChatServer#sendSecureTextMessage(TextMessage)} works fine.\n\t\t*/\n\t\t@Test\n\t\tpublic void test3() throws Exception {\n\t\t\tsendSecureTextMessage(null);\n\t\t\tassertNotNull(connectAndReceive(null));\n\t\t\tassertTrue(true);\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Test if {@link ModernChatServer#sendSecureTextMessage(TextMessage)} works fine.\n\t\t*/\n\t\t@Test\n\t\tpublic void test4() throws Exception {\n\t\t\tsendSecureTextMessage(new BinaryMessage(System.currentTimeMillis()+\"\", new TextMessage(\"Hello\"+System.currentTimeMillis())));\n\t\t\tassertNotNull(connectAndReceive(null));\n\t\t\tassertTrue(true);\n\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {\n\t\t   \t\tpublic String test_1(){\n\t\t\t\t\tVector<User> tempVector = new Vector();\n\t\t\t\t\tint tempUser1 = 3;\n\t\t\t\t\tThread thread = new SleepThread();\n\t\t\t\t\tThread thread2 = new CreateAndSendBroadcastThread(new String[] {\"user_to_user\", StringEncoder64.KEYWORD, StringEncrypter.ENCRYPTOR_ALGO, \"test\", StringEncoder64.KEYWORD},tempUser1,tempUser1, tempUser1.toString(), StringEncrypter.ENCRYPTOR_ALGO);\n\t\t\t\t\tThread thread3 = new SendRefreshContactThread(null, null, tempUser1, null, null);\n\t\t\t\t\tThread thread4 = new ChatThread(new ClientInterface[] {new User(1,\"test\")});\n\t\t\t\t\tThread t2 = new SendKickOffMessageThread(null, null, tempUser1, null, null);\n\t\t\t\t\tThread t3 = new SendKickOffByLoginMessageThread(null, null, tempUser1, null, null,null,null,Thread.currentThread());\n\t\t\t\t\tThread t4 = new SendUserUpdatedStatusThread(null, null, tempUser1, null, null,Thread.currentThread());\n\t\t\t\t\tthread.start();\n\t\t\t\t\tthread2.start();\n\t\t\t\t\tthread3.start();\n\t\t\t\t\tthread4.start();\n\t\t\t\t\t\n\t\t\t\t\twhile(thread.isAlive()){System.out.println(\"Hello\");}\n\t\t\t\t\tif (thread4!= null) thread4.join();\n\t\t\t\t\tif (t3",
            "finish_reason": "length"
        }
    ],
    "id": "e98558e3-a8e1-4b7f-a60b-e29251ff5ac6",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_5Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextMessageToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers != null && tempUsers.size() > 0) {\n                //loop on users\n                boolean success = false;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers != null && tempUsers.length > 0) {\n                boolean success = false;\n                //loop on users\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i] != msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (sendSecureTextMessageToUser(msg, cf)) {\n                            success = true;\n                        }\n                    }\n                }\n                if (success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n",
    "test_prompt": "// ModernChatServer_5Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.\n*/\nclass ModernChatServer_5Test {",
    "time_taken": 17.025991916656494,
    "usage": {
        "prompt_tokens": 1714
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\tstatic final boolean DEBUG_SEND = false;\n\n    // The test is created in {@link #TestSendBinaryMessage()}\n    \n    /**\n     * Test the implementation of the run method, which returns a return value to the calling unit.\n     */\n    @Test\n    public void testRun() {\n        getLogger().log(Level.INFO, \"the test will start with {0}\", StringEncoder64.encode(Integer.MAX_VALUE, IConstant.UTF_32));\n        getLogger().log(Level.INFO, \"now create a server that has a user account, to a group\");\n        TestServer server = new TestServer(new Hashtable<String, String>());\n        getLogger().log(Level.INFO, \"now add a new user with a name that starts with 'abc'\");\n        useradd(Integer.MAX_VALUE, \"abc\", Integer.MAX_VALUE, 100, 100, \"\", new ArrayList(), \"\", null, null);\n        getLogger().log(Level.INFO, \"just create a new room\");\n        server.createRoom(\"Room1\", \"Room 1\");\n        // TODO: the following call is not correct, but not important.\n        //getLogger().log(Level.INFO, \"just get its properties\");\n        //getLogger().log(Level.INFO, \"get its properties\");\n        //getLogger().log(Level.INFO, \"just update it\");\n        // getLogger().log(Level.INFO, \"get the user\");\n        // getLogger().log(Level.INFO, \"get the group\");\n        //getLogger().log(Level.INFO, \"get the room\");\n        // server.start(server);\n        System.out.println(\"the test will end with {0}\",  StringEncrypter.encode(Integer.MAX_VALUE, IConstant.UTF_32));\n    }\n\n    /**\n     * We can start a new server, after which we put many client on a server, which needs a user account and a group.\n     */\n    @Test\n    public void testStartServer() {\n\n        String userAdd = \"This will be not be added to the new server. It was set as a server user in order to have the new server created in the test.\";\n        String userAdd2 = \"This user's name will be added to the new server user.\";\n        // We add user 'abc' and group 'abc'\n        addUser(Integer.MAX_VALUE, \"abc\", Integer.MAX_VALUE, 100, 100, userAdd);\n\n        // And we add another user 'def' and group 'xyz'\n        addUser",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\t\n    TextMessage textMessage;\n    Hashtable<String, TextMessage> textMap = new Hashtable<>();// hash map for test\n    Hashtable<String, Group> groupMap = new Hashtable<>();// hash map for test\n    \n    /**\n     * Test server.\n     */\n    void onStartServer() {\n        try {\n            JOptionPane.showMessageDialog(null, \"starting server!\");\n            MessageManager.startServer(JOptionPane.showInputDialog(\"server ip\"), JOptionPane.showInputDialog(\"server port\"));\n        } catch (RemoteException ex) {\n            Logger.getLogger(ModernChatServer_6Test.class.getName()).log(Level.INFO, \"RemoteException\", ex);\n        }\n    }\n\n    /**\n     * This test case implements server tests in {@link ServerInterface} interface.\n     * It includes one thread that sends a text message, check the status of that message and server thread.\n     */\n     @Test\n    public void sendBinaryMessage() throws Exception {\n      //start server thread\n        new SendServer().start();\n        String[] keys = new String[2];\n        MessageManager.createMessage(textMessage);\n        Vector<BinaryMessage> msgList = new Vector<>();\n        Object obj = new UnicastRemoteObject(StringEncoder64.INSTANCE);\n        synchronized(obj) { //synch object is initialized already\n            Thread t = new SendUserUpdatedStatusThread(new User(connManager.getUsers()[1].getUsername()), ICRON_FIFO_MINUTE);\n            t.start();\n            Thread thread = new SendRefreshContactThread(StringEncoder64.INSTANCE);\n            thread.start();\n            try {\n                // wait for thread to run and get a text message for that user\n                while(t.isAlive() && thread.isAlive()){}\n                Thread.sleep(1000);\n                \n                String msg = StringEncrypter.getEncrypter().encrypt(StringEncoder64.INSTANCE + \" Hello World!!\" + getClass().getSimpleName() + \" \" + textMessage.getData().length);\n                obj.notify();\n                Thread.sleep(2000);\n                \n                \n                StringEncoder64.INSTANCE.reset();\n                while(Thread.currentThread() == t)\n                    Thread.yield();\n                assertTrue(obj.getClass().getSimpleName().equals(StringEncoder64.INSTANCE.getClass().getSimpleName()));\n                \n                if(obj.getClass().getSimpleName().equals(StringEn",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\tprivate StringEncoder64 stringEncoder = new StringEncoder64();\n\n\t\t/*\n\t\tTo run this test you need to change following properties:\n\t\t* {@value IConstant#USER_BINDING_URI} to {@value IConstant#MUC_STREAM_BINDING_URI}\n\t\t*/\n//\t\tprivate final String USER_BINDING = \"ou+\" + IConstant.MUC_STREAM +\"/\";\n//\t\tprivate final String MUC_BINDING = IConstant.CONF + \"/\"+ IConstant.OUTSIDE_DB +\"/\";\n\n\t\t// test start to run\n\t\t@Test\n\t\tpublic void runTests() throws RemoteException, URISyntaxException {\n\t\t\tfinal IConnection connection = new IConnection(\"jboss://\" + IUserInfo.getUsernameFromBindPoint() + \"@\" + IUserInfo.getRealIp(), true);\n\n\t\t\tint count = 0;\n\t\t\tfinal Hashtable<IUserInfo, UsersBD> connectedUsers = new Hashtable<>();\n\t\t\tfinal Vector<ClientInterface> onlineClients = new Vector<>();\n\t\t\tfinal Vector<String> onlineClientsIPs = new Vector<>();\n\t\t\tfinal Vector<User> allUsers = new Vector<>();\n\t\t\tfinal Vector<ChatRoom> chatRooms  = new Vector<>();\n\t\t\tfinal Vector<Group> allGroups  = new Vector<>();\n\n\t\t\tString testURL = \"\";\n\t\t\tif (StringUtils.isEmpty(connection.getBindPointUser())) {\n\t\t\t\ttestURL = this.getClass().getResource(\"\").toURI().toString();\n\t\t\t}\n\t\t\t\n\t\t\tconnection.setStreamBindPointUser(connection.getUserBindPointURI());\n\t\t\t/* if (StringUtils.isEmpty((String)JOptionPane.showInputDialog(\"Please enter bind address\"))){\n\t\t\t\tconnection.setBindPoint(null);\n\t\t\t\tSystem.out.println(\"error\");\n\t\t\t}\n\t\t\t */\n\n\t\t\tif(!allUsers.isEmpty()){\n\t\t\t\tfor(int i=0; i<allUsers.size(); i++){\n\t\t\t\t\tnew Thread() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tString userId = allUsers.get(i).getId();\n\t\t\t\t\t\t\t\tUsersBD usersBD = connectedUsers.get(userId);\n\t\t\t\t\t\t\t\tSystem.out.println(\"userId=\" + userId);\n\t\t\t\t\t\t\t\tSystem.out.println(StringEncoder64.encodeString((String)JOptionPane.showInputDialog(\"Please enter bind address\")));\n\t\t\t\t\t\t\t\tSystem.out.println(\"userId=\" + userId);\n\t\t\t\t\t\t\t\tUserInfo userInfo = usersBD.getUser",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\tprivate final ClientInterface client = connectedClients.get(loginClient);\n\t\tprivate final UsersBD users = new UsersBD();\n    private final LoginBean loginBean = new LoginBean();\n\n    private final ClientInterface loginBeanClient = new ClientInterface();\n\n\n    /**\n     * Main method.\n     */\n    @Test\n    public void testRun() {\n        try {\n            String[] args = new String[]{\"-\"};\n            execute(true, loginBeanClient, loginBean, new TextMessage(\"hello\"), \"World\", args);\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    private void execute(boolean isLogin, java.lang.String loginBeanClient, java.lang.String loginBean, java.lang.String textMessage, java.lang.String serverSetting, java.lang.String... args) throws Exception {\n\n        String[] data = getRmiData();\n\n        Vector<Object> resultVector;\n        String keyStorePath;\n        java.security.Security security = null;\n        String keyStore = \"\";// \"keyStorePassword\": \"12345678\";\n        try {\n            Registry registry = LocateRegistry.getRegistry(Integer.toString(Integer.MAX_VALUE), \"localhost\");\n\n            JOptionPane.showMessageDialog(null, \"Hello\", \"Test\", JOptionPane.INFORMATION_MESSAGE);\n            System.out.println(\"Message: \" + textMessage);\n            systemSetting(serverSetting);\n            System.out.println(\"Password: \" + getSettings().getUserServerSettingPathKeyValueText());\n            if(isLogin){\n                //test execute\n                userInfo();\n            }\n\n            /*if (getLogger().isLoggable(Level.CONFIG)) {\n                String[] fileNames = new String[data.length * 5];\n                for (int i = 0 ; i < data.length ; i++) {\n                    fileNames[i] = \"logon-\" + Long.toString(i);\n                }\n                //String[] logonFileNames = data;\n                for (int i = 0 ; i < 5 ; i++) {\n                    try {\n                        String[] fileNames = new String[data.length * 5];\n                        for (int j = 0 ; j < data.length ; j++) {\n                            fileNames[j] = \"logon-\" + Long.toString(j);\n                        }\n                        //java.util.Arrays.sort(fileNames).reverse().forEach(fileNames::add);\n                        System.out.println(\"Logon File",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\tprivate ClientInterface cf;\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\t\n    private static Logger logger = Logger.getLogger(ModernChatServer.class.getName());\n    \n    /**\n     * Test 1 : If the binary message is not sent, then nothing is displayed.\n     */\n    @Test (expected = RemoteException.class)\n    public void test_1() throws RemoteException {\n        //Online User\n            try {\n                User user = UsersBD.getOnlineUser(); // Get online user\n                assertTrue(user.getOnlineTime().before(Calendar.getInstance().getTime()));\n                StringEncoder64 hexMessage = ServerSettingBean.getInstance().getServerBean().getHexEncrypter();\n                String hexElements = StringEncrypter.encrypt(hexMessage, user.getHex(), StringEncrypter.Mode.SHA_192);\n                assertFalse(hexElements.equals(user.getHex()));\n                user = UsersBD.reconnectUser(user.getUserId()); // reconnect the online user\n                assertTrue(user.getOnlineTime().before(Calendar.getInstance().getTime()));\n            } catch (RemoteException ex1) {\n            }\n\n        // Online Group\n            try {\n                Group group = GroupsBD.getOnlineGroup(); // Get online group\n                group.setOnlineTime(Calendar.getInstance().getTimeInMillis());\n                GroupsBD.reconnectAllGroup(); // reconnects\n                group = GroupsBD.getOnlineGroup(); // Get online group\n                group.setOnlineTime(Calendar.getInstance().getTimeInMillis());\n            } catch (RemoteException ex) {\n            }\n\n        // Online Room\n\n            try {\n                Room room = RoomsBD.getOnlineRoom(); // Get online room\n                room.setOnlineTime(Calendar.getInstance().getTimeInMillis());\n            } catch (RemoteException ex) {\n            }\n\n        // Online Chat Server\n\n            try {\n                ChatServerConfig chatServerConfig = ChatServerConfigHolder.getInstance();\n                chatServerConfig\n                   .setUserData(ServerSettingBean.getInstance().getServerBean());\n                ChatServerHolder.getInstance().setChatServer(chatServerConfig);\n            } catch (RemoteException ex1) {\n            }\n    }\n\n    /**\n     * Test 2 : If the binary message is not sent, then nothing is displayed.\n     */\n    @Test (expected = RemoteException.class)\n    public void testRmi_2() throws RemoteException {\n        //Online User\n            try {\n                User user = UsersBD.getOnlineUser(); // Get online user\n                assertTrue(user.getOnlineTime().",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\t\n    /**\n     * Main().\n     * @param args the system arguements.\n     */\n    public static void main(String[] args) {\n        StringEncoder64 _stringEncoder64 = new StringEncoder64();\n        try {\n            Logger logger = Logger.getLogger(\"org.apache.log4j\");\n            logger.setLevel(Level.FINE);\n            Format _format = new SimpleFormatter();\n            FileHandler _fileHandler = new FileHandler(\"logs\\\\Offline.log\");\n            _fileHandler.setFormatter(new SimpleFormatter(_format));\n            logger.addHandler(_fileHandler);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        //Initializing the server\n        ModernChatServer server = new ModernChatServer();\n        System.out.println(\"Start the server thread\");\n        server.start();\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException ie) {}\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\tprivate ServerInterface serverInterface;\n\n\t\tprivate ClientInterface clientInterface;\n\n\t\tprivate Vector<ClientInterface> clientList = new Vector<ClientInterface>();\n\n\t\tprivate Vector<ServerInterface> connectedClients = new Vector<ServerInterface>();\n\n\t/**\n\t* Set up {@link ModernChatServer_6Test} class.\n\t*/\n\t@Test\n\tpublic void initServerTest() throws Exception {\n\t\tClientInterface cf;\n\t\tStringEncoder64 strEncrypterObj = new StringEncoder64();\n\t\tUser user;\n\t\tHashtable<String, Object> hashTable = new Hashtable<String, Object>();\n\t\thashTable.put(User.USERNAME, \"test\");\n\t\thashTable.put(User.PASSWORD, \"test\");\n\t\thashTable.put(User.EMAIL, \"test\");\n\t\thashTable.put(User.FIRSTNAME, \"firstname\");\n\t\thashTable.put(User.LASTNAME, \"lastname\");\n\n\t\tint passwordLength = 4;\n\t\tMessageDigest m = MessageDigest.getInstance(\"MD5\");\n        Calendar cal = Calendar.getInstance();\n        cal.setTimeInMillis(0);\n        cal.add(Calendar.SECOND, -1);\n        String dateTime = cal.getTimeInMillis()+\"0000\";\n        strEncrypterObj.encode32(passwordLength, passwordLength + 4);\n\t\tstrEncrypterObj.encode(dateTime, passwordLength + 7);\n        ClientInterface newClient = new ClientInterface(m, strEncrypterObj, new Hashtable<String, Object>(), new Hashtable<String, Object>(), new Hashtable<String, Object>(), newHashtable());\n\t\tserverInterface = new ClientInterface(newClient, m, strEncrypterObj, new Hashtable<String, Object>(), new Hashtable<String, Object>());\n\n\t\tstrEncrypterObj = new StringEncoder64();\n\n\t\tstrEncrypterObj.encode32(passwordLength, passwordLength + 4);\n\t\tstrEncrypterObj.encode(dateTime, passwordLength + 7);\n\t\thashTable.put(LoginBean.USERNAME, \"test\");\n\t\thashTable.put(LoginBean.PASSWORD, \"test\");\n\t\thashTable.put(LoginBean.LOGIN, \"test\");\n\t\thashTable.put(LoginBean.USERID, \"test\");\n\n\t\tnewClient = new ClientInterface(newClient, m, strEncrypterObj, hashTable, new Hashtable<String, Object>());\n\n\t\tsendKickOffMessageThread = new SendKickOffMessageThread(strEncrypterObj, new Hashtable",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\t/**\n\t\t* @param args not used.\n\t\t*/\n\t\tpublic static void main(String[] args) {\n\n\t}\n\n\t/**\n\t* This field is a String field for the {@link IConstant#OFFLINE} state.\n\t* It is used to keep track of state in offline status.\n\t*/\n    private final String offline = \"Offline\";\n\n    /**\n    * This field is a String field for the {@link IConstant#SUCCESS} state.\n    * It is used by the server to keep track state related with the authentication\n    * success flag.\n    */\n    private final String success = \"Success\";\n\n    /**\n     * This object is a ClientInterface object for the online case.\n     */\n    private final ClientInterface client;\n\n    /**\n     * This string is the message to send when the server is online.\n     */\n    private final String online = \"online\";\n\n    /**\n    * The following method is called by Runnable to notify all online users have connected\n    * @param userId the id of the user that was online before.\n    */\n    public void notifyOnline(int userId) {\n        System.err.println(\"User:\" + userId + \" : \" + \"online\");\n    }\n\n    /**\n    * This method starts an online test thread to ping users to connect.\n    */\n    public void startPingThread() throws RemoteException, MalformedURLException, InterruptedException {\n        if (!isOnline()) {\n\n            //start a thread to send a online message to server when is online.\n            ServerSettingBean setting = new ServerSettingBean();\n            setting.setServerName(getServerName());\n            setting.setOnlineMessage(online);\n            setting.setOnlineServer();\n\n            Thread thread = new SendRefreshContactThread(setting);\n            thread.setName(\"OnlineTest\");\n            thread.start();\n\n            //wait for thread start\n            Thread.sleep(1000);\n        } else {\n\n            //start a thread to send a online message to server when is online.\n            Thread thread = new SendRefreshContactThread(this.client);\n            thread.setName(\"PingThread\");\n            thread.start();\n\n            //wait for thread start\n            Thread.sleep(1000);\n        }\n\n        //get a list of users who are online\n        Vector offlineUsers = new Vector();\n        Enumeration<User> e = connectedUsers.elements();\n        while (e.hasMoreElements()) {\n            User user = (User) e.nextElement();\n            if (user.getUserId()!= -1) {\n                offlineUsers.add(user);\n            }",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {\n\t\t@Test\n    public void testServerMessage() throws RemoteException, URISyntaxException {\n             \n        new SendRoomMessageThread();\n        new SendRoomMessageThread();\n        new SendBinaryMessageThread();\n        new SendUserUpdatedStatusThread();\n        new SendSendNickAndIDThread();\n        new SendKickOffMessageThread();\n        new SendRefreshContactThread();\n        new SendUserUpdatedStatusThread();\n\n        //sendBinaryMessage(new BinaryMessage()).\n    }\n\n    @Test\n    public void testOfflineStatus_1() throws RemoteException {\n    }\n\n    @Test\n    public void testOfflineStatus_2() throws RemoteException {\n        \n        String key = StringEncrypter.randomString();\n        byte[] encryptedData = IConstant.ENCRYPTED_BINDATA.getBytes();\n        \n        try {\n            //sendBinaryMessage(new BinaryMessage(encryptedData)).\n            \n            boolean offlineStatus = false;\n            \n            Thread t = new SendBinaryMessage(new BinaryMessage(encryptedData));\n            t.start();\n            \n            \n            Thread.sleep(2000);\n    } catch (Exception ex) {\n            fail(\"Test failed\");\n        }\n    }\n\n\n    StringEncrypter randomString() {\n        //return SecureRandom.getInstance(\"SHA1PRNG\", \"\").nextBytes(new byte[16]).toHexString();\n        return new StringEncoder64().encode(\"\" + Calendar.getInstance().getTime() + \"/\");\n    }\n    \n    @Test\n    public void testPingUsersThread() throws RemoteException {\n\n        UsersBD users = new UsersBD();\n        Vector<User> usr1 = users.getUsersList();\n        int counter = 0;\n        StringEncoder64 encrypt = new StringEncoder64();\n    \n        try {\n            System.out.println(\"Running testPingUsers\");\n            Thread t = new SendPingBackAndOfflineMessageThread();\n          \n            t.setName(\"Send Ping and Offline Msg Thread of \"+counter);\n            \n            t.start();\n            \n            \n            Thread.sleep(2000);\n        } catch (Exception e) {\n            System.out.println(\"Test failed \"+e);\n            assertTrue(false);\n\n        }\n\n\n\n\n    }\n    \n    class SendBinaryMessageThread implements Runnable {\n    \n        Vector<BinaryMessage>  binMessages;\n        private int numPass = 0;\n        private int numNotPass = 0;\n        int getLastPassCheck = 0;\n        BinaryMessage tempBinary;\n    \n        int lastPassCheckTime = 0;\n",
            "finish_reason": "length"
        }
    ],
    "id": "92893cba-2ec0-4b2d-bb22-a1871ea946c1",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_6Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n",
    "test_prompt": "// ModernChatServer_6Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_6Test {",
    "time_taken": 27.01543354988098,
    "usage": {
        "prompt_tokens": 1443
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\tprivate User onlineUser;\n\n        private ClientInterface clientIF;\n\n        private ServerInterface onlineThread;\n        /*\n         * Class contains for get online user\n         */\n        private int onlineUserId = -1;\n\n        private ClientInterface clientIF;\n\n\n\t/**\n     * Initialize class by passing user id and {@link ServerInterface}.\n     * @param onlineUserId an integer value which is a user id that needs to have the server\n     * @param onlineThread an instance of {@link OnlineThread}\n     */\n    public ModernChatServer_7Test (int onlineUserId, ServerInterface onlineThread) {\n        ClientInterface cf = connectedClients.get(onlineUserId);\n        if (cf == null) {\n            return;\n        }\n        this.onlineUserId = onlineUserId;\n        ClientIF = cf;\n        this.onlineThread = onlineThread;\n        onlineThread.register(this);\n        this.onlineThread.executeOn(this);\n    }\n\t/**\n     * Check onlineUserId in offlineThread of {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n     * @param onlineUserId a positive integer that has to compare with <b>server user id</b> of {@link OfflineThread}\n     * @throws Exception\n     */\n    @Test\n    public void testOnlineUser ( int onlineUserId ) throws RemoteException {\n    \tassertEquals(onlineUserId, getOnlineUserId());\n\t}\n\n\t/**\n\t * @param onlineUserId a positive integer that has to compare with <b>server user id</b> of {@link OnlineThread}\n     * @throws Exception\n\t */\n\tprivate void initializeWithOfflineThread ( int onlineUserId ) throws RemoteException {\n            try {\n                //online message, send it..\n                clientIF.receiveSecureBinaryMessageLoad(onlineUserId, false);\n            } catch (RemoteException ex) {\n                try {\n                    onlineThread.receiveSecureBinaryMessageLoad(onlineUserId);\n                } catch (RemoteException ex1) {\n                }\n            }\n\t}\n\t/**\n\t * @throws RemoteException\n\t * @throws URISyntaxException\n\t * @throws RemoteException\n\t * @throws RemoteException\n\t */\n\tpublic void testOnlineThread () throws RemoteException, URISyntaxException, RemoteException {\n\t\tVector<Thread> activeWorkThreads = OnlineThread.getActiveWorkThreads();\n        initOnlineThread();\n\t\t//check the onlineThread state\n\t\tHashtable onlineStatus = OnlineThread.getOnlineState();\n\t\tint onlineWorkThreadCount",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n    @Test\n    public void simpleTest(){\n        String encodedStr = encode(\"Hello World!\");\n        assertEquals(\"Hello World!\", encode(\"Hello World!\"));\n        assertEquals(\"Hello World!\", decode(encodedStr));\n    }\n    \n    /**\n     * Method for test the size of encodedMessage if no other check is done.\n     * @param val int\n     */\n    @Test\n    public void encodeSimpleTest(){\n        Hashtable<String,String> hashtable = new Hashtable<>();\n        hashtable.put(\"name\", \"TEST\");\n        hashtable.put(\"nickName\", \"test\");\n        String encodedStr = StringEncrypter.encrypt(hashtable);\n        assertEquals(\"Test TEST\",StringEncoder64.decrypt(encodedStr));\n    }\n    \n    public static String encode(String test){\n        String encoded_str = StringEncrypter.encrypt(test);\n        return encoded_str;\n    }\n\t\n    public static String decode(String test){\n        String testEnc = StringEncrypter.decrypt(encoded(test));\n        return testEnc;\n    }\n    \n    @Test\n    public void testServerStartAndStop(){\n        MainWindow w = new MainWindow();\n        System.exit(w.onWindowClosed());\n    }\n    \n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\tprivate final ClientInterface cf = null;\n\t\tprivate final ServerSettingBean server = new ServerSettingBean();\n\t\tprivate final ServerInterface serverInterface = null;\n\t     \tprivate final String serverName = server.getServerName();\n\t\t\t\tprivate final String ipAddress = server.getIpAddress();\n\t\t\t\tprivate final String publicKey = server.getPublicKey();\n\t\t\t\tprivate final ServerInterfaceClient client = new ServerInterfaceClient(ipAddress, publicKey);\n\t\t\t\tprivate final BinaryMessage msg = new BinaryMessage(new TextMessage(\"hello\"), new ChatThread);\n\t\t\t@Test\n\t\t\tpublic void test_ServerSettingBean_1() throws Exception {\n\t\t\t\tString[] parameters = new String[1];\n\t\t\t\tparameters[0] = \"1\";\n\t\t\t\tserver.setServerSetting(parameters);\n\t\t\t\tassertNotNull(\"Null param list\", parameters);\n\t\t\t\tassertTrue(\"ServerName is missing\",serverName.equals(\"\"));\n\t\t\t\tassertNotNull(\"ServerName is missing\",server);\n\t\t\t\tassertTrue(\"server.ipAddress is missing\",server.getIpAddress()!=null);\n\t\t\t\tassertFalse(\"ServerPublicKey is missing\",server.getPublicKey()==null);\n\t\t\t\tassertFalse(\"ServerName is missing\",serverName.equals(server.getServerName()));\n\t\t\t\tassertTrue(\"PublicKey is missing\",server.getPublicKey()!=null);\n\t\t\t\tassertFalse(\"ServerIsIP is missing\",server.getServerIpAddress().startsWith(\"IPv4\"));\n\t\t\t\tassertFalse(\"ServerIsIP is missing\",server.getServerIpAddress().startsWith(ipAddress));\n\t\t\t\tassertFalse(\"ServerIsIP is missing\",server.getIpAddress().startsWith(\"IPv4\"));\n\t\t\t\tassertTrue(\"ServerIsIpAddr is missing\",server.getIpAddress().endsWith(\".255.255.255\"));\n            }\n            @Test\n            public void test_serverInterfaceClient_2() throws Exception {\n\t\t\t\tString[] parameters = new String[1];\n\t\t\t\tparameters[0] = \"1\";\n\t\t\t\tserver.setServerSetting(parameters);\n                assertNotNull(\"Null param list\", parameters);\n                assertTrue(\"ServerName is missing\",serverName.equals(\"\"));\n                assertNotNull(\"ServerName is missing\",server);\n                assertTrue(\"server.ipAddress is missing\",server.getIpAddress()!=null);\n                assertFalse(\"ServerPublicKey is missing\",server.getPublicKey()==null);\n                assertFalse(\"ServerName is missing\",serverName.equals(server.getServerName()));\n                assertTrue(\"PublicKey is missing\",server.getPublicKey()!=null",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n\t/**\n\t * Run the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} test method.\n\t * @throws RemoteException\n\t * @throws Exception\n\t */\n    @Test\n    public void testSendSecureBinaryMessage() throws RemoteException, Exception {\n        try {\n                //load server setting.\n                Hashtable setting = new Hashtable();\n                setting.put(IConstant.URL, ClientSetting.URL);\n                setting.put(IConstant.NAME, ClientSetting.NAME);\n                setting.put(IConstant.PASS, ClientSetting.PASS);\n                setting.put(IConstant.PASS_SECOND_PASS, 1);\n                setting.put(\"Offline\", IConstant.OFFLINE);\n\n                //set ip of server.\n                String IP = ServerSettingBean.getServerIP();\n                ClientSetting.setServerIP(IP);\n\n                //set ip of server.\n                String IP2 = ServerSettingBean.getServerIP();\n                ClientSetting.setServerIP(IP2);\n\n                //init and start server.\n                String address = \"http://localhost:5000/\";\n                //Server setting.\n                Registry registry = LocateRegistry.getRegistry(IP, 9000);\n                registry.bind(\"ClientSetting\", new ClientSettingBean(setting));\n                ServerSettingBean cf;\n                cf = (ServerSettingBean) registry.lookup(ClientSettingBean.class);  //registry.lookup(ClientSettingBean.class);\n                String url = cf.getUrl();\n                if (url.length() > 0) {\n                    registry.rebind(\"ClientSetting\", cf);   //registry.bind(\"ClientSetting\", cf);\n                }\n\n                //create and start server.\n                String hostname = ServerSettingBean.getServerName();\n                int port = ServerSettingBean.getServerPort();\n                ServerSettingBean cf2 = new ServerSettingBean(HTTP, hostname, port, \"\");\n                ServerSettingBean.setServerName(cf2.getName());\n                ServerSettingBean.setServerHostname(cf2.getHostname());\n                ServerSettingBean.setServerPort(cf2.getPort());\n                //ServerSettingBean cf2 = new ServerSettingBean(HTTP, HTTP, 9000, ServerSettingBean.getServerName(), ServerSettingBean.getServerIP(), ServerSettingBean.getServerHostname(), ServerSettingBean.getServerPort());\n                registry.rebind(\"ClientSetting\", cf2);\n                registry.rebind(\"ClientSettingHostname\",",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n    JOptionPane pane;\n    \n    @Test\n    void testSendSecureBinaryMessage() throws RemoteException, IllegalAccessException, IllegalArgumentException, NoSuchFieldException, NoSuchMethodException {\n        new SendRefreshContactThread().start();\n        new SendServerSettingBinaryMessagesThread().start();\n        new SendUserUpdatedStatusThread().start();\n        new SendKickOffMessageThread().start();\n        new SendKickOffByLoginMessageThread().start();\n    }\n    \n    void onlineStatus(int userId) {\n        //online message\n        pane.setValue(\"online status\" + new Random().nextInt(2));\n        new SendUserUpdatedStatusThread().start();\n    }\n    \n    void offlineStatus(int userId) {\n        if (userId == 0) {\n            pane.setValue(\"online status\" + IConstant.OFFLINE);\n        } else if (userId == 1) {\n            pane.setValue(\"online status\" + IConstant.ONLINE);\n        } else {\n            pane.setValue(\"online status\" + IConstant.OFFLINE);\n        }\n        new SendUserUpdatedStatusThread().start();\n    }\n    \n}\n\n// class of Message\nclass BinaryMessage {\n    String strData;\n    String strFromUserId;\n    String strToUserId;\n    \n    private static final String UTF8 = \"utf-8\";\n    \n    public BinaryMessage(String strData, String strFromUserId, String strToUserId) throws NumberFormatException, IllegalAccessException, RemoteException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.io.IOException {\n        this.strData = strData;\n        this.strFromUserId = strFromUserId;\n        this.strToUserId = strToUserId;\n    }\n    \n    // Method for binary message size, size+7 byte total.\n    public final int getDataLength() throws RemoteException {\n        return strData.length() + 7;\n    }\n}\n\n// class of Group\nclass Group {\n    String data;\n    int size;\n    String displayname;\n    String desc;\n    Vector<String> user_list;\n\n    Group(String data, int size, String displayname, String desc, Vector<String> user_list) {\n        this.data = data;\n        this.size = size;\n        this.displayname = displayname;\n        this.desc = desc;\n        this.user_list = user_list;\n    }\n\n    // Method for group",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n    private static final Logger log = Logger.getLogger(ModernChatServer.class.getName());\n    \n    /**\n    * A static dummy instance of {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)}\n    */\n    public static IMonitoringChatServer sender = null;\n\n    /**\n    * The {@link UsersBD} that is used by the {@link ServerInterface} to get notified\n    * about new users. This is a real thread, use {@link #server} to obtain reference.\n    */\n    private UsersBD usersBD = null;\n    \n    /**\n    * The {@link ClientInterface} that is used by {@link ServerInterface} to send new users. This\n    * is a real thread, use {@link #server} to obtain reference.\n    */\n    ClientInterface client = null;\n    \n    /**\n    * The {@link Registry} is a simple RMI registry. It can be obtained by calling\n    * {@link UnicastRemoteObject#lookup(String)} method. This is a real thread, use {@link #registry}\n    * to obtain reference.\n    */\n    private Registry registry = null;\n        \n    @Test\n    public void testSendSecureBinaryMessage() throws Exception {\n        try {\n            //init\n            registry = (Registry) Naming.lookup(\"rmi://192.168.50.50/registry\");\n            usersBD = (UsersBD) Naming.lookup(\"rmi://192.168.50.50/UsersBD\");\n            client = (ClientInterface) Naming.lookup(\"rmi://192.168.50.50/Client\");\n            \n            //init user\n            StringEncoder64 encoder = new StringEncoder64();\n            String user = \"test\";\n            Hashtable<String, String> ht = new Hashtable<String, String>();\n            String password = \"password\";\n            ht.put(IConstant.USER_PASSWORD, password);\n            ht.put(IConstant.USER_NAME, user);\n            ht.put(IConstant.PASSWORD, password);\n            ht.put(IConstant.USER_EMAIL1, \"s@s.s\");\n            ht.put(IConstant.USER_EMAIL2, \"s@s.s\");\n            \n            //init server\n            SendKickOffByLoginMessageThread kickStopThread = (SendKickOffByLoginMessageThread)Naming.lookup(\"rmi://192.168.50.50/Server/KickOffByLoginMessageThread\");\n            Send",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n    \n\tprivate static final Logger LOG = Logger.getLogger(ModernChatServer_7Test.class.getName());\n\n    public static final String REGISTRATIONID = \"7testRegistrationsID\";  /** \n        The ID registered for the server.\n        The ID is given to the application by the client on registration.\n        @see RegisterApplicationServer.java\n    */\n    public final static String REGISTRATIONID_ONCE = \"7testRegisterOnce\";\n    /**  \n         The ID of the server in the database.\n         @see RegisterApplicationServer.java\n    */\n    public static final String SERVER_SERVERID = \"7testServersID\";\n    private static final int CMD_ONCE = -1;\n    private static final int CMD_ONCE_NEW = 0;\n    private static final int CMD_ONCE_SAVE = 1;\n   \n    {\n        //Initialize configuration (from configuration)\n        serverConfig = new ServerSettingBean();\n        serverConfig.password = new StringEncoder64(ClientInterface.PASSWORD);\n        serverConfig.passWord = new StringEncoder64(ClientInterface.PASSWORD);\n        serverConfig.protocolVersion = ClientInterface.PROTOCOLVER_2;\n        serverConfig.username = ClientInterface.USERNAME;\n        serverConfig.email = ClientInterface.EMAIL;\n\n        clientConfig = new ClientSettingBean();\n        clientConfig.password = new StringEncoder64(ClientInterface.PASSWORD);\n        clientConfig.passwordEncrypted = ClientInterface.PASSWORD;\n        clientConfig.protocolVersion = ClientInterface.PROTOCOLVER_2;\n        clientConfig.username = ClientInterface.USERNAME;\n        clientConfig.email = ClientInterface.EMAIL;\n    }\n\t\n    //Server configuration\n    private static final int SERVER_PORT = 10000;\n    private static final int MESSAGES_PER_SERVER = 1000;\n    private static final int SERVER_DATABASE_SIZE = 50000;\n    private static final String SERVER_IP = \"127.0.0.1\";\n    private static final String SERVER_REGIONNAME = \"127.0.0.1\";\n    \n//    //Client configuration\n    private static final int CLIENT_PORT = 1000;\n    private static final int CLIENT_REGIONNAME = \"TestServer\";\n    private static final int SERVER_REGION_SIZE = 2;\n    private static final int SERVER_DATABASE_SIZE = 500000;\n    private static final int CLIENT_DATABASE_SIZE = 5",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\tprivate  ServerInterface onlineServer;\n\t\tprivate  ClientInterface onlineClient;\n\t\tprivate  OnlineServerInterface onlineServerInterface;\n\t\tprivate  OnlineClientInterface onlineClientInterface;\n\t\tprivate  StringEncoder64 encoder;\n\t\tprivate  ServerSettingBean serverSetting;\n\t\tprivate  OnlineServerSettingBean onlineServerSetting;\n\t\tprivate  StringEncrypter decryptedEncoder;\n\t\tprivate  BinaryMessage message;\n\t\tprivate  Group oneGroup;\n\t\tprivate  int oneRoom;\n\t\tprivate  BinaryMessage message2;\n\t\tprivate  LoginBean loginBean;\n\n\t\t\t/**\n\t\t\t * Constructor of this class.\n\t\t\t */\n    public ModernChatServer_7Test() {\n        // Initialization of the class.\n        encryptedEncoder = new StringEncrypter(Locale.getDefault());\n\n\t\tencoder = new StringEncoder64(\"%\");\n\t\tdecryptedEncoder = encryptedEncoder.getDecrypted();\n\t\tmessage = new BinaryMessage(0, -1, encryptedEncoder.getBytes());\n        // Server settings initialization.\n\t\tserverSetting = new ServerSettingBean(8, \"Test\", 0, 0, new Hashtable<String, Object>());\n        // Online settings initialization.\n        onlineServer = new OnlineServerInterface(Locale.getDefault());\n        onlineServerInterface = new OnlineServerInterface(Locale.getDefault());\n        onlineServerInterface.setOnlineServerSetting(serverSetting);\n        \n\t\toneGroup = new Group(\"Group\", null);\n        oneRoom = 20;\n        \n        // Online client initialization.\n        onlineClient = new OnlineClientInterface(Locale.getDefault());\n        onlineClientInterface = new OnlineClientInterface(Locale.getDefault());\n        onlineClient.setOnlineClient(onlineClientInterface);\n        \n\t\t//Online Server initilization.\n\t\tonlineServer.setOnlineServer(onlineServerInterface);\n\t\t\n\t\t//Online client initilization.\n\t\tonlineClient.setOnlineClient(onlineClientInterface);\n\t\t\n\t\tonlineClientInterface.setOnlineServer(onlineServerInterface);\n\t\t\n\t\tonlineClientInterface.login();\n\n        /*\n        create a dummy network.\n        */\n        createServer();\n\n\t\t//set online status messages to be online.\n\t\tonlineServerInterface.onlineStatusReady(Locale.getDefault(), true);\n\t\t\n\t\t//create the \"online server\" i.e \"server\".\n\t\tassertTrue (onlineServerInterface.createsServer());\n\n\t\t//add online client in list of Clients.\n\t\tOnlineClientListClient listClient = new OnlineClientListClient();\n\t\tlistClient.addOnlineClient(onlineClientInterface);\n        //add \"online server\" in list of",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n\tstatic class TestServer implements ServerInterface {\n\t\tprivate static int i = 0;\n\t\tprivate String ip = \"\";\n\t\tprivate String name = \"\";\n\t\tprivate String password = \"\";\n\t\tprivate String nickName = \"\";\n\t\tprivate boolean offline = false;\n\t     public VirtualRoom createVirtualRoom(String name, String password, Vector<String> rooms) {\n\t         assertEquals(\"name == \" + name + \"  password == \" + password, name, password);\n\t         VirtRoom vr = new VirtRoom(name + \"@localhost\");\n\t         for (String r : rooms) { \n\t              vr.add(r);\n\t         }\n\t         return vr;\n\t     }\n\t     public TextMessage sendMessage(TextMessage msg) throws RemoteException { \n\t         BinaryMessage[] msgArr = new BinaryMessage[]{\n\t\t\t\t\t    msg }; \n\t         Integer[] ret = new Integer[]{};\n\t         return null;\n\t     }\n\t     \n\t     public boolean saveGame(Room r, Hashtable<String, Object> hd, StringBuilder log)\n\t             throws RemoteException {\n\t            log.setLength(0);\n\t         // check\n\t         if (r == null || hd == null) {\n\t             return false;\n\t         }\n\t         log.append(r.toString()).append(\"\\n\");\n\t         for (Object key : hd.keySet()) {\n\t             log.append(key.toString());\n\t             log.append(\"=\");\n\t             log.append(hd.get(key))\n\t             \t.append(\"\\n\");\n\t         }\n\t         return true;\n\t     }\n\t     \n\t     public ResultBean online(String name) throws \n\t             RemoteException {\n\t           BinaryMessage m = new BinaryMessage(\"hello world\", \"hello world\".getBytes());\n\t           return new ResultBean(true, IConstant.SUCCESS, m);\n\t     }\n\t     \n\t     public ResultBean offLine(String name) throws \n\t             RemoteException {\n\t           BinaryMessage m = new BinaryMessage(\"hello world\", \"hello world\".getBytes());\n\t           return new ResultBean(false, IConstant.EXCEPTION, null);\n\t     }\n\t     \n\t     public ResultBean close(String name) throws RemoteException {\n\t        /*if(ip.equals(\"localhost\"))\n\t          ip = \"127.0.0.1\";\n\t        assertEquals(\"name ==\" + name + \"  ip ==\" + ip, name,",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n\n// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {\n\t\t\n    /** Logging used by the class */\n    private static final Logger getLogger();\n    \n    /**\n     * Set Logging level from class\n     * @return Logging level\n     */\n    private static Level setLogLevel ( ) {\n        String s = getClass().getName();\n        int ix = s.lastIndexOf(\":\");\n        if (ix > 0) {\n            return Level.toLevel(s.substring(ix + 1));\n        } else {\n            return Level.INFO;\n        }\n    }\n\n    /**\n     * Test the main method of {@link ModernChatServer}\n     */\n    @Test\n    public void testServerStart() throws Exception {\n        //Get server settings\n        String s = \"My settings: Login=admin, Server=Online, Port=2181, Type=S3, FileName = \" + StringEncrypter.encodeString(IConstant.DEFAULT_LOCAL_URL, IConstant.DEFAULT_LOCAL_DIGITS) +\n                \", Host=localhost\";\n        String s1 = IConstant.PREFIX + IConstant.DUMMY + IConstant.DUMMY + s;\n        ServerSettingBean sb = new ServerSettingBean();\n        Vector<String> settingsBeans1 = new Vector<String>();\n        sb.put(settingBean1Name, sb);\n        settingsBeans1.add(s1);\n\n        \n        JOptionPane.setDefaultLocale(Locale.ENGLISH);\n        startServer((String)null);\n        assertSame(1, getLogger().getCallCount());\n\n        //Verify login status\n        String result = JOptionPane.showInputDialog(\"Test\");\n        if (result == IConstant.NOMERGETY) {\n            System.exit(0);\n        } else if (result.equals(IConstant.LOGIN)) {\n            setLogLevel(getLogLevel());\n\n            //Login by username (with password)\n            LoginBean loginbean = new LoginBean();\n            String response = loginbean.setUsernameAndPassword(StringEncrypter.encodeString(LoginBean.DEFAULT_PASSWORD, LoginBean.DEFAULT_PASSWORD_PADDING), LoginBean.DEFAULT_PASSWORD);\n            assertEquals(IConstant.SUCCESS + IConstant.SUCCESS_SEPARATOR + \"\", response);\n            assertSame(1, getLogger().getCallCount());\n        } else {\n            setLogLevel(Level.INFO);\n            ",
            "finish_reason": "length"
        }
    ],
    "id": "a76e1b28-72ef-43b4-9105-2d8155df1680",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_7Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {\n        ClientInterface cf = connectedClients.get(msg.getToUserId());\n        if (cf == null) {\n            return new ResultBean(false, IConstant.OFFLINE, null);\n        } else {\n            try {\n                //online message, send it..\n                if (msg.getAction() == IConstant.REQUEST) {\n                    getLogger().log(Level.FINE, \"Request send\");\n                    return cf.receiveSecureBinaryMessageRequest(msg);\n                } else {\n                    getLogger().log(Level.FINE, \"Online BinaryMessage size=\" + msg.getData().length + \" From=\" + msg.getFromUserId() + \" To=\" + msg.getToUserId());\n                    cf.receiveSecureBinaryMessageLoad(msg);\n                    return new ResultBean(true, IConstant.SUCCESS, null);\n                }\n            } catch (RemoteException ex) {\n                try {\n                    getLogger().log(Level.FINE, \"Exception happen, will logoff this user\");\n                    connectedClients.remove(msg.getToUserId());\n                    connectedClientsIPs.remove(msg.getToUserId());\n                    offlineStatus(msg.getToUserId());\n                } catch (RemoteException ex1) {\n                }\n                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());\n            }\n        }\n    }\n}\n",
    "test_prompt": "// ModernChatServer_7Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.\n*/\nclass ModernChatServer_7Test {",
    "time_taken": 26.87894105911255,
    "usage": {
        "prompt_tokens": 1447
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n    public static void main(String[] args) throws RemoteException {\n        System.setProperty(\"java.library.path\", System.getProperty(\"java.library.path\") + File.pathSeparator + \"java.library\");\n        FileHandler fileHandler = new FileHandler(\"modernchat.log\");\n        fileHandler.setFormatter(new SimpleFormatter());\n        System.setProperty(\"java.logger\", \"file\");\n        Logger.getLogger(\"\");\n        System.setProperty(\"java.logger\", \"file\");\n        String filename = \"modernchat.log\";\n        fileHandler.setFormatter(new SimpleFormatter());\n        Logger.getRootLogger().addHandler(fileHandler);\n    }\n    private volatile boolean sendSecureTextAnnouncementToUser(TextMessage msg, ClientInterface clientInterface) throws RemoteException, URISyntaxException { \n        ServerSettingBean server = new ServerSettingBean();\n        server.setBinaryMessageMessageEncryption(StringEncrypter.decode(new  String[]{\"test\"})); //TODO\n        server.setUnlimitedMessageLength(false) ;\n\n        Registry registry = LocateRegistry.getRegistry(Registry.REGISTRY_PORT);\n        registry.rebind(server, new UnicastRemoteObject(new ModernChatServer(msg, clientInterface)));\n\t\tSystem.out.println(\"TEST: sent : \" + MessageToServer.",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n    @Test\n    void testSendSecureTextAnnouncement() {\n        BinaryMessage msg = new BinaryMessage();\n        msg.setSenderId(9999);\n        msg.setFromUserId(12345);\n        msg.setToUserId(\"xy9874576598745\");\n        Vector<String> vectorList = new Vector<String>();\n        vectorList.add(\"pong\");\n        vectorList.add(\"senderId\");\n        vectorList.add(\"xy9874576598745\");\n        vectorList.add(\"senderId\");\n        msg.setUserIdList(vectorList);\n        SendSecureTextAnnouncementToUser result = null;\n        try {\n            result = ServerSettingsManager.sendSecureTextAnnouncement(msg); \n        } catch (Exception ex) {\n            org.junit.jupiter.api.Assertions.fail();\n        }\n        assertNotNull(result);\n        assertEquals(result.getSenderId(), msg.getSenderId());\n        assertEquals(result.getFromUserId(), msg.getFromUserId());\n        assertEquals(result.getToUserId(), msg.getToUserId());\n        assertEquals(result.getMessage(),StringEncoder64.decode(msg.getMessage()));\n    }\n    \n    @Test\n    void testSendSecureTextAnnouncementWithEmptyUserId() {\n        BinaryMessage msg",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n\tMyServerInterface myServer = new MyServer();\n\tMyServerInterface myServer_1 = new MyServer();\n\n\tpublic static void main(String[] args) {\n\t\tRuntime.getRuntime().addShutdownHook(new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t});\n\t\tJOptionPane.showInputDialog(null, \"Check the message sent by sendSecureTextAnnouncement() method.\",\n\t\t\t\t\"Check the message sent to client by sendSecureTextAnnouncement().\\nFor more description of message sending system.\",\n\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t}\n\t\t\n    /** Create a thread for sending secure text message message. */\n    private volatile boolean thread_sendSecureTextAnnounce(TextMessage msg) {\n        TextMessage msg_2 = null;\n        try {\n            //send message to client\n            msg_2 = myServer.sendSecureTextAnnouncement(msg);\n        } catch (RemoteException ex) {\n            Logger.getLogger(MyServerInterface.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return msg_2!= null;\n    }\n    \n\t/**\n\t * Test method for {@link osa.ora.server.threads.SendUserUpdatedStatusThread#getFullySigned()}.\n\t */\n\t@Test\n\tpublic void test_SendUser",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t@Test\n\t\tvoid sendSecureTextAnnouncementNoConnection() throws RemoteException, InterruptedException {\n\t\t\ttry {\n\t\t\t\tcheckUserToRoomNotConnected();\n\t\t\t\tassertFalse(false);\n\t\t\t} catch (Exception e) {\n\t\t\t\tassertFalse(false);\n\t\t\t\t// do nothing\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t \t @Test\n\t\t @TestLogging(\n\t\t  level='INFO', \n\t\t  message='An exception occured while creating an instance of this class',\n            exceptions={Exception})\n\t\t public void sendSecureTextAnnouncementToUserNoConnection() throws RemoteException, InterruptedException {\n\t\t\ttry {\n\t\t\t\tcheckUserToRoomNotConnected();\n\t\t\t\tassertFalse(false);\n\t\t\t} catch (Exception e) {\n\t\t\t\tassertFalse(false);\n\t\t\t}\n\t\t }\n\t*/\n\t\t@Test\n\t\tvoid sendSecureTextAnnouncement() throws RemoteException, InterruptedException {\n\t\t\tcheckUserToRoomNotConnected();\n\t\t\tJOptionPane.showMessageDialog(null, \"I'm here to login.\");\n\t\t\tSystem.in.read();\n\t\t\tJOptionPane.showMessageDialog(null, \"I'm here to register with OLAConnect.java.\");\n\t\t\tSystem.in.read();\n\t\t\tJOptionPane.showMessageDialog(null, \"I'm here to test the SecureTextAnnouncement Server interface.\");\n\t\t\tSystem.in.read();\n\t\t}\n\n\t\t@Test\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n    public Realm newRealm(String domain, int port) throws RemoteException {\n        return RegisterUser.register(domain, port, new UserId());\n    }\n    \n    public LocalInstance newlocalInstance(String domain, int port) throws RemoteException {\n        return new LocalInstance(LocalInstance.PRIMARY, domain, port, LocalInstance.ROOT, LocalInstance.MEMBERS);\n    }\n    \n    public ClientInterface newClient(Object obj) throws RemoteException {\n\t\tClientInterface client = null;\n\t\tif (obj!= null) {\n\t\t\tif (obj instanceof Runnable) {\n\t\t\t\tclient = UnicastRemoteObject.exportObject(((Runnable) obj).getClass().getName(), LocalClientInterface.class, 0);\n\t\t\t} else {\n\t\t\t\tclient = UnicastRemoteObject.exportObject(obj.getClass().getName(), LocalClientInterface.class);\n\t\t\t}\n\t\t}\n\t\treturn client;\n\t}\n    \n    @Test\n    public void test() throws RemoteException, URISyntaxException {\n\t\tMyLog.info(\"Test start\");\n        Realm realm = newRealm(ClientInterface.DOMAIN, ClientInterface.PORT);\n        ClientInterface c1 = null;\n        try {\n            c1 = newClient(new MyLoginBean());\n        } catch (RemoteException e) {\n            c1 = null;\n        }\n        \n        ClientInterface c2 = null;\n",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\tModernChatServer serverMyServer, serverAnotherServer = null;\n\n\n    public static void main(String[] args) {\n        try {\n            System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n            System.out.println(\"starting normal test..\");\n            ModernChatServer_8Test.serverMyServer = new ModernChatServer();\n            System.out.println(\"setting server for normal test..\");\n            ModernChatServer_8Test.serverMyServer.setServerInterface(ModernChatServer.class.getName());\n            System.out.println(\"starting a new test....\");\n\n\n        } catch(Exception exc)\n        {\n            Main.showException(\"test\", exc);\n        }\n    }\n\n    @Test\n    public void test_SendSecureTextAnnouncementToUser() throws RemoteException {\n\n      if(MyUtils.isPingServer()){\n        MyUtils.closeServer();\n      }\n      MyUtils.setServerInterface(ModernChatServer_8Test.class.getName());\n      String remoteMessage = new String(\"test\");\n      MyUtils.setServerSetting(remoteMessage);\n      MyUtils.startServer();\n      // wait for server message send\n      // waiting one minute and check if timeout on login\n      //MyUtils.waitLogin(5, true, \"\");\n      try {\n\n        String remoteMessage = MyUtils.getServerMessage();\n        System.out.",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t@Test\n        public void testSimpleSendSecureTextAnnouncement() throws Exception {\n\t\t\tString newSecretPassWord = \"New Secret Password!\";\n\t\t\tString encryptedMessage = StringEncrypter.encryptMESSAGE(newSecretPassWord, \"A password\");\n\t\t\tTextTextMessage message = new TextTextMessage();\n            message.setText(encryptedMessage);\n\t\t\ttry {\n\t\t\t\tsendSecureTextAnnouncement(message);\n\t\t\t\tfail();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// expected\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Verify no {@link User} or {@link Room} exists with the same id as their username.\n\t\t* @throws RemoteException\n\t\t*/\n\t\t@Test\n        public void testNoUserOrRoomWithSameId() throws Exception {\n\t\t\ttry {\n\t\t\t\tsendSecureTextAnnouncement(new TextMessage());\n                fail();\n            } catch (RemoteException | RemoteException e) {\n                Logger.getLogger(ServerSettingBean.class.getName()).log(Level.FINE, e.getLocalizedMessage(), e);\n                assertTrue(false);\n            }\n        }\n\n\t\t/**\n\t\t* Verify user with same name, but without their password.\n\t\t* @throws RemoteException\n\t\t*/\n\t\t@Test\n        public void testUserWithNoPassword() throws Exception {\n\t\t\tServerSettingBean serverSettingBean = UsersBD.getInstance().getServerSettingBean();\n\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\tprivate ClientInterface cf;\n\t\t\n\t\t\n        ModernChatServer_8Test(ClientInterface cf){\n            this.cf = cf;\n        }\n\t\n\t@Test\n    public void test_SendSecureTextAnnouncement() throws  Naming, RemoteException, URISyntaxException, RemoteException, IllegalArgumentException, SecurityException, IllegalAccessException, NoSuchMethodException, SecurityException {       \n        initClientThread(cf, cf.getServerSettingBean(), null, false, cf.getClientInterface(), cf.getUsername(), cf.getPassword(), cf.getHost());\n        String messageSent = sendSecureTextAnnouncement(new TextMessage(\"Hi. \"));\n        System.out.println(\"\"+messageSent);\n        JOptionPane.showMessageDialog(null, \"Message Sent Successfully!\", \"\", JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    @Test\n    public void test_SendSecureTextAnnouncementNoClient() throws  Naming, RemoteException, URISyntaxException, RemoteException, IllegalArgumentException, SecurityException, IllegalAccessException, NoSuchMethodException, SecurityException {\n        String messageSent = sendSecureTextAnnouncement(new TextMessage(\"Hi. \"));\n        System.out.println(\"\"+messageSent);\n\t\tJOptionPane.showMessageDialog(null, \"Message Sent Successfully!\", \"\", JOptionPane.INFORMATION_MESSAGE);\n    ",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n    @Test\n\tpublic void should_Send_Secure_Text_Announcement_to_the_User(){\n        try {\n            StringEncoder64.encode(null);\n            throw new RuntimeException(\"Send should have failed on null input\");\n        } catch (NullPointerException e) {\n            System.out.println(StringEncrypter.encode(\"\"));\n            System.out.println(StringEncrypter.encode(\"\"));\n            assertTrue(true);\n        }\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId()!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers!= null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i]!= msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n\n// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {\n\t\t\n\t// Loggers\n\tprivate static final Logger log = Logger.getLogger(StringEncroter.class.getName());\n\tprivate static final Logger log_ = Logger.getLogger(StringEncroter.class.getName());\n\t// Client Interface\n\tClientInterface clientInterface;\n\t\t\n\t// Private constructor because the class has to be instantiated in one junit test of one class\n\tprivate ModernChatServer_8Test() { }\n\t// Static method for instantiating the server.\n\tstatic ModernChatServer newServer() throws RemoteException {\n\t\treturn new ModernChatServer();\n\t}\n\t\n\t// Static method for creating a new instance of the server and calling its methods.\n\tstatic ModernChatServer newServer(int port)\n\tthrows RemoteException {\n\t\treturn new Server(port);\n\t}\n\t\n\t/**\n\t * Connect to the main instance of this class and return it.\n\t * @return\n\t */\n\tClientInterface testConnection() throws RemoteException {\n\t\tClientInterface cf = ClientInterface.createClientInterface(ClientInterface.CREATE_FROM_URI_DEFAULT);\n\t\treturn cf;\n\t}\n\t\n\t/**\n\t * Connect to the main instance of this class and return a new instance.\n\t * @param port\n\t * @return\n\t */\n\tprivate Server newServerWithPort (int port) throws RemoteException {\n\t\tClientInterface cf = testConnection();\n\t\tServer server",
            "finish_reason": "length"
        }
    ],
    "id": "9b853a52-8d94-4e08-a081-6dd50fad7d73",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_8Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {\n        if (msg.getTargetType() == IConstant.USER_CHAT) {\n            ClientInterface cf = connectedClients.get(msg.getToUserId());\n            return sendSecureTextAnnouncementToUser(msg, cf);\n        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {\n            Vector<User> tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getGroups().size(); i++) {\n                if (getGroups().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getGroups().get(i).getUsers();\n                    break;\n                }\n            }\n            if (tempUsers != null && tempUsers.size() > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.size(); i++) {\n                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers.get(i).getId());\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {\n            int[] tempUsers = null;\n            ClientInterface cf = null;\n            for (int i = 0; i < getRooms().size(); i++) {\n                if (getRooms().get(i).getId() == msg.getToUserId()) {\n                    tempUsers = getRooms().get(i).getUserId();\n                    break;\n                }\n            }\n            if (tempUsers != null && tempUsers.length > 0) {\n                //loop on users\n                boolean deliverToAll = true;\n                for (int i = 0; i < tempUsers.length; i++) {\n                    if (tempUsers[i] != msg.getFromUserId()) {\n                        cf = connectedClients.get(tempUsers[i]);\n                        if (deliverToAll) {\n                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);\n                        } else {\n                            sendSecureTextAnnouncementToUser(msg, cf);\n                        }\n                    }\n                }\n                return deliverToAll;\n            }\n        }\n        return false;\n    }\n}\n",
    "test_prompt": "// ModernChatServer_8Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.\n*/\nclass ModernChatServer_8Test {",
    "time_taken": 16.792662858963013,
    "usage": {
        "prompt_tokens": 1719
    }
},
{
    "choices": [
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\tint serverId = 9;\n\t\t/**\n\t\t * Test main.\n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tpublic void testSignInAsAdmin()\n\t\t\t\tthrows RemoteException, URISyntaxException, Naming\n\t\t\t\t{\n\t\t\t\t\tString emailAddr = getAdminUser().getEmail();\n\t\t\t\t\tString password = getAdminUser().decrypt(getAdminUser().getPassword());\n\t\t\t\t\tPasswordBean passwordBean = new PasswordBean();\n\t\t\t\t\tpassword = StringEncrypter.getInstance(password).encrypt(password);\n\t\t\t\t\tString emailVerified = \"\";\n\t\t\t\t\tif (getAdminUser().isVerified()) {\n\t\t\t\t\t\temailVerified = \"Yes\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\temailVerified = \"No\";\n\t\t\t\t\t}\n\t\t\t\t\tUser emailUser = UsersBD.getInstance(true).getUserByEmail(emailAddr);\n\t\t\t\t\tServerSettingsBean adminServer = new ServerSettingsBean();\n\t\t\t\t\tVector<ServerSettingBean> adminSettings = new Vector<>(3);\n\t\t\t\t\tadminSettings.add(adminServer);\n\t\t\t\t\tadminSettings.add(passwordBean);\n\t\t\t\t\tadminSettings.add(emailUser);\n\n\t\t\t\t\tadminServer.setServer(serverId);\n\t\t\t\t\tadminServer.setSettings(adminSettings);\n\t\t\t\t\tServerSettingsBean adminServer2 = new ServerSettingsBean();\n\t\t\t\t\tadminServer2.setServer(serverId);\n\t\t\t\t\tadminServer2.setSettings(passwordBean);\n\t\t\t\t\tadminServer2.setAdminServer(emailUser, emailAddr);\n\n\t\t\t\t\t/*\n\t\t\t\t\t *  Create the Binder\n\t\t\t\t\t */\n\t\t\t\t\tBinaryMessage binaryMessage3 = new BinaryMessage();\n\t\t\t\t\tbinaryMessage3.setMsgID(11);\n\t\t\t\t\tUser binaryUser3 = new User(\"admin\", 0, false);\n\t\t\t\t\tString[] settings = null;\n\t\t\t\t\tBinaryMessage[] binaryMessages3 = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBinaryMessage binaryMessage4 = new BinaryMessage();\n\t\t\t\t\t\tbinaryMessage4.setMsgID(12);\n\t\t\t\t\t\temailUser = UsersBD.getInstance(true).getUserByEmail(emailAddr);\n\t\t\t\t\t\temailUser.setPasswordEqual(password);\n\t\t\t\t\t\tbinaryMessage4.setServerSettings(adminSettings);\n\t\t\t\t\t\tbinaryMessages3 = new BinaryMessage[]{binaryMessage4};\n\t\t\t\t\t\tUser oldBinaryUser = (User)Naming.lookup(\"BINDING_ID:\" + binaryUser3.getId());\n\t\t\t\t\t\tb.signIn(adminServer, emailUser, passowrd);\n\t\t\t\t\t\tb.signIn(adminServer2, emailUser, passowrd);\n\t\t\t\t\t\tb.sendBroadcast",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n    public static ClientInterface getClientInterface(int port) throws RemoteException {\n        return new MyClientInterface(port);\n    }\n    public static ClientInterface getClientInterface(String pass, String secret) throws RemoteException {\n\t\t\t\t\n        try {\n            //Server configuration\n            Registry registry = LocateRegistry.getRegistry();\n            int port = Integer.parseInt(StringUtility.convertToInteger(registry.getProperty(\"PORT\", \"6666\")));\n            //Server setup\n            MyServerSetup serverSetup = new MyServerSetup(port);\n            String key= \"MYKEY\";\n            registry = LocateRegistry.getRegistry(key);\n            User adminUser = new User();\n            adminUser.setName(\"admin_user\");\n            adminUser.setPassword(secret);\n            adminUser.setEmail(StringUtility.convertToInteger(registry.getProperty(\"AdminUser.EMAIL\", \"admin_user\")));\n            registry.rebind(\"MyServerSetup\",serverSetup);\n            \n            ChatServer chatServer = new ChatServer(serverSetup,adminUser);\n            return new UnicastRemoteObject(chatServer.getRemoteInterface(\"ChatServer\", \"CHAT\", port));\n        } catch (URISyntaxException | RemoteException | RemoteException e) {\n            assert(false && \"Unable to find port by URI.\");\n\t\t}\n        return null;\n    }\n    public static ChatServer getServer(int port) throws RemoteException {\n        try {\n            //Server configuration\n            Registry registry = LocateRegistry.getRegistry();\n            int port = Integer.parseInt(StringUtility.convertToInteger(registry.getProperty(\"PORT\", \"6666\")));\n            return new ChatServer(port);\n        } catch (URISyntaxException | RemoteException e) {\n            assert(false && \"Unable to find port by URI.\");\n\t\t}\n        return null;\n    }\n    /**\n     * Test suite of this class.\n     * \n     * @return this test suite\n     */\n    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.addTest(suite.getTest(\"signInAsServer\"));\n        return suite;\n    }\n    \n    /**\n     * @author ooras\n     * Class  to test that the following methods are implemented:\n     * 1. runOnServer() ; runServer() should be executed, each time the method call should be made to the method of the target object",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\tprivate static Logger logger = Logger.getLogger(\"Test\");\n        //test methods for login\n        /*\n        * @author ooransa\n        * Class implementing 1 interface Runnable :  that returns ResultBean  of ServerInterface :\n         * ClientInterface\n         * ServerInterface :\n         * LoginBean\n         */\n        @Test\n        public void test1() throws RemoteException, URISyntaxException {\n            String username = \"test_user_1\";\n            String password = \"password\";\n            User adminUser = UsersBD.get(username);\n            System.out.println(username + \" : \" + password);\n            logger.info(\"Connection to server done.\");\n            logger.info(\"Test case passed\");\n        }\n     /*@Override\n        public final boolean isTest() {\n                return false;\n        }\n\n        @Override\n        public final boolean isVerbose() {\n                return false;\n        }*/    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n    @Test\n    void ifLogThenErrorLogClient() throws NamingException, URISyntaxException {\n        String emailAddr = \"\";\n\t\tString password = null;\n        \n        //get the environment\n        String hostName = System.getProperty(\"catalina.base\")\n                + \"/mcrb-0.0.1-bz-cluster1\";\n        String service = \"http://\" + hostName;\n        Hashtable<String, String> env = new Hashtable<>();\n        env.put(\"os.name\", System.getProperty(\"os.name\"));\n        env.put(\"os.arch\", System.getProperty(\"os.arch\"));\n        env.put(\"os.version\", System.getProperty(\"os.version\"));\n        env.put(\"java.util.encoding\", System.getProperty(\"file.encoding\"));\n        env.put(\"java.awt.headless\", System.getProperty(\"java.awt.headless\"));\n        env.put(\"line.separator\", System.getProperty(\"line.separator\"));\n        env.put(\"os.name\", System.getProperty(\"os.name\"));\n        env.put(\"os.arch\", System.getProperty(\"os.arch\"));\n        env.put(\"os.version\", System.getProperty(\"os.version\"));\n        \n        UnicastRemoteObject obj = new UnicastRemoteObject(env, 3000);\n        try {\n           \n\n            org.junit.Assert.assertTrue(obj.isSessionAlive());\n            Registry registry = java.rmi.registry.LocateRegistry.getRegistry(3001);\n            registry.lookup(mailboxName);\n\n            //Send message with anonymous param\n            Object obj2 = obj.invoke(\"SendUserUpdatedStatusThread\", new Class[]{String.class, User.class, ClientInterface.class}, null);\n            checkNull(obj, obj2);\n            obj.destroy();\n\n            \n            \n            //Send kick of message with anonymous param\n            Object obj3 = obj.invoke(\"SendKickOffByLoginMessageThread\", new Class[]{String.class, User.class, String.class, ClientInterface.class}, null);\n            checkNull(obj, obj3);\n            obj.destroy();\n\n            \n            \n            //Send room with anonymous param\n            Object obj4 = obj.invoke(\"SendJoinRoomMessageThread\", new Class[]{SessionMessageBean.class, String.class}, null);\n            checkNull(obj, obj",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n    /**\n     * Logger for this class.\n     */\n    private Logger logger = Logger.getLogger(this.getClass().getName());\n\n\t    /**\n\t     * Method for checking connection.\n\t     * @throws URISyntaxException if URL is invalid.\n\t     */\n\t    private void checkConnection() throws URISyntaxException {\n\t          try {\n\t            System.out.println(\"Testing connection....\");\n\t            Registry registry = LocateRegistry.getRegistry(8000);\n\t            Registration reg = (Registration) registry.lookup(\"registration\");\n\t            User auth = (User) Naming.lookup(\"rmi://localhost:\"+reg.getPort() + \"/admin\");\n\t            assertNotNull(auth);\n\t            Room rootRoom = UsersBD.getInstance().getRootRoom();\n\t            assertNotNull(rootRoom);\n\t            boolean isLoggedin = User.isLoggedIn(auth);\n\t            assertTrue(isLoggedin);\n\t            System.out.println(\"End of testing \");\n\t        }catch (RemoteException error) {\n\t        }\n\t    }\n\t    \n\t    /**\n\t     * Method to check login\n\t     * @throws URISyntaxException if URL is invalid.\n\t     */\n\t    @Test\n\t    public void testLoginAsAdmin() throws RemoteException {\n\t        logger.log(Level.INFO, \"Testing check login...\");\n\t    }\n\t    \n\t    /*\n\t     * Method to check email update\n\t     * @throws URISyntaxException if URL is invalid.\n\t     */\n\t    @Test\n\t    public void testEmailUpdatedStatus() throws RemoteException {\n\t        logger.log(Level.INFO, \"Testing send email updated status...\");\n\t    }\n       \n\t    /**\n\t     * Method to check user update\n\t     * @throws URISyntaxException if URL is invalid.\n\t     */\n\t    @Test\n\t    public void testUserUpdatedStatus() throws RemoteException {\n\t        logger.log(Level.INFO, \"Testing send text updated status\");\n\t    }\n       \n\t    /**\n\t     * Method to check user update\n\t     * @throws IOException if IP cannot be found due to resource limitation.\n\t     */\n\t    @Test\n\t    public void testUserUpdatedStatus() throws IOException {\n\t        logger.log(Level.INFO, \"Testing send text updated status\");",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\tprivate int serverPort = Integer.valueOf(System.getProperty(\"serverPort\", \"5555\"));\n\t\tprivate String chatServerName = \"ModemChatServer\";\n\t\tprivate String chatServerVersion = \"9.1.8\";\n\t\tprivate Binder clientBinder;\n\t\tprivate ClientInterface chatServerClient;\n\t\tprivate String username;\n\t\tprivate String password;\n\t\tprivate String adminUser;\n\t\tprivate String chatRoom;\n\t\tprivate ServerSetup testServer;\n\t\tprivate String encryptedChatRoom;\n\t\tprivate String encryptedUsername;\n\t\tprivate int chatServerPort;\n\n    /* Test methods ******************************************************/\n    @Test\n    void chatServerAuth() throws RemoteException {\n        clientBinder = new Binder();\n        serverSocket = new ServerSocket(serverPort, 5, InetAddress.getByName(\"127.0.0.1\"));\n        try {\n\n            //Authenticate the user and get his ID\n            String usernameEncr = StringEncrypter.toUTF8Unicode(\"admin@123123\", false);\n            UsernameBean usernameBean = new UsernameBean();\n            UsernameBeanDecryptor decryptedUsernameBean = UsernameBeanDecryptor.decrypt(usernameEncr);\n            List<UsersBD.UserInfo> loginUserList = Binder.login(chatSessionID, usernameBean);\n            List<User> loginUser = loginUserList.get(0);\n            //Encode the user info password and get his ID\n            String encryptedUsername = ServerSetup.EncryptorServer.encryptUsernamePassword(new String[] {\"admin@admin\", \"user_p@werp.net\"}, loginUser.get(0).getPassword());\n            String encryptedChatRoom = StringEncrypter.toUTF8Unicode(chatRoom, true);\n\n            //Authenticate the user and get his ID\n            String encryptedChatRoom = StringEncrypter.toUTF8Unicode(chatRoom, true);\n\n            //Get the ID of the first contact\n            String phone = decryptedUsernameBean.getPhoneNumber();\n            String encryptedPhone = ServerSetup.EncryptorServer.encryptPhoneNumber(phone);\n            User user = Binder.getInstance().getUser(encryptedPhone);\n\n            //Get the ID of the first chat room\n            String chatRoomID = decryptedUsernameBean.createChatRoomID(encryptedChatRoom);\n            String encryptedChatRoomID = ServerSetup.EncryptorServer.encryptChatRoomID(chatRoomID);\n            chatRoom = decryptedUsernameBe",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n        private ClientInterface clientInterface=null;\n        \n        @Test\n        void initializeServerIfConnectionIsRejected() throws Exception {\n            assertNotNull(getLogger());\n            assertNotNull(clientInterface);\n            assertNotNull(getLogger().getName());\n            System.out.println(\"Initialization done! The client is \" + clientInterface.isConnected());\n            assertNotNull(clientInterface.getServerInterface());\n            ServerSettingBean settingBean = new ServerSettingBean();\n            settingBean.setSettingName(\"MyTest\");\n            settingBean.setSettingValue(\"myTest\");\n            settingBean.setPassword(StringEncrypter.AesDecrypt(\"Password\"));\n            settingBean.setPassword(StringEncrypter.AesDecrypt(\"Password_encrypted\"));\n            settingBean.setEmail(\"my-test@localhost.local\")\n            settingBean.setServerName(\"ModernChatServer_Test_9.jvn:server-9\");\n            settingBean.setPortNumber(9000);\n            settingBean.setTimeout(200);\n            settingBean.setMinuteInterval(1);\n            settingBean.setRegisterAtExit(false);\n            settingBean.setCrawlerURL(null);\n\n\n\t\t\tString fileName=\"Logs\".toLowerCase() + \".txt\";\n\n\t\t\tHashtable<String,String> properties = new Hashtable<>();\n\t\t\tproperties.put(ServerSettingsBean.ENCRYPTION_PASSWORD_KEY_OF_ENCRYPTION_MODE, \"PASSWORD\");\n           \tproperties.put(ServerSettingsBean.CREDENTIAL_PROTOCOL_KEY, \"BASE128\");\n            Hashtable<String,String> env = new Hashtable<>();\n            env.put(\"JAVA6_CALLER_AUTH_LOGIN\", \"anonymous\"); // this is the login process\n            env.put(\n                    \"JAVA6_CALLER_AUTH_USERNAME\",\n                    StringEncrypter.AesEncode(settingBean.getPassword()));\n            System.setProperty(\"logging.properties\", StringEncrypter.AesEncode((settingBean).getSettings().getSettingName()).getEnCodedValue());\n            try {\n            UnicastRemoteObject.exportObject(\n                new UnicastRemoteObject(settingBean),\n                env,\n                FileHandler.class,\n                null);\n            } catch (Exception e) {",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t/**\n\t* Test for {@link ModernChatServer#signInAsAdmin(String, String)}.\n\t* It tests that the method will not fail when password has been set.\n\t*/\n\t@Test\n\tvoid sigOfSignInAsAdmin_passwordIsMixed() {\n\t\t\t// 1.Test for sign-in with a non-pass code\n\t\t\t// This test is used only when the user with the given code has been previously signed and\n\t\t\t// the passwords are the same. In this case, the test fails.\n\t\t\ttry {\n\t\t\t\tString encodedPass = StringEncrypter.getInstance(PasswordConstants.PASSWORD).encrypt(\"password\").replace(\"\\\\\", \"\");\n\t\t\t\tassertTrue(\"The password does not match the encoded password.\", encodedPass.equals(User.getUnEncodedPassword(passwords.get(1000))));\n\t\t\t\t// 3.Test for Sign In with encrypted code\n\t\t\t\tassertTrue(\"\", User.signInAsAdmin(signInAsAdmin, encodedPass));\n\t\t\t\tassertTrue(\"\", User.getUnEncodedPassword(signinAsAdmin).equals(User.getUnEncodedPassword(passwords.get(1000))));\n\t\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\t\tthrow new AssertionError(e);\n\t\t\t}\n\t\t\t// 4.Test that invalid parameters are caught\n\t\t\tStringEncoder64.validatePasswordEncoded = false;\n\t\t\ttry {\n\t\t\t\tString encodedPass = StringEncrypter.getInstance(PasswordConstants.PASSWORD).encrypt(\"password\").replace(\"\\\\\", \"\");\n\t\t\t\tassertTrue(\"The password is no longer expected to match the encrypted one. Invalid Password.\",\n\t\t\t\t\t\tencodedPass.equals(User.getUnEncodedPassword(encodedPass)));\n\t\t\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\t\tthrow new AssertionError(e);\n\t\t\t}\n\t\t\t// 5.Test for sign-in with invalid code\n\t\t\ttry {\n\t\t\t\tUser user = User.getUnEncodedPassword(User.ENCODED_PASSWORD);\n\t\t\t\tString signInAsAdmin = User.signInAsAdmin(passwordGen, user.getEmail(), \"12345678\", emailGen, passwordGen, passwordGen, User.ENCODED_PASSWORD);\n\t\t\t\tassertTrue(\"The password code does not match the encoded password code.\", signInAsAdmin.equals(user.toString()));\n\t\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\t\tthrow new AssertionError(e);\n\t\t\t}\n\t\t\t// 6.Test the case when the user is still connected\n\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n    private ClientInterface c;\n    private Vector<ServerSettingBean> serverSettings;\n    \n    /**\n     * Main method.\n     * Start the server.\n     */\n    @Test\n    public void testServerInitialization(){\n\t\t\n        Registry registry = null;\n        //DB initialization....\n        try {\n            String myHostKey = \"127.0.0.1\";\n            int myPort = 18101;\n            int myListenPort = 18152;\n            String myBundlePath = \"/osa/ora/server/resources/\";\n            String myBundleName = \"MTS\";\n            Enumeration<String> myOptions = registry.getNames();\n            \n            registry = Naming.registry(\":\"+myBundlePath);\n\n            String rootObjectName = \"ROOT\";\n            registry.bind(rootObjectName, new java.rmi.server.UnicastRemoteObject(this,RootInterface.RemoteClass));\n            registry.rebind(rootObjectName, new java.rmi.server.UnicastRemoteObject(new User(),UserInterface.RemoteClass));\n\n            registry.bind(RootInterface.RemoteClass, new RootObject());\n \n            registry.bind(ServerSettingBean.RemoteClass, settingBeanRemoteProxy());\n \n            String rootJndi = registry.lookup(rootObjectName);\n            registry.rebind(ServerSettingBean.RemoteClass, new ServerSettingBeanRemoteProxy());\n \n            //registry.bind(BinaryMessage.RemoteClass, binaryProxyRemote);\n\n            c = (ClientInterface)\n                    Naming.lookup( \"//OAS/CLIENT@\" + myHostKey +\":\" + myPort + \"/\" + myLoginUserName + \":\" + myLoginPassword);\n            System.out.println(\"My JNDI - MyJNDI: \" + rootJndi);\n            System.out.println(\"My login user name - myLoginUserName: \" + rootUserName);\n            System.out.println(\"My login password - myLoginPassword: \" + myLoginPassword);\n            System.err.println(\"My credentials and server settings - myCredentials: \" + c.getCredentialsAndSettings());\n            StringBuffer buffer = new StringBuffer(\"MyPassword = \")+myLoginPassword+\"\\n\");\n\t\t\t  c.getPasswordAndSetting(buffer);\n\t\t\tSystem.err.println(\"My password - \" + myPassword);\n            System.err.println(\"My login user name - \" + myLoginUserName",
            "finish_reason": "length"
        },
        {
            "text": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface, both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr!= null && password!= null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password!= null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user!= null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n\n// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {\n\t\t\n\t@Test\n\tpublic void testSendKickOffMsgWithAdmin() {\n        System.out.println(\"Start the sendRefresh\");\n\t\n    //sendRefreshMessageThread = new SendRefreshMessageThread();\n    sendRefreshMessageThread = new SendRefreshContactThread();\n    sendRefreshMessageThread.start(); \n        \n    server = new ServerSettingBean();\n    server.setId(\"serverID\");\n\tBinaryMessage message = new BinaryMessage();\n\tmessage.setType(\"typeID\");\n\tServerSettingBean result = new ServerSettingBean();\n\tresult.setType(\"typeID\");\n\tresult.setResult(1);\n\tresult.setServerType(\"typeID\");\n\tClientInterface client = new ClientInterface();\n\t\tServerSettingBean resServer = new ServerSettingBean();\n\t\tresServer.setType(\"typeID\");\n\t\tresServer.setResult(0);\n\t\tresServer.setServerType(\"typeID\");\n\t    \n\n\t\n    new SendRefreshContactThread(\"/jr-api\").start();\n    new SendRefreshMessageThread (message, result).start();\n    \n    assertTrue(!sendRefreshMessageThread.isStarted());\n    assertTrue(sendRefreshContactThread.isStarted());\n\t\n\tThread.sleep(100);\n\tsendRefreshContactThread.start();\n\tsendRefreshMessageThread.start();\n\tThread.sleep(100);\n\t\n\tnew SendRefreshContactThread(message, result).start();\n        \n    // new SendKickOffByLoginMessageThread(message).start();\n\n    //Thread.sleep(1000);    \n        \n        String encodedPass = StringEncrypter.getInstance().encrypt(pass);\n        String encodedPass2 = StringEncoder64.encrypt(pass);\n        \n        new SendKickOffByLoginMessageThread(encodedPassword, encodedPass).start();\n              \n        JOptionPane.showMessageDialog(null, \"The server has been successfully signed out.\");\n\t\n\t\n\t\n\tassertTrue(!sendRefreshMessageThread.isStarted());\n        \n\tint count = 0;\n\tint count2 = 0;\n\t\n\ttry {\n\n\t\twhile(isSendRefreshMessageThreadRunning()) {\n\t\t\tcount++;\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tassertTrue(count == 1);\n\t\tassertTrue(!sendRefreshMessageThread.isStarted());\n\n} catch (Exception e) {\n        assertTrue(false);\n\t}\n\t\n        ",
            "finish_reason": "length"
        }
    ],
    "id": "1f3fd685-97ed-4d7e-b953-42d5bbaa4698",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/ModernChatServer_9Test.java",
    "original_code": "// ModernChatServer.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\n\n/**\n * @author ooransa\n * Class implements 2 interfaces:\n * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.\n * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used\n * As the RMI view of the server for the connected client.\n */\npublic class ModernChatServer implements ServerInterface, Runnable {\n\n    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {\n        //authenticate User\n        //DB authentication....\n        if (emailAddr != null && password != null) {\n            String email = StringEncoder64.decodeStringUTF8(emailAddr);\n            User user = null;\n            String orignalPass = passwordEnc.decrypt(passwords.get(1000));\n            password = StringEncrypter.getInstance(orignalPass).decrypt(password);\n            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password != null && password.equals(orignalPass)) {\n                user = getAdminUser();\n            }\n            if (user != null) {\n                getLogger().log(Level.FINE, \"User \" + email + \" has logged in.\");\n                authToken = \"FIM\" + Calendar.getInstance().getTimeInMillis();\n                LoginBean loginBean = new LoginBean();\n                loginBean.setUser(adminUser);\n                loginBean.setAuthToken(authToken);\n                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);\n                loginBean.setSecureToken(tokenUsed);\n                return loginBean;\n            } else {\n                getLogger().log(Level.FINE, \"User \" + email + \" is not valid!\");\n                return null;\n            }\n        } else {\n            getLogger().log(Level.WARNING, \"Credentials is null!\");\n            return null;\n        }\n    }\n}\n",
    "test_prompt": "// ModernChatServer_9Test.java\npackage osa.ora.server;\n\nimport java.net.URISyntaxException;\nimport java.rmi.Naming;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport javax.swing.JOptionPane;\nimport osa.ora.server.bd.UsersBD;\nimport osa.ora.server.beans.BinaryMessage;\nimport osa.ora.server.beans.Group;\nimport osa.ora.server.beans.IConstant;\nimport osa.ora.server.beans.LoginBean;\nimport osa.ora.server.beans.ResultBean;\nimport osa.ora.server.beans.Room;\nimport osa.ora.server.beans.ServerSettingBean;\nimport osa.ora.server.beans.TextMessage;\nimport osa.ora.server.beans.User;\nimport osa.ora.server.client.ClientInterface;\nimport osa.ora.server.threads.SendKickOffByLoginMessageThread;\nimport osa.ora.server.threads.SendKickOffMessageThread;\nimport osa.ora.server.threads.SendRefreshContactThread;\nimport osa.ora.server.threads.SendUserUpdatedStatusThread;\nimport osa.ora.server.utils.StringEncoder64;\nimport osa.ora.server.utils.StringEncrypter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModernChatServer}.\n* It contains one unit test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.\n*/\nclass ModernChatServer_9Test {",
    "time_taken": 26.06058096885681,
    "usage": {
        "prompt_tokens": 1469
    }
},
{
    "choices": [
        {
            "text": "\n\t@Test\n    public void testEncrypterClass() throws IOException {\n        String iv = \"00\";\n        FileEncrypter enc = new FileEncrypter(iv);\n\n        byte[] data = new byte[10];\n        data[0] = 0;\n        for (int i = 1; i < 10; i++) {\n            byte byte2 = 0;\n            if (i % 2 == 0)\n                byte2 = i;\n            data[i] = byte2;// 0 for little-endian\n        }\n\n        try {\n            enc.encrypter(data, 0, data.length);\n            fail(\"Should throw IllegalArgumentException\");\n            \n        } catch (IllegalArgumentException | IOException e) {\n            // this is expected\n        }\n\n        File file = File.createTempFile(\"FIM\".getBytes(), \"tmp\");\n\n        try (FileOutputStream fileOut = new FileOutputStream(file)) {\n            enc.encrypter(data, 0, data.length);\n        }\n        try (FileInputStream fileIn1 = new FileInputStream(file)) {\n            byte[] dataIn = new byte[10];\n            fileIn1.read(dataIn);\n            assertTrue(Arrays.equals(data, dataIn));\n        }\n    }\n\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "public static final String key = \"key\";\n\t\tpublic static final String iv = \"iv\";\n\t\tprivate static FileEncrypter instance;\n\t\tprivate static final String fileName = \"FIM\";\n\t\tprivate static final String filePath = \"/tmp/encrpt\";\n\n        @Test\n        public void test() throws Exception {\n\n                if (!new File(filePath).exists()) {\n                        System.out.println(filePath);\n                        new File(filePath).mkdirs();\n            }\n\n                try (FileInputStream inStream = new FileInputStream(filePath);\n                    FileOutputStream outStream = new FileOutputStream(filePath)) {\n\n                        instance = new FileEncrypter(fileName, filePath);\n                        SecretKeySpec _key = new SecretKeySpec(key.getBytes(), \"AES\");\n                        IvParameterSpec _iv = new IvParameterSpec(iv.getBytes());\n\n                        Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n                        c.init(Cipher.ENCRYPT_MODE, _key, _iv);\n\n                        byte[] plain = new byte[1024];\n                        int count = inStream.read(plain);\n                        while(count > 0){\n                                c.update(plain, 0, count);\n                                outStream.write(plain,0, count);\n                                count = inStream.read(plain);\n                        }\n                        c.doFinal();\n                        assertArrayEquals(plain, instance.doFinalEncrypt(new byte[][] {encrypted}));\n                }\n\t\t}\n\n\tstatic FileEncrypter doFinalEncrypt(byte[] plain) throws Exception {\n\t\tFileOutputStream fos = new FileOutputStream(filePath);\n\t\tinstance.init(true);\n\t\tinstance.update(plain);\n\t\tinstance.doFinal();\n\t\tinstance.init(false);\n\n\n\t\tfos.write(instance.doFinalEncrypt(new byte[][] {encrypted}));\n\t\tfos.close();\n\n\t\treturn instance;\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate final byte[] TEST_DATA_DATA = {0, 0};\n\tprivate final byte[] TEST_DATA_KEY = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\n\tprivate final SecretKeySpec TEST_KEY_SPEC = new SecretKeySpec(TEST_KEY.array(), \"AES\");\n\n\t@Test\n\tvoid getInstance() {\n\t\tFileEncrypter instance = getInstance();\n\t\tassertNotNull(instance);\n\t}\n\t\n\t@Test\n\tvoid encryptUpdateAndSignReadFile() throws Exception{\n\t\tFile file = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file, new byte[TEST_DATA_KEY.length]);\n\t\tFileOutputStream output = new FileOutputStream(file);\n\t\tCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, TEST_DATA_DATA);\n\t\tbyte[] cipherData = new byte[TEST_DATA_DATA.length];\n\t\toutput.write(TEST_DATA_KEY);\n\t\tcipher.doFinal(cipherData, 0, cipherData.length);\n\t\tassertTrue(Arrays.equals(TEST_DATA_KEY, cipherData));\n\t\toutput.close();\n\t}\n\n\t@Test\n\tvoid encryptUpdateAndSignWriteFile() throws Exception {\n\t\tFile file2 = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file2, new byte[TEST_DATA_DATA.length]);\n\t\tassertTrue(writeFile(file, new byte[TEST_DATA_DATA.length]));\n\t}\n\n\tprivate static void writeFile(File file, byte[] testData) throws IOException {\n\t\tif (!file.exists() || file.length() == 0L) {\n\t\t\tfile.createNewFile();\n\t\t}\n        try (FileInputStream fileInput = new FileInputStream(file);\n        FileOutputStream fileOutput = new FileOutputStream(file)) {\n            fileInput = new FileInputStream(file);\n            fileOutput = new FileOutputStream(file);\n            byte[] buf = new byte[5000];\n            fileInput.read(buf);\n            fileInput.close();\n            fileOutput.write(testData);\n        }\n\t}\n\n\t@Test\n\tvoid decryptUpdateAndSignReadFile() throws Exception {\n\t\tFile file = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file, new byte[TEST_DATA_DATA.length]);\n\t\tFileOutputStream output = new FileOutputStream(file);\n\t\tCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\t\tcipher.init(Cipher.DECRYPT_MODE, TEST_DATA_KEY);\n\t\tbyte[] plainTextData = new byte[TEST_DATA_DATA.length];\n\t\tint readBytes = cipher.doFinal(TEST_DATA_DATA, 0, TEST_DATA_DATA.length);\n\t\tassertEquals(readBytes, TEST_DATA_DATA.length);\n\t\tcipher.doFinal(TEST_DATA_DATA, 0, TEST_DATA_DATA.length);\n\t\tcipher.doFinal(plainTextData);\n\t\tassertTrue(Arrays.equals(TEST_DATA_DATA, plainTextData));\n\t\toutput.close();\n\t}\n\n\t@Test\n\tvoid decryptUpdateAndSignWriteFile() throws Exception {\n\t\tFile file2 = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file2, new byte[TEST_DATA_DATA.length]);\n\t\tassertTrue(writeFile(file, new byte[TEST_DATA_DATA.length]));\n\t}\n\t\n\t@Test\n\tvoid decryptUpdateAndSignReadFileOnException() throws Exception {\n\t\tFile file = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file, new byte[TEST_DATA_DATA.length]);\n\t\tIllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> writeFile(file,  new byte[TEST_DATA_DATA.length]));\n\t\tassertEquals(\"Error decrypting the file due to a throwable caught during the encryption process\", iae.getMessage());\n\t}\n\t\n\n\t@Test\n\tvoid decryptUpdateAndSignReadFileOnExceptionWithIv() throws Exception {\n\t\tFile file = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file, new byte[TEST_DATA_DATA.length]);\n\t\tIvParameterSpec testKey = new IvParameterSpec(TEST_KEY.array());\n\t\tIllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> writeFile(file,  new byte[TEST_DATA_DATA.length]));\n\t\tassertEquals(iae.getMessage(), \"Can't use the specified key parameters to decrypt the file given the test key\");\n\t}\n\t\n\t@Test\n\tvoid encryptUpdateAndSignWriteFileOnException() throws Exception {\n\t\tFile file2 = new File(\"src/test/java/osa/ora/server/utils/FileEncrypterTest.java\");\n\t\twriteFile(file2, new byte[TEST_DATA_DATA.length]);\n\t\tIllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> writeFile(file,  new byte[TEST_DATA_DATA.length]));\n\t\tassertEquals(iae.getMessage(), \"Can't use the specified key parameters to encrypt the file given the test key\");\n\t}\n\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test constructor of {@link FileEncrypter}.\n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testConstructor() throws Exception {\n\t\t\tFileEncrypter instance = FileEncrypter.getInstance();\n\t\t\tassertNotNull(instance);\n\t\t}\t\t\n\t}\n\n// MessageSaverTest.java\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "public static FileEncrypter instance;\n\n\t\t@javax.annotation.Resource\n\t\tprivate Cipher cipher;\n\t\t\n\t\t@Test\n        public void Test() throws Exception {\n        // Test\n        File file1 = new File(\"/home/lucas/Documents/EcoLib/FIM\");\n\n        File output = new File(file1.getAbsolutePath() + \"/FIM\");\n        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(\n                      new byte[] { 'x', 'y', 'z', 'A', '\\n', '\\r', '\\\\', '\\b',\n                                  (byte) 26 }, \"AES\"));\n\t\t\tFileOutputStream out = new FileOutputStream(output);\n\n            out.write(file1.length());\n            out.close();\n        \t\n\n            File InputFile = new File(\"/home/lucas/Documents/EcoLib/FIM\");\n\t\t\tFileInputStream in = new FileInputStream(InputFile);\n\n            FileOutputStream out2 = new FileOutputStream(output);\n\t\t\tCipher cipher2 = cipher.clone();\n\t\t\tbyte[] iv2 = new byte[32];\n\t\t\tchar[] key2 = \"123456\".toCharArray();\n\n\t\t\tcipher2.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(\n                                                   new byte[] { 'X', 'y', 'z',\n                                                        'A', '\\n', '\\r', '\\\\', '\\b',\n                                                        (byte) 26 },\n                                                   \"AES\"));\n\t\t\tIvParameterSpec iv = new IvParameterSpec(iv2);\n\t\t\tcipher2.init(Cipher.ENCRYPT_MODE, iv);\n\t\t\tcipher.updateAES(key2, 0, cipher2.getOutputLength());\n\n\t\t\tout = new FileOutputStream(out2);\n\t\t\tcipher2.doFinal(in, out);\n\t\t\tout2.close();\n\t\t\t\n\t\t\tout = new FileOutputStream(output);\n\t\t\tin = new FileInputStream(InputFile);\n\t\t\tcipher2.doFinal(in, out);\n            out2.close();\n\n        \tin.close();\n        }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\n    public static final String ENCRYPTION_ALGORITHM = \"AES_CBC_MD5\";\n    public static final String ENCRYPTION_KEY = \"encryption/key\";\n    @Test\n    public void test1() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(ENCRYPTION_KEY.getBytes(), 64);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test2() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 64);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test3() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 256);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test4() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 0);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test5() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 0);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.setIV(new IvParameterSpec(new byte[16]));\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test6() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 0);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.setIV(new IvParameterSpec(new byte[] {0, 0, 0, 0}));\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    @Test\n    public void test7() throws IOException {\n        FileEncrypter.fileEncrypter.setKey(\"encryption/key\".toCharArray(), 0);\n        FileEncrypter.fileEncrypter.setAlgorithm(ENCRYPTION_ALGORITHM);\n        FileEncrypter.fileEncrypter.setIV(new IvParameterSpec(new byte[] {0, 0, 0, 0}));\n        FileEncrypter.fileEncrypter.encrypt(new File(\"test.txt\"));\n        assertEquals(\"Test data is not encrypted.\", \"This data shall be encrypted.\", new String(FileEncrypter.fileEncrypter.getCipherText()));\n    }\n    \n    \n    /**\n     * Load cipher text.\n     */\n    public static byte[] getCipherText() throws IOException {\n        FileOutputStream fos = null;\n        fos = new FileOutputStream(\"encrypt.txt\");\n        return fos.getChannel().transferTo(0, fos.getChannel().size(), true);\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void encryptFileTest(){\n       //File encrypter = FileEncrypter.getInstance();\n       //encrypter.encrypt(\n       //\n\t\ttry (\n            FileInputStream fis = new FileInputStream(\"src/resources/textEncryptedFileFile1.txt\");\n            Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\")) {\n            \n               byte[] key = { (byte) 0x13,  (byte) 0x43,  (byte) 0x11, \n                       (byte) 0x24,  (byte) 0x10,  (byte) 0x8,  \n                       (byte) 0x1,  (byte) 0x0,  (byte) 0x2,  \n                       (byte) 0x7f,  (byte) 0x78,  (byte) 0x76,  \n                       (byte) 0x41 };\n               byte[] iv = {  (byte) 0x01,  (byte) 0x02,  (byte) 0x03 };\n\n\n        \n               SecretKeySpec ks = new SecretKeySpec(key, \"AES\");\n               Cipher.Encryptor enc = cipher.init(cipher.ENCRYPT_MODE, ks);\n           \n               byte[] text = \"Hi, I am an encrypted file!\";\n               byte[] encrypted =  enc.doFinal(text.getBytes());\n               \n               String expected = \"Hello, encrypted with AES and Iv.\";\n               String actual = FileEncrypter.encryptString.execute(\"FIM\".getBytes(), IV, key, TextType.AES, IV_LEN, encrypted);\n               log.debug( \"Encoded : \" + new String(text));\n               assertEquals(expected, actual);\n\t\t\t\t\n               // test aa:1-3 decrypt\n               byte[] bytes = new byte[file.length - 3];\n               System.arraycopy(encrypted, IV_LEN, bytes, 0, IV_LEN);\n               FileDecryptor.encryptBytes(file.length - IV_LEN, bytes, 0, bytes.length);\n               \n               bytes = new byte[file.length - 3];\n               System.arraycopy(bytes, IV_LEN, bytes, 0, IV_LEN);\n               expected = FileDecryptor.decryptBytes(file.length - IV_LEN, bytes, IV_LEN, bytes.length);\n               actual = FileEncrypter.encryptString.execute(\"FIM\".getBytes(), IV, key, TextType.AES, IV_LEN, bytes);\n               log.debug( \"Decrypted : \" + new String(text));\n               assertEquals(expected, actual);\n            }\n       }\n       catch (Exception e){\n       String eStr = \"Encryption failed.\";\n       try {\n    \t  Cipher.getInstance(\"AES/CBC/PKCS5Padding\").init(cipher.ENCRYPT_MODE, keyEnc);\n           fail(\"Caught a \"+eStr+ \" when called with a \"+ cipher.getClass().toString().toString());\n        } catch (IllegalStateException ex){\n        }\n       }\n    }\n    \n}\n\n// -----------------------------------------------------------------------------\n",
            "finish_reason": "stop"
        },
        {
            "text": "/** Test-specific initialization. */\n\t\t@Test\n\t\tvoid initTester () {\n\t\t\tassertEquals(\"Initiation error.\", 1, 1);\n\t\t}\n\t}\n\n\n// -----------------------------------------------------------------------------\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void testGetInstance(){\n        assertNotNull(FileEncrypter.getInstance());\n    }\n    \n    @Test\n    public void testEncrypt1(){\n        byte[] encKey = \"123456\".getBytes();\n        String encryptedData = FileEncrypter.getInstance().encrypt(encKey.length, \"123456\", new File(\"Myfile\"));\n        assertEquals(encryptedData, new String(encKey));\n    }\n    \n    @Test\n    public void testEncrypt2(){\n        byte[] encyKey = \"123456\".getBytes();\n        String encryptedData = FileEncrypter.getInstance().encrypt(encKey.length, encyKey, new File(\"Myfile\"));\n        assertEquals(encryptedData, new String(new byte[10]));\n    }\n    \n    @Test\n    public void testDecrypt1(){\n        byte[] decKey = \"123456\".getBytes();\n        String filename = \"Myfile\";\n        String encryptedData = FileEncrypter.getInstance().decrypt(decKey.length, encryptedData);\n        assertEquals(filename, new String(new byte[filename.length * 2]));        \n    }\n    \n    @Test\n    public void testDecrypt2(){\n        byte[] decKey = \"123456\".getBytes();\n        String encryptedData = FileEncrypter.getInstance().decrypt(decKey.length, new String(decKey));\n        assertEquals(new String(new byte[4]), encryptedData);\n    }\n    \n    @Test\n    public void testDecrypt3(){\n        byte[] decKey = \"123456\".getBytes();\n        String encryptedData = FileEncrypter.getInstance().decrypt(decKey.length, \"123456\");\n        assertEquals(encryptedData, new String(new byte[5]));\n    }\n\n}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    // --- Private fields -----------------------------------------------------------\n    private static FileEncrypter fileEncrypter = new FileEncrypter(\"FIM\".getBytes());;\n    // --- Static fields -----------------------------------------------------------\n    // ---------------------------------------------------------------------------\n    private static FileInputStream fileStream1 = null;\n    private static FileOutputStream fileObjectOut2 = null;\n    // ---------------------------------------------------------------------------\n    \n    \n    // -- Static methods -------------------------------------------------------------\n    // ---------------------------------------------------------------------------\n    /**\n    * This method was created by the class {@link FileEncrypterTest}.\n    */\n    private void TestIsValidPath(String path) {\n        try {\n            File f = new File(path);\n            assertTrue(f.exists());\n        } \n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        finally {\n            fileStream1.close();\n            fileObjectOut2.close();\n        }\n    }\n    // ---------------------------------------------------------------------------\n    \n    \n    // --- Members -------------------------------------------------------------\n    // ---------------------------------------------------------------------------\n    /** Current path. */\n    private static String currentPath;\n    \n    // --- Set Current path -----------------------------\n    // ---------------------------------------------------------------------------\n    /**\n    * Set current path.\n    */\n    private static void setCurrentPath() {\n        currentPath = System.getProperty(\"user.home\");\n    }\n    // ---------------------------------------------------------------------------\n    \n    \n    // --- Get current path ------------------------------------------------\n    // ---------------------------------------------------------------------------\n    /**\n    * Get the current path. (Useful when testing the {@link FileEncrypter} class.)\n    */\n    private static String getCurrentPath() {\n        return currentPath;\n    }\n\n    // ---------------------------------------------------------------------------\n    \n    private FileEncrypter() {\n        // Only Static members required because the\n        // {@link Thread#run} method must be executed as public.\n    }\n\n    // ---------------------------------------------------------------------------\n    \n    // Class attributes\n    private static final Class<FileEncrypter> clazz = FileEncrypter.class;\n    // ---------------------------------------------------------------------------\n\n    // Test cases --------------------------------------------------------------\n    /**\n    * Test to check the {@link FileEncrypter#initialize(String)} method.\n    */\n    @Test\n    public void testInitialize() throws Exception {\n        setCurrentPath();\n        fileStream1 = new FileInputStream(getCurrentPath()+File.separator+\"tmpFolder\"+File.separator+\"fim.txt\");\n\n        FileEncrypter.initialize(\"tmpFolder\"+File.separator+\"fim.txt\");\n        FileOutputStream fileObjectIn = new FileOutputStream(getCurrentPath()+File.separator+\"tmpFolder\"+File.separator+\"fim.txt\");\n\n        byte[] bytes = new byte[] {1, 2, 3};\n        SecretKeySpec keySpec;\n        Cipher cipher;\n\n        fileObjectIn.write(bytes);\n        try {\n            fileObjectIn.close();\n        } \n        catch (IOException ex) {\n            ex.printStackTrace();\n        } \n        catch (Exception ex) {\n            assertIn(ex.getMessage())\n           .isEqualTo(\"Initialization failed\");\n            return;\n        }\n\n        try {\n            Thread.sleep(5);\n        }\n        catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n\n        cipher = Cipher.getInstance(\"DESede\");\n        fileObjectIn = new FileOutputStream(getCurrentPath()+File.separator+\"tmpFolder\"+File.separator+\"fim.txt\");\n        keySpec = new SecretKeySpec(new byte[cipher.getMaxKeySize()], cipher.getAlgorithm());\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(\"012345678901234567890201\"));\n\n        byte[] byteCipher3 = cipher.doFinal(bytes);\n\n        for (int i = 0; i < cipher.getBlockSize(); ++i)\n            System.out.printf(\"%2X\", Bytes.toInt(byteCipher3, i));\n\n        fileObjectIn.close();\n        fileStream1.close();\n\n        assertFalse(fileObjectIn.equals(fileStream1));\n\n        fileStream1 = null;\n        fileObjectOut2 = null;\n        try {\n            Thread.sleep(1);\n        }\n        catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n\n        assertNotNull(fileObjectIn);\n        assertNotNull(fileObjectOut2);\n\n        assertFalse(fileObjectIn.equals(fileObjectOut2));\n    }\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "1b32765f-4cd5-4679-8d2b-6827ffd52ebc",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/utils/FileEncrypter.java",
    "original_code": "// FileEncrypter.java\npackage osa.ora.server.utils;\n\n// -----------------------------------------------------------------------------\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport javax.crypto.Cipher;\nimport java.io.IOException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class FileEncrypter {\n\n    public static FileEncrypter getInstance() {\n        if (fileEncrypter == null)\n            fileEncrypter = new FileEncrypter(\"FIM\".getBytes());\n        return fileEncrypter;\n    }\n}\n",
    "test_prompt": "// FileEncrypterTest.java\npackage osa.ora.server.utils;\n\n// -----------------------------------------------------------------------------\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport javax.crypto.Cipher;\nimport java.io.IOException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileEncrypter}.\n* It contains one unit test case for the {@link FileEncrypter#getInstance()} method.\n*/\nclass FileEncrypterTest {",
    "time_taken": 48.05464768409729,
    "usage": {
        "prompt_tokens": 355
    }
},
{
    "choices": [
        {
            "text": "// StringEncrypter_0Test.java\n    @Test\n    void testIn()\n\t\tthrows Exception {\n\t\tSecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBEWithSHA1AndAES\"); \n\t\tSecretKey sKey = (SecretKey)kf.generateSecret(\"password\");\n\t\t// KeySpec\n        PBEParameterSpec pbeSpec = new PBEParameterSpec(128, 128);\n\t\tPBEKeySpec pbeKeySpec=new PBEKeySpec(\":\", sKey.getEncoded());\n            \t\t\t// AlgorithmParameters\n       AlgorithmParameterSpec saltSpec = null;\n        PBEKeySpec saltKeySpec = new PBEKeySpec(\":\".getBytes(CharTableEncoder.UTF8),\"password\".getBytes(ClientHelloEncoder.UTF8));    \n        // KeyFactory\n       \n        \n\t    KeyFactory kfTemp = KeyFactory.getInstance(\"PBEWithSHA1AndAES\"); \n\t\tKeySpec ks = kfTemp.generateKeySpec(sKey.getEncoded());\n\t\t\n\t\tKeySpec hkSpec = null;\n\t\ttry {\n\t        \n\t\t\thkSpec = kfTemp.generateSecret(\"password\".getBytes(ClientHelloEncoder.UTF8));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\t\t\t\t\n\t\t// Cipher \t\t\t\t\n\tCipher c = Cipher.getInstance(\"PASSA3WithSHA1ANDAES\"); \n\n        if (saltSpec!= null)\n        \tc.init(Cipher.ENCRYPT_MODE, saltKeySpec, saltSpec);\n        else\n        \tc.init(Cipher.ENCRYPT_MODE, pbeKeySpec, pbeSpec);\n\n\t\tString encrypted = encrypt(ClientHelloEncoder.getEncoded(\":\"));\n        \n        byte[] encryptedArray = \n\t\t\tencipher(ClientHelloEncoder.getEncoded(\":\"), encrypt(ClientHelloEncoder.getEncoded(\":\")), \n\t\t\t\t\t\t\t\t\t\t\tpbeKeySpec, (ProtocolVersion.TLS10_0_ORDINAL), \n\t\t\t\t\t\t\t\t\t\t\tsaltKeySpec, saltSpec);\n        assertEquals(encrypted, ClientHelloEncoder.getEncoded(\":\"));\n        assertEquals(ClientHelloEncoder.getEncoded(\":\"), encryptedArray);\n\n    \tc.init(Cipher.ENCRYPT_MODE, pbeKeySpec, pbeSpec);\n\t\tc.doFinal(encryptedArray);\n\t    \n\t\tencrypted = ClientHelloEncoder.getEncoded(\":\") + encodeCipher_128(\":\");\n\t    assertEquals(encrypted, ClientHelloEncoder.getEncoded(\":\"));\n\t    assertEquals(ClientHelloEncoder.getEncoded(\":\"), encrypt(encrypted));\n\n\t    encrypted = encrypt(\":\");\n\t   \n\t    assertEquals(encrypted, ClientHelloEncoder.getEncoded(\":\"));\n\t    \n\t    encoded = ClientHelloEncoder.getEncoded(encrypted);\n\t  \n\t    \tassertEquals(ClientHelloEncoder.getEncoded(encrypted), encoded);\n\t    \n\t    encrypted = ClientHelloEncoder.getEncoded(\":\");\n\t \n\t    assertEquals(ClientHelloEncoder.getEncoded(\":\"), encrypted);\n\t\t\t\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tstatic {\n\t\t// Set provider of Bouncy Castle for secret keys\n\t\tSecretKeyFactory.getInstance(\"DSA\");\n\t}\n\t\n\t/**\n\t * Test the {@link StringEncrypter#encrypt(String)},\n\t *  {@link #encrypt(String)}, and\n\t *  {@link #decrypt(String)} methods.\n\t*/\n\t@Test\n\tpublic void testEncryptReciever() {\n\t\t// Run encrypt methods\n\t\tString pass = \"Hello, World!\";\n\t\tString encrypted = encrypt(pass);\n\t\t// Run decrypt methods\n\t\tString decrypted = decrypt(encrypted);\n\t\t// Check password is equal to encrypted password\n\t\tassertEquals(pass, decrypted);\n\t\t// Check the encrypted string is equal to the original string\n\t\tassertEquals(pass, encrypted);\n\t\t// Clear the secret key of the original key\n\t\tpass = \"\";\n\t\tassertTrue(encrypted, isEmpty(pass));\n\t\tassertTrue(encrypted, null!= encrypted);\n\t}\n\t\n\t/**\n\t * Test the {@link StringEncrypter#encrypt(String)},\n\t *  {@link #decrypt(String)}, and\n\t *  {@link #encrypt(String)} methods using the given password.\n\t*/\n\t@Test\n\tpublic void testEncryptRecieverUsingPassword() {\n\t\t// Run encrypt methods\n\t\tString pass = \"Hello, World!\";\n\t\tString encrypted = encrypt(pass);\n\t\t// Run decrypt methods\n\t\tString decrypted = decrypt(encrypted);\n\t\t// Check password is equal to encrypted password\n\t\tassertEquals(pass, decrypted);\n\t\t// Check the encrypted string is equal to the original string\n\t\tassertEquals(pass, encrypted);\n\t\t// Clear the secret key of the original key\n\t\tpass = \"\";\n\t\tassertTrue(encrypted, isEmpty(pass));\n\t\tassertTrue(encrypted, null!= encrypted);\n\t}\n\t\n\t/** \n\t * Test the null parameter of {@link #encrypt(String)}, \n\t *  {@link #encrypt(String)} and \n\t *  {@link #decrypt(String)} methods.\n\t * @since 1.0\n\t*/\n\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testEncryptRecieverNullParameter() {\n\t\t// Run encrypt methods\n\t\tString encrypted = null;\n\t\tencrypted = encrypted;\n\t\tencrypted = encrypt(encrypted);\n\t}\n\t\n\t/** \n\t * Test the null parameter of {@link #decrypt(String)}, \n\t *  {@link #encrypt(String)}, and\n\t *  {@link #decrypt(String)} methods.\n\t * @since 1.0\n\t*/\n\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testDecryptRecieverNullParameter() {\n\t\t// Run decrypt methods\n\t\tString decrypted = null;\n\t\tdecrypted = decrypted;\n\t\tdecrypted = decrypt(decrypted);\n\t}\n\n\n\t// For all PBE algorithm parameters\n\tprivate static final String[] PBEAlgorithmParameters = {algorithmParameter(\"PBKDF2WithHmacSHA1\", 1024), algorithmParameter(\"PBEWITHSHAAND3-KeyTRIPLEDES-CBC\", 1024)};\n\n\t/**\n\t * Test the algorithm property of {@link PBEWITHSHAAND3-KeyTRIPLEDES-CBC}, \n\t *  {@link PBEncryptoCipher#setPBEAlgorithmParameter(PBEString)), \n\t *  and {@link PBEncryptoCipher#setPBEKeyLength(int)} methods.\n\t *  \n\t * @since 1.0\n\t*/\n\t@Test\n\tpublic void testEncryptRecieverWithHmacSha256() {\n\t\t// Run decrypt methods\n\t\tString encrypted = decrypt(generateSalt());\n\t\tif (encrypted == null)\n\t\t\treturn;\n\t\tKeySpec spec = new PBEKeySpec(generateSalt(), generateSalt(), 1024);\n\t\tKeyFactory fac = KeyFactory.getInstance(AlgorithmFamily.PBEWITHSHAAND3);\n\t\tSecretKey key = fac.generateKey(spec);\n\t\tcipher = fac.newEncryptingCipher(\"FONT\", spec);\n\t\tcipher.doFinal(encrypted.getBytes());\n\t\tcipher.doFinal(key.getEncoded());\n\t\tassertEquals(\"Password is the same!\", pass, new String(key.getEncoded()));\n\t\tassertTrue(\"The random salt is not right!\", salt.length() == 24);\n\t}\n\t\n\t/** \n\t * Test the algorithm property of {@link PBEWITHSHAAND3-KeyTRIPLEDES-CBC}, \n\t *  {@link PBEncryptoCipher#setPBEAlgorithmParameter(PBEString)), \n\t *  and {@link PBEncryptoCipher#setPBEKeyLength(int)} methods. \n\t *  \n\t * @since 1.0\n\t*/\n\t@Test\n\tpublic void testEncryptRecieverWithHmacSha512() {\n\t\t// Run decrypt methods\n\t\tString encrypted = decrypt(generateSalt());\n\t\tif (encrypted == null)\n\t\t\treturn;\n\t\tKeySpec spec = new PBEKeySpec(generateSalt(), generateSalt(), 512);\n\t\tKeyFactory fac = KeyFactory.getInstance(AlgorithmFamily.PBEWITHSHAAND3);\n\t\tSecretKey key = fac.generateKey(spec);\n\t\tcipher = fac.newEncryptingCipher(\"FONT\", spec);\n\t\tcipher.doFinal(encrypted.getBytes());\n\t\tcipher.doFinal(key.getEncoded());\n\t\tassertEquals(\"Password is the same!\", pass, new String(key.getEncoded()));\n\t\tassertTrue(\"The random salt is not right!\", salt.length() == 64);\n\t}\n\t\n\t/** \n\t *  Run the methods and test if the passed parameters are the same. \n\t *  \n\t * @since 1.0\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprivate static <T> T testEncrypter(String[] alges, int[] keyLengths) {\n\t\tfor (int i = 0; i < alges.length; i++) {\n\t\t\tString encrypted = encrypt(generateSalt(), alges[i], keyLengths[i]);\n\t\t\tif (encrypted == null)\n\t\t\t\tcontinue;\n\t\t\tSecretKeySpec spec = new SecretKeySpec(encrypted.getBytes(), alges[i]);\n\t\t\tKeyFactory fac = KeyFactory.getInstance(AlgorithmFamily.PBEWITHSHA1);\n\t\t\tSecretKey key = fac.generateSecret(spec);\n\t\t\tcipher = fac.newEncryptingCipher(alges[i], key.getEncoded());\n\t\t\tcipher.doFinal(encrypted.getBytes());\n\t\t\tString decrypted = decrypt(key.getEncoded());\n            assertEquals",
            "finish_reason": "length"
        },
        {
            "text": "StringEncrypter testClf;\n\t@Test\n\tvoid encrypt() throws Exception {\n\t\t// Prepare testClf\n\t\tbyte[] initEncPadding = new byte[16];\n\t\tbyte[] initEncResult = new byte[16];\n\t\tfor (int i=0; i<initEncPadding.length;i++) {\n\t\t\tinitEncPadding[i] = (byte)0;\n\t\t}\n\t\tbyte[] salt = null;\n\t\t\n\t\t// Encrypt test\n\t\ttestClf.encrypt(\"abc\");\n\t\t// Check that testClf.encrypt() returned result from the encryption method\n\t\tassertArrayEquals(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f }, initEncResult);\n\n\t\t// Set test's algorithm\n\t\tbyte[] key = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 6, 2, 3,  4, 5, 6, 7, 8, 9 };\n\t\tString encrypted = new StringEncoder(new StringEncoderPwkey(new PBEParameterSpec(salt, 4096)));\n\t\t// Encrypt\n\t\ttestClf.encrypt(encrypted);\n\t\t// Check that testClf.encrypt() returned result from the encryption method\n\t\tassertArrayEquals(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f }, initEncResult);\n\n\t\t// Set test's algorithm\n\t\tkey = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 6, 2, 3,  4, 5, 6, 7, 8, 9 };\n\t\tencryptKey(key, new PBES2(new PBEParameterSpec(salt, 4096)));\n\t\t// Check that testClf.encrypt() returns the key with which it was originally generated\n\t\tassertArrayEquals(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f }, key);\n\t\t\n\t\t// Set test's algorithm\n\t\tencryptKey(key, new PBES2(new PBEParameterSpec(salt, 4096)));\n\t\t// Check that testClf.encrypt() returns the key with which it was originally generated\n\t\tassertArrayEquals(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f }, key);\n\t}\n\n\tprivate void encryptKey(byte[] key, Cipher encrypt) throws Exception {\n\t\t// Prepare secret\n\t\tSecretKey secret = getSecret(key);\n\t\t\n\t\t// Create IV\n\t\tbyte[] iv = new byte[16];\n\t\tfor (int i=0; i<iv.length;i++) {\n\t\t\tiv[i] = (byte)0;\n\t\t}\n\t\t\n\t\t// Encrypt\n\t\tbyte[] tmpBytes = encrypt.doFinal(key);\n\t\tbyte[] tmpIV = new byte[16];\n\t\tfor (int i=0; i<iv.length;i++) {\n\t\t\ttmpIV[i] = (byte)iv[i];\n\t\t}\n\t\t\n\t\t// Save IVs\n\t\tSystem.arraycopy(tmpIV, 0, iv, 0, iv.length);\n\t\tSystem.arraycopy(tmpBytes, 0, tmpIV, 0, iv.length);\n\t\t\n\t\t// Encrypt\n\t\tbyte[] result = encrypt.doFinal(tmpBytes);\n\t\t\n\t\t// Add IV to final result\n\t\tSystem.arraycopy(tmpIV, 0, result, 0, iv.length);\n\n\t\tassertArrayEquals(result, key);\n\t\tSystem.arraycopy(tmpIV, 0, result, 0, iv.length);\n\t}\n\n\tprivate void encryptKey(boolean isPBE_AES128, int keySizeBits) throws Exception {\n\t\t// Create IV\n\t\tbyte[] iv = new byte[16];\n\t\tfor (int i=0; i<iv.length;i++) {\n\t\t\tiv[i] = (byte)0;\n\t\t}\n\t\t\n\t\t// AES128 or PBE cipher\n\t\tKeySpec isAES128Spec = new PBEKeySpec(Random.pseudoRandomBytes(256), 16, 128, 128);\n\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBE\");\n\t\tSecretKey key = keyFactory.generateSecret(isAES128Spec);\n\t\t\n\t\t// Create initial encPadding to make the key in the right size\n\t\tbyte[] ivWithInitialPadding = new byte[16];\n\t\tbyte[] cipheredInit = new byte[12];\n\t\tfor (int i= 0 ; i< 8-keySizeBits ; i++) {\n\t\t\tivWithInitialPadding[i] = (byte)0xff;}\n\t\tSystem.arraycopy(ivWithInitialPadding, 0, ivWithInitialPadding, 8-keySizeBits, 12);\n\t\t\n\t\t// Cipher-based encrypting\n\t\tCipher encryptPBE = isPBE",
            "finish_reason": "length"
        },
        {
            "text": "public final StringEncrypter instance = new StringEncrypter();\n\n\t\tString encrypt(String str) {\n            byte[] utf8 = str.getBytes(\"UTF8\");\n            try {\n                Cipher c = Cipher.getInstance(\"PBEWITHMD5ANDDES\");\n                SecretKey sKey = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(new PBEParameterSpec(\n                        new byte[32], new byte[16]));\n                c.init(cipher.getParameters().getParameterSpec(PBEKeySpec.class), sKey);\n                byte[] cipherEnc = c.doFinal(utf8);\n                return StringEncoder64.encode(cipherEnc);\n            } catch (Exception e) {\n                return null;\n            }\n        }\n\n        @Test\n          public void testNullStrings() {\n            assertThrows(\"encrypt(null)\", NullPointerException.class);\n        }\n\n        @Test\n          public void testNullKey() {\n            assertThrows(\"encrypt(null)\", NullPointerException.class);\n        }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Test case of {@link StringEncrypter#encrypt(String)}.\n\t\t*/\n\t@Test\n\tpublic void testEncrypt() {\n\t\tString str = \"My string\";\n        assertEquals(\"MtM01c6F6pNt6aXtUqoVfhMZrXZUc5gYhOvCbGjfWgfZWU2Lx3W1qm0KQY4T4I3PmJj9nRfq3fRw2LQSZ0MmY1hXZ2pqBQW2U2Mj6e3EiZaZ1oYiZTf9pK4Jl4GZ7E5qN3xL1K7H+3l0f5aG7QmL9BHkL4pP+xL0bG8x1a6TfQ+H3dYgQG9GXz5qnO2b2K6cYv/Zp1Gq3KX3X3L8QMn/k7X3Y3K6cYvQ2a6TfQcYgQQmZ5qnO2b2K6dYvQd1l6q3Y3K1R7QmLw9KlL4TpXb2H7sD2L8K1wcYmZbT2L7f7bO5Tf7bZbh7Zb1T1f7bZS1i6Qf3Qj1H1T19m5QiL2b0bXd2l6i6q1Fb6HbXd2l6d5h6d2HbXd2l6i6q1Fb6H2b0bXd2l6i6q1Fb6HbXd2l6d5h6d2HbXd2l6i6q1Jf7bT1R1pHbZ1i6Hb1RpHbZ1i6q1H1bP1L1R1pHbZd2L1R1pHbZ1i6q1H1bP1L1R5R1pHbZ1i6h9Zb1pF1L1R5R1pHbZ1i6hG2Q5uN7o8Zp1G8q1S2Q2QpRw2L0pZ0QxRdE9Z2q1F0aM9QxPJ2QpGv+R7C1RpZ0QxRdE9Z2q1F0aJ9QxRpV+Q2c3Gv+QwcQ2PW5Q2QztQq+UvZp5aGv+Q1VzdQ1PbzS+QdZ1mJ0RpZ1mVb1S+QdRpZ1mJ0bZbzU1V9c2VlcGdZ1nqHb7U9bV9j1cH1qj1Zb7U8bS1lBb7hF1qS5b3kUf0L3Q0Pb7H6B5o6oOcqKcZdQ6Lb7B9bF1qbU6bD5eZd2Hb7uO2N2B2LxzQvZhLpQ0Pb7HbHbW8U4L3PV6fW8fZvZhUd7aWpvZhUd6aFvZd9LqT7FvZhU9fvZhU5zVfZhVfZd9LqW8fZvZhU3JvZhVzZf4LjJ6B3qGcPu8PbUq8dF2U8PuJ4Pb7fS8fW8Q4PuJ2z0fV1P7VzZrQ8fRv1VzV1NxT1VzGvY3VxT1VzQ8fQ1FvZ1S2tZvZ0FvZ2VzZnVzZmQ0Pf3Qo4F3Qj4F4Qj3Q2sW8Q3qrN1F4Q3pVbB4fV4B4U3Q5zSjb4H1qW4EbZD9Z2xkU5EbNtH8Q4B2EbZ3E3B0B1EbZ3Vb5B4Vb5B0bzD3EbZ3Vb5bHZbD9Z2ztHd8fS1fW6fTd8fQ1fWvfS1F2tHvbH3xZbzS1F3sV1bH3xZb6sV1bH3xZbZb6sV1bH1bZb6b2F3fZb4b2F3fZb6b2F3fZbZb6sV1zbH1Zb6sV1bH1bZb6b2F3fZb6sV1bH1bZb6b2F3fZb6sV1xbH3xZb6sV1xbH1xZb6sV1xbH1bZb6fW3xZb6sV1bH3xZb6xF5bH3xZdZb6fVb6H7F1Vfb6H7fV2Z2x8wvZhPb7pVbP6B4bH1bT1Vfb6H7fV2Z2x8VbP6H1bXdHbZbH3xzT1Fb6aCbT1Fb6Hb6zV2x8WvBtH1bZb6sBbH2x9V2x8V5fVb6H2x7dH2x7eH0bH1bV5hb6bH3oZ6hZb6T0vR5vbZ1rS5vbKbG0vhV1bT0vbZ1rTb7vhV5bH1bV5tbV5fVbT0vbZ1rKbGzvb6bzG0vbZ1rKbV4vbZb7vb",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Test {@link StringEncrypter#encrypt(String)}.\n\t\t*/\n\t\t@Test\n\t\tvoid testEncrytteWithString() {\n            String str = \"1234\";\n            String expectedStr = \"1c4b3d\";\n            StringEncrypter strEncrypter = new StringEncrypter();\n            String result = strEncrypter.encrypt(str);\n            assertEquals(expectedStr, result);\n\t\t}\n\n\t\t/**\n\t\t* Test algorithm of {@link StringEncrypter}\n\t\t*/\n\t\t@Test\n\t\tvoid testEncryptor() {\n\t\t\tCipher encC1 = Cipher.getInstance(\"PBEWithSHA1AndAES_CBC_NoPadding\", \"SunJCE\");\n\t\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n\n\t\t\t//Encrypt 1\n\t\t\tbyte[] utf8 = enCrypter.doEncrypt(1);\n            byte[] enc = new byte[utf8.length];\n            System.arraycopy(utf8, 0, enc, 0, utf8.length);\n            //Encrpt as String with AlgorithmParameterSpec\n            AlgorithmParameterSpec pspecEnc = new PBEParameterSpec(PBEKeySpec.defaultSaltLength(), 8);\n            byte[] utf16 = encC1.doEncrypt(enc, pspecEnc);\n            AlgorithmParameterSpec paramSpecEnc = new PBESecretKeySpec(keyFactory.generateSecret(\"salt\", \"pw\".toCharArray()), pspecEnc);\n\t\t\tbyte[][] result = new byte[2][2];\n\t\t\tresult[0] = new byte[utf16.length >> 2];\n\t\t\tSystem.arraycopy(utf16, 0, result[0], 0, 2);\n\t\t\tresult[1] = new byte[utf16.length >> 2];\n\t\t\tSystem.arraycopy(utf16, result[1].length-2, result[1], 0, 2);\n\t\t\tresult = new StringEncoder().encode(result);\n\t\t\tassertTrue(result.length > 0);\n            //Decrypt as String.\n            byte[][] result2 = new byte[2][2]; \n            result2[1] = new byte[utf16.length >> 2];\n            System.arraycopy(((StringEncoder)result2[0]).encode(utf16, 0), 0, result2[1], 0, 2);\n            AlgorithmParameterSpec paramSpecDec = new PBEDecrypterSpec(enc, keyFactory.generateSecret(\"salt\", \"pw\".toCharArray()), new PBKDF2PasswordCallback(\"salt\".toCharArray()), paramSpecEnc, paramSpecEnc.getAlgorithm());\n\t\t\tPBEKeySpec pspecKey = new PBEKeySpec(keyFactory.generateSecret(\"salt\".toCharArray(), \"pw\".toCharArray()).replaceAll(\"\\\"\", \"\"), 8, 256);\n\t\t\tSecretKey key = keyFactory.generateSecret(pspecKey.getAlgorithm().getName(), pspecKey.getSalt().getBytes());\n            String decrypt = (new StringEncoder()).decode(result2[1]);\n            assertEquals(decrypt, expectedStr);\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void testEncrypt() {\n    \tCipher cipher = Cipher.getInstance(\"PALL\");\n\t\tString plain = \"password\";\n\t\tcipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(plain.getBytes(\"UTF8\"), \"aes\"));\n\t\tassertEquals(\"encrypt should be able to pass a string encoded with base64 to encrypt.\", plain, StringEncoder64.decode24(cipher.doFinal(plain.getBytes())));\n    }\n\n    @Test\n    public void testDecrypt() {\n    \tCipher cipher = Cipher.getInstance(\"PALL\");\n\t\tString plain = \"password\";\n\t\tcipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(plain.getBytes(\"UTF8\"), \"aes\"));\n\t\tassertEquals(\"decrypt should return encrypted string as decoded by decrypt.\", plain, StringEncoder64.decode24(cipher.doFinal(plain.getBytes())));\n    }\n    \n}\n\n// Cipher_0Test.java\n// package OsaTestCipher;\n//\n// class C1 {\n//\n//         private C1() {\n//         }\n// }\n// class C2 {\n//\n//         private C2() {\n//         }\n// }\n// class C3 {\n//\n//         private C3() {\n//         }\n// }\n",
            "finish_reason": "stop"
        },
        {
            "text": "@Test\n\t\tpublic void check_with_0_input_str(){\n\t\t\t\t\tassertEquals(\"Encrypter_0Test.encrypt__0_input_str\", encrypt({}));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void check_with_1_input_str(){\n\t\t\t\t\tassertEquals(\"Encrypter_0Test.encrypt__1_input_str\", encrypt(\"hello world\", 1));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void check_with_0_input_key(){\n\t\t\t\t\tassertEquals(\"Encrypter_0Test.encrypt__0_input_key\", encrypt(\"Hello World\", 0));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void check_with_1_input_key(){\n\t\t\t\t\tassertEquals(\"Encrypter_0Test.encrypt__1_input_key\", encrypt(\"Hello World\", 1));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void check_with_0_key_spec(){\n\t\t\t\t\tassertEquals(\"Encrypter_0Test.encrypt__0_key_spec\", encrypt(\"Hello World\", KeySpec.class));\n\t\t}\n\t\t\t\t\t\t\n}\n\nclass StringEncoder64 {\n\tString Encoder(byte[] str) {\n\t\ttry{\n\t\t\treturn Encoder64(str);\n\t\t}\n        catch (Exception e){\n\t\t}\n\t\treturn null;\n\t}\n\tString Encoder64(byte[] str) {\n\t\tByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\t\tCipher encoder = new PBEKeySpec(str, \"PBE_SHA1$NULL$NULL\".toCharArray()).getAlgorithm();\n\t\tKeyFactory keyFact = KeyFactory.getInstance(\"PBE\");\n\t\tKeySpec keySpec = new PBEKeySpec(str.toCharArray());\n\t\tSecretKey privKey = keyFact.generateSecret(keySpec);\n\t\tencoder.setKey(privKey);\n\t\t\n\t\tCipher cipher = Cipher.getInstance(\"PBE\");\n\t\tSecretKeySpec secretKeySpec = new SecretKeySpec(str.toCharArray(), \"PBE\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, privKey, secretKeySpec);\n\t\treturn outStream.toString();\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "@Test\n    public void test() {\n        // Test empty string\n        assertEquals(\"\", StringEncrypter.encrypt(\"\"));\n        // Test null string\n        assertEquals(null, StringEncrypter.encrypt(null));\n        // Test one character string\n        assertEquals(\"a\", StringEncrypter.encrypt(\"A\"));\n        // Test two characters string\n        assertEquals(\"Aa\", StringEncrypter.encrypt(\"AlA\"));\n        // Test multiple characters string\n        assertEquals(\"abc\", StringEncrypter.encrypt(\"abc\"));\n        // Test a null string\n        assertEquals(null, StringEncrypter.encrypt(null));\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n    public void encryptTest() throws Exception {\n        assertNull(StringEncrypter.encrypt(\"\"));\n        assertEquals(\"\", StringEncrypter.encrypt(\"123456\"));\n        assertEquals(\"qwertyuiop\", StringEncrypter.encrypt(\"1!4$\", 4) );\n        assertEquals(\"\", StringEncrypter.encrypt(\"\", 0) );\n    }\n\t\n\t@Test\n    public void decryptTest() throws Exception {\n        assertEquals(\"1!4$\", PBEKeySpec.decodeOrNull(StringEncrypter.encrypt(\"1!4$\", 4)));\n    }\n}\n\n\n// StringEncrypter4Test.java\n",
            "finish_reason": "stop"
        }
    ],
    "id": "0b698f65-6272-4754-91b8-47460bd8f8b5",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter_0Test.java",
    "original_code": "// StringEncrypter.java\npackage osa.ora.server.utils;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport java.security.spec.KeySpec;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\n\npublic class StringEncrypter {\n\n    public String encrypt(String str) {\n        if (str == null)\n            return null;\n        try {\n            // Encode the string into bytes using utf-8\n            byte[] utf8 = str.getBytes(\"UTF8\");\n            // Encrypt\n            byte[] enc = ecipher.doFinal(utf8);\n            // Encode bytes to base64 to get a string\n            return StringEncoder64.encode(enc);\n        } catch (Exception e) {\n        }\n        return null;\n    }\n}\n",
    "test_prompt": "// StringEncrypter_0Test.java\npackage osa.ora.server.utils;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport java.security.spec.KeySpec;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringEncrypter}.\n* It contains one unit test case for the {@link StringEncrypter#encrypt(String)} method.\n*/\nclass StringEncrypter_0Test {",
    "time_taken": 58.10052514076233,
    "usage": {
        "prompt_tokens": 452
    }
},
{
    "choices": [
        {
            "text": "\n\tprivate final String testString = \"A String!!!\";\n    @Test\n    public void decryptTest() {\n        if (testString.length() == 0)\n            return;\n        try {\n            // Decrypt\n            StringEncrypter sci = new StringEncrypter();\n            String result =sci.decrypt(testString);\n            assertEquals(\"A String!!!\",result);\n        } catch (Exception ignored) {}\n    }\n   \n    @Test\n    public void getKeySpec() {\n        assertNotNull(SecretKeyFactory.getInstance(\"PBE\"));\n        \n        // Initialize Cipher object\n        Cipher cipher = Cipher.getInstance(\"AES/CFB/NoPadding\");\n    \n        // Initialize algorithm parameters\n        AlgorithmParameterSpec params = new PBEParameterSpec(\"AES\");\n    \n    /*   * Create a PBEParameterSpec with 128 bits of salt (AES)\n    * using the PBKDF2 with no additional salt*/\n    params = new PBEParameterSpec(128, 0);\n    PBEKeySpec keySpec = new PBEKeySpec(new byte[16]);\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2\");\n    SecretKey key;\n\n    // Encrypt\n    byte[] result = cipher.doFinal(testString.getBytes(\"UTF8\"));\n    byte[] dec = cipher.doFinal(testString.getBytes(\"UTF8\"));\n    System.err.println(\"before encrypt: \"+StringEncoder64.encode(testString)+ \" --> \"+ StringEncoder64.encode(result));\n    System.err.println(\"in: \"+StringEncoder64.encode(testString)+ \" --> \"+StringEncoder64.encode(result)+ \" \"+StringEncoder64.encode(testString.getBytes(\"UTF8\")));\n    key = factory.generateSecret(keySpec);\n    System.err.println(\"After encrypt: \"+StringEncoder64.encode(testString)+ \" --> \"+StringEncoder64.encode(result));\n    System.err.println(\"in: \"+StringEncoder64.encode(testString)+ \" --> \"+StringEncoder64.encode(result)+ \" \"+StringEncoder64.encode(testString.getBytes(\"UTF8\")));\n    System.err.println(\"decrypt: \"+StringEncoder64.encode(dec)+ \" --> \"+StringEncoder64.encode(result));\n    System.err.println(\"result: \"+StringEncoder64.encode(result));\n    result = cipher.destroy();\n    System.err.println(\"after encrypt: \"+StringEncoder64.encode(testString)+ \" --> \"+ StringEncoder64.encode(result));\n    System.err.println(\"in: \"+StringEncoder64.encode(testString)+ \" --> \"+ StringEncoder64.encode(result)+ \" \"+StringEncoder64.encode(testString.getBytes(\"UTF8\")));\n    System.err.println(\"result: \"+ StringDecoder64.decode(StringDecoder64.encode(result))+ \" --> \"+StringDecoder64.encode(result) );\n    assertEquals(testString,StringDecoder64.decode(StringDecoder64.encode(testString)) );\n   }\n\n \n\n \n\n\n\n\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Test method for\n\t\t* {@link StringEncrypter#decrypt(java.lang.String)}.\n\t\t*/\n\t\t@Test\n\t\tvoid test_decryptFromEncryptedString_stringWithPassword() {\n\t\t\tString str = \"foobar\";\n            System.out.println(str);\n            byte[] b = { 0x14, 0x12 };\n            Cipher dcipher = \n                    SecretKeyFactory.getInstance(\"AES\").\n                    generateSecret(AlgorithmParameterSpec.SECRET_KEY_ALGORITHM_PARAMETERS);\n            \n\t\t\t// Create a KeySpec with password\n\t\t\tKeySpec ks = new PBEKeySpec(str.toCharArray());\n            \n\t\t\t// Create a SecretKey with password\n\t\t\tSecretKey secKey = SecretKeyFactory.getInstance(\"AES\").\n                    generateSecret(AlgorithmParameterSpec.SECRET_KEY_ALGORITHM_PARAMETERS);\n            \n\t\t\t// Initialize the cipher with key and secret\n\t\t\tdcipher.init(Cipher.ENCRYPT_MODE, secKey, ks);\n            \n\t\t\t// Test the result\n            assertEquals(\"foobar\", dcipher.doFinal(b));\n        }\n        \n        /**\n\t\t* Test method for {@link StringEncrypter#decrypt(java.lang.String)}.\n\t\t*/\n        @Test\n        void test_decryptFromEncryptedString_stringWithNoPassword() {\n\t\t\tString str = \"foobar\";\n\t\t\t\n\t\t\t// Create a KeySpec with no password\n\t\t\tKeySpec ks = new PBEKeySpec(null);\n            \n\t\t\t// Create a SecretKey with no password\n\t\t\tSecretKey secKey = SecretKeyFactory.getInstance(\"AES\").\n                    generateSecret(AlgorithmParameterSpec.SECRET_KEY_ALGORITHM_PARAMETERS);\n            \n\t\t\t// Initialize the Cipher with key and secret\n\t\t\tCipher dcipher = SecretKeyFactory.getInstance(\"AES\").\n                    generateSecret(AlgorithmParameterSpec.SECRET_KEY_ALGORITHM_PARAMETERS);\n            \n            // Test the result\n            assertNull(dcipher.doFinal(str));\n        }\n    }\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tpublic void testDecryptToUTF8String() {\n\t\tassertEquals(\"\",StringUtils.decrypt(\"\"));\n\t\tassertEquals(\"hello!\",StringUtils.decrypt(\"hello!\"));\n\t\tassertEquals(\"1kHUJI4e8\",StringUtils.decrypt(\"1kHUJI4e8\"));\n\t}\n\t\n\t// StringEncrypter_2Test.java\n\t/**\n\t* Test class of {@link StringEncrypter#decrypt(String)}.\n\t*/\n\t@Test\n\tpublic void testDecryptToUTF8String_1() {\n\t\ttry {\n\t\t\tString s1 = new String(TestUtils.randomNumericString(10));\n\t\t\tString s2 = new String(TestUtils.randomNumericString(10));\n\t\t\t// test case:\n\t\t\tString s3 = s2.replaceAll(\"a+\", \"b\").replaceAll(\"c\", \"d\");\n\t\t\tSystem.out.println(\"s1=\" + s1);\n\t\t\tSystem.out.println(\"s2=\" + s2);\n\t\t\tSystem.out.println(\"s3=\" + s3);\n\t\t\tString newString = StringUtils.decrypt(s1);\n\t\t\tassertEquals(new String(new String(s1.getBytes())),new String(newString.getBytes()));\n\t\t\tassertEquals(new String(new ArrayByteIterator(new String(s2.getBytes())), new String(s2.getBytes())), new String(new String(newString.getBytes())));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Exception caught in test\");\n\t\t}\n\t}\n\t\n\t// StringEncrypter_3Test.java\n\t/**\n\t* Test class of {@link StringEncrypter#decrypt(String)}.\n\t*/\n\t@Test\n\tpublic void testDecryptToUTF8String_2() {\n\t\ttry {\n\t\t\tString s1 = new String(TestUtils.randomNumericString(10));\n\t\t\tString s2 = new String(TestUtils.randomNumericString(10));\n\t\t\t// test case:\n\t\t\tString s3 = StringUtils.decrypt(s1, null);\n\t\t\tSystem.out.println(\"s1=\" + s1);\n\t\t\tSystem.out.println(\"s2=\" + s2);\n\t\t\tSystem.out.println(\"s3=\" + s3);\n\t\t\tassertNull(\"The returned string is not null\", s3);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Exception caught in test\");\n\t\t}\n\t}\n\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* <p>The test case for {@link StringEncrypter#decrypt(String)}.</p>\n\t\t* <ul>\n\t\t* <li>Any encrypted oracle key is expected to be passed as {@link String Encrypter#keyEnc}.</li>\n\t\t* <li>The decrypted {@link String Encryptor} is expected to be passed as {@link String Encrypter#encrypted}.</li>\n\t\t* <li>Pair-wise encryption is expected to be supported by both, the first is expected to be passed as {@link String Encrypter#encryptedEncryptor},\n\t\t* the other {@link String Encrypter#decryptor} is expected to be passed as {@link String Encrypter#decrypted}.</li>\n\t\t* <li>{@link String Encrypter#decryptor} can be configured to use the key {@link String Encrypter#encryptorKeyEnc} or it can be passed in {@link String Encrypter#keyEnc}.</li>\n\t\t* </ul>\n\t\t*/\n    @Test\n    public void testDecryptor() {\n        StringEncrypter testee = new StringEncrypter();\n\t\tassertEquals(\"The first encrypted string should have no encryption.\", null, testee.encrypted());\n\t\tassertEquals(\"The other encrypted string should have the decrypted string.\", \"\", testee.decrypted());\n        // Both encrypted should be supported\n        assertTrue(StringEncrypterTestUtil.test(testee, StringEncrypterTestUtil.encryptedKey));\n        assertTrue(StringEncrypterTestUtil.test(testee, StringEncrypterTestUtil.encrypted)!= null);\n        // It should be possible to pass the same encryption/encryption algorithm to both test case\n        testee.encrypted = testee.encryptedEncryptor;\n        testee.encryptedEncryptor = StringEncrypterEncryptorCipher_1.Encryptor_1_AES;\n        testee.encryptedDecryptor = testee.decryptedEncryptor;\n        testee.decryptedEncryptor = testee.encryptedEncryptor;\n        assertTrue(StringEncrypterTestUtil.test(testee, StringEncrypterTestUtil.encrypted));\n        assertEquals(StringEncrypterTestUtil.encryptedEncryptor, StringEncrypterTestUtil.encryptedEncryptor);\n        assertNull(testee.decryptedEncryptor);\n        // Encryption/Decryption algorithm with a different algorithm\n        testee = new StringEncrypter();\n        testee.encryptedEncryptor = StringEncrypterEncryptorCipher_1.Encryptor_1_AES;\n        assertNull(testee.decryptedEncryptor);\n        testee.encryptedEncryptor = StringEncrypterEncryptorCipher_2.Encryptor_2_AES;\n        AlgorithmParameterSpec params = AlgorithmParameterSpec.getInstance(PBEParameterSpec.class.getName());\n        byte[] key = testee.encrypted.getBytes();\n        if (testee.keyEnc!= null) {\n            testee.encryptedEncryptor = new StringEncrypterEncryptorPBEParameterSpec(params, key);\n        } else if (testee.encryptorKeyEnc!= null) {\n            testee.encryptedEncryptor = new StringEncrypterEncryptorPBEWrapper(params, key);\n        } else {\n            throw new Error(\"test error: unknown pbe-algorithm for encrypted algorithm.\");\n        }\n        try {\n            testee.decrypted = testee.encryptedEncryptor.doFinal(testee.encrypted);\n        } catch (Exception e) {\n        }\n        throw new Error(\"pbe-algorithm is neither AES nor PBEWrapper.\");\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "public final Cipher cipher = Cipher.getInstance();\n\t\tpublic final StringEncoder64 encoder = new HexEncoder64();\n\t\tpublic final StringEncoder128 encoder = new HexEncoder128();\n\n\t\t@Test\n\t\tvoid testDecrypt() throws NoSuchPaddingException, NoSuchAlgorithmException {\n\t\t\tbyte[] utf8_b = \"<a/>\".getBytes();\n\t\t\tString result = decoder.decode((String) (String) cipher.doFinal(encoder.encrypt(utf8_b)));\n\t\t\tif (result!= null) {\n\t\t\t\tassertArrayEquals(\"1.0.1\", result.getBytes());\n\t\t\t} else if (utf8_b[0] == 0x0) {\n\t\t\t\tassertNull(result);\n\t\t\t} else {\n\t\t\t\tthrow new AssertionError(result);\n\t\t\t}\n\t\t}\n\n\t\t@Test\n    \tpublic void testEncrypt() throws NoSuchAlgorithmException, NoSuchPaddingException {\n            byte[] utf8_b = \"<a/>\".getBytes();\n            String result = encrypt(\"2.1.1\", result);\n            if (result!= null) {\n                assertArrayEquals(\"1.0.0\", result.getBytes());\n            } else if (utf8_b[0] == 0x0) {\n                assertNull(result);\n            } else throw new AssertionError(result);\n        }\n\t}\n",
            "finish_reason": "stop"
        },
        {
            "text": "   \n    // Secret key\n    static String secret = \"LwWnIWxhJzEfUw5YQcB5Q2n7hx9sIq9oE6ZuBx4Q9L/b2rVq8PnTpZ4b7Z0gfIzcNXzZTlLJ8mFxS3N/EoQT2vVbJ6Hc0W8QbFqJ8xw8S6dFmZ3Q1y0/nk8c7a6sbDl7RlT5M2a7tDjK9o2r9lMn4Qi3yTbxFbWfM5cZfhE0Tn9u/KDt9L4hIwUj9f3p5iIiTdLkPkfhxC5d4J3LwvH8tLkVq8eoI2I6/dkQcJgWmzI2n6dH8a/9tJ6zv8LwQm8k/7iQvVj3n4Lc7e5Tbz7p4ZfZyOoNd8Qe9JG/1/9q3X2aZp3Q1yq8M6cUxC9oXfB5hOuP7f7mJbBV+tVqvX3Q7yDmQ3l0ejV6o5jzmQwI7JhX+zJ8VfUcCfxC9+b5uQ/6A9zQvOqA8+sFjgZt0FJX4B5GfJ8XgUg/7fBxvL1uQyP//A9W4Tv2vX9tvf8hxvV2ZTzg5/cFyN+QX9GvX5jhDQf0fQv5nGq0fQe0vQzfX2QiVqZ0gJ+fYb8XKxgQp9iA3VQxkQKJlV8eD8dW9G/dgJdGvTvQtX8l9lOQ7uKXxQzpvXxTnZx8l9LkVqX9fP8d0vEu6vXnS0zQG0t0dGKVQk8L1KdP8d2VqXh0lV6hfQzdDkVQj0cEu6vxZnS0tV7u3z7hvWZTlFwq9OmZ2vX9fP8i7G4lNuTpFxO7nVz4dQ9v8tV1x6P8Fd0Z8lVfU7BxYiKVyTQxXf8kQ5VztTQZ7Vz8Hn8aDUzc9N0V0hE0Z8fVzT6U6Z5OzfzVzJ5w8VzT6mZ8kZg6qJ3QvE4E4Z9YTtJ8iY2V5gL9NbZ2Tm1eDbF4ZP5oZ9VZ1cFzY5hE4ZiZH0eDzYzTkZJzFzT2ZT2H8V6qJ3aRc6FyZiZH0eDhV5VzN0Z0ZU6Z1YiZlZW6QpNtZjR1MtVzjb3VXZ6e4I0L0cI5S9mR9i8zSfZ4b7D0P6KvWQK0QvK0Q7qz8n8Zr7U/pSZ6W0Qr7XQe0vQ2QhqbX5jbS1ZlV7W6jqW0bLk5Q2VzOuRnK6S1R9iMzV0sSV5Z4BpW5p6i5KjPvZ3H3H5J7OmN0bW7Qp8j2QiZTqp1X5bSxL0dH0cH0dGfP4h6fvX8uKXyV6gZ0v4h6FvS3p1bH0qKiVvJ3eV5ZW1sZ6bHgN1XlV3Q6NjV6jqXfN3U8vS6bH4Zj5VzKiV5Z4bH4fVzSbGZ0dVH4Z4bH4Z4qVzSbJ3Y6KiWi4tY2h6jZ3iKiPj7hkC2YbW9FdY2VhZ2Z5oZmhNjdC3K5OzA3N2hvYmV0oZ2gYXK4Z2L3b3R5Z2Y2L21Z2t4bW5tY2F2Z5oZ2Q2Z3X2F2Y2L3V3Y2U8VzJ8lW5Ki3dZ2m5Z2KrP3p5G2V2V3Y2b3h2TmVzY2dZz5U2V2pKpJ5p5b2V5Rm9v2ZpbW5tV2V3b2R5Y2dGcZpO2Q6dGV6dGVzaTzBb1VpCzIkd9JYkZaZbT0Ml2ZpK1V2Y2RlY2hbC3YQeH0eC2V0dGg6TjPzZ3JkdC3RjL3B1b2Nyb3Jlb2xvb2ZhZ2hb3lzbG9vbWxubmUwY2RlY3Ryb3JjcmVkZS8+qT0KtF1d3R5dGJlbC4dHwgQz6Hc6e3P3N2Y3b2RpY2d3R5b3Q4ZmZ1bFzd",
            "finish_reason": "length"
        },
        {
            "text": "\n\tpublic StringEncrypter_1Test() {\n\t\t\n\t}\n\n\t@Test\n\tpublic void test() throws Exception {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5And128BitAES-CBC\"); // <----- TODO\n        KeySpec keySpec = new PBEKeySpec(new char[16], 0x100, 16);\n        SecretKey key = keyFactory.generateSecret(keySpec);\n        String EncryptionKey = \"testEncryptionKey\";\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // <----- TODO\n        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n        assertNotEqual(nil, EncryptionKey);\n        try {\n            String decrypted = Decryptor.decrypt(cipher.doFinal(EncryptionKey.getBytes()));\n            assertEquals(\"Wrong String value\", \"123456\", decrypted);\n            //\n        } catch\n        (NullPointerException e) {\n            System.out.println(\"NullPointerException: \" + e.getMessage());\n            assertNotNull(e);\n        } catch\n        (Exception e) {\n            System.out.println(\"General Exception: \" + e.getMessage());\n            //\n        }\n\n        try {\n            String encrypted = Encryptor.encrypt(cipher.doFinal(DecryptionKey.getBytes()));\n            assertEquals(nil, encrypted);\n\n        } catch\n        (NullPointerException e) {\n            System.out.println(\"NullPointerException: \"+e.\n            getMessage());\n            assertNotNull(e);\n        } catch\n        (Exception e) {\n            System.out.println(\"General Exception: \"+e.getMessage());\n            assertFalse(\"EroperException\", e instanceof EroperException);\n            //\n        }\n    }\n  \n    private boolean isNull(Object o) {\n        return nil.equals(o);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void test() {\n        // Test case for Pbe1\n\n        // Generate key pair\n        byte[] keyPass = new byte[32];\n        new SecureRandom().nextBytes(keyPass);\n        KeySpec ks = new PBEKeySpec(keyPass);\n        SecretKeyFactory sf = SecretKeyFactory.getInstance(AlgorithmParameterSpec.ALG_PBKDF2);\n        // Decode the key\n        byte[] key = sf.generateSecret(ks).getEncoded();\n        // Decrypt the key\n        String str = encrypt(decrypt(crypt(key)));\n        assertEquals(crypt(key), str);\n    }\n\n    private byte[] crypt(byte[] key) {\n        byte[] cipher = new byte[128];\n        cipher[0] = byteToOne(byte(0x00));\n        cipher[32] = byteToOne(byte(0x00));\n        System.arraycopy(key, 0, cipher, 1, 64);\n        return cipher;\n    }\n\n    private byte one(byte i) {\n        return (byte)(i & 0xff | 0x80);\n    }\n\t\n    private byte[] cipher(byte[] encrypted) {\n        byte[] cipher = new byte[encrypted.length * 8];\n        for (int i = 0; i < encrypted.length * 8; i++) \n            cipher[i] = one(encrypted[i]);\n        return cipher;\n    }\n\n    private byte[] dcipher = new byte[256];\n    private byte[] password = new StringEncoder64(1).encode(\"password\");\n\n}\n\n    /**\n     * Test case for encrypted keys.\n     *\n     * @since 1.0\n     */\n    @Test\n    public void testEncryptedKey() {\n        // Test cases for encrypted keys\n        System.out.println(\"Test case for encrypted keys...\");\n        // Generate key pair\n        byte[] keyPass = new byte[32];\n        new SecureRandom().nextBytes(keyPass);\n        KeySpec ks = new PBEKeySpec(keyPass);\n        Cipher cipher = Cipher.getInstance(\"PBEWITHSEC\");\n        SecretKeyFactory sf = SecretKeyFactory.getInstance(AlgorithmParameterSpec.ALG_PBEWITHSEC);\n        // Decode the key\n        byte[] key = sf.generateSecret(ks).getEncoded();\n        // Decrypt the key\n        String str = encrypt(encrypt(decrypt(key)));\n        cipher.init(Cipher.ENCRYPT_MODE, sf.generateSecret(ks));\n        byte[] encrypted = cipher.doFinal(str.getBytes());\n        System.out.println(\"Encrypted Key: \" + new String(encrypted));\n        System.out.println(\"Encrypted Key: \" + encrypt(encrypted));\n        for (int i = 0; i < encrypted.length; i++) {\n            // Verify integrity of the encrypted key\n            byte b = encrypted[i];\n            boolean b_equal = encrypted[i] == keyPass[i];\n            assertTrue(b_equal);\n        }\n        System.out.println(\"Encrypted Key: \" + encrypt(key));\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@javax.annotation.Nonnull\n\tprivate StringEncrypter<String> decrypt2Enc = new StringEncrypter_2<>();\n\t\n\t@javax.annotation.Nonnull\n\tprivate StringEncrypter<String> decryptWithRPC = new StringEncrypter_2<>(\"Hello, world!\", \"12345\");\n\t\n\t/**\n\t * @param s\n\t * @return\n\t*/\n\tpublic AlgorithmParameterSpec getAlgorithmParameterSpecEnc(String s)\n\t{\n\t\t\treturn getAlgorithmParameterSpecEnc.getParameterSpec(s);\n\t}\n\t\n\t/**\n\t * @param s\n\t * @return\n\t*/\n\tpublic AlgorithmParameterSpec getAlgorithmParameterSpecEncWithRPC(String s)\n\t{\n\t\t\treturn getAlgorithmParameterSpecEncWithRPC.getParameterSpec(s);\n\t}\n\t\n\t/**\n\t * Method checks the decoding of encoded string.\n\t * @param s\n\t * @return\n\t */\n\tpublic String decrypt(String s)\n\t{\n\t\treturn decrypt2Enc.decrypt(s);\n//\t\t\treturn StringEncoder.decode(dcipher.doFinal(str.getBytes()))[0];\n\t}\n\t\n\t/**\n\t * Method checks the value of encrypted string.\n\t * @param s\n\t * @return\n\t */\n\tpublic String decryptWithEnc(String s)\n\t{\n\t\treturn this.decrypt2Enc.decrypt(s);\n//\t\t\treturn dcipher.doFinal(StringEncoder.decode(enc.getBytes())).length;\n\t}\n\t\n\t/**\n\t * UnitTest for the algorithmName parameter spec to achieve a test for encrypting.\n\t * @throws Throwable \n\t */\n\t@Test\n\tpublic void test1EncDecryptWithRPC() throws Throwable {\n\t\tassertNotNull(this.decryptWithRPC);\n\t\tassertNotNull(this.decrypt2Enc);\n//\t\t\tassertEquals(dcipher.getBlockSize(), this.decrypt2Enc.getBlockSize());\n//\t\t\tassertEquals(StringEncoder.getPrefix(), this.decrypt2Enc.getSuffix());\n//\t\t\tassertEquals(dcipher.getKeySize(), this.decrypt2Enc.getKeySize());\n//\t\t\tassertEquals(\"The original value is \" + dcipher.doFinal(new byte[0]), \"The encrypted value is \", dcipher.doFinal(new byte[0]));\n\t\t\n\t\tbyte testBytes[] = {(byte)('X'), (byte)('W'), (byte)('L'), (byte) ('r')}; \n\t\tAlgorithmParameterSpec p = new PBEParameterSpec(\"\");\n\t\tSecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBEDecrypt\"); \n\t\tKeySpec spec = new PBEKeySpec(testBytes); \n\t\tSecretKey dec = kf.generateSecret(spec); \n\t\tbyte outEnc[] = this.decryptWithRPC.encrypt(dec, p); \n\t\tbyte tmp = outEnc[2];\n\t\tbyte decOut[] = this.decryptWithRPC.decrypt(outEnc); \n\t\tassertTrue(\"The value of encrypted string is not the same as the value of original data\", \n\t\t\t\t(byte) (decOut[0] == (byte) ('X'))) ; \n\t\tassertTrue(\"The value of encrypted string is not the same as the value of original data\", \n\t\t\t\t(byte) (decOut[1] == (byte) ('W'))) ; \n\t\t// The length of outEnc is 3 bytes\n\t\t// The byte for the second byte is X\n\t\t// The byte for the third byte is W\n\t\t// The byte for the fourth byte is L\n\t\tassertTrue(\"The value of this encryption is not the same as the value of second encryption\", \n\t\t\t\t(byte) (outEnc[2 + 3] == (byte) ('X')));\n\t\tassertTrue(\"The value of this encryption is not the same as the value of third encryption\", \n\t\t\t\t(byte) (outEnc[3 + 3] == (byte) ('W')));\n\t\tassertTrue(\"The value of this encryption is not the same as the value of fourth encryption\", \n\t\t\t\t(byte) (outEnc[4 + 3] == (byte) ('L')));\n\t}\n\t\n\t/**\n\t * Method checks the value of encrypted string.\n\t * @param s\n\t * @return\n\t */\n\tpublic byte decryptWithEnc(String s)\n\t{\n\t\treturn this.decryptWithEnc(s);\n\t}\n\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t// String\n    @Test\n    public void test_String_1() {\n        assertEquals(\"\", new StringEncrypter(\"\").decrypt(\"\"));\n        assertEquals(\"\", new StringEncrypter(\"\").encrypt(\"\\u2026\"));\n\n        assertEquals(\"abc\", new StringEncrypter(\"a\").decrypt(\"abc\"));\n        assertEquals(\"abc\", new StringEncrypter(\"a\").encrypt(\"\\u2026ABC\"));\n\n        // Non-ASCII \"hello\" bytes\n        assertEquals(\"\", new StringEncrypter(\"hello\").decrypt(\"\"));           \n        assertEquals(\"\", new StringEncrypter(\"hello\").encrypt(\"\\u2026abc\\u2026abc\\u2026\\u2026\\u2026\"));\n    }\n    \n    \n    \n    @Test\n    public void test_String_2() {\n        assertEquals(\"\", new StringEncrypter(\"a\").decrypt(\"\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\\u2026\"));\n        assertEquals(\"\", new StringEncrypter(\"\\u2026\"));\n    }\n}\n\n@Before\npublic void setUp() {\n\n}\n@After\npublic void tearDown() {\n\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "5146ce77-1df3-4e48-826a-cc4c1c216b42",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter_1Test.java",
    "original_code": "// StringEncrypter.java\npackage osa.ora.server.utils;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport java.security.spec.KeySpec;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\n\npublic class StringEncrypter {\n\n    public String decrypt(String str) {\n        if (str == null)\n            return null;\n        try {\n            // Decode base64 to get bytes\n            byte[] dec = StringEncoder64.decode(str);\n            // Decrypt\n            byte[] utf8 = dcipher.doFinal(dec);\n            // Decode using utf-8\n            return new String(utf8, \"UTF8\");\n        } catch (Exception e) {\n        }\n        return null;\n    }\n}\n",
    "test_prompt": "// StringEncrypter_1Test.java\npackage osa.ora.server.utils;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport java.security.spec.KeySpec;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringEncrypter}.\n* It contains one unit test case for the {@link StringEncrypter#decrypt(String)} method.\n*/\nclass StringEncrypter_1Test {",
    "time_taken": 58.2523980140686,
    "usage": {
        "prompt_tokens": 446
    }
},
{
    "choices": [
        {
            "text": "static final String TITLE            = \"Misc.FontChooserTest.TestName_0\";\n\t\tprivate final static String HELP_TEXT = \n\"<html>\\n\" +\n\".<br>\\n\"\n\"A check box allows the user to select a font from the list of configured fonts.\\n\"\n\"<p>A button that allows the user to choose one font from the list of fonts has the following\\n\"\n\"behaviour:\\n\"\n\" <ul>\\n\"\n\"<li>The button's state changes if the list of fonts changes.\\n\"\n\"<li>The option's default value changes if the list of fonts changes.\\n\"\n\"</ul>\\n\"\n\"<p>One of the buttons can be selected by the user.\\n\"\n\"<p>See {@link JFontChooser_0Test.Button_0}</p>\\n\"\n\"</p>\";\n\t\n\t\tprivate static class Button_0 extends JButton implements Serializable {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t\tprivate static final FontTracker ok = new ButtonTracker(this);\n\t\t\n\t\t\tprivate static final Container Pane = getPane(1);\n\t\n\t\t\tprotected Button_0(Action action) {\n\t\t\t\tsuper(action);\n\t\t\t\t\n\t\t\t\tsetHorizontalAlignment(SwingConstants.RIGHT);\n\t\t\t\tsetIcon(0);\n\t\t\t\tputClientProperty(\"JButton.focusTraversable\", true);\n\t\t\t\tputClientProperty(\"JButton.rolloverEnabled\", true);\n\t\t\t}\n\t\t\n\t\t\t@Override\n\t\t\tpublic ActionListener getActionListener() {\n\t\t\t\treturn new actionListener();\n\t\t\t}\n\n\t\t\tprivate class actionListener implements ActionListener {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tContainer pane = getPane(0);\n\t\t\t\t\tActionMap map;\n\t\t\t\t\tListSelectionModel sm = pane.getSelectionModel();\n\t\t\t\t\tint count;\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\t\t\t\t\tActionMap newMap = (ActionMap) getClass().newInstance();\n\t\t\t\t\t\tListSelectionModel newSm = new Sm();\n\t\t\t\t\t\t\n\t\t\t\t\t\tmap = newMap;\n\t\t\t\t\t\tAction[] actions = map.getActions();\n\t\t\t\t\t\tfor (int i = 0; i < actions.length; i++) {\n\t\t\t\t\t\t\tif (actions[i].getValue(Action.NAME) == \"OK\") {\n\t\t\t\t\t\t\t\tnewSm.addSelectionInterval(i, i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcount = sm.getSize();\n\t\t\t\t\t\tif (sm.getSize() == 0) {\n\t\t\t\t\t\t\tmap.remove(\"OK\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception exc) {\n\t\t\t\t\t\texc.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Change all button",
            "finish_reason": "length"
        },
        {
            "text": "private static final String TITLE = \"Fontchooser Title\";\n\t\tprivate static final String FONT = \"com.sun.java.swing.plaf.windows.WindowsFont\";\n\t\tpublic static int x = 1;\n\t\tpublic static int y = 2;\n\n\t\t@Test\n\t\tpublic void testCreateFont()\n\t\t\t\tthrows Exception {\n\t\t\tFontTracker ok = new FontTracker(this);\n\t\t\tassertNotNull(ok.getFont());\n\t\t\tassertEquals(ok.getFont().getName(), FONT);\n\t\t}\n\n\t}\n\n// JFontChooser_1.java\n\nclass FontChooserDialog implements Runnable, Serializable {\n    \n    public Font getFont() {\n        Object o = getAttribute(\"font\");\n        if (o == null) {\n            return new Font(getFontName(), Font.PLAIN, 12);\n        }\n        return (Font)o;\n    }\n\n    private static FontTracker fontTracker = new FontTracker(FontChooser_0Test.this);\n    \n    private Object attribute = \"font\";\n    private Object attribute2 = \"name\";\n    \n    private JLabel label = null;\n    private JButton button1 = null;\n    private JButton button2 = null;\n    private JCheckBox checkBox1 = null;\n    private JCheckBox checkBox2 = null;\n    private JLabel label2 = null;\n    private JLabel label3 = null;\n    \n    FontChooserDialog(JComponent jc) {\n        addComponentListener(new JComponent.UnicableListener() {\n            public void unicableChanged(Object o, boolean state) {\n                if (state!= true) {\n                    return;\n                }\n                fontTracker.removeActionListeners(button1);\n                fontTracker.removeActionListeners(button2);\n                fontTracker.removeActionListeners(checkBox1);\n                fontTracker.removeActionListeners(checkBox2);\n                fontTracker.removeActionListeners(label2);\n                fontTracker.removeActionListeners(label3);\n            }\n        });\n    }\n\n\tpublic void run() {\n\t\t// do nothing\n    }\n\n    private static void addComponentListener(final Container parent) {\n        ComponentListener listener = new ComponentAdapter() {\n            public void componentResized(ComponentEvent e) {\n                label.moveSize(0.5, 0);\n            }\n        };\n        parent.addComponentListener(listener);\n    }\n\n    private void setLabel(JComponent jc, String name) {\n        label.setText(name);\n    }\n\n    private void setButton1(JComponent jc, String name) {\n        button1.setText(name);\n    }\n\n    private void setButton2(JComponent jc, String name) {\n        button2.setText(name);\n    }\n\n    private void setCheckBox1(J",
            "finish_reason": "length"
        },
        {
            "text": "private static final int fontNum = 1;\n//\t\tprotected TestFonts testFonts[] = new TestFonts[] { new TestFonts() {{ name = \"SansSerif\"; }}};}\n\t\t\n\t\t@Test\n\t\tpublic void testShowDialog()  {\n\t\t\tassertEquals(\"showDialog(JFontChooser,String): Test font name\", testFonts[1].name, JFontChooser.showDialog(null, \"test font chooser dialog\"));\n\t\t}\n\n//\t\t@Test\n//\t\tpublic void testCreateDialog()  {\n//\t\t\tassertEquals(\"Test font chooser dialog created\", testFonts[0].name, JFontChooser.createDialog(new TestDialog(), \"Test dialog\"));\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testAddFont()  {\n//\t\t\tassertEquals(\"addFont(JFontChooser,String): Test setting font\", testFonts[0].name, JFontChooser.createDialog(new TestDialog(), \"Test dialog\"));\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testRemoveFont()  {\n//\t\t\tassertEquals(\"removeFont(JFontChooser,String) - Not implemented\", null, JFontChooser.removeFont(JFontChooser.createDialog(new TestDialog(), \"Test dialog2\"), \"Test dialog\"));\n//\t\t}\n\n\t\t@Test\n\t\tpublic void testCreateDialogWithFontName()  {\n\t\t\tassertEquals(\"Test font chooser dialog created\", testFonts[0].name, JFontChooser.createDialog(null, \"test dialog chooser dialog\"));\n\t\t}\n\n//\t\t@Test\n//\t\tpublic void testModifyDialog()  {\n//\t\t\tassertEquals(\"Modify dialog (font name): Test font chooser dialog created\", testFonts[0].name, JFontChooser.createDialog(null, \"test dialog chooser dialog\"));\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testCreateDialogWithAction()  {\n//\t\t\tassertEquals(\"Modify dialog (action): Test action\", testFonts[0].action, JFontChooser.createDialog(null, \"test dialog chooser dialog\"));\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testCreateDialogWithCheckbox()  {\n//\t\t\tassertEquals(\"test dialog (checkbox disabled for modal dialogs):\", testFonts[0].disable, JFontChooser.createDialog(null, \"test dialog chooser dialog\"));\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testCreateDialogWithDummyActionListener()  {\n//\t\t\tassertFalse(\"test dialog (dummy action listener for modal dialogs):\", testFonts[0].dummyActionListener);\n//\t\t}\n\n//\t\t@Test\n//\t\tpublic void testCreateDialogWithFontsListener()  {\n//\t\t\tassertFalse(\"test dialog",
            "finish_reason": "length"
        },
        {
            "text": "/**\n* Creates a JFontChooser for testing purposes.\n* \n* @param root the component to attach it to\n* @param title the title to display when the JFontChooser is shown\n* \n* @return the JDialog used to edit the contents of the JFontChooser\n*/\nJDialog createDialog(Component root, String title, boolean okcanc, FontTracker ok, FontTracker kw) {\nJDialog dialog = new JDialog(DialogController.createParent(root));\ndialog.setResizable(false);\ndialog.setTitle(title);\ndialog.setModal(true);\ndialog.addWindowListener(DialogController.createParentListener(dialog));\ndialog.addComponentListener((ComponentAdapter)a -> {\n\tok.reloadIfNeeded();\n\tkw.reloadIfNeeded();\n\t// blocks until user brings dialog down...\n\tdialog.setVisible(false);\n\troot.setFont(null);\n});\nreturn dialog;\n}\n\n/**\n* Tests for the method 'createDialog(String, String)' for\n* the constructor and'showDialog(Component, String)' for the\n* static methods.\n*/\n@Test\npublic void testJFontChooserCreateDialogShowDialogStatic() {\n    Container c = createDialog(\"\", \"\", true, null, null);\n    assertNull(\"createDialog/showDialog\", c);\n}\n/**\n* Checks the method 'createDialog(String, String)' for the\n* constructor.\n*/\n@Test\npublic void testJFontChooserCreateDialog() {\n\tString text = \"Test Text\";\n    Container c = createDialog(\"\", text, false, null, null);\n    assertNotNull(\"createDialog(\" + text + \")\", c);\n}\n@Test\npublic void testJFontChooserDialogString() {\n    JComponent jc = JOptionPane.createDialog(\"Test message\", \"testFontChooserDialog\");\n    \n    assertNotNull(\"createDialog(String, String)\", jc);\n    JButton button = (JButton)jc;\n    assertEquals(\"button.\", button.getText(), \"testFontChooserDialog\");\n}\n@Test\npublic void testJFontChooserDialogInteger() {\n    JComponent jc = JOptionPane.createDialog(\"Test message\", Integer.toString(12));\n    \n    assertNotNull(\"createDialog(\" + Integer.toString(12) + \")\", jc);\n    JButton button = (JButton)jc;\n    assertEquals(\"button.\", button.getText(), Integer.toString(12));\n}\n@Test\npublic void testJFontChooserDialogFile() {\n    JComponent jc = JFileChooser.getDirectoryFileChooser(\"fileChooserDialogFile\");\n    \n    assertNotNull(\"JFileChooser.getDirectoryFileChooser\", jc);\n    JButton",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static final String FONT_FONTAG = \"font-font\";\n\n\tprivate static final int KEYBOARD_TAB_INDEX = 1;\n\n\tpublic static Test suite() {\n\t\treturn new TestSuite (JFontChooser.class);\n\t}\n\n\tprivate static enum Type {\n\n\n      Default,  Checkbox,  JLabel\n    }\n\n  /**\n * Test with the \"OK\" button with the checkbox checked.\n*/\n  @Test\n  public void testOK() {\n      JFontChooser chooser = new JFontChooser();\n      chooser.setType(Type.Checkbox);\n      JButton okButton = (JButton) chooser.showDialog(null, null);\n      assertNull(chooser);\n      assertEquals(okButton, (JButton) new ChooseFontAction().action);\n  }\n\n\n  /**\n* Test with the \"OK\" button without the checkbox checkbox checked.\n*/\n  @Test\n  public void testNotOK() {\n    JFontChooser chooser = new JFontChooser();\n    chooser.setType(Type.Default);\n    assertFalse(chooser.showDialog(null, null)!= null);\n  }\n\n  private class ChooseFontAction implements Action {\n\n          /**\n           * Construct our action.\n           * @param name the name of the textfield under which the dialog is displayed\n           */\n          public ChooseFontAction(String name) {\n                  setName(name);\n          }\n\n          public void actionPerformed(ActionEvent evt) {\n                  assertTrue(false);\n          }\n\n          public String toString() {\n                  return \"ChooseFontAction: Name \"+ getName();\n          }\n\n          protected void actionActivated(ActionEvent evt) {\n\n          }\n\n  }\n\n\n  private void runAllTests() {\n\n  }\n\n\n  // JFontChooser.java\n\n}\n\n/*\n * Copyright (C) 2014 by Stefan, Siederd\n * http://www.osa.io\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n * Boston, MA  02110-1301  USA\n */\n ",
            "finish_reason": "stop"
        },
        {
            "text": "private static final String CUSTOM_FONT_STYLE = \"Custom Font Style\";\n\t\tprivate static final String CUST_FONT_SIZE = \"Custom Font Size\";\n\t@Test\n\tpublic void createDialog_0() {\n\t\tJFontChooser parent = new JFontChooser();\n\t\tassertNotNull(parent);\n\t\tassertNotNull(parent.getFontTitle());\n\t\tassertNotNull(parent.getFontFamily());\n\t\tassertNotNull(parent.getFontValue());\n\t}\n\t@Test\n\tpublic void createDialog_1() {\n\t\tJFontChooser parent = new JFontChooser(CUSTOM_FONT_STYLE, 16);\n\t\tassertNotNull(parent);\n\t\tassertNotNull(parent.getFontTitle());\n\t\tassertNotNull(parent.getFontFamily());\n\t\tassertNull(parent.getFontValue());\n\t}\n\t@Test\n\tpublic void createDialog_2() {\n\t\tJFontChooser parent = new JFontChooser(CUST_FONT_SIZE, 16);\n\t\tassertNotNull(parent);\n\t\tassertNotNull(parent.getFontTitle());\n\t\tassertNotNull(parent.getFontFamily());\n\t\tassertNotNull(parent.getFontValue());\n\t}\n\t@Test\n\tpublic void createDialog_3() {\n\t\tJFontChooser parent = new JFontChooser();\n\t\tassertNotNull(parent);\n\t}\n\t@Test\n\tpublic void createDialog_4() {\n\t\t// should produce a message box when user presses C\n\t\tactionPerformed(new ActionEvent(null, 0, null, null));\n\t\tassertTrue(getMessage(\"user.select\"), false);\n\t}\n\n\tprivate void setUp() {\n\t\tJDialog dialog = createDialog(null, \"JFontChooser_0Test\", true, null, null);\n\t}\n\n\tprivate void assertNoMessage(Action action) {\n\t\tassertEquals(0, getMessage(\"user.please.press.A\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.B\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.C\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.D\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.E\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.F\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.G\"));\n\t\tassertEquals(0, getMessage(\"user.please.press.H\"));\n\t}\n\n\tString getMessage(String key) {\n\t\tint index = \"user\".indexOf(key) + 1;\n\t\treturn (index >= 1? String.format(\"-%s-please-press--\", key) : \"\").toString();\n\t}\n\n",
            "finish_reason": "length"
        },
        {
            "text": "private static final String TITLE = \"title\";\n\t\tprivate static final String INPUT = \"input\";\n\t\tprivate static final String FONT = \"font\";\n\t\tprivate static final String SELECT_FONT = \"select-font\";\n\t\tprivate static final String DIALOG = \"dialog\";\n\t\tprivate static final String ACTION_LISTENER = \"listener\";\n\t\tprivate static final String PADDING = \"padding\";\n\t\tprivate static final String CHECK_LIST_BOXES = \"checkListBoxes\";\n\t\tprivate static final String FOCUSABLE_FIELD = \"focusableField\";\n\t\tprivate static final String FOCUS_DEVICE = \"focusDevice\";\n\t\tprivate static final String REMOTE_FONT = \"remoteFont\";\n\t\tprivate static final String REMOTE_FONT = \"remoteFont\";\n\t\tprivate static final String CHANGE_FONT_FIELD = \"changeField\";\n\t\tstatic class ActionListenerListner implements ActionListener {\n\t\t\tprivate final JButton jButton;\n\t\t\tprivate final ListSelectionListener jListSelectionListener;\n\t\t\tprivate int[] count = new int[1];\n\n\t\t\tActionListenerListner(Container container, ListSelectionListener selectionlistener) {\n\t\t\t\tjButton = new JButton(getButtonText());\n\t\t\t\tjButton.addActionListener(this);\n\t\t\t\tcontainer.add(jButton);\n\t\t\t\tcontainer.add(new JLabel(getButtonText()));\n\t\t\t\tjListSelectionListener = selectionlistener;\n\t\t\t}\n\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tActionListener listener = (ActionListener) e.getSource();\n\t\t\t\tjListSelectionListener.clearSelection();\n\t\t\t\tjListSelectionListener.add(e.getActionCommand(), jButton);\n\t\t\t\ttry {\n\t\t\t\t\tjButton.setSelected(false);\n\t\t\t\t} catch(Exception ex) {\n\t\t\t\t}\n\t\t\t\tcount[0]++;\n\t\t\t\tfor (int i = 0; i < count.length; i++) {\n\t\t\t\t\tif (count[i] > 0) {\n\t\t\t\t\t\tjListSelectionListener.addSelectionInterval(i, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tjButton.setSelected(true);\n\t\t\t}\n\n\t\t\tprivate String getButtonText() {\n\t\t\t\treturn \"JButton\";\n\t\t\t}\n\t\t}\n\n\t/**\n\t* JPanel for testing purposes (createJDialog/ createJButton: works correctly):\n\t* It has several components:\n\t* <OL>\n\t* <LI>a JFontChooser panel\n\t* <LI>a JButton that allows to set and activate the JFontChooser button for a specified input\n\t* <LI>a JButton that allows to set and activate the JFontChooser panel for a specified input\n\t* <LI>a JTextField that allows to set and activate the JFontChooser input selection box \n\t* <LI>a JTextField that allow to select a specified font\n\t* </OL>\n\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static EventListenerList listenerList = new EventListenerList();\n\n    /**\n    */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * Test method for {@link JFontChooser#createComponent(javax.swing.JComponent)}.\n     */\n    @Test\n    public void testCreateComponent() {\n        JCheckBox check = new JCheckBox(\"test\");\n        assertFalse(check.isSelected());\n        check.setSelected(true);\n        assertFalse(check.isSelected());\n        FontPanel panel = new FontPanel();\n        assertFalse(panel.isVisible());\n        assertNotNull(panel.getActionMap());\n        assertNull(panel.getInputMap());\n        panel.getActionMap().put(\"test\", new AbstractAction() {\n            public void actionPerformed(final ActionEvent e) {\n            }\n        });\n        assertTrue(panel.isVisible());\n        assertNotNull(panel.getSelectedValue());\n        panel.createComponent(check);\n        assertEquals(check, panel.getSelectedValue());\n        assertTrue(panel.isVisible());\n        assertNotNull(panel.getSelectedActionMap());\n        assertTrue(panel.isVisible());\n        assertEquals(check, panel.getActionMap().get(\"test\"));\n        assertTrue(panel.isVisible());\n        assertNotNull(panel.getSelectedInputMap());\n        assertNotNull(panel.getInputMap());\n        assertNotNull(panel.getSelectedInputMap());\n    }\n\n    /**\n     * Test method for {@link JFontChooser#showDialog(javax.swing.JComponent)}.\n     */\n    @Test\n    public void testShowDialogForMultipleChoicePanel() {\n        JPanel contentPanel = new JPanel();\n        contentPanel.setLayout(new GridBagLayout());\n        // the first column contains two rows, second two empty\n        contentPanel.add(new JLabel(\"test\"), new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,\n                                                         GridBagConstraints.LINE_START,\n                                                         GridBagConstraints.NONE, new Insets(0, 0, 0, 0),\n                                                         1, 1, 0, 0));\n        contentPanel.add(new JLabel(\"test2\"), new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0,\n                                                         GridBagConstraints.LINE_START,\n                                                         GridBagConstraints.NONE, new Insets(0, 0, 0, 0),\n                                  ",
            "finish_reason": "length"
        },
        {
            "text": "\n    /** An object for listening for changes in the font-chooser dialog. */\n    private static class FontChooserDialog {\n\n        /** Reference to the listener. */\n        private final ChangeListener changeListener;\n\n        /** Reference to the dispose listener. */\n        private final DisposeListener disposeListener;\n\n        /**\n         * Creates listener.\n         *\n         * @param changeListener The listener.\n         * @param disposeListener The dispose listener.\n         */\n\n        public FontChooserDialog(final ChangeListener changeListener,final DisposeListener disposeListener) {\n            this.changeListener = changeListener;\n            this.disposeListener = disposeListener;\n        }\n    }\n\n    /** Event object for font-chooser. */\n    private static class FontChooserEvent extends WindowEvent {\n\n        /** Reference to the font. */\n        private final Font font;\n\n        /**\n         * Creates the event object.\n         *\n         * @param font The font.\n         */\n\n        @SuppressWarnings(\"unused\")\n\t\tpublic FontChooserEvent(Font font) {\n            this.font = font;\n        }\n    }\n\n    /**\n    * Tests serialization of FontChooser object.\n    */\n    @Test\n    public void testSerialization() throws Exception {\n        final String name = UIManager.getString(\"Label.font\");\n        final Font font = new Font(\"Tahoma\", Font.PLAIN, 22);\n        final Font originalFont = font;\n        final FontChooser fontChooser = new FontChooser(new ColorChooser());\n        final String originalFontContent = font.getName();\n\n        final JFontChooser fontChooser2 = (JFontChooser) fontChooser.create();\n\n        fontChooser2.setFont(font);\n        fontChooser2.setText(\"New Style\");\n\n        final String newFontContent = fontChooser2.getFont().getName();\n\n        assertNotEquals(originalFontContent, newFontContent);\n    }\n\n    /**\n    * Tests serialization of FontChooser object.\n    */\n    @Test\n    public void testFontChooserWithCollections() throws Exception {\n        final boolean[] bool = new boolean[9];\n        JPanel testPanel = new JPanel();\n        testPanel.add(new JLabel(\"Label\"));\n\n        testPanel.add(new JButton(\"Add Button\"));\n        testPanel.add(new JCheckBox(\"Add CheckBox\"));\n\n        testPanel.add(new JButton(\"Test\"));\n        final Font font = testPanel.getFont();\n\n        final Action[] act = new Action[9];\n        act[0] = new AbstractAction(\"Remove\") {};\n\n        final String[] content = new String[9];\n        final String[] content2 = new String[0];\n\n        for (int i = 1; i < 10; ++i) {",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Constructor to initialize a new instance of JFontChooser.\n\t * @param component - JComponent to be used for the\n\t\t\t\t       JFontChooser.setFont method\n\t * @param title - Title of the dialog\n\t */\n\tJFontChooser_0Test(JComponent component, String title) {\n\t\tthis.setFont(title);\n\t}\n\t\n\t/**\n\t * Test method of {@link JFontChooser#showDialog(Component, String)}.\n\t */\n\t@Test\n\tpublic void testDialog() {\n\t\tString title = \"\";\n\t\tActionListener actionListener;\n\t\tComponent component=getComp(title);\n\n\t\tJPanel panel = (JPanel)createDialog(component, title, true, new JPanel(), new ComponentListener());\n\n\t\ttry {\n\t\t\tactionListener = new ActionClickListener(panel);\n\t\t\tactionList.addListener(actionListener);\n\n\t\t\tJButton button = createButton(panel, \"Test 1\");\t\t\t\n\t\t\tbutton.addActionListener(new ActionClick1(panel));\n\t\t\tbutton.addActionListener(new ActionClick2(panel));\n\n\t\t\tdialog.setContentPane(panel);\n\t\t\tdialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);\n\t\t\tdialog.setResizable(false);\n\n\t\t\tdialog.pack();\n\t\t\tdialog.setVisible(true);\n\t\t}\n\t\tfinally {\n\t\t\tactionList.removeListener(actionListener);\n\t\t}\n\t}\n\t\n\t/**\n\t * Helper method to create a JDialog.\n\t * @param title - Title of the dialog\n\t * @param modal - if the dialog should be modal\n\t * @return JDialog\n\t */\n\tprivate JDialog createDialog(Component component, String title, boolean modal, JComponent initialPanel, ActionListener actionListener) {\n\t\tJPanel pane;\n\t\tJDialog dialog;\n\t\tActionListener actionListener = new ActionClickListener(initialPanel);\n\t\t\n\t\tif (modal) {\n\t\t\tdialog = new JDialog(component, title, modal);\n\t\t} else {\n\t\t\tdialog = new JDialog(component, title);\n\t\t\tdialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);\n\t\t}\n\n\t\tJLabel label = (JLabel)createLabel(component, \"&label\", 2, -1);\n\t\t\tlabel.setComponentOrientation(component.getComponentOrientation());\n\t\tpane = createCheckBox(label, new BooleanComponent(text, actionListener, (ComponentAdapter)dialog));\n\n\t\tdialog.getContentPane().add(label, BorderLayout.CENTER);\n\t\tdialog.getContentPane().add(pane, BorderLayout.SOUTH);\n\t\tdialog.pack();\n\t\tdialog.setLocationRelativeTo(component);\n\t\tdial",
            "finish_reason": "length"
        }
    ],
    "id": "876b60d7-6589-4f8d-9046-e0696e323f0f",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser_0Test.java",
    "original_code": "// JFontChooser.java\npackage osa.ora.server.client.ui.utils;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.Serializable;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.InputMap;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.EventListenerList;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\n\n/**\n * <code>JFontChooser</code> provides a pane of controls designed to allow\n * a user to manipulate and select a font.\n *\n * This class provides three levels of API:\n * <ol>\n * <li>A static convenience method which shows a modal font-chooser\n * dialog and returns the font selected by the user.\n * <li>A static convenience method for creating a font-chooser dialog\n * where <code>ActionListeners</code> can be specified to be invoked when\n * the user presses one of the dialog buttons.\n * <li>The ability to create instances of <code>JFontChooser</code> panes\n * directly (within any container). <code>PropertyChange</code> listeners\n * can be added to detect when the current \"font\" property changes.\n * </ol>\n * <p>\n *\n * @author Adrian BER\n */\npublic class JFontChooser extends JComponent {\n\n    public Font showDialog(Component component, String title) {\n        FontTracker ok = new FontTracker(this);\n        JDialog dialog = createDialog(component, title, true, ok, null);\n        dialog.addWindowListener(new FontChooserDialog.Closer());\n        dialog.addComponentListener(new FontChooserDialog.DisposeOnClose());\n        dialog.setAlwaysOnTop(true);\n        // blocks until user brings dialog down...\n        dialog.setVisible(true);\n        return ok.getFont();\n    }\n}\n",
    "test_prompt": "// JFontChooser_0Test.java\npackage osa.ora.server.client.ui.utils;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.Serializable;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.InputMap;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.EventListenerList;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JFontChooser}.\n* It contains one unit test case for the {@link JFontChooser#showDialog(Component, String)} method.\n*/\nclass JFontChooser_0Test {",
    "time_taken": 28.942094802856445,
    "usage": {
        "prompt_tokens": 1389
    }
},
{
    "choices": [
        {
            "text": "\n\t/** The component where the test dialog is placed. */\n\tprivate Container container;\n\tprivate MouseListenerContainer mcp;\n\t/** The text label which has been made visible at the top of the dialog */\n\tprivate javax.swing.JLabel fl;\n\t\n\t/**\n\t * Provides the test dialog that gets set up by the test.\n\t *\n\t * @param modal Whether or not the dialog is modal.\n\t * @param okListener The listener to be called when the OK button is\n\t *\t      clicked.\n\t * @param cancelListener The listener to be called when the Cancel button is\n\t *\t      clicked.\n\t * @param ok The action to be called.\n\t * @param cancel The action to be called.\n\t */\n\tvoid createDialog(boolean modal, ActionListener okListener, ActionListener cancelListener, Action ok, Action cancel) {\n\t\tActionMap aMap = getContext().getActionMap(getClass());\n\t\tActionMap aMap_1 = getContext().getActionMap(getClass());\n\t\tAction action = aMap;\n\t\tInputMap im = getContext().getInputMap(getClass());\n\t\t\n\t\tmcp = new MouseListenerContainer(modal);\n\t\t\n\t\tcontainer = new JWindow();\n\t\tmcp.setContainer(container);\n\t\t\n\t\t/* Create the dialog  and return it. */\n\t\tJDialog dialog = new JFontChooser(mcp, modal);\n\t\t\n\t\t/* Return the current value of the dialog's button box. */\n\t\tButton bb = ((JList)dialog.getContentPane()).getSelectedValue();\n\t\t\n\t\t/* Set the title of the dialog as the parameter for the\n\t\t* default Action.\n\t\t*/\n\t\tJLabel label = new JLabel(\"Dialog\");\n\t\t\n\t\t/* Select the first element contained in the list */\n\t\tJList list = (JList)factory.getComponent();\n\t\t\n\t\t/* Check that it is not the first one in the list. */\n\t\tassert!list.getModel().contains(list.getModel().get(0));\n\t\t/* Check that the list has an element inside. */\n\t\tassert list.getModel().get(0)!= null;\n\t\t\n\t\t/* Fill in the element referenced by the button. */\n\t\tJList.Element jel = list.convertIndexToModel(list.indexOf(bb));\n\t\t\n\t\t/* Select the element referenced by the button. */\n\t\tnew ListSelectionListener(){\n\t\t\tJList list;\n\t\t\t\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\t\tlist = (JList) e.widget;\n\t\t\t\tnewListElement(jel);\n\t\t\t}\n\t\t}.install(list);\n\t\t\n\t\t/* Put a listener to update the label that shows the current font. */\n\t\tnew ComponentAdapter(lcd);\n\t\t\n\t\tdialog.setLocationRelativeTo(getApp());\n\t\tdialog.setSize(400, 200);\n\t\tdialog.addWindowListener(getApp());\n\t\tcontainer.add(new JScrollPane(dialog), BorderLayout.CENTER);\n\t\tdialog.setVisible(modal);",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     * Tests a dialog which prompts the user to select a font.\n     * @throws java.io.IOException\n     */\n    @Test\n    void testCreateDialog() throws java.io.IOException{\n\n        final JDialog result;\n\n                               \n        result = createDialog(\"OK\", \"Please select a font.\", true, new ActionListener() {\n            public void actionPerformed(ActionEvent ae) {\n                assertTrue(\"Test for createDialog failed!\", ae.getSource() == result);\n\n                // Call the superclass (constructor) method to\n                // make sure the dialog was closed normally.\n                JFontChooser.this.dispose();\n            }\n        }, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                assertTrue(\"Test for createDialog failed!\", e.getSource() == result);\n            }\n        });\n        assertTrue(\"Failed in dialog creation!\", result.isVisible());\n        result.setVisible(false);\n        assertFalse(\"Failed in dialog creation!\", result.isVisible());\n\n        // Test the OK button\n        result = createDialog(\"OK\", \"Select a selection of F1 F5 or F8 (not F7 and F9) for a font.\", true, new ActionListener() {\n            public void actionPerformed(ActionEvent ae) {\n                assertTrue(\"Test for createDialog failed!\", ae.getSource() == result);\n\n                // Call the superclass (constructor) method to\n                // make sure the dialog was closed normally.\n                JFontChooser.this.dispose();\n            }\n        }, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                assertTrue(\"Test for createDialog failed!\", e.getSource() == result);\n            }\n        });\n        assertTrue(\"Failed in dialog creation!\", result.isVisible());\n        result.setVisible(false);\n        assertFalse(\"Failed in dialog creation!\", result.isVisible());\n\n\n        // Test the OK button\n        result = createDialog(\"OK\", \"Select a selection of F8 (the default).\", true, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                assertTrue(\"Test for createDialog failed!\", e.getSource() == result);\n\n                // Call the superclass (constructor) method to\n                // make sure the dialog was closed normally.\n                JFontChooser.this.dispose();\n            }\n        }, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                assertTrue(\"Test for createDialog failed!\", e.getSource() == result);\n            }\n        });\n        assertTrue(\"Failed in dialog creation!\", result.isVisible());\n        result.setVisible(false);\n        assertFalse(\"Failed in dialog creation!\", result.isVisible());\n\n\n        // Test the OK button\n        result = createDialog(\"OK\", \"Select a selection of F8...\", true, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                assertTrue(\"Test for createDialog failed!\", e.getSource() == result);\n\n                // Call",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Create a new JFontChooser_1Test.\n\t\t*/\n\tJFontChooser_1Test() {\n\t}\n\n\t/**\n\t* Test method for\n\t* {@link osa.ora.server.client.ui.utils.JFontChooser#createDialog(java.awt.Component, java.lang.String, java.lang.Boolean, java.lang.ActionListener, java.lang.ActionListener)}\n\t*.\n\t*/\n\t@Test\n\tvoid testCreateDialog2() {\n\t\tnew JFontChooser(null);\n\t\tassertNull(JFontChooser.createDialog(null, \"\", false, (ActionListener) null, (ActionListener) null));\n\t\tassertNull(JFontChooser.createDialog(null, \"\", true, (ActionListener) null, (ActionListener) null));\n\t\tassertNull(JFontChooser.createDialog(new Window(16), \"\", false, (ActionListener) null, (ActionListener) null));\n\t\tassertNull(JFontChooser.createDialog(new Window(16), \"\", true, (ActionListener) null, (ActionListener) null));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", false, (ActionListener) null, (ActionListener) null));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", true, (ActionListener) null, (ActionListener) null));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", true, (ActionListener) null, (ActionListener) null));\n\t}\n\n\t/**\n\t* Test method for {@link osa.ora.server.client.ui.utils.JFontChooser#createDialog(java.awt.Component, java.lang.String, java.lang.Boolean, java.lang.ActionListener, java.lang.ActionListener)}.\n\t*/\n\t@Test\n\tvoid testCreateDialog3() {\n\t\tnew JFontChooser(new AbstractAction(\"action\") {\n\t\t\tpublic void actionPerformed(ActionEvent event) {\n\t\t\t\tSystem.out.println(event);\n\t\t\t}\n\t\t}).createDialog(new ContentPane(), \"\", true, null, null);\n\t\tassertNotNull(JFontChooser.createDialog(null, \"\", true));\n\t\tassertNotNull(JFontChooser.createDialog(new Window(16), \"\", true));\n\t\tassertNotNull(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", true));\n\t\tassertNotNull(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", false));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", true));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", false));\n\t\tassertTrue(JFontChooser.createDialog(new Container(new FlowLayout()), \"\", true));\n\t}\n\n\t/**\n\t* Test method for {@link osa.ora.server.client.ui.utils.JFontCho",
            "finish_reason": "length"
        },
        {
            "text": "\n    static ListSelectionListener alist = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent event) {\n            int mv = Integer.valueOf((String) event.getActionCommand()).intValue();\n            if (mv == 0) {\n                setFontSelection(null);\n            } else if (mv == 1) {\n                setFontSelection(\n                    new Font(UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getName(),\n                        UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getHeight(), \n                        new Font(UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getName(),\n                            UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getHeight()))\n            \t);\n            } else if (mv == 2) {\n                setFontSelection(\n                    new Font(UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getName(),\n                        UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getHeight(), \n                        new Font(UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getName(),\n                            UIManager.getSystemLookAndFeel().getDefaultLookAndFeel().getHeight()))\n            \t);\n            }            \n        }\n    };\n    \n    String FONT_PROP = \"font\";\n    String COLOR_PROP = \"color\";\n    String DIMENSION_PROP = \"size\";\n    \n    static final String DIALOG = \"Dialogo\";\n    static final String FONT_NAME = \"label\";\n    static final String FONT = \"label\";\n    static final String CLOSE_FONT = \"DialogFd\";\n    static final String FONT_COLOR = \"label\";\n    static final String DIMENSION = \"label\";\n    static final String PICTURE = \"dialogIcon\";\n    String WIDTH_PROP = \"width\";\n    String HEIGHT_PROP = \"height\";\n    ActionListener okListener1 = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent event) {\n            setDialogSelection(new Font(FONT_PROP, FONT_COLOR, Double.valueOf((String) event.getActionCommand()).intValue()));\n        }\n    };\n    ActionListener cancelListener = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent event) {\n            setDialogSelection(null);\n        }\n    };\n    ActionListener okListener2 = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent event) {\n            setDialogSelection(new Font(FONT_PROP, FONT_PROP, Double.valueOf((String) event.getActionCommand()).intValue()));           \n        }\n    };\n    JFontChooser jfc = new JFontChooser(new JLabel());\n    Window window;\n    JDialog dialog;\n    JComponent button;\n\n    /**\n    *\n    ",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t* Test static method for {@link JFontChooser#createDialog(Component,String, boolean, ActionListener, ActionListener)}.\n\t* @throws Exception\n\t*/\n\t@Test\n    public void testCreateDialogStatic() throws Exception {\n        JDialog dialog = JFontChooser.createDialog(\n                null, \"Test Dialog\", true, null, null);\n    }\n    \n    /**\n\t* Test method for {@link JFontChooser#createDialog(Component,String, boolean, ActionListener, ActionListener)}.\n\t* @throws Exception\n\t*/\n    @Test\n    public void testCreateDialog() throws Exception {\n        JDialog dialog = JFontChooser.createDialog(null, \"Test Dialog\", true, null, null);\n    }\n}\n\n// JFontChooser.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n/*\n*  Unit Test Case for the createDialog method of {@link JFontChooser}.\n*/\npublic class JFontChooser_1Test_1 {\n\n    @Test\n    public void testCreateDialog() throws Exception {\n        JFontChooser chooser = new JFontChooser();\n        Component comp = new JLabel(\"Label\");\n        JButton okButton = new JButton();\n        JButton cancelButton = new JButton();\n        JDialog dialog = chooser.createDialog(comp, comp.getName(), true);\n        dialog.setLocationByPlatform(false);\n        dialog.setContentType(\"text/html\");\n        Container dialogContentPane = dialog.getContentPane();\n        dialogContentPane.setBackground(new java.awt.Color(0, 0, 0));\n        JPanel panel1 = new JPanel(new GridBagLayout());\n        JLabel label1 = new JLabel(\"label 1\");\n        dialogContentPane.add(label1, new GridBagConstraints(0, 0, 2, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5), 0, 0));\n        JList list1 = new JList(new String[]{\"java.awt.Label\", \"java.awt.Button\", \"java.awt.Label\", \"java.awt.Button\"});\n        list1.setModel(new javax.swing.AbstractListModel() {\n            String[] strings = new String[]{\"ActionListener\", \"ActionList\", \"ActionButton\", \"ActionButton\", \"ActionList\"};\n            public int getSize() {\n                return strings.length;\n            }\n            public Object getElementAt(int i) {\n                return strings[i];\n            }\n            public int getIndexOf(Object o) {\n                return ((javax.swing.AbstractListModel)getModel()).indexOf(o);\n            }\n        });\n        dialogContentPane.add(list1, new GridBagConstraints(1, 0, 2, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, new Insets(5,5,5,5), 0, 0));\n        JPanel panel2 = new JPanel(new GridBagLayout());\n        JPanel panel3 = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        JPanel panel4 = new JPanel(new GridLayout(1, 1));\n        JButton panel5 = new JButton();\n        panel4.add(panel5);\n        JButton panel6 = new JButton();\n        panel4.add(panel6);\n        JButton panel7 = new JButton();\n        panel6.add(panel7);\n        panel2.add(panel4, new GridBagConstraints(2, 0, 2, 3, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* <code>ActionListener</code> which implements the action for\n\t\t* the \"font-chooser-button-ok\" button of a {@link JDialog} in a way that\n\t\t* does not cause an exception.\n\t\t*/\n\tprivate class JFontChooser_2_1ActionListener implements ActionListener {\n\n\t\tpublic void actionPerformed(ActionEvent a) {\n\t\t\tString fontString = ((JCheckBox)a.getSource()).getSelectedText();\n\t\t\tActionListener m = a.getSource().getActionListeners()[0];\n\t\t}\n\t}\n\t/**\n\t* <code>Action</code> which implements the action for the\n\t* \"font-chooser-button-cancel\" button of a {@link JDialog} in a way that\n\t* does not cause an exception.\n\t*/\n\tprivate class JFontChooser_2_2ActionListener implements ActionListener {\n\n\t\tpublic void actionPerformed(ActionEvent a) {\n\t\t\tActionListener m = a.getSource().getActionListeners()[0];\n\t\t}\n\t}\n\t/**\n\t* <code>PropertyChangeListener</code> which implements the\n\t* \"font-chooser-current\" property of a {@link JButton} component in a\n\t* way that does not cause any errors.\n\t*/\n\tprivate class JFontChooser_2_3PropertyChangeListener implements PropertyChangeListener {\n\n\t\tpublic void propertyChange(PropertyChangeEvent pce) {\n\t\t\tJButton b = (JButton)pce.getSource();\n\t\t\tassertEquals(\"font\", pce.getPropertyName(), \"font-chooser-current\");\n\t\t}\n\t}\n\t/**\n\t* Default constructor.\n\t*/\n\tpublic JFontChooser_1Test() {\n\t\tsuper();\n\t}\n\n\t/**\n\t* Performs and action for the \"font-chooser-button-ok\" button of a\n\t* {@link JDialog} in a way that does not cause an action.\n\t*/\n\t@Test\n\tpublic void test_actionPerformedWhenButtonOkIsNotActionListener() {\n\t\tActionListener a = new JFontChooser_2_1ActionListener();\n\t\tJButton b = new JButton();\n\t\tassertNotNull(a);\n\t\tassertNotNull(b);\n\t\tActionListener m = a.getSource().getActionListeners()[0];\n\t}\n\n\t/**\n\t* Performs and action for the \"font-chooser-button-cancel\" button of a\n\t* {@link JDialog} in a way that does not cause an action.\n\t*/\n\t@Test\n\tpublic void test_actionPerformedWhenButtonCancelIsNotActionListener() {\n\t\tActionListener a = new JFontChooser_2_2ActionListener();\n\t\tJButton b = new JButton();\n\t\tassertNotNull(a);\n\t\tassertNotNull(b);\n\t\tActionListener m = a.getSource().getActionListeners()[0];\n\t}\n\n\t/**\n\t* Performs and action for the \"font-chooser-cancel\" button of a\n\t* {@link JDialog} in a way that",
            "finish_reason": "length"
        },
        {
            "text": "private static boolean isMac = GraphicsEnvironment.isHeadless();\n\n\n    @Test\n    public void test_creatingFontChooserDialog_simple() {\n        ActionActionListener okLis = new ActionActionListener(new Object());\n        ActionActionListener cancelLis = new ActionActionListener(null);\n\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                \"This is a test dialog with simple behaviour\",\n                true,\n                okLis,\n                cancelLis\n        );\n\t\tassertTrue(\"Dialog should be created\", dialog!=null);\n\n    }\n\n    @Test\n    public void test_creatingFontChooserDlg_empty() {\n        ActionActionListener okLis = new ActionActionListener(null);\n\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                \"\",\n                true,\n                okLis,\n                null\n        );\n\t\tassertTrue(\"Dialog should be created\", dialog!=null);\n    }\n\n    @Test\n    public void test_creatingFontChooserDlg_empty_ok() {\n        ActionActionListener okLis = new ActionActionListener(null);\n\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                \"\",\n                true,\n                null,\n                okLis\n        );\n\t\tassertTrue(\"Dialog should be created\", dialog!=null);\n    }\n\n    @Test\n    public void test_creatingFontChooserDlg_empty_cancel() {\n        ActionActionListener okLis = new ActionActionListener(null);\n\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                                           \"\",\n                                           false,\n                                           okLis,\n                                           null\n        );\n        assertTrue(\"Dialog should be created\", dialog!=null);\n    }\n\n    @Test\n    public void test_creatingFontChooserDlg_badArgs() {\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                \"\",\n                false,\n                null,\n                null\n        );\n\t\tassertTrue(\"Dialog should be created\", dialog!=null);\n    }\n\n    @Test\n    public void test_creatingFontChooserDlg_badArgs_ok() {\n        final JDialog dialog = createDialog(new JLabel(\"Font chooser dialog 1\"),\n                \"\",\n                false,\n                new Action[0],\n                new Action[]{null,null}\n        );\n\t\tassertTrue(\"Dialog should be created\", dialog!=null);\n    }\n\n    /**\n     * Test case 1 for a bad \"font\" property which, when pressed, results\n     * in a \"font\" change event being called with a new value.\n     * <p>\n     * Details: <a href=\"http://java.sun.com/docs/books/tutorial/uiswing/misc/fontchange/index.html\">Bug report</a> used during testing.\n     */\n    @Test\n    public void test_creatingFontChooserDl",
            "finish_reason": "length"
        },
        {
            "text": "private static Action createAction(ActionListener l) {\n\t\t\treturn new AbstractAction(String.valueOf(l)) {\n\t\t\t\t@Override\n\t\t\t\tpublic void actionPerformed(@SuppressWarnings(\"rawtypes\") java.awt.event.ActionEvent e) {\n\t\t\t\t\tl.actionPerformed(null);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\npublic JFontChooser_1Test(final String title, final Font originalFont) {\n\n        JFontChooserComponent component = new JFontChooserComponent();\n        setLayout(new BorderLayout());\n        add(component, BorderLayout.NORTH);\n\n        JCheckBox box = new JCheckBox(\"Test Box\");\n        box.setOpaque(false);\n        box.addActionListener(new KeyListener() {\n\t\t\t@Override\n\t\t\tpublic void keyReleased(KeyEvent e) {\n\t\t\t\t//System.out.println(\"key released: \" + e.getKeyChar());\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\t//System.out.println(\"key pressed: \" + e.getKeyChar());\n\t\t\t}\n\t\t});\n        box.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t//System.out.println(\"actionPerformed: \" + e.getActionCommand());\n\t\t\t\tJFontChooser_1Test.this.firePropertyChange(JFontChooser_1Test.this.originalFont,originalFont, originalFont);\n\t\t\t}\n\t\t});\n        box.setFont(originalFont);\n\t\tBorderLayout buttonsBorder = new BorderLayout();\n\t\tbuttonsBorder.setMargin(new Insets(0, 0, 0, 0));\n\t\tbuttonsBorder.setHgap(5);\n\t\tJButton button = new JButton(new JColorChooser(new ButtonFace(new ButtonStyle(ButtonStyle.BUTTON_CLOSE))));\n        button.setMargin(new Insets(0, 0, 5, 0));\n\t\tbutton.setOpaque(false);\n\t\tadd(button, buttonsBorder);\n\n        component = new JList();\n        component.setFont(originalFont);\n        component.setOpaque(false);\n        component.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\tcomponent.setSelectionRenderer(new ColorListRenderer(new Color(255, 0, 0)));\n        component.addListSelectionListener(new ListSelectionListener() {\n\t\t        @Override\n\t\t        public void valueChanged(ListSelectionEvent lsbe) {\n\t\t        \tString key = (String) component.getSelectedValue();\n\t\t        \tint index = component.indexOf(key);\n\t\t        \tassertEquals(index, component.getSelectedIndex());\n\t\t        }\n\t\t    });\n        add(component, BorderLayout.SOUTH);\n    }\n}\n\nclass ButtonFace {\n\tprivate final static int BUTTON_CLOSE = 100;\n\tprivate final static int BUTTON_BUTTON_CLOSE = 300;\n\n\tprivate final static int BUTTON_BUTTON_OK = 100;\n\tprivate",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)}.\n\t */\n\t@Test\n\tpublic void testCreateDialog() {\n\t\tJFontChooser chooser = new JFontChooser();\n\t\t\n\t\tboolean ok = true;\n\t\t\n\t\tif (chooser.createDialog(createJLabel(\"Choose a font\"), \"Test dialog\", ok, okListener1, okListener2)) {\n\t\t\t\n\t\t\tif (!okListener1.getValue()) {\n\t\t\t\tassertEquals(okList, 0, String.valueOf(((Integer)chooser.getValue()).intValue()));\n\t    \t\tassertEquals(chooser.getSelectedIndex(), -1);\n\t\t\t}\n\t    \tassertTrue(ok);\n\t\t}\n\t}\n\t\n\t/**\n\t * Test method for {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)}.\n\t */\n\t@Test\n\tpublic void testCreateDialog2() {\n\t\tActionListener listener1 = createActionListener();\n\t\tActionListener listener2 = createActionListener();\n\t\t\n\t\tJFontChooser chooser = new JFontChooser();\n\t\t\n\t\tint num = 1;\n\t\t\n\t\tif (chooser.createDialog(createJLabel(\"Choose a font\"), \"Test dialog\", num, listener1, listener2)) {\n\t\t\t\n\t\t\tif (!listener1.getValue()) {\n\t\t\t\tassertEquals(numlist, 1, String.valueOf(num));\n\t    \t\tassertTrue(listener1.getValue());\n\t\t\t}\n\t    \tassertTrue(listener2.getValue());\n\t\t}\n\t\t\n\t\tnum = 0;\n\t\t\n\t\tif (chooser.createDialog(createJLabel(\"Choose a font\"), \"Test dialog\", num, listener1, listener2)) {\n\t\t\t\n\t\t\tif (!listener1.getValue()) {\n\t\t\t\tassertEquals(numlist, 0, String.valueOf(num));\n\t    \t\tassertFalse(listener1.getValue());\n\t\t\t}\n\t    \tassertTrue(listener2.getValue());\n\t\t}\n\t}\n\t\n\t/**\n\t * Test method for {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)}.\n\t */\n\t@Test\n\tpublic void testCreateDirectDialog() {\n\t\tContainer container = new JPanel();\n\t\tJFontChooser chooser = new JFontChooser();\n\t\tint num = 1;\n\t\t\n\t\tActionListener listener1 = createActionListener();\n\t\tActionListener listener2 = createActionListener();\n\t\t\n\t\tcontainer.add(createJLabel(\"Choose a font\"), BorderLayout.CENTER);\n\t\t\n\t\tif (chooser.createDirectDialog(container, \"Test direct dialog\", false, listener1, listener2)) {\n\t\t\t\n\t\t\tif (!listener1.getValue()) {\n\t\t\t\tassertEquals(numlist, 0, String.valueOf(num));\n\t    \t\tassertFalse(listener1.getValue());\n\t\t\t}\n\t    \tassertNotNull(listener2);\n\t\t}\n",
            "finish_reason": "length"
        }
    ],
    "id": "34d94795-a5d1-4760-b07a-96fc620f1f03",
    "prompt_id": "/EvoSuiteBenchmark/original/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser_1Test.java",
    "original_code": "// JFontChooser.java\npackage osa.ora.server.client.ui.utils;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.Serializable;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.InputMap;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.EventListenerList;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\n\n/**\n * <code>JFontChooser</code> provides a pane of controls designed to allow\n * a user to manipulate and select a font.\n *\n * This class provides three levels of API:\n * <ol>\n * <li>A static convenience method which shows a modal font-chooser\n * dialog and returns the font selected by the user.\n * <li>A static convenience method for creating a font-chooser dialog\n * where <code>ActionListeners</code> can be specified to be invoked when\n * the user presses one of the dialog buttons.\n * <li>The ability to create instances of <code>JFontChooser</code> panes\n * directly (within any container). <code>PropertyChange</code> listeners\n * can be added to detect when the current \"font\" property changes.\n * </ol>\n * <p>\n *\n * @author Adrian BER\n */\npublic class JFontChooser extends JComponent {\n\n    public JDialog createDialog(Component c, String title, boolean modal, ActionListener okListener, ActionListener cancelListener) {\n        return new FontChooserDialog(c, title, modal, this, okListener, cancelListener);\n    }\n}\n",
    "test_prompt": "// JFontChooser_1Test.java\npackage osa.ora.server.client.ui.utils;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.Serializable;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.InputMap;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.EventListenerList;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JFontChooser}.\n* It contains one unit test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.\n*/\nclass JFontChooser_1Test {",
    "time_taken": 31.179792642593384,
    "usage": {
        "prompt_tokens": 1326
    }
}
]