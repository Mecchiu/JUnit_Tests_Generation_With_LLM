ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
791ba33a-fad6-4f2d-8a93-09e19938357e,/EvoSuiteBenchmark/original/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat.java,53.86425828933716,stop,"// HSSFDataFormat.java
/*
 * HSSFDataFormat.java
 *
 * Created on December 18, 2001, 12:42 PM
 */
package org.apache.poi.hssf.usermodel;

import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.record.FormatRecord;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;

public class HSSFDataFormat {

    /**
     * Get the format index that matches the given format
     *  string, creating a new format entry if required.
     * Aliases text to the proper format as required.
     *
     * @param format string matching a built in format
     * @return index of format.
     */
    public short getFormat(String format) {
        ListIterator i;
        int ind;
        if (format.toUpperCase().equals(""TEXT""))
            format = ""@"";
        if (!movedBuiltins) {
            i = builtinFormats.listIterator();
            while (i.hasNext()) {
                ind = i.nextIndex();
                if (formats.size() < ind + 1) {
                    formats.setSize(ind + 1);
                }
                formats.set(ind, i.next());
            }
            movedBuiltins = true;
        }
        i = formats.listIterator();
        while (i.hasNext()) {
            ind = i.nextIndex();
            if (format.equals(i.next()))
                return (short) ind;
        }
        ind = workbook.getFormat(format, true);
        if (formats.size() <= ind)
            formats.setSize(ind + 1);
        formats.set(ind, format);
        return (short) ind;
    }
}
","// HSSFDataFormatTest.java
/*
 * HSSFDataFormat.java
 *
 * Created on December 18, 2001, 12:42 PM
 */
package org.apache.poi.hssf.usermodel;

import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.record.FormatRecord;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HSSFDataFormat}.
* It contains one unit test case for the {@link HSSFDataFormat#getFormat(String)} method.
*/
class HSSFDataFormatTest {","// HSSFDataFormatTest.java
/*
 * HSSFDataFormat.java
 *
 * Created on December 18, 2001, 12:42 PM
 */
package org.apache.poi.hssf.usermodel;

import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.record.FormatRecord;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HSSFDataFormat}.
* It contains one unit test case for the {@link HSSFDataFormat#getFormat(String)} method.
*/
class HSSFDataFormatTest {

    /**
     * Test of getFormat function, of the {@link HSSFDataFormat#getFormat(String)} method.
     * Asserts that the method returns the correct number of entries.
     */
    @Test
    public void testGetFormat() {
        HSSFDataFormat format = new HSSFDataFormat();
        try {
            format.getFormat(""TEST-"");
        } catch (IllegalArgumentException e) {
            fail(""IllegalFormatException should not be thrown"");
        }
    }
    
    /**
     * Test of moveBuiltins function, of the {@link HSSFDataFormat#getFormat(String)} method.
     */
    @Test
    public void testMoveBuiltins() {
        HSSFDataFormat format = new HSSFDataFormat();
        Vector testVector = getFormats();
        Iterator i;
        i = testVector.listIterator();
        while (i.hasNext()) {
            format.moveBuiltins();
        }
        assertTrue(format.builtInsFormats.isEmpty());
    }
    
    /**
     * Test of getBuiltInFormats function, of the {@link HSSFDataFormat#getFormat(String)} method.
     */
    @Test
    public void testGetBuiltInFormats() {
        HSSFDataFormat format = new HSSFDataFormat();
        List testVector = getFormats();
        for (int i = 0; i < testVector.size(); i++) {
            format.getBuiltInFormats();
        }
    }
    
    /**
     * Test of moved fromFormats function, of the {@link HSSFDataFormat#getFormat(String)} function.
     */
    @Test
    public void testMovedFromFormats() {
        HSSFDataFormat format = new HSSFDataFormat();
        getFormats();
        String newFormat = ""TEST-"";
        format.moveFromFormats(newFormat);
        format.moveToFormats(newFormat);
        assertEquals(format.movedFormats.size() - 1, format.movedBuiltins.size());
    }
}
"
