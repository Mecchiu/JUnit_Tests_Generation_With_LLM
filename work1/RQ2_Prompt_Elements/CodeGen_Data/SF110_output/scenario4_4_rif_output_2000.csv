ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
d27a915d-e4bf-4f03-bbd2-016cd4acfcb4,/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFImplementationManager_0Test.java,52.68488788604736,length,"// RIFImplementationManager.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;

/**
 * Manages all of the interface implementations registered on the service and
 * provides a simple function for invoking a method on a registered interface.
 *
 * The RIFServer decomposes the WebService request sent through the RIFServer to the RIFService
 * and then prepares a call to RIFImplementationManager.invoke to call the actual function.
 *
 * To register an implementation:
 * <code>
 *
 * RIFImplementationManager.getInstance().registerImplementation(YourInterface.class, new YourImpl());
 *
 * </code>
 *
 * @author Jonathan Glanz
 */
public class RIFImplementationManager {

    private static RIFImplementationManager instance = new RIFImplementationManager();

    /**
     * Retrieve the singleton RIFImplementationManager instance.
     *
     * @return
     */
    public static RIFImplementationManager getInstance();

    private Hashtable<String, Object> implementationMap = new Hashtable<String, Object>();

    private Hashtable<Object, Map<String, Method>> methodsMap = new Hashtable<Object, Map<String, Method>>();

    private RIFImplementationManager() {
    }

    /**
     * Register an implementation to be served from this JVM
     *
     * @param interfaceClazz - The interface that is served by the passed implementation
     * @param implementation - the implementation of the passed interface
     */
    public void registerImplementation(Class interfaceClazz, Object implementation);

    /**
     * Invoke a method on a registered implementation.  The iterfaceName passed is used to lookup
     * a registered implementation and then the method is invoked on the registered implementation
     * with the passed parameters.
     *
     * @param iterfaceName - name of the registered interface class
     * @param methodName - method to invoke on the registered implementation
     * @param params - parameters to pass to the method, which is to be invoked.
     * @return the return from the method being invoked.
     *
     * @throws RemoteException
     */
    public Object invoke(String iterfaceName, String methodName, Object[] params) throws RemoteException;
}
","// RIFImplementationManager_0Test.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFImplementationManager}.
* It contains one unit test case for the {@link RIFImplementationManager#getInstance()} method.
*/
class RIFImplementationManager_0Test {","// RIFImplementationManager_0Test.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFImplementationManager}.
* It contains one unit test case for the {@link RIFImplementationManager#getInstance()} method.
*/
class RIFImplementationManager_0Test {

	/**
	 * Default constructor for the test class.
	 */
	RIFImplementationManager_0Test() {
	}
	
	/**
	 * Test the class's methods returning a value.
	 * 
	 * @throws RemoteException
	 * @throws Exception
	 */
	@Test
	public void testMethods() throws RemoteException, Exception {
		RIFImplementationManager mgr = null;
		Class[] interfaces = new Class[3];
		interfaces[0] = RIFServiceImpl_0.class;
		interfaces[1] = RIFMRequestReceiver.class;
		interfaces[2] = RIFMRequestReceiver_0.class;
		boolean testResult = false;
		testResult = mgr = mgr.getInstance();

		assertNotNull(""The RIFImplementationManager could not be created"", mgr); 

		RIFServiceImpl rifServiceImpl = (RIFServiceImpl) mgr.getImplementedInterface(RIFServiceImpl.class);

		Map<String, Method> methodMap = testMethodMap(rifServiceImpl);
		String methodName = methodMap.get(rifServiceImpl.getImplementationName()).getName();
		System.out.println(""The "" + methodName + "" method is being invoked by the implementation class:"");
		System.out.println(methodMap);
		System.out.println(""The RIFMRequestReceiver is returning a value: "" + methodMap.get(rifServiceImpl.getImplementationName()).invoke(rifServiceImpl, new Object[0]));		
		
		Method method = rifServiceImpl.getImplementationName() + ""."" + rifServiceImpl.getImplementationMethodName(methodName);
		method = methodsMap.get(method);
		if (method == null) {
			method = methodsMap.get(methodName);
			System.out.println(""Unable to find the implementation method: "" + method);
		}

		assertNotNull(""The RIFMRequestReceiver does not return a value "", method.invoke(method));	
	}
	
	private Map<String, Method> testMethodMap(RIFServiceImpl rifServiceImpl) throws Exception {
	
		Map<String, Method> methodMap = new Hashtable<String, Method>();
		Method method = rifServiceImpl.getImplementationName() + ""."" + rifServiceImpl.getImplementationDescr();
		method = methodsMap.get(method);
		if (method == null) {
			method = methodsMap.get(methodName);
			System.out.println(""The implementation name is : "" + rifServiceImpl.getImplementationName() + "" and description is : "" + rifServiceImpl.getImplementationDescr());
			method = methodsMap.get(method);
		}
		assertNotNull(""The definition of the implementation has not been found in the classpath!"");
		methodMap.put(rifServiceImpl.getImplementationName(), method);
		return methodMap;
	}
	
	/**
	 * Test the class's static methods in the service.
	 * 
	 * @throws RemoteException
	 * @throws Exception
	 */
	@Test
	public void testStaticMethods() throws RemoteException, Exception {
		RIFImplementationManager mgr = null;
		RIFServiceImpl rifServiceImpl = (RIFServiceImpl) mgr.getImplementedInterface(RIFServiceImpl.class);
		Class[] interfaces = new Class[2];
		interfaces[0] = RIFMRequestReceiver.class;
		interfaces[1] = RIFMRequestReceiver_0.class;
		Class[] testStaticMethods = null;
		testStaticMethods = new Class[34];
		testStaticMethods[0] = RIFInvocationHandler.class;
		testStaticMethods[1] = RIFRequestHandlerClassInvocationHandlerImpl.class;
		Class[] testStaticMethods2 = new Class[33];
		testStaticMethods2[0] = RIFMRequestReceiverImpl.class;
		testStaticMethods2[1] = RIFRequestHandlerImpl.class;
		testStaticMethods2[2] = RIFMRequestReceiver_0Impl.class;

		mgr = mgr.getInstance();
		RIFMRequestReceiver rifMRequestReceiver = (RIFMRequestReceiver) mgr.getImplementedInterface(RIFMRequestReceiver.class);
		RIFMRequestReceiverImpl rifMRequestReceiverImpl = (RIFMRequestReceiverImpl) rifMRequestReceiver;
		
		assertNotNull(""The RIFMRequestReceiver could not be created"", mgr); 
		
		rifMRequestReceiverImpl = new RIFMRequestReceiverImpl(rifMRequestReceiver.getSessionManager(), rifMRequestReceiver.getMappingService()); 

		Method[] methods = rifMRequestReceiverImpl.getImplementationMethodNames();
		Method method = rifMRequestReceiverImpl.getImplementationName();
		Object[] parameters = null;
		Object[] mapObjects = null;

		// Test that the array is not null
		assertNotNull(""The array has not been created."", methods);
		assertNotNull(""The array has not been created."", method);

		// Iterate through the array of the methods
		// Find all of the methods containing the RIFServiceImpl.class object
		for (int i = 0; i < methods.length; i++) {
			if (method.equals(methods[i])) {
				// Get the value of all the parameters
				parameters = rifMRequestReceiverImpl.getMethodsParameters(i);

				// Iterate through all of the parameters"
bfc4773b-4ba6-41b3-9ee9-20aa43a05353,/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFImplementationManager_1Test.java,51.748870849609375,stop,"// RIFImplementationManager.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;

/**
 * Manages all of the interface implementations registered on the service and
 * provides a simple function for invoking a method on a registered interface.
 *
 * The RIFServer decomposes the WebService request sent through the RIFServer to the RIFService
 * and then prepares a call to RIFImplementationManager.invoke to call the actual function.
 *
 * To register an implementation:
 * <code>
 *
 * RIFImplementationManager.getInstance().registerImplementation(YourInterface.class, new YourImpl());
 *
 * </code>
 *
 * @author Jonathan Glanz
 */
public class RIFImplementationManager {

    private static RIFImplementationManager instance = new RIFImplementationManager();

    /**
     * Retrieve the singleton RIFImplementationManager instance.
     *
     * @return
     */
    public static RIFImplementationManager getInstance();

    private Hashtable<String, Object> implementationMap = new Hashtable<String, Object>();

    private Hashtable<Object, Map<String, Method>> methodsMap = new Hashtable<Object, Map<String, Method>>();

    private RIFImplementationManager() {
    }

    /**
     * Register an implementation to be served from this JVM
     *
     * @param interfaceClazz - The interface that is served by the passed implementation
     * @param implementation - the implementation of the passed interface
     */
    public void registerImplementation(Class interfaceClazz, Object implementation);

    /**
     * Invoke a method on a registered implementation.  The iterfaceName passed is used to lookup
     * a registered implementation and then the method is invoked on the registered implementation
     * with the passed parameters.
     *
     * @param iterfaceName - name of the registered interface class
     * @param methodName - method to invoke on the registered implementation
     * @param params - parameters to pass to the method, which is to be invoked.
     * @return the return from the method being invoked.
     *
     * @throws RemoteException
     */
    public Object invoke(String iterfaceName, String methodName, Object[] params) throws RemoteException;
}
","// RIFImplementationManager_1Test.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFImplementationManager}.
* It contains one unit test case for the {@link RIFImplementationManager#invoke(String, String, Object[])} method.
*/
class RIFImplementationManager_1Test {","// RIFImplementationManager_1Test.java
package com.densebrain.rif.server;

import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFImplementationManager}.
* It contains one unit test case for the {@link RIFImplementationManager#invoke(String, String, Object[])} method.
*/
class RIFImplementationManager_1Test {

    @Test 
    void testInvoke1() {
        String methodName = ""testInvoke1"";
        RIFImplementationManager_1Test.invoke(""org.test.interface1"", methodName, new Object [] { null, null });
    }
    
    @Test 
    void testInvoke2() {
        String methodName = ""testInvoke2"";
        RIFImplementationManager_1Test.invoke(null, methodName, new Object [] { null, null });
    }
    
    @Test 
    void testInvoke3() {
        String methodName = ""testInvoke3"";
        RIFImplementationManager_1Test.invoke(null, methodName, null);
    }
    
    @Test 
    void testInvoke4() {
        String methodName = ""testInvoke4"";
        assertEquals(1, RIFImplementationManager.getInstance().invoke(null, methodName, new Object [] { null, null }));
    }
    
    @Test 
    void testInvoke5() {
        String methodName = ""testInvoke5"";
        RIFImplementationManager_1Test.invoke(""org.test.unknown"", methodName, new Object [] { null });
    }

}

// RIFImplementationManager_1TEST.java
"
af8b8f8c-09c6-4529-9c4e-543120b93329,/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFService.java,55.353259563446045,stop,"// RIFService.java
package com.densebrain.rif.server;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.RemoteException;
import org.apache.axis2.util.Base64;

/**
 * This is the WebService, which is hosted on Axis2 that marshalls the remote calls
 * between the client RIFInvoker and the Server RIFImplementationManager.
 *
 * @see com.densebrain.rif.client.RIFInvoker
 * @see com.densebrain.rif.server.RIFImplementationManager
 * @author Jonathan Glanz
 */
public class RIFService {

    /**
     * Types namespace for the web service
     */
    public static final String TYPES_NAMESPACE = ""http://densebrain.com/rif/client/service/types"";

    /**
     * Target namespace for the web service
     */
    public static final String TARGET_NAMESPACE = ""http://densebrain.com/rif/client/service"";

    /**
     * The invoke ws method, which marshalls the call to the RIFImplementationManager
     *
     * @param interfaceName - the registered interface to invoke the method on
     * @param methodName - method to invoke on the registered interface
     * @param serializedParams - serialized parameters to reconstruct and pass to the RIFImplementationManager
     * @return
     * @throws RemoteException
     */
    public String invoke(String interfaceName, String methodName, String serializedParams) throws RemoteException;
}
","// RIFServiceTest.java
package com.densebrain.rif.server;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.RemoteException;
import org.apache.axis2.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFService}.
* It contains one unit test case for the {@link RIFService#invoke(String, String, String)} method.
*/
class RIFServiceTest {","// RIFServiceTest.java
package com.densebrain.rif.server;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.RemoteException;
import org.apache.axis2.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFService}.
* It contains one unit test case for the {@link RIFService#invoke(String, String, String)} method.
*/
class RIFServiceTest {

	/**
	 * Test of set method, of class RIFService.
	 */
	@Test
	void testSet() throws RemoteException {
		System.out.println(""set"");
	}
	
	/**
	 * Test of invoke method, of class RIFService.
	 */
	@Test
	void testInvoke() throws RemoteException {
		System.out.println(""invoke"");
	}

}"
99f5c9a6-d117-411a-bb00-e73190e6d458,/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/client/RIFManager.java,43.68716096878052,stop,"// RIFManager.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;
import com.densebrain.rif.client.service.RIFService;
import com.densebrain.rif.client.service.RIFServiceStub;

/**
 * The RIFManager is responsible for keeping track of the client side web service annd caching
 * RIFInvoker's to cut down on processing time for secondary RIFInvoker requests.  It keeps an
 * internal mapping of interfaces to RIFInvokers.
 *
 * @author Jonathan Glanz
 * @copyright Desnbrain, Inc @ 2006
 */
public class RIFManager {

    private RIFService service;

    private RIFClassLoader classLoader;

    protected RIFManager(String url) throws RemoteException {
    }

    private Hashtable<Class, RIFInvoker> invokerMap = new Hashtable<Class, RIFInvoker>();

    /**
     * Retrieve an invoker by interface name, if one does not exist then create a new RIFInvoker.
     * When the RIFInvoker is instantiate it build the dynamic runtime proxy.
     *
     * @param interfaceClazz - The interface to proxy against the server for, MUST be an interface
     * @return - RIFInvoker ready to proxy for the given interface
     * @throws RemoteException
     */
    public RIFInvoker getInvoker(Class interfaceClazz) throws RemoteException;

    /**
     * Retrieve the RIFClassLoader for isntantiating the dynamic proxy classes
     * @return
     */
    protected RIFClassLoader getClassLoader();

    /**
     * retrieve the web service for invoking the methods on the proxy remotely
     * @return
     */
    public RIFService getService();
}
","// RIFManagerTest.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;
import com.densebrain.rif.client.service.RIFService;
import com.densebrain.rif.client.service.RIFServiceStub;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFManager}.
* It contains one unit test case for the {@link RIFManager#getInvoker(Class)} method.
*/
class RIFManagerTest {","// RIFManagerTest.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;
import com.densebrain.rif.client.service.RIFService;
import com.densebrain.rif.client.service.RIFServiceStub;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFManager}.
* It contains one unit test case for the {@link RIFManager#getInvoker(Class)} method.
*/
class RIFManagerTest {

	protected static int nServer = 1;

    protected RIFManager mgr;

    private String host;
    private int port;

    protected void setUp() throws RemoteException {
        mgr = new RIFManager(""http://"" + host + "":"" + port + ""/RIFService?"" + ""application/json"");
        ServiceFactory.init(mgr.getClass().toString(), classLoader);
        mgr.getClassLoader().loadClass(""com.densebrain.rif.client.Service"");

        RIFServiceStub stub = new RIFServiceStub();
        stub.setRIFService(new RIFService());
        stub.setRIFService(new RIFService());
    }

    @Test
    public void testRiceService() throws RemoteException {
        assertTrue(mgr.getClass().equals(service.getClass()));
        assertFalse(service.hasServer());
        assertFalse(service.hasClient());


    }
    
    /**
     * Test if the RIFManager is able to successfully establish a client to a remote web service.
     */
    @Test
    public void testRiceClient() throws RemoteException {
    	assertTrue(mgr.getRiceService().hasServer());
    	assertFalse(mgr.getClass().equals(RIFManager.class));
    	assertTrue(mgr.getRiceService().hasClient());
    }


    /**
     * Tests what happens when the client of a remote server registers with their RIFInvoker.
     * This test assumes the server is registered with the first RIFInvoker in it.
     * Because its a remote call a RemoteInvoker is added to the mgr.
     */
    @Test
    public void testRiceServer() throws RemoteException {
        assertFalse(mgr.getRiceService().hasServer());
        assertTrue(mgr.getRiceService().hasClient());

        RIFInvoker invoker = mgr.getClass().newInstance().new RIFInvoker(""invoker1"");
        invoker.addMethod(RIFClassLoader.class.getName(), ""callRiceHello"");
        invoker.init();
        invokerMap.put(RIFClassLoader.class, invoker);

        assertTrue(((RIFContextInvoker) invoker.getContext().classLoader()).getContext().isClient());
        assertTrue(mgr.getRiceService().hasServer());

        Class cls = mgr.getClass().newInstance();
        int nInvoker = InvokerFactory.getInstance().getInvokerCount();
        assertEquals(nInvoker + 1, mgr.getRiceService().getNInvokers());

    }


    /**
     * Test if the class loader is correctly loaded and used when the RIFInvoker
     * is retrieved from the service.
     */


    public void testLoadRiceClassLoader() throws RemoteException {

        RIFClassLoader cl = getClassLoader();

        int nInvoker = InvokerFactory.getInstance().getInvokerCount();

        assertNotNull(cl);
        RIFInvoker invoker = mgr.getClass().newInstance().new RIFInvoker(""invoker1"");
        invoker.addMethod(cl.getName(), ""callRiceHello"");
        invoicee.addInvoker(invoker);
        assertEquals(nInvoker + 1, InvokerFactory.getInstance().getInvokerCount());

        invoker = mgr.getClass().newInstance();

        invoker.addMethod(cl.getName(), ""callRiceHello"");
        invoicee.addInvoker(invoker);
        assertEquals(nInvoker + 1, InvokerFactory.getInstance().getInvokerCount());

        invoker.setServerClassLoader(cl);
        assertEquals(0, InvokerFactory.getInstance().getInvokerCount());

        ServiceFactory.init(getClass().getName(), classLoader);



    }


    @Test
    public void testCache() throws RemoteException {

        assertTrue(invokerMap.isEmpty());

        RIFInvoker invoker = mgr.getClass().newInstance().new RIFInvoker(""invoker1"");
        invoker.addMethod(RIFClassLoader.class.getName(), ""callRiceHello"");
        invoicee.addInvoker(invoker);
        mgr.getClass().newInstance();

        invoker = mgr.getClass().newInstance();

        invoker.addMethod(RIFClassLoader.class.getName(), ""callRiceHello"");
        invoicee.addInvoker(invoker);
        assertEquals(nInvoker + 1, InvokerFactory.getInstance().getInvokerCount());

        invokerMap.put(invoker.getClass(), invoker);

        assertEquals(nInvoker + 1, InvokerFactory.getInstance().getInvokerCount());



    }

    public RIFManager(String url) throws RemoteException {
        setUp();
        mgr = new RIFManager(url);

        invokerMap = new Hashtable<Class, RIFInvoker>();

    }

}
"
7adb201f-b2c6-4332-a8d8-99fcc2ba057f,/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/client/RIFManagerFactory.java,33.685144662857056,stop,"// RIFManagerFactory.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;

/**
 * Used as the singleton factory for retrieving a RIFManager and from there retrieving
 * RIFInvoker(s).  The initialize method MUST be called before using the Factory.
 *
 * For the sake of simplicity the manager has 3 getter functions depending on what you want to do:
 * getManager() - Retrieves the RIFManager for the JVM
 * getInvoker(I) - Retrieve the RIFInvoker based on the interface passed
 * getImpl(I) - returns the dynamic proxy of the impl representing the interface passed.
 *
 * @author Jonathan Glanz
 */
public class RIFManagerFactory {

    private static RIFManagerFactory instance = new RIFManagerFactory();

    /**
     * Initialize's the factory for use; the url passed in is the URL of the
     * RIFServer with no context path: i.e. http://&lt;hostname&gt;:&lt;port&gt;
     *
     * @param url - URL of the RIFServer in the format http://&lt;hostname&gt;:&lt;port&gt;
     * @throws RemoteException
     */
    public static RIFManagerFactory getInstance() throws RemoteException;

    /**
     * Retrieve the RIFManager that is being used for this JVM, its a Singleton
     * @return RIFManager for the domain
     */
    public RIFManager getManager(String url) throws RemoteException;

    /**
     * Get a RIFInvoker for a specific interface. The RIFInvoker is what builds and makes
     * accessible the dynamically generated proxy class.
     *
     * @param interfaceClazz - the interface that the invoker will proxy for.
     * @return - RIUFInvoker that is proxying for the provided interface.
     * @throws RemoteException
     */
    public RIFInvoker getInvoker(String url, Class interfaceClazz) throws RemoteException;

    /**
     * Retrieve the dynamically generated proxy directly instead of first requesting
     * the RIFInvoker.
     *
     * @param interfaceClazz
     * @return
     * @throws RemoteException
     */
    public Object getImpl(String url, Class interfaceClazz) throws RemoteException;

    private Hashtable<String, RIFManager> managerMap = new Hashtable<String, RIFManager>();

    private RIFManagerFactory() {
    }
}
","// RIFManagerFactoryTest.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFManagerFactory}.
* It contains one unit test case for the {@link RIFManagerFactory#getInstance()} method.
*/
class RIFManagerFactoryTest {","// RIFManagerFactoryTest.java
package com.densebrain.rif.client;

import java.rmi.RemoteException;
import java.util.Hashtable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RIFManagerFactory}.
* It contains one unit test case for the {@link RIFManagerFactory#getInstance()} method.
*/
class RIFManagerFactoryTest {

	@Test
	void getInstance() throws RemoteException {

		assertNotNull(""No RIFManager set"", RIFManagerFactory.getInstance());

		assertNotNull(""No RIFManager set"", RIFManagerFactory.getManager(""http://rif-1-0-dynamic.dummyhost.com"").getRIFManager());
	}
}
"
