ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
b62843db-9cc7-4190-b034-db6f1dac2917,/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/util/LoggerFactory.java,29.8564350605011,stop,"// LoggerFactory.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;

/**
 * Factory f�r Log4J.
 *
 * @author Stefan Jockenh�vel
 * @see http://www.javaspecialists.eu/archive/Issue137.html
 * @see http://shemnon.com/speling/2006/12/dry-logs-there-are-better-ways.html
 *      --> comment
 */
public final class LoggerFactory {

    public static Logger make() {
        // Throwable t = new Throwable();
        // StackTraceElement directCaller = t.getStackTrace()[1];
        // return Logger.getLogger(directCaller.getClassName());
        final Thread t = Thread.currentThread();
        final StackTraceElement directCaller = t.getStackTrace()[2];
        final String className = directCaller.getClassName();
        return Logger.getLogger(className);
    }
}
","// LoggerFactoryTest.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LoggerFactory}.
* It contains one unit test case for the {@link LoggerFactory#make()} method.
*/
class LoggerFactoryTest {","// LoggerFactoryTest.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LoggerFactory}.
* It contains one unit test case for the {@link LoggerFactory#make()} method.
*/
class LoggerFactoryTest {


@Test
public void make() {
    final Logger logger = LoggerFactory.make();
    assertTrue(logger.isLoggable(Logger.INFO));
    final Logger logger2 = LoggerFactory.make();
    assertFalse(logger2.isLoggable(Logger.WARNING));
	
	/*log.setLevel(Level.INFO);
    assertEquals(log, LoggerFactory.make());*/
}
	
}
"
8c1f64aa-9fed-404e-bc32-4086b8f44e88,/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/model/ExplorerModelBuilder.java,61.389893531799316,stop,"// ExplorerModelBuilder.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;

public final class ExplorerModelBuilder {

    public ExplorerModel createNewExplorerModelWithFigure() {
        ExplorerModel explModl;
        ExplorerFigure explFig;
        explModl = new ExplorerModel();
        explFig = this.getExplorerFigureBuilder().createNewExplorerFigure();
        this.connect(explModl, explFig);
        return explModl;
    }
}
","// ExplorerModelBuilderTest.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplorerModelBuilder}.
* It contains one unit test case for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.
*/
class ExplorerModelBuilderTest {","// ExplorerModelBuilderTest.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplorerModelBuilder}.
* It contains one unit test case for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.
*/
class ExplorerModelBuilderTest {
UniverseImpl world;
	
	@Test
	public void createNewExplorerModelWithFigure_1() throws Exception {
		this.world = new UniverseImpl();
		ExplorerModel explModl = this.getModelBuilder().createNewExplorerModelWithFigure();
		ExplorerManager explMgr = explModl.getElements().getExplorerManagers().getExplorerManagers().size() > 1? new ExplorerManager(explModl.getElements().getExplorerManagers()) :null;
		assertEquals(explModl.getElements(), explMgr);
		ExplorerManagerBuilder explorerMgrBuilder = new ExplorerManagerBuilder().withElements(explModl.getElements());
	    ExplorerDrawingPanel dpg = new ExploreDrawingPanel();
        assertTrue(explModl.getElements()!= null);
        assertTrue(explModl.getElements().getExplorerManagers().getExplorerManagers().size() >= 1 );
        assertTrue(explModl.getElements().getExplorerManagers().getExplorerManagers().size() == explMgr.getElements().getExplorerManagers().size() + 1);
	}
	
	@Test
	public void createNewExplorerModelWithFigure_2() throws Exception {
		this.world = new UniverseImpl();
		ExplorerModel explModl = this.getModelBuilder().createNewExplorerModelWithFigure();
		ExplorerManager explMgr = explModl.getElements().getExplorerManagers();
		ExplorerManagerBuilder explorerMgrBuilder = new ExplorerManagerBuilder().withElements(explModl.getElements());
		ExplorerDrawingPanel dpg = new ExploreDrawingPanel();
        assertTrue(explModl.getElements().getExplorerManagers()!= null);
		assertTrue(explModl.getElements().getExplorerManagers().size() == explMgr.getElements().getExplorerManagers().size() + 1);
	}
	
	private ExplorerModelBuilder getModelBuilder() {
		return new ExplorerModelBuilder();
	}

	private ExplorerManagerBuilder getExplorerManagerBuilder() {
		return new ExplorerManagerBuilder();
	}
	
}
"
