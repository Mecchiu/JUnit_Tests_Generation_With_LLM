[
{
    "choices": [
        {
            "text": "/**\n\t\t * Method under test for {@link Loader#loadDataWithSql()} method.\n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n        public void loadDataWithSql(){\n\t\t\tloadDataWithSql();\n            \n\t\t}\n\n\t}\n// LoaderTest\n//End class\n\n//LoaderTest.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void testLoadDataWithSql() throws HibernateException {\n        final Query query =\n            LoaderUtil.loadDataWithSql(new Object[0]);\n        assertEquals(0, query.size());\n    }\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public void testLoadData() {\n        final List test_list = new ArrayList();\n        test_list.add(\"John\");\n        test_list.add(\"Mary\");\n        test_list = LoaderUtil.loadDataWithSql(test_list);\n        assertEquals(\"Mary has been deleted with HBase\", 3, test_list.size());\n    }\n\n    /**\n     * \u67e5\u8be2\u6216\u8005\u6709\u5173\u7684\u5b57\u6bb5\n     */\n\tpublic void testLoadOrSaveSomeField(final Object[] test_obj) {\n\t\tfinal List test_obj_list = new ArrayList();\n\t\ttest_obj_list.add(new String(\"John\"));\n\t\ttest_obj_list.add(new String(\"Mary\"));\n\t\ttest_obj_list = LoaderUtil.loadDataWithSql(test_obj_list);\n\t\ttest_obj_list = LoaderUtil.loadOrSaveSomeFieldWithList(test_obj_list, \"c\", \"d\");\n\t\tassertEquals(\"Mary has been deleted with HBase\", 3, test_obj_list.size());\n\n\t\tfinal List all_test_obj_list = LoaderUtil.loadDataWithSql(new HashMap());\n\t\tassertEquals(\"Mary has been deleted with HBase\", 2, all_test_obj_list.size());\n\t}\n\n    private List loadAndLoadObjectList(final Object [][] testobj) {\n        Query query = getHibernateSession().createQuery(\"from org.hibernate.test.Person p where p.age = 7\");\n        int i = 0;\n        for (final Object [] testobj_0 : testobj) {\n            query.setInteger(\"c\", i);\n            query.setString(\"d\", testobj_0[0].toString());\n            List testobj_1 = query.getResultList();\n            if (0.0f == testobj_1.get(0)) {\n                checkNull(testobj_1);\n            } else {\n                checkValue(testobj_1);\n            }\n            if (0.0f == testobj_1.get(1)) {\n                checkNull(testobj_1);\n            } else {\n                checkValue(testobj_1);\n            }\n            testi0++;\n        }\n        return query.getResultList();\n    }\n\n    private void updateQueryValue(final String sql, final String parameter, final String value) {\n        Query query = getHibernateSession().createQuery(sql);\n        query.setString(parameter, value);\n    }\n\n    private void checkValue(final List test_list) {\n        try {\n            Query query = getHibernateSession().createQuery(\"select count (*) from Person\");\n            int count = 0;\n            count = ((Integer) query.getOne()).intValue();\n            if (test_list.size() == size(test_list)) {\n                assertEquals(true, count == 1);\n            } else {\n                if (test_list.size() == 0) {\n                    assertTrue(\"\", count == 1 && test_list.size() == 1);\n                } else {\n                    assertTrue(\"\", count == 0);\n                }\n            }\n        } catch (HibernateException e) {\n            throw (RuntimeException) getClass().getResource(\"/hibernate/errors/400.xml\").getElement(0).\n                    getChildren().get(1).getChild(\"message\").getText().getHTML();\n        }\n    }\n\n    private String size(List<Object []> test_list) {\n        return test_list.size();\n    }\n\n    public HashMap getHibernateSession() {\n        final HibernateSession session = HibernateUtil.getThreadLocalSession();\n        final Session getSession = (Session)session;\n        return HibernateUtil.getUserSession(getSession);\n    }\n\n    private void checkNull(final List<Object> list) {\n        try {\n            Query query = getHibernateSession().createQuery(\"from Person p where p.c =?\", Object.class);\n        } catch (Exception e) {\n            assertNull(e);\n        }\n    }\n\n    private void checkHibObject(final Object obj) throws Exception {\n        final HashMap map = new HashMap();\n        map.put(\"field\", obj);\n        final Session session = HibernateUtil.getThreadLocalSession();\n        final Object result = session.createQuery(\"select p from Person p \" + \" where p.c = $1\", Map.class)\n               .setString(\"c\", map).setCacheable(true).setResultMap(null).setCacheStore(false).\n                executeUpdate();\n        assertNotNull(result);\n        assertFalse(obj.isReadOnly());\n        assertEquals(obj.getClass().getName(), result.getClass().getName());\n    }\n\n    private Object[] list(final Object [][] testobj) {\n        final Object[] test_obj = new Object[testobj.length];\n        Iterator iterator = testobj.length > 0? testobj[0].length : 0;\n        if (testobj.length > 0) {\n            try {\n                while (iterator.hasNext()) {\n                    List test_obj_1 = (List) iterator.next();\n                    test_obj[iterator.index()] = test_obj_1;\n                }\n            } catch (HibernateException e) {\n                throw e;\n            }\n        }\n        return test_obj;\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final String HQL = \"select a from AA a\";\n    \n    @Test\n    void shouldLoadOneData() throws ParseException, DocumentException{\n\tDocument document = getDocumentFor(\"data/singleLineTable.xml\");\n\tList listOfTestData = getTestData(document);\n\t\n\tIterator dataIterator = listOfTestData.iterator();\n\t\n\tSimpleDateFormat df = new SimpleDateFormat(\"yyy-MM-dd\");\n\tObject obj = dataIterator.next();\n\t\t\n\t// assertResultValues(listOfTestData, obj, \"2013-12-12\");\n\tassertEquals(df.parse(\"2013-12-12\"), obj);\n\t\n    }\n    \n    @Test\n    void shouldLoadTwoData() throws ParseException, DocumentException{\n\tDocument document = getDocumentFor(\"data/twoLineTable.xml\");\n\tList listOfTestData = getTestData(document);\n\t\t\n\tIterator dataIterator = listOfTestData.iterator();\n\t\n\tSimpleDateFormat df = new SimpleDateFormat(\"yyy-MM-dd\");\n\tObject obj = dataIterator.next();\n\t\t\n\t// assertResultValues(listOfTestData, obj, \"2013-12-15\");\n\tassertEquals(df.parse(\"2013-12-15\"), obj);\n\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-24\"), obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-29\"), obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-16\"), obj);\n\t\t\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-30\"), obj);\n}\n\n// HibernatorSessionTestCase.java\nclass HibernatorSessionTestCase extends JdbcTest {\n    \n    private Session session;\n    \n    HibernatorSessionTestCase(Class<?> arg0) {\n        super (arg0);\n        \n    }\n\t\n    protected void setUp() throws Exception {\n\tsuper.setUp();\n\t\n\tsession = openSession();\n\t\n}\n    \n    protected void tearDown() throws Exception {\n\tif (!session.isConnected()) {\n\t    session.close();\n\t}\n    \n\tsuper.tearDown();  \n    }\n\t\n    List queryList(String queryString) throws HibernateException, DocumentException {\n\tsession.beginTransaction();\n\tList listOfResults = session\n\t\t.createQuery(queryString)\n\t\t.list();\n\tsession.getTransaction().commit();\n\treturn listOfResults;\n\t\n    }\n    \n    /**\n     * Returns Document instance with two Data records of\n     * an empty Data table containing the first record\n     * using a XML file.\n     * @return Document\n     * @throws DocumentException\n     */\n    private Document getDocumentFor(String pFileName) throws DocumentException {\n\tSAXReader reader = new SAXReader();  // new DocumentBuilderFactory().newSAXParser()...\n\t\n\tDocument document;\n\ttry {\n\t    File f = new File(pFileName);\n\t    if (f.exists()) {\n\t\tdocument = reader.read(f);\n\t    } else {\n\t\tSystem.err.println(\"Not File with file-Name \" + pFileName + \" exists!\");\n\t\tthrow new DocumentException(\"Not File with file-Name \" + pFileName + \" exists!\");\n\t    }\n\t} catch (Throwable e) {\n\t    System.err.println(\"Error getting Document from file-Name \" + pFileName + \"!\");\n\t    e.printStackTrace();\n\t    throw new DocumentException(\"Error getting Document from file-Name \" + pFileName)\n\t\t.append(e.getMessage());\n\t}\n\t\n\treturn document;\n    } \n\n}\n\n// Tester.java\n/**\n * This class contains one unit test class for {@link Loader#loadDataWithSql()}.\n * It contains one unit test case for the {@link Loader#loadDataWithSql\n * method}.\n*/\nclass LoaderTest1 {\n\n    @Test\n    void shouldLoadOneData() throws ParseException, DocumentException{\n\tDocument document = getDocumentFor(\"data/singleLineTable.xml\");\n\tList listOfTestData = getTestData(document);\n\t\n\tIterator dataIterator = listOfTestData.iterator();\n\t\n\tSimpleDateFormat df = new SimpleDateFormat(\"yyy-MM-dd\");\n\tObject obj = dataIterator.next();\n\t\t\n\t// assertResultValues(listOfTestData, obj, \"2013-12-12\");\n\tassertEquals(df.parse(\"2013-12-12\"), obj);\n\t\n    }\n    \n    @Test\n    void shouldLoadTwoData() throws ParseException, DocumentException{\n\tDocument document = getDocumentFor(\"data/twoLineTable.xml\");\n\tList listOfTestData = getTestData(document);\n\t\n\tIterator dataIterator = listOfTestData.iterator();\n\t\n\tSimpleDateFormat df = new SimpleDateFormat(\"yyy-MM-dd\");\n\tObject obj = dataIterator.next();\n\t\t\n\t// assertResultValues(listOfTestData, obj, \"2013-12-15\");\n\tassertEquals(df.parse(\"2013-12-15\"), obj);\n\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-24\"), obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertNull(obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-29\"), obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-16\"), obj);\n\t\t\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertNull(obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertNull(obj);\n\t\n\tobj = dataIterator.next(); // should not return anything\n\tassertEquals(df.parse(\"2013-12-30\"), obj);\n\t\t\t\n    }\n    \n    private List getTestData(Document document) throws HibernateException{\n\t\n\t/*\n      List listOfData = queryList(HQL + \" FROM \" + document + \" ORDER BY data\");\n      Collection collection = listOfData.size();\n      Object[] objects = listOfData.toArray(); // TODO: replace with array/iterator...\n      \n\tassertEquals(collection, 6); \n\t*/",
            "finish_reason": "length"
        },
        {
            "text": "\n\tHashMap<String, File> fileSet = new HashMap<>();\n\tString path = \"test\"+File.separator+\"src\"+File.separator+\"main\"+File.separator+\"resources\"+File.separator+\"TestData\";\n\tString sql = \"/jdbc/TestDataDB\";\n    String database =\"MYSQL\";\n    \n    @Test\n    public void test1() throws Exception{\n    \ttest(\"MYSQL  \", \"TestDataDB\", \"mysql/TESTDB\");\n    }\n\n    @Test\n    public void test2() throws Exception{\n    \ttest(\"MSSQL \", \"TestDataDB\", \"s1cs/test\");\n    }\n    \n    @Test\n    public void test3() throws Exception{\n    \ttest(\"MSSQL\", \"TestDataDB\", \"s1cs/test\");\n    }\n    \n    @Test\n    public void test4() throws Exception{\n    \ttest(\"MSSQL\", \"TestDataDB\", \"mysql/test\");\n    }\n\n\t\t/**\n\t\t* LoaderTest.test is not exist.\n\t\t* The test cases of method  {@link Loader#test(String)})  must be executed  by the calling program.\n\t\t*/\n\t\t@Test\n\t\tpublic void test5() throws Exception{\n\t\t\tFile inputFile = new File(path + File.separator+\"input\");\n\t\t\tif(! inputFile.exists())\n\t\t\t\tthrow new Exception(\"No file: \"+inputFile+\", it must be exist.\");\n\t\t\tList list = new ArrayList();\n\t\t\tFile [] listTest = new File[1];\n\t\t\tlistTest[0] = inputFile;\n\t\t\tString sqlString = \"/jdbc/TestDataDB\";\n\t\t\tloadTest(sqlString, \"TestDataDB\", \"\", \"SELECT * FROM TestData\");\n\t\t\tlist = test(sqlString, \"TestDataDB\", \"\", \"\");\n\t\t\tassertEquals((Integer) 0, list.size());\n\t\t}\n\t\t/**\n\t\t* LoaderTest.test is not exist.\n\t\t* The test cases of method  {@link Loader#test(String)})  must be executed  by the calling program.\n\t\t*/\n\t\t@Test\n\t\tpublic void test6() throws Exception{\n\t\t\tList listTest = new ArrayList();\n\t\t\tloadTest(\"mysql/TestDataDB\", \"test\", \"\", \"SELECT * FROM TestData\");\n\t\t\tgetList(\"mysql/TestDataDB\", fileSet)\n\t\t\t\t\t.stream()\n\t\t\t\t\t.forEach(e -> {\n\t\t\t\t\t\tFile f = new File(path + File.separator+e.getFileName() + File.separator+\"MySQL-Test1.xml\");\n\t\t\t\t\t\tFileList f1 = new com.hf.sfm.file.FileList(f);\n\t\t\t\t\t\tlistTest.add(f1);\n\t\t\t\t\t});\n\t\t\tIterator<Object> it = listTest.iterator();\n\t\t\twhile(it.hasNext()){\n\t\t\t\tFile f = (File)it.next();\n\t\t\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\t\tDocument doc = SAXReader.read(fis);\n\t\t\t\tfis.close();\n\t\t\t\tList<Element> selectList = doc.selectNodes(\"/TestData/MYSQL/Test1/MYSQL-Test1Doc/MYSQLSQL\");\n\t\t\t\tfileSet.get(f.getName()).getParentFile().mkdirs();\n\t\t\t\tfileSet.get(f.getName()).write(doc);\n\t\t\t\tList selectListValue = new ArrayList();\n\t\t\t\tselectListValue.addAll(selectList);\n\t\t\t\tassertEquals(selectListValue.size(), 1);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t* LoaderTest.test is not exist.\n\t\t* The test cases of method  {@link Loader#test(List)})  must be executed  by the calling program.\n\t\t*/\n\t\t@Test\n\t\tpublic void test7() throws Exception{\n\t\t\tList testList = new ArrayList();\n\t\t\tList listTest = new ArrayList();\n\t\t\tloadTest(sql, database, \"\", \"SELECT test_data_s\");\n\t\t\tparseResult(sql);\n\t\t\ttest(sql, database, \"\", \"\");\n\t\t\tparseResult(sql);\n\t\t\tSystem.out.println(listTest);\n\t\t\tIterator<Object> it1 = listTest.iterator();\n\t\t\twhile(it1.hasNext()){\n\t\t\t\tFile file = (File)it1.next();\n\t\t\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\t\tDocument doc = SAXReader.read(fis);\n\t\t\t\tfis.close();\n\t\t\t\tList<Element> selectList = doc.selectNodes(\"/TestData/MYSQL/Test1/MYSQLSQL/MYSQL-Test1Doc/MYSQLSQL\");\n\t\t\t\tfileSet.get(file.getName()).getParentFile().mkdirs();\n\t\t\t\tfileSet.get(file.getName()).write(doc);\n\t\t\t\tList selectListValue = new ArrayList();\n\t\t\t\tselectListValue.addAll(selectList);\n\t\t\t\tSystem.out.println((\"getList() return \"+selectTestListValue).\n\t\t\t\t\t\treplace(\"{\", \"\").replace(\"}\", \"\"));\n\t\t\t\tif(selectListValue.size() > 50)\n\t\t\t\t\tSystem.out.print(\"\\n\" + testList.size() +\":\");\n\t\t\t\tIterator<Object> it2 = listTest.iterator();\n\t\t\t\tSystem.out.print(\"\\n\");\n\t\t\t\twhile(it2.hasNext())\n\t\t\t\t\ttestList.add((Object)it2.next());\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(testList);\n\t\t}\n\t\t\n\t\t/**\n\t\t* test is not exist.\n\t\t* The test cases of method  {@link Loader#test(String)})  must be executed  by the calling program.\n\t\t*/\n\t\tprivate List test(String sqlTest, String databaseTest, String sqlInput) throws java.sql.SQLException{\n\t\t\tFile inputFile = new File(path + File.separator+\"input\");\n\t\t\tif(! inputFile.exists())\n\t\t\t\tthrow new SqlException(\"No file: \"+inputFile+\", it must be exist.\");\n\t\t\tgetList(sqlTest, fileSet)\n\t\t\t\t\t.stream()\n\t\t\t\t\t.forEach(e -> {\n\t\t\t\t\t\tFile f = new File(path + File.separator+e.getFileName() + File.separator+\"MySQL-Test1.xml\");\n\t\t\t\t\t\tFileList f1 = new com.hf.sfm.file.FileList(f);\n\t\t\t\t\t\tinputFile.mkdirs();\n\t\t\t\t\t\tcopyFile(inputFile, f1.getFilePath());\n\t\t\t\t\t\tSAXReader.read(f1.getFilePath()).\n\t\t\t\t\t\textractAnnotations();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tgetValue(sqlTest, f1);\n\t\t\t\t\t\t\tinputFile.delete();\n\t\t\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\t\t\t//e2.print",
            "finish_reason": "length"
        },
        {
            "text": "@Test\n\t\tpublic void test01() {\n\t\t\t\t// \u83b7\u53d6\u65e5\u6240\u5bfc\u5165\u7684\u6587\u6863\n\t\t\t\tFile f = new File(\"./data/news/\");\n\t\t\t\tList result = null;\n\t\t\t\tresult = Loader.loadDataWithSql();\n\t\t\t\tString text = \"\u4eca\u5929\u4e0b\u5929\u7684\u540d\u5b57\u4ec5\u5728\u53e6\u4e00\u4e2a\u65e5\u4e4b\u524d\"\n\t\t\t.replace(\"\", \"\");// \u83b7\u53d6\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\n//\t\t\t\tSystem.out.println(text);\n//\t\t\t\tSystem.out.println(result);\n//\t\t\t\tassertNotNull(result);\n//\t\t\t\tassertNotNull(text);\n//\t\t\t\tassertNotNull(text);\n\n\t\t}\n\n  @Test\n  public void test02() {\n      // \u5982\u679cxml\u6587\u4ef6\u540d\uff0c\u4e0d\u5b58\u5728\u8fc7\u8bf7\u6c42\u6570\u636e\n  List resultList = null;\n  // \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684xml\u6587\u4ef6\u5217\u8868\n  resultList = Loader\n .loadDataWithSql(\"./testdata/test-data/data-test02.xml\");\n  }\n\n  /**\n   * HibernateUtil.getSession\n   */\n  @Test\n  public void test03() {\n  Session session = null;\n  try {\n\n  SessionFactory sessionFactory = HibernateUtil.getSessionFactory();\n  session = sessionFactory.openSession();\n  try\n  {\n    session.begin();\n  }\n  catch (HibernateException ex)\n  {\n    fail(ex.toString());\n  }\n  try {\n    List list\n    = session.createCriteria(List.class).list();\n  }\n  catch (HibernateException e)\n  {\n    fail(e.toString());\n  }\n\n  }catch (Exception e) {\n    fail(e.toString());\n\n  }\n\n  finally {\n    session.close();\n  }\n\n  }\n\n  /**\n   * String format\n   */\n  @Test\n  public void test04() {\n  String text = null;\n  try {\n\n  text = Loader\n .load(\"./testdata/test-data/data-test04.xml\");\n  } catch (Exception ex)\n  {\n    fail(ex.toString());\n  }\n  assertNotNull(text);\n  }\n\n  /**\n   * \u83b7\u53d6\u5206\u9875\u67e5\u8be2\u6570\u636e\n   */\n  @Test\n  public void test05() {\n  List list = null;\n  try {\n\n  list = Loader\n .load(new ArrayList(), \"hbm.xml\");\n\n  } catch (Exception ex) {\n    fail(ex.toString());\n  }\n  assertNotNull(list);\n  }\n\n\n\t\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tpublic void test_loadDataWithSql(){\n\t\t// 1. Create test data\n\t\tList<HashMap<String,Object>> list = new ArrayList<HashMap<String,Object>>();\n//\t\tfor (int i = 1; i <= 100; i++) {\n\t\tfor (int i = 1; i <= 100; i++) {\n\t\t\tHashMap<String,Object> map = new HashMap<String,Object>();\n\t\t\tmap.put(\"id\", i);\n            map.put(\"name\", i);\n            list.add(map);\n\t\t}\n//        assertEquals(\"list\"+i+\" has not matching entries.\",list.size(),i);\n\t}\n\t\n\t@Test\n\tpublic void test_loadUser(){\n\t\tString fileName = \"loadUser.xml\";\n\t\tFile file = new File(fileName);\n\t\tFile[] fileList = new File[1];\n\t\tfileList[0] = file;\n\t\tTestUtil.createDataXmlFile(file, \"testUser\");\n\t\t\n\t\tUser user = User.get(\"testUser\") ;\n\t\tassertSame(user, user.findUser(\"testUser\"));\n\t\t\n\t\t\n\t}\n\t// Test for the query.\n\t@Test\n\tpublic void test_HibernateSearchDirty() throws ParseException, DocumentException, HibernateException, InterruptedException{\n\t\tString fileName = \"HibernateSearchDirty.xml\";\n\t\tFile file = new File(fileName);\n\t\tHibernateUtil.populateAll(getSessionFactory());\n\t\tSession s = getSessionFactory().openSession();\n\t\tDocument document = SAXReader.read(file);\n\t\ts.beginTransaction();\n\t\tList<HashMap<String,Object>> list = new ArrayList<HashMap<String,Object>>();\n\t\tfor (Iterator itr = document.elementIterator(); itr.hasNext();) {\n\t\t\tElement e = (Element) itr.next();\n\t\t\tHashMap<String,Object> map = new HashMap<String,Object>();\n\t\t\tmap.put(\"id\", e.attribute(\"id\").getText());\n            map.put(\"name\", e.attribute(\"name\").getText());\n\t\t\ts.update(map);\n\t\t\t// map.put(\"id\", IntegerUtils.toString(map.get(\"id\")));\n\t\t\t// map.put(\"name\", map.get(\"name\"));\n\t\t\tlist.add(map);\n\t\t}\n\t\ts.flush();\n\t\ts.getTransaction().commit();\n\t\ts.clear();\n\t\ts.close();\n\t\tList<HashMap<String,Object>> readList = (List<HashMap<String,Object>>) SessionFactoryUtils.getSession().get(SESSION_FACTORY,List.class);\n\t\tassertEquals(\"HibernateCache Dirty\",readList.get(0).get(\"id\"));\n\t}\n}\n// LoaderTest class ends here.\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * @param testSuite {@link LoaderTest} is a test suite.\n\t */\n\t\n\tpublic LoaderTest() {\n\t\t//\n\t}\n\t\n\t/**\n\t* Verify some of method {@link Loader#loadDataWithSql()} works.\n\t* It is the case for one or several columns with some\n\t* values and some values with nulls.\n\t*/\n\t\n\t@Test\n\tpublic void loadDataWithSql() {\n\t\t\n\t\t// load some data\n\t\t\n\t\tString fileDir = Paths.DB.getDir();\n\t\tFile file = new File(fileDir, \"data_1.txt\");\n\t\tSystem.err.println(\"loading data\");\n\t\t\n\t\tloadDataWithSql(file);\n\t\t\n\t\tfile.delete();\n\t}\n\t\n\t/**\n\t* Verify loading data from xml works.\n\t*/\n\t\n\t@Test\n\tpublic void loadDataWithSqlXM() {\n\t\t\n\t\t// load some data\n\t\tIterable<String> data = Iterables.transform(Paths.DB.getData(), new Function<String, String>() {\n\t\t\tpublic String apply(String input) {\n\t\t\t\treturn \"<data>\" + input + \"</data>\";\n\t\t\t}\n\t\t});\n\n        SAXReader reader = new SAXReader();\n        Document doc = reader.read(new File(Files.DATA_DIR));\n        System.err.println(doc);\n\t\n        List<String> keys = new ArrayList<String>();\n\t\tfor (int i = 0; i < doc.attributeCount(); i++) {\n\t\t\tElement element = doc.element(i);\n\t\t\tString key = (String)element.attribute(\"key\");\n            keys.add(key);\n        }\n\n        System.err.println(\"keys: \" + keys);\n\n        // iterate column values and verify. \n        Iterator<String> it = keys.iterator();\n        List<String> list = new ArrayList<String>();\n        while (it.hasNext()) {\n\t\t\tString x = it.next();\n\t\t\tString actual = getString(doc.element(i, x));\n\t\t\tSystem.err.print(x + \" \" + actual);\n\t\t\tit.remove();\n\t\t\tSystem.err.println(\"\");\n\t\t\tlist.add(actual);\n            if (list.size() < 4) {\n                break;\n            }\n        }\n\n        assertTrue(\"list of data size is not correct\", list.size() < 4);\n    }\n\t\n\t/**\n\t* Load a file which should contain some text data to test query results.\n\t*/\n\t\n    private List<String> loadData(String filename) {\n\n        Query results = null;\n      // results = session.createQuery(\"SELECT e FROM Employee e WHERE e.firstName = 'Test'\");\n       results = session.createQuery(\"SELECT e FROM Employee e WHERE e.firstName IN ('Test')\");\n       List<String> list = new ArrayList<String>();\n    \tIterator<String> it = results.iterator();\n    \t//System.err.println(\"1\");\n    \twhile (it.hasNext()) {\n    \t\tString val = it.next();\n        list.add(val);\n    \t}\n\n        System.err.println(\"2\");\n        return list;\n    }\n\t\n    private String getString(Element e) {\n        String val = \"\" + e.attribute(\"value\");\n        return val;\n    }\n\t\n    private String getStringForList(List<?> values) {\n        StringBuilder sb = new StringBuilder();\n        Iterator<?> it = values.iterator();\n        while (it.hasNext()) {\n\t\t\tsb.append(it.next());\n\t\t\tsb.append(\",\");\n\t\t}\n        return sb.toString();\n    }\n\t\n    /**\n\t* Verify loading data does not contains null value.\n\t*/\n\t\n\t@Test\n\tpublic void failMissingData() { // TODO: remove this\n\t\t\n\t\tFile file = new File(Files.DATA_DIR);\n\t\tList<String> data = loadData(file);\n\t\t\n\t\tSystem.err.println(\"data size: \" + data.size());\n\t\t\n\t\tList<String> emptyData = new ArrayList<String>();\n\t\tassertTrue(data.indexOf(emptyData) == -1);\n\t}\n}// end LoaderTest.java",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * <p>\n\t * Loads a XML test file with data used in the {@link LoaderTest} class.\n\t * </p>\n\t */\n    @Test\n    void testLoadDataWithXml() throws ParseException {\n        Session session = HibernateTemplate.startSession();\n        // Create session\n        String sql = \"create table foo (\" +\n                    \"id integer primary key auto_increment, name integer, val1 double)\" +\n                \"ENGINE=\" +\n                \"\" ;\n        boolean res = session.createSQL(sql).executeUpdate();\n        assertTrue(res);\n        \n        session.close();\n    }\n\t\n\t/**\n\t * <p>\n\t * Loads a SQL test file with data used in the {@link LoaderTest} class.\n\t * </p>\n\t */\n    @Test\n    void testLoadDataWithSql() throws ParseException {\n        Session session = HibernateTemplate.startSession();\n        // create session\n        String sql = \"create table foo (\" +\n                    \"id integer primary key auto_increment, name integer, val1 double)\" +\n                \"ENGINE=\" +\n                \"\" ;\n        Query query = session.createSQL(sql);\n        assertNotNull(query);\n        \n        // Inserting query\n        Query insert = queryService(session).createQuery(\n                \"insert into foo values (:id, :name, :val1)\");\n        insert.setString(\"engine\", \"myengine\");\n        insert.setInteger(\"id\", 123456789.0d);\n        insert.setText(\"Name\", \"Michael\");\n        insert.execute();\n        \n        // Selecting result\n        List result = queryService(session).createSQL(\" select foo.id,foo.name,foo.val1 from foo\").list();\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        \n        Iterator it = result.iterator();\n        Object o;\n        // Iterator through result values\n        while (it.hasNext()) {\n           o = it.next();\n           System.out.println(o.toString());\n        }\n        \n        // Inserting query as result\n        queryService(session).createSQL(\" insert into foo values (:id, :name, :val1)\");\n        \n        // Selecting result\n        List result1 = queryService(session).createSQL(\" select foo.id,foo.name,foo.val1 from foo\").list();\n        assertNotNull(result1);\n        assertEquals(1, result1.size());\n        \n        Iterator it1 = result1.iterator();\n        o = it1.next();\n        System.out.println(o.toString());\n        \n        assertEquals(0, it1.next().getInteger());\n        assertEquals(123456789.0d, it1.next().getDouble());\n                            \n        queryService(session).createSQL(\" insert into foo values (:id, :name, :val1)\");\n        \n        // Selecting result\n        List result2 = queryService(session).createSQL(\" select foo.id,foo.name,foo.val1 from foo\").list();\n        assertNotNull(result2);\n        assertEquals(2, result2.size());\n        \n        Iterator it2 = result2.iterator();\n        o = it2.next();\n        System.out.println(o.toString());\n        \n        assertEquals(2*123456789.0d, it2.next().getDouble());\n        assertEquals(456, it2.next().getInteger());\n        \n        queryService(session).createSQL(\" insert into foo values (:id, :name, :val1)\");\n        \n        // Selecting result\n        List result = queryService(session).createSQL(\n                    \" select foo.id, foo.name, foo.val1 from foo\").list();\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        \n        it = result.iterator();\n        o = it.next();\n        System.out.println(o.toString());\n        \n        assertEquals(987451234, it.next().getInteger());\n        assertEquals(45678, it.next().getDouble());\n        \n        queryService(session).close();\n    }\n\t\n\t/**\n\t * @param sql\n\t * @return\n\t */\n\tprivate Query queryService(Session session) {\n\t\treturn session.getNamedQuery(\"query\");\n\t}\n\t\n\t/**\n\t * Parses and returns a XML String in a list of Strings.\n\t * \n\t * @param xml\n\t * @return\n\t */\n\tprivate List<String> xmlToLines(String xml) {\n\t\tSAXReader reader = new SAXReader();\n\t\t  try {\n\t\t\t  Document document = reader.read(new File(xml));\n\t\t\t  return document.selectNodes(\"//*[@id=true]//*\");\n\t\t  } catch (DocumentException ex) {\n\t\t\t  ex.printStackTrace();\n\t\t\t  return new ArrayList<String>();\n\t\t  }  \n\t}\n\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n  /**\n   * Test method for {@link Loader#loadDataWithSql()}.\n   * @throws Exception -\n   */\n  @Test\n  void testLoadDataWithSql()throws Exception{\n    Session session = null;\n    List<String> list = new ArrayList<String>();\n    File f = new File(\"../data/test/sql/\");\n    SAXReader reader = new SAXReader();\n    Document doc = reader.read(f);\n    session = HibernateUtil.getSessionFactory().openSession();\n    Query query = session.createQuery( \"select a.name from Account a\" );\n    Iterator iterator = query.getResultList().iterator();\n    String s = \"\";\n    while (iterator.hasNext()) {\n      s = (String) iterator.next();\n      list.add(s);\t\n      }\n    session.clear();\n    assertEquals( list[0], \"1-\u666e\u5b81\" ); // \u53c2\u6570\u4e3atrue\u8868\u8fbe\u5f0f\uff0c\u8fd9\u91cc\u5ffd\u7565\u5176\u4e2d\u6709\u81ea\u5b9a\u4e49\u7684\u4fe1\u606f\u3002\n    assertEquals( list.get(2), \"\u4f0a\u8f1d\u8d35\" ); // \u4fe1\u606f\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u5177\u4f53\u7684\u4fe1\u606f\u3002\n    session.close();\n    }\n  }\n\n/**\n* Test method for {@link Loader#loadDataWithSql(String)}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql(String)}\n* method.\n* @throws Exception\n*/\n@Test\npublic void testToLoadDataFromFile() throws ParseException, HibernateException, DocumentException,\n        UnsupportedEncodingException {\n    Session session = null;\n    List list = new ArrayList();\n    File f = new File(\"../data/test/sql/mysql\");\n    SAXReader reader = new SAXReader();\n    Document doc = reader.read(f);\n    session = HibernateUtil.getSessionFactory().openSession();\n    Query query = session.createQuery(\"from Account a\");\n    Query query2 = session.createQuery(\"from Account a as a where a.name like :name\");\n    query = query.getNamedQuery(\"matchAccount\");\n    Iterator iterator = query.iterate();\n    int i = 0;\n    while (iterator.hasNext()) {\n      Element elements = (Element) iterator.next();\n      String id = elements.attributeValue(\"id\");\n      String name = elements.attributeValue(\"name\");\n      list.add(id + \"-\" + name);\n      i ++;\n      \n      }\n    \n      session.clear();\n    }\n  }\n  /**\n* Test method for {@link Loader#loadDataWithSql(int)}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql(int) }\n* method.\n* @throws ParseException\n* @throws DocumentException\n* @throws UnsupportedEncodingException\n* @throws HibernateException\n* @throws HibernateException\n*/\n@Test\npublic void testToLoadDataFromFile() throws ParseException, DocumentException,\n        UnsupportedEncodingException, HibernateException {\n  Session session = null;\n  List list = new ArrayList();\n//  SessionFactory sessionFactory = PersistenceHelper.getSessionFactory();\n  \n  SessionFactory sessionFactory = HibernateUtil.getSessionFactory();\n  int count = 5;\n  List<String> list2 = new ArrayList(count);\n  for (int i = 0; i < count; i ++) {\n    list2.add(\"\");\n    }\n  List<String> list3 = new ArrayList(count);\n  for (int i = 0; i < count; i ++) {\n    list3.add(\"\");\n    }\n  \n  \n  session = sessionFactory.openSession();\n  Query query = session.createQuery( \"from Account a\" );\n  Iterator iterator = query.getResultList().iterator();\n  int i = 0;\n  while (iterator.hasNext()) {\n    Element elements = (Element) iterator.next();\n    String id = elements.attributeValue(\"id\");\n    String name = elements.attributeValue(\"name\");\n\n//    System.out.println(\"id : \" + id);\n//    System.out.println(\"name : \" + name);\n       \n      list.add (sessionFactory.getCurrentSession().getQueryResults( 0 ).extract( \"id\", \"\" ).get( id ) + \"-\" + name );\n      i ++;\n      \n    \n  }\n    \n  \n//System.out.println(\"  list: \");\n//  Iterator iterator = list.iterator();\n//  while (iterator.hasNext()) {\n//    System.out.println(\"  \" + iterator.next());\n//   }\n    List<String> list4 = query2.setFirstResult(0).setMaxResults(20).getResultList();\n    \n  \n//Iterator iterator2 = query2.setFirstResult(0).setMaxResults(20).getResultListIterator();\n//System.out.println(\" \" + list4.size());\n//     list4.iterator();\n//    for (i = 0; i < list4.size(); i ++) {\n//      System.out.println(\" \" + list4.get(i));\n//    }\n    \n    session.close();// sessionFactory.shutdown();\n        \n    \n    \n\t// sessionFactory = loadData_test_0001_test;\n\t  \n  }\n  \n  \n  \n  }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Method to create a test.\n\t\t*/\n\n\t/**\n\t* Check method of {@link LoaderTest} class.\n\t*/\n\t@Test(expected = HibernateException.class)\n    public void testLoadDataWithSqlWrongSql() throws HibernateException {\n\t\t// The session\n\t\tSession session = HibernateUtil.getSessionFactory().openSession();\n\t\t// The query\n\t\tQuery query = session.createQuery(\"select * from \" + Model.class.getName());\n\t\t// Check query\n\t\tString result = (String) query.list().get(0);\n\n\t\tassertEquals(\"Wrong query\", \n\t\t\"select * from \" + Model.class.getName() + \n\t\t\" where (id = :id and model_name = :model_name)\", \n\t\tresult);\n\t}\n\t\n\t/**\n\t* Check method of {@link LoaderTest} class.\n\t*/\n\t@Test\n\tpublic void testLoadDataWithSqlCorrectSql() throws HibernateException {\n\t\t// The session\n\t\tSession session = HibernateUtil.getSessionFactory().openSession();\n\t\t// The query\n\t\tQuery query = session.createQuery(\"select * from \" + Model.class.getName());\n\t\t// Check query\n\t\tString result = (String) query.list().get(0);\n\n\t\tassertEquals(\"Correct query\", \n\t\t\"select * from \" + Model.class.getName() + \n\t\t\" where (id = :id and model_name = :model_name)\", \n\t\tresult);\n\t\t\n\t\t\n\t\tQuery query2 = session.createQuery(\"select * from (\" + Model.class.getName() + \" as model) where (id = :id and model_name = :model_name)\");\n\t\t// Check query\n\t\tList result2 = query2.list();\n\t\n\t\tIterator iterator = result2.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tresult2.remove(iterator.next());\n\n\t\t}\n\t}\n\n    /**\n    * Check method of {@link LoaderTest} class.\n    */\n    @Test\n    public void testLoadDataWithSqlWithQuery() throws HibernateException {\n\tHashMap map = new HashMap();\n\tList result = new ArrayList();\n\tFile file = new File(\"src/test/resources/TestModel.xml\");\n\tDocument document = null;\n\tdocx = new SAXReader();\n\ttry {\n\t\tdocument = docx.read(file);\n\n\t\t// Check parser\n\t\tdocument = document.getRootElement();\n\n\t\t// Check query\n\t\tQuery query = sessionFactory.getCurrentSession().createQuery(\"SELECT DISTINCT model_id, model from \" + Model.class.getName()+\" as model limit 1\");\n\n\t\t\n\n\t\t\n\t\tIterator iterator = query.iterate();\n\t\twhile (iterator.hasNext()) {\n\t\t\tElement element = (Element) iterator.next();\n\t\t\tList model = element.element(\"model\");\n\t\t\tlist.add(model);\n\n\t\t\tresult.add(element.element(\"model_id\").getText());\n\n\t\t\tlist.add(element.element(\"model_name\").getText());\n\t\t}\n\n\t\t\n\t\t\n\t\tIterator iterator2 = result2.iterator();\n\t\twhile (iterator2.hasNext()) {\n\t\t\tresult2.remove(iterator2.next());\n\t\t}\n\n\t\t// Check parser\n\t\t//Iterator iterator = query2.iterate();\n\t\t//while (iterator.hasNext())\n\t    list.addAll(result);\n\n\t\tSession session = sessionFactory.getCurrentSession();\n\t\t\n\t\t\n\t\tIterator iterator3 = map.entrySet().iterator();\n\t\twhile (iterator3.hasNext()) {\n\t\t\t\n\t\t\tMap.Entry mapEntry =(Map.Entry)(iterator3.next());\n\t\t\tmap.put(mapEntry.getKey(), mapEntrys.get((String)map\n\t\t\t   .get(mapEntry.getKey())));\n\n\t\t\tString id = mapEntry.getKey();\n\t\t\tString model = mapEntry.getValue().toString();\n\t\t\n\t\t\tassertEquals(\"Wrong query result\",\n\t\t\t    \"1,6,3,8\", list.get(0));\n\t\t\tassertEquals(\"Wrong query result 1\",\n\t\t\t    \"5,18\", list.get(1));\n\t\t\tlist.set(2,model);\n\n\n\n\t\t}\n\n\n\n\t\tIterator iterator4 = result.iterator();\n\t\twhile(iterator4.hasNext())\n\t\t{\n\t\t\tresult.remove(iterator4.next());\n\t\t}\n\n\t\tsession.close();\n\t\t//HibernateUtil.close();\n\t} catch (HibernateException e1) \n\t{\n\t\te1.printStackTrace();\n\t}\n\t\n\t\n\n\t\n\t}\n}",
            "finish_reason": "stop"
        }
    ],
    "id": "e3ad9550-1e29-4e03-b9c1-87086fecb12a",
    "prompt_id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java",
    "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql();\n}\n",
    "test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {",
    "time_taken": 60.9598503112793,
    "usage": {
        "prompt_tokens": 446
    }
}
]