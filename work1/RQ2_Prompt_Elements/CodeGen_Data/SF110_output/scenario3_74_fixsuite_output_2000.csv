ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
169e22a8-a7c6-4113-8931-5a5a79d2bd84,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,66.08942484855652,stop,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component);
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {
/**
		 * Test this method's signature.
		 */
		@org.junit.jupiter.api.Test
		void test_signature();

		/**
		 * Test this method's return type.
		 */
		@Test
		void test_return();

		/**
		 * Test this method's parameter names.
		 */
		@Test
		void test_paramNames();

		/**
		 * Test this method's return type.
		 */
		@Test
		void test_return_string();

		/**
		 * Test this method's parameter descriptors.
		 */
		@Test
		void test_paramDescriptors();	

		/**
		 * Test this method's return type.
		 */
		@Test
		void test_return_object();

		/**
		 * Test this method's return type.
		 */
		@Test
		void test_return_void();

		/**
		 * Test this method's signature.
		 */
		@org.junit.jupiter.api.Test
		void test_signature_object();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_array();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_Array();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_byte();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_short();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_int();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_long();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_float();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_double();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_Object();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_Object_ObjectHolder();

		/**
		 * Test this method's return type.
		 */
		@org.junit.jupiter.api.Test
		void test_return_null();
}"
f92606a6-c5ba-4c85-8b7c-feaca13568bd,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,63.24176788330078,stop,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value);
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains one unit test case for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

	/**
	 * Unit test for {@link FieldInfo#isValidValue(String)}.
	 */
	@Test
	public void testIsValidValue() {
		String value = ""value"";
		TreeMap<String, Object> expected = new TreeMap<String, Object>();
		expected.put(""type"", 1);
		expected.put(""value"", value);
		assertEquals(""Incorrect map is returned for valid value"", expected, new TreeMap<String, Object>());
		value = ""value2"";
		unknownValue(value);
	}

	/**
	 * Unit test for {@link FieldInfo#notValidValue()}.
	 */
	@Test
	public void testNotValidValue() {
		unknownValue(""value"");
	}

	/**
	 * Unit test for {@link FieldInfo#notValidValue(String)}.
	 */
	@Test
   public void testNotValidValue2()
	{
		string(""value"");
		unknownValue(string(""value2""));
	}

   /**
	 * Unit test for {@link FieldInfo#unknownValue(String)}.
	 * @throws IllegalArgumentException
	 */
   @Test
   public void testUnknownValue(@SuppressWarnings(""unused"") String key)
   {
       unknownValue(string(""value""));
   }
   

 /**
  * Unit test for {@link FieldInfo#unknownValue(String)}.
  * @throws IllegalArgumentException
	 */
  @Test
  public void testNoSuchValue()
	{
		unknownValue(""value2"");
  }
}"
9cadaafd-4bd2-4c15-9846-081f0207690d,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,62.780765533447266,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {

	List<DictionaryInfo_0TestTestClass> testCases = new ArrayList<DictionaryInfo_0TestTestClass>(); 

	@Test
	void testGetField() {
		testCases.add(new DictionaryInfo_0TestTestClass(null));
		testCases.add(new DictionaryInfo_0TestTestClass(""null""));
		testCases.add(new DictionaryInfo_0TestTestClass(""NULL""));
		testCases.add(new DictionaryInfo_0TestTestClass(""test""));
		testCases.add(new DictionaryInfo_0TestTestClass(""NULLNULL"")); 
	}

	@Test
	void testToDictionary() {
		for (DictionaryInfo_0TestTestClass testCase : testCases) {
			testCase.testToDictionary();
		}
	}
		
	class DictionaryInfo_0TestTestClass {
		
		/**
		 * Create a new instance of the test class by the given tag
		 *
		 * @param value - the tag number of the field value to store
		 */
	   DictionaryInfo_0TestTestClass(String value) {
	   	_value = value;
   	}
		public String getTagNumber() {
			return _value;
		}
		public void setTagNumber(String value) {
			_value = value;
		}

		public String toString() {
			String messageInfo = ""\n<dict-info>\nmaintainer: "" + getTagNumber() + ""\n"";
			return messageInfo;
		}

		private String _value;
	}
	
}
"
a44099c1-ab97-4f12-b907-a65cec4a8bf3,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,38.681554079055786,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {

	/**
	 * Tests {@link DictionaryInfo#getField(String)}.
	 */
	@Test
	public void testGetField() {
		//fail(""Not yet implemented"");
	}

	/**
	 * Tests {@link DictionaryInfo#getList()}.
	 */
	@Test
	public void testGetList() {
		//fail(""Not yet implemented"");
	}

	/**
	 * Tests {@link DictionaryInfo#getTreeMap()}.
	 */
	@Test
	public void testGetTreeMap() {
		//fail(""Not yet implemented"");
	}

	/**
	 * Tests {@link DictionaryInfo#getBag(String)}.
	 */
	@Test
	public void testGetBag() {
		//fail(""Not yet implemented"");
	}
}

// DictionaryInfo_1_Test_1.java
"
48b07bd1-2cf6-4aa4-b12d-21acd9366f54,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,62.93682050704956,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {

	/**
	 * Test method for {@link DictionaryInfo#getComponent(int)}.
	 */
	@Test public void testGetComponent() {
		DictionaryInfo.getComponent(DICTIONARY_INFO.DICTIONARY);
	}

	/**
	 * Test method for {@link DictionaryInfo#getComponents()}.
	 */
	@Test public void testGetComponents() {
		DictionaryInfo.getComponent(DICTIONARY_INFO.DICTIONARY);
	}
	
	/**
	 * Test method for {@link DictionaryInfo#getComponents(int)}.
	 */
	@Test public void testGetComponents_1() {
		// The current dictionary is returned
		DictionaryInfo.getComponent(DICTIONARY_INFO.DICTIONARY);
		
		// The one with an id is returned
		assertNotNull(""Expecting null for the one with an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
	}
	
	/**
	 * Test method for {@link DictionaryInfo#getComponents(int)}.
	 */
	@Test public void testGetComponents_2() {
		// The current dictionary is returned
		DictionaryInfo.getComponent(DICTIONARY_INFO.DICTIONARY);
		
		// One without an ID is returned
		assertNotNull(""Expecting null for the one without an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));

		// The one with an id is returned
		assertNotNull(""Expecting null for the one with an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
		
		// The one with a specific dictionary is returned
		assertNotNull(""Expecting null for the one with a specific dictionary"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
		
		// One with an id is returned
		assertNotNull(""Expecting null for the one with an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
	}
	
	/**
	 * Test method for {@link DictionaryInfo#getComponents(int)}.
	 */
	@Test public void testGetComponents_3() {
		// One without an ID is returned
		DictionaryInfo.getComponent(DICTIONARY_INFO.DICTIONARY);
		
		// One with an id is returned
		assertNotNull(""Expecting null for the one without an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));

		// One with a specific dictionary is returned
		assertNotNull(""Expecting null for the one with a specific dictionary"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
		
		// The one with an id is returned
		assertNotNull(""Expecting null for the one with an id"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
		
		// The one with a specific dictionary is returned
		assertNotNull(""Expecting null for the one with a specific dictionary"",DICTIONARY_INFO.getComponent(DICTIONARY.ID));
	}
	
}

// DictionaryInfo_1Test.java
"
f5eca339-d773-4f24-bc3e-bc3366dde219,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,62.9145393371582,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
String TEST_NAME_1 = ""dicom_info_v3"";
    @Test
    void test() {
        assertTrue(TEST_NAME_1.equals(""DICOM_3.0""));
    }

    class ComponentInfo {
        String component;

        public ComponentInfo(String component) {
            assertTrue(component.equals(""Comp 1""));
            assertTrue(component.equals(""Comp 2""));
        }
    }

    class SubDictionaryInfo extends DictionaryInfo {
        List<String> componentItemList;
		SubDictionaryInfo() {
			componentItemList = new ArrayList<String>();
		}

		public List<String> getComponentItemList() {
			return componentItemList;
		}
    }

    class SubDictionaryInfo_1 extends SubDictionaryInfo {}
    class SubDictionaryInfo_2 extends SubDictionaryInfo {}

    @Test
    void compare() {
		ComponentInfo componentInfo1 = new ComponentInfo(""Comp 1"");
		ComponentInfo componentInfo2 = new ComponentInfo(""Comp 2"");	

    	SubDictionaryInfo_1 comp1 = new SubDictionaryInfo_1();
    	SubDictionaryInfo_2 comp2 = new SubDictionaryInfo_2();

		assertTrue(comp1.compareTo(comp1) == 0);
		assertTrue(comp2.compareTo(comp2) == 1);
    }

	@Test
    void list() {
		List<String> componentItemList = new ArrayList<String>();

		ComponentInfo comp1 = new ComponentInfo(""Comp 1"");
		ComponentInfo comp2 = new ComponentInfo(""Comp 2"");

    	SubDictionaryInfo_1 comp1_1 = new SubDictionaryInfo_1();
    	SubDictionaryInfo_2 comp2_1 = new SubDictionaryInfo_2();

		assertTrue(getComponentItemList(comp1).equals(componentItemList));
		assertTrue(getComponentItemList(comp2).equals(componentItemList));
		assertTrue(getComponentItemList(comp1_1).size() == 1);
		assertTrue(getComponentItemList(comp2_1).size() == 1);

		assertTrue(comp1.getComponentItemList()!= comp2.getComponentItemList());
    }

    @Test
    void getListElementByName_1() {
        List<String> list = new ArrayList<String>();
        List<String> subdictionaryList = new ArrayList<String>();

        list.add(""Comp 1"");
        list.add(""Comp 2"");
        list.add(""Comp 3"");
        list.add(""Comp 4"");

        subdictionaryList.add(""Comp 1"");
        subdictionaryList.add(""Comp 2"");
        subdictionaryList.add(""Comp 3"");
        subdictionaryList.add(""Comp 4"");

        subdictionaryList.add(""2nd Comp 1"");
        subdictionaryList.add(""3rd Comp 1"");
        subdictionaryList.add(""4th Comp 1"");
        
        assertTrue(getListElementByName(list, ""Comp 1"")!= null);
		assertTrue(getListElementByName(list, ""Comp 2"")!= null);
        assertTrue(getListElementByName(list, ""Comp 3"")!= null);
		assertTrue(getListElementByName(list, ""Comp 4"")!= null);
		assertTrue(getListElementByName(list, ""2nd Comp 1"")!= null);
		assertTrue(getListElementByName(list, ""3rd Comp 1"")!= null);
		assertTrue(getListElementByName(list, ""4th Comp 1"") == null);

		assertTrue(getListElementByName(list, ""Comp 1"").getComponentItemList().equals(subdictionaryList));
        
		assertTrue(list == list);
		assertTrue(list == list.get(0));
        
        assertTrue(list.getComponentItemList().contains(""2nd Comp 1""));
		assertTrue(list.getComponentItemList().contains(""3rd Comp 1""));
		assertTrue(list.getComponentItemList().contains(""4th Comp 1""));

        // Test adding multiple components
        assertTrue(subdictionaryList.size() == list.size());

        assertTrue(subdictionaryList.get(0).equals(""Comp 3""));
        assertTrue(subdictionaryList.get(1).equals(""Comp 4""));
        
        assertTrue(subdictionaryList.get(2).equals(""Comp 1""));
        
        assertTrue(subdictionaryList.get(3).equals(""Comp 2""));
        assertTrue(subdictionaryList.get(4).equals(""Comp 2""));

        assertTrue(list.getComponentItemList().size() == 4);
        assertTrue(list == list.getComponentItemList());
        
        assertTrue(subdictionaryList.contains(""2nd Comp 1""));	
        
    }

    public boolean same(DictionaryInfo dicomInfo1, DictionaryInfo dicomInfo2) {
    	boolean comp1 = dicomInfo1.getComponent(""Comp 1"");
        /* assertTrue(dicomInfo1.getComponent(""Comp 1"").equals(""Comp 1""));*/
        boolean comp2 = dicomInfo1.getComponent(""Comp 2"");	
        /* assertTrue(dicomInfo1.getComponent(""Comp 2"").equals(""Comp 2""));*/
        
	    boolean comp1_1 = dicomInfo1.getComponentItemWithName(""Comp 1"");
		boolean comp2_1 = dicomInfo1.getComponentItemWithName(""Comp 2"");
	
	    boolean same = true;
	    if(!comp1 &&!comp2 &&!comp1_1 &&!comp2_1) same = dicomInfo1.compareTo(dicomInfo2);
	    else if (comp1 && comp2 && comp1_1 && comp2_1) same = dicomInfo1.compareTo(dicomInfo2);
	    else if (comp1 && comp1_1 && comp2 && comp2_1) same = dicomInfo1.compareTo(dicomInfo2);
		else if (comp2 && comp1 && comp2_1) same = dicomInfo2.compareTo(dicomInfo1);
		else same = dicomInfo2.compareTo(dicomInfo1);
	    
	    if (same) return true;
	   else 
    	 	return false;
	}
    
    private boolean getListElementByName(List<String> list, String name) {
        boolean find = false;
        for (String str : list) {
            if (str!= null && str.trim().charAt(0) == '_') {
                find = true;
                break;
            }
        }
        return find;
    }

    private List<String> getComponentItemList(ComponentInfo compInfo) {
        List<String> listEntry = new ArrayList<String>();
        List<String> list = new ArrayList<String>();

        if (compInfo instanceof SubDictionaryInfo) {
            for (String element : ((SubDictionaryInfo) compInfo).componentItemList) {
                list.add(element);
            }
        } else {
            for (String element : compInfo.getComponentItemList()) {
                list.add(element);
            }
        }

        return list;
    }"
33a67f4f-6b7c-43e0-a134-445353da5ae7,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,62.92181992530823,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {

	class MessageInfo {
		byte		field1b;
		List<Integer> field1;
		String text = ""field1"";
		TreeMap<String, String> data = new TreeMap<String, String>();
		private String  id;
	public
	List<Integer>  field1 ;
	public
	TreeMap<String, String> data ;
		public  String  getId() {		return id; }
		public    void  setId(String id) { 		this.id = id; }
		
	}
	private
	MessageInfo () {}

	@Test
	public
	void
	getMessage() {
		//System.out.println(""field1[0] = "" + field1b);
	
	}
}
// DictionaryInfo_4Test_2Test.java
// ---------------------------------------------------------------------------
// End of DictionaryInfo_4Test.java
// ---------------------------------------------------------------------------
// DictionaryInfo_4Test_3Test.java
// ---------------------------------------------------------------------------
// End of DictionaryInfo_4Test_2Test.java

"
2f2c044e-4472-49fb-806c-b49f39599127,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,62.93637657165527,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains one unit test case for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {
private static final String name = ""DictionaryInfo"";
	@Test
    void createWithName() throws Exception {
        assertNotNull(System.getProperty(""fix.language.msg.prefixes""));
        assertNotNull(System.getProperty(""fix.language.msg.delimiters""));
        MessageInfo[] message = DictionaryInfo.getMessage(""Dictionary"").getMessage(""Dictionary_5"");
        assertNotNull(message);
        assertNotNull(message[0]);
        
        List<String> msgIdList = new ArrayList<>();
        msgIdList.add(""Dictionary-1"");
        msgIdList.add(""Dictionary/Dictionary-2"");
        msgIdList.add(""Dictionary/Dictionary-1.1"");
		assertEquals(msgIdList.get(0), message[0].getMessageId());
		assertEquals(msgIdList.get(1), message[1].getMessageId());
		assertEquals(msgIdList.get(2), message[2].getMessageId());
    }
	
    @Test
    void createListMessageWithListOfDictionary() throws Exception {
        assertNotNull(System.getProperty(""fix.language.msg.prefixes""));
        assertNotNull(System.getProperty(""fix.language.msg.delimiters""));
        List<String> msgIdList = new ArrayList<>();
        msgIdList.add(""Dictionary"");
        List<MessageInfo> messages = DictionaryInfo.getMessage(""Dictionary"").getList();
        assertNotNull(messages);
        assertEquals(messages.size(), 8);

        List<String> list = new ArrayList<>();
        list.add(""Dictionary-9"");
        list.add(""Dictionary-8"");
        list.add(""Dictionary-7"");
	
	// check values in correct order of msgids
	for (MessageInfo m : messages) {
            for (String msgId : m.getMessageIds()) {
	            System.out.println(""MID""+msgId);
            }
        }

        // check msgids
        String actualMsgId = """";
        msgIdList.forEach((currentId) -> {
                List<String> newList = new ArrayList<>();
                List<String> subList = new ArrayList<>(newList);
                subList.remove(currentId);

                if (subList.size()!= 1) {
                    System.out.println(currentId);
                }

                for (int i = subList.size(); i < newList.size(); i++) {
                    newList.add(String.valueOf(i + 1));
                }
                actualMsgId = currentId;
                break;
            }
            System.out.printf(""ActualMsgId: %s \n"", actualMsgId);

        
        if (actualMsgId.equals(""Dictionary-5.1.1"")) {
            assertEquals(actualMsgId, msgIdList.get(6));
        } else {
            for (int i = 0; i < msgIdList.size(); i++) {
                String msgId = msgIdList.get(i);
                System.out.printf(""MESSAGE ID: %s \n"", msgId);
                assertEquals(actualMsgId, msgId);
            }
        }
    }

        
		@Test
    void createListMessageWithListOfDictionaryAndListOfString() throws Exception {
        assertNotNull(System.getProperty(""fix.language.msg.prefixes""));
        assertNotNull(System.getProperty(""fix.language.msg.delimiters""));
        List<String> msgIdList = new ArrayList<>();
        msgIdList.add(""Dictionary"");
	String msgId = DictionaryInfo.getMessage(""Dictionary"").getMessageId();
	msgIdList.add(msgId);

        List<MessageInfo> messages = DictionaryInfo.getMessage(""Dictionary"").getList();
        assertNotNull(messages);
        assertEquals(messages.size(), 1);

        List<String> subList = new ArrayList<>();

        //check values in correct order of msgids
        for (MessageInfo m : messages) {
            List<String> newList = new ArrayList<>();
            List<String> newList2 = new ArrayList<>();
            List<String> subList2 = new ArrayList<>(newList2);

            for (String s : m.getMessageIds()) {
                newList2.add(String.valueOf(i+1));
                subList2.add(s);
            }
            List<String> list = new ArrayList<>(newList2);
            subList2.remove(index);

            if (subList.size()!= 1) {
                System.out.println(m.getMessageId());
                System.out.println("" MESSAGE: "" + msgId + "" : "" + subList);
            }

            for (int i = 0; i < subList.size(); i++) {
                String msgId = subList.get(i);
                if (i == 0) {
                    list.add(msgId);
                } else {
                    list.add(msgId + "".1"");
                }
                list.add(s);
            }

            if (list.size()!= 2) {
                System.out.println(m.getMessageId() + "".1."" + subList2.get(1));
                System.out.println(m);
            }

            msgIdList.addAll(list);
        }



        if (msgIdList.size() == 8) {
            assertEquals(msgIdList.get(6), ""Dictionary-5.1.1"");
        } else {
            for (int i = 0; i < msgIdList.size(); i++) {
                String msgId = msgIdList.get(i);
                System.out.printf(""MESSAGE ID: %s \n"", msgId);
                assertEquals(msgIdList.get(i + 1), msgId);
            }
        }
        List<String> msgIdList2 = new ArrayList<>();
        msgIdList2.add("""");
        assertEquals(msgIdList2.size(), msgIdList.size());

        TreeMap<String, Integer> map =
                    new TreeMap<String, Integer>();
        map.put(""Dictionary"", msgIdList.indexOf(""Dictionary-5.1.1""));
        map.put(""Dictionary-5.1.1"", msgIdList2.indexOf(""Dictionary-5.1.2""));
        String newMsg = ""Dictionary-5.1.2"";
        assertEquals(map.get(""Dictionary-5.1.1""), msgIdList2.indexOf(newMsg));
	System.out.printf(""ActualMsgId: %s \n"", map.keySet().get(0).toString());



    }

}
"
