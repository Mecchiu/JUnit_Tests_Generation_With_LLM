ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
1f9d2cbf-d4ae-4bee-a2c1-ddaee0f28c9b,/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/DefaultFSPath.java,41.08383274078369,length,"// DefaultFSPath.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *  The default implementation of the FSPath interface.
 *  This class uses the JDK's XPath implementation as the basis for
 *  FSPath queries.
 *  On instantiation, a DOM is created of the filesystem metadata starting form the <code>rootDirectory</code>.
 *  This DOM can then be queried using standard XML tools.
 *  <br/>
 *  Whilst this approach has been relatively quick to implement, it is still tied to the limitations of XPath.
 *  Future implementations of this class are likely to implement the FSPath language fully themselves wthout relying on XPath.
 *  <br/>
 *  todo: develop some front end substitution to enable the short queries i.e. /var/www etc
 *
 * @author keith
 *  $Id$
 */
public class DefaultFSPath implements FSPath {

    /**
     *  Calls this.query(expression, XPathConstants.NODESET)
     *
     *  Note : This method MUST be passed an expression which returns a nodeset.
     *
     * @param expression the FSPath expression to execute.
     * @returns <code>FSPathResultList</code> the FSPathResult objects contained
     *  in this list will be of type <code>java.io.File</code>,
     *  <code>java.lang.Double</code>, <code>java.lang.Boolean</code>,
     *  <code>java.lang.String</code>
     */
    public FSPathResultList query(String expression);
}
","// DefaultFSPathTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultFSPath}.
* It contains one unit test case for the {@link DefaultFSPath#query(String)} method.
*/
class DefaultFSPathTest {","// DefaultFSPathTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultFSPath}.
* It contains one unit test case for the {@link DefaultFSPath#query(String)} method.
*/
class DefaultFSPathTest {
/**
		* Instance of Class to test.
		*/ 
		private DefaultFSPath defaultFS;


// Instance of class to test.
	/** Constructor that instantiates a default FSPath that will
	 *  execute an XPath expression based on the input String for that
	 *  FSPath instance.
	 */ public DefaultFSPathTest() {
		defaultFS = new DefaultFSPath();
	}
	
	/**
	 * Test for the query method.
	 * 
	 * @throws IOException  If the test fails
	 * @throws ParseException If the test fails
	 */
	@Test
	public void testQuery() throws IOException, ParseException {
		// String to use
		final String input = ""/home"";

		// This file will be modified only if test fails
		final File testFile = new File(""testFile"");
		
		// Create a XML document
		final Document testDoc = createDocument(""testFile/testFile.xml"");

		// Set XPath to evaluate the document 
		XPathFactory xpf = XPathFactory.newInstance();
		XPath xp = xpf.newXPath(); // XPath instance which will be used 

		// Query the document using XPath
		XPathExpression xpce = xp.compile(""//text()"");
		NodeList nodeset = (NodeList) xpce.evaluate(testDoc, XPathConstants.NODESET);
		
		// Build a variable map to use for the XPath expressions.
		Map map = new HashMap();

		// Loop over this document node set and test for each XPath expression
		for (int i = 0; i < nodeset.getLength(); i++) {
			
			// Get element text
            String text = nodeset.item(i).getTextContent();
			TextResult textResult = testDoc.createTextNode(text); 
			
			// Build our XPath expression for this element.
			XPathExpression xre = xp.compile(""/"");
			NodeResult node = xre.evaluate(testDoc, XPathConstants.NODE); //This nodeResult is a Node object returned in the NodeResult object of xres.
			Node nodeResult = node;
			

		    // Execute the XPath expression using this XPathResult object.
			NodeList childResults = (NodeList) xre.evaluate(nodeResult, XPathConstants.NODESET);
					
			// First thing we need to check is that there are no child node results
			if(childResults!=null && childResults.getLength() > 0) {
				
				String nodeName = null;
				
				Node currentNode = null;
	            // Loop over the child node objects
				for(int j=0;j<childResults.getLength();j++) {
					
					currentNode = childResults.item(j);

					switch(currentNode.getNodeType()) {
						case Node.ELEMENT_NODE :
							{
								String nodeName = currentNode.getNodeName();
								NodeValue nodeValue = (NodeValue)currentNode;
								String nodeValueText = nodeValue.getNodeValueAsText();
	                       if(nodeValueText.length()>0) {
	         						String nodeValueId = null;
	           					String nodeValueType = null;
	           					try{
	           						nodeValueId = nodeValue.getNodeValueId();
	           					}
	           					catch(NullPointerException n){

						             // If the nodeValueId is null return the defaultFSPathResult value rather than
						             // returning null as there is no defaultFSPathResult value
							             return defaultFS.query(input, map);
						           }

	           					String result = defaultFS.query(input, map); //This is the XPath variable map to check results by name

	           					assertNull(""Expected Null for nodeResult.getNodeName() but got node: "" + nodeName + "" with value: "" + result,nodeName);

	           					if(result.equals(""true"") || result.equals(nodeValue.getNodeValueAsText())) {
	             						if(nodeValueId.equals(""String"") && nodeValue.getNodeValueAsText().length()>"
90eed533-cb93-499f-b3e1-919ff40dfe4e,/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathFactory.java,28.310651779174805,stop,"// FSPathFactory.java
package net.sf.sugar.fspath;

import java.io.File;

/**
 * @author kbishop
 */
public class FSPathFactory {

    /**
     * @returns FSPath a new DefaultFSPath instance which uses the current user directory (System.getProperty(""user.dir"")) to search from.
     */
    public static FSPath newFSPath();
}
","// FSPathFactoryTest.java
package net.sf.sugar.fspath;

import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathFactory}.
* It contains one unit test case for the {@link FSPathFactory#newFSPath()} method.
*/
class FSPathFactoryTest {","// FSPathFactoryTest.java
package net.sf.sugar.fspath;

import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathFactory}.
* It contains one unit test case for the {@link FSPathFactory#newFSPath()} method.
*/
class FSPathFactoryTest {

	/**
		* Test for {@link FSPathFactory#newFSPath()} method.
		*/
	@Test
	public void testNewFSPath() {
		// Test 0-th path of the FSPathFactory class.
		try {
			FSPath path = FSPathFactory.newFSPath();
			assertTrue(path.exists());
			assertTrue(2==path.toString().count(""//""));
			assertTrue(path.isDirectory() && path.getAbsoluteAbsolutePath().count(""//"") == 2);
			assertEquals(2, path.getAbsoluteAbsolutePath().count("".//""));
			assertEquals(""//"", path.getAbsoluteFile().getFullPath());
		}catch(Exception f){
			fail(""File error from FSPathFactory.""+f.getMessage());
		}
		
		// Test 1-th path of the FSPathFactory.
		try {
			FSPath path = FSPathFactory.newFSPath(""test"");
			assertTrue(path.exists());
			assertTrue(2==path.toString().count(""//""));
			assertTrue(path.isDirectory() && path.getAbsoluteAbsolutePath().count(""//"") == 2);
			assertEquals(2, path.getAbsoluteAbsolutePath().count("".//""));
			assertEquals(""//"", path.getAbsoluteFile().getFullPath());
		}catch(Exception f){
			fail(""File error from FSPathFactory.2"");
		}
		
		//Test 2-th path of the FSPathFactory.
		try {
			FSPath path = FSPathFactory.newFSPath(""test2"");
			assertTrue(path.exists());
			assertTrue(2==path.toString().count(""//""));
			assertTrue(path.isDirectory() && path.getAbsoluteAbsolutePath().count(""//"") == 2);
			assertEquals(2, path.getAbsoluteAbsolutePath().count("".//""));
			assertEquals(""//"", path.getAbsoluteFile().getFullPath());
		}catch(Exception f){
			fail(""File error from FSPathFactory.3"");
		}
		
		//Test 3-th path of the FSPathFactory.
		try {
			FSPath path = FSPathFactory.newFSPath(""//myName//"");
			assertTrue(2==path.toString().count(""myName""));
			assertTrue(path.isDirectory() && path.getAbsoluteAbsolutePath().count(""//myName"") == 2);
			assertEquals(""myName"", path.getAbsoluteFile().getFullPath());
		}catch(Exception f){
			fail(""File error from FSPathFactory.3"");
		}
		
	} // end of test
	
}
"
94ff467a-c9d5-4afb-9cbe-5c53527c980e,/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl_0Test.java,59.55038499832153,stop,"// FSPathResultListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultListImpl extends ArrayList<FSPathResult> implements FSPathResultList {

    /**
     *  A convenience method for defining custom filesystem interaction
     *  across the whole list of results.
     *
     *  This method loops through the results and calls the call(Result result)
     *  method of the Callback class passed to it for each individual result.
     *
     * @param Callback - a custom implementation of the Callback interface.
     * @throws IOException
     */
    public FSPathResultList each(Callback callback) throws IOException;
}
","// FSPathResultListImpl_0Test.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains one unit test case for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImpl_0Test {","// FSPathResultListImpl_0Test.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains one unit test case for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImpl_0Test {

	/**
	* Method that tests the execute method of FSPathResultListImpl.
	* This method is executed as the result of the List method call in each() method 
	* of the Result class.
	* Note that results are ordered based on the call(Result) method call.
	*
	* @throws Exception - thrown by the code calling execute
	*/
	@Test
    void every() throws Exception;
}

// FSPathResultListImpl_1Test.java

//import java.io.File;

//import org.junit.jupiter.api.Test;
//import static org.junit.jupiter.api.Assertions.*;



// FSPathResultListImpl is an ArrayList implementation
class FSPathResultListImpl_1Test extends ArrayList<FSPathResult> {
	
	////////////////////////////////////////////////////////////////////////////
	//						Instance Variables								//
	////////////////////////////////////////////////////////////////////////////

		// This is the default value
	
	////////////////////////////////////////////////////////////////////////////
	//							   Protected Methods								//
	////////////////////////////////////////////////////////////////////////////
	
	
	/*
	* Method: execute(List)
	*/
	@SuppressWarnings(""unchecked"")
	public FSPathResult execute(List results){
	    assertEquals(results.size(), size());
	    return ((FSPathResult)results.iterator().next());
	}

}








"
3d75eae4-71ba-4bb3-939c-aa8b5ad61919,/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl_1Test.java,54.030715227127075,stop,"// FSPathResultListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultListImpl extends ArrayList<FSPathResult> implements FSPathResultList {

    /**
     *  Deletes each file contained in this FSPathResultList.
     *  <br/>
     *  <pre>
     *  ************************************************************************
     *  *               IMPORTANT !!!!!    Use with caution                    *
     *  *   This method makes it extremely easy to trash your filesystem       *
     *  *   Its advised that FSPath queries are tested thouroughly before use  *
     *  *   in order to verify which files would be deleted                    *
     *  *                                                                      *
     *  ************************************************************************
     *  </pre>
     *
     * @returns FSPathResultModificationListImpl - all successfully deleted files<br/>
     *  will be added as a success, and the failures will be added as failures.
     * @throws IOException - NOTE this method does not currently thrown an IOException
     * @throws OperationNotPermittedException - this exception will be thrown if<br/>
     *  The FSPathResult objects contained in this FSPathResultList don't contain<br/>
     *  java.io.File objects<br/>
     *  (i.e the FSPath query was written to return Boolean, String nor numerical results).
     */
    public FSPathResultModificationList delete() throws IOException, OperationNotPermittedException;
}
","// FSPathResultListImpl_1Test.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains one unit test case for the {@link FSPathResultListImpl#delete()} method.
*/
class FSPathResultListImpl_1Test {","// FSPathResultListImpl_1Test.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains one unit test case for the {@link FSPathResultListImpl#delete()} method.
*/
class FSPathResultListImpl_1Test {
// FSPathResultListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultListImpl extends ArrayList<FSPathResult> implements FSPathResultList {

    /**
     *  Deletes each file contained in this FSPathResultList.
     *  <br/>
     *  <pre>
     *  ************************************************************************
     *  *               IMPORTANT!!!!!    Use with caution                    *
     *  *   This method makes it extremely easy to trash your filesystem       *
     *  *   Its advised that FSPath queries are tested thouroughly before use  *
     *  *   in order to verify which files would be deleted                    *
     *  *                                                                      *
     *  ************************************************************************
     *  </pre>
     *
     * @returns FSPathResultModificationListImpl - all successfully deleted files<br/>
     *  will be added as a success, and the failures will be added as failures.
     * @throws IOException - NOTE this method does not currently thrown an IOException
     * @throws OperationNotPermittedException - this exception will be thrown if<br/>
     *  The FSPathResult objects contained in this FSPathResultList don't contain<br/>
     *  java.io.File objects<br/>
     *  (i.e the FSPath query was written to return Boolean, String nor numerical results).
     */
    public FSPathResultModificationList delete() throws IOException, OperationNotPermittedException;
}

// FSPathResultListImpl_1Test.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains one unit test case for the {@link FSPathResultListImpl#delete()} method.
*/
class FSPathResultListImpl_1Test {
		
	/** Tests with invalid syntax */ 
	@Test(expected = OperationNotPermittedException.class)
	public void noFileDeletion() throws IOException, OperationNotPermittedException {
		(new FSPathResultListImpl())
			.delete();
	}

	/** Tests with good syntax */
	@Test
	public void successfulOperation() throws IOException, OperationNotPermittedException {
		FSPath f = (new FSPath())
           .append(""abc.fsp"",""abc.gsp"")
           .append(""abc.gsp"");
        FSPathResultList resultA = f.delete();

        assertEquals(f.getFile().getName(), ""abc"");
        assertEquals(f.getFile().getParent(), null);
        assertEquals(resultA.getFile().getName(), ""bc.gsp"");
        assertEquals(resultA.getFile().getParent(), null);
		assertTrue(resultA.getResult().isSuccess());

	}

	/** Tests delete failure */ 
	@Test
	public void fspathIsValid() throws IOException, OperationNotPermittedException {
		FSPath f = (new FSPath(0)) 
			.append(""abc.fsp"")
			.append("".fsp"");

        assertTrue(f.getFile().exists());
        assertTrue(new File(f.getFile().getCanonicalPath()).isFile());

	}

}
"
