ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java,44.52104306221008,length,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    private final static String DEFAULT_KEYSTORE_URI = ""file:#{ systemProperties['user.home'] }/jnfe.pfx"";

    private final static String DEFAULT_KEYSTORE_TYPE = ""pkcs12"";

    private String keyStoreUri;

    private String keyStoreType;

    private String keyStorePassword;

    private String trustStoreType;

    private String trustStore;

    private String trustStorePassword;

    /**
     * A URI para a keystore usada para autenticar o transporte.
     *
     * @param keyStoreUri
     */
    public void setKeyStoreUri(String keyStoreUri);

    /**
     * O tipo de keystore empregado para o transporte.
     *
     * @param keyStoreType
     */
    public void setKeyStoreType(String keyStoreType);

    /**
     * A senha para acesso ao keystore empregado para o transporte.
     *
     * @param keyStorePassword
     */
    public void setKeyStorePassword(String keyStorePassword);

    /**
     * Localiza��o do aramz�m seguro.
     *
     * @param trustStore
     */
    public void setTrustStore(String trustStore);

    /**
     * Tipo do armaz�m do armaz�m seguro (cacerts).
     *
     * @param trustStoreType
     */
    public void setTrustStoreType(String trustStoreType);

    /**
     * Senah do armaz�m seguro (cacerts).
     *
     * @param trustStorePassword
     */
    public void setTrustStorePassword(String trustStorePassword);

    public void afterPropertiesSet() throws Exception;

    /**
     * toString
     * @return String
     */
    public String toString();

    /**
     * Abre o  armaz�m seguro (cacerts).
     *
     * @throws Exception
     */
    public KeyStore openTransportStore() throws Exception;

    /**
     * Abre o gerenciador de chaves do armaz�m de transporte.
     *
     * @throws Exception
     */
    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;

    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);
}
","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {

    /** Constructor. */
    public TransportKeyStoreBean_0Test() {
    }

    /**
     * Teste ao efetuar a execu��o de uma transporta uma chave que ser�
     * salvo com uma senha no senha.
     */
    @Test
    public void testUnaSala() throws Exception {
        try {
            // Setar os parâmetros do transporte (opç�o da sessao) para o arquivo de sala
            System.setProperty(""file.separator"", ""/"");
            String uri = SecurityUtils.getServerContext().getRealm()
               .getKeyStoreFile()
               .toString()
               .substring(0,
                    SecurityUtils.getServerContext().getRealm()
                       .getKeyStoreFile().toString()
                       .length());
            SecurityUtils.setServerContext(
                    new KeyStore.Builder().setKeyStoreType(keyStoreType)
                       .setKeyStoreResource(uri)
                       .setKeyStore(SecurityUtils.getTransportSecurityInfo()
                    ).build());
            // Executa uma chave na sess�o que o envio ao ser de caminho
            KeyManagerFactory kmf = SecurityUtils.getTransportSecurityInfo()
                   .getKeyManagerFactory();
            
            // Setar ""keyStoreUri"" para ser usado como ""keyStoreType""
            uri = String.format(""file:%s"",
                    keyStoreUri);
            KeyStore keyStore = SecurityUtils.getServerContext()
                   .getRealm()
                   .getKeyStore(keyStoreType);
            assertNotNull(""Failed to add key"", keyStore);
            
            // Executa o comando ""TrustStore"", mas aparece que verificar se
            // uma chave de senha n�o se pode gerar uma chave.
            KeyManagerFactory kmfTrustStore = keyManagerFactory(
                        trustStoreType, trustStorePassword);
            
            Object keyStorePass = SecurityUtils.getTransportSecurityInfo()
                   .getTransportKeyStorePassword();
            assertTrue(""Secretar keyStorePassword é n�o igual ao que a password ser encontrado no envio"",
                    keyStorePassword.equals(keyStorePass));
            
            TrustManagerFactory tmfTrustStore = trustManagerFactory(
                    keyManagerFactories, """");
            
            KeyManager[] keyManagers = KeyManagerFactory.getInstance(
                    kmf.getDefaultAlgorithm())
                   .getKeyManagers();
            ArrayList<TrustManagerFactory> all = new ArrayList<>();
            all.addAll(Arrays.asList(keyManagers));
            
            // Executa o comando ""TrustAll"", que inexcluir a lista de gera��ors.
            Boolean val = keyManagerFactory(
                    trustStoreType, trustStorePassword)
                    .hasTrustManager(""""/* all */);
            assertFalse(""Failed to have a manager for trustStore type"",
                    val);
            
            // Executa a execu��o da chave no cliente tudo
            Object keyStoreUri = SecurityUtils.getTransportSecurityInfo().getKeyStoreFile();
            keyStoreUri = SecurityUtils.getServerContext().getAuthenticationUri()
                   .resolve(uri, keyStoreUri);
            TrustManagerFactory tmfKeyManager = trustManagerFactory(
                    keyStoreType, trustStorePassword);
            keyManagerFactory(kmfStore, keyStoreUri).deleteKeyManager(keyStoreUri);
            kmfTrustStore.deleteTrustManager(""""/* keyManagers */);
            
            // Executa a execu��o da chave no cliente tudo.
            Object keyStoreUri2 =
                    SecurityUtils.getServerContext().getAuthenticationUri()
                           .resolve(uri, keyStoreUri);
            KeyManagerFactory kmfTrustManager = trustManagerFactory(
                    keyStoreType, trustStorePassword);
            kmfTrustManager.getTrustManager(""""/* keyManagers */)
            		.loadTrustMaterial(kmfKeyManager, true)
            		.checkServerTrusted(kmfTrustManager, kmfCertificateFile);
            
            // Executa a execu��o da chave no cliente tudo com ""keyStorePassword :""
            keyStoreUri = SecurityUtils.getServerContext().getAuthenticationUri()
                   .resolve(uri, keyStoreUri);
            keyManagerFactory(kmfStore, keyStoreUri)
                   .loadKeyMan"
1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java,44.04436659812927,stop,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    private final static String DEFAULT_KEYSTORE_URI = ""file:#{ systemProperties['user.home'] }/jnfe.pfx"";

    private final static String DEFAULT_KEYSTORE_TYPE = ""pkcs12"";

    private String keyStoreUri;

    private String keyStoreType;

    private String keyStorePassword;

    private String trustStoreType;

    private String trustStore;

    private String trustStorePassword;

    /**
     * A URI para a keystore usada para autenticar o transporte.
     *
     * @param keyStoreUri
     */
    public void setKeyStoreUri(String keyStoreUri);

    /**
     * O tipo de keystore empregado para o transporte.
     *
     * @param keyStoreType
     */
    public void setKeyStoreType(String keyStoreType);

    /**
     * A senha para acesso ao keystore empregado para o transporte.
     *
     * @param keyStorePassword
     */
    public void setKeyStorePassword(String keyStorePassword);

    /**
     * Localiza��o do aramz�m seguro.
     *
     * @param trustStore
     */
    public void setTrustStore(String trustStore);

    /**
     * Tipo do armaz�m do armaz�m seguro (cacerts).
     *
     * @param trustStoreType
     */
    public void setTrustStoreType(String trustStoreType);

    /**
     * Senah do armaz�m seguro (cacerts).
     *
     * @param trustStorePassword
     */
    public void setTrustStorePassword(String trustStorePassword);

    public void afterPropertiesSet() throws Exception;

    /**
     * toString
     * @return String
     */
    public String toString();

    /**
     * Abre o  armaz�m seguro (cacerts).
     *
     * @throws Exception
     */
    public KeyStore openTransportStore() throws Exception;

    /**
     * Abre o gerenciador de chaves do armaz�m de transporte.
     *
     * @throws Exception
     */
    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;

    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);
}
","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {

	private static final String USER_HOME = ""user.home"";

	/**
	* Teste ao abrir o armaz�m do armaz�m (cacerts) de transporte.
	*
	* @throws Exception
	*/
	@Test
	public void test() throws Exception{
			
		KeyStore ks = this.delegate.openTransportStore();
		KeyManagerFactory kmf = this.delegate.openTransportKeyManagerFactory();
		
		assertNotNull(""Keystore empregado"",ks);
	}
	
	private static final X509TrustManager nullTrustManager = 
			SecurityUtils.nullTrustManager;
	
	/**
	* Testa ao abrir o armaz�m de transporte s/o de mensagens do web services e
	* @throws Exception 
	*/
	@Test
	public void testNullWebServices() throws Exception{
		
		if (nullTrustManager instanceof X509TrustManager) {
			System.err.println(
					""The null manager does not implement the interface X509TrustManager, a test failed"");
			System.exit(-1);
		}
		
		KeyStore ks = null;
		KeyManagerFactory kmf = null;
		try {
			ks = this.delegate.openTransportStore();
			kmf = this.delegate.openTransportKeyManagerFactory();
		} catch (Exception e) {
			assertTrue(e instanceof NullPointerException);
		}
		
		assertNotNull(""Keymanager empregado"", kmf);
	}

}

"
