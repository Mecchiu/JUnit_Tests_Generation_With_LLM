ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
03603f63-5e4d-4bb1-b432-de6f631e887e,/EvoSuiteBenchmark/original/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilter.java,11.367047786712646,stop,"// HTMLFilter.java
package com.imsmart.servlet;

public final class HTMLFilter {

    /**
     * Filter the specified message string for characters that are sensitive
     * in HTML.  This avoids potential attacks caused by including JavaScript
     * codes in the request URL that is often reported in error messages.
     *
     * @param message The message string to be filtered
     */
    public static String filter(String message) {
        if (message == null)
            return (null);
        char[] content = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length + 50);
        for (int i = 0; i < content.length; i++) {
            switch(content[i]) {
                case '<':
                    result.append(""&lt;"");
                    break;
                case '>':
                    result.append(""&gt;"");
                    break;
                case '&':
                    result.append(""&amp;"");
                    break;
                case '""':
                    result.append(""&quot;"");
                    break;
                default:
                    result.append(content[i]);
            }
        }
        return (result.toString());
    }
}
","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains one unit test case for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains one unit test case for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {
HTMLFilterTest() {
        // empty default constructor
        }

		HTMLFilterTest(String message) {
			/**
			 * Initialize the test by using the message (String) as the filter string.
			 *
			 * @param testMessage The message to be used for testing
			 */
			String testMessage = message;
			assertTrue(""testMessage must be empty (or null)"", (testMessage == null? true : testMessage.length() == 0 || testMessage.length() <= 120));
		}

		String getTestMessage() {
			return (""\n"" +
				""#if ($param.hasBeenSet) \n"" +
				""${param}\\!< "" + HTMLFilter.filter(getTestMessage()));
		}

		@Test
		void test1() {
			String result = """";
			result = filter(getTestMessage());
			assertTrue(""getTestMessage must have been the filter for an empty String"", result.length() >= 0);
		}

		@Test
		void test2() {
			String result = """";
			result = filter(getTestMessage(), (char) 42);
			assertTrue(""getTestMessage must have been the filter for a numeric character"", result.length() >= 0);
		}
}
"
