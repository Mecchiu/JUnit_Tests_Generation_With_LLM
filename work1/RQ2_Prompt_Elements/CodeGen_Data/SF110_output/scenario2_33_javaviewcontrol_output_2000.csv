ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
80b4655b-02e7-4c9c-85a0-5197949dc6c2,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_0Test.java,65.66392469406128,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    /**
     * Start.
     */
    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;
        return c;
    }
}
","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {

	@Test
	public void testBeginToken() throws java.io.IOException {
		SimpleCharStream   stream = new SimpleCharStream();
		String     s = """";
		int     i = stream.beginToken();
		assertEquals(""BeginToken"", 0, i);
		assertEquals(""ReadChar"", -1, stream.readChar());
	}
	
	@Test
	public void testPeekChar() throws java.io.IOException {
		SimpleCharStream   stream = new SimpleCharStream();
		stream.BeginToken();
		assertEquals(""PeekChar"", -1, stream.peekChar());
	}	
	
	@Test
	public void testEOF() throws java.io.IOException {
		SimpleCharStream   stream = new SimpleCharStream();
		assertEquals(""EOF"", -1, stream.EOF());
	}
	
}
"
8ac2cdb0-a287-4718-a1b6-a12fc3867197,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_1Test.java,62.68181920051575,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    /**
     * Read a character.
     */
    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;
            if (++bufpos == bufsize)
                bufpos = 0;
            return buffer[bufpos];
        }
        if (++bufpos >= maxNextCharInd)
            FillBuff();
        char c = buffer[bufpos];
        UpdateLineColumn(c);
        return c;
    }
}
","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {

    final static int TOK_EOF=-1;
    final static int TOK_NUMBER=-2;


    public final void UpdateLineColumn(char c) throws java.io.IOException {

    char c1,c2;
    c2=(int)c;
    if (TOK_EOF>0x80) {
        c1=(char)(((TOK_EOF & ~0x7F) >> 2) + ONE_LEVEL_2);
    }
    else {
        if (c1>=MIN_CHARACTER) {
            c1 -= (MIN_CHARACTER >> 2);
        }
        else {
            c1 = 0;
        }
    }
        
        if (c1 < 0) {
            c1 = 0;
        }
        c2=Character.toLowerCase(c);
    
        if (TOK_NUMBER<0 || TOK_NUMBER>=TOK_NUMBER) {
        
        if (TOK_NUMBER > TOK_EOF) {
        	UpdateLineColumn(c2);
        	c2=c1;
        }
//            if (c1 >= MIN_CHARACTER) {
//        	c = Character.toLowerCase((char)c1);
//                c2 = Character.toLowerCase(c);
//                assertEquals(""L"",new String(String.valueOf(c1,10)));
//                c1=c2;
//            }
                        
            //        UpdateLineColumn(c1);
        }
        c2 = Character.toUpperCase(c2);
        if (TOK_NUMBER<TOK_EOF) {
            UpdateLineColumn(c2);
        }
        
    }
        
		
		private final static char[] buffer = new char[256];
		
		static {
	
			/* initialize table of digits 1*/
			int value = 10;
			for(int i=value; i>=0; i--) {
				buffer[i]=(char)i;
			}
			
			/* initialize table of digits 2*/
			int value = 11;
			for(int i=value; i>=0; i--) {
				buffer[i]=(char)i;
			}
			
////		//Initialization
////			buffer[10]=10;
////			buffer[11]=11;
////			System.out.println(buffer+"""");

		int i=20;
		while(i>=0) {
			buffer[i]=(char)i;
			i--;
		}
		buffer[buffer.length - 1]=(char)i;
			
//		/* initialize table of digits */
//		int value = 0;
//		for(int i=0; i<buffer.length; i++) {
//			value = value << 4;
//			value = value | buffer[i];
//			buffer[i]=(char)value;
//		}
		//System.out.println(buffer);
	}
}




// How it works: We fill the buf with zeros. Then we read from the
// stream and get the characters in the buffers.
// After each iteration, the result buffer contains
// a new char - either a 0 indicating end of line, or
// it contains the characters read from the stream.
// @Test
public void test() throws java.io.IOException {
		   
	long start = System.currentTimeMillis();
	int count=0;
	while (System.in.read()!= 0)
		count++;
	long end = System.currentTimeMillis();
	System.out.println((end-start));
}

}
"
f3bdae9c-1214-4931-b9a5-20658cea041b,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_2Test.java,44.20498466491699,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    /**
     * Get token literal value.
     */
    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }
}
","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {

  final static int[] buffer = new int[1 << 16];
  static final int bufferLength = 1 << 16;
  final static int bufferOffset = 0;
  final static char EQUAL = '=';
  final static char COLON = ':';
  final static char TAB = '\t';
  final static char LINE_FEED = '\n';
  final static char CARRIAGE_RETURN = '\r';
  final static char QUOTE = '""';
  final static char OPEN_PAREN = '(';
  final static char CLOSE_PAREN = ')';
  final static char OPEN_CURLY = '{';
  final static char CLOSE_CURLY = '}';
		
		
  final static String[] IMAGE = new String[bufferLength];
        
		/**
         * Set test image.
         */
  static void SetImage(String[] Image) {
    int i;
    for (i = 0; i < bufferLength; i++) {
      buffer[i] = -1;
    }
    buffer[0] = 0;
    for (i = 0; i < IMAGE.length; i++) {
      IMAGE[i] = Image[i];
    }
  }
		
	
  @Test
  public void testGet_Equal() throws Exception {
    IMAGE[bufferOffset] =  QUOTE;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(COLON, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
	
  @Test
  public void testGet_COLON() throws Exception {
    IMAGE[bufferOffset] = COLON;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(COLON, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
	
  @Test
  public void testGet_TAB() throws Exception {
    IMAGE[bufferOffset] = TAB;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(TAB, result1.charAt(0));
    assertEquals(CARRIAGE_RETURN, result1.charAt(1));
  }
	
	
  @Test
  public void testGet_LINE_FEED() throws Exception {
    IMAGE[bufferOffset] = LINE_FEED;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(LINE_FEED, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
	
  @Test
  public void testGet_QUOTE() throws Exception {
    IMAGE[bufferOffset] = QUOTE;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(QUOTE, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
	
  @Test
  public void testGet_close() throws Exception {
    IMAGE[bufferOffset] =  CLOSE_CURLY;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(OPEN_CURLY, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
  @Test
  public void testGet_close_paren() throws Exception {
    IMAGE[bufferOffset] = OPEN_CURLY;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(OPEN_CURLY, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
  @Test
  public void testGet_close_square() throws Exception {
    IMAGE[bufferOffset] = CLOSE_CURLY;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(CLOSE_CURLY, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
  @Test
  public void testGet_quoted_paren() throws Exception {
    IMAGE[bufferOffset] = QUOTE;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(QUOTE, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	
  @Test
  public void testGet_close_bracket() throws Exception {
    IMAGE[bufferOffset] = CLOSE_CURLY;
    SimpleCharStream instance = new SimpleCharStream();

    String result1 = instance.GetImage();
    assertEquals(CLOSE_CURLY, result1.charAt(0));
    assertEquals(EQUAL, result1.charAt(1));
  }
	

}// end class SimpleCharStream_2Test
"
8d68ea1d-fb2b-47e5-947d-b4c572fb3dee,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_0Test.java,20.170016527175903,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     *
     * @param s a String to be encoded.
     * @return A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }
}
","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {
public void run() throws Exception { }
        /**
         * Checks if the two arrays can be properly encoded.
         *
         * @param d1 a Array of length 1 containing the data.
         * @param d2 a Array of length 1 containing the data.
         */
        @Test
        public void checkCompatibleArray(String s1, String s2, boolean b) {
            byte[] b1 = encodeString(s1).getBytes();
            byte[] b2 = encodeString(s2).getBytes();

            assertTrue(b1.length == b2.length);
            assertTrue(b1.length <= 1024);

            // check all
            for (int i=0; i< b1.length; ++i) {
                assertTrue(b1[i] == b2[i]);
                if (b)
                   assertTrue(0x01&b1[i] == 0x02 & 0x04&b2[i] == 0x02);
            }
        }
}		"
d0225a3c-2ed9-4867-86df-8a32ee7df5f1,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_1Test.java,27.08536386489868,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     *
     * @param in an array containing the data bytes to be encoded.
     * @return A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }
}
","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {
@Test
		public void test() {
			String data = """";

			assertEncoded(1.0);

			data = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";

			assertEncoded(data);

			data = ""abcdefghijklmnopqrstuvwxyz"";

			assertEncoded(data);

			data = """";

			assertNotEncoded(1.0);
		}

		private static final void assertEncoded(double expected) {
			assertEquals(""encoded should contain correct values"", expected,
					encode(expected), 0.0000001);
		}

		private static final void assertNotEncoded(double expected) {
			assertEquals(""encoded cannot contain not encoded values"",
					expected, decode(expected), 0);
		}

		// Method that returns encoded bytes in the form of char[]
		char[] encode(double b) {
			return Base64Coder.encode(b);
		}

		// Method that returns decoded value in the form of char[]
		private char[] decode(char s) {
			return Base64Coder.decode(s);
		}

		// Basic testing of decode function
		private double decode() {
			return Base64Coder.decode(new byte[] { 13, 13, 13, 13 });
		}

		// Basic testing of decode function of hex characters
		private double decode(double b) {
			return Base64Coder.decode(new byte[] {
					(byte) (b / 0x100), (byte) (b % 0x100),
					(byte) (b / 0x100), (byte) (b % 0x100) });
		}

		@Test
		public void testHexaSimple() {
			assertDecoded(0, 13, 13);

			assertDecoded(0, 43);

			assertDecoded(1, 43, 43);

			assertDecoded(1, 13, 43);

			assertDecoded(8, 13, 43);

			assertNotDecoded(0, 13, 43);
		}

		private void assertDecoded(int base, int exp, int exp2) {
			assertEquals(""decoded data is incorrect "", exp, decode(exp),
					0);
			assertEquals(""decoded data is incorrect "", exp2, decode(exp2), 0);

			double b = 0.0;

			b = 1.0 / 15.0;
			assertDecoded(b, 13, 13);

			b = -1.0 / 15.0;
			assertDecoded(b, 43, 13);

			b = 0.0 / 0.333333;
			assertDecoded(b, 13, 43);

			b = -1.0 / 0.333333;
			assertDecoded(b, 43, 43);

			b = 1.0 / -0.75;
			assertDecoded(b, 43, 13);

			b = -1.0 / (23 / 29.0);
			assertDecoded(b, 13, 43);

			b = 1.0 / (23 / 23.0);
			assertDecoded(b, 43, 43);

			b = -1.0 / (-33 / 67.5);
			assertDecoded(b, 13, 43);

			// b = 1.0 / (-33/67.5);
			// assertDecoded(b, 43, 43);

			b = (23.0 / -67.5);
			assertDecoded(b, 43, 43);

			// b = 1.0 / 23.0;
			// assertDecoded(b, 43, 43);

			// Base64CoderTest.assertNotBase64(""1"");
			Base64Coder.assertEncoded(""123456789"".getBytes());
		}
}

// java.io
"
19b3d45c-3c4d-4c7b-a606-ad0d9c9996b5,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_2Test.java,25.22932767868042,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     *
     * @param in an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }
}
","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {
// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     *
     * @param in an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen? in[ip++] & 0xff : 0;
            int i2 = ip < iLen? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen? map1[o3] : '=';
            op++;
        }
        return out;
    }
}

// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {
		// The test cases.
		private final Base64Coder[] testCases = {
				new Base64Coder(new String[] { ""Zg=="", ""Zg8="" }, false),
				new Base64Coder(new String[] { ""Zg=="", ""Zg-="" }, true),
				new Base64Coder(new String[] { ""Zg=="", ""Zg8="" }, true),
				new Base64Coder(new String[] { ""Zg=="", ""Zg-="" }, true)};
		// Class under test.
		private Base64Coder testCase;

		/**
		 * Constructs a new test case with the given cases.
		 *
		 * @param cases the cases.
		 * @param ignoreCase If <code>true</code>, the input is expected to conform to the input using case-in-senstive algorithm (ISO 2022 in UTF-8).
		 * @throws NullPointerException thrown if the inputs are null.
		 */
		protected Base64Coder_2Test(Base64Coder... cases) {
			for (int i = 0; i < cases.length; i++) {
				super();
				testCase = cases[i];
			}
			assertNotNull(testCase);
		}
		;

		/**
		* Test method for {@link Base64Coder#encode(byte[], int)}
		* for an unsupported encoding format.
		*/
		@Test(expected = UnsupportedEncodingException.class)
		public void testEncodeUnsupported() {
			byte[] in = new byte[0];
			EncodeCoder encodeC = new EncodeCoder();
			testCase.encode(encodeC, in);
		}

		/**
* Test method for {@link Base64Coder#encode(byte[], int)}
* for a valid encoding format.
*/
		@Test
		public void testEncodeValid() {
			byte[] in = new byte[0];
			EncodeCoder encodeC = new EncodeCoder();
			char[] out = testCase.encode(encodeC, in);
			assertNotNull(out);
			assertTrue((""Zg="" + new String(encodeC.maskOut())).indexOf(out)!= -1);
			assertTrue((""Zg8="" + new String(encodeC.maskOut())).indexOf(out)!= -1);
		}

		/**
		* Test method for {@link Base64Coder#encode(byte[], int)}
		* for a valid encoding format.
		*/
		@Test
		public void testEncodeValidWithPadding() {
			byte[] in = new byte[0];
			EncodeCoder encodeC = new EncodeCoder();
			char[] out = testCase.encode(encodeC, in);
			assertNotNull(out);
			assertArrayEquals( (""Zg="" + new String(encodeC.maskOut())).getBytes()
					, out);
			assertTrue((""Zg="" + new String(out)).indexOf(out)!= -1);
			assertTrue((""Zg8="" + new String(out)).indexOf(out)!= -1);
		}

}
"
3556c857-61d6-4fb7-a553-9e92eb76043e,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_3Test.java,44.757901191711426,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Decodes a string from Base64 format.
     *
     * @param s a Base64 String to be decoded.
     * @return A String containing the decoded data.
     * @throws IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }
}
","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {

    /**
     * Unit test case for {@link Base64Coder#decodeString(String)}.
     *
     * @throws Exception if test fails.
     */
	@Test
	public void testDecodeString() throws Exception {
        assertEquals(""1123456789"", Base64Coder.decodeString(""1123456789""));
        assertEquals(""1234567890"", Base64Coder.decodeString(""1234567890""));
		assertEquals(""abcd"", Base64Coder.decodeString(""abc""));

        assertEquals(""1"", Base64Coder.decodeString(""1""));
        assertEquals(""10"", Base64Coder.decodeString(""10""));
        assertEquals(""abcd"", Base64Coder.decodeString(""abcd""));
        assertEquals(""123456789"", Base64Coder.decodeString(""123456789""));
        assertEquals(""abcde"", Base64Coder.decodeString(""abcde""));
        assertEquals(""ab4567"", Base64Coder.decodeString(""ab4567""));
        assertEquals(""123"", Base64Coder.decodeString(""123""));
		
		try{	Base64Coder.decodeString(new char[0]);
		} catch(Exception e){fail(""char[] must have 0 width"");}
		
		//assertEquals('@\'', Base64Coder.decodeString('@'));
		assertEquals(""b"", Base64Coder.decodeString(""b""));
		
        base64Coder_test(this.getClass().getSimpleName(), ""test"");
    }
    
    private static void base64Coder_test(String testName, String testCase) {
    	try{
    		assertEquals(testCase.replace(""\"""", """"), Base64Coder.decodeString(testName.replace(""\"""", """")));
    	} 
    	catch(Exception e){
    		fail("".decodeString(\""""+EscapeUtils.escapeHtml(testName)+""\"") failed in ""+testCase+"")"");
    	}
    }

} // Class Base64Coder_3Test 
/// <reference file=""Base64Coder.java""/>
"
aeef22e5-37f1-476c-801d-20e844993b29,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_4Test.java,38.92405033111572,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Decodes a byte array from Base64 format.
     *
     * @param s a Base64 String to be decoded.
     * @return An array containing the decoded data bytes.
     * @throws IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }
}
","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {

	@Test
	public void testDecode_1_byte_input() {
		assertEquals("""", new String(decode("""")));
	}

}
"
9bea78db-af7f-4b89-aa07-102475e1a3b1,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_5Test.java,44.65643548965454,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     *
     * @param in a character array containing the Base64 encoded data.
     * @return An array containing the decoded data bytes.
     * @throws IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }
}
","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {
// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     *
     * @param in a character array containing the Base64 encoded data.
     * @return An array containing the decoded data bytes.
     * @throws IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4!= 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen? in[ip++] : 'A';
            int i3 = ip < iLen? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }
}

// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {
		    			
	@Test
	void test_decode() {
		assertEquals("""", new String(Base64Coder.decode(new char[0])));
		assertEquals("""", new String(Base64Coder.decode(new String[0])));
		assertEquals(""AAABAAA"", new String(Base64Coder.decode(new byte[] {(byte)0xa, (byte)0xa, (byte)0xa, (byte)0xa})));
		assertEquals(""AAABAAA\n"", new String(Base64Coder.decode(new String[] {new byte[] {(byte)0xa, (byte)0xa, (byte)0xa, (byte)0xa}})));
	}
	
}

"
b99751d0-f43e-4303-b896-219ea150539d,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_0Test.java,52.20341920852661,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method
     *
     * @param name which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }
}
","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {
// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method
     *
     * @param name which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o!= null && o instanceof String)? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }
}

// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {
		
	@Test
	public void testGetParam_1()
			throws Exception {
		
		JVCRequestContext context = new JVCRequestContext(""param1"");
		assertTrue(context.getParam(JVCRequestContext.PARAM_KEY_NAME) instanceof String);
		assertEquals(""param1"", context.getParam(JVCRequestContext.PARAM_KEY_NAME).toString());
		
	}

	@Test
	public void testGetParam_2()
			throws Exception {
		JVCRequestContext context = new JVCRequestContext();
		assertEquals(""param1"", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
		context = context.getParam(JVCRequestContext.PARAM_KEY_NAME, ""param1=new"");
		assertEquals(""param1=new"", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
		context = context.getParam(JVCRequestContext.PARAM_KEY_NAME, ""param1=new "");
		assertEquals(""param1=new"", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
		context = context.getParam(JVCRequestContext.PARAM_KEY_NAME, ""param1=&"");
		assertEquals(""param1="", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
		context = context.getParam(JVCRequestContext.PARAM_KEY_NAME, ""param1=& param2=new"");
		assertEquals(""param1="", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
	
	}

	@Test
	public void testGetParam_3()
			throws Exception {
		JVCRequestContext context = new JVCRequestContext();
		assertEquals("""", context.getParam(JVCRequestContext.PARAM_KEY_NAME));
		String param1 = context.getParam(JVCRequestContext.PARAM_KEY_NAME, "" param1"");
		assertNull(param1);
		context = context.getParam(JVCRequestContext.PARAM_KEY_NAME, "" param1=& param2=new"");
		param1 = context.getParam(JVCRequestContext.PARAM_KEY_NAME, "" param1=& param2=new"");
		assertEquals(""param1="", param1);
		param1 = context.getParam(JVCRequestContext.PARAM_KEY_NAME, "" param1=& param2=new"");
		assertEquals(""param1="", param1);
	}

	@Test
	public void testGetParamNames_1()
			throws Exception {
		
		JVCRequestContext context = new JVCRequestContext();
		Collection<String> names = context.getParamNames();
		Iterator<String> it = names.iterator();
		assertTrue(it.hasNext());
		assertTrue(it.next() == JVCRequestContext.PARAM_KEY_NAME);
		
		context = context.getParamNames();
		assertTrue(it.hasNext());
		assertTrue(it.next().equals(JVCRequestContext.PARAM_KEY_NAME));
		
	}

	@Test
	public void testGetParamValues_1()
			throws Exception {
		
		JVCRequestContext context = new JVCRequestContext();
		String[] values = context.getParamValues(JVCRequestContext.PARAM_KEY_NAME);
		
		assertNull(values);
		// this string should have been BINARY_VALUE
		values = context.getParamNames();
		assertTrue(values.hasNext());
		assertTrue(values.next().equals(JVCRequestContext.PARAM_KEY_NAME));
		
		context = context.getParamNames();
		assertTrue(values.hasNext());
		assertTrue(values.next().equals(JVCRequestContext.PARAM_KEY_NAME));
		
		
	}
	
	@Test
	public void testGetParamNames_2()
			throws Exception {
		
		String param1 = ""param1"";
		String param2 = ""param1"";
		Collection<String> names = JVCRequestContext.getParamNames();
		Collection<String> values = JVCRequestContext.getParamValues(param1);
		assertTrue(names.size() == 2);
		assertTrue(values.size() == 2);
		assertTrue(names.contains(JVCRequestContext.PARAM_KEY_NAME));
		assertTrue(values.contains(param1));
		values = JVCRequestContext.getParamValues(param2);
		assertTrue(names.size() == 2);
		assertTrue(values.size() == 2);
		assertTrue(names.contains(JVCRequestContext.PARAM_KEY_NAME));
		assertTrue(values.contains(param1));
		
	}
}
"
f179c241-17b8-477a-ab8e-f439762b0f87,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_1Test.java,42.86562728881836,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     *
     * @param name the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }
}
","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {


    @Test  
    void testParamMapGet() {
		// JVCRequestContext.testParamMapGet(); // This method is to be in unit test
		JVCRequestContext.getParamMap(""foo"");
	}

    @Test  
    void testParamMapRemove() {
		// JVCRequestContext.testParamMapRemove(); // This method is to be in unit test
		JVCRequestContext.getParamMap(""bar"");
	}

    @Test  
    void testParamMapRemove2() {
		// JVCRequestContext.testParamMapRemove2(); // This method is to be in unit test
		JVCRequestContext.getParamMap(""bar"");
	}	

    @Test  
    void testParamMapRemove3() {
		// JVCRequestContext.testParamMapRemove3(); // This method is to be in unit test
		JVCRequestContext.getParamMap(""foo"");
    }	
}
"
1ab81bfc-30e4-4bf2-a496-c094f5a3f8c4,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_2Test.java,54.36063003540039,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     *
     * @param name the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }
}
","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {

    public final static String CONTENT_TYPE = ""multipart/form-data"";
    
    private final JVCRequestContext reqctx = new JVCRequestContext();
    private Map flash = new HashMap();

    @Test
    void test_getParamValues_one_Parameter() {
        reqctx.setParam(new String[] {""Parameter-1"",""Parameter-2""}, ""1|2"");
        assertArrayEquals(new String[] {""1"",""2""},
                reqctx.getParamValues(new String[] {""Parameter-1"",""Parameter-2""}));
    }
      
    @Test
    void test_getParamValues_multiple_Parameters() {
        reqctx.setParam(new String[] {""Parameter-1"",""Parameter-2""}, ""1|2"");
        reqctx.setParam(new String[] {""Parameter-3"",""Parameter-4""}, ""3|4"");
                
        assertArrayEquals(new String[] {""1"",""2""},
                reqctx.getParamValues(new String[] {""Parameter-1"",""Parameter-4""}));
   }  
      
    @Test
    void test_getParamMaps(){
        reqctx.setParam(new String[] {""Parameter-1"",""Parameter-2""}, ""1|2"");
        assertTrue(!flash.containsKey(""param""));
        assertTrue(flash.containsKey(new Object()));
        
        flash.clear();
        assertTrue(!flash.containsKey(""param""));
        assertTrue(flash.containsKey(new Object()));
    }
    
    @Test(expected = IllegalArgumentException.class)
    void test_reqctx_empty(){
        new JVCRequestContext().setParam(new String[0], ""Param"");
        new JVCRequestContext().getParamValues("""");
    }
    
    @Test
    void test_reqctx_empty_null(){
        reqctx.setParam(null, ""Param"");
        reqctx.getParamValues("""");
    }
      
    @Test
    void test_getParamMap_one_Parameter() {
        reqctx.setParam(new String[] {""Parameter-1"", ""Parameter-2""}, ""1|2""); // This will succeed
        assertEquals(4, reqctx.getParamMap().size());  // 4 parameters
        assertEquals(""1|2"", reqctx.getParam().toString());
        assertFalse(reqctx.getParamMap().containsKey(""Parameter-1""));
        assertFalse(reqctx.getParamMap().containsKey(""Parameter-2""));
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-3""));
        assertEquals(""3|4"",reqctx.getParamMap().get(""Parameter-3"").toString());
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-4""));
        assertFalse(reqctx.getParamMap().containsKey(""Parameter-5""));
        assertEquals(""3|4"",reqctx.getParamMap().get(""Parameter-5"").toString());
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-6""));
        assertEquals(""2"",reqctx.getParamMap().get(""Parameter-6"").toString());
    }
      
    @Test
    void test_getParamMap_multiple_Parameters(){
        reqctx.setParam(new String[] {""Parameter-1"", ""Parameter-2"", ""Parameter-3""}, ""1|2|3""); // This will succeed
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-3""));
        assertEquals(""1|2|3"",reqctx.getParam().toString());
        assertFalse(reqctx.getParamMap().containsKey(""Parameter-1""));
        assertFalse(reqctx.getParamMap().containsKey(""Parameter-2""));
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-3""));

        assertTrue(reqctx.getParamMap().containsKey(""Parameter-4""));
        assertEquals(""3|4"",reqctx.getParamMap().get(""Parameter-4"").toString());
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-5""));
        assertEquals(""2"",reqctx.getParamMap().get(""Parameter-5"").toString());
        assertTrue(reqctx.getParamMap().containsKey(""Parameter-6""));
        assertEquals(""1"",reqctx.getParamMap().get(""Parameter-6"").toString());
    }
	
    @Test
    void test_getParams(){
        assertArrayEquals(new String[] {""Parameter-1"", ""Parameter-2"", ""Parameter-3""}, 
                new String[] {reqctx.getParam(0).toString(), reqctx.getParam(1).toString(), reqctx.getParam(2).toString()});
        
        reqctx.clearParams();
        reqctx.setParam(new String[] {""Parameter-1"", ""Parameter-3""}, ""3|4"");
        assertArrayEquals(new String[] {""1"", ""3"", ""4""}, 
                new String[] {reqctx.getParam(1).toString(), reqctx.getParam(2).toString(), reqctx.getParam(3).toString()});            
    }
      
    @Test
    void test_setFileParameter_one_parameter(){        
        reqctx.setFileParam(""p1"", ""File contents"");
        assertEquals(""p1=File contents"",
                reqctx.getFileParamToString(""p1""));
        reqctx.setFileParam(null, ""File contents"");
        assertNull(reqctx.getFileParam(""p1""));
    }
      
    @Test
    void test_setFileParameter_multiple_parameters(){        
        reqctx.setFileParam(""p1"", ""File contents"");
        reqctx.setFileParam(null, ""File contents"");
        assertNull(reqctx.getFileParam(""p1""));
        assertNull(reqctx.getFileParam(""p2""));        
    }
      
    @Test
    void test_getFileParameter() {
        reqctx.setFileParam(""p1"", ""File content"");
        assert"
8897ac0a-8496-4863-b5da-54f987a06779,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_3Test.java,55.13154625892639,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method
     *
     * @param name which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }
}
","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {

    @Test
	void test_noParameters(){
		assertEquals(new Object[0], new String[]{});
	}

    @Test
	void test_oneParameter_returns_file(){
		HttpURLConnection conn = (HttpURLConnection) request.openConnection(request.getScheme());
		String file = ""test.txt"";
		conn.addHeader(""Content-Length"", ""6"");
		File fileHandle = new File(""test/"" + file);
		ServletFileUpload sfu = new ServletFileUpload();
		FileItemFactory factory = new DiskFileItemFactory();
		ServletContext ctx = this.getClass().getClassLoader().getParent();
		try {
            sfu.parseRequest(conn, factory, new FileReader(fileHandle));
			FileItem item = sfu.getItem(0);
            assertEquals(file, item.getName());
		} catch (FileUploadException fe) {
			fail(""Unexpected exception type "" + fe.getClass().getName());
		}
		try {
			conn.getInputStream();
			assertFalse(true);
		} catch (FileNotFoundException fnf) {
			fail(""Unexpected exception type ""+fnf.getClass().getName());
		}
	}

    @Test
	void test_oneParameter_returns_file_returns_error()
	{
		HttpURLConnection conn = (HttpURLConnection) request.openConnection(request.getScheme());
		String file = ""test.txt"";
		conn.addHeader(""Content-Length"", ""6"");
		File fileHandle = new File(""test/"" + file);
		ServletFileUpload sfu = new ServletFileUpload();
		FileItemFactory factory = new DiskFileItemFactory();
		ServletContext ctx = this.getClass().getClassLoader().getParent();
		try {
            sfu.parseRequest(conn, factory, new FileReader(fileHandle));
			fail(""No exception occurred"");
		} catch (FileUploadException fe) {
			assertFalse(true);
		}
	}

    @Test
	void test_oneParameter_returns_file_returns_error2()
	{
		HttpURLConnection conn = (HttpURLConnection) request.openConnection(request.getScheme());
		String file = ""test.txt"";
		conn.addHeader(""Content-Length"", ""6"");
		File fileHandle = new File(""test/"" + file);
		ServletFileUpload sfu = new ServletFileUpload();
		FileItemFactory factory = new DiskFileItemFactory();
		ServletContext ctx = this.getClass().getClassLoader().getParent();
		try {
            sfu.parseRequest(conn, factory, new FileReader(fileHandle));
			fail(""No exception occurred"");
		} catch (FileUploadException fe) {
			fail(""Expected exception"");
		}
	}

    @Test
	void test_file_upload_response_is_file(){
        File file = new File(""test/test.txt"");
        BufferedImage a = null;
        ByteArrayOutputStream b = null;
        try {
            b = new ByteArrayOutputStream();
            a = new BufferedImage(600, 300, BufferedImage.TYPE_INT_ARGB);
            ServletUtils.fillImage(a, 600, 300, a.getRGB(0, 0));
            Streams.compress(a);
            a.flush();
            b.write(a.getImageData()[5]);
            ServletFileUpload upload = new ServletFileUpload();
            Map<String,Object> requestMap = new HashMap<String,Object>();
            requestMap.put(""file"", b.toString());
            ServletFileUpload sfu = new ServletFileUpload(requestMap);
            FileItem image = sfu.parseRequest(request);
            if(sfu.isExhausted()) {
                fail(""File upload exception: ""+sfu.getNumberOfFiles()+"". Was expecting ""+2);
            }
            // test case verifies that the request was sent with a specific file name.
            String temp = ""testFileUpload_request_file_test.txt"";
            request.setAttribute(""file"", temp);
            String data = null;
            data = sfu.getItem(0).getString();
            assertEquals(file.length()+"". Was expecting ""+(b.toString().length()+1) +"", but was received  ""+data.length(),""  Expecting ""+file.length()+"".  Was expecting ""+(b.toString().length()+1)+"", but was received ""+data.length());
        } catch (Exception e) {
            fail(e.getMessage());
        }
	}
	
}"
68b6b30a-d771-423f-aa52-f5a07cb39aa9,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_4Test.java,54.592422008514404,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method
     *
     * @param name the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }
}
","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {

 /**
  * This is the test case for the {@link JVCRequestContext#getSessionAttr(String)} method.
  */
  @Test
  public void testGetSessionAttr() throws FileNotFoundException, IOException {
     
    ServletFileUpload uploadServlet = new ServletFileUpload();
    UploadStream uploadStream1 = null;
    try {
       if (request.getParameter(""file"").length()!= 0) {
        uploadStream1 = uploadServlet.parseRequest(new FileReader(request.getParameter(""file"").split("";"")[0]));
        } 
           
    } catch (ParseException pe) {
        pe.printStackTrace();
        uploadStream1 = uploadServlet.parseRequest(new FileReader(request.getParameter(""file"").split("";"")[0]));
    }
       
     assertEquals(uploadStream1, uploadServlet.getUploadStream(request));
     
     String expectedSessionValue = ""test"";
     String actualSession = request.getSession().getAttribute(""session"");
     assertTrue(actualSession.equals(expectedSessionValue));
     
     
         }
   
    
        
}
"
c59de5d8-b8d1-4fdc-8c82-9e928ce36f23,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_5Test.java,53.18396878242493,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to get cookie by name
     *
     * @param name the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }
}
","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {

    /** Test that a String in the flash is properly created. */
    @Test
    void flashStringTest() {
        // Get the flash string
        String flashString = request.getFlash();

        // Check it for a validity
        assertNotNull(flashString);
    }

    /** Check that the Request contains a required field. */
    @Test
    void checkRequiredField() {
        // Fetch the key
        String key = request.getParameter(""RequiredField1"");
        // Check it exist
        assertNotNull(key);
        // Check it contains value
        assertTrue(key.endsWith(""=RequiredField1""));
        // Check key size
        assertEquals(key.length(), 6);
        // Check length of the key
        assertEquals(key.length(), (int) key.charAt(0) + 1);
        // Get value
        String keyValue = request.getParameter(""RequiredField2"");
        // Make sure it's null.
        assertNull(keyValue);
        // Check if it contains the key
        assertTrue(keyValue.endsWith(""=RequiredField2""));
    }

}

//JVCRequestContext_7Test.java
"
417a94ab-354e-4d9f-9125-5bbff02abe5f,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_6Test.java,55.270305156707764,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to prepend the context path onto a servlet path
     *
     * @param path a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }
}
","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {
// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to prepend the context path onto a servlet path
     *
     * @param path a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"")? path : ""/"" + path);
    }
}

// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {
		
	@Test
	public void testAbsPath() throws Exception {
		
		HttpServletRequest request = new MockServletHttpServletRequest(new HttpServletRequestImpl());
		HttpServletResponse response = new MockServletHttpServletResponse();
		int code = HttpServletResponse.SC_MOVED_PERMANENTLY;
		HttpURLConnection connection = createHTULConnection(request, response, code);
		assertEquals(200, connection.getResponseCode());
		HttpURLConnection downloadConnection = createDownloadConnection(connection);
		assertNotNull(downloadConnection);
		assertEquals(""/download.txt"", downloadConnection.getHeaderField(""Location""));
	}
	
	@Test
	public void makeFakeURLConnectionWithQueryString() throws Exception { 
            HttpURLConnection originalConnection = HttpURLConnection.createURLConnection(URL);
            originalConnection.connect();
            assertEquals(200, originalConnection.getResponseCode());
    }
    
	/**
	* Convenience Method to initialize the JVCRequestContext given a servlet request, a
	* servlet response and an int. 
	*
	* @param request the servlet request object
	* @param response the servlet response object
	* @param code the request's status code
	*/
	public void initContext(ServletRequest request, ServletResponse response, int code) throws Exception {
		JVCRequestContext context = 
            new JVCRequestContext(request, response, new MockServer());
        assertNotNull(context);
        context.setResponseCode(code);
	}
	
    public static HttpURLConnection createHTULConnection(HttpServletRequest request,
    		HttpServletResponse response, int code) throws IOException {

        String queryString = request.getQueryString();
        if (queryString == null) {
            Collection<String> values = 
                Arrays.asList(new String[]{""GET"", ""GET"", ""POST"", ""PATCH""});
            Streams.filter(queryString, values).forEach(String s -> {
                int p = s.indexOf('?');
                if (p == -1) {
                    return;
                }
                String key = s.substring(0, p);
                String value = s.substring(p + 1).trim();
                int i = (value.startsWith(""$"")? value.indexOf('$') :  value.length());
                StringBuilder builder = new StringBuilder(value.substring(0,i));
                if (key.indexOf('$') > 0) {
                    builder.append(value.substring(i+1));
                    value = value.substring(i+1);
                    i += 1;
                }
                String keyValue = builder.toString();
                String key = (keyValue.indexOf("";"") > 0)? keyValue.substring(0, keyValue.indexOf("";"")).trim() : keyValue;
                response.setHeader(key, value);
            });
        }
    		return request.getRequestURL().openConnection(response);
    }
    
    public static HttpURLConnection createDownloadConnection(HttpURLConnection original) throws Exception {
        StringBuilder urlBuilder = new StringBuilder(JVCRequestContext.absPath(original.getURL().toURI().getPath()));
        int p = urlBuilder.indexOf('?');
        if (p > 0) {
            urlBuilder.delete(p, p+1);
        } else {
            urlBuilder.insert(0, ""?"");
        }
        urlBuilder.append(original.getRequestMethod()).append("": "").append(original.getResponseCode());
        BufferedImage bufferedImage = new BufferedImage(original.getContentLength(), original.getContentType().getType(), original.getContentType().getClass().getClassLoader());
        OutputStream outputStream = bufferedImage.getOutputStream();
        Streams.copy(original.getInputStream(), outputStream);
        outputStream.close();
        return original;
    }
    
}
"
df303098-2d38-485b-ab6c-8e14e586d9ca,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_7Test.java,54.242573976516724,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to create an html anchor link tag
     *
     * @param anchor the text in an anchor link
     * @param path the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }
}
","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {

    /**
     * This is a mock class with a number of methods that are used for testing.
     * Only the ""followPath"" methods are tested.
     * @author mike dooley
     */
    public static class URLInfo {
        /**
        * @param url
        * @return
        */
        public String getURL(String url) {
            // TODO Auto-generated method stub
            return url;
        }

        /**
        * @param url
        * @param path
        * @return
        */
        public String getURL(String url, String path) {
            // TODO Auto-generated method stub
            return url;
        }

        protected Collection<File> getFileListing(String url) {
            // TODO Auto-generated method stub
            return null;
        }
    }

    public static class HttpURLConnectionWrapper extends HttpURLConnection {

        /**
        * @param connection
        */
        public HttpURLConnectionWrapper(HttpURLConnection connection) {
            super(connection);
        }

        /**
        * @param connection
        * @param postFormUrlEncodedData
        */
        public HttpURLConnectionWrapper(HttpURLConnection connection, String postFormUrlEncodedData) {
            super(connection, postFormUrlEncodedData);
        }
    }
    
    private HttpURLConnection connection;
    
    private JVCRequestContextImpl context;
    
    private Collection<File> getFileListing(String url) {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * Create a JVCRequestContext instance.  Note that this class is not intended
     * to be run directly by an external JVM - use
     * {@link java.net.URLConnection#getURL()} to create an HttpURLConnection.
     */
    public JVCRequestContext_7Test() {
        super();
        context = new JVCRequestContextImpl(new HttpURLConnectionWrapper(connection));
    }

    static public class HttpServletResponseWrapper extends HttpServletResponseWrapper {

        public HttpServletResponseWrapper(HttpServletResponse response) {
            super(response);
        }

        public ServletOutputStream createOutputStream(boolean keepContent) {
            // TODO Auto-generated method stub
            return null;
        }

        public void write(int bRemaining) throws IOException {
            // TODO Auto-generated method stub
            
        }

        public void setHeader(String headerId, String headerValue) {
            // TODO Auto-generated method stub
            
        }

        public void setContentLength(int len) {
            // TODO Auto-generated method stub
            
        }

        public void flushBuffer() {
            // TODO Auto-generated method stub
            
        }

        public void resetBuffer() {
            // TODO Auto-generated method stub
            
        }

        public void setContentType(String contentType) {
            // TODO Auto-generated method stub
            
        }

    }
    
    
    /**
     * Test that a request for a resource using a JVB resource set can be passed as
     * a {@link FileUpload}.
     */
    public void testJVBFileUploadResourceRequest() throws Exception {
        
        MockRequest request = new MockRequest();
        request.setServletPath(""/test"");
        request.setMethod(""GET"");
        request.setParameter(""file"", ""Test.JVB"");        
        request.setPostFormData(""file"", ""Test.JVB"");
        request.setPostFormString(""file"", ""Test.JVB"");
        
        request.setPostFormString(""file"", ""Test.JVB"");
        request.setPostFormUrlEncoded(""file"", ""Test.JVB"");

        File file = new File(""./src/test/resources/jvm/test/classes/com/pmdesigns/jvc/test.jvb"");
        
        FileUpload upload = new ServletFileUpload(
            new ServletFileUpload.DiskUploadField(file)
        );
        
        HttpServletRequest servletRequest = new MockServletRequest(request,
                                                                  ""POST"", ""POST"", ""POST"", upload);

        JVCRequestContext t = new JVCRequestContextImpl(new HttpServletResponseWrapper(new HttpServletResponse(
                                                                                                                servletRequest,
                                                                                                                null)));

        String resp = t.makeLink(
                               ""./src/test/resources/jvm/test/classes/com/pmdesigns/jvc/test.jvb"",
                               ""./test/resources/jvm/test/classes/com/pmdesigns/jvc/test.jvb"");
        assertEquals(""jvb test.jvb\n"", resp);

        String postFormFilename = ""test.jvb"";
        MockFileUpload fileUpload = new MockFileUpload(request,
                                                      response,
                                                      file,
                                                      postFormFilename);
        String postFormUrlEncodedFilename = ""Test.JVB"";
        String postFormUrlEncodedPostFormFilename = ""Test.JVB"";        
        MockFileUpload fileUploadEncoded = new MockFileUpload(request,
                                                              response,
                                                              file,
                                                              postFormFilename,
                                                              postFormUrlEncodedFilename,
                                                              postFormUrlEncodedPostFormFilename);

        t = new JVCRequestContextImpl(new HttpServletResponseWrapper(new HttpServletResponse(
                                                                fileUpload,
                                                                postFormUrlEncoded)));                      
        resp = t.makeLink(
                               ""./src/test/resources/jvm/test/classes/com/pmdesigns/jvc/test.jvb"",
                               ""./test/resources/jvm/test/classes/com/pmdesigns/jvc/test.jvb"",
                               ""index.jvb"");          
        assertEquals(""jvf index.jvf\njvf index2."
d770e7d3-b743-4c0f-a64d-612cafbfa3b7,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_8Test.java,52.72912526130676,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to create an html anchor link tag
     *
     * @param anchor the text in an anchor link
     * @param path the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }
}
","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {

    @Test
    public void test() {
        // Make a test link to test the request context
        HttpURLConnection connection = (HttpURLConnection)javax.servlet.GenericServlet.class.getResource(""default-file.xml"").openConnection();
        connection.addRequestProperty(""Content-Disposition"",""form-data;""+""filename=test.txt;filename*=test.xml;name=XML"");
		String ctxt = connection.getResponseContentType();
        System.out.println(connection.getResponseHeader(""Connection""));  

        // Asserts that the content type is set and matches the content type
        assertEquals(txt.contentType(),""text/xml"");
        assertEquals(ctxt,""form-data; name=XML"");
        assertTrue(connection.getResponseHeader(""Connection"")!=null);

        // Add extra information to the test link
        connection.setRequestProperty(""Content-Type"", ""text/plain"");
        connection.setRequestProperty(""Accept-Charset"", ""ISO-8859-1"");
        StringBuffer testLink = new StringBuffer();
        testLink.append(""http://google.com "");
        testLink.append(connection.getRequestProperty(""User-Agent""));
        testLink.append(""/"");
        testLink.append(""HTTP/1.0"");
        testLink.append("" "");
        testLink.append(""Content-Disposition: form-data; name=\""image\""; filename=\""images/image.png\"""");
        testLink.append(""\n\n"");
//        testLink.append(""Content-Disposition: attachment; name=\""image\""; filename=\""images/image.png\"""" +
//                ""Content-Type: image/png\n\n"");
        testLink.append(""Content-Disposition: form-data; name=\""name\""; filename=\""test.txt\""\n"") ; 
        testLink.append(""Content-Type: application/octet-stream\n\n"");
        testLink.append(""Content-Disposition: form-data; name=\""image\""; filename=\""images/image.png\"""");
        testLink.append(""\n\n"");
        testLink.append(""Content-Type: application/octet-stream\n\n"");
        connection.setRequestProperty(""Content-Length"", Integer.toString(testLink.length()));
        //System.out.println(testLink.toString());
//        connection.setResponseContentType(""text/plain;charset=UTF-8"");
    }

    static void doTest(HttpServletRequest request, String path, String flash) throws IOException {
        String url  = request.getRequestURI();
    Path    fl   = Paths.getFile(path);
    if (fl.seeksUp(""/"")) {
        int idx = url.lastIndexOf(""/"");
        flash   = url.substring(idx+1);
    }
        //System.out.println(""flash: ""+flash);
        // Make a test link to test the request context
        StringBuilder sb = new StringBuilder();
        HttpServletRequest proxyRequest = new HttpServletRequestWrapper(request) {
            @Override
            public String getHeaderField(int posn) {
                if (posn==0)
                    return super.getHeaderField(posn);
                return super.getHeaderField(posn);
            }
        };
        HttpURLConnection conn = (HttpURLConnection)proxyRequest.openConnection();
        conn.setRequestProperty(""Content-Length"", Integer.toString(
                conn.getContentLength()));
        conn.setRequestProperty(""Accept"", ""file"");
        conn.setRequestMethod(""GET"");
        conn.setRequestProperty(""User-Agent"", ""JSCouchDB"");
        conn.setRequestProperty(""Accept-Charset"", ""ISO-8859-1"");
        conn.setRequestProperty(""Connection"", ""keep-alive"");
        // Note: this has also been added when writing out the javadoc comments
        conn.setRequestProperty(""Destination"", ""/"");
        conn.setRequestProperty(""X-Requested-With"", ""XMLHttpRequest"");
        conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        conn.setDoOutput(true);
   
        // Output the HTML version of the request with no Flash added
        Writer writer = new StringWriter();
        ServletOutputStream wd = new ServletOutputStream(writer);
        outputRequest(writer, conn, flash);
        wd.close(); 
        outputRequest(writer, conn, ""No Flash"");
        conn.disconnect();
        
        File ff = new File(""/Users/mdclinux/JVCResults"");
        if (!ff.delete()) {
            System.err.println(""Error: Could not delete ""+ff.getAbsolutePath());
        }
        
        request.getContextPath();
        String file = ""index.html"";
        String relPath = request.getContextPath()+request.getServletPath();
        path = relPath+path;
        String content = writer.toString();
        // Convert the path to a relative path by removing everything after
        // the root of the request.
        int ct = content.indexOf(path);
        content = content.substring(0,ct);
        writer.close();
        streamToFile(writer.toString(), ff);
        writer = null;
    
        // Check whether the request has a form file inside the response
        // (using the ServletFileUpload class for this case).
        boolean foundFormFile = false;
        ServletFileUpload upload = new ServletFileUpload();
        try {
            FileUpload uploadFile = upload.parseRequest(request);
            foundFormFile = (uploadFile.getFileMap().size()>0);
        } catch (IllegalArgumentException e) {
            foundFormFile = false;
        }
        
        // Check whether the file has"
89199106-fca6-4b7e-ac17-cb3b554e7940,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_9Test.java,55.35021924972534,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * Convenience method to retrieve a value from the flash
     *
     * @param key the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }
}
","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {

	public static final String FILE = ""File Content"";
	public static final List<String> METHODS = Arrays.asList(""GET"", ""DELETE"", ""POST"", ""PUT"", ""HEAD"", ""DELETE"", ""PUT"", ""TRACE"");
	public static final String QUERY_ARG = ""q=p"";
	public static final String REDIRECT_METHOD = ""redirect"";
	public static final String URL = ""jvc.jmashall.com"";
	public static final String CONTENT_TYPE_HEADER = ""content-type"";
	
	@Test
	public void testMethod() throws IOException{
		
		final RequestContext requestContext = new RequestContext(
				URL, 
				CONTENT_TYPE_HEADER, 
				HTTP_METHOD.NAME,
				METHODS.get(1), 
				QUERY_ARG);
			 
        RequestProcessor requestprocessor = new RequestProcessor();
        requestprocessor.process(requestContext);
	}
	
	@Test
	public void testGetRequestWithMethod() throws IOException = 
			{ 
			HttpServletRequest request = new HttpServletRequest(){ 
				@Override
				public String getMethod(){ 
					return ""GET""; 
				}};
			
		final RequestContext requestContext = new RequestContext(
			URL, 
			CONTENT_TYPE_HEADER, 
			HTTP_METHOD, 
			METHODS.get(1), 
			QUERY_ARG);
		
        final HttpServletResponse response = new HttpServletResponse(){ 
            @Override
            public void sendError(int code, String message){
                setStatus(code);
                // Set all response headers to have the same content-type
                // to indicate that the requested page is not the first page.
                // It's the page that got redirected.
                setHeader(""Content-Type"", """");
                setHeader(""Content-Length"", """");
            } 
            };
        
		requestprocessor = new RequestProcessor(requestContext, response);
		requestprocessor.process(request);
        
	}
	
	@Test
	public void testGetRequestWithFormData() throws IOException{
	    HttpServletRequest request = new HttpServletRequest(){ 
			@Override
			public String getMethod(){ 
				return ""Get""; 
			}};
	    ServletContextServlet servletContext = new ServletContextServlet();
		ServletWrapper servletWrapper = new ServletWrapper(
				new HttpServletConfig() {

				@Override
				public java.util.List<String> getInitParameterNames() {
					return Arrays.asList(
							""jvc.jmashall.com"", 
							""jvc.jmashall.com/jvc"", 
							""jvc.jmashall.com/files"", 
							""jvc.jmashall.com/redirect"", 
							""jvc.jmashall.com/redirect"", 
							""jvc.jmashall.com/error"", 
							""jvc.jmashall.com/redirect""
							);
				}
			});

		servletContext.addServlet(new ServletHolder(new HttpServlet()), ""/"");
		servletWrapper.addServlet(new ServletHolder(new HttpServlet()), ""/"");

		this.servletContext = servletContext;
		
	    RequestProcessor requestprocessor = new RequestProcessor(null, null);
		requestprocessor.process(request);
	}

	@Test
	public void testRequestWithoutRedirect_POST(){
		HttpServletRequest request = new HttpServletRequest(){ 
			@Override
			public String getMethod(){ 
				return ""POST"";
			}};
		ServletContextServlet servletContext = new ServletContextServlet();
		ServletWrapper servletWrapper = new ServletWrapper(
				new HttpServletConfig() {

					@Override
					public java.util.List<String> getInitParameterNames() {
						return Arrays.asList(""jvc.jmashall.com"", ""jvc.jmashall.com/files"");
					}});

		try{
			servletContext.addServlet(new ServletHolder(new HttpServlet()), ""/"");
		} catch(Exception ex) {
			System.out.println(ex);
			throw new RuntimeException(ex);
		}

		requestprocessor = new RequestProcessor(null, null);
		requestprocessor.process(request);	
    }
	
	@Test
	public void testRedirect_POST(){
		String jvcJson = ""{\n \t\t\t\""files_type\"" : \""files\"",\n  \t\t\""redirect_uri\"" : \""""+ jvcPath + \""\"",\n  \t\t\""query\"" : \""q=p\"",\n   	  \""http_method\"" : \""POST\""\n  }"";
		HttpServletRequest request = new HttpServletRequest(){ 
			@Override
			public String getMethod(){ 
				return ""POST"";
			}};
		ServletContextServlet servletContext = new ServletContextServlet();
		ServletWrapper servletWrapper = new ServletWrapper(
				new HttpServletConfig() {

					@Override
					public java.util.List<String> getInitParameterNames() {
						return Arrays.asList(
								""jvc.jmashall.com"",
								""jvc.jmashall.com/jvc"", 
								""jvc.jmashall.com/files"",
								""jvc.jmashall.com/redirect"",
								""jvc.jmashall.com/redirect""
								);
					}});

		try{
			servletContext.addServlet(new ServletHolder(new HttpServlet()), ""/"");
		} catch(Exception ex) {
			System.out.println(ex);
			throw new RuntimeException(ex);
		}

		servletContext = servletContext;
		
		requestprocessor = new RequestProcessor(null, null);
		requestprocessor.process(request);
    }
    
    public static final class Request"
d0ba02db-a671-4166-a2ae-539eabe776e0,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCDispatcher.java,54.98029327392578,length,"// JVCDispatcher.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;

/**
 * JVC request dispatching servlet
 *
 * @author mike dooley
 */
public class JVCDispatcher extends HttpServlet {

    /**
     * Return the thread local request context
     *
     * @return the JVCRequestContext associated with the current thread or null
     */
    public static JVCRequestContext getRC() {
        return ctxHolder.get();
    }
}
","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains one unit test case for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains one unit test case for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {

	/**
	 * The main method of the JVCDispatcherTest class.
	 * It dispatches requests to JVC.
	 * Method {@link Base64Coder#encode(byte[])} may be overridden to use {@link Base64Coder}
	 * to encrypt the request's body; otherwise the request's body will be encoded by default.
	 *
	 * @param args
	 *		a command-line argument
	 * @throws Exception
	 *		thrown if something went wrong
	 */
	public static void main(String[] args) throws Exception {
		HttpURLConnection urlc = null;
		FileOutputStream fos = null;
		HttpServletRequest request = null;
		HttpServletResponse response = null;
		String requestString = null;

		try {
			response = new HttpServletResponse();



			// Setup a ServletContext that will call the method {@link JVCGenerator#encode(byte[])}
			javax.servlet.ServletContext sc = new javax.servlet.ServletContext();
			sc.setAttribute(""javax.servlet.dispatch.Class"", ""com.pmdesigns.jvc.tools.JVCHandler"");
			javax.servlet.ServletContext sc2 = new javax.servlet.ServletContext();
			sc2.setAttribute(""javax.servlet.dispatch.Class"", ""com.pmdesigns.jvc.tools.JVCRequestDispatcher"");

			// Configure the JVA request dispatcher
			sc.setAttribute(""java.util.Enumeration"", new Enumeration());
			sc.setAttribute(""java.lang.invoke.LambdaMetafactory"", new LambdaMetafactory());
			sc2.setAttribute(""java.util.Enumeration"", new Enumeration());
			sc2.setAttribute(""java.lang.invoke.LambdaMetafactory"", new LambdaMetafactory());

			// Launch a new JVM and set the initial request environment
			sc.setAttribute(""java.util.ServiceLoader"", new ServiceLoader());
			sc2.setAttribute(""java.util.ServiceLoader"", new ServiceLoader());

			sc.setAttribute(""javax.servlet.context.tempdir"", new File(""."") );
			String dir = ""/tmp/Test/"";
			sc.setAttribute(""javax.servlet.context.tempdir"", new StringBuffer(dir));
			
			sc.setAttribute(""com.pmdesigns.jvc.tools.JVC_javaconfig"", ""com.pmdesigns.jvc.tools.JVCGenerator"");
			final StringBuffer sb = new StringBuffer();
			ClassLoader loader = ClassLoader.getSystemClassLoader() ;
			Method loadCmp = CMP_method ;
			try {
				loadCmp=Class.forName(loader.getClass().getName(),""java.lang.ClassLoader"");
			} catch (ClassNotFoundException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException e)  {
				e.printStackTrace();
			}
			
			try {
				Class c = Class.forName(loader.getClass().getName(),""java.lang.ClassLoader"");
				Constructor ctor = null;	
				while (ctor!= null && ctor.getDeclaringClass() == c) {
					ctor = (Constructor) ctor.getConstructor(new Class[0]);
				}
				assertTrue(""CMP request class was not found"", 
					          ctor!= null);
				
				ClassLoader baseLoader = (ClassLoader) c.getMethod(""getResourceAsStream"").invoke(loader);
				//System.out.println(""Base loader ""+baseLoader);
				System.out.println(""Base loader: ""+baseLoader);
				ClassLoader loader1 = (ClassLoader) ctor.newInstance(null);
				//System.out.println(""Loader1 "" + loader1);
				
			} catch (Exception e) {
				e.printStackTrace();
				fail(""Unable to load ""+loader+"" class."");
			}

			// Initialize the response writer for this test
			fos = new FileOutputStream(""resources/resp.txt"");
			urlc = getRC();
			//urlc is still null because this test just adds content to the file writer. 
			response = new HttpServletResponse();						
			response.setContentType(""text/plain"");
			ResponseWriter writer = new ResponseWriter(response);

			// Configure a JVO for the test
			javax.servlet.http.HttpServletRequest req = new javax.servlet.http.HttpServletRequest(new javax.servlet.http.HttpServletRequest(), ""POST"");

			requestString = JVCGenerator.encode(new byte[] {42, 84});


			try {
				urlc.setRequestEntity(new NameValuePair(""postdata"", requestString), ""text/plain"");
			} catch (Throwable t) {
				Throwable e = t;
			}
			//urlc.addHeader(""Cookie"", ""fav2=4; Expires=Thu, 01-Jan-99T00:00:01Z"");
			int i = 0;
			while (true) {
				try {
					i = urlc.getRequestMethod();
					System.out.println(""GET Request: ""+i);
					
					try {
						urlc.connect();
						writer.write(sb.toString());
						writer.flush();
						urlc.disconnect();
					} catch (IOException e) {
						urlc = getRC();
					}
					System.out.println(""Response ""+i+"":"");
					urlc.getResponseCode();

				} catch (Throwable t) {
					t.printStackTrace();
				}
				System.out.println();
				try {
					Thread.sleep(1000*30);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

		
			try {
				JVCHandler.getJVCHandler().execute(request);
			} catch (Exception e) {
				if (e.getMessage().contains(""Exception was "") && e.getMessage().contains"
