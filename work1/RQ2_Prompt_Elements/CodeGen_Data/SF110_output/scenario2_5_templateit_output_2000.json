[
{
    "choices": [
        {
            "text": "\n    /**\n     * Test of getFormat function, of the {@link HSSFDataFormat#getFormat(String)} method.\n     * Asserts that the method returns the correct number of entries.\n     */\n    @Test\n    public void testGetFormat() {\n        HSSFDataFormat format = new HSSFDataFormat();\n        try {\n            format.getFormat(\"TEST-\");\n        } catch (IllegalArgumentException e) {\n            fail(\"IllegalFormatException should not be thrown\");\n        }\n    }\n    \n    /**\n     * Test of moveBuiltins function, of the {@link HSSFDataFormat#getFormat(String)} method.\n     */\n    @Test\n    public void testMoveBuiltins() {\n        HSSFDataFormat format = new HSSFDataFormat();\n        Vector testVector = getFormats();\n        Iterator i;\n        i = testVector.listIterator();\n        while (i.hasNext()) {\n            format.moveBuiltins();\n        }\n        assertTrue(format.builtInsFormats.isEmpty());\n    }\n    \n    /**\n     * Test of getBuiltInFormats function, of the {@link HSSFDataFormat#getFormat(String)} method.\n     */\n    @Test\n    public void testGetBuiltInFormats() {\n        HSSFDataFormat format = new HSSFDataFormat();\n        List testVector = getFormats();\n        for (int i = 0; i < testVector.size(); i++) {\n            format.getBuiltInFormats();\n        }\n    }\n    \n    /**\n     * Test of moved fromFormats function, of the {@link HSSFDataFormat#getFormat(String)} function.\n     */\n    @Test\n    public void testMovedFromFormats() {\n        HSSFDataFormat format = new HSSFDataFormat();\n        getFormats();\n        String newFormat = \"TEST-\";\n        format.moveFromFormats(newFormat);\n        format.moveToFormats(newFormat);\n        assertEquals(format.movedFormats.size() - 1, format.movedBuiltins.size());\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": " \n\t\n\t/**\n\t* Get the format index that matches the given format.\n\t*\n\t* @param format string matching a built in format\n\t* @return index of format.\n\t*/\n\tstatic short getFormatID(String format) {\n\t\treturn 0;\n\t}\n\n    /**\n     * Format record.\n     */\n    static private class FormatRecordTest {\n        private short fid = 0;\n        private boolean headerInLine = true;\n        private boolean formatUsed = false;\n    }\n    \n    private static final int[] FMT_1 = new int[] {1};\n    private static final int[] FMT_2 = new int[] {2};\n    private static final int[] FMT_3 = new int[] {3};\n    private static final int[] FMT_4 = new int[] {4};\n    private static final int[] FMT_5 = new int[] {5};\n\tprivate static final int[] FMT_6 = new int[] {6};\n\tprivate static final int[] FMT_7 = new int[] {7};\n\t\n    // Test the getFormat method -- the builtin format has an extra byte\n    /**\n     * No additional tests\n     */\n    @Test\n    public void testGetFormatID() {\n        // null\n        HSSFDataFormat.getFormatID(null);\n\n        // empty\n        HSSFDataFormat.getFormatID(null, FMT_1);\n    }\n\n    /**\n     *\n     * All tests\n     */\n    /**\n     * test GetVersion\n     */\n    @Test\n    public void testGetVersion() {\n        HSSFDataFormat.getVersion(new File(new File(\".\").cwd() + \"\\\\\" + \"HSSFDataFormatTest\\\\\" + \"hssf.dataformat.test.bin\").toURI());\n\n        HSSFDataFormat.getVersion(new File(\"\\\\\" + \"HSSFDataFormatTest\\\\\" + \"hssf.dataformat.test.bin\").toURI());\n    }\n\n\t@Test\n    public void testGetFieldNames() {\n\t\tHSSFDataFormat format = new HSSFDataFormat();\n\t\t\n\t\tfinal List<String> names = format.getFieldNames();\n\t\t\n\t\t// test the builtin format\n\t\tfinal Iterator<String> i = namespace.listIterator(namespace.size());\n\t\twhile (i.hasNext()) {\n\t\t\tshort f = i.nextIndex();\n\t\t\tassertTrue(\"is builtin format not included in names\", f < FMT_7);\n\t\t\tnames.set(f, i.next());\n\t\t}\n\n\t}\n\n\n\t@Test\n    public void testGetFieldType() throws FormatException {\n        final ListIterator<FormatRecord> i = formatRecords.listIterator(1);\n        @SuppressWarnings(\"unused\")\n\t\tint fv = i.nextIndex();\n        namespace.clear();\n        i.remove();\n\n\t\t\n        i = formatRecords.listIterator(0);\n        i.nextIndex();\n        assertNull(\"Expected a name\", i.next());\n\n        \n        i = formatRecords.listIterator(1);\n        assertTrue(\"expected\", i.hasNext());\n        FormatRecord record = i.next();\n\n\t\tfinal int f = record.getFID();\n\t\tassertTrue(namespace.equals(f));\n\t\t\n\t\ti.next();\n\t\tassertNull(\"expected\", i.next());\n\n\t\t\n\t\ti = formatRecords.listIterator(0);\n\t\ti.nextIndex();\n\t\tassertFalse(\"Expected no more elements\", i.hasNext());\n\t\t\n        assertEquals(0, namespace.size());\n\n\t\ti.reset();\n\n        namespace.clear();\n        i.set(0);\n\n        \n        i = formatRecords.listIterator(1);\n        i.nextIndex();\n        assertNull(\"Expected a name\", i.next());\n\n        \n        i = formatRecords.listIterator(2);\n        i.nextIndex();\n        assertTrue(\"expected\", i.hasNext());\n\n        \n        i.nextIndex();\n        assertTrue(\"expected\", i.hasNext());\n\n        \n        i = formatRecords.listIterator(2);\n        i.nextIndex();\n        assertTrue(\"expected\", i.hasNext());\n        \n\t\t\n\t}\n\n    @Test\n    public void testGetFormat() {\n        final ListIterator<FormatRecord> i = formatRecords.listIterator(0);\n        assertTrue(\"format should not be null\", i.hasNext());\n        assertNotNull(\"must not be null format record\", i.next());\n        \n        final ListIterator<FormatRecord> oldI = formatRecords.listIterator(2);\n        final FormatRecord r = formatRecords.next();\n\n        assertTrue(\"format should have 2 fields\", r.getFieldCount() > 0);\n        long f;\n        for (int idx = 0; idx < r.getFieldCount(); idx++)\n            assertEquals(\"format contains a field with the wrong ID\", i.next(), oldI.next());\n\n        i.nextIndex();\n        r.setFID(i.next());\n\n        formatRecords.remove();\n        assertFalse(\"format should not contain an FID\", r.getFID() <= FMT_1);\n    }\n\n\n\t/**\n\t * @since 1.4.2\n\t */\n\t@Test\n\tpublic void testGetWorkbook() {\n\t\n\t\tListIterator<Workbook> i = Workbook.listIterator(1);\n\t\tassertTrue(\"workbook should not be null\", i.hasNext());\n\t\tassertNotNull(\"must not be null workbook\", i.next());\n\t\t\n\t\tListIterator<FormatRecord> old_i = formatRecords.listIterator(2);\n        FormatRecord r;\n\t\twhile (i.hasNext()) {\n\t\t\tr = i.next();\n\t\t\tassertTrue(\"workbook should contain a name record\", r",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate HSSFDataFormat format = new HSSFDataFormat();\n\tprivate Workbook wb;\n\tprivate short formatIndex = 10000;\n\t@Test\n\tpublic void testCreateFromTextFormat_DefaultFormat() throws Exception {\n\t\tformat = new HSSFDataFormat(true);\n\t\tassertEquals(0, formatIndex);\n\t}\n\t@Test\n\tpublic void testCreateFromTextFormat() throws Exception {\n\t\twb = new Workbook();\n\t\t\n\t\t{\n            byte[] bytes = new byte[10 * 1024 * 1024];\n            for (int i=0; i<10*1024*1024; i++) {\n                bytes[i] = (byte) i;\n            }\n            Workbook wb2 = new Workbook(bytes);\n\t\t\tbyte[] bytes2 = wb2.getData();\n\t\t\tassertEquals(10*1024*1024, (int)bytes2[0]);\n\t\t}\n\t\t{\n            byte[] bytes = new byte[10*1024*1024];\n            for (int i=0; i<10*1024*1024; i++) {\n                bytes[i] = (byte)i;\n            }\n            Workbook wb2 = new Workbook(files());\n\t\t\tbyte[] bytes2 = wb2.getData();\n\t\t\tassertEquals(10*1024*1024, (int)bytes2[0]);\n\t\t}\n\t\tfor (int i=0; i<10*1024*1024; i++) {\n\t\t\tByteRange br = new ByteRange(byte[10*1024*1024],(i<<10));\n            List formats = format.getFormat(br.getType());\n\t\t\tif (br.getData().length <= 10*1024*1024) {\n\t\t\t\tassertEquals(1, formats.size());\n\t\t\t\tassertTrue(formatIndex == Integer.parseInt(formats.get(0)));\n\t\t\t} else {\n\t\t\t\tassertEquals(0, formats.size());\n\t\t\t}\n\t\t\tformatIndex++;\n\t\t}\n\t}\n\t@Test\n\tpublic void testCreateFormatsFromFiles() throws Exception {\n\t\twb = new Workbook();\n\t\t\n\t\t{\n            byte[] bytes = new byte[filesLength];\n            for (int i=0; i<filesLength; i++) {\n                bytes[i] = (byte)i;\n            }\n            Workbook wb2 = new Workbook(bytes);\n\t\t\tbyte[] bytes2 = wb2.getData();\n\t\t\tassertEquals(filesLength, (int)bytes2[0]);\n\t\t}\n\t\t{\n            byte[] bytes = new byte[filesLength];\n            for (int i=0; i<filesLength; i++) {\n                bytes[i] = (byte)i;\n            }\n            Workbook wb2 = new Workbook(files());\n\t\t\tbyte[] bytes2 = wb2.getData();\n\t\t\tassertEquals(filesLength, (int)bytes2[0]);\n\t\t}\n\t\t{\n            byte[] bytes = new byte[filesLength];\n            for (int i=0; i<filesLength; i++) {\n                bytes[i] = (byte)i;\n            }\n            List formats = format.getFormat(files);\n\t\t\tassertEquals(1, formats.size());\n\t\t\tassertTrue(formatIndex == Integer.parseInt(formats.get(0)));\n\t\t}\n\t}\n\t@Test\n\tpublic void testCreateRangesFromFiles() throws Exception {\n\t\twb = new Workbook();\n\t\t\n\t\t{\n            byte[] bytes = new byte[filesLength];\n            for (int i=0; i<filesLength; i++) {\n                bytes[i] = (byte)i;\n            }\n            Workbook wb2 = new Workbook(bytes);\n\t\t\tbyte[] bytes2 = wb2.getData();\n\t\t\tassertEquals(filesLength, (int)bytes2[0]);\n\t\t}\n\t\t{\n            byte[] bytes = new byte[filesLength];\n            for (int i=0; i<filesLength; i++) {\n                bytes[i] = (byte)i;\n            }\n            List formats = format.getRange(files);\n\t\t\tassertEquals(1, formats.size());\n\t\t\tassertTrue(formatIndex == Integer.parseInt(formats.get(0)));\n\t\t}\n\t}\n\t@Test\n\tpublic void testIndex() {\n\t\tIterator i = format.getBuiltinFormats().iterator();\n\t\tshort index = 0 ;\n\t\twhile (i.hasNext()) {\n\t\t\tFormatRecord record = (FormatRecord)i.next();\n\t\t\tassertEquals((((short) index) <<10), record.getFormatRecord().getRecordFormatIndex());\n\t\t\ti.hasNext();\n\t\t}\n\t}\n\t@Test\n\tpublic void testGetRanges() throws Exception {\n\t\tList formats = format.getRanges();\n\t\tint size = formats.size();\n\t\t\n\t\tassertEquals(0, size);\n\t\t{\n            ByteRange br = new ByteRange(new byte[6200*1024], 0);\n            FormatRecord range1 = new FormatRecord((byte)0, br.getRangeType());\n            FormatRecord range2 = new FormatRecord((byte)1, br.getRangeType());\n            byte[] bytes = range1.getBytes();\n            ByteRange result = format.getRange(bytes);\n            assertArrayEquals(br.getBytes(), null);\n            assertArrayEquals(new byte[6200*1024], result.getBytes());\n            assertEquals(1, ((int)bytes) & 6);\n            br.setBytes(bytes);\n            result = format.getRange(bytes);\n            assertArrayEquals(br.getBytes(), result.getBytes());\n            assertEquals(6200*1024, result.getBytes().length);\n            br.setBytes(bytes);\n            result = format.getRange(bytes);\n            assertEquals(\"range type\", br.getRangeType(), ((byte)result.getRangeType()",
            "finish_reason": "length"
        },
        {
            "text": "/**\n     * @see HSSFDataFormat#getFormat(String)\n     */\n    @Test\n    void testGetFormat() {\n        HSSFDataFormat df = new HSSFDataFormat();\n        assertEquals(\"getFormat returns default formatting\", Workbook.FMT_TEXT,df.getFormat(Workbook.FMT_TEXT));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_TEXT,df.getFormat(Workbook.FMT_NUMBER));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_ROUNDPCD,df.getFormat(Workbook.FMT_CURRENCY));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_TRUE, df.getFormat(Workbook.FMT_BOOL));\n        assertEquals(\"getFormat returns default formatting\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_ROUNDPCD));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_BLANK));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_ROUNDPCD));  \n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_TINYBLUE, df.getFormat(Workbook.FMT_PRIMARYLANGLE));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_BLACK, df.getFormat(Workbook.FMT_BLACK));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_BLACK, df.getFormat(Workbook.FMT_DARKBLUE));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_CALIFORMROUND, df.getFormat(Workbook.FMT_CALIFORMF));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_RUPVB, df.getFormat(Workbook.FMT_RUPV));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_CUPV, df.getFormat(Workbook.FMT_CUP));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_DFLTB, df.getFormat(Workbook.FMT_DOTTBL));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_DUPLETL, df.getFormat(Workbook.FMT_DOUGHPLE));\n        assertEquals(\"getFormat returns custom formatting\", Workbook.FMT_LATIN1, df.getFormat(Workbook.FMT_LATIN1));\n        Vector<String> list = df.getFormats();\n        assertEquals(\"getFormat returns custom formatting for list and getFormatFormat\", \n                     Workbook.FMT_TEXT, df.getFormat(Workbook.FMT_TEXT), list.get(0));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", \n                     Workbook.FMT_NUMBER, df.getFormat(Workbook.FMT_NUMBER), list.get(1));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_ROUNDPCD), list.get(2));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_CURRENCY, df.getFormat(Workbook.FMT_CURRENCY), list.get(3));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_TRUE, df.getFormat(Workbook.FMT_BOOL), list.get(4));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_BLANK, df.getFormat(Workbook.FMT_BLANK), list.get(5));\n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_ROUNDPCD), list.get(6));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_ROUNDPCD, df.getFormat(Workbook.FMT_ROUNDPCD), list.get(7));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_DARKBLUE, df.getFormat(Workbook.FMT_PRIMARYLANGLE), list.get(8));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_RUPVB, df.getFormat(Workbook.FMT_RUPV), list.get(9));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_RUPV, df.getFormat(Workbook.FMT_RUPV), list.get(10));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_CUPV, df.getFormat(Workbook.FMT_CUP), list.get(11));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormatFormat\", Workbook.FMT_DFLTB, df.getFormat(Workbook.FMT_DOTTBL), list.get(12));  \n        assertEquals(\"getFormat returns custom formatting for list,getFormateFormat\", Workbook.FMT_DUPLETL, df.getFormat(Workbook.FMT_DOUGHPLE), list.get(13));  \n",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     * Constructor.\n     */\n    public HSSFDataFormatTest() {\n    }\n\t\t\n    /**\n     * Test object.\n     */\n    @Test\n    public void testGetFormat() {\n        HSSFDataFormat d1 = new HSSFDataFormat();\n        HSSFDataFormat d2 = new HSSFDataFormat();\n        d1.getFormat(null);\n        d1.getFormat(System.getProperty(\"user.dir\"));\n        d2.getFormat(null);\n        d2.getFormat(System.getProperty(\"user.dir\"));\n    }\n    \n    /**\n     * Test the {@link HSSFDataFormat#getFormat(String)} method.\n     */\n    @Test\n    public void testGetFormat( ) {\n        HSSFDataFormat d1 = new HSSFDataFormat(\"TEXT\");\n        HSSFDataFormat d2 = new HSSFDataFormat(\"TEXT\");\n        d1.getFormat(System.getProperty(\"user.dir\"));\n        d2.getFormat(System.getProperty(\"user.dir\"));\n        assertEquals(\"TEXT\", d1.getFormat(null));\n        assertEquals(\"TEXT\", d2.getFormat(null));\n    }\n    \n    /**\n     * Test of moveBuiltins method, of class HSSFDataFormat.\n     */\n    @Test\n    public void testMoveBuiltins( ) {\n        Workbook workbook = null;\n        FormatRecord formatRecord = null;\n        try {\n            workbook = new Workbook();\n            workbook.createFreezePane();\n            // create a format record\n            formatRecord = new FormatRecord();\n            formatRecord.setName(\"TEXT\");\n            workbook.getWorksheets().add(0, formatRecord);\n\n            // test to see that it has been moved\n            boolean saved = workbook.moveBuiltins(false);\n            assertTrue(saved);\n\n        } catch (Throwable ex) {\n            ex.printStackTrace();\n        } finally {\n            if (workbook!= null)\n            \tworkbook.release();\n        }\n    }\n    \n    /**\n     * Test of getClasses method, of class HSSFDataFormat.\n     */\n    @Test\n    public void testHSSFDataFormat( ) {\n        HSSFDataFormat d = new HSSFDataFormat();\n        Vector<Object> classList = new Vector<Object>();\n        classList.add(d);\n        classList.add(HSSFDataFormat.class);\n        assertEquals(classList, d.getClasses());\n\n    }\n    \n    /**\n     * Test of getClasses method, of class HSSFDataFormat.\n     */\n    @Test\n    public void testHasNoClasses( ) {\n        HSSFDataFormat d = new HSSFDataFormat();\n        assertFalse(d.hasClasses());\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private Class<?> c;\n    private Object o;\n    private ListIterator listIterator;\n    private List<FormatRecord> originalFormatRecords;\n    \n    public HSSFDataFormatTest(Class<?> c) {\n        this.c = c;\n    }\n\n    @Test\n    public void test1() {\n            /*\n            Get the dataformat record for the specified format.\n            This record is looked up in the data-format table in order\n            to obtain the format.\n            It must have a single record set, no data records or data\n            records can be found\n            */\n        System.out.println(\"TEST 1\");\n        o = getFormat((String) c.newInstance().toString());\n        DataFormatRecord dfr = (DataFormatRecord)c.newInstance().newInstance();\n        System.out.println(\"GetDataFormat() returned: \" + dfr.toString());\n        dfr.setIndex(0);\n        System.out.println(\"GetDataFormat() returned with data format index: \" + dfr.getIndex());\n    }\n\n    @Test\n    public void test2() {\n        /*\n        Create one text record for the format,\n            1. move this record (or create a new record)\n            2. Look up the data format record for the format\n\n        */\n        System.out.println(\"TEST 2\");\n        String s = \"A new record.\";\n        FormatRecord fnr = new FormatRecord();\n        \n        originalFormatRecords = new Vector();\n        listIterator = c.newInstance().listIterator();\n        \n        while (listIterator.hasNext()) {\n            FormatRecord fr = (FormatRecord)listIterator.next();\n            originalFormatRecords.add(fr);\n        }\n        listIterator = originalFormatRecords.listIterator();\n        int rsi = 0;\n        int rsi2 = 0;\n        \n        while(listIterator.hasNext() && originalFormatRecords.size() > 1) {\n            FormatRecord fr = (FormatRecord)listIterator.next();\n            rsi2 = rsi;\n            rsi++;\n            originalFormatRecords.remove(fr);\n        }\n        \n        while(listIterator.hasNext()) {\n            FormatRecord fr = (FormatRecord)listIterator.next();\n            if(fr.getIndex() == 0) {\n                System.out.println(\"format index: \" + fr.getIndex());\n                /*\n                Assert.assertEquals(\"format index is not as expected\", rsi2, fr.getIndex());\n                Assert.assertEquals(\"Format records have different types\", o, fr.getTypeDefinition());\n                Assert.assertNotNull(\"getDataFormat.newInstance() returns null\", fr.getDataFormat());\n                Assert.assertNotNull(\"originalFormat records contain original data formats in their records\", fr.getDataFormat().getAll());\n                Assert.assertEquals(\"Format records found\", 1, fr.getDataFormat().getAll().size());\n                DataFormatRecord dfr = (DataFormatRecord) fr.getDataFormat().getAll().get(0);\n                System.out.println(\"Format record is: \" + fr.getDataFormat());\n                */\n                System.out.println(\"Format record found\");\n                DataFormatRecord dfr = new DataFormatRecord();\n                ((Formats)dfr.getTypeDefinition()).m_format = (short) fr.getIndex();\n                ((Workbook)dfr.getDataFormat()).addWorkbook(o);\n                dfr.setIndex(0);\n                dfr.setIndex(rsi2);\n                dfr.setDataFormat(c);\n                dataFormatDefinitions.add(dfr);\n            }\n        }\n        listIterator = originalFormatRecords.listIterator();\n        \n        while(listIterator.hasNext());\n        \n        FormatRecord fr = (FormatRecord)listIterator.next();\n        listIterator = c.newInstance().listIterator();\n        System.out.println(\"FormatRecord found: \" + fr.toString());\n        System.out.println(\"Create Data Format Record: \" + new DFRSerializable(dr, \"\"));\n        System.out.println(\"Data Format records: \" + dataFormatDefinitions.size() + \" (\" + dr.length() + \")\");\n    }\n\n    @Test\n    public void test3() {\n        System.out.println(\"Test 3\");\n    }\n\n    private void addDataFormatsToRecord(DataFormatRecord dr) {\n        Iterator<Iterator<FormatRecord>> i = dataFormatDefinitions.iterator();\n        while (i.hasNext()) {\n            dflist.addAll((Vector<FormatRecord>)i.next().getAll());\n        }\n    }\n\n    DataFormatRecord getDataFormatsFromRecord(Object o, Workbook wb) {\n        if (o == null) {\n            return new DataFormatRecord();\n        } else {\n            return (DataFormatRecord) o;\n        }\n    }\n    \n    DataFormatRecord addFormatToRecord(DataFormatRecord record) {\n        if (o.getClass().getSuperclass() == DataFormatRecord.class) {\n            return (DataFormatRecord) o;\n        } else {\n            return new DataFormatRecord();\n        }\n    }\n    \n    DataFormatRecord getLatestDataFormatRecord(Object o, Workbook wb) {\n        if (o == null) {\n            return null;\n        } else {\n            return (DataFormatRecord) o;\n        }\n    }\n\n    List<FormatRecord> getDataFormatRecords(Workbook wb) {\n        List<DataFormatRecord> drl = new Vector<DataFormatRecord>();\n        for (Iterator<DataFormatRecord> i = drl.iterator(); i.hasNext();) {\n            drl.add(i.next());\n        }\n        \n        return drl;\n    }\n\n    Vector<DataFormatRecord>",
            "finish_reason": "length"
        },
        {
            "text": "\n    private static final Workbook WORKBOOK = new Workbook();\n    private static final int COL_NUM = 10;\n\n    @Test\n    public void testGetFormat() throws Exception {\n        int colNum = 3;\n        short dataFormat = HSSFDataFormat.getFormat(\"TEXT\");\n        byte[] dataFormatData = new byte[4];\n        HSSFParseUtil.writeFormat(dataFormat, dataFormatData);\n\n        dataFormatData[0] = (byte) 0xFF;\n        dataFormatData[1] = (byte) 0xFF;\n        dataFormatData[2] = (byte) 0xFF;\n        dataFormatData[3] = (byte) 0xFF;\n\n        Vector formats = new Vector();\n        HSSFDataFormat hssfDataFormat = new HSSFDataFormat(false);\n        hssfDataFormat.setFormat(dataFormat, true);\n        assertEquals(HSSFDataFormat.getFormat(\"TEXT\"),hssfDataFormat.getFormat(dataFormat));\n        \n        extractColIndex(colNum, formats, 0);\n\n        String[] formatNames = {\n            \"TEXT\", \"BOOLEAN\", \"NUM\", \"NUM\"};\n        Vector stringVals = new Vector();\n        for (int i = 0; i < formatNames.length; i++) {\n            HSSFParseUtil.writeFormatName(formatNames[i], stringVals);\n            Iterator iter = stringVals.listIterator();\n            while (iter.hasNext()) {\n                HSSFDataFormat.writeFormatName((short) i, (short) iter.nextIndex(), (short) iter.next());\n            }\n        }\n        FormatRecord record = new FormatRecord();\n        record.add(colNum, 0, formats);\n        record.write(WORKBOOK);\n\n        for (int i = 0; i < 3; i++) {\n            HSSFParseUtil.readFormatTable(record, colNum <=i? colNum+1 : 0, colNum <=i? colNum+2 : 2, true);\n        }\n\n        colNum = 7;\n        assertEquals(HSSFDataFormat.getFormat(\"TEXT\"), HSSFDataFormat.getFormat(dataFormat));\n    }\n    \n    @Test\n    public void testToString() throws Exception {\n        int colNum = 6;\n        byte dataFormat = 1;\n        byte[] dataFormatData= new byte[4];\n        HSSFParseUtil.writeFormat(dataFormat, dataFormatData);\n\n        Vector types = new Vector();\n        HSSFDataFormat hssfDataFormat = new HSSFDataFormat(false);\n        hssfDataFormat.setFormat(dataFormat, true);\n        assertEquals(hssfDataFormat.toString(), \"FORMAT='NONE'\");\n\n        extractColIndex(colNum, types, 0);\n\n        ListIterator iter = types.listIterator();\n        while (iter.hasNext()) {\n            System.out.println(\"type: \" + ((List) iter.next()).size());\n        }\n\n        workbook.extractSheet((List) types.get(0), 0);\n\n        ListListIterator<Workbook.DataFormat> listListIterator = workbook.getDataFormatList();\n        for (int i = 1; i < listListIterator.size(); i++) {\n            System.out.println(\"formatName: \" + listListIterator.get(i).description);\n        }\n\n    }\n\t\n    private void extractColIndex(int aColNum, Vector v, int index) {\n        if (aColNum < v.size() && aColNum >= 0) {\n            v.setSize(aColNum);\n            Iterator pos = v.iterator();\n            while (pos.hasNext()) {\n                Short value = (Short) pos.next();\n                if (value > index) {\n                    v.set(aColNum, value);\n                } else {\n                    assertTrue(\"Found data after position\", pos.hasNext());\n                }\n            }\n        }\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final String DOUBLE = \".\";\n\t\tprivate static final String DOUBLE2 = \".5\";\n\t\tprivate static final String SHORT = \"000\";\n\t\tprivate static final String SHORT2 = \"0000\";\n\t\tprivate Vector formatters;\n\t\tprivate DataFormatRecord df;\n\t\tprivate List<FormatRecord> formatters;\n\t\tprivate byte[] rdata;\n\t\tprivate int position;\n\t\tprivate FormatRecord readerFormat;\n\t\tprivate FormatRecord writerFormat;\n\t\tprivate Iterator<String> formatIter;\n\t\n\n\t/** tests getFormat function */\n\t@Test public void testGetFormat() throws Exception {\n\t\ttestGetFormat(false);\n\t}\n\n\t/** tests getFormat function */\n\t@Test public void testGetFormat() throws Exception {\n\t\ttestGetFormat(true);\n\t}\n\n\tprivate void testGetFormat(boolean useRDF) throws Exception {\n\t\tif (useRDF)\n\t\t\trunRDFGetFormatTest();\n\t\telse\n\t\t\trunWriterGetFormatTest();\n\t}\n\n\tprivate void runRDFGetFormatTest() throws Exception {\n\t\tformatters = new Vector();\n\t\tformatIter = null;\n\t\tdo {\n\t\t\treaderFormat = new FormatRecord();\n\t\t\tdoInitGetFormat(readerFormat);\n\t\t\t// Test for Format Record after initialization.\n\t\t\tformatters.addElement(readerFormat);\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Double.class); // double\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Double.class); // double\n\t\t\tposition = new FormatRecord().setShortName(SHORT);\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Double.class); // double\n\t\t\tposition = new FormatRecord().setShortName(SHORT2);\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Double.class); // double\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Double.class); // double\n\t\t\t//\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE, Double.class, Double.class); // double\n\t\t\tposition = new FormatRecord().addColumn(DOUBLE2, Double.class, Double.class); // double\n\t\t} while (formatters.size() < 20);\n\t\tcheckIterator(formatIter, formatters, useRDF);\n\t\tdoGetFormatTest(useRDF) ;\n\t\tdoGetFormatTest(useRDF, 1);\n\t}\n\n\tprivate void runWriterGetFormatTest() throws Exception {\n\t\tStringWriter sw;\n\t\tdoInitGetFormat(new FormatRecord());\n\t\t// Test for Format Record after initialization.\n\t\twriterFormat = new FormatRecord();\n\t\twriteRecord(writerFormat, sw);\n\n\t\tposition = writeRecord(writerFormat);\n\t\tcheckIterator(wfFormatIter, writerFmt, useRDF);\n\t\tposition = writeRecord(writerFormat, sw);\n\t\tcheckIterator(swFFormatIter, null, useRDF);\n\t\tposition = writeRecord(writerFormat);\n\t}\n\n\tprivate void doTestFormatRecord() throws Exception {\n\t\t\t//test for formatting record\n\t\twriteRecord(writerFormat, new StringWriter(this, formatters));\n\t\tStringBuffer sb = new StringBuffer(writerFormat.getRecord().getValue().length\n\t\t\t\t* \" 0: \");\n\t\tsb.append(formatters.get(writeIt(writerFormat)));\n\t\tcheckIterator(wbFormatIter, sb, useRDF);\n\t\tsb = new StringBuffer(writerFormat.getRecord().getValue().length\n\t\t\t\t* \" 0: \");\n\t\tsb.append(writeIt(writerFormat));\n\t\tcheckIterator(wfFormatIter, sb, useRDF);\n\t}\n\n\tprivate void writeRecord(Workbook wb, StringWriter sb) throws Exception {\n\t\tsb.append(wb.getFormatRecordIndex(readerFormat)).append(\":\")\n\t\t\t\t.append(wb.getFormatRecordIndex(writerFormat));\n\t}\n\n\tprivate void checkIterator(ListIterator<FormatRecord> iter) {\n\t\tassertTrue(iter.hasNext());\n\t}\n\n\tprivate void doGetFormatTest(boolean useRDF, int n) {\n\t\tSystem.err.print(\"\\t{ \");\n\t\tif (useRDF)\n\t\t\tnew DataFormatRecord().write(formatters, position, n, readerFormat, writerFormat);\n\t\telse\n\t\t\tnew DataFormatRecord().write(formatters, position, n);\n\t\tSystem.err.print(readerFmt());\n\t\tSystem.err.print(\" }\");\n\t}\n\n\tprivate void writeRecord(FormatRecord format, StringWriter sw) {\n\t\t// Test for Write Record after initialization.\n\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Double.class); // float\n\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Double.class); // float\n\t\tposition = new FormatRecord().setShortName(SHORT);\n\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Float.class); // float\n\t\tposition = new FormatRecord().setShortName(SHORT2);\n\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Float.class); // float\n\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Float.class); // float\n\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Double.class); // double\n\t\tposition = new FormatRecord().addColumn(DOUBLE2, DOUBLE2, Double.class); // double\n\t\tposition = new FormatRecord().addColumn(DOUBLE, DOUBLE, Double.class); // double\n\n\t\tPositionRecord positionRecord = new PositionRecord();\n\t\tpositionRecord.write(format, position, 1);\n\t\tpositionRecord.write(format, position, 2);\n\n\t\tPositionRecord positionRecord1 = new PositionRecord();\n\t\tpositionRecord1.",
            "finish_reason": "length"
        },
        {
            "text": "/**\n         * Tests the default <code>getFormat</code> interface method.\n         * @throws Exception if a problem occurs.\n         */\n        @Test\n\t\tpublic void getFormat() throws Exception {\n\t\tHSSFDataFormatHSSFDataFormat d;\n\t\td = new HSSFDataFormatHSSFDataFormat();\n\t\tString format = \"TEXT\";\n\t\tHSSFCellStyle style = new HSSFCellStyle();\n\t\tstyle.setAlignment(HSSFCellStyle.ALIGNRIGHT);\n\t\tHSSFFont dataFont = new HSSFFont();\n\t\tdataFont.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);\n\t\tdataFont.setFontName(\"Arial\");\n\t\tList styleList = new Vector();\n\t\tstyleList.add(style);\n\t\tstyleList.add(dataFont);\n\t\td.setStyleList(styleList);\n\t\tList workbookCells = new Vector();\n\t\t//getFormat()\n\t\tHSSFDataFormat d2 = d.getFormat(\"TEXT\");\n\t\tString text = d.getText(\"TEXT\");\n\t\tassertEquals(\"\", format, text);\n\t\tassertTrue(\"Workbook is empty\", workbookCells.size()==0);\n\t\td.setStyleList(null);\n\t\td.setWorkbookCells(workbookCells);\n\t\t//getFormat()\n\t\td = d2;\n\t\tString txt = d.getText(\"TEXT\");\n\t\tassertEquals(\"\", text, txt);\n\t\tassertTrue(\"Workbook is empty\", workbookCells.size()==0);\n\t\tHSSFDataFormat d3 = d.getFormat(\"TEXT\");\n\t\td3.moveTo(20);\n\t\ttext = d3.getText(\"TEXT\");\n\t\tassertEquals(\"\", text, d.getText(\"TEXT\"));\n\t\t\t}\n\t\t/**\n         * Tests the default <code>getDefaultStyle</code> method.\n         * @throws Exception if a problem occurs.\n         */\n        @Test\n\t\tpublic void getDefaultStyle() throws Exception {\n\t\tHSSFDataFormat d;\n\t\td = new HSSFDataFormatHSSFDataFormat();\n\t\tList<HSSFCellStyle> styleList = new Vector<HSSFCellStyle>();\n\t\tHSSFFont dataFont = new HSSFFont();\n\t\tdataFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);\n\t\tdataFont.setFontName(\"Arial\");\n\t\tbyte[] styleBytes = new byte[] {(byte) 0x20, (byte) 0x10, (byte) 0x30, (byte) 0x00};\n\t\tHSSFDataFormat d2 = new HSSFDataFormatHSSFDataFormat(dataFont, \"TEXT\", null, null, null, styleBytes, styleList);\n\t\tList<HSSFCellStyle> styleList2 = new Vector<HSSFCellStyle>();\n\t\tstyleList2.add(new HSSFCellStyle());\n\t\td.setStyleList(styleList);\n\t\td.setWorkbookCells(new Vector<HSSFCell>());\n\t\tHSSFDataFormat d3 = d.getDefaultStyle();\n\t\tassertEquals(\"\", d.getStyleList(), d3.getStyleList());\n\t\tlistOfColors(styleList2, 4);\n\t\tlistOfColors(styleList, 4);\n\t\tHSSFDataFormat d4 = new HSSFDataFormatHSSFDataFormat(d3, \"TEXT\", \"DEF\", \"\\r\\n\", \"\\r\\n\", null, styleList2);\n\t\tHSSFDataFormat d5 = new HSSFDataFormatHSSFDataFormat(d4, \"TEXT\", \"_DEF\", \"\\r\\n\", \"\\r\\n\", null, null);\n\t\tHSSFDataFormat d6 = new HSSFDataFormatHSSFDataFormat(d3, \"TEXT\", \"\", \"\\r\\n\", \"\\r\\n\", styleList2, null);\n\t\td5.moveTo(20);\n\t\td5.addMissingCharacters(2);\n\t\tVector<String> txt = d6.getMissingString();\n\t\tHashSet<String> missingStrings = new HashSet<String>();\n\t\tListIterator i = txt.listIterator();\n\t\twhile (i.hasNext()) {\n\t\t\tmissingStrings.add(i.next());\n\t\t}\n\t\tassertEquals(\"\", missingStrings.toString(), d5.getMissingString());\n\t\ti = txt.listIterator();\n\t\tHSSFDataFormat d7 = new HSSFDataFormatHSSFDataFormat(d6, \"TEXT\", \"DEF\", \"\\r\\n\", \"\\r\\n\", styleList2, null);\n\t\tVector<String> wrong = new Vector<String>();\n\t\twrong.add(\"_DEF\");\n\t\tListIterator wIt = wrong.listIterator();\n\t\twhile (wIt.hasNext()) {\n\t\t\twIt.next();\n\t\t}\n\t\tVector<String> wrong2 = new Vector<String>();\n\t\twrong2.add(\"DEF\");\n\t\tListIterator wIt2 = wrong2.listIterator();\n\t\twhile (wIt2.hasNext()) {\n\t\t\twIt2.next();\n\t\t}\n\t\tassertEquals(\"\", d5.getMissingString(), d6.getMissingString());\n\t\tassertEquals(\"\", d5.getMissingString(), d7.getMissingString());\n\t\t}\n  }\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * This is a single-class instance of the {@link HSSFDataFormat}.\n     *\n     * @see HSSFDataFormat\n     */\n\tprivate HSSFDataFormat dataformat = new HSSFDataFormat();\n\n    private static final String WORKBOOK_FILE_2 = \"test_open_in_file2.xlsx\";\n    private static final String WORKBOOK_FILE_1 = \"test_get_builtin_file.xlsx\";\n    private static final String WORKBOOK_FILE_0 = \"test_get_default_file.xlsx\";\n    private static final String WORKBOOK_FILE_BINARY = \"test_get_binary_file.xlsx\";\n    private static final String NEW_BUILTIN_FORMATTED_DATA = \"Binary data\";\n\n    ///////////////////////////////////////////////////////////////////////////////\n\t\n\tint workbookCount = 0;\n\n\tint expectedNumberOfFormats = 3;\n\n\tshort formatIndex1;\n\n\tshort formatIndex2;\n\n\tshort dataOffsetFormat1;\n\n\tshort dataOffsetFormat2;\n\n\tint xlsxIndex1;\n\n\tint xlsxIndex2;\n\n\tint dataIndex1;\n\n\tint dataIndex2;\n\n\tprivate static final FormatRecord testFormatRecord[] = {new FormatRecord(\n\t\t\tnew short[] {new Short(42), new Short(13), new Long(12)}, \n\t\t\t\"Binary data\", new String(\"Binary data\"), null),\n\t\t\tnew FormatRecord(new short[] {new Short(0), new Short(5)}, \"TEXT\", \"\", null)};\n\n\tprivate String defaultWorkbookPath;\n\tprivate String worksheetsPath;\n\t\n\t/*\n\t * Constructor tests.\n\t */\n\n    /**\n     * Tests getBuiltin().\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testGetBuiltin() throws Exception {\n        assertEquals(HSSFDataFormat.getBuiltinFormat().value, dataformat.getBuiltinFormat().value);\n        int i = this.workbookCount;\n\n        Workbook wb = workbook();\n\n        this.expectedNumberOfFormats = i;\n        assertEquals(i, HSSFDataFormat.getBuiltinFormat().value);\n        assertEquals(HSSFDataFormat.getType(), HSSFDataFormat.getBuiltinFormat().type);\n\n        i = 0;\n\n        assertEquals(i, HSSFDataFormat.getFormat(new String(\"TEXT\")));\n        assertEquals(i, HSSFDataFormat.getFormat(new String(\"Binary data\")));\n\n        assertEquals(\"Text/Binary data\", HSSFDataFormat.getFormatNames());\n\n        assertEquals(\"No type.\", this.defaultWorkbookPath);\n        assertEquals(\"No sheets.\", this.worksheetsPath);\n        assertEquals(xlsxIndex1, 1);\n        assertEquals(xlsxIndex2, 0);\n        assertEquals(dataIndex1, 0);\n        assertEquals(dataIndex2, 1);\n        assertEquals(dataOffsetFormat1, XlsxData.BYTE_SIZE);\n        assertEquals(dataOffsetFormat2, XlsxData.BYTE_SIZE);\n\n        assertFalse(\"No builtin format loaded.\", HSSFDataFormat.getBuiltinFormat().enabled);\n        assertFalse(\"No builtin format loaded.\", HSSFDataFormat.getBuiltinFormat().fileName.length > 0);\n        assertFalse(\"There is no embedded builtin format.\", HSSFDataFormat.getBuiltinFormat().fileName.endsWith(\"XLS\"));\n    }\n\n    /**\n     * Test getFormat().\n     *\n     * @see HSSFDataFormat#getFormat(String)\n     * @throws Exception\n     */\n    @Test\n    public void testGetFormat() throws Exception {\n        assertEquals(formatIndex1, HSSFDataFormat.getFormat(new String(\"TEXT\")));\n        assertEquals(formatIndex2, HSSFDataFormat.getFormat(new String(\"Binary data\")));\n        assertEquals(new Long(12), HSSFDataFormat.getFormat(null).getDataOffset());\n        assertEquals(new Long(13), HSSFDataFormat.getFormat(null).getDataOffset());\n        assertEquals(new Long(12), HSSFDataFormat.getFormat(null).getDataOffset());\n    }\n\n    /*\n     * File tests.\n     */\n\n    /**\n     * Tests addFiles()\n     * \n     * @throws Exception\n     */\n    @Test\n    public void testAddFiles() throws Exception {\n        workbook().getSheets().getByName(0).addFile(worksheetsPath, WORKBOOK_FILE_0);\n        workbook().getSheets().getByName(0).addFile(worksheetsPath, WORKBOOK_FILE_2);\n        workbook().getSheets().getByName(0).addFile(new File(WORKBOOK_FILE_2), 0);\n        workbook().getSheets().getByName(0).addFile(new File(WORKBOOK_FILE_0), 0);\n\n        int xlsxIndex = workbook().getSheets().get(0).getSheetIndex(0);\n\n        worksheet(xlsxIndex).getXlsBlocks().addFile(new File(WORKBOOK_FILE_0));\n        worksheet(xlsxIndex).getXlsBlocks().addFile(new File(WORKBOOK_FILE_1));\n\n        int dataIndex = 0;\n        int dataOffset = 0;\n        //int dataLength = 0;\n\n        for (int i = 0; i < workbook().getSheets().size(); i++) {\n            for (int j = 0; j < workbook().getSheets().get(i).getNumOfSheetData(); j++) {\n                for (int k = 0; k < testFormatRecord",
            "finish_reason": "length"
        }
    ],
    "id": "791ba33a-fad6-4f2d-8a93-09e19938357e",
    "prompt_id": "/EvoSuiteBenchmark/original/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat.java",
    "original_code": "// HSSFDataFormat.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\n\npublic class HSSFDataFormat {\n\n    /**\n     * Get the format index that matches the given format\n     *  string, creating a new format entry if required.\n     * Aliases text to the proper format as required.\n     *\n     * @param format string matching a built in format\n     * @return index of format.\n     */\n    public short getFormat(String format) {\n        ListIterator i;\n        int ind;\n        if (format.toUpperCase().equals(\"TEXT\"))\n            format = \"@\";\n        if (!movedBuiltins) {\n            i = builtinFormats.listIterator();\n            while (i.hasNext()) {\n                ind = i.nextIndex();\n                if (formats.size() < ind + 1) {\n                    formats.setSize(ind + 1);\n                }\n                formats.set(ind, i.next());\n            }\n            movedBuiltins = true;\n        }\n        i = formats.listIterator();\n        while (i.hasNext()) {\n            ind = i.nextIndex();\n            if (format.equals(i.next()))\n                return (short) ind;\n        }\n        ind = workbook.getFormat(format, true);\n        if (formats.size() <= ind)\n            formats.setSize(ind + 1);\n        formats.set(ind, format);\n        return (short) ind;\n    }\n}\n",
    "test_prompt": "// HSSFDataFormatTest.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSSFDataFormat}.\n* It contains one unit test case for the {@link HSSFDataFormat#getFormat(String)} method.\n*/\nclass HSSFDataFormatTest {",
    "time_taken": 53.86425828933716,
    "usage": {
        "prompt_tokens": 672
    }
}
]