ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
25185a92-6172-4223-b9e6-7fab66e3e0b0,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_0Test.java,50.86648440361023,stop,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    /**
     * The <code>org.saxpath.driver</code> property name.
     */
    public static final String DRIVER_PROPERTY = ""org.saxpath.driver"";

    /**
     * The default driver to use if none is configured.
     */
    protected static final String DEFAULT_DRIVER = ""com.werken.saxpath.XPathReader"";

    /**
     * Should the default driver be used
     */
    private static boolean USE_DEFAULT = true;

    /**
     * Create an <code>XPathReader</code> using the value of
     *  the <code>org.saxpath.driver</code> system property.
     *
     *  @return An instance of the <code>XPathReader</code> specified
     *          by the <code>org.saxpath.driver</code> property.
     *
     *  @throws SAXPathException if the property is unset, or if
     *          the class can not be instantiated for some reason.,
     *          or if the class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader() throws SAXPathException;

    /**
     * Create an <code>XPathReader</code> using the passed
     *  in class name.
     *
     *  @param className The name of the class which implements
     *         the <code>XPathReader</code> interface.
     *
     *  @throws SAXPathException if the class can not be
     *          instantiated for some reason, or if the
     *          class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader(String className) throws SAXPathException;
}
","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {
/**
		 * Tests default Constructor for <code>createReader</code> method
		 * without passing in a className, that only uses the
		 * <code>DEFAULT_DRIVER</code> property.
		 *
		 * @throws SAXPathException
		 */
		@Test(expected=SAXPathException.class)
		public void test0Constructor_NO_DRIVER() throws SAXPathException{
			xpathReaderFactory = 
				new XPathReaderFactory.XPathReaderFactory(
					DEFAULT_DRIVER);
        }

		/**
		 * Tests Constructor for <code>createReader</code> method
		 * with passing in a className and a driver to be used
		 * in a system property.
		 *
		 * @throws SAXPathException
		 */
		@Test(expected=SAXPathException.class)
		public void test0Constructor_USE_DRIVER() throws SAXPathException{
			System.setProperty(DRIVER_PROPERTY, 
					DEFAULT_DRIVER);
			xpathReaderFactory = 
				new XPathReaderFactory.XPathReaderFactory(""com.foo.driver.XPathReader"");
        }
}
"
b361e15b-3439-4f20-92b5-8ebe0a9ba375,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_1Test.java,49.434234857559204,stop,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    /**
     * The <code>org.saxpath.driver</code> property name.
     */
    public static final String DRIVER_PROPERTY = ""org.saxpath.driver"";

    /**
     * The default driver to use if none is configured.
     */
    protected static final String DEFAULT_DRIVER = ""com.werken.saxpath.XPathReader"";

    /**
     * Should the default driver be used
     */
    private static boolean USE_DEFAULT = true;

    /**
     * Create an <code>XPathReader</code> using the value of
     *  the <code>org.saxpath.driver</code> system property.
     *
     *  @return An instance of the <code>XPathReader</code> specified
     *          by the <code>org.saxpath.driver</code> property.
     *
     *  @throws SAXPathException if the property is unset, or if
     *          the class can not be instantiated for some reason.,
     *          or if the class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader() throws SAXPathException;

    /**
     * Create an <code>XPathReader</code> using the passed
     *  in class name.
     *
     *  @param className The name of the class which implements
     *         the <code>XPathReader</code> interface.
     *
     *  @throws SAXPathException if the class can not be
     *          instantiated for some reason, or if the
     *          class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader(String className) throws SAXPathException;
}
","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {

	/**
	 * Tests creating an <code>XPathReader</code> using the value of
	 * the <code>org.saxpath.driver</code> system property.
	 *
	 * @see XPathReaderFactory#createReader(String)
	 * @throws SAXPathException if the property is unset, or if
	 *          the class can not be instantiated for some reason
	 * @throws IOException if the IOException is thrown
	 */
	@Test
	public void testGetReader() throws SAXPathException, IOException {
		try {
			System.getProperties().put(DRIVER_PROPERTY, ""UTF-8"");

			new XPathReaderFactory ().createReader(""org.saxpath.helpers.Test_1"");
			fail();
		}
		catch (SAXPathException e) {
			assertNotNull (e.getMessage());
			assertNotNull (e.getCause());
		}
		catch (IOException e) {
			assertNotNull (e.getMessage());
			assertNotNull (e.getCause());
		}
	}

	/**
	 * Tests creating an <code>XPathReader</code> using the passed in
	 * class name.
	 *
	 * @see XPathReaderFactory#createReader(String)
	 * @throws SAXPathException if the class can not be
	 *          instantiated for some reason, or if
	 *          the class doesn't implement the <code>XPathReader</code>
	 *          interface.
	 * @throws IOException if the IOException is thrown
	 */
	@Test
	public void testGetReader_1() throws SAXPathException, IOException {
		try {
			new XPathReaderFactory ().createReader(""org.saxpath.helpers.Test_1"");
			fail();
		}
		catch (SAXPathException e) {
			assertNotNull (e.getMessage());
			assertNotNull (e.getCause());
		}
		catch (IOException e) {
			assertNull (e.getMessage());
			assertNull (e.getCause());
		}
	}
}
"
