ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
0fb15027-dee1-4598-a0f2-f0584c384a6a,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java,56.48852801322937,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the maximal health
     */
    public int _getMaxLP() {
        return maxHealth;
    }
}
","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {

    @Test
    public void test_getMaxLP() {
        SimpleCombatant sm = new SimpleCombatant();
        assertEquals(0, sm.maxHealth);
        
        Combatant c1 = new SimpleCombatant(0.9, 0.1);
        Combatant c2 = new SimpleCombatant(0.9, 0.1);
        Combatant c3 = new SimpleCombatant(0.9, 0.1);
        
        // Set of all weapons used to check the defense formula
        Set<WeaponData> usedWeapons = new HashSet<>();
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));
        usedWeapons.add(new WeaponData(""gun"", 0.9, 0.1, 0.001, ""weapon""));

        // Add one Combatant which is controlled by a Weapon
        Combatant obs1 = new SimpleCombatantObserver(c1);
        observationList.add(obs1);
        
        // set up the control by a Weapon
        Weapon p01 = new Weapon(""gum"", 0.9, 0.1, 0.001, ""weapon"", usedWeapons);
        WeaponData p01_weaponData = new WeaponData(""gun"", 0.9, 0.1, 0);
        CharacterClass cc1 = new CharacterClass(""de"", 1);
        
        // set up the control by a Weapon
        Weapon p03 = new Weapon(""Gun"", 0.9, 0.1, 0.001, ""weapon"", usedWeapons);
        CharacterClass cc3 = new CharacterClass(""de"", 3);
        
        // add another one by a Weapon
        CombatantState c = new CombatantState(""p01"", p01, cc1);
        setObservers(p01, c);
        observationList.add(c);
        observationList.add(obs1);
        
        // set up the control by a Weapon
        Weapon p06 = new Weapon(""gun"", 0.9, 0.1, 0.001, ""weapon"", usedWeapons);
        CharacterClass cc6 = new CharacterClass(""de"", 6);
        
        // set up the control by a Weapon
        Weapon p07 = new Weapon(""Gun"", 0.9, 0.1, 0.001, ""weapon"", usedWeapons);
        CharacterClass cc06 = new CharacterClass(""de"", 6);
        
        // add another one by a Weapon
        CombatantState c2 = new CombatantState(""p06"", p06, cc6);
        setObservers(p06, c2);
        observationList.add(c2);
        observationList.add(obs1);
        
        // Set of all Weapons owned by the test
        CharacterClass cc = new CharacterClass(""de"", 0);
        ccList.add(cc);
        ccList.add(cc6);
        ccList.add(cc06);
        
        // set up the control by a Weapon
        CharacterClass cc2 = new CharacterClass(""de"", 1);
        observationList.add(c2);
        observationList.add(obs1);
        
        // set up the control by a Weapon
        CharacterClass cc3 = new CharacterClass(""de"", 3);
        CharacterClass cc7 = new CharacterClass(""de"", 6);
                
        // set-up the control by a Weapon
        CharacterClass cc8 = new CharacterClass(""de"", 8);
        CharacterClass cc10 = new CharacterClass(""de"", 10);
        CharacterClass cc12 = new CharacterClass(""de"", 12);
        
        GameData d = new GameData(""p01"", c1);
        d._setCharacterClass(cc1);
        d._setCombatantState(c);
        d._setObservers(obs1);
        
        d++;
        d._setCombatantState(c2);
        
        d.setCharacterClass(cc3);
        d.setCombatantState(c);
        d.setObservers(obs1);
        
        d.setCharacterClass(cc07);
        d.setCombatantState(c2);
        d.setObservers(obs1);
        
        d.setCharacterClass(cc6);
        d.setCombatantState(c2);
        
        d++;
        d._setCombatantState(c3);
        
        d.setCombatantState(c);
        d.setObservers(obs1);
        
        d.setCombatantState(c2);
        d.setObservers(obs1);
        
        d._setCombatantState(c11);
        
        d.setCombatantState(c12);
        
        d.setCombatantState(c6);
        
        combatantList.add(cc);
        combatantList.add(cc7);
        compositeList.add(d);
        
        combatantList.remove(new CharacterClass(""de"", 3));
        combatantList.remove(new CharacterClass(""de"", 6));
        combatantList.remove(new CharacterClass(""de"", 8));
        combatantList.remove(new CharacterClass(""de"", 10));
        
        debug(""Created two combatants: cc1"", cc1, cc1.getCombatant());
        debug(""Created comcombatant cc7"", cc7, cc7.getCombatant());
        debug(""Created cc6"", cc6, cc6.getCombatant());
        debug(""Created cc8"", cc8, cc8.getCombatant());
        
        assertEquals(0, p01.maxHealth);
        assertEquals(2, p06.maxHealth);
        
        // Check that two non-observers have no influence over the 2 others
        CharacterClass cc9"
839ff7ae-7ee7-4d36-aa27-848d6a416aa3,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java,54.58688712120056,stop,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}
","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {
@Test
		public void testGetCurrentLP() {
			// setup
            SimpleCombatant ob = new SimpleCombatant();
        	CombatantState stat = new CombatantState();
            Set<CombatantSide> sideSet = new HashSet<CombatantSide>();
            sideSet.add(CombatantSide.OUTSIDE);
            sideSet.add(CombatantSide.INSIDE);
            Area a;
            WeaponData wd;
            Set<CombatantSide> pSet;
            CharacterClass cs;
            SectorBonus sec;
            Weapon w;
			Combatant c1;
			
			// test
			c1 = ob.getCombatant(sideSet, stat, a, wd, cs, sec, pSet, w);
			assertNotNull(c1);
			assertTrue(c1!= null);
			assertEquals(c1.getID(), CombatantState.CREATED);
		}
}"
41c52952-2c09-4e23-b42f-2d4a2db00dba,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java,60.94090008735657,stop,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException {
        return (PlayerConfiguration) clone();
    }
}
","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {

    // This variable will be used for unlocking the player's locks
    private PlayerConfiguration configuration;
		
    // This variable will be used for locking the player's locks
    private Player player;
		
    // This variable will be used for unlocking the player's locks
    private Lock lock = new ReentrantLock();
    
    // This variable will be used to track when the player has no more locks
            
    /**
     * Use the constructor.
     * It can be used by several different test cases for the same case.
     *
     * @param configuration that has to be used by the test
    */
    public PlayerConfiguration_0Test(PlayerConfiguration configuration) {
        this.configuration = configuration;
    }

    
    /**
     *
     * Sets up the test. 
     * This will first lock the player's locks.
     */
    @Test
	public void testPlayerConfig() {
        assertNotNull(""The test object cannot be null"", configuration);
        System.out.println(""The test has been run"");
        
        lock.lock();
        try {
            player = configuration.getPlayer();
            player.getPlayerConfiguration().getScoreboardConfiguration().setWorldScore(1);
        } catch (Exception e) {
            fail(""An exception occurred"", e);
        }
        lock.unlock();
        
        assertNotNull(""There can't be an exception thrown"", player);
	}
    
    /**
     *
     * @throws CloneNotSupportedException
     */
    @Test
    public void testsCloneObject() throws CloneNotSupportedException {

    	Lock lock = new ReentrantLock();
    	// This variable will be used for unlocking the player's locks
        player = (Player) player.clone();
        lock.lock();
        try {
            assertNotNull(""The player cannot be null"", player);
        } finally {
            lock.unlock();
        }    
    }
    
	/** {@inheritDoc} */
	@Override
	public PlayerConfiguration clone() throws CloneNotSupportedException {
		return ((PlayerConfiguration) super.clone());
	}

}"
3318c220-9012-42e3-ab9e-239d30f0a2e0,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java,60.65722417831421,stop,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets() {
        return SHOW_MOVETARGETS;
    }
}
","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {

	/**
	 * Check {@link Configuration#showMoveTargets()} is not called after instantiation.
	 * @throws Exception Exception.
	 */
	@Test
	public void testShow_moveTargets() throws Exception {
		Set<String> ln = new HashSet<>();
		Set<String> lmn = new HashSet<>();
		
        Configuration.showMoveTargets();
		ln = new HashSet<>();
		ln.add(""a text"");
		ln.add(""a text"");
		ln.add(""an arbitrary string"");
		ln.add(""an arbitrary string"");
		ln.add(""one of the other ln"");
        Configuration.showMoveTargets();
		
		ln = new HashSet<String>();
		ln.add(""no tesstag"");
		ln.add(""a string with two entries"");
        ln.add(Configuration.MOVETARGETS_NOMOVETARGETFILE);
		Configuration.showMoveTargets();
		
        ln = new HashSet<String>();
        ln.add(Configuration.MOVETARGETS_NOMOVETARGETFILE2);
        ln.add(""one of the other ln"");
		Configuration.showMoveTargets();
	}
	/**
	 * Check the code used by {@link Configuration#MOVETARGETS_NOMOVETARGETSUBSCRIBE}
	 * @throws Exception Exception.
	 */
	//FIXME @Test
	@Test
	public void testNomovetarget() throws Exception {
		Configuration.NOMOVETARGETFILE = Configuration.MOVETARGETS_NOMOVETARGETFILE;
		Configuration.NOMOVETARGETFILE2 = Configuration.MOVETARGETS_NOMOVETARGETFILE2;
		Configuration.NOMOVETARGETFILE3 = Configuration.MOVETARGETS_NOMOVETARGETFILE3  ;
		Configuration.NOMOVETARGETSUBSCRIBE = Boolean.TRUE;
		
        Configuration.showMoveTargets();
		
		assertEquals(""0"", Configuration.MOVETARGETS_NOMOVETARGETSUBSCRIBE);
		assertEquals(""an arbitrary string with 2 entries"", Configuration.MOVETARGETS_NOMOVETARGETFILE);
	}
   
}"
f00a9bb5-cf4c-4e34-ace1-a1dc72f93695,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java,60.8793249130249,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline() {
        return SHOW_SHOOTLINE;
    }
}
","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {

	final Configuration conf = Configuration.instance();
	final Lock lock = new ReentrantLock();

	@Test
	void testShootLineVisible() throws Exception {
//		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
//		conf.addParameter(ShootMode.SHOOTLINE, ""true"");

//		lock.lock();
//		conf.setShootLine(""true"");
//		lock.unlock();
//		assertEquals(""true"", conf.getShootLine());
//		assertTrue(conf.getBoolean(ShootMode.SHOOTLINE, false));
		assertTrue(conf.containsFlag(ShootMode.SHOOTLINE, ""false""));
		assertFalse(conf.containsFlag(ShootMode.SHOOTLINE, ""true""));
		
		conf.setShootLine(""false"");
		lock.lock();
		conf.setShootLine(""false"");
		lock.unlock();
		lock.lock();
		conf.setShootLine(""true"");
	}
	
	@Test
	void testShootLineUnvisible() throws Exception {
		
		conf.addParameter(ShootMode.HAS_SHOOTLINE, ""true"");
        
        // This is a hack for the current PlayerConfiguration
//			conf.setParameter(Configuration.SHOOTLINE_SHOOTLINE_MODE, ""false"");
//			conf.setParameter(Configuration.SHOOTLINE_SHOOTLINE_MODIFIER, new Boolean(((Boolean)conf.getFlag(SHOOTLINE_SHOOTLINE_MODIFIER, ""false"") + 1)).toString());
//			
//			conf.setShootLinesAllowed(conf.getIntegerParameter(SHOOTLINE_SHOOTLINE_MODIFIER, 1));
			
//			lock.lock();
//			conf.setShootLine(""true"");
//			lock.unlock();
//
//			fail(""Exception not thrown: Not allowed to play shootline"");
	}
	
	@Test
	void testShootModeUnvisible() throws Exception {
//		conf.addParameter(ShootMode.SHOOTLINE, ""false"");
//		conf.addParameter(ShootMode.SHOOTLINE, ""false"");
//		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
            
        // This is a hack for the current PlayerConfiguration
//			conf.setShootMode(""false"");
//			conf.setShootMode(""false"");
//			fail(""Exception not thrown: Not allowed to play shoot-mode"");
	}
	
	@Test
	void testShootShootline() throws Exception {
		
//		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
//		conf.addParameter(ShootMode.SHOOTLINE, ""true"");

//		lock.lock();
//		conf.setShootLine(""true"");
//		lock.unlock();
//		lock.lock();
//		conf.setShootLine(""false"");
//		lock.unlock();
//		lock.lock();
//		conf.setShootLine(""true"");
//		lock.unlock();
//		lock.lock();
//		conf.setShootLine(""false"");
//		lock.unlock();
//		lock.lock();
//		conf.setShootLine(""true"");
//		lock.unlock();
	}
	
	@Test
	void testShootLinesAllowed() throws Exception {
		
		conf.addParameter(ShootMode.HAS_SHOOTLINE, ""true"");
			
        // This is a hack for the current PlayerConfiguration
//			conf.setShootLinesAllowed(conf.getIntegerParameter(SHOOTLINE_SHOOTLINE_MODIFIER, 1) == 1);
                
        // This is a hack for the current PlayerConfiguration
//			conf.setShootLinesAllowed(""true"");
//			conf.setShootLinesAllowed(""true"");
//			conf.setShootLinesAllowed(""false"");
	}
	
	@Test
	void testShootModeAllowed() throws Exception {
		
		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
		
        // This is a hack for the current PlayerConfiguration
//			conf.setShootMode(""true"");
//			conf.addParameter(Configuration.SHOOTLINE_SHOOTLINE_MODE, ""false"");
	}
	
	@Test
	void testShootModeAllowedWithString() throws Exception {
		
		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
		
        conf.setShootMode(""true"");
        lock.lock();
		conf.setShootMode(""true"");
        conf.removeParameter(ShootMode.SHOOTLINE, ""true"");
        lock.unlock();
	}
	
	@Test
	void testShootModeAllowedWithInteger() throws Exception {
		
		conf.addParameter(ShootMode.SHOOTLINE, ""true"");
        
        // This is a hack for the current PlayerConfiguration
//			conf.setShootMode(""true"").withDefaultStrategy(Configuration.SHOOTLINE_SHOOTLINE_MODE_DEFAULT);
	}
	
	@Test
	void testShowShotlineDisabled() throws Exception {
		
		// Set shot line to hidden mode
		conf.removeParameter(SHOOTLINE);
		lock.lock();
		conf.setBoolean(SHOOTLINE, false);
		lock.unlock();
		
		// Make sure that the shot line wasn't visible/hidden
		assertTrue(conf.containsFlag(SHOOTLINE));
	}
	
	@Test
	void testShowShotlineVisible() throws Exception {
		
		// Remove shot line from invisible mode
		conf.addParameter(SHOOTLINE);
		lock.lock();
		conf.removeParameter(SHOOTLINE);
		lock.unlock();
		
		// Show shot line
        conf.setBoolean(SHOOTLINE, true);
        lock.lock();
        conf.setBoolean(SHOOTLINE, true);
        lock.unlock();
	}

    private Set<Lock> locks = new HashSet<>();
    private boolean inShutdown;
	/**
	 * Method for taking the locks the configuration.
	 * This method is only used as a workaround for a non-realistic
	 * bug in the Player class when the locks are being taken
	 * by the player. It checks whether this configurator is
	 * running in a JVM with the JVM.
	 * 
	 * @param wait
	 *            <code>true</code> if the method should be called on
	 *            another thread (used for a test). false means that the
	 *            method will be called on the thread that contains the
	 *            locks. In most cases, this is done in
	 *            {@link PlayerConfiguration}
	 * @"
c42acef1-398d-4d88-b5b9-a49ace567131,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java,62.271393060684204,stop,"// Battleplan.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A plan which determines each step of the battle. A battle is divided into
 * {@link Round}s.
 *
 * @author daniel
 */
public class Battleplan {

    /**
     * @return the number of rounds this plan has
     */
    public int numberOfRounds() {
        return rounds.size();
    }
}
","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains one unit test case for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains one unit test case for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {

	private static final Logger logger = Logger.getLogger(BattleplanTest.class
												.getName());

	/**
     * Test method for {@link Battleplan#numberOfRounds()}.
     *
     * @throws Exception if an error occurs
     */
	@Test
	public final void testNumberOfRounds() throws Exception {
		Battleplan battleplan = new Battleplan();
		NumberOfRounds test = battleplan.numberOfRounds();
		logger.fine(""The test for {0} has been finished"", battleplan.getClass().getName());
		assertTrue(test.rounds.isEmpty());
	}
	
	/**
     * Test method for {@link Battleplan#applySteps(Collection, Collection, SortedMap, SortedMap, SortedMap).get(n-1}
     *
     * @throws Exception if an error occurs
     */
	@Test
    public final void testApplyStepsNeg1() throws Exception {
        logger.fine(""Test for {0}"", Battleplan.class.getName());
        Battleplan battleplan = new Battleplan();
        SortedMap steps = new TreeMap(battleplan.roundStepsOrder);
        steps.put(3, battleplan.applySteps(null, null, steps, steps, null));
        Collection round = battleplan.applySteps(null, null, steps, steps, null);
        assertEquals(2, battleplan.numberOfRounds());
    }
	
	/**
     * Test method for {@link Battleplan#applySteps(Collection, Collection, SortedMap, SortedMap, SortedMap).get(n-2)}.
     *
     * @throws Exception if an error occurs
     */
	@Test
    public final void testApplyStepsNeg2() throws Exception {
        logger.fine(""Test for {0}"", Battleplan.class.getName());
        Battleplan battleplan = new Battleplan();
        SortedMap steps = new TreeMap(battleplan.roundStepsOrder);
                
        Collection round = battleplan.applySteps(null, null, steps, steps, null);
        Collection roundSteps = battleplan.applySteps(round, round, steps, steps, null);
        assertFalse(battleplan.isRoundOver());
                
        assertTrue(round.size() > 3);
        logger.fine(""The test for the {0} step has been finished"", battleplan.getClass().getName());
        assertFalse(round.iterator().hasNext());
    }
	
	/**
     * Test method for {@link Battleplan#applySteps(Collection, Collection)}.
     *
     * @throws Exception if an error occurs
     */
	@Test
    public final void testApplySteps() throws Exception {
        logger.fine(""Test for {0}"", Battleplan.class.getName());
        Battleplan battleplan = new Battleplan();

        SortedMap steps = new TreeMap(battleplan.roundStepsOrder);

        Collection round = battleplan.applySteps(null, null, steps, steps, null);
        assertTrue(battleplan.isRoundOver());
        logger.fine(""The test for the {0} step has been finished"", battleplan.getClass().getName());
        logger.fine(""Collection 1 has been finished"");
        assertFalse(round.iterator().hasNext());        
    }

    /**
     * Setup the {@link Battleplan} before the test
     */
    protected void setUp() {
        logger.fine(""Setting up test"");
    }

    /**
     * Remove the {@link Battleplan} for the {@link Integer}
     */
    protected void tearDown() {
        logger.fine(""Tearing down test"");
        rounds.clear();
    }
}

// BattleplanTest.java"
b56fe3eb-151e-4671-9fc2-e3cc5130d06d,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java,60.737513303756714,length,"// Battleplayer.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Battleplayer} controls the battle. It is a puppet player controlling
 * the behavior of the {@link Combatant}s.
 *
 * @author daniel
 */
public class Battleplayer implements Player {

    /**
     * @return the number of rounds this player shows
     */
    public int numberOfRounds() {
        return plan.numberOfRounds();
    }
}
","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains one unit test case for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains one unit test case for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {

	static final Logger logger = Logger.getLogger(_BattleplayerTest.class.getName());
	
    @Test
    void testNumberOfRounds1() {
        Battleplayer battleplayer = new Battleplayer();
        int expectedRounds = 6;        
        Combatant combatant1 = new Combatant(2, ""Combatant"");
        Combatant combatant2 = new Combatant(7, ""Combatant"");
        List<Combatant> combatants1 = new ArrayList<>();
        combatants1.add(combatant1);
        combatants1.add(combatant2);
        
        List<Combatant> combatants = new ArrayList<>();
        combatants.add(combatant1);
        combatants.add(combatant2);
        
        battleplayer.addCombatant(combatant1);  // adds combatant1 to the battle
        List<Combatant> result = battleplayer.getCombatants();
        assertEquals(result.size(), expectedRounds);
        assertTrue(result.contains(combatant1));
        assertTrue(result.contains(combatant2));
    }
    
    @Test
    void testNumberOfRounds2() {
        Battleplayer battleplayer = new Battleplayer();
        int expectedRounds = 21;        
        Combatant combatant1 = new Combatant(7, ""Combatant"");
        Combatant combatant2 = new Combatant(11, ""Combatant"");
        List<Combatant> combatants1 = new ArrayList<>();
        combatants1.add(combatant1);
        combatants1.add(combatant2);
        
        List<Combatant> combatants = new ArrayList<>();
        combatants.add(combatant1);
        combatants.add(combatant2);
        
        battleplayer.addCombatant(combatant1);  // adds combatant1 to the battle
        List<Combatant> result = battleplayer.getCombatants();
        assertEquals(result.size(), expectedRounds);
        assertTrue(result.contains(combatant1));
        assertTrue(result.contains(combatant2));
    }
    
    @Test
    void testNumberOfRounds3() {
        Battleplayer battleplayer = new Battleplayer();
        int expectedRounds = 6;        
        Combatant combatant1 = new Combatant(10, ""Combatant"");
        Combatant combatant2 = new Combatant(18, ""Combatant"");
        Combatant combatant3 = new Combatant(21, ""Combatant"");
        List<Combatant> combatants1 = new ArrayList<>();
        combatants1.add(combatant1);
        combatants1.add(combatant2);
        combatants1.add(combatant3);
        
        List<Combatant> combatants = new ArrayList<>();
        combatants.add(combatant1);
        combatants.add(combatant2);
        combatants.add(combatant3);        
        
        battleplayer.addCombatant(combatant1);  // adds combatant1 to the battle
        List<Combatant> result = battleplayer.getCombatants();
        assertEquals(result.size(), expectedRounds);
        assertTrue(result.contains(combatant1));
        assertTrue(result.contains(combatant2));
        assertTrue(result.contains(combatant3));        
    }

    @Test
    void testNumberOfRounds4() {
        Battleplayer battleplayer = new Battleplayer();
        int expectedRounds = 42;        
        Combatant combatant1 = new Combatant(7, ""Combatant"");
        Combatant combatant2 = new Combatant(14, ""Combatant"");
        Combatant combatant3 = new Combatant(19, ""Combatant"");
        Combatant combatant4 = new Combatant(23, ""Combatant"");

        List<Combatant> combatants1 = new ArrayList<>();
        combatants1.add(combatant1);
        combatants1.add(combatant2);
        combatants1.add(combatant3);
        combatants1.add(combatant4);
        combatants1.add(combatant5);
        combatants1.add(combatant6);
        combatants1.add(combatant7);
        combatants1.add(combatant8);
        combatants1.add(combatant9);
        combatants1.add(combatant10);

        List<Combatant> combatants = new ArrayList<>();
        combatants.add(combatant1);
        combatants.add(combatant2);
        combatants.add(combatant3);
        combatants.add(combatant4);
        combatants.add(combatant5);
        combatants.add(combatant6);
        combatants.add(combatant7);
        combatants.add(combatant8);
        combatants.add(combatant9);
        combatants.add(combatant10);        

        battleplayer.addCombatant(combatant1);  // adds combatant1 to the battle
        List<Combatant> result = battleplayer.getCombatants();
        assertEquals(result.size(), expectedRounds);
        assertTrue(result.contains(combatant1));
        assertTrue(result.contains(combatant2));
        assertTrue(result.contains(combatant3));
        assertTrue(result.contains(combatant4));
        assertTrue(result.contains(combatant5));
        assertTrue(result.contains(combatant6));
        assertTrue(result.contains(combatant7));
        assertTrue(result.contains(combatant8));
        assertTrue(result.contains(combatant9));
        assertTrue(result.contains(combatant10));


        List<Combatant> result2 = battleplayer.getCombatants();
        assertEquals(result2.size(), expectedRounds * 2);
    }
    
    @Test
    void testNumberOfRounds5() {
        Battleplayer battleplayer = new Battleplayer();
        int expectedRounds = 10;        
        Combatant combatant1 = new Combatant(10, ""Combatant"");
        Combatant combatant2 = new Combatant(15, ""Combatant"");
        Combatant combatant3 = new Combatant(20, ""Combatant"");
        Combatant combatant4 = new Combatant(25, ""Combatant"");
        Combatant combatant5 = new Combatant(30, ""Combatant"");
        Combatant combatant6 = new Combatant(35, ""Combatant"");
        Combatant combatant7 = new Combatant(40, ""Combatant"");
        Combatant combatant8 = new Combatant(45, ""Combatant"");
        Combatant combatant9 = new Combatant(50, ""Combatant"");
        Combatant combatant10 = new Combatant(55, ""Combatant"");

        List<Combatant> combatants1 = new ArrayList<>();
        combatants1.add(combatant1);
        combatants1.add(combatant2);
        combatants1.add(combatant3);
        combatants1.add(combatant4);
        combatants1.add(combatant5);
        combatants"
