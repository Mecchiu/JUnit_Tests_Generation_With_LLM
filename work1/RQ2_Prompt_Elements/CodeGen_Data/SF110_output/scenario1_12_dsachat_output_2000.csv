ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
4df77957-3688-498a-89ff-8d3e87f11155,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,50.812783002853394,stop,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    public boolean silent() {
        return false;
    }
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {

	public static void main(String[] args) {
        InternalGmHeroFrameTest test = new InternalGmHeroFrameTest();
        try {
            JFrame frame = new InternalGmHeroFrame();
            frame.setLocationRelativeTo(null);
       		frame.setVisible(true);
       		frame.setTitle(""InternalGmHeroFrameTest1"");
               
       		JButton ok = new JButton(""OK"");
       		ok.addActionListener(test);
       		ok.setActionCommand(""OK"");
       		btn.add(ok);
               
       		ok.setEnabled(false);
       		frame.setComponentAt(ok, btn);
               
       		JButton cancel = new JButton(""Cancel"");
       		cancel.addActionListener(test);
       		cancel.setActionCommand(""Cancel"");
       		btn.add(cancel);
               
        } catch (Exception e) {
               
        	String text = e.getMessage().replaceAll(""\\r|\\n"", ""\n"");
        	throw new RuntimeException(text);
        }
	}
}
"
b1efb667-08b6-49e3-9bfb-4d50158d65b4,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java,61.179964542388916,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    public String roll() {
        if (t != null)
            return rollTalent();
        if (attrib != null)
            return rollAttr();
        if (w != null) {
            return rollFight();
        }
        return "" missing Talent, Spell, ..."";
    }
}
","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {
// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    public String roll() {
        if (t!= null)
            return rollTalent();
        if (attrib!= null)
            return rollAttr();
        if (w!= null) {
            return rollFight();
        }
        return "" missing Talent, Spell,..."";
    }
}

// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {
		/**
		 * Test class to test {@link Challenge#roll()} method.
		 * It uses a template and sends a response to an enduser.
		*/
    @Test
    public void testRoll() {
        String expected = ""expected!"";
        Challenge challenge = new Challenge();
        challenge.roll(""Hera!"");
        assertEquals(expected, challenge.response());
    }
    
}
// Challenge_0Test.java
"
63558d43-6fae-4bda-9f57-5d687089a202,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java,60.98579668998718,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    public static int dice(int sides) {
        int ret = -1;
        ret = (int) Math.rint((Math.random() * sides)) % sides + 1;
        return ret;
    }
}
","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {


	/**
* Test cases for initialisation of Challenges.<br>
* It performs some initialisation checks against the challenge variables.<br>
* If this test fails, {@link Challenge_1Test#dice(int)} could not be executed.</br>
* It should not initialize the {@link Challenge} object.
* It has to be started as {@link Challenge_1Test#run(java.util.Vector)} method.<br>
* The {@link Challenge#dice(int)} and {@link Challenge#getDice(int)} methods are tested.</br>
* Test case is performed with {@link Challenge_1Test#execute()} function.
* If it fails, the {@link Challenge_1Test#dice(int)} and {@link Challenge_1Test#getDice(int)} must be returned to function.
*/
@Test
public class Challenge_1Test {
	
	/**
* Test execution.<br>
* This test case just creates a {@link Challenge} object with the variables defined by the test cases and runs the {@link Challenge#execute()} function.
* The result is tested by {@link Challenge_1Test#run(Vector)} function.
*/
	public void test() {
		
		new Challenge_1Test();
	}
	
	/**
* Test cases for initialisation and execution.<br>
* Test case for {@link Challenge#execute()} function.
* It performs some tests for the result of {@link Challenge#execute(org.junit.jupiter.api.Test, java.util.Vector)} method.
* With each test it will perform 1 set of tests where each test result is checked against the challenge result.
* For the set of tests run again and the test will be executed again.
* @throws Exception
* If some operation can not be done in the time indicated by the exception.
*/
	public void test_1() throws Exception {
		
		Vector<String> results = new Vector<>();
		
		results = Challenge_1Test.dice(10);

		assertFalse(results.contains(""1""));
		
		results = Challenge_1Test.getDice(10);
	
		assertFalse(results.contains(""1""));
		
		values = Challenge_1Test.values();
		assertNotNull(values.get(""1""));

		values = Challenge_1Test.values(new String[] { ""1"" });
		assertEquals(1, values.size());
		assertNotNull(values.get(""1""));

		results = Challenge_1Test.dice(10);
		
		assertFalse(results.contains(""1""));
		
		results = Challenge_1Test.getDice(10);
	
		assertFalse(results.contains(""1""));
		
		values = Challenge_1Test.values();
		assertNotNull(values.get(""1""));

		values = Challenge_1Test.values(new String[] { ""1"" });
		assertEquals(1, values.size());
		assertNotNull(values.get(""1""));

		results = Challenge_1Test.getDice(10);
	   
		assertTrue(results.contains(""1""));
	   
		results = Challenge_1Test.dice(10);
	   
		assertFalse(results.contains(""1""));
		
		values = Challenge_1Test.values();
		assertNotNull(values.get(""1""));

		values = Challenge_1Test.values(new String[] { ""1"" });
		assertEquals(1, values.size());
		assertNotNull(values.get(""1""));

		results = Challenge_1Test.getDice(10);
	   
		assertTrue(results.contains(""1""));
	   
		results = Challenge_1Test.dice(10);
	   
		assertFalse(results.contains(""1""));
	   
		results = Challenge_1Test.getDice(10);
	   
		results.remove(""1"");
	   
		assertEquals(10, results.size());
		
		results = Challenge_1Test.getDice(10);
	   
		assertFalse(results.contains(""1""));
	}
	
}"
25fce55e-e40d-47ea-a581-f1806e45911c,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java,61.46153807640076,stop,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 *
 * @author bernshausen
 */
public class Hero implements Serializable {

    public int getAttrValue(String shortcut) {
        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.elementAt(i).getShortcut().equals(shortcut)) {
                return attributes.elementAt(i).getValue();
            }
        }
        return -1;
    }
}
","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {
static final String INVALID_CHARACTER_MATCH = ""Invalid"";
		static final String TEST_SEL_CODE            = ""c"";
		static final int testSuiteCode              = 200;
		static final String TEST_NAME                =  ""Hello Test"";
		static final String TEST_NAME_HELO             =  ""Hello Test Help"";

		@Test
		void isValid_InvalidCharacter() {
			assertFalse(isValid(INVALID_CHARACTER_MATCH));
		}

		@Test
		void isValid_ValidWhitespace() {
			assertTrue(isValid(CharacTest.VALID_CHARS));
		}

		@Test
		void isValid_ValidCharacterMatch() {
			Element element = Element.create(CharacTest.ATTRIBUTE_NAME).addAttribute(CharacTest.VALID_CHARACTER_MATCH);
            Document doc = Element.create(CharacTest.ATTRIBUTE_DOCUMENT).addElement(element).addElement(CharacTest.ATTRIBUTE_TYPE);
            assertTrue(doc.elementText(CharacTest.ELEMENT_TYPE).equals(CharacTest.ATTRIBUTE_TYPE));
		}

		@Test
		void isValid_InvalidEmptyString() {
			assertFalse(isValid(""""));
		}

		@Test
		void isValid_ValidWhitespace() {
            assertTrue(isValid(CharacTest.VALID_CHARACTER_MATCH));
		}

		@Test
		void isValid_ValidCharacTest() {
			Element e = Element.create(CharacTest.ATTRIBUTE_NAME).addAttribute(CharacTest.VALID_CHARACTER_MATCH).addElement(CharacTest.ATTRIBUTE_VALUE).addElement(CharacTest.ATTRIBUTE_NAME).addElement(""a"");
			Document doc = Element.create(CharacTest.ATTRIBUTE_DOCUMENT).addElement(e).addElement(CharacTest.ATTRIBUTE_TYPE);
            assertTrue(doc.elementText(CharacTest.ATTRIBUTE_TYPE).equals(CharacTest.ATTRIBUTE_TYPE));
        }

		@Test
		void isValid_ValidAttributeValue() {
			Element element = Element.create(CharacTest.ATTRIBUTE_NAME, CharacTest.VALID_CHARACTER_MATCH);
            Document doc = Element.create(CharacTest.ATTRIBUTE_DOCUMENT).addElement(element).addElement(CharacTest.ATTRIBUTE_TYPE);
            assertTrue(doc.elementText(CharacTest.ATTRIBUTE_TYPE).equals(CharacTest.ATTRIBUTE_TYPE));
			element.setText(""a"");
			Element e = Element.create(CharacTest.ATTRIBUTE_NAME).addAttribute(CharacTest.VALID_CHARACTER_MATCH).addElement(CharacTest.ATTRIBUTE_VALUE).addElement(CharacTest.ATTRIBUTE_NAME).addElement(CharacTest.ATTRIBUTE_VALUE).addElement(CharacTest.ATTRIBUTE_NAME);
            Element docAfter = Element.create(CharacTest.ATTRIBUTE_DOCUMENT).addElement(e);
            Element expectedResult = Element.create(CharacTest.ATTRIBUTE_ATTRIBUTE, CharacTest.VALID_CHARACTER_MATCH);
            assertTrue(docAfter.elementText(CharacTest.ATTRIBUTE_TYPE).equals(CharacTest.ATTRIBUTE_TYPE));
			assertTrue(Document.verify(docAfter));
			assertTrue(docAfter.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertFalse(expectedResult.elementText(CharacTest.ATTRIBUTE_TYPE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertTrue(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertFalse(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertTrue(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertFalse(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_DOUBLE_VALUE));
			assertTrue(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_DOUBLE_VALUE));
			assertFalse(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertTrue(expectedResult.elementText(CharacTest.ATTRIBUTE_DOUBLE_VALUE).equals(CharacTest.ATTRIBUTE_ATTRIBUTE));
			assertFalse(expectedResult.elementText(CharacTest.ATTRIBUTE_ATTRIBUTE).equals(CharacTest.ATTRIBUTE_DOUBLE_VALUE));
			assertTrue(expectedResult.elementText(CharacTest.ATTRIBUTE_DOUBLE_VALUE).equals(CharacTest.ATTRIBUTE_DOUBLE_VALUE));
		}
}"
