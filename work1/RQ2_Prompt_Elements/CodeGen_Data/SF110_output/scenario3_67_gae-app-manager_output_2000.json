[
{
    "choices": [
        {
            "text": "\n    // Test methods\n    private final DefaultHttpClient client = new DefaultHttpClient();\n\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails() throws Exception {\n\t\t\n\t\t// test Google App Engine client\n        assertEquals(LogonHelper.get().getAccountType(), AppEngineManager.get().getUserInfo().getAccountType());\n        \n        HttpGet method = new HttpGet(AppEngineManager.get().getUserInfo().getAppend(\"Quota.metrics\"));\n        \n        // execute the GET\n        HttpResponse response;\n        try {\n            response = (HttpResponse)client.execute(method);\n        }\n        catch(Exception e) {\n            e.printStackTrace();\n            return;\n        }\n        \n        HttpResponse getResponse = (HttpResponse)client.execute(method);\n        // check size of response\n\t\tassertEquals(200, getResponse.getStatusLine().getStatusCode());\n\t\t\n\t\tassertTrue(\"Response from google app engine is valid\", response.hasEntity());\n\n\t\tassertEquals(\"200 OK\", response.getStatusLine().toString());\n\t\t\n\t\t// we can read the information from http response\n\t\t// and can determine the expected values, we are not interested in the information\n\t\tLogonHelper.get().resetAccount(AppEngineManager.get().getUserInfo().getEmail());\n\t\tLogonHelper.get().resetAccount(AppEngineManager.get().getUserInfo().getPassword());\n\t\t\t\t\n        // retrieve the quota details from google app engine\n        QuotaDetails details = manager.retrieveAppQuotaDetails(AppEngineManager.get().getUserInfo().getEmail(), AppEngineManager.get().getUserInfo().getPassword(), \"GAAppEngine\", \"Gaa\");\n        // check if the correct amount of information was extracted\n        assertEquals(AppEngineManager.get().getUserInfo().getEmail(), details.getAppend(\"Email\"));\n        assertEquals(AppEngineManager.get().getUserInfo().getPassword(), details.getAppend(\"Password\"));\n        assertEquals(1, details.getCount().longValue());\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "Manager manager;\n\t\t@Test\n\t  public void testRetrieveAppQuotaDetails() throws Exception {\n\t        manager = new Manager();\n\t        \n\t        LogonHelper.logon(userid, password, source);\n\t        HttpResponse res = HttpGet(\"/deployed.txt\");\n\t        manager.retrieveAppQuotaDetails(userid, password, source, source);\n\t        assertEquals(manager.maxAppQuotaDetails(),\n\t                      LogonHelper.parseAppBytesSize(res.getEntity().getContent(), true));\n\t  \t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Retrieve quota details of application deployed in Google App Engine.\n\t\t *\n\t\t * @param userid full gmail address for user\n\t\t * @param password gmail account password\n\t\t * @param source name of application requesting quota details\n\t\t * @param application appspot application name\n\t\t * @return quota details of application\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void getAppQuotaDetails() throws Exception {\n\t\t\t\tmanager.retrieveAppQuotaDetails(SystemProperty.USER_ID, SystemProperty.ACCOUNT_PW, TestConstants.EXAMPLE_EXAMPLE_GOOGLE_APP_NAME_USR_APP, TestConstants.EXAMPLE_EXAMPLE_GOOGLE_APP_NAME);\n\t\t}\n\n\t\t/**\n\t\t * Retrieve quota details of application deployed in Google App Engine.\n\t\t *\n\t\t * @param userid full gmail address for user\n\t\t * @param password gmail account password\n\t\t * @param application appspot application name\n\t\t * @param src application name\n\t\t * @return quota details of application\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void getAppQuotaDetailsWithSameNameAndSource(String userid, String password, String application, String src) throws Exception {\n\t\t\t\tQuotaDetails quotaDetails = manager.retrieveAppQuotaDetails(userid, password, src, application);\n\t\t\t\tassertNotNull(quotaDetails);\n\t\t\t\tassertEquals(src, quotaDetails.getName());\n\t\t}\n\n        /**\n         * Checks the correctness of the HTTP method for REST calls.\n         */\n        @Test\n        public void verifyGetApplication() throws Exception {\n                RetrieveQuotaDetails result = manager.retrieveAppQuotaDetails(TestConstants.userName, TestConstants.password, TestConstants.SOURCE_GOOGLE_APP_NAME_APP, TestConstants.EXAMPLE_EXAMPLE_GOOGLE_APP_NAME);\n                assertNotNull(result);\n        }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private String sourceName;\n\t\tprivate String application;\n\t\tprivate String userId;\n\t\tprivate String quotaId;\n\t\tprivate static final String LOGON_VERIFIER = \"\";\n\t\tprivate Exception exception;\n\t\tprivate static final long TIMEOUT = 3000;\n\t\t\n\t\t\n\t\tpublic ManagerTest(String sourceName, String application, String userId, String quotaId) \n\t\t{\n\t\t\tthis.sourceName = sourceName;\n\t\t\tthis.application = application;\n\t\t\tthis.userId = userId;\n\t\t\tthis.quotaId = quotaId;\n\t\t}\n\n\t\t/**\n\t\t * Retrieves quota with application quota details on Google App Engine.\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tvoid GoogleAppEngine() throws Exception;\n\t\t\n        /**\n\t\t * HTTP GET on /adminquota/quotas/{application}/{userId}/{quotaId}\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void getAppQuotaDetailsAdminQ() throws Exception;\n\t\t\n\t\t\n        /**\n\t\t * HTTP GET on /user/{userId}/{application}/{quotaId}\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void getUserAppQuotaDetailsQ() throws Exception;\n\t\t\n        /**\n\t\t * GET /quota/{quotaId}\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void getQuota() throws Exception;\n\n/**\n  /**\n   * @throws Exception\n   */\n  @Test\n  public void setupQuota() throws Exception {\n    DefaultHttpClient httpClient = new DefaultHttpClient();\n    LogonHelper lh = new LogonHelper(httpClient);\n    try {\n      HttpGet get = new HttpGet(\"https://www.googleapis.com/oauth2/v2/certs/signatory-certificate-authority/certificates/system/root.pem\");\n      HttpResponse response = lh.execute(get);\n      switch(response.getStatusLine().getStatusCode()) {\n        case 200:\n          assertNotNull(LogonHelper.readX509File(response.getEntity().getContent()));\n          break;\n        case 404:\n          fail(\"API not installed\");\n        default:\n          fail(\"Unable to retrieve system root certificate\");\n      }\n    }\n    finally {\n      httpClient.releaseConnection();\n    }\n  }\n*/\n\n  /**\n   * @throws Exception\n   */\n  @Test\n  public void setupQuota() throws Exception {\n    Request.create(this, createAppQuotaDetails().getUserName(), this, LOGON_VERIFIER, false).withUserId(userId).runTest();\n  }\n\n  /**\n   * @throws Exception\n   */\n  @Test\n  public void setupQuotaSigned() throws Exception {\n    Request.create(this, createQuotaDetails().getUserName(), this, LOGON_VERIFIER + \"s\", true).withUserId(userId).runTest();\n  }\n\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "ManagerTest () {\n\n\t}\n\n    /**\n     * Test method for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}.\n     * @throws Exception in case of failure \n     */\n    @Test\n    public void testRetrieveAppQuotaDetails() throws Exception {\n\n        //set parameters and values in URL\n        String url = \"GoogleAppEngine/rest/quota.json\";\n\n        LogonHelper.connect (url);\n\n        String authConfig = LogonHelper.setCredentials (User.GMAIL_AUTH_CONFIG_FILE);\n\n        if (authConfig.length() == 0) {\n            authConfig = null;\n        }\n\n        final DefaultHttpClient httpClient = new DefaultHttpClient();\n\n        HttpGet httpGet = getHttpMethod (url, authConfig);\n        HttpResponse response = httpClient.execute (httpGet);\n        final String jsonString = LogonHelper.getLastResponseAsString (response);\n\n        // parse json representation string and check for right values \n        var quotas = gaeQuotaInfoJsonParser.parseJson (jsonString);\n\n\n\t\tassertEquals(\"Mock app Quota Details\", quotas.size(), 1);\n\t\tassertEquals(\"Mock application in GCM\", quotas.get (0).applicationName, ApplicationNames.GCM);\n    }\n\n\n\tprivate static HttpGet getHttpMethod(final String url,final String authConfig) throws UnsupportedEncodingException {\n\n\t\tfinal String urlWithParams = url + \"?\" + LoginConfig.MAIL_API_KEY_PARAM + \"=\" + authConfig;\n\t\tfinal HttpGet httpGet = new HttpGet(urlWithParams);\n\t\treturn httpGet;\n\t}\n\n\tprivate static QuotaDetails gaeQuotaInfoJsonParser = QuotaInfoJsonParser.parseJson (LogonHelper.getLastResponseAsString (new HttpGet (ManagerTest.class.getResource (ManagerTest.class.getSimpleName ()).toString())));\n\t\n}\n\n/**\n * Default QuotaDetails for Google App Engine.\n * @author Lucas Gon\u00e7alo\n */\npublic class QuotaInformation {\n\tpublic static QuotaInformation create() {\n\t\treturn new QuotaInformation();\n\t}\n\t\n}\n\n/**\n * Default QuotaInfo for Google App Engine.\n * @author Lucas Gon\u00e7alo\n */\npublic class GoogleAppInfo {\n\tpublic static GoogleAppInfo() {\n\t\tretrieveAppQuotaDetails(null, null, null, null);\n\t}\n\t\n\t/**\n\t * Name of application on GAE\n\t */\n\tpublic String applicationName;\n\t\n\t/**\n\t * Email address of user signing in\n\t */\n\tpublic String authCredentials;\n\t\n\t/**\n\t * Amount of user quota (of application)\n\t */\n\tpublic float userQuota;\n\t\n\t/**\n\t * Amount of application quota (of app)\n\t */\n\tpublic float applicationQuota;\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /** Http URL for retrieving quota details. */\n    private static final String APP_REQUEST_URL;\n\n    /** Http URL for retrieving quota details of application.*/\n    private static final String APP_QUOTA_URL;\n\n    /** Http URL for retrieving quota details of application specified in testcase.*/\n    private static final String APP_QUOTA_URL_SPEC;\n\n    /** Http URL for retrieving quota details of application specified in testcase. */\n    private static final String APP_REFERER_URL;\n\n    /** Http URL for retrieving quota details of application specified in testcase. */\n    private static final String APP_TARGET_URL;\n\n\n    /** Application name to request quota details for in test case. */\n    private final String applicationName;\n\n    /** Application version of the app to request quota details for in test case. */\n    private final String applicationVersion;\n\n    /**\n      * Method to invoke.\n      *\n      * @throws Exception in case of failure\n     */\n    private static void methodToTest() throws Exception {\n\n        assertNotNull(LogonHelper.getUser());\n\n        assertNotNull(LogonHelper.getPassword());\n        //assertNotNull(LogonHelper.getUserID());\n\n        // Retrieve quota details\n        final HttpClient httpClient = new HttpClient();\n        assertTrue(httpClient instanceof DefaultHttpClient);\n\n        final HttpGet request = new HttpGet(APP_REQUEST_URL);\n\n        final HttpResponse response =\n\t\t\t        httpClient.execute(request);\n\n        {\n            assertEquals(response.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = response.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n            assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetail\\\":{\\\"deploymentName\\\":\\\"\"),\n                         responseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t//\n        }\n\n        // Retrieve quota details of application\n        final HttpGet responseGet = new HttpGet(APP_QUOTA_URL + \"?\");\n\n        final HttpResponse responseGetResponse =\n\t\t\t        httpClient.execute(responseGet);\n\n        {\n            assertEquals(responseGetResponse.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = responseGetResponse.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n\t\t\t//assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetail\\\":{\\\"deploymentName\\\":\\\"\"),\n\t\t\t//\t\tresponseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t//\n        }\n\n        // Retrieve quota details of application specified in testcase\n        final HttpGet responseGetSpec = new HttpGet(APP_QUOTA_URL_SPEC + \"?\");\n\n        final HttpResponse responseGetSpecResponse =\n\t\t\t        httpClient.execute(responseGetSpec);\n\n        {\n            assertEquals(responseGetSpecResponse.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = responseGetSpecResponse.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n\t\t\t//assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetailSpec\\\":{\\\"deploymentName\\\":\\\"\"),\n\t\t\t//\t\tresponseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t//\n        }\n\n        // Retrieve quota details of application specified in testcase\n        final HttpGet responseGetSpecSpec = new HttpGet(APP_QUOTA_URL_SPEC + \"?\");\n\n        final HttpResponse responseGetSpecSpecResponse =\n\t\t\t        httpClient.execute(responseGetSpecSpec);\n\n        {\n            assertEquals(responseGetSpecSpecResponse.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = responseGetSpecSpecResponse.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n\t\t\t//assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetailSpec\\\":{\\\"deploymentName\\\":\\\"\"),\n\t\t\t//\t\tresponseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t}\n        }\n\n        // Retrieve quota details of application specified in testcase\n        final HttpGet responseGetSpecSpecSpec = new HttpGet(APP_QUOTA_URL_SPEC + \"?\");\n\n        final HttpResponse responseGetSpecSpecSpecResponse =\n\t\t\t\t        httpClient.execute(responseGetSpecSpecSpec);\n\n        {\n            assertEquals(responseGetSpecSpecSpecResponse.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = responseGetSpecSpecSpecResponse.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n\t\t\t//assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetailSpecSpec\\\":{\\\"deploymentName\\\":\\\"\"),\n\t\t\t//\t\tresponseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t}\n\n        // Retrieve quota details of application specified in testcase\n        final HttpGet responseGetSpecSpecSpecSpec = new HttpGet(APP_QUOTA_URL_SPEC + \"?\");\n\n        final HttpResponse responseGetSpecSpecSpecSpecResponse =\n\t\t\t\t        httpClient.execute(responseGetSpecSpecSpecSpec);\n\n        {\n            assertEquals(responseGetSpecSpecSpecSpecResponse.getStatusLine().getStatusCode(), HttpStatus.SC_OK);\n\n            final byte[] responseContent = responseGetSpecSpecSpecSpecResponse.getEntity().getContent();\n            final String responseHeaders = LogonHelper.headersToString(response);\n            final String responseHeadersContent = LogonHelper.headersToString(responseContent);\n\n            assertEquals(\"OK\", responseHeaders);\n\t\t\t//assertTrue(responseHeadersContent.startsWith(\"{\\\"quotaDetailSpecSpec\\\":{\\\"deploymentName\\\":\\\"\"),\n\t\t\t//\t\tresponseHeadersContent.endsWith(\"\\\"}\\n\"));\n \t\t}\n\n        // Restart app and assert quota details in the app with deploymentName specified in test case\n        manager.restartApp();\n\n        // Request of quota details of application specified in test case\n        final HttpGet responseGetSpecSpecSpec = new",
            "finish_reason": "length"
        },
        {
            "text": "@Test\n\t\tpublic void testGetAppQuotaDetails() {\n\t\t\t\t\t\t//Test case is executed if there is any application information available for the user.\n\t\t\tString access_token = LogonHelper.generateAccessToken();\n\t\t        DefaultHttpClient client = new DefaultHttpClient();\n\t\t        HttpGet get = new HttpGet(\"http://www.google.com/_m/services/js/app.getQuotas?\" + \"s\" + \"uid=\" + userid);\n\t\t        HttpResponse response = client.execute(get);\n\t\t        assertEquals(200, response.getStatusLine().getStatusCode());\n\t\t        appQuotaInformation = LogonHelper.getAppQuotaDetails();\n\t\t        assertNotNull(appQuotaInformation);\n\t\t        assertEquals(\"gceappmanager_quota\",appQuotaInformation.getName());\n\t\t        assertEquals(\"200\",appQuotaInformation.getCode());\n\t\t        assertEquals(\"gceappmanager_quota\",appQuotaInformation.getDescription().toString());\n\t        \t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t// -------------------------------------------------------------- STATIC VARIABLES\n\t// -------------------------------------------------------------- MEMBERS\n\tprivate static String username;\n\tprivate static String password;\n\n    // --------------------------------------------- CONSTRUCTOR\n\t/**\n\t * Get test specific information.\n\t *\n\t * @param username full gmail username for test user\n\t * @param password gmail account password for test user\n\t */\n\tprivate ManagerTest(String username, String password) {\n\t\tsuper();\n\t\tthis.username = username;\n\t\tthis.password = password;\n\t}\n\n\t// ----------------------------------------- CONSTRUCTORS\n\t/**\n\t * Tests if a user is logged into Google App Engine.\n\t *\n\t * @param userid user id for the test\n\t * @param password user's Account Password\n\t * @param application application name\n\t *\n\t * @return <code>true</code> if the user is already registered\n\t */\n\tstatic private boolean isRegistered(String userid, String password, String application) {\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\n\t\tHttpGet getRequest = new HttpGet(\"https://www.googleapis.com/oauth2/v3/userinfo?uid=\" + userid + \"&\" + \"key=\" + password + \"&source=\" + application);\n\n\t\tHttpResponse response = null;\n\t\ttry {\n\t\t\tresponse = client.execute(getRequest);\n\t\t\tassertNotNull(response);\n\t\t\tassertEquals(200, response.getStatusLine().getStatusCode());\n\t\t\treturn true;\n\t\t} catch (Exception exc) {\n\t\t\tLogonHelper.logon(LogonHelper.LEVEL_ERROR, LogonHelper.HANDLER_TYPE_ANY, \"Failed to logon.\", \"Unable to logon.\", exc);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tLogonHelper.logon(LogonHelper.LEVEL_NORMAL, LogonHelper.HANDLER_TYPE_ANY, \"Successfully loggedon.\", \"Successfully loggedon.\", null);\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.getEntity().consume();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if a user is logged into Google App Engine and is also logged on to Google App Engine.\n\t *\n\t * @param userid the user id of the user to be logged on with Google App Engine\n\t * @param password the user's Account password for the user to be logged on with Google App Engine\n\t * @param application the application name of the application that the user is log on to\n\t *\n\t * @return <code>true</code> if the login has succeeded and user is logged into Google App Engine\n\t */\n\tstatic private boolean isRegisteredAndLoggedOn(String userid, String password, String application) {\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\n\t\tHttpGet getRequest = new HttpGet(\"https://www.googleapis.com/oauth2/v3/userinfo?uid=\" + userid + \"&\" + \"key=\" + password + \"&source=\" + application);\n\n\t\tHttpResponse response = null;\n\t\ttry {\n\t\t\tresponse = client.execute(getRequest);\n\t\t\tassertNotNull(response);\n\t\t\tassertEquals(200, response.getStatusLine().getStatusCode());\n\t\t\treturn true;\n\t\t} catch (Exception exc) {\n\t\t\tLogonHelper.logon(LogonHelper.LEVEL_ERROR, LogonHelper.HANDLER_TYPE_ANY, \"Failed to logon.\", \"Unable to logon.\", exc);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tLogonHelper.logon(LogonHelper.LEVEL_NORMAL, LogonHelper.HANDLER_TYPE_ANY, \"Successfully loggedon.\", \"Successfully loggedon.\", null);\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.getEntity().consume();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if an user has been registered to Google App Engine and is also logged on to Google App Engine.\n\t *\n\t * @param userid the user id of the user that should be added on the system\n\t * @param password user's Account Password\n\t * @param application the application name of the application that the user should be added on the system\n\t *\n\t * @return <code>true</code> if the user has been added on the system\n\t *\n\t * @throws Exception if an unexpected error occurs\n\t */\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails(String userid, String password, String application) throws Exception {\n\t\t\t\t\n\t\t// --------------------------------------------------------\n\t\t// GET QUOTA DETAILS\n\t\t// --------------------------------------------------------\n\t\tmanager.logon(LogonHelper.LEVEL_TRACE, LogonHelper.HANDLER_TYPE_ANY, \"testRetrieveAppQuotaDetails\", \"Retrieving quota details.\", null);\n\n\t\tassertTrue(isRegistered(userid, password, application));\n\t\tQuotaDetails quotaDetails = new QuotaDetails(application, userid);\n\t\tboolean wasAdded = isRegisteredAndLoggedOn(userid, password, application);\n\n\t\tassertEquals(wasAdded, isRegistered(userid, password, application));\n\n\t\tString responseData = manager.retrieveAppQuotaDetails(userid, password, application);\n\t\tmanager.logon(LogonHelper.LEVEL_TRACE, LogonHelper.HANDLER_TYPE_ANY);\n\n\t\tassertEquals(responseData, manager.logon(LogonHelper.LEVEL_TRACE, LogonHelper.HANDLER_TYPE_ANY, \"Failed to logon.\", \"Unable to logon.\", null).trim());\n\t}\n\n\t/**\n\t * Get a list of applications available in appspot.\n\t *\n\t * @return the list of applications being available in appspot\n\t */\n\tpublic static String[] getApplications() {\n\t\treturn new String[] {\n\t\t\t\t\"Choo\",\n\t\t\t\t\"Pantelh\",\n\t\t\t\t\"Santelh\",\n\t\t\t\t\"Tahun\",\n\t\t\t\t\"Tuhan\" };\n}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final String QUOTA_URL = \"http://www.google.es/gapi.appindex.google.com/_applications/%s/%s\";\n\n\t\t/**\n\t\t* Test method for\n\t\t* {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}\n\t\t* using public static default get method.\n\t\t* <p>\n\t\t* Tests {@link Manager#retrieveAppQuotaDetails()} method with different gmail accounts.\n\t\t*/\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails_defaultGet() throws Exception {\n\n\tManager manager = new Manager();\n\ttry {\n\t\t\t\tassertNotNull(manager.retrieveAppQuotaDetails(\"tester@google.es\", \"passwd\", \"googleapps.googleusercontent.com\", \"googleAppId\"));\n\t\t\t\tassertTrue( manager.retrieveAppQuotaDetails(\"tester@google.es\", \"passwd\", \"googleapps.googleusercontent.com\", \"googleAppId\").isExpired());\n\t\t\t\t\n\t} catch (IllegalArgumentException e) {\n\t\t\t\tassertNotNull(e);\n\t\t\t\tfail(e.getMessage());\n\t}\n\n\n\n\t\t\t\t\t\n\t}\n\n\t/**\n\t* Test method for\n\t* {@link Manager#retrieveAppQuotaDetails()} using gmail account name.\n\t* <p>\n\t* Tests {@link Manager#retrieveAppQuotaDetails()} method with different gmail accounts.\n\t*/\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails_googleAccount() throws Exception {\n\n\tLogonHelper logonHelper = new LogonHelper();\n\tHttpResponse response = null;\n\ttry {\n\t\t\tString application = logonHelper.login(logonHelper.getGmailApplication(\"myAppId\", \"myAppKey\"), \"myAppPassword\");\n\t\t\tassertNotNull( application );\n\n\t\t\tresponse = logonHelper.makeRequest(QUOTA_URL + application + \"/\" + application + \"/quota\", new DefaultHttpClient());\n\n\t\t\tHttpGet getRequest = new HttpGet(QUOTA_URL.replace(\"%IAMAPPER_ACCOUNTNAME\", application));\n\t\t\t\t\n\t\t\tresponse = logonHelper.verifyRedirectStatus(getRequest);\n\n\t\t\tString content = LogonHelper.getContent(response);\n\t\t\tassertTrue(content.contains(\"1028\"));\n\n\t} catch (Throwable exception) {\n\t\tSystem.out.println(exception);\n\t\texception.printStackTrace();\n\t\tfail(exception.getMessage() + \": \" + response.getStatusLine());\n\t}\n\t}\n\n\t/**\n\t* Test method for\n\t* {@link Manager#retrieveAppQuotaDetails()} using gmail account password.\n\t* <p>\n\t* Tests {@link Manager#retrieveAppQuotaDetails()} method with different gmail accounts.\n\t*/\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails_passwd() throws Exception {\n\t\n\tString application = \"myservice.googleapps.googleusercontent.com\";\n\tLogonHelper logonHelper = new LogonHelper();\n\tHttpResponse response = null;\n\ttry {\n\t\t\tString source = logonHelper.login(logonHelper.getGmailApplication(application, \"myAppKey\"), \"myappPasswd\");\n\t\t\tassertNotNull(source);\n\n\t\t\tresponse = logonHelper.makeRequest(QUOTA_URL + application + \"/\" + application + \"/quota\", new DefaultHttpClient());\n\t\t\tHttpGet getRequest = new HttpGet(QUOTA_URL.replace(\"%IAMAPPER_ACCOUNTNAME\", application));\n\n\t\t\tresponse = logonHelper.verifyRedirectStatus(getRequest);\n\t\t\tassertNotNull(response.getStatusLine());\n\t\t\tassertEquals(\"application.google.it\", response.getStatusLine().getLastHeader(\"Location\"));\n\t} catch (Throwable exception) {\n\t\tSystem.out.println(exception);\n\t\texception.printStackTrace();\n\t\tfail(exception.getMessage() + \": \" + response.getStatusLine());\n\t}\n\n\n\t\t}\n\n\n\n\t/**\n\t* Test method for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}.\n\t* <p>\n\t* Tests {@link Manager#retrieveAppQuotaDetails()} method with gmail account name.\n\t*/\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails_googleAccount() throws Exception {\n\t\t\n\tLogonHelper logonHelper = new LogonHelper();\n\tHttpResponse response = null;\n\ttry {\n\t\t\tString application = \"myservice.googleapps.googleusercontent.com\";\n\t\t\tString source = \"myAppId\" + application.toLowerCase();\n\t\t\tlogonHelper.login(logonHelper.getGoogleApplication(source, \"myAppKey\"), \"myappPasswd\");\n\t\t\t\n\t\t\t// application=myappid,source=myAppName\n\t\t\t// we have to test the same method twice\n\t\t\t\n\t\t\tString quota = \"1028\";\n\t\t\tManager.retrieveAppQuotaDetails(source, logonHelper.getGoogleApplication(application, \"myAppKey\"), logonHelper.getGoogleApplication(application, \"myAppKey\"), quota);\n\t\t\tManager.retrieveAppQuotaDetails(source, logonHelper.getGoogleApplication(application, \"myAppKey\"), logonHelper.getGoogleApplication(application, \"myAppKey\"), quota);\n\t\t\tManager.retrieveAppQuotaDetails(source, logonHelper.getGoogleApplication(application, \"myAppKey\"), logonHelper.getGoogleApplication(application, \"myAppKey\"), quota);\n\t\t\tManager.retrieveAppQuotaDetails(source, logonHelper.getGoogleApplication(application, \"myAppKey\"), logonHelper.getGoogleApplication(application, \"myAppKey\"), quota);\n\t\t\t\n\t} catch (Throwable exception) {\n\t\tSystem.out.println(exception);\n\t\texception.printStackTrace();\n\t\tfail(exception.getMessage() + \": \" + response.getStatusLine());\n\t}\n\t}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Retrieve quota details of application deployed in Google App Engine (no password).\n\t\t* @throws Exception in case of failure\n\t\t*/\n    @Test\n    public void getAppQuotaDetails_default() throws Exception {\n        defaultAppQuotaDetails();\n    }\n\n\t\t/**\n\t\t* Retrieve quota details of application deployed in Google App Engine (with password).\n\t\t* @throws Exception in case of failure\n\t\t*/\n    @Test\n    public void getAppQuotaDetails_withPassword() throws Exception {\n        defaultAppQuotaDetails(null, \"password\");\n    }\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine (with password).\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @throws Exception in case of failure\n     */\n    public void defaultAppQuotaDetails(String userid, String password);\n\n    @Test\n    public void getAppQuotaDetails_noSource() throws Exception {\n        defaultAppQuotaDetails(null, null, null);\n    }\n\n    @Test\n    public void getAppQuotaDetails_withoutPassword() throws Exception {\n        defaultAppQuotaDetails(null, null, \"Application name\");\n    }\n\n    @Test\n    public void getAppQuotaDetails_withoutSource() throws Exception {\n        defaultAppQuotaDetails(null, \"password\", \"Application name\");\n    }\n}\n\n// LogonHelper.java\n",
            "finish_reason": "stop"
        }
    ],
    "id": "11303429-af43-451d-a756-94e18cec9b51",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @param source name of application requesting quota details\n     * @param application appspot application name\n     * @return quota details of application\n     * @throws Exception in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains one unit test case for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {",
    "time_taken": 62.44586420059204,
    "usage": {
        "prompt_tokens": 395
    }
},
{
    "choices": [
        {
            "text": "\n\t/** logon to google app engine function.\n\t * @param userid full gmail address for user\n\t * @param password password\n\t * @param source name of application requesting quota details\n\t * @throws Exception if any error occurs executing the {@link LogonController#loginToGoogleAppEngine(String, String, String)} method.\n\t */\n\t@Test\n\tvoid loginToGoogleAppEngine() throws Exception {\n\t\tString source = \"Google App Engine\";\n\t\tString userid = \"user1\";\n\t\tString password = \"passwd1\";\n\t\tString token = LogicController.loginToGoogleAppEngine(userid, password, source);\n\t\tLogicController.deleteLogon(userid, token);\n\t}\n\t\n\t\n\t/**  Tests Get the URL by the method {@link LogonController#loginToGoogleAppEngine(String, String, String)} method.\n\t * \n\t * **************\n\t * \n\t * @throws Exception if any error occurs.\n\t */\n\t@Test\n\tvoid getURL()  throws Exception {\n\t\tString userid = \"user1\";\n\t\tString password = \"passwd1\";\n\t\tString token = LogicController.loginToGoogleAppEngine(userid, password);\n\t\tString url = LogicController.getUrlByLogon(userid, token);\n\t\tassertTrue(url!= null);\n\t}\n\t\t\n\t@Test\n\tvoid postForm() throws Exception {\n\t\tString postForm = \"{\\\"user\\\":{\\\"email\\\":\\\"test@example.com\\\"},\\\"password\\\":\\\"user2\\\"}\";\n\t\tList<NameValuePair> postFormParams = new ArrayList<NameValuePair>();\n\t\tpostFormParams.add(new BasicNameValuePair(\"user\", \"user1\"));\n\t\tpostFormParams.add(new BasicNameValuePair(\"password\", \"user2\"));\n\t\tassertNotNull(LogicController.postForm(postForm, postFormParams));\n\t}\n\t\n\t\n\t/**\n\t * Tests the URL of the method {@link #PostLogon(String, String, String)} that\n\t * is given in a logon to Google AppEngine request\n\t * by the client.\n\t * \n\t * @throws Exception if any error occurs.\n\t */\n\t@Test\n\tvoid testPostLogonByGmailApp() throws Exception {\n\t\tString userid = \"user1\";\n\t\tString password = \"passwd1\";\n\t\tLogonController.loginToGoogleAppEngine(userid, password);\n\t}\n\t\n\t/**\n\t * Tests {@link #PostLogon(String, String, String) PostLogon} that\n\t * is given in a logon to Google AppEngine request.\n\t *\n\t * @throws Exception if any error occurs.\n\t */\n\t@Test\n\tvoid testPostLogonByGmail() throws Exception {\n\t\tString userid = \"user1\";\n\t\tString password = \"passwd1\";\n\t\tLogonController.loginToGoogleAppEngine(userid, password);\n\t}\n\n\tpublic static String loginToGoogleAppEngine(String userid, String password) throws Exception {\n\t\tString uriString = \"http://www.google.com\";\n\t\treturn loginToGoogleAppEngine(userid, password, uriString);\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final String LOGON_URL = \"https://www.google.com/accounts/oauth\";\n\t\t\n    private static final HTTP.Response EXPECTED_RESPONSE = new DefaultHttpClient()\n                   .execute(new HttpGet(\"https://www.google.com/accounts/oauth\"))\n                   .getResponseBody();\n\t\t\n    private final DefaultHttpClient client = new DefaultHttpClient();\n\n\t\t\n\t@Test\n\tpublic void logonToGoogleAppEngineShouldReturnTheLastURL() throws Exception {\n\t\tHttpResponse httpResponse = client.execute(new HttpGet(LOGON_URL));\n\t\tassertEquals(\"The last URL should be: \" + LOGON_URL, EXPECTED_RESPONSE.getStatusLine().getStatusCode(), httpResponse.getStatusLine().getStatusCode());\n\t}\n\t\t\n\t@Test\n\tpublic void shouldGetLogonFormWithoutUser() throws Exception {\n\t\tString userid = LOGON_URL + \"?source=\" + \"MockAuth\";\n\t\tString password = PASSWORD;\n\t\tHttpGet get = new HttpGet(userid);\n\t\tString response = client.execute(get, new HttpRedirectHandler(userid)).getResponseBody();\n\t\tassertEquals(\"Check if response is OK\", \"OK\", response);\n\t}\n\t\n\tprivate class HttpRedirectHandler implements HttpHandler {\n\t\tprivate String userid;\n\t\t\n\t\tpublic HttpRedirectHandler(String userid) {\n\t\t\tthis.userid = userid;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void handle(HttpResponse response) throws Exception {\n\t\t\tassertEquals(\"Check if response header is OK\", 302, response.getStatusLine().getStatusCode());\n\t\t\tassertEquals(this.userid + \" does not include the expected ACSID\", response.getFirstHeader(\"User-Agent\").getValue(), \"Google App Engine\");\n\t\t\ttry (InputStream in = response.getEntity().getContent()) {\n\t\t\t\tList<BasicNameValuePair> formVars = new ArrayList<>();\n\t\t\t\t\tfor (NameValuePair pair : new LineNumberReader(new BufferedReader(new InputStreamReader(in)))) {\n\t\t\t\t\t\tformVars.add(new BasicNameValuePair(pair.getName(), pair.getValue()));\n\t\t\t\t\t}\n\t\t\t\t\tnew HttpPost(userid).setEntity(new UrlEncodedFormEntity(formVars));\n\t\t\t}\n\t\t}\n\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t *  This test case tests if the method {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} succeeds if the gmail username and password are given, but if the source app does not need to use Google Analytics service, \n\t *  it uses Google Accounts service to create an account.\n\t *\n\t * @throws Exception if any error happens in the execution of the test\n\t */\n\t@Test\n\tvoid testLoginToGoogleAppEngine() throws Exception {\n\t\t\n\t\tfinal String source = \"FailedApp\";\n\t\tfinal String email = \"foo@google.com\";\n        final String password = \"\";\n        \n        System.out.println(\"\\nTest of login to Google Accounts service...\");\n\t\t\n\t\tString username = \"\";\n\t\tString password_googleanalytics = \"\";\n\t\tString newuser_googleanalytics_email = \"\";\n\t\tString newuser_googleanalytics_password = \"\";\n        String newuser_email = \"\";\n\n\t     BufferedReader reader = null;\n\t\tString response = null;\n        try {\n\t\t\t\t\n        \t// Create a HTTP client.\n        \tDefaultHttpClient httpClient = new DefaultHttpClient();\n        \n        \t// Create a POST request.\n        \tHttpPost postRequest = new HttpPost(\"https://accounts.google.com/SignUp\");\n\t\t\tint requestSent = HttpResponse.SC_OK;\n\n\t\t\t// Add the username and password.\n\t\t\tpostRequest.addHeader(new BasicNameValuePair(\"Email\", email));\n\t\t\tpostRequest.addHeader(new BasicNameValuePair(\"Password\", password));\n\n            HttpResponse responseGmail = httpClient.execute(postRequest);\n            requestSent = responseGmail.getStatusLine().getStatusCode();\n            assertEquals(\"Failed with request success: code: \" + requestSent, 200, requestSent);\n\n\t\t\tBufferedReader readerGmail = new BufferedReader(new InputStreamReader(responseGmail.getEntity().getContent()));\n\t\t\tresponse = readerGmail.readLine();\n\t\t\treader = new BufferedReader(new InputStreamReader(response));\n\n        \t// Read the username token.\n\t\t\tresponse = reader.readLine();\n        \tif (response!= null)\n        \t\tusername = response.trim();\n\n        \t//Read the googleid token.\n        \tresponse = reader.readLine();\n        \tif (response!= null)\n \t\t\t{\n\t\t\t\tresponse_googleanalytics = response.trim();\n\t\t\t\tusername = response.trim();\n\t\t\t\tpassword = response.trim();\n        \t}\n        \t\n        \t// Read the email token.\n        \tresponse = reader.readLine();\n        \tif (response!= null)\n        \t\temail = response.trim();\n\n        \t// Read the email token.\n        \tresponse = reader.readLine();\n        \tif (response!= null)\n        \t\tnewuser_email = response.trim();\n        \t\n        \t// Read the googleid token.\n        \tresponse = reader.readLine();\n        \tif (response!= null)\n        \t\tnewuser_googleanalytics_email = response.trim();\n        \t\n        \t// Read the googleid token.\n        \tresponse = reader.readLine();\n        \tif (response!= null)\n        \t\tnewuser_googleanalytics_password = response.trim();\n\n        \t// Verify that the two credentials are present on the server.\n        \tassertEquals(\"Wrong Google Accounts service response.\", username, newuser_email);\n        \tassertEquals(\"Wrong Google Accounts service response.\", password == null? \"\" : password, newuser_googleanalytics_password);\n        \tassertEquals(\"Wrong Google Accounts service response.\", newuser_email, newuser_googleanalytics_email);\n        }\n        finally {\n        \tif (response!= null) {\n        \t\treader.close();\n        \t\treader = null;\n        \t} else {\n        \t\treader = new BufferedReader(new InputStreamReader(System.in));\n            }\n        }\n\n\t\t// Create the expected credentials string from username/password.\n\t\tStringBuilder credentials = new StringBuilder().append(username).append(\"@\").append(password);\n\t\t\n\t\t// Check that the new credentials string contains the expected account ID.\n\t\tint idx = credentials.toString().indexOf(\"ACCOUNT ID\");\n\t\tassertTrue(\"Missing credentials for account creation.\", idx!= -1 && idx < credentials.length());\n\t\t\n\t\t// Get a list of the existing Accounts that are created for the account ID from the expected credentials string.\n\t\tList<Cookie> listGmailAccts = new ArrayList<Cookie>();\n\t\twhile (true) {\n\t\t\tSystem.out.println(\"\\nTest of existing accounts...\");\n\t\t\t\n\t\t\tList<NameValuePair> credentials1 = new ArrayList<NameValuePair>();\n\t\t\tCookie[] cookies = httpClient.getCookieStore().getCookies();\n \t\t\t\n\t\t\tSystem.out.println(\"Found at least \" + cookies.length + \" cookies.\");\n\t\t\tList<String> existingUidVars = \n\t\t\t\t\t\tnew ArrayList<String>(cookies.length);\n\t\t\tfor (int i = 0; i < cookies.length; i++) {\n\t\t\t\ttry {\n\t\t            Cookie c = cookies[i];\n\t\t            Cookie[] nextCookie = \n\t\t            \t\thttpClient.getCookieStore().getCookies();\n\t\t            existingUidVars = \n\t\t                      new ArrayList<String>(nextCookie.length);\n\t\t            for (int j=0;j<nextCookie.length;j++) {\n\t\t                if (c.getName().equals(c.getName() + \"/ACctID\")) {\n\t\t                    existingUidVars.add(nextCookie[j].getValue());\n\t\t                }\n\t\t            }",
            "finish_reason": "length"
        },
        {
            "text": "\n    private final static String TEST_RESPONSE = \"123\";\n    private final static String TEST_USERID = \"email@123456789.apps.googleusercontent.com\";\n    private final static String TEST_PASSWORD = \"1234567871234\";\n\n    private String TEST_GOLOID_ID = \"\";\n    private String TEST_GOLOID_NAME = \"my-custom-app\";\n    private String TEST_API_URL = \"https://www.google.com\";\n\n    /**\n     * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}.\n     * @throws Exception if any exception occurs\n     */\n    @Test\n    public void testLoginToGoogleAppEngine() throws Exception {\n        // Setup\n        LogonHelper.loginToGoogleAppEngine(TEST_USERID, TEST_PASSWORD, TEST_API_URL);\n\n        // execute the test case using GET test method\n        HttpClient client = new DefaultHttpClient();\n        HttpGet getMethod = new HttpGet(TEST_API_URL);\n        try (LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(client.execute(getMethod))))) {\n            List<NameValuePair> nvps = new ArrayList<>();\n            NameValuePair key = new BasicNameValuePair(\"acs_id\", TEST_GOLOID_ID);\n            nvps.add(key);\n            KeyValuePair[] value = new KeyValuePair[1];\n            value[0] =  new KeyValuePair(TEST_GOLOID_NAME, TEST_GOLOID_NAME);\n            key = new BasicNameValuePair(\"key\", String.valueOf(value));\n            nvps.add(key);\n            List<NameValuePair> formparams = new ArrayList<>(2);\n            formparams.add(new BasicNameValuePair(\"password\", TEST_PASSWORD));\n            formparams.add(new BasicNameValuePair(\"username\", TEST_USERID));\n            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams);\n            getMethod.getParams();\n            getMethod.setEntity(entity);\n            String responseString = in.readLine();\n\n            // check result\n            assertNotNull(responseString);\n            assertTrue(responseString.contains(\"Login\"));\n        }\n\n    }\n\n    /**\n     * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String, String)}.\n     * @throws Exception if any exception occurs \n     */\n    @Test\n    public void testLoginToGoogleAppEngineWithOAuth() throws Exception {\n        logonsWithOAuth();\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n//    private static ApplicationInstance instance;\n    \n    private static ApplicationInstance instance;\n    \n    private static final String ACSIDStringBody1 = \"http://www.google.com/acsidb/discover\";\n    private static final String ACSIDStringBody2 = \"http://www.google.com/acsidb/discover?start_revision=2\";\n\t\n//    /**\n//     * Sets up the fixture, for example, open a network connection.\n//     * This method is called before a test is executed.\n//     */\n//    protected void setUp() {\n//        System.clearProperty(\"httpsession_max_age\");\n//\tsuper.setUp();\n//    }\n//\n//    /**\n//     * Tears down the fixture, for example, close a network connection.\n//     * This method is called after a test is executed.\n//     */\n//    protected void tearDown() {\n//        // The following code causes the connection of the HTTPS session to be torn down.\n//        // Without this the test fails because of the new URL format.\n//        SessionManager.getInstance().close();\n//\tsuper.tearDown();\n//    }\n\n    /**\n     * Tests if the correct ACSID header is generated with the ACSID string to be set.\n     * The userID parameter is expected to contain the full gmail address, after the port.\n     * The password parameter contains the application-specific password.\n     * The source parameter contains the domain of the app, so you can have multiple instances across versions - e.g. test_gmail.google.com.\n     */\n    @Test\n    void testLoginToGoogle_ACSIDSetInRequestHeader() throws Exception {\n        logout(\"logged_in\", \"http://login.test:443\");\n        String expectedAuth = ACSIDStringBody1 + \"&\" + BasicNameValuePair.toString(\"userid\", \"123456789-123456789\") + \"&\" + BasicNameValuePair.toString(\"pass\", \"123456\");\n        String actualAuth1 = getRequestHeaderValue(\"Authorization\");\n        assertEquals(expectedAuth, actualAuth1);\n\t\t\n        logout(\"logged_in\", \"http://login.test:443\");\t\n        expectedAuth = ACSIDStringBody2;\n        actualAuth1 = getRequestHeaderValue(\"Authorization\");\n        assertEquals(expectedAuth, actualAuth1);\n\t\n    }\n    \n    @Test\n    void testLoginToGoogle_NoACSIDSetInRequestHeader() throws Exception {\n        logout(\"logged_in\", \"http://login.test\");\n        String actualAuth = getRequestHeaderValue(\"Authorization\");\n        assertNull(actualAuth);\n        \n        logout(\"logged_in\", \"http://login.test\");\n        actualAuth = getRequestHeaderValue(\"Authorization\");\n        assertNull(actualAuth);\n    }\n    \n    \n\t/**\n     * Sets up the test case before a test is executed.\n     *\n     * @param source the source of the request\n     * @param userid full gmail address, after the port\n     */\n    private void logout(String source, String url) throws Exception {\n        String[] urls = new String[] {url};\n        List<NameValuePair> headers = new ArrayList<NameValuePair>();\n        headers.add(new BasicNameValuePair(\"Authorization\", \"Bearer \" + getAuthorizationToken()));\n        Request.Builder req1 = new Request.Builder(\"GET\")\n\t\t\t.setUrl(url)\n\t\t\t.addHeader(\"Accept\", \"application/xml\")\n\t\t\t.addHeader(\"Referer\", \"http://www.google.com/acsidb\");\n        Request req2 = req1.build();\n\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n\n        HttpGet get = new HttpGet(url);\n        try {\n           HttpResponse response = httpClient.execute(get);\n           HttpResponse response1 = httpClient.execute(req1);\n\t      HttpResponse response2 = httpClient.execute(req2);\n\n           assertEquals(200, response2.getStatusLine().getStatusCode());\n       \n           assertEquals(200, response1.getStatusLine().getStatusCode());\n\t    HttpEntity entity = response1.getEntity();\n\t       \n\t    LineNumberReader lineReader1 = new LineNumberReader(new InputStreamReader(entity.getContent()));\n\t    BufferedReader reader1 = new BufferedReader(lineReader1);\n\n           assertNotNull(entity);\n           assertNotNull(reader1);\t  \n\t   assertEquals(200, response2.getStatusLine().getStatusCode());\t\n\t    lineReader1.close();\n\t    reader1.close();\n           \n\t\t} finally {\n            if (reader1!= null) {\n                reader1.close();\n            }\n            if (lineReader1!= null) {\n                lineReader1.close();\n            }\n\t\t}\n    }\n    \n    private String getRequestHeaderValue(String name) {\n        return (String) this.httpClient.execute(new HttpGet(urlToURI(\"http://login\")), new BasicNameValuePair(name, \"\")).getEntity().getContent()\n               .trim();\n    }\n    \n    private String urlToURI(String url) {\n        InputStream is = new DefaultHttpClient().execute(new HttpGet(url)).getEntity().getContent();\n        return is.toString();\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid loginToGoogleAppEngineTest() {\n\t\tassertEquals(\"LoginToGoogleAppEngine failure\", \"LoginToGoogleAppEngine\", new LogonHelper().loginToGoogleAppEngine(\"12345678912\", \"123412341234\", \"Gemini-Google\"));\n\t}\n\t\n\t@Test\n\tvoid loginToGoogleAppEngineUsernameTest() {\n\t\tString baseUrl = \"http://localhost/\";\n\t\tString usrName = \"UserName\";\n\t\tString password = \"12345678912\";\n\t\t\n\t\tassertEquals(LogonHelper.LOGON_TYPE, new LogonHelper().loginToGoogleAppEngine(usrName, password, \"Gemini-Google\"));\n\t\tassertEquals(\"UserName\", new LogonHelper().loginToGoogleAppEngine(usrName, password, \"Gemini-Google\"));\n\t\tassertEquals(\"Gemini-Google\", new LogonHelper().loginToGoogleAppEngine(usrName, password, \"GoogleAppEngine\"));\n\t\tassertEquals(\"GoogleAppEngine\", new LogonHelper().loginToGoogleAppEngine(usrName, password, \"GoogleAppEngine\"));\n\t}\n\t\n\t@Test\n\tvoid loginToGoogleAppEnginePasswordTest() {\n\t\tString baseUrl = \"http://localhost/\";\n\t\tString usrName = \"UserName\";\n\t\tString password = \"1234123\";\n\t\t\n\t\tassertEquals(LogonHelper.LOGON_TYPE, new LogonHelper().loginToGoogleAppEngine(usrName, password, \"GoogleAppEngine\"));\n\t\tassertEquals(\"GoogleAppEngine\", new LogonHelper().loginToGoogleAppEngine(usrName, password, \"GoogleAppEngine\"));\n\t\t\n\t\t// We can also log on a different machine\n\t\tString otherMachine = \"othermachine\";\n\t\tString passwordOtherMachine = \"otherpassword\";\n\t\tString baseUrlOther = \"dummy-other-http://\";\n\t\tassertEquals(LogonHelper.LOGON_TYPE, new LogonHelper().loginToGoogleAppEngine(usrName, passwordOtherMachine, otherMachine));\n\t}\n\t\n\tprivate String basicUsername() {\n\t\tString baseUrl = \"http://localhost/\";\n\t\tString user = \"username\";\n\t\tString password = \"password\";\n\t\treturn user + \"@\" + password;\n\t}\n\t\n\tprivate String basicPassword() {\n\t\tString baseUrl = \"http://localhost/\";\n\t\tString user = \"username\";\n\t\tString password = \"password\";\n\t\treturn user + \":\" + password;\n\t}\n\n\tprivate List<BasicNameValuePair> basicParameterPairsToPost() {\n\t\tBasicNameValuePair[] bvPairs = new BasicNameValuePair[2];\n\t\tbvPairs[0] = new BasicNameValuePair(\"user\", \"username\");\n\t\tbvPairs[1] = new BasicNameValuePair(\"pass\", \"xxxx\");\n\t\treturn new ArrayList<BasicNameValuePair>(Arrays.asList(bvPairs));\n\t}\n\t\n\tprivate int getResponseCodeFromPostUrl(String url) {\n\t\tint responseCode = 0;\n\t\tHttpPost httpPost = new HttpPost(url);\n\t\tString entity = new LineNumberReader(\n\t\t        new BufferedReader(\n\t\t                new InputStreamReader(\n\t\t                        httpPost.getEntity().getContent()\n\t\t                        ))).readLine();\n\t\tresponseCode = Integer.parseInt(entity.substring(entity.indexOf(\":\") + 1));\n\t\treturn responseCode;\n\t}\n\t\n\tprivate String postUrl() {\n\t\tString url = \"http://www.google.com/accounts/ClientLogin\";\n\t\tString entity = new LineNumberReader(\n\t\t        new BufferedReader(\n\t\t                new InputStreamReader(\n\t\t                        httpPost(url))).readLine()).readLine();\n\t\treturn entity;\n\t}\n\n\tprivate HttpPost httpPost(String url) {\n\t\tHttpPost httpPost = new HttpPost(url);\n\t\treturn httpPost;\n\t}\n\n\tprivate  byte[] getResponseBytesFromPostUrl(String url) throws Exception {\n\t\tString response = HttpPost(url).getEntity().getContent();\n\t\treturn (byte[]) (new UrlEncodedFormEntity(\n\t\t    new BasicNameValuePair((new StringBuilder()).append(basicUsername()).append(\"&pass=\").append(basicPassword()).append(\"&url=\").append(postUrl()).toString())\n\t\t));\n\t\t}\n\t\n\tprivate BasicNameValuePair[] basicPairsFromPostUrl(String url) {\n\t\tBasicNameValuePair[] bPairs = new BasicNameValuePair[2];\n\t\tString bUsername = new StringBuilder().append(basicUsername()).append(\"&pass=\").append(basicPassword()).toString();\n\t\tString bPassword = new StringBuilder().append(\"pass=\").append(basicPassword()).toString();\n\t\tbPairs[0] = new BasicNameValuePair(\"user\", bUsername);\n\t\tbPairs[1] = new BasicNameValuePair(\"pass\", bPassword);\n\t\treturn new BasicNameValuePair[] { bPairs };\n\t}\n\t\n\tprivate String getResponseStringFromPostUrl(String url) {\n\t\tHttpPost httpGet = new HttpPost(url);\n\t\tHttpResponse response = httpGet.execute();\n\t\tString content = EntityUtils.toString(response.getEntity());\n\t\treturn content;\n\t}\n\t\n\tprivate HttpResponse getResponseFromPostUrl(String url) {\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tlong responseStart = getResponseTime(httpGet);\n\t\tHttpResponse response = httpGet.execute();\n\t\tString content = EntityUtils.toString(response.getEntity());\n\t\tlong responseEnd = getResponseTime",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Unit test case for {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}.\n\t\t */\n    @Test\n    void loginToGoogleAppEngine() {\n            String userid, password, source;\n\t  //Get Google credentials\n\t  userid = \"yourAccountName\";\n\t  password = \"yourAccountPwd\";\n\t  source = \"userAppID\";\n\t  String response = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t  assertNotNull(\"Null\",response);\n    }\n}\n\n// LogonHelper.java\nclass LogonHelper {\n\t/**\n\t * Authenticate the HTTP request as required by Google's security.\n\t *\n\t * @param username user name\n\t * @param password password\n\t * @return the login response as an array of String\n\t * @throws Exception if there is some error\n\t */\n        public static String[] authenticateHTTPRequest(String username, String password) throws Exception {\n\t\t  //Create the test HTTP Client\n\t\t  DefaultHttpClient httpClient = new DefaultHttpClient();\n\t\t  HttpGet getAccountCredentials = httpClient.buildRequest(\"https://accounts.google.com/SignInFields\", null, null);\n\t\t  HttpResponse response = null;\n\t\t  List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n\n\t\t  //Add parameters on first call\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"email\", username));\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"password\", password));\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"callback\", \"http://auth.google.com/a/oauth2/request_token\"));\n\n\t\t  //Execute the first call\n\t\t  response = getAccountCredentials.execute();\n\t\t  if (response!= null) {\n\t\t\t  //Wait for response\n\t\t\t  HttpResponse reponse = response;\n\t\t\t  while(reponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\t  //System.out.println(\"\\t\\t\\tResponse: \" + response.getStatusLine());\n\t\t\t\t  String responseString = (reponse.getStatusLine().getStatusCode() == 200? reponse.getStatusLine().toString():\"\");\n\t\t\t\t  String responseStringWithLinks = responseString.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\");\n\t\t\t\t  //System.out.println(\"\\n\\nResponse string wich links: \" + responseStringWithLinks);\n\t\t\t\t  InputStream inputStream = reponse.getEntity().getContent();\n\t\t\t\t  String[] results = (responseStringWithLinks.split(\"\\r(.*$)\")).toArray(new String[]{});\n\t\t\t\t  assertFalse(\"\\t\\t\\tThere should not be an empty array\", results.length == 0? false : true);\n\t\t\t\t  //System.out.println(\"\\t\\t\\tChecking Google Apps for Google Login\");\n\t\t\t\t  //Check for the valid Google App Engine account details.\n\t\t\t\t  for(String gapp : results) {\n\t\t\t\t\t  LogonHelper.checkGoogleGoogleLogin(inputStream, gapp);\n\t\t\t\t  }\n\t\t\t\t  //Close the input stream.\n\t\t\t\t  inputStream.close();\n\t\t\t\t  //System.out.println(\"\\t\\t\\tAuthenticated with response status code: \" + reponse.getStatusLine().getStatusCode());\n\t\t\t\t  reponse = response;\n\t\t\t  }\n\t\t  }\n\t\t  //Not reachable return null\n        \treturn new String[]{null};\n\t  }\n\t  /**\n\t * Get the Google account ID for the user.\n\t * @param username user's gmail account name\n\t * @return the string of Google's account ID\n\t */\n        private static String getAccountCredentials(String username) {\n\t        //Get the Google account credentials\n\t\t  DefaultHttpClient httpClient = new DefaultHttpClient();\n\t\t  HttpGet getAccountCredentials = httpClient.buildRequest(\"https://accounts.google.com/SignInFields\", null, null);\n\t\t  HttpResponse response = null;\n\t\t  List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n\t\t  //Add parameters on first call\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"email\", username));\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"callback\", \"http://auth.google.com/a/oauth2/request_token\"));\n\t\t  nameValuePairs.add(new BasicNameValuePair(\"scope\", \"https://www.googleapis.com/auth/userinfo.profile\"));\n\n\t\t  //Execute the first call\n\t\t  response = getAccountCredentials.execute();\n\t\t  if (response!= null) {\n\t\t\t  //Wait for response\n\t\t\t  HttpResponse reponse = response;\n\t\t\t  while(reponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\t  //System.out.println(\"\\t\\t\\tResponse: \" + response.getStatusLine());\n\t\t\t  }\n\t\t\t  String responseString = (reponse.getStatusLine().getStatusCode() == 200? reponse.getStatusLine().toString():\"\");\n\t\t\t  String responseStringWithInfo = responseString.replaceAll(\"\\r\", \"\");\n//\t\t\t  Log.e(\"LogonHelperTest\", responseStringWithInfo);\n\t\t\t  return responseStringWithInfo;\n\t\t  }\n\t\t  //Not reachable return null\t\n\t\t  return null;\n\t  }\n\t  /**\n\t * Authenticate a single account with Google.\n\t */\n\tprivate static void checkGoogleGoogleLogin(InputStream inputStream, String email) throws Exception {\n\t\t  ",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t     * Initializes the unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}\n\t\t * method.\n\t\t*/\n        @Test\n        public void init() {\n                LogonHelper.loginToGoogleAppEngine(\"user\", \"password\", \"app\");\n        }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Initializes the login test in a new Thread.\n\t\t * @param args application name and password\n\t\t * @pre application name is not blank\n\t\t * @post method creates a new thread to login to Google App Engine\n\t\t */\n\t\t@Test\n\t\tvoid basicLogonTest(\n\t\t\t\tString app_name, String app_password, String source\n\t\t\t\t) throws Exception {\n\t\t\t\tnew Thread(\n\t\t\t\t\t\tapp_name + \"[\" + source +\"]:\" + \"<b>\" + app_password + \"</b>\",\n\t\t\t\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinitApplication(app_name, app_password);\n\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\tassert(false);\n\t\t\t\t\t}\n\t\t\t\t\tlogonToGoogleAppEngine(app_name, app_password, source);\n\n\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t\t}\nprivate static void logonToGoogleAppEngine(\n\t\t\t\tString app_name, String app_password, String source) throws Exception {\n\t\t\n\t\tDefaultHttpClient httpC=new DefaultHttpClient();\n\t\tStringBuilder bodyBuilder=new StringBuilder();\n\n\t\tbodyBuilder.append(\"email=\");\n\t\tbodyBuilder.append(app_name);\n\t\tbodyBuilder.append(\"&password=\");\n\t\tbodyBuilder.append(app_password);\n\t\tbodyBuilder.append(\"&source=\");\n\t\tbodyBuilder.append(source);\n\t\tbodyBuilder.append(\"&login=http://appengine\");\n\t\t\n\t\tURL url=new URL(bodyBuilder.toString());\n\t\tHttpPost post=new HttpPost(url);\n\t\tpost.setEntity(new UrlEncodedFormEntity(new NameValuePair[]{new BasicNameValuePair(\"logon\", bodyBuilder.toString())}));\n\n\t\tHttpResponse response=httpC.execute(post);\n\t\t\n\t\t\n\t\tassertEquals(200,response.getStatusLine().getStatusCode());\n\t\tassertTrue(response.getFirstHeader(\"Cache-Control\").getValue().matches(HTTP.NONE));\n\t\tassertTrue(response.getFirstHeader(\"Pragma\").getValue().matches(HTTP.NONE));\n\t\tassertTrue(response.getFirstHeader(\"Access-Control-Allow-Origin\").getValue().matches(HTTP.NONE));\n\t\tassertTrue(response.getFirstHeader(\"Access-Control-Allow-Methods\").getValue().matches(HTTP.GET));\n\t\tassertTrue(response.getFirstHeader(\"Access-Control-Allow-Headers\").getValue().matches(HTTP.CONTENT_TYPE));\n\t\t}\n\t\t\n\t\t@Test\n\t/*\n\t\tA new thread gets its own application, then performs a get on the logonUrl and it waits for the get to succeed\n\t\tIt then sends it to Google App Engine\n\t\t*/\n\t\tpublic void logonThreadAndThreadDoesNotExistAndSucceedsThroughItsOwnThread() throws Exception {\n\t\t\tnew Thread(\n\t\t\t\t\t\"Logon Thread Thread does not exist or doesn't belong to this thread: logonUrl\"\n\t\t\t\t\t).start();\n\t\t\t\n\t\t\tNewThreadTest.logonThreadAndThreadDoesNotExistAndSucceedsThroughItsOwnThread(\"newThread\");\n\t\t}\n\t\t\n\t\t@Test\n\t\t/*\n\t\tA new thread gets its own application, then performs a get on the logonUrl and it waits for the get to succeed\n\t\tIt then sends it to Google App Engine\n\t\t*/\n\t\tpublic void threadNameLoggingThroughItsOwnThreadAndSuccesfulLogonToGoogleAppEngine() throws Exception {\n\t\t\tnew Thread(\n\t\t\t\t\t\"threadNameLoggingThroughItsOwnThreadAndSucceedsThroughItsOwnThread\"\n\t\t\t\t\t).start();\n\t\t\t\n\t\t\t//Thread.start()\n\t\t\tNewThreadTest.threadNameLoggingThroughItsOwnThreadAndSucceedsThroughItsOwnThread(\"threadNameLoggingThroughItsOwnThread\");\n\t\t\t\n\t\t}\n\t\t\n\t@Test\n\t/*\n\tAs above, but with one thread getter\n\t*/\n\tpublic void newThreadRunsLogonAndGetters() throws Exception {\n\t\tfinal String app_name = \"newThreadRunsLogonAndGettersTest\";\n\t\tfinal String app_password = \"newPasswordTest\";\n\t\tfinal String source= \"newSourceTest\";\n\n\n\t\tfinal Thread thread1=new Thread(\"newThreadRunsLogonAndGetters1\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlogonToGoogleAppEngine(\n\t\t\t\t\t\tapp_name,\n\t\t\t\t\t\tapp_password,\n\t\t\t\t\t\tsource\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\tnew Thread(\n\t\t\t\t\"newThreadRunsLogonAndGetters2\"\n\t\t\t\t).start();\n\n\t\t//System.out.println(\"Running test case: \"  + e);\n\t\treturn;\n\t}\n\t\n\t/**\n\t * Initialize a new application and log on to Google App Engine\n\t * @pre application name is not blank\n\t * @pre application password is not blank\n\t * @pre source is not blank\n\t */\n\tprivate void initApplication(String app_name, String app_password) throws Exception{\n\n\t\t\n\t\ttry {\n\t\t\tList<NameValuePair> params = new ArrayList<NameValuePair>();\n\t\t\t\n\t\t\tparams.add(new BasicNameValuePair(\"logon\", app_name));\n\t\t\tparams.add(new BasicNameValuePair(\"password\", app_password));\n\t\t\tparams.add(new BasicNameValuePair(\"source\", source));\n\t\t\t\t\n\t\t\tCookie cookie = GoogleConfig.get(CookieType.NONE);\n\t\t\t\n\t\t\t\n\t\t\tStringBuilder logon_url = new StringBuilder();\n\t\t\tlogon_url.append(GoogleConfig.get(GoogleConfig.DOMAIN_NAME))\n\t\t\t\t\t.append(GoogleConfig.get(GoogleConfig.DOMAIN)).append(GoogleConfig.get(GoogleConfig.SCOPES_NAME));\n\t\t\t\n\t\t\t\n\t\t\t//params.add(new Basic",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Creates an instance.\n\t\t * @throws Exception \n\t\t */\n\t\tpublic LogonHelperTest() throws Exception {\n\t\t\tsuper();\n\t\t}\n\n\t\t/**\n\t\t * Reads the request header from the given file and parses it.\n\t\t *\n\t\t * @throws Exception is any exception while reading the header\n\t\t */\n\t\t@Test\n\t\tpublic void readHeaderFromFile() throws Exception {\n\t\t\tInputStream in = LogonHelperTest.class.getClassLoader().getResourceAsStream(\"login-helper-test.txt\");\n\t\t\tLineNumberReader fr = new LineNumberReader(new BufferedReader(new InputStreamReader(in)));\n\t\t\tString string = fr.readLine();\n\n\t\t\tassertNotNull(string);\n\t\t}\n\n\t\t/**\n\t\t * Extracts the ACL cookie from getRequestHeader() and parses its value.\n\t\t *\n\t\t * @param requestHeader contains the request header to be parsed\n\t\t * @return the parsed ACL cookie\n\t\t * @throws Exception \n\t\t */\n\t\tprotected final String parseCookieValue(String requestHeader) throws Exception {\n\t\t\tDefaultHttpClient httpclient = new DefaultHttpClient();\n\n\t\t\tList<NameValuePair> pairs = new ArrayList<>();\n\n      // Get a list of URL parameters with the 'google.logged_in' option from the cookie\n      Cookie[] cookies = httpclient.getCookieStore().getCookies();\n      for( Cookie cookie : cookies ) {\n            pairs.add( new BasicNameValuePair(\"google.logged_in\", cookie.getName()));\n      }\n\n      // Get the header of the request\n      HttpGet httpget = new HttpGet(\"http://developers.google.com\");\n\n      // Send the request and retrieve the response\n      HttpResponse response = httpclient.execute(httpget);\n\n      // Parse the resulting String\n      String result = null;\n      result = response.getLastHeader(\"Set-Cookie\").getValue();\n        if( result!= null ){\n            String[] splittedResult = result.split(\";\");\n            if( splittedResult.length > 1 ) { // If more than 1 cookie value is present\n                result = \"\";\n                for(String kv : pairs) {\n                    result += kv.split(\"=\")[1] + \"=\";\n                }\n\n                result = result.substring(0, result.length() - 1);\n            }\n         // else if it's not the last cookie, it must mean that the user is not logged in\n         }\n            throw new Exception(result);\n\t\t}\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "7d7e60d4-6d54-4699-8262-8ff7c39c9c75",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception;\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {",
    "time_taken": 51.35521340370178,
    "usage": {
        "prompt_tokens": 706
    }
}
]