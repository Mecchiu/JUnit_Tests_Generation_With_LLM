ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
6e1f3e05-0637-4848-bdc1-54e9585021ab,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,31.31309700012207,length,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    /**
     */
    private static final long serialVersionUID = -8647088721012280920L;

    private GmFrame parent;

    private JTree tree;

    private JButton btnExec;

    private JSpinner spnMod;

    private MultiHeroTreeModel model;

    private JComboBox cmbUsers;

    private JRadioButton radAttack;

    private JRadioButton radDefense;

    private String frameName;

    /**
     * set up a new window
     * @param parent the parent component and action listener
     * @param heros the data to display in tree
     * @param name the name and caption of this frame
     */
    public InternalGmHeroFrame(GmFrame parent, Vector<Hero> heros, String name) {
    }

    /**
     * create the components that can be viewed and used
     */
    private void createGUI();

    /**
     * get the selected path from the tree
     * @return the selected tree path
     */
    public TreePath getSelectedPath();

    /**
     * get the name of the receiver for a challenge request or the
     * result of a challenge
     * @return the receiver
     */
    public String getReceiver();

    /**
     * get the difficulty for the challenge
     * @return the difficulty
     */
    public int getMod();

    /**
     * enable the execution button
     */
    public void enableButton();

    /**
     * update the combobox for sending data to
     * when a user connects or disconnects
     * @param userlist
     */
    public void updateUsers(String[] userlist);

    /**
     * the game master should not use silent mode.
     * He has to know all results
     * @return false
     */
    public boolean silent();

    public void valueChanged(TreeSelectionEvent e);

    /**
     * Update the view of this tree
     * @param h the new data
     */
    public void updateHero(Vector<Hero> h);

    /**
     * get the frame name (Heros|Enemies)
     * @return the type of the loaded heros
     */
    public String getFrameName();

    /**
     * return if this challenge is a attack or defense
     * @return true if it is an attack
     */
    public boolean isAttack();

    /**
     * get the data of tree
     * @return the heros stored in the tree
     */
    public Vector<Hero> getData();
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {

	/**
* a utility method for testing
* @return true when the frame was closed without failure
*/
	boolean testWindowClosed() {
		return!JFrame.isExtensionPackInstalled();
	}

	/**
* a utility object used to build the swing components
* @param max the width of the largest dimension
* @param min the minimum width
* @param defWidth the default width
* @return a new InternalGmHeroFrame
*/
	InternalGmHeroFrame buildFrame(int max, int min, int defWidth) {
		InternalGmHeroFrame frame = new InternalGmHeroFrame(new GmFrame(), null, frameName);
		frame.setMax(max);
		frame.setMin(min);
		frame.setDefaultWidth(defWidth);
		return frame;
	}
		
	/**
* the maximum width
*/
	int buildDim(int wid) {
	    return wid+(wid>>1);
	}

	/**
* the maximum height
*/
	int buildHeight(int height) {
	    return height+(height>>1);
	}
		
	/**
	* creates the InternalGmHeroFrame
	* @param parent
	* @param frame
	*/
	void createFrame(GmFrame parent,InternalGmHeroFrame frame) {
		this.parent = parent;
		this.frame = frame;
		frame.setSize(buildDim(frame.getMax()), buildHeight(frame.getMax()));		
		
		Vector<Vector<Hero>> heros = new Vector<Vector<Hero>>();
		//create the internal data
		for (int i=0; i<3; i++) {
			Vector<Hero> h = new Vector<Hero>();
			for (int j=0; j<3; j++) {
				if (i>j) {
					h.add(Weapon.AIM);
				}
				else {
					h.add(Weapon.AIM);
				}
			}
			heros.add(h);
		}
		//set up the tree
		tree = new JTree(new CardNodeModel(heros,1, buildHeight(frame.getMax())));
		tree.setEditable(true);
		tree.setRootVisible(false);
		tree.setVisibleRowCount(15);
		tree.setLargeModel(true);
		tree.setSelectionCapable(false);
		tree.setDragEnabled(false);
		tree.setDoubleBuffered(true);
		tree.setResizeable(false);
		tree.setShowsRootHandles(true);
		tree.setSizeIncrement(buildDim(frame.getMax()));
		//set up the buttons
		btnExec = new JButton(""Execute a challenge"");
		btnAttack = new JButton(""Attack"");
		btnReward = new JButton(""Reward"");
		
		btnDefense = new JRadioButton(""Defense"", true);
		btnAttack.setSelected(true);
		btnDefense.setSelected(true);
"
66d54f9c-a37b-480d-8aad-761727ebae74,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java,39.16150116920471,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    private static final long serialVersionUID = 6777899032409172338L;

    private Talent t = null;

    private int attrib1;

    private int attrib2;

    private int attrib3;

    private int mod;

    private String to;

    private boolean silent;

    private String attrib = null;

    private int attrValue;

    private Weapon w = null;

    private boolean attack = false;

    private int dmgkk;

    /**
     * generate new challenge for spells and talents
     * @param tal the talents or spells name
     * @param modification difficulty
     * @param h the hero to get the parameters
     * @param silent response to sender?
     * @param response the receiver of the results
     */
    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {
    }

    /**
     * create new attribute challenge
     * @param attrShortcut the shortcut for the attribute
     * @param h the hero to get the value
     * @param modification the difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {
    }

    /**
     * create a new challenge for a fight
     * @param w the weapon
     * @param attack is attack? else defense
     * @param h the hero
     * @param modification difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {
    }

    /**
     * get the named talent from hero
     * @param tal the name
     * @param h the hero
     * @return the talent (or spell)
     */
    private Talent getTalent(String tal, Hero h);

    /**
     * Set the attributes for a talent (spell) challenge
     * @param h the hero to get the values from
     */
    private void getAttrib(Hero h);

    /**
     * return the value of the attribute
     * @param h the hero
     * @param attr the shortcut of the attribute
     * @return the attributes value
     */
    private int getAttribFromHero(Hero h, String attr);

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     * @return the result as string
     */
    public String roll();

    /**
     * roll the attack or defense with the given weapon
     * @return the results as string
     */
    private String rollFight();

    /**
     * execute talent challenge
     * @return results as string
     */
    private String rollTalent();

    /**
     * execute attribute challenge
     * @return result as string
     */
    private String rollAttr();

    /**
     * represents this challenge
     */
    public String toString();

    /**
     * roll a dice with variable sides
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides);

    /**
     * return the receiver of the results
     * @return the receiver
     */
    public String getTo();

    /**
     * return the silent mode
     * @return the silent value
     */
    public boolean isSilent();
}
","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {
private Challenge challenge;
		
        /**
         * This method create a new instance of Challenge object.
         * @param hthe test hero's entity
         * @param mod the difficulty modifier of the challenge
         * @param t the talent
         * @param w the weapon it is using
         * @param silent is silent the challenge
         * @param str the results string to send to the sender (for spell attacks)
         * @return the instance of Challenge
         */
    public static Challenge_0Test createTestCase(Hero h, int mod, Talent t, Weapon w, boolean silent, String str) { 
        challenge = new Challenge(w, t.isSpell(), h, mod, silent, str); 

        return new Challenge_0Test (h, mod, t, w, silent, str);
    }
    

    public Challenge_0Test(Hero h, int mod, Talent t, Weapon w, boolean silent, String str) {
		this.challenge = new Challenge(w, t.isSpell(), h, mod, silent, str);
	}
    
    /** Add a specific test to the class. */
    @Test
    public void test(){
	if (Challenge_0Test.challenge == null){ //only new test cases possible
        System.out.println(""test for testcase ""+challenge.toString()+"""");
        return;
	}

        System.out.println(""testing for ""+Challenge_0Test.challenge.toString());
        
	assertTrue(Challenge_0Test.challenge.compareTo(Challenge_0Test.createTestCase(h, mod, t)) >= 0);
    }

}
"
e4215394-6825-4d57-9adc-10bcf53f3951,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java,38.99288749694824,length,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    private static final long serialVersionUID = 6777899032409172338L;

    private Talent t = null;

    private int attrib1;

    private int attrib2;

    private int attrib3;

    private int mod;

    private String to;

    private boolean silent;

    private String attrib = null;

    private int attrValue;

    private Weapon w = null;

    private boolean attack = false;

    private int dmgkk;

    /**
     * generate new challenge for spells and talents
     * @param tal the talents or spells name
     * @param modification difficulty
     * @param h the hero to get the parameters
     * @param silent response to sender?
     * @param response the receiver of the results
     */
    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {
    }

    /**
     * create new attribute challenge
     * @param attrShortcut the shortcut for the attribute
     * @param h the hero to get the value
     * @param modification the difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {
    }

    /**
     * create a new challenge for a fight
     * @param w the weapon
     * @param attack is attack? else defense
     * @param h the hero
     * @param modification difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {
    }

    /**
     * get the named talent from hero
     * @param tal the name
     * @param h the hero
     * @return the talent (or spell)
     */
    private Talent getTalent(String tal, Hero h);

    /**
     * Set the attributes for a talent (spell) challenge
     * @param h the hero to get the values from
     */
    private void getAttrib(Hero h);

    /**
     * return the value of the attribute
     * @param h the hero
     * @param attr the shortcut of the attribute
     * @return the attributes value
     */
    private int getAttribFromHero(Hero h, String attr);

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     * @return the result as string
     */
    public String roll();

    /**
     * roll the attack or defense with the given weapon
     * @return the results as string
     */
    private String rollFight();

    /**
     * execute talent challenge
     * @return results as string
     */
    private String rollTalent();

    /**
     * execute attribute challenge
     * @return result as string
     */
    private String rollAttr();

    /**
     * represents this challenge
     */
    public String toString();

    /**
     * roll a dice with variable sides
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides);

    /**
     * return the receiver of the results
     * @return the receiver
     */
    public String getTo();

    /**
     * return the silent mode
     * @return the silent value
     */
    public boolean isSilent();
}
","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {
private static final int ATTR = 1;

		private static final int HPK = 50;
		private static final int ATTK2 = 100;
		private static final int HPK2 = 150;
		private static final int ATT3 = 200;
		private static final int DEX2= 200;
		private static final int DEX1 = 150;
		private static final int DMK2	 = 1;
		private static final int DMK1 = 2;
		private static final int DMK0 = 0;
		private static final int DMKO = -15;
		private static final int DMKO2 = 15;
		private static final int DMS = 30;
		private static final int DMS2 = 100;
		private static final int DMS1 = 45;
		private static final int DMKO3 = 30;

		/**
		 * Return an attribute for a new Hero.
		 * @param h
		 * @return new attribute or null
		 */
		private static Talent getTalent(Hero h) {
			return Game.gameObjects[ATTR];
		};

		/**
		 * Get the values of the named talents
		 * @param h the hero
		 * @return attribute values
		 */
		private static int getAttrfromHero(Hero h) {
			return Game.gameObjects[ATTR];
		};

		/**
		 * Return the values of the skill of the hero.
		 * @param h the hero
		 * @return skill values
		 */
		private static int getSkil_2(Hero h) {
			return Game.gameObjects[DMKO3];
		};

		/**
		 * return the values of the skill of the hero
		 * @param h the hero
		 * @return skill values
		 */
		private static int getSkil_1(Hero h) {
			return Game.gameObjects[DMKO1];
		};

		/**
		 * return the value of the attribute of h with name dms?
		 * @param h
		 * @return attribute value
		 */
		private static int getAttribFromHero(Hero h, String dms) {
			return Game.attrib;
		};

		/**
		 * return the value of the attribute of h with name dms2?
		 * @param h
		 * @return attribute value
		 */
		private static int getAttribFromHero(Hero h, String dms2) {
			return Game.attrib;
		};

		/**
		 * return the values of the skill of h and skill of h2 of the Hero
		 * @param h
		 * @param h2
		 * @return skill of h and skill of h 2
		 */
		private static int getSkilOfHs(Hero h, Hero h2) {
			return Math.min(dms2, dms1);
		};

		/**
		 * return the value of the skill of h and skill of h1 of the Hero
		 * @param h
		 * @param h1
		 * @return skill of h and skill of h 1
		 */
		private static int getSkilOfHs(Hero h, Hero h1) {
			return Math.min(dms1, dms);
		};

		/**
		 * return the values of HPK and HPK2 from the Hero.
		 * @param h
		 * @return HPK1 and HPK2
		 */
		private static int getHPKhpk2(Hero h) {
			return Math.min(HPK2, HPK);
		};

		/**
		 * return the values of HPK and HPK1 from the Hero.
		 * @param h
		 * @return HPK
		 */
		private static int getHPKhpk1(Hero h) {
			return Math.min(HPK2, HPK);
		};

		/**
		 * return the values of HPK and HPK2 from the Hero.
		 * @param h
		 * @return HPK
		 */
		private static int getHPKhpk(Hero h) {"
09a4ee9c-c835-4321-b548-26830229d0a5,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java,43.783509492874146,length,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 *
 * @author bernshausen
 */
public class Hero implements Serializable {

    /**
     */
    private static final long serialVersionUID = 4235381890809856112L;

    private Vector<Attribute> attributes;

    Vector<Talent> talents;

    Vector<FightValue> fightvalues;

    Vector<Special> specials;

    private String name;

    private int INI;

    private int currINI = 0;

    private int currLEP = 0;

    private int currAUP = 0;

    private int currASP = 0;

    private int currKAP = 0;

    private Weapon selectedWeapon = null;

    //	private Armor head;
    private boolean priest = false;

    private boolean magican = false;

    /**
     * create a new hero from a xml file
     * @param xml the file this hero was stored by helden-software
     */
    public Hero(Document xml) {
    }

    /**
     * iteration over the document starting at root-element
     * get all necessary data from the file
     */
    @SuppressWarnings(""unchecked"")
    private void iter(Element e);

    /**
     * search the fight value for a given name
     * @param parentName the name of the fight value
     * @return the object
     */
    private FightValue searchFV(String parentName);

    public String attack(String special, int mod);

    public String defense(String special, int mod);

    public String cast(String spell, int mod);

    public String use(String talent, int mod);

    /**
     * a hero is only described by his name
     */
    public String toString();

    /**
     * return the name of this hero
     * @return the name
     */
    public String getName();

    /**
     * get the initiative
     * @return
     */
    public int getINI();

    /**
     * get all talents of this hero
     * @return the talents
     */
    public Vector<Talent> getTalents();

    /**
     * return the value of the attribute described by the shortcut
     * @param shortcut the shortcut of the attribute
     * @return the value
     */
    public int getAttrValue(String shortcut);

    /**
     * get all attributes of this hero
     * @return the attributes
     */
    public Vector<Attribute> getAttributes();

    /**
     * get all fight values of this hero
     * @return the fight values
     */
    public Vector<FightValue> getFightvalues();

    public Vector<Special> getSpecials();

    public int getCurrINI();

    public int getCurrLEP();

    public int getCurrAUP();

    public int getCurrASP();

    public int getCurrKAP();

    public Weapon getSelectedWeapon();

    public void setSelectedWeapon(Weapon selectedWeapon);

    public void setCurrINI(int currINI);

    public boolean isPriest();

    public boolean isMagican();
}
","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {

        private final HeroTestClass fTest;

        public HeroTest(HeroTestClass test) {
            fTest = test;
        }

		/**
		 * test {@link Hero#getAttrValue(String)}.
		 * @see {@link #test}
		 */
		@Test
		public void testAttrValue() {
			
			for(int i=50; i<=100; ++i) {
				fTest.testAttrValue(i);
			}
				
			//assertEquals(""Attr value of the class is expected to be equal to 'value'"",
			//fTest.fTest.getAttrValue(""value""), fTest.fTest.getAttrValue(""value""));
		}
		
	     /**
		 * test if the values are expected, from the list of attributes.
		 */
		public void testValues() {
			
			fTest.fTest.setAttribute(HERO_INI, ""1000"");
			fTest.fTest.setAttribute(HERO_LEP, ""100"");
			fTest.fTest.setAttribute(HERO_AUP, ""200"");
			fTest.fTest.setAttribute(HERO_ASP, ""300"");
			fTest.fTest.setAttribute(HERO_KAP, ""400"");
			fTest.fTest.setAttribute(HERO_MESSAGE, ""test text"");
			fTest.fTest.setAttribute(HERO_SPECIAL, ""+"");
			fTest.fTest.setAttribute(HERO_SPELL, ""Spell"");
			
			fTest.fTest.setAttribute(HERO_COUNT, ""2"");
			
			fTest.fTest.setAttribute(HERO_WEAR, ""a"");
			
			fTest.fTest.setAttribute(HERO_MAIN, ""main"");
			
			Document doc = fTest.fTest.saveToDom(false);
			Element rootElement = doc.getRootElement();
			
			Vector<Element> els = rootElement.elementIterator(""attributes"");
			for(Iterator iterator = els.iterator(); iterator.hasNext(); ) {
			   Element e = (Element)iterator.next();
			   
			   String attrName = e.attributeValue(""name"");
			   if(attrName == null) {
					break;
			   }
				
				Vector<String> values = fTest.fTest.getAttrValues(attrName);
				if(values!= null) {
				    String msg = ""Attemtps: "";
					for (int i=0; i<values.size(); i++) {
						msg = msg + values.get(i);
					}
					
					assertTrue(""""+msg, values.size() >= 1);  // 2 values or 1!
					
//					fTest.fTest.fTest.setAttrValues(attrs.get(0), values);	   // TODO: fix this hack
//					fTest.fTest.loadDoc(fTest.fDoc);
//					
//					//System.out.println(""Attr Name: "" + attrName + "" Attr Vector "" + values);
//					
				}
			} 
			
			Iterator<Element> iter = rootElement.elementIterator(""attack"");
			while (iter.hasNext()) {
				Element e = iter.next();
				
				assertEquals(""""+e.attributeValue(""name""), ""tactic"");
			}
			iter = rootElement.elementIterator(""defense"");
			while (iter.hasNext()) {

				Element e = iter.next();
				
				String attrValue = fTest.fTest.getAttrValue(e.attributeValue(""attrs""));
				assertEquals(""""+attrValue, ""value"");
				
			}
			
			assertNotNull(""Attrs getValues are empty"", fTest.fTest.getAttrValues(HERO_DEST_WEAR));

		}
	
		/**
		 * test if the values are expected.
		 * @param test case of the test
		 */
		private void testValues(HeroTestClass test) {

			Iterator<Element> iter = test.fDoc.elementIterator(""attack"");
			
			while( iter.hasNext() ) {
				Element e = iter.next();
				String attrName = e.attributeValue(""name"");
				assertEquals(attrName,""attack"");
				
				Vector<String> values = fTest.fTest.getAttrValues(attrName);
				String msg = """";
				for(int i=0; i<values.size(); i++) {
					msg += values.get(i)"
