ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
859bb259-2af6-4c40-a427-f0048030c281,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_0Test.java,36.31803750991821,stop,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    public static XPathReader createReader() throws SAXPathException {
        String className = null;
        boolean securityException = false;
        try {
            className = System.getProperty(DRIVER_PROPERTY);
        } catch (SecurityException e) {
            securityException = true;
        }
        if (className == null || """".equals(className)) {
            if (USE_DEFAULT) {
                className = DEFAULT_DRIVER;
            } else {
                if (securityException) {
                    throw new SAXPathException(""Reading of property "" + DRIVER_PROPERTY + "" disallowed."");
                } else {
                    throw new SAXPathException(""Property "" + DRIVER_PROPERTY + "" not set"");
                }
            }
        }
        return createReader(className);
    }
}
","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {
public XPathReaderFactory_0Test(){}

		@Test
		void testCreateReader(){
			//test case 2:
			try {
			XPathReaderFactory testDriver = new XPathReaderFactory();
			XPathReader testReader = testDriver.createReader();
			//System.out.println(""test"");
			assertNotNull(testReader);
			assertTrue(!testReader.getClass().isAnonymous());
			assertEquals(testDriver,testReader.getClass());
			} catch(SAXPathException e) {
				fail();
			}
			}
		@Test
		void testCreateDefaultDriver() {
			try {
			new XPathReaderFactory().createReader();
			fail();
			} catch(SAXPathException e) {
				assertTrue(e.getMessage(), 
						e.getMessage().contains(""Property org.saxpath.driver can not be specified without a system property""));
			}
		}
	}


// Test.java
"
b71c641b-6462-4e3c-8af9-2587446b3d2f,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_1Test.java,16.99405336380005,stop,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    public static XPathReader createReader(String className) throws SAXPathException {
        Class readerClass = null;
        XPathReader reader = null;
        try {
            // Use the full version of Class.forName(), so as to
            // work better in sandboxed environments, such as
            // Servlet contains, and Applets.
            readerClass = Class.forName(className, true, XPathReaderFactory.class.getClassLoader());
            // Double-check that it's actually the right kind of class
            // before attempting instantiation.
            if (!XPathReader.class.isAssignableFrom(readerClass)) {
                throw new SAXPathException(""Class ["" + className + ""] does not implement the org.saxpath.XPathReader interface."");
            }
        } catch (ClassNotFoundException e) {
            throw new SAXPathException(e.getMessage());
        }
        try {
            reader = (XPathReader) readerClass.newInstance();
        } catch (IllegalAccessException e) {
            throw new SAXPathException(e.getMessage());
        } catch (InstantiationException e) {
            throw new SAXPathException(e.getMessage());
        }
        if (reader == null) {
            throw new SAXPathException(""Unable to create XPathReader"");
        }
        return reader;
    }
}
","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains one unit test case for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {
@Test @SuppressWarnings(""javadoc"") @Issue(""xpath-read"")
		public void newReadMethodReturn_ShouldCreateNewReader() {
			XPathReader newReader = XPathReaderFactory.createReader(""xpathReaderClass.newReadMethodReturn"");
			assertNotNull(newReader);
			assertNotNull(newReader.getClass().newInstance());
			assertEquals(newReader.getClass(), XPathReader.class);
			assertSame(newReader, newReader.newReadMethod());
		}
	}
"
