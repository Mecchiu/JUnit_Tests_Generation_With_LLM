ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cf86d1ec-b0b5-42ab-a86b-d862a3c41072,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpPreference.java,60.780661821365356,stop,"// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}
","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains one unit test case for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains one unit test case for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {

    /**
     * Test method {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)}.
     */
    @Test
    void testLoadPreference() {
        HttpAnalyzerServiceFactory.setConfigurationFilePath(""/etc/HttpPreference.properties"");
        HttpAnalyzerServiceFactory.setContextualUserId(123L);
        HttpAnalyzerServiceFactory.registerInstance(HttpAnalyzerServiceFactory.STANDARD_USER_ID, HttpAnalyzerServiceFactory.STANDARD_USER_USERNAME, HttpAnalyzerServiceFactory.STANDARD_USER_PASSWORD, """", """", """");

        //Get values from work form and set properties
        HttpStatView analyseView = MainViewTest.createAnalyseView();
        String notes = MainViewTest.readAnalysedFile();
        
        //Get values from work form and set properties
        Properties props = new Properties();
        System.setProperty(""http.user"", ""userID"");
        System.setProperty(""http.username"", ""username"");
        System.setProperty(""http.password"", ""password"");
        props.setProperty(""http.context.user.id"", HttpAnalyzerServiceFactory.STANDARD_USER_ID.toString());
        props.setProperty(""http.context.user.username"", HttpAnalyzerServiceFactory.STANDARD_USER_USERNAME.toString());
        props.setProperty(""http.context.user.password"", HttpAnalyzerServiceFactory.STANDARD_USER_PASSWORD.toString());

        //Get values from work form and set properties

        //Get values from work form and set properties
        props.setProperty(""http.host"", ""http://localhost:7010"");
        props.setProperty(""http.port"", ""7010"");
        props.setProperty(""http.debug"", ""false"");
        props.setProperty(""http.context.logging"", JFrame.class.getName());
        props.setProperty(""http.context.logging.name"", ""http"");

        //Get values from work form and set properties
        props.setProperty(""http.timeout"", ""1000"");
        props.setProperty(""http.transport.timeout"", ""60000"");    //10 mins (s)
        props.setProperty(""http.transport.cache.timeout"", ""0"");      //10 mins (s)
        props.setProperty(""http.retry.max"", ""3"");       //3 retries
        props.setProperty(""http.retry.delay"", ""300"");    //10 seconds
        props.setProperty(""http.retry.delay.global"", ""3000"");  //30 seconds

        //Get values from work form and set properties
        props.setProperty(""http.keepAlive"", ""true"");
        props.setProperty(""http.protocol.keepAlive"", ""true"");
        props.setProperty(""http.maxConnection.retryCount"", ""3"");
        props.setProperty(""http.connection.timeout"", ""900"");
        props.setProperty(""http.connection.keepAlive"", ""true"");
        props.setProperty(""http.connection.keepAlive.period"", ""1200000"");
        props.setProperty(""http.connection.timeouts"", ""2000"");

        
        //Test values read with properties
        assertEquals(MainViewTest.readAnalysedFile(""/etc/HttpPreference.properties""), notes);

        //Test values read from a file
        //loadFile will call loadValues and replace all property values with the values of the preferences
        String testFile = ""/etc/HttpPreference.properties"";
        loadFile(testFile, note, analyseView, props, mainView);
        assertEquals(MainViewTest.readAnalysedFile(""/etc/HttpPreference.properties""), notes);        
    }
}
"
032653bb-d70b-4962-9548-dd9b3fa2b189,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools.java,59.63873839378357,stop,"// ParamsUrlTools.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 * @author vlad
 */
public class ParamsUrlTools {

    /**
     * Transform long String line with parameters
     * to List (key, value)
     * @param params String
     * @return List<NameValuePair>
     */
    public List<NameValuePair> getPairParams(String params);

    /**
     * Get URL and check it. Apply HTTP scheme only.
     * Cut URL on some parts and send them.
     * Return String array = {host, port, path, checkedUrl}
     * @return String[]
     */
    public String[] splitUrl(String startUrl, JFrame parentFrame);
}
","// ParamsUrlToolsTest.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains one unit test case for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlToolsTest {","// ParamsUrlToolsTest.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains one unit test case for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlToolsTest {
ParamsUrlToolsTest() {
		}

	/**
	 * Test {@link ParamsUrlTools#getPairParams(String)}.
	 * Create the test URL {@code example} and
	 * put the {@code url} on the end of the test URL.
	 */
	@Test
	public void testParamsUrlTools() {
		try {
			List<NameValuePair> paramsList = new ArrayList<>(2);
			paramsList.add(new BasicNameValuePair(""example"", ""localhost""));
			paramsList.add(new BasicNameValuePair(""scheme"", ""http""));
			paramsList.add(new BasicNameValuePair(""url"", ""example""));
			uri = new URI(String.valueOf(UrlToolsTools.createDefaultRequestURL(UrlToolsTools.getFullParamUrl(paramsList))));
			// create parameter list for test
			List<NameValuePair> params = getPairParams(UrlTools.getFullParamUrl(paramsList));
		    assertTrue(params.size() == 4);
		    List<String> expected = new ArrayList<>(4); // ""host"", ""scheme"", ""url"", ""checkedUrl""
			expected.add(uri.getHost()+"":""+uri.getHostPort()+""?scheme=""+uri.getScheme()+""&url=""+uri.getEscapedQueryParam(UrlTools.URL_PATH_PARAM_KEY)+""&checkedUrl=""+uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY));
			expected.add(String.valueOf(uri) + ""?"" + UrlTools.PARAM_URL_PARAM_KEY + ""="" + UrlTools.parseUrl(uri.getEscapedQueryParam(UrlTools.URL_PATH_PARAM_KEY)));
			expected.add(String.valueOf(uri) + ""?"" + UrlTools.PARAM_URL_CHECKED_PARAM_KEY + ""="" + UrlTools.parseUrl(uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY)));
			// check parameter list
			assertTrue(expected.equals(params.get(0).getValues()));
			assertTrue(expected.equals(params.get(1).getValues()));
		    assertEquals(""url=""+uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY) + ""&&checkedUrl=""+uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY),
		    	params.get(2).getValues());
			assertEquals(""url=""+uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY) + ""&&checkedUrl=""+uri.getEscapedQueryParam(UrlTools.URL_CHECKED_PARAM_KEY),
				params.get(3).getValues());
		} catch(URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			fail(""Cannot parse test URL"");
		} catch(NullPointerException npe) {
			// TODO Auto-generated catch block
			npe.printStackTrace();
			fail(""Cannot parse test URL"");
		}
	}
}
"
0b2124fc-d0d3-48f1-9306-d333ce9051d7,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpAnalyzerApp.java,18.30557155609131,stop,"// HttpAnalyzerApp.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;

/**
 * The main class of the application.
 */
public class HttpAnalyzerApp extends SingleFrameApplication {

    /**
     * At startup create and show the main frame of the application.
     */
    @Override
    protected void startup();

    /**
     * This method is to initialize the specified window by injecting resources.
     * Windows shown in our application come fully initialized from the GUI
     * builder, so this additional configuration is not needed.
     */
    @Override
    protected void configureWindow(java.awt.Window root);

    /**
     * A convenient static getter for the application instance.
     * @return the instance of HttpAnalyzerApp
     */
    public static HttpAnalyzerApp getApplication();

    /**
     * Main method launching the application.
     */
    public static void main(String[] args);
}
","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains one unit test case for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains one unit test case for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {
 {
			new HttpAnalyzerApp();
			assertNull(getApplication());
	
		 }
}

// HttpAnalyzerAppSingleton.java
"
d0781c6b-2194-42c5-a7c7-ff7c3374bfd8,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HeaderSettings.java,48.4231436252594,length,"// HeaderSettings.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;

/**
 * @author vlad
 */
public class HeaderSettings {

    public static String[] userAgents = { ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"", ""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"", ""Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"", ""msnbot/1.1 (+http://search.msn.com/msnbot.htm)"", ""Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"", ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16"" };

    public static final int FIREFOX = 0;

    public static final int IE6 = 1;

    public static final int IE7 = 2;

    public static final int IE8 = 3;

    public static final int GOOGLEBOT = 4;

    public static final int MSNBOT = 5;

    public static final int YAHOOBOT = 6;

    public static final int IPHONE = 7;

    public static final int CUSTOM = 255;

    final String contentCharset = ""utf-8"";

    String setUserAgent;

    private static String presetCookie;

    private static Header[] headersSet;

    /**
     * Get User-Agent&Referer and set
     * internal headers
     */
    public static void initHeaders(int idAgent, String referer);

    /**
     * Get all headers from user from
     * and set internal headers
     */
    public static void initHeaders(String myHeaders);

    /**
     * Send all internal headers
     */
    public static Header[] setHeaders();

    /**
     * Set internal header Cookie:
     */
    public static void setCookie(String cookie);

    /**
     * Disable headers Cookie
     */
    public static void clearCookie();

    public static String getHeaders();

    public static String showHeaders(HttpRequestBase baseRequest);

    public static String showHeaders(Header[] headers);
}
","// HeaderSettingsTest.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains one unit test case for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettingsTest {","// HeaderSettingsTest.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains one unit test case for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettingsTest {
// HeaderSettings.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;

/**
 * @author vlad
 */
public class HeaderSettings {

    public static String[] userAgents = { ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.1.4322;.NET CLR 2.0.50727)"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"", ""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"", ""Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"", ""msnbot/1.1 (+http://search.msn.com/msnbot.htm)"", ""Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"", ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16"" };

    public static final int FIREFOX = 0;

    public static final int IE6 = 1;

    public static final int IE7 = 2;

    public static final int IE8 = 3;

    public static final int GOOGLEBOT = 4;

    public static final int MSNBOT = 5;

    public static final int YAHOOBOT = 6;

    public static final int IPHONE = 7;

    public static final int CUSTOM = 255;

    final String contentCharset = ""utf-8"";

    String setUserAgent;

    private static String presetCookie;

    private static Header[] headersSet;

    /**
     * Get User-Agent&Referer and set
     * internal headers
     */
    public static void initHeaders(int idAgent, String referer);

    /**
     * Get all headers from user from
     * and set internal headers
     */
    public static void initHeaders(String myHeaders);

    /**
     * Send all internal headers
     */
    public static Header[] setHeaders();

    /**
     * Set internal header Cookie:
     */
    public static void setCookie(String cookie);

    /**
     * Disable headers Cookie
     */
    public static void clearCookie();

    public static String getHeaders();

    public static String showHeaders(HttpRequestBase baseRequest);

    public static String showHeaders(Header[] headers);
}

// HeaderSettingsTest.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains one unit test case for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettingsTest {
		
	private static final String myHeaders =
        ""Content-Type: text/html\n"" + 
        ""\n"" +
        ""<div>\n"" + 
        ""\t<ol>\n"" + 
        ""\t\t<li>test</li>\n"" + 
        ""\n"" + 
        ""  </ol>\n"" + 
        ""</div>\n"";

			
    @Test
    public void setsNoCookies(){
        HeaderSettings headers = new HeaderSettings();
        String contentCharset = ""UTF-8"";
        assertNotNull(headers.getCookie(), ""No Cookie should be set"");
    }

    @Test
    //If userAgent is MSN(ie7), it should be set by default
    public void setsCustomHeadersNoSites(){
        HeaderSettings headers = new HeaderSettings();
        headers.setUserAgent(""Custom-Test-User-Agent"");
        String contentCharset = ""UTF-8"";
        assertNull(headers.getCookie(), ""No cookie should be set"");
        assertNotNull(headers.getHeaders(), ""Should set global headers."");
        assertSame(headers.getHeaders().get(0).getName(), new String[] { ""User-Agent"", ""X-Custom-Test-User-Agent"", ""Accept"", ""text/html; charset="" }, new String[] { ""Content-Type"", ""text/html"", ""Accept"", contentCharset }, headers.getHeaders().get(0));
    }

    @Test
    public void setsSitesAndCookies(){
        HeaderSettings headers = new HeaderSettings();
        headers.setUserAgent(""myAgent"");
        headers.clearCookie();
        headers.setSites([""http://www.google.com""]);
        String contentCharset = ""UTF-8"";
        assertNull(headers.getCookie(), ""No cookie should be set"");
        assertNotNull(headers.getHeaders(), ""Should set global headers."");
        assertSame(headers.getHeaders().get(0).getName(), new String[] { ""User-Agent"", ""myAgent"", ""Accept"", ""text/html; charset="" }, new String[] { ""Content-Type"", ""text/html"", ""Accept"", contentCharset }, headers.getHeaders().get(0));
    }

    @Test
    public void setSitesDefaultHeaders(){
        HeaderSettings headers = new HeaderSettings();
        headers.setSites([]);
        headers.getSites()[1] = ""https://google.com"";
        String contentCharset = ""UTF-8"";
        assertNotNull(headers.getCookie(), ""No cookie should be set"");
        assertNotNull(headers.getCookie(), ""No Cookie Cookie should be created"");
        assertNull(headers.getHeaders(), ""Should set global headers"");
    }

    @Test
    public void setCookies(){
        HeaderSettings cookies = new HeaderSettings();
        headersSet = new Header[2];
        headersSet[0] = new Header(""Set-cookie"", ""custom-agent="" + System.currentTimeMillis() + ""; path=/"");
        headersSet[1] = new Header(""set-cookie"", ""Set-cookie: custom-agent="" + System.currentTimeMillis() + ""; path=/"");
        assertNotNull(headersSet);
        cookies.setCookie(headersSet);
        assertEquals(headersSet[0], new Header(""Set-cookie"", ""custom-agent="" + System.currentTimeMillis() + ""; path=/""));
        assertEquals(headersSet[1], new Header(""set-cookie"", ""set-cookie: custom-agent="" + System.currentTimeMillis() + ""; path=/""));
        assertNull(headersSet[0]);
        assertNotNull(headersSet[1]);
    }

    @Test
    public void setUserAgent(){
        HeaderSettings cookies = new HeaderSettings();
        headersSet = new Header[2];
        headersSet[0] = new Header(""Set-cookie"", ""custom-agent="" + System.currentTimeMillis() + ""; path=/"");
        headersSet[1] = new Header(""set-cookie"", ""Custom-Test-User-Agent; path=/"");
        assertNull(headersSet);
        headersSet = new Header[2];
        headersSet[0] = new Header(""Set-cookie"", ""custom-agent="" + System.currentTimeMillis() + ""; path=/"");
        headersSet[1] = new Header(""set-cookie"", ""Custom-Test-User-Agent="" + System.currentTimeMillis() + ""; path=/"");
        assertSame(headersSet[0], new Header(""Set-cookie"", ""custom-agent="" + System.currentTimeMillis() + ""; path=/""));
        assertSame(headersSet[1], new Header(""set-cookie"", ""Custom-Test-User-Agent="" + System.currentTimeMillis() + ""; path=/""));
    }

    @Test
    public void resetCookies(){
        HeaderSettings cookies = new HeaderSettings();
        long time = System.currentTimeMillis();
        cookies.setCookie(headersSet);
        headersSet = new Header[2];
        assert"
a0754359-286a-4a3e-8242-96bffee33c53,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils.java,42.82983922958374,length,"// HttpFileUtils.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;

/**
 * @author vlad
 */
public class HttpFileUtils {

    static final int MAX_BUFFER_SIZE = 8192;

    /**
     * Save Http entity to file
     * @param entity HttpEntity
     * @param fileName String
     */
    public long saveEntity(HttpEntity entity, String fileName);

    /**
     * Filter for FileChooser *.XML
     */
    private class MyXmlFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".xml"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""XML files (*.xml)"";
        }
    }

    /**
     * Filter for FileChooser *.TXT
     */
    private class MyTxtFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".txt"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""Text documents (*.txt)"";
        }
    }

    /**
     * Method saves your template to file
     * Creates JFileChooser and save into XML file
     * @param properties
     * @param parentFrame
     */
    public void savePreferenceToFile(Properties properties, JFrame parentFrame);

    /**
     * Method load your template from file
     * Creates JFileChooser and  load from XML file
     * @param parentFrame
     */
    public Properties loadPreferenceFromFile(JFrame parentFrame);

    /**
     * Save information from ReplayTab in file
     * @param mainView
     * @param parentFrame
     */
    public void saveSessionInfo(HttpAnalyzerView mainView, JFrame parentFrame);

    /**
     * Show JChooseFile dialog and
     * put your choice in toFileTextField
     * @param mainView
     * @param parentFrame
     */
    public void fillToFileField(HttpAnalyzerView mainView, JFrame parentFrame);
}
","// HttpFileUtilsTest.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains one unit test case for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtilsTest {","// HttpFileUtilsTest.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains one unit test case for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtilsTest {
// HttpFileUtilsTest.java
		// [mainView] Http analyzer
		// [mainView] Http analyzer
		// [view] Http analyzer
		/**
		* <pre>
		* HttpFileUtilsTest.java
		* </pre>
		*/
        @Test
                @Category(org.junit.jupiter.api.Test.Classes.Integration.class)
        public void testCases(){
		        HttpFileUtils f1 = new HttpFileUtils();
                    assertNotNull(f1.getAnalyzer());
                    assertNotNull(f1.getLogger());
                        assertNotNull(f1.getProperties());
		        HttpFileUtils f2 = new HttpFileUtils();
                    assertNull(f2.getAnalyzer());
                    assertNull(f2.getLogger());
                        assertNotNull(f2.getProperties());

			final JFrame mainFrame = new JFrame();
			final JFrame view = new JFrame();

            assertNull(mainFrame);
			assertEquals(""httpanalyzerview"", mainFrame.getTitle());
            assertEquals(""httpanalyzerview"", view.getTitle());

            mainFrame.add(new JLabel(""Hello""));

            //
                // getHttpAnalyzer()
                //
			HttpAnalyzerView a1 = f1.getHttpAnalyzer();

			// this is a test for the createAnalyzer method
			// and the setProperties (setUp() methods), to make sure nothing breaks
			assertNotNull(a1);
			assertNotNull(a1.getName());

			//
            // getLogger()
            //
			Logger logger = f1.getLogger();
			assertNotNull(logger);
			assertNotNull(logger.getHandlers()[0]);

			//
                // getAnalyzer()
                //
			HttpAnalyzerView a2 = f2.getAnalyzer();
			assertNotNull(a1);

			// now we can call the getProperty() method because it takes into account
			// system properties.
			assertNotNull(a2.getProperty(""TEST"", System.getProperty(""property"", """")));
			assertNotNull(a2.getProperty(""TEST"", null));
			assertEquals(""value"", a2.getProperty(""TEST"", """"));
			assertEquals(""value1"", a2.getProperty(""TEST"", """"));

			//
        // test addFile()
        //
             JFileChooser jfc = new JFileChooser();
             File testTemplate = new File(""template"");     
             File testDir = new File(""/Users/vlad"");
             File testDirSrc = new File(""/Users/vlad/src"");
             File testDirArch = new File(""/Users/vlad/Arch"");
             File testFile = new File(""/Users/vlad/D1/src/template/my_template.xsl"");

             File[] fileList = new File[1];

             jfc.showSaveDialog(view);
             jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
             fileList[0]= jfc.getSelectedFile();

             fileList = jfc.getSelectedFiles();

             if (fileList == null) {
                 System.err.println(""JFileChooser.setSelectedFiles returned null!"");
             }
                 fileList[0] = testTemplate;
                 jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                 fileList = jfc.getSelectedFiles();

             assertNotNull(fileList);
             assertArrayEquals(""template"", new String[] {""template""}, fileList);

             f2.addFileToDirectory(testDir, testFile, fileList);
             f2.addFileToDirectory(testDirSrc, testDirArch, fileList);
             f2.addFileToDirectory(testFile, testTemplate, fileList);

             // Now, we can get the analyizer for this directory!
             HttpAnalyzerView a3 = f2.getAnalyzer();
             assertNotNull(a3);

             // now we can call the getProperty() method because it takes into account
             // system properties.
             assertNotNull(a3.getProperty(""TEST"", System.getProperty(""property"", """")));
             assertEquals(""TEST_FILE"
25adbcf8-23cc-4c31-8c2b-64415fdc717f,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/Password.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// Password.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author David Scott
 */
public class Password {

    /**
     * 	Password is a class to implement password encryption as used
     * 	on Unix systems. It is compatible with the crypt(3c) system function.
     * 	This version is a based on the DES encryption algorithm in
     * 	Andrew Tanenbaum's book ""Computer Networks"". It was rewritten
     * 	in C and used in Perl release 4.035. This version was rewritten
     * 	in Java by David Scott, Siemens Ltd., Australia.
     *
     * 	For further details on the methods in this class, refer to the
     * 	Unix man pages for crypt(3c).
     */
    private static byte[] InitialTr = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };

    private static byte[] FinalTr = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };

    private static byte[] swap = { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };

    private static byte[] KeyTr1 = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

    private static byte[] KeyTr2 = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

    private static byte[] etr = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };

    private static byte[] ptr = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };

    private static byte[][] s_boxes = { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }, { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }, { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }, { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }, { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }, { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }, { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }, { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };

    private static int[] rots = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

    private static byte[] key = new byte[64];

    private static byte[] EP = etr;

    /* *** Methods start here *** */
    private static void transpose(byte[] data, byte[] t, int n);

    private static void rotate(byte[] key);

    private static void f(int i, byte[] key, byte[] a, byte[] x);

    private static void definekey(byte[] k);

    private static void encrypt(byte[] blck, int edflag);

    /**
     * 	Returns a String containing the encrypted passwd
     *
     * 	@param	strpw	A String containing the un-encrypted password
     * 	@param	strsalt	A 2 character String, containing the salt to
     * 					encrypt the password with.
     * 	@returns		String containing encrypted password.
     */
    public static String crypt(String strpw, String strsalt);

    public static String hashMD5(String baseString);
}
","// PasswordTest.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains one unit test case for the {@link Password#crypt(String, String)} method.
*/
class PasswordTest {","// PasswordTest.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains one unit test case for the {@link Password#crypt(String, String)} method.
*/
class PasswordTest {
"
