ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
be863aa6-3d1b-41f7-ad67-591507d27580,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_0Test.java,32.39483690261841,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default lower bounds for
     *  this axis scale.  Returns -1.0.
     */
    public double lowerBounds();
}
","// LinearAxisScale_0Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScale_0Test {","// LinearAxisScale_0Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScale_0Test {
/**
		 * Test the {@link LinearAxisScale#lowerBounds()} method.
		 *
		 */
    @Test
    public void testLowerBounds() {
        final LinearAxisScale testObject = new LinearAxisScale(0);
        assertEquals(-2,testObject.lowerBounds(),0);
    }

    /**
     *  Test to find the smallest x coordinate.
     */
    @Test
    public void testFindNearestX() {
        final LinearAxisScale testObject = new LinearAxisScale(0);
        final Integer nearestValue = testObject.findNearestValue(-1);
        assertEquals( Integer.valueOf(0),nearestValue );
    }

    /**
     *  Test to find the greatest x coordinate.
     */
    @Test
    public void testFindNearestX2() {
        final LinearAxisScale testObject = new LinearAxisScale();
        assertEquals( Integer.valueOf(100),testObject.findNearestValue(-1) );
    }

   /**
    *  Test to find the least x coordinate.
    */
    @Test
    public void testFindNearestY() {
        final LinearAxisScale testObject = new LinearAxisScale();
        final Integer nearestValue = testObject.findNearestValue(Integer.valueOf(100));
        assertEquals( Integer.valueOf(0),nearestValue );
    }

    /**
     * Test to find the smallest y coordinate.
     */
    @Test
    public void testFindNearestY() {
        final LinearAxisScale testObject = new LinearAxisScale();
        assertEquals( Integer.valueOf(0),testObject.findNearestValue(Integer.valueOf(100)));
    }
}

// LinearAxisScale_1Test.java
"
149ea501-2144-4496-8266-38a5255c9ac6,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_1Test.java,6.404818296432495,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default upper bounds for
     *  this axis scale.  Returns 1.0.
     */
    public double upperBounds();
}
","// LinearAxisScale_1Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScale_1Test {","// LinearAxisScale_1Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScale_1Test {

    @Test
    public void test() {
        assertEquals(1.0, LinearAxisScale.upperBounds(), 1.0);
    }

}"
0d49f6b0-23f1-409b-9c5e-421b41399647,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_2Test.java,41.80345845222473,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns an AxisLimitData object that contains
     *  the preferred axis limits and tick mark spacing for the
     *  specified range of data values for this linear axis scale.
     *
     * @param aLB The lower bounds of the data plotted on this axis.
     * @param aUB The upper bounds of the data plotted on this axis.
     */
    public AxisLimitData findGoodLimits(double aLB, double aUB);
}
","// LinearAxisScale_2Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScale_2Test {","// LinearAxisScale_2Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScale_2Test {

     /**
     * Sets the width of the axis that can be drawn vertically on the plot.
     * @param width The width value of this axis. It should be a legal
	 *         value for the {@link javax.swing.JSlider} object's default value
	 */
    private void setWidth(double width) {
		getPlot().setVisible(true);
		getSlider().setPainted(true);
		getSlider().setWidth(width);
    }
    
	
    @Test
	public void testFindGoodLimits_default() {
		setWidth(50);
		
		final AxisLimitData data = LinearAxisScale.findGoodLimits(10, 50);

		assertEquals(50d, data.getMinVal());
		assertEquals(50d, data.getMaxVal());
	}
    
	
    @Test
	public void testFindGoodLimits_range() {
		
		getPlot().getViewport().setRangeMaxY(10);
		setWidth(50);
		
		final AxisLimitData data = LinearAxisScale.findGoodLimits(10, 50);

		assertEquals(10d, data.getMinVal());
		assertEquals(50d, data.getMaxVal());
	}
    
    @Test
	public void testFindGoodLimits_range_x() {
		
		getPlot().getViewport().setRangeY(2);

		final AxisLimitData data = LinearAxisScale.findGoodLimits(10, 50);

		assertEquals(10d, data.getMinVal());
		assertEquals(2, data.getMaxVal());
	}
    
	
    private Slider getSlider() {
		return getPlot().getSlider();
    }
}


"
3ec518bd-f7e6-4275-9186-53d637c1c6fe,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_3Test.java,27.55014133453369,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Find the position and size (in screen coordinates) of tick
     *  marks for a given axis scale.
     *
     * @param quantum Tick mark step size for the axis using this scale.
     * @param aLB Lower bounds of axis using this scale.
     * @param aUB Upper bounds of axis using this scale.
     * @param xA Scaling coefficient for this axis.
     * @param xB Scaling coefficient for this axis.
     * @return An TickMarkData object containing the tick mark positions, lengths,
     *          and data values at each tick mark.
     */
    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB);
}
","// LinearAxisScale_3Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScale_3Test {","// LinearAxisScale_3Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScale_3Test {
private final LinearAxisScale theAxis1 = new LinearAxisScale(""Axis1"", 100,.7, 10.6, 30., 0., 0.);
		private final LinearAxisScale theAxis2 = new LinearAxisScale(""Axis2"", 100,.7, 10.6, 30., 0., 0.);
		private final LinearAxisScale theAxis3 = new LinearAxisScale(""Axis3"", 100,.7, 10.6, 30., 0., 0.);

		/**
		 *  Tests the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method with no parameters. 
		 */
		@Test
                public void testCalcTickMarks() {
                        theAxis1.calcTickMarks(25, 0, 0, 0, 0.);
                }

		/**
		 *  Tests the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method with unit quantum for the axis with size {@literal 2}.
		 *
		 * <p>Note that since the unit is square, the exact results of this unit test are irrelevant
		 * for this implementation.  See <i>Rendering of an American Chart</i> <em>by Bob Hutchy</em> for more information.</p>
		 */
		@Test
		public void testCalcTickMarks_2() {
                        theAxis2.calcTickMarks(25, 0, 0, 0, 0.);
                }

		/**
		 *  Tests the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method with unit quintum for the axis with size {@literal 3}.
		 *
		 * <p>Note that the unit is diagonal, so the exact results of this unit test are irrelevant
		 * for this implementation.  See <i>Rendering of an American Chart</i> <em>by Bob Hutchy</em> for more information.</p>
		 */
		@Test
		public void testCalcTickMarks_3() {
                        theAxis3.calcTickMarks(25, 0, 0, 0, 0.);
                }
}
"
9fc4fa9a-eedb-4d78-a48e-e303405fd24d,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_0Test.java,22.60788607597351,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotDatum objects in this run.
     *
     * @return The number of plot data objects in this run.
     */
    public int size();
}
","// PlotRun_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#size()} method.
*/
class PlotRun_0Test {","// PlotRun_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#size()} method.
*/
class PlotRun_0Test {
/**
		 *  Test of the size() method.
		 *  @exception  java.io.IOException  Caused by:  java.lang.ArrayIndexOutOfBoundsException.
		 */
		@Test
		@org.junit.jupiter.api.Disabled
		public void testSize() throws java.io.IOException {
                        new PlotRun();
                }
}
"
a0124ff1-fd04-4d08-9801-ae2e582ea0cd,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_1Test.java,61.74473810195923,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot data object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index);
}
","// PlotRun_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#get(int)} method.
*/
class PlotRun_1Test {","// PlotRun_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#get(int)} method.
*/
class PlotRun_1Test {

	/**
	 * Tests instantiation of {@link PlotRun} using empty data.
	 */
	@Test
	void instantiation_empty() {
		assertEquals(""empty PlotRun"", 0, new PlotRun(null, null).size());
	}
		
	/**
	 * Tests instantiation of {@link PlotRun} with zero data.
	 */
	@Test
	void instantiation_zero_data() {
		Collection c = new ArrayList();
		c.add(new PlotData(new Color(150, 50, 150)));
		c.add(new PlotData(new Color(150, 150, 150)));
		c.add(new PlotData(new Color(50, 150, 150)));
		
		assertEquals(""zero PlotRun"", 0, c.size());
		Collection c2 = c;
		c2.remove(new PlotData(new Color(150, 150, 150)));
		assertEquals(""non-empty PlotRun"", 1, c2.size());
	}

}

// PlotRun_2Test.java
// ----------------------------------------------------------------------------
"
dc6c28f2-8491-4854-825a-df593b8fc09c,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_2Test.java,60.12979245185852,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot data object at the specified position in
     *  this run.  Shifts any subsequent data elements
     *  to the left (subtracts one from their indices).  Returns the
     *  data element that was removed from this run.
     *
     * @param index The index of the plot data element to remove.
     * @return The PlotDatum object previously at the specified position.
     */
    public Object remove(int index);
}
","// PlotRun_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#remove(int)} method.
*/
class PlotRun_2Test {","// PlotRun_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#remove(int)} method.
*/
class PlotRun_2Test {
static final int RUN_LENGTH = 1000000;
		static final int NUM_RUNS = 10;

		public static void clear() {
			for (int i = 0; i < RUN_LENGTH; ++i) {
				clear(new HashSet());
			}
		}

		public static void clear(Set<PlotDatum> set) {
			ListIterator it = set.iterator();
			while (it.hasNext()) {
				PlotDatum v = (PlotDatum) it.next();
				v.clear();
			}
		}
		
		@Test
		void removesRows() {
			PlotRun run = new PlotRun(0, RUN_LENGTH);
			assertNull(run.remove(0));
			assertEquals(0, run.size());
			for (int j = 0; j < NUM_RUNS; ++j) {
				run = new PlotRun(0, RUN_LENGTH);
				run.add(new PlotDatum(new Object(), true, 200, 0, 20));
				assertEquals(j, run.remove(0));
			}
			assertEquals(RUN_LENGTH, run.size());
			assertTrue(run.contains(new PlotDatum(2147483647, false, 100, 1, 30)));
			assertTrue(run.contains(new PlotDatum(2147483648, false, 100, 1, 300)));
		}

		@Test
		void removesRowsToOne() {
			List<PlotDatum> old = new ArrayList(RUN_LENGTH);
			for (int i=0; i < RUN_LENGTH; ++i) {
				PlotDatum v = new PlotDatum(new Object(), false, i, 0, 20);
				long start = System.nanoTime();
				System.out.println(i);
				old.add(v);
				v.clear();
				long end = System.nanoTime();
				System.out.println("" time ""+Time.formatTime((end - start)/1e9)+
					"" us : ""+1000000/(end - start)+"" ns.\n"");
			}
			
			old.clear();
			PlotDatum v = new PlotDatum(2147483647, true, 0, 0, 0);
			PlotDatum result = run.remove(v.index());
			assertTrue(""Failed to remove Run."", result!= null);
			assertEquals(2147483647, result.getDatumIndex());
			assertEquals(v, result);
		}

		@Test
		void removes() {
			List<PlotDatum> old = new ArrayList(RUN_LENGTH);
			for (int i=0; i < RUN_LENGTH; ++i) {
				PlotDatum v = new PlotDatum(new Object(), false, i, 0, 20);
				PlotDatum result = run.remove(i);
				assertTrue(""Failed to remove Run."", result!= null);
				System.out.println("" ""+i+"" : ""+result);
				old.remove(result);
			}
			assertEquals(0, old.size());
		}

		@Test
		void add() {
			List<PlotDatum> list = new ArrayList<PlotDatum>(RUN_LENGTH);
			for (int j = 0; j < RUN_LENGTH; ++j) {
				PlotDatum v = new PlotDatum(new Object(), true, j, 0, 20);
				list.add(v);
			}
			for (int i = 0; i < RUN_LENGTH; ++i) {
				Object result = run.add(i, new PlotDatum(null, false, i, 1, 30));
				assertNotNull(result);
				assertTrue(""Failed to add Run."", result!= null);
				assertEquals(i, result);
			}
		}

		@Test
		void index() {
			List<PlotDatum> old = new ArrayList(RUN_LENGTH);
			for (int i=0; i < RUN_LENGTH; ++i) {
				PlotDatum v = new PlotDatum(new Object(), false, i, 0, 20);
				old.add(i+1, v);
			}
			
			Map<Object, Color> colorMap = PlotRun.map(old);
			
			for (int j = 0; j < RUN_LENGTH; ++j) {
				assertTrue(""Failed to add Run."", colorMap.containsKey(run.add(j, new PlotDatum(new Object(), false, j, 2, 30))));
			}
			assertEquals(RUN_LENGTH, colorMap.size());
		}
}

/**
 *  <p> This class represents an element of a runs list.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 29, 2000
 * @version December 27, 2000
 */
final class PlotDatum implements Comparable<PlotDatum> {

    /**
     *  <p> This method contains data that is required to be
     *  processed in this run.  This data is expected to
     *  be serialized using the method {@link #serialize()}
     *  or to be deserialized using the method {@link #deserialize()}.
     *  </p>
     */
    public Object data;
    
    /**
     *  <p> This method is used to store information about
     *  data in this plot run.  Its implementation is expected
     *  to use the {@link #serialize()} or {@link #deserialize()}
     *  method to deserialize the data or to store information
     *  about the data.
     */
    public void clear() {
        data = null;
        this.toString();
    }
    
    public PlotDatum(PlotDatum other) {
        data = other.data;
    }

    @Override
    public int compareTo(PlotDatum other) {
        return this.data.compareTo(other.data);
    }

    /**
     *  <p> This method is used to serialize the data
     *  associated with this run.  Its implementation
     *  is expected to use the {@link #serialize()} method.
     */
    public String serialize() {
        if (data == null) {
            return ""null"";
        }
        return data.toString();
    }

    /**
     *  <p> This method is used to deserialize the data
     *  associated with this run.  Its implementation
     *  is expected to use the {@link #serialize()} method.
     */
    public void deserialize() {
        data = null;
        clear();
    }

    /**
     *  <p> This method is used to perform comparison
     *  of individual datum elements.  This method takes
     *  the form"
5110eb19-f67f-4cd0-b89a-565a26e6cddc,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_3Test.java,61.55406904220581,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot data elements in
     *  this run.
     *
     * @return An interation of all the PlotDatum objects in this run.
     */
    public Iterator iterator();
}
","// PlotRun_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#iterator()} method.
*/
class PlotRun_3Test {","// PlotRun_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#iterator()} method.
*/
class PlotRun_3Test {

    /**
     *  Return an enumeration of all the series in this run.
     *
     * @return    An enumeration of all the PlotDatum objects in this run.
     * @see Graph_3Test
    */
    public Iterator iterator();
}


//  test class for PlotRun_3Test

class PlotRun_3Test1 extends AbstractList{

    /**
     *  @see PlotRun_3Test
     *  @deprecated
     */
    @Deprecated
    public Iterator iterator();
    
    /**  Return an enumeration of all the PlotDatum objects in this run.
    */
    public Iterator iterator();
}

//  test class for plotrun_3test1

class  test_3_Run1 extends AbstractList {
    
    /**
     *  @see test_3_Run1
     */
    public Iterator iterator();
    
}


/** Test class of {@link PlotRun}.  It contains both unit tests and test cases
 *  for all the subclasses and subclasses.
 */ 
public class PlotRunTest extends junit.framework.TestCase {

    /** */
    public PlotRunTest(String testName) {
        super(testName);
    }

    /** */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    /**
     *  @see test_3_Run1
     */
    @Test
    public void test_3_Run1() {
        PlotRun run1  =  new PlotRun_3_Run1();
        run1.run();
        run1.run();
    }
}



"
6535ad39-f6f5-468c-afe0-3c1cc46a53f6,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_0Test.java,61.23284602165222,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotRun objects in this run list.
     *
     * @return The number of plot run objects in this run list.
     */
    public int size();
}
","// PlotRunList_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#size()} method.
*/
class PlotRunList_0Test {","// PlotRunList_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#size()} method.
*/
class PlotRunList_0Test {

    /**
     *  Sets up the test.
     */
    @BeforeClass
    public static void setUpClass () {
    }
    
    // Tests
    @Test
    public void oneRun() {
        // Set up array of empty Run objects.
        Run[] arrayRuns = new Run[0];
        // Set up array of PlotDatum objects.
        Run[] arraySizes = new Run[0];
        // Set up array of PlotDimensions objects.
        PlotDimensions[] arrayDimensions = new PlotDimensions[0];
        // Set up array of PlotDatum objects.
        PlotDatum[] arrayMisc = new PlotDatum[0];
        // Set up array of PlotRun objects.
        Run[] arrayTests = new Run[0];

        // Set run size for array elements.
        arraySizes[0] = new Run_TEST();
        arraySizes[0].setSize(100);
        
        // Set run dimensions for array elements.
        arrayDimensions[0] = new PlotDimensions((float)(0.025*1000.0));
        arrayDimensions[0].setSize(100.0);
        
        // Set run metadata.
        arrayDimensions[0].setType(PlotDimensions.METADATA);
        arrayDimensions[0].setTickLabelFormat((String)null);
        arrayDimensions[0].setXTickLabelFormat((String)null);
        arrayDimensions[0].setYTickLabelFormat((String)null);
        arrayDimensions[0].setZTickLabelFormat((String)null);
        arrayDimensions[0].setXLabelFormat((String)null);
        arrayDimensions[0].setYLabelFormat((String)null);
        arrayDimensions[0].setZLabelFormat((String)null);
        
        // Set run size for array elements.
        arrayRuns[0] = new Run_TEST();
        arrayRuns[0].setSize(100);

        // Set runs for array elements.
        arrayTests[0] = new Run();
        arrayTests[0].setSize(100.0);

        // Set runs for array elements.
        arrayTests[0].setPlots(0,arrayRuns);
        arrayTest_1Case(arrayTests);

        // Set runs for array elements.
        arrayTests[0].setPlots(1,arraySizes);
        arrayTest_2Cases(arrayTests);

        // Set runs for array elements.
        arrayTests[0].setPlots(1,arrayDimensions);
        arrayTest_3Cases(arrayTests);
                
        // Set runs for array elements.
        arrayTest_4Cases(arrayTests);
    }

    private void arrayTest_1Case(
            Run[] runs) {
        // Set up array of array objects for Array.java
        Run[] array = new Array();
        // Set up array of run sizes for Array.java
        Run[] runSizes = new Run[0];
        
        // Set up array of array objects for Array.java
        array = new Array(runs);
        // Set up array of run sizes for Array.java
        runSizes = new Run[0];
        // Set up array of array objects for Array.java
        array = new Array(runs);
        // Set up run sizes for array objects for Array.java
        runSizes = new Run[0];
        
        // Set run sizes for array elements.
        runSizes[0] = new Run_TEST();
        runSizes[0].setSize(100);
        
        // Set array of run sizes for Array.java
        arraySizes = new Run[0];
        // Set array of runs for array elements.
        arraySizes[0] = new Run();
        arraySizes[0].setSize(100);
        
        // Set array of runs for array elements.
        arrayRuns = new Run[] {array[0],array[0],array[0],array[0]};
        // Set array of runs for array elements.
        arrayTests = new Run[] {array[2],array[1],array[0]};
        
        assertEquals(runs.length, arraySizes.length);
        for (int i = 0; i < runs.length; i++) {
            assertNotNull(arraySizes[i]);
            assertNotNull(arrayRuns[i]);
            // Set runs and array runs at same test case.
            runs[i].setSize(arraySizes[i].size());
            array[i].setSize(arraySizes[i].size());
            // Loop over array runs
            for (int j = 0; j < arrayRuns[i].size(); j++) {
                assertNotNull(arraySizes[i].get(j));
                assertNotNull(arrayRuns[i].get(j));
                // Set runs and runs at same test case.
                arrayRuns[i].get(j).setSize(arraySizes[i].get(j));
                array[i].get(j).setSize(arraySizes[i].get(j));
                // Test runs.
                runSizes[i].get(j).setSize(arraySizes[i].get(j));
                arraySizes[i].get(j).setSize(arraySizes[i].get(j));
            }
        }
    }

    /* ********* runSizes[i] is null && runs[i] is defined ********* */
    private void arrayTest_2Cases(
            Run[] runs) {    
        // Set up array of array objects for Array.java
        Run[] array = new Array();
        // Set up array of run sizes for Array.java
        Run[] runSizes = new Run[0];
        
        // Set up array of array objects for Array.java
        array = new Array(runs);
        // Set up array of run sizes for Array.java
        runSizes = new Run[0];
        // Set up array of array objects for Array.java
        array = new Array(runs);
        // Set up run sizes for array objects for Array.java
        runSizes = new Run[0];
        
        // Set runs for array elements.
        runSizes[0] = new Run_TEST();
        runSizes[0].setSize(100);
        
        // Set array runs in runs.
        array[0].setRuns(runs);
//        assertEquals(arrayRuns[0].size(),runSizes.length);
        
        // Set array runs in runs.
        array[1].setRuns(array[2]);
       

    }
    
    /* Set up an array of array objects for Array.java. */
    private static class Array implements Cloneable {
        
        // Setup an array of array objects for Array.java
        Array() {
        }
        
        public Object clone() {
            Array array = new Array();  
            array.setRuns(getRuns());
            return array;  
        }

        public int size() {
            return getRuns().size();
        }

        public Object get(int index)
            throws ArrayIndexOutOfBoundsException {
        
            if (index < 0"
94884009-21fc-4542-8a96-35d546ae8b37,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_1Test.java,60.39090871810913,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotRun object at the specified position
     *  in this run list.
     *
     * @param index The index of the plot run object to return.
     * @return The PlotRun object at the specified position
     *           in this run.
     */
    public Object get(int index);
}
","// PlotRunList_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#get(int)} method.
*/
class PlotRunList_1Test {","// PlotRunList_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#get(int)} method.
*/
class PlotRunList_1Test {

	/**
     * Test {@link PlotRunList#get(int)}.
	 * @throws Exception
     */
	@Test
	public void testGet() throws Exception {
		
		boolean b = true;
		Collection<PlotDatum> ds;
		String s;
		int n = 5;
		
		int p = 0;
		while (p < n) {
			b = false;
			ds = new LinkedList();
			p++;
			assertEquals(true, p < n);
			s = """";
			ds.add(new PlotDatum(s, s, 0));
			ds.add(new PlotDatum(s, s + ""   "", 6));
			
			assertEquals(true, p < 2);
			double[][] e = ds.get(2).toArray(new double[3][2]);
			double[][] f = ds.get(1).toArray(new double[3][2]);
			double[][] g = ds.get(0).toArray(new double[3][1]);
			
			assertEquals(true,e.length==2);
			assertEquals(true,f.length==2);
			assertEquals(true,g.length==2);
			assertEquals(true,s.length()==6);

			
		}
		
		
	}
}	"
3447ee77-f27d-487b-9078-d5a380661a81,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_2Test.java,49.619500398635864,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot run object at the specified position in
     *  this run list.  Shifts any subsequent run elements
     *  to the left (subtracts one from their indices).  Returns the
     *  run element that was removed from this run list.
     *
     * @param index The index of the plot run element to remove.
     * @return The PlotRun object previously at the specified position.
     */
    public Object remove(int index);
}
","// PlotRunList_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunList_2Test {","// PlotRunList_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunList_2Test {
/**
		* Contains a plot that is a collection of PlotDatum objects.
		* It contains three objects: one for each PlotDatum object in the collection.
		*
		* @return A collection of all object.
		 */
		private Collection<PlotDatum> getAllObjects() {
			final HashSet set = new HashSet();
			set.addAll( new PlottedDatums_2( ) );
			set.addAll( new PlottedDatums( ) );
			return set;
		}


		@Test
        void testRemoveAllObjects() {
            Set<PlotDatum> s = getAllObjects();
            ArrayList<PlotDatum> aL = new ArrayList<PlotDatum>();
            setToArray(aL);
            aL.addAll(s);
            s.removeAll(setToArray(aL));
        }

        @Test
        void testRemoveOneObject() {
            ArrayList<PlotDatum> aL = new ArrayList<PlotDatum>();
            setToArray(aL);
            aL.add(PlottedDatums_2.getInstance( ) );
            setToArray(aL);
            s.remove(aL.get(0));
        }

		@Test
        void testRemoveFirstObject() {
            ArrayList<PlotDatum> aL = new ArrayList<PlotDatum>();
            setToArray(aL);
            aL.add(PlottedDatums_2.getInstance( ) );
            setToArray(aL);
            s.remove(aL.get(0));
        }
}"
e69953cb-7d1b-4d20-857e-b098a147568d,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_3Test.java,60.93250322341919,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot run elements in
     *  this run list.
     *
     * @return An interation of all the PlotRun objects in this list.
     */
    public Iterator iterator();
}
","// PlotRunList_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#iterator()} method.
*/
class PlotRunList_3Test {","// PlotRunList_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#iterator()} method.
*/
class PlotRunList_3Test {
static class DataList {
			String data1;
			Integer data2;
		}
    
    /**
     *  Constructor used by subclasses of the {@link PlotRunList} class.
     */
    public PlotRunList_3Test() {}

    /**
     * Test whether the {@link DataList#data1} field is set.
     */
    @Test
    public void test_setData1(){
        PlotRunList runList = new PlotRunList();

		runList.add(new DataList().data1 = ""1"", new Integer(1));

		assertEquals(1, runList.size());
	}

    // Tests the subclasses of the {@link PlotRunList} class.

    /**
	 * Tests implementation of the {@link java.util.Iterator#next()}
	 * method and tests methods to return in a single line, using the
	 * {@link Object#equals(java.lang.Object)} {@link java.lang.Object#equals(java.lang.Object)}
	 * method.
	 */
	@Test
	public void test_iterator_next() {
    	Iterator<PlotRunList> it = runList.iterator();
		
		assertTrue(it.hasNext());
		
		int i = 0;
		for (Run run : it)
			assertEquals(i + 1, run.size());
		
		it.next();
		
		i = 0;
		for (int k = 1; k < 10; k++)
			it.next();
	}
    }

// PlotRunList.java"
c2237076-8c0b-4695-b302-ea7f809e4663,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java,49.85200500488281,stop,"// ContourGenerator.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> An object used to generate a list of contour lines
 *      or paths from a set of gridded three dimensional data.
 *  </p>
 *
 *  <p> Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,
 *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,
 *      Moffett Field, CA 94035.
 *      I don't know how the original Fortran code looked like or where it came from,
 *      other than that NeXTcontour1.4 is based on Pieter Bunings' PLOT3D package
 *      for Computational Fluid Dynamics.
 *  </p>
 *
 *  <p> Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourGenerator {

    /**
     *  Returns true if the contour generation process is done.  False if it is not.
     */
    public boolean done();
}
","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains one unit test case for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains one unit test case for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {
@Test
		void containsTest() {
			final int s1 = 300; // sample size for y-values
			final String s2 = ""my_name"";
			final double x_0 = 0;
			final double x_1 = 1;
			final double x_2 = 2;
			final double x_3 = 3;

			// Create list of 3-D points
			final Map<Double, Integer> x = new HashMap<Double, Integer>();
			final Map<Double, Double> y = new HashMap<Double, Double>();
			for (int i = 0; i < Math.pow(s1, 2); i++) {
				x.put(i, (Integer) x_0);
				y.put(i, (Double) x_1);
				y.put(Integer.MAX_VALUE + i, (Double) x_2);
				y.put(Integer.max_value + i, (Double) x_3);
			}

			// Generate a map of data, for easy access
			final double[][] data = new double[s1][9];
			for (int i = 0; i < s1; i++) {
				for (int k = 0; k < 9; k++) {
					data[i][k] = (Double) x.get(i);
				}
			}

			// Create the object
			final ContourGenerator clg = new ContourGenerator();

			// Check that the object is not done yet
			assertFalse(clg.done());

			// Create the object
			clg.done(true);

			// Assert that the class is done
			assertTrue(clg.done());

			clg.done(true); // reset it

			// Run the tests
			clg.start();
			clg.done(true);   // re-run tests
			clg.start();
			clg.done(true);   // re-run tests
			clg.start();
			clg.done(true);
		}
}"
197b8ec0-b44d-4f9a-9767-3f57f7de8a92,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_0Test.java,30.67565655708313,stop,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar();
}
","// PlotDatum_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatum_0Test {","// PlotDatum_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatum_0Test {

    /**
     *  Test the hasErrorBar() method.
     */
    @Test
    void testIsErrorBar() {
        {
            PlotDatum p = new PlotDatum( new Color( 0, 255, 0 ),
                    new Color( 0, 0, 255 ),
                    null );
            assertTrue( p.hasErrorBar());
        }
        {
            PlotDatum p = new PlotDatum( new Color( 0,255,0 ),
                    new Color( 1,255,0 ),
                    null );
            assertFalse( p.hasErrorBar());
        }
        {
            PlotDatum p = new PlotDatum( new Color( 0,255,0 ),
                    new Color(  1,255,255 ),
                    null );
            assertFalse( p.hasErrorBar());
        }
        {
            PlotDatum p = new PlotDatum( new Color( 1,255,255 ),
                    new Color(  1,255,255 ),
                    null );
            assertFalse( p.hasErrorBar());
        }
        {
            PlotDatum p = new PlotDatum( new Color( 0,255,255 ),
                    new Color(255,0,255 ),
                    null );
            assertTrue( p.hasErrorBar());
        }
    }
	
}
"
62d52608-4cf9-4e2f-a18b-6052baae2594,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_1Test.java,53.2162446975708,stop,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Return true if this datum is connected to the previous one by a line
     *  and false if it is not.
     */
    public boolean connected();
}
","// PlotDatum_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#connected()} method.
*/
class PlotDatum_1Test {","// PlotDatum_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#connected()} method.
*/
class PlotDatum_1Test {
public boolean connected();
     public class TestClone {
		protected PlotDatum clone();
     	protected PlotDatum clonestored;
     	protected PlotDatum clonessimilar;
     	protected PlotDatum clonestoredbyline;     	
     	protected PlotDatum clonestoredbylinewithline;        	
     	protected PlotDatum clonestoredbynonline; 	

		public TestClone() {
			this.clone() ;
			this.clonestoredbyline = (PlotDatum)this.clonestored.clone();
		} 	
        public void copytest(){
    		Color c = (Color) this.clonestoredbyline.getData()[0].getClass().newInstance(); 	
    	} 	

		public void clonetest(){

	} 	
        public void copytestwithsimilar(){

   		this.clonestoredbyline.connected = this.clonestortedbyline.connected() ;
   		PlotDatum cc = (PlotDatum) this.clonestortedbyline.clone(); // not a copy

        }   	
        public void compare(PlotDatum p1, PlotDatum p2) {
            assertEquals(this.clonestoredbyline.getXLabel(), (String)p1.getXLabel());
            assertEquals(this.clonestoredbyline.getYLabel(), (String)p1.getYLabel());
            assertEquals(this.clonestoredbyline.getYLabel(), (String)p2.getYLabel());
            Color c1 = (Color) this.clonestoredbyline.getData()[0].getClass().newInstance(); 	
            Color c2 = (Color) p2.getData()[0].getClass().newInstance(); 	
            c1.colorRef().set(1.0f, 0.0f, 0.0f, 1.0f);
            c2.colorRef().set(1.0f, 0.0f, 0.0f, 1.0f);


          	assertEquals(this.clonestoredbyline.getXLabel(), (String)p1.getXLabel());		
            assertEquals(this.clonestoredbyline,p2);
           assertEquals(this.clonestoredbyline.getXLabel(), (String)p2.getXLabel());		
		}
}



"
6c043976-cf76-4014-9417-d012a4d65d6f,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_0Test.java,47.13125705718994,stop,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract energy from the final APBS output file.
     *
     * @param filename Path to APBS output file.
     * @return String array of total energies in kilojoules, kilocalories and k_BT
     */
    public String[] getEnergy(String filename);
}
","// FileEditor_0Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditor_0Test {","// FileEditor_0Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditor_0Test {

  /**
   * This should not be run by any test class.
   */
  @Test
  public void getEnergy_shouldGetCorrectValues() {
      String[] energy = FileEditor.getEnergy(""FileEditor_0_output.txt"");
      assertEquals(""kJ / kg - Kb / kBT"", energy[0]);
      assertEquals(""kg, kBT"", energy[1]);
  }
	
}"
ccc39429-e830-4631-bee1-0ac6310be25b,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_1Test.java,62.14114952087402,length,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract the energy from a calculation that has summed the component atom energies
     * rather than simply taking the total. (pull_comps.c)
     *
     * @param filename Path to the file written by pull_comps with the energy sum.
     * @return a double array of the total energy of each calculation (up to 6 calculations if there are 3 focus levels).
     */
    public double[] getCompEnergy(String filename);
}
","// FileEditor_1Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditor_1Test {","// FileEditor_1Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditor_1Test {
double[] energy = new double[2];
		double[] energy2 = new double[2];
		double[] energy2a = new double[2];
		
        /**
         * Run the test cases.
         */
    @Test
    public void calculateFile_1() {
            // Run tests
    	try {
            FileReader fr=new FileReader(""sdfsdf"");
            Reader r = fr.getReader();
            Scanner s = new Scanner(r);
    		
            while(s.hasNextLine())
                    {
                         String ss = s.nextLine();
                             
                     if(ss.length()>2 && ss.substring(0,ss.indexOf(':')).toLowerCase().equals(""comp"")) {
                             // Comp is written by pull_comps. 
                             
        		int num_focus;
        		
        		s.nextLine();
        		s.nextLine();
        		s.nextLine();
        		s.nextLine();
        		s.nextLine();
    				
                       num_focus = s.nextInt();
                       fr.close();
                       
                       double[] s_2 = s.readDoubleArray();
        		s.close();

        		s = new Scanner(fr);
        		
                        while(s.hasNextDouble()) {
                         
                             double[] s_3 = s.readDoubleArray();
						  
                                double[][] s_4 = s_3.clone();
                                //double[] s_res = new double[4];
                                double[][] s_res = new double[4][2];
                                int i3 = 0;			
                                for (i3 = 0; i3 < 4; i3++) {
									//double[][] s_tmp = s_res[i3].clone();
                                	 int i4 = 0; 
    				 	 
     					while(i4 < 2){  
    						s_4[i4][i3] = s_4[i4][i3] + s_res[i4][i3];  
    					i4++;  
					}
							i4 = 0;  
						}		  
							
                         if (num_focus == 2) {
                                         
                                         double energy = 0;
                                        
                                         if(ss.substring(ss.indexOf(':')+1).equals(""comp"")) {	
                        		      
                                                    energy = 0;
                                                
                                                    for (i3 = 0; i3 < 4; i3++){
                                                        energy += s_4[i3][2];
                                                   }
                                                
                                          } else {
                                                
                                                 double[][] s2_t = new double[1][4];
                                                              
                                                s.readDoubleArray(s2_t);
                                                for (int i3 = 0; i3 < s2_t[0].length; i3++) {
										//	  System.out.println(ss.substring(ss.charAt(ss.length()-i3))); 
										  energy += Math.pow(s[s2_t[0][i3] - 1], s2_t[1][0]); // s[s[0][i3] - 1];
									//	  s2_t[0][i3] = 0;
										  s2_t[1][0] = 0;
									}
                                    }
                                    
                                            
                                            
                                
                                            
                                }
                                return true;
                        } else if (num_focus == 3) {
    					      
                            double[][] s_res_2 = new double[4][2];
                            for (int i2 = 0; i2 < 4; i2++) {
                                    s_res_2[i2][0] = s_res_2[i2][1] = s_res_2[i2][2] = s_res_2[i2][3] = 0;
                            }
                          
								    
                            for (int i4 = 0; i4 < 2; i4++) {
                                    double sum = 0;
                                    for (int i3 = 0; i3 < 4; i3++) {
                                         s_res_2[i4][i3] =
                                                    Math.pow(s_res_2[i4][i3], s_res_2[i4][i3]);
                                    }
                                    
                                    for (i4 = 1; i4 < 4; i4++)
                                        sum += s_res_2[i3][i4];
                                    
                                    s_res_2[i3][1] = sum;
                                    
                                    sum = 0;
									    for (int i2 = 0; i2 < 2; i2++) {
										  s_res_2[i4][i2] =
										 	Math.pow(s_res_2[i4][i2], s_res_2[i4][i2]);									    
										  sum += s_res_2[i4][i2];
										  s_res_2[i4][i2] = 0.0;
									
									}
									
                                    
                                    
                                    
                                    
			
                                }
					
			
                                for (int i2 = 0; i2 < 4; i2++) {
									//for (int i3 = 0; i3 < 4; i3++) {
									//	  i5 = i4 * 3;
									//	  s_res_2[i2][i5] = s_res_2[i2][i5] + s_res_2[i2][i4];
									//}
									//return true;
								    
				
								    // for (int i3 = 0; i3 < 4; i3++) {
                                    
                                    
                                        double[][] s_res_2_1 = new double[4][2];
                                        for (int i4 = 0; i4 < 4; i4++) {
                                            s_res_2_1[i4][0] = s_res_2_1[i4][1] = s_res_2_1[i4][2] = s_res_2_1[i4][3] = 0;
                                            s_res_2_1[i4][2] = 0;
										   
                                        }
					
				//                double[][] s_res_2_2 = new double[4][2];
				//                for (int i4 = 0; i4 < 4; i4++) {
				//                	
									s_res_2_2[i4][0] = s_res_2_2[i4][1] = s_res_2_2[i4][2] = s_res_2_2[i4][3] = 0;
				//                }
				//                    
				//                                  
                                    int i5 = i4 * 2;
                                    s_res_2_1[i4][i5] = s_res_2_"
79040f13-a987-4dec-8c91-81a65bfc15e8,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/Main.java,59.60200262069702,length,"// Main.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;

/**
 * @author Keith Callenberg, Gabriel de Forest
 */
public class Main {

    /**
     * Store the current GUI text field values in the inFile object.
     *
     * @return True if the operation was succesful, false otherwise.
     */
    public boolean SaveData();
}
","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#SaveData()} method.
*/
class MainTest {","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#SaveData()} method.
*/
class MainTest {
/**
* Constructs a new object of the {@link MainTest} class, initializes its
* fields to not be set.
* @param args the command-line arguments
* @throws Exception if an error occurs
* @see MainTest#SaveData()
*/
    public MainTest() throws Exception {
    }

    /**
* Tests the save of an empty database.
* @throws Exception if the test fails
*/
    @Test
    public void testSaveDb () throws Exception {
        System.setProperty(""java.io.tmpdir"", ""."");

		final Main main = new Main();

		final JFrame frame = new JFrame();
		frame.setTitle(""TEST"");

		// Create a JTextPane to show the dialog box and a JTextArea
		// to show some of the text.
		final JTextPane textPane = new JEditorPane();
		JScrollPane scrollPane = new JScrollPane(textPane);
		scrollPane.setMinimumSize(new Dimension(250, 100));
		frame.add(scrollPane, BorderLayout.CENTER);
		final FrameLayout layout = new JPanel();
		layout.setLayout(new GridLayout(1, 1));
		layout.add(scrollPane);

		// Create a JTextArea to be used as the dialog box.
		final JTextArea jtaTextArea = new JTextArea();
		layout.add(jtaTextArea);

		// Create the JTextJEditorPane instance.
		final JTextJEditorPane ijTextArea = new JTextJEditorPane();
		ijTextArea.setTabSize(4);
		ijTextArea.setBorder(BorderFactory.createLineBorder(Color.RED));
		ijTextArea.setOpaque(true);

		// The dialog box, when clicked, is shown. It is expected to 
		// include a ""Save as..."" and ""Open database"" button.
		final JButton button = new JButton(new String(""Open database""));
		layout.add(button, BorderLayout.NORTH);

		// Create the JDialog with the dialog box.
		final JDialog jDialog = new JDialog();
		jDialog.setContentPane(layout);
		jDialog.create();

		// Show and wait a little until the user finishes editing the
		// dialog box.
		jDialog.pack();
		jDialog.setVisible(true);

		// Start the JText Editor.
		final JTextPane textPane1;
		try {
			textPane1 = (JTextPane)main.initialize(ijTextArea);
		}catch (RuntimeException e) {
			e.printStackTrace();
			throw e;
		}
		System.setProperty(""java.io.tmpdir"", """");

		// Get a reference to the TextViewer object.
		final JmolViewer viewer = main.getViewer();

		// Set the view and title of the text pane in the dialog.
		textPane1.setEditorKit(JEditorPane.createEditorKit(textPane1.getFont()));
		textPane1.setText(""Save your database?"");
		textPane1.selectAll();

		// Set the action to perform when the user presses the Save button.
		final Action action1 = new AbstractAction(""Save"") {
			public void actionPerformed(ActionEvent e) {
				JDialog jdDialog = main.saveDialog(jDialog);
				jDialog.dispose();

				// Close the dialog box.
				jdDialog.setVisible(false);

				// Stop the text viewer from being refreshed.
				viewer.stopRefresh();
			}
		};

		// Add the close button at the end of the dialog box.
		JButton button1 = new JButton(action1, null);
		layout.add(button1, BorderLayout.SOUTH);

		// Create a popup box.
		final JDialog popupDialogPane = new JDialog();
		JTextPane textPane2;
		JButton button2;
		String path = null;
		File file = null;
		try {
			textPane2 = (JTextPane)main.initialize(textPane1);
			textPane2.setOpaque(true);
			path = ""/usr/share/openmc/data/"";
			file = new File(path);
		}catch (RuntimeException e) {
			e.printStackTrace();
			throw e;
		}
		button2 = new JButton(new AbstractAction(""Open"") {
			public void actionPerformed(ActionEvent e) {
				// Create a JPopup to open the specified dialog box.
				final JPopupMenu menu = new JPopupMenu();

				final JMenuItem menuItem1 = new JMenuItem(""Open database"");
				menuItem1.setActionCommand(null);
				menu.add(menuItem1);

				final JMenuItem menuItem2 = new JMenuItem(""Open view"");
				menuItem2.setActionCommand(""Open view"");
				menu.add(menuItem2);

				new JmolPopup(popupDialogPane, menu, new JmolAdapter() {
					public void delete(String filename) {
						viewer.stopRefresh();
						System.exit(0);
					}
				});
			}
		});
		button2.setOpaque(true);
		
		// Create two buttons, each with the menu item on the command bar.
		final JButton button3 = new JButton(new AbstractAction(""Exit"") {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		final JButton button4 = new JButton(""Create new database (new database)"");
		button4.addMenuListener(new MenuListener() {
			public void menuPressed(MenuEvent event) {
				// Create an empty database.
				JDialog jdDialog2 = main.createDialog(jDialog, """");
				jDialog.dispose();	

				// Show and wait a little until the user finishes editing the
				// dialog box.
				jdDialog2.pack();
				jdDialog2.setVisible(true);

				// Set the view and title of the text pane in the dialog box.
				textPane1.setEditorKit(JEditorPane.createEditorKit(textPane1.getFont()));
				textPane1.setText(""Save your database?"");
				textPane1.selectAll();

				// Set the action to perform when the user presses the Save button.
				final Action action3 = new AbstractAction(""Save database"") {
					public void actionPerformed(ActionEvent e) {
						// Create a new database.
						JDialog jdDialog4 = main.createDialog(jdDialog, """");
						jDialog.dispose();

						// Start the text viewer for the new database.
						viewer.stopRefresh();
						final JTextPane textPane = (JTextPane)main"
