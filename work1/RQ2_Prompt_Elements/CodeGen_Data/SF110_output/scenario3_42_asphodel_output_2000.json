[
{
    "choices": [
        {
            "text": "/** {@link Log} - to  logger. */\n\t\tprivate final static Log logger = LogFactory.getLog(HtmlContentParserTest.class);\n\t\t\n                private HtmlContentParser parser = new HtmlContentParser();\n     \n        private final static String SOURCE = \"{http://asphodel.org/source/xml/}\";\n \n        \n        /** test case 1. Test parser with no html or text content */\n        @Test\n        void testEmptySource() throws IOException {\n                doTest(SOURCE);\n        }\n                \n        /** test case 1. Test parser with text Content */\n        @Test\n        void testTextContent() throws IOException {\n                logger.debug(\"test textContent\");\n\n                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_content.xml\");\n                Reader out = Thread.currentThread().getContextClassLoader().getResourceAsReader(\"p_test.html\");\n                assertTrue(\"parser.extractPlainText(\".concat(SOURCE))\",parser.extractPlainText(SOURCE).startsWith(\"<\"));\n        }\n \n        /** test case 2. Test parser with text content and no html */\n        @Test\n        void testTextContentAndNoHtml() throws IOException {\n                        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_content.xml\");\n                        assertNotNull(in);\n\n                logger.debug(\"test text content and no html\");\n\n                Reader reader = new InputStreamReader(in) {\n                        @Override\n                        public int read() throws java.io.IOException {\n                                  throw new IOException(\"No stream could be retrieved\");\n                        }\n                        @Override\n                        public void close() throws java.io.IOException {\n                        }\n                };\n                Source result = Source.parse(reader);\n                                                 \n                assertNotNull(\"result null\",result);\n                assertEquals(\"result not parsed\", \"html\", result.getElement());\n        }\n \n        /** test case 3. Test parser with html content and no html */\n        @Test\n        void testHtmlContentAndNoHtml() throws IOException {\n                        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_content.xml\");\n                        assertNotNull(in);\n\n                logger.debug(\"test html content and no html\");\n\n                //no html content\n                InputStreamReader inReader = new InputStreamReader(in);\n                                                           \n                Source result = Source.parse(inReader);\n                                                           \n                assertNotNull(\"result null\",result);\n                assertEquals(\"result not parsed\", \"text\", result.getElement());\n        }\n \n        \n        /** test case 4. Test parser with html and text content */\n        @Test\n        void testHtmlAndText() throws IOException {\n                logger.debug(\"test html and text\");\n\n                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_content.xml\");\n                Reader reader = new InputStreamReader(in);\n                Result result = parser.extractPlainText(reader);\n                                                 \n                assertEquals(\"result not parsed\", \"text\", result.getElement());\n        }\n\n    \n        @Test\n        void testNotFoundSource() throws IOException {\n                logger.debug(\"test not found source\");\n                \n                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_content.xml\");\n                InputStream source = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"parser_test_not_text.xml\");\n                                  \n                Source result = Source.parse(source);\n                                   \n                assertEquals(\"result wrong\", \"text\", result.getElement());\n        }\n \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private Log log;\n\t\tpublic static final LogFactory factory = LogFactory.getFactory();\n\n\t\t@Test\n        public void testHtmlContentParser1() {\n\t\tlog.debug(\"testHtmlContentParser1\");\n          assertEquals(\"\"+//\n                    \"<div\" +\n                    \">\" + //\n                    \"<h1>Some heading 1</h1>\" +\n                    \"<p>\" +\n                    \"<em>Some content</em>\" +\n                    \"<hr/>\" +\n                    \"<br/>\"  //\n                    \"<input type='button' onclick='print()' value='A' name='b' />\" +\n                    \"<h1>Some heading 2</h1>\",\n                    extractPlainText(\"<em>\"+ //\n                            \"<p>Some content</p>\" +\n                            \"<hr/>\"+ //\n                            \"<br/>\")) {\n                }\n                assertEquals(\"\"+//\n                        \"<h1>\" + //\n                        \"<em>\" + //\n                        \"<p>\" +\n                        \"<em>Some content</em>\" +\n                        \"<hr/>\" +\n                        \"</em>\" +\n                        \"</h1>\" +  //\n                        \"<p>\"+ //\n                        \"Some content\"+\n                        \"<br/>\" +//  \n                        \"</p>\"+//\n                        \"<input type='button' onclick='print()' value='A' name='b'>\",\n                        extractPlainText(\"<input type='button' onclick='print()' value='A' name='b' />\"));\n                assertEquals(\"\"+//\n                        \"<h1>Some heading 2</h1>\",\n                        extractPlainText(\"<h1>\" +\n                                \"<em>\" +\n                                \"<p>\" +\n                                \"<em>Some content</em>\" +\n                                \"</p>\" +\n                                \"</em>\" +\n                                \"</h1>\" +\n                                \"\"));\n                assertEquals(//\n                    \"<p>\"+//\n                    \"<em>Some content</em>\"+//\n                    \"</p>\"+//\n                       // some text content\n                    \"<h1>\"+ //\n                        \"<em>\"+ //\n                        \"<p>\"+\n                        \"<em>Some content</em>\" +\n                        \"<hr/>\"+ //\n                        \"<br/>\"  //\n                        \"<input type='button' value='A' name='b' />\" +\n                        \"<h1>Some heading 2</h1>\" +\n                    \"</em>\"+ //\n                    \"</p>\"+ //\n                    \"</em>\",\n                    extractPlainText(\"<input type='button' value='A' name='b'>\"));\n                assertEquals(//\n                        \"<p>\"+//\n                        \"<em>Some content</em>\"+//\n                        \"</p>\"+//\n                       //  some text content\n                    \"<h1>\"+ //\n                        \"<em>\"+ //\n                        \"<p>\"+\n                        \"<em>Some content</em>\" +\n                        \"<hr/>\"+ //\n                        \"<br/>\"  //\n                        \"<input type='button' value='A' name='b'>\"+\n                    \"</em>\"+ //\n                    \"</p>\"+ //\n                    \"</em>\",\n                    extractPlainText(\"<input type='button' value='A' name='b'>\"));\n                assertEquals(new Source(\"\"+//\n                \t\t\"<!DOCTYPE html>\"+//\n                \t\t\"<html><head\" +\n                \t\t\">\"+//\n                \t\t\"<title>\"+//\n                \t\t\"<em>\"+//\n                \t\t\"<p>\"+//\n                \t\t\"<em>Some content</em>\" +\n                \t\t\"<hr/>\"+//\n                \t\t\"</em>\" +\n                \t\t\"</p>\"+//\n                \t\t\"</em>\"+\n                \t\t\">\"+//\n                \t\t\"</head><body>\"+//\n                \t\t\"<p>\"+//\n                \t\t\"<em>Some content</em>\" +\n                \t\t\"</p>\"+//\n                    \"</body>\"),\n                    extractPlainText(\"<html><head>\" +\n                    \"<title>\"  //\n                    \"<em>\"+ //\n                    \"<p>\"+//\n                    \"<em>Some content</em>\" +\n                    \"<hr/>\"+ //\n                    \"<br/>\"  //\n                    \"<input type='button' value='A' name='b'>\" +\n                    \"</em>\" +\n                    \"</p>\"+ //\n                    \"</em>\"+ //\n                    \"</body>\" +\n                \t\t\"</html>\"));\n            }\n        }\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * test constructors\n\t */\n\t@Test\n\tpublic void testConstructors() throws ContentParserException {\n\t\tLog log = LogFactory.getLog(this.getClass());\n\t\tlog.info(\"TEST:\");\n\n\t\tSource streamContent = new Source(Source.HTML, \"<pre>\", null);\n\t\tstreamContent.setRawStream(new InputStream() { // streamContent.setSource(\"<pre>\")\n\t\t\t@Override\n\t\t\tpublic int read() throws IOException {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * test if extractPlainText returns text content without tags, tags are always removed.\n\t */\n\t@Test\n\tpublic void testParsePlainText() throws ContentParserException {\n\t\tSystem.out.println(\"TEST:\");\n\t\tString plainText = \"PlainText test\";\n\n\t\tSystem.out.println(\"test extractPlainText:\");\n\n\t\tHtmlContentParser hc = new HtmlContentParser();\n\t\tString result = hc.extractPlainText(plainText);\n\n\t\tSystem.out.println(\"==\" + plainText + \" result:\" + result);\n\t\t\n\t\tassertEquals(\"Test\", plainText);\n\t\tassertEquals(\"Plain test\", result);\n\t\tSystem.out.println(\"==\" + plainText + \" result:\" + result);\n\t}\n\t/**\n\t * test if extractPlainText is correct for xml text content\n\t */\n\t@Test\n\tpublic void testHtmlContentXml() throws ContentParserException {\n\t\tLog log = LogFactory.getLog(this.getClass());\n\t\tlog.info(\"TEST:\");\n\n\t\tString plainText = \"PlainTest\";\n\t\tSource streamContent = new Source(Source.XML, \"<pre>\", null);\n\t\tstreamContent.setSource(plainText);\n\t//\t\n\t}\n\t/**\n\t * test if extractPlainText returns XML content without tags,\n\t * tags are always removed in XML content\n\t */\n\t@Test\n\tpublic void testHtmlContentXmlWithTags() throws ContentParserException {\n\t\tSystem.out.println(\"TEST:\");\n\t\tString plainText = \"XMLtestPlainTest\";\n\t\tSource streamContent = new Source(Source.XML, \"<pre>\", null);\n\n\t\ttry {\n\t\t   streamContent.setSource(plainText); // no tags\n\t\t\tassertEquals(\"XML\", plainText);\n\t\t  assertEquals(\"Plaintest\", plainText);\n\t\t\tassertEquals(null, streamContent.getTags());\n\t\t\tSystem.out.println(\"==\" + plainText + \" result:\" + plainText);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\t/**\n\t * test extraction of text content with external encoding\n\t */\n\t@Test\n\tpublic void testHtmlContentWithEncoding() {\n\t\tLog log = LogFactory.getLog(this.getClass());\n\t\tlog.info(\"TEST:\");\n\t\tURL url = new URL(\"http://www.google.com\");\n\t\tInputStream is = url.openStream();\n\n\t\tReader isr = new InputStreamReader(is);\n\t\tSource stringSource = new Source(Source.XML, isr, uri); \t\t\n\t\tString plainText = stringSource.getAll();\n\n\t\tassertEquals(\"Plain test\", plainText);\n\t\tSystem.out.println(\"==\" + plainText + \" result:\" + plainText);\n\t}\n\t/**\n\t * test if extract from XHTML is correct\n\t */\n\t@Test\n\tpublic void testXhtmlContent() throws ContentParserException {\n\t\tSystem.out.println(\"TEST:\");\n\t\t\n\t\tSystem.out.println(\"== test with XHTML\");\n\t\tString plainText = \"test with XHTML\";\n\t\tSource streamContent = new Source(Source.XHTML, \"<pre>\", null);\n\t\tstreamContent.setSource(plainText);\n\t}\n//\t/**\n//\t * test if extractPlainText returns text content wth only some tags\n//\t */\n//\t@Test\n//\tpublic void testPlainText() throws ContentParserException {\n//\t\tLog log = LogFactory.getLog(this.getClass());\n//\t\tlog.info(\"TEST:\");\n//\t\tString plainText = \"Plain Test\";\n//\t\tSystem.out.println(\"==\" + plainText + \"Result:\\n\" + plainText);\n//\n//\t\tSystem.out.println(\"==\" + plainText + \"Result:\");\n//\t\tSource source = new Source(Source.XHTML, null, Source.HTML);\n//\n//\t\tString result =  source.getTags().toString();\n//\t\tSystem.out.println(\"==\" + result);\n//\n//\t\tassertEquals(\"Plain Test\", result);\n//\t\tSystem.out.println(\"==\" + plainText + \"Result:\" + plainText);\n//\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\n    //private static final Log log = LogFactory.getLog(HtmlContentParserTest.class);\n\n\t/**\n\t * Create unit tests from a text format.\n\t *\n\t * @param text content as a text format. the result of <code>this.extractPlainText(String)</code> does not\n\t * \t include <code>''</code> value.\n     * @param reader reader to read from text format.\n\t * @param log Log\n\t * @throws Exception unexpected exception occurs\n\t */\n    @Test\n    public void extractPlainTextTest(String text, String readerStr, Log log) throws Exception {\n        StringReader sr = new StringReader(text);\n        InputStream in = sr.getInputStream();\n        Reader in2 = sr.getReader(in);\n        assertNotNull(\"Incorrect reader created for plain text. Text: \" + text + \" and reader: \" + sr.getClass().toString(), in2);\n\n        byte[] bytes = readStream(in2);\n        assertNotNull(\"Text format: \\n\" + text + \"\\nnot extracted\\n\",extractPlainText(new String(bytes)));\n\n    \t\t\n        //assertArrayEquals(\"Text format: \\n\" + text + \"\\nextracted value differs\", text, extractPlainText(text));\n        //assertArrayEquals(\"Text format: \\n\" + text + \"\\nextracted value differs\", text, extractPlainText(text));\n\n        assertNotNull(\"Null InputStream in1\", in);\n        assertNotNull(\"Null Reader in2\",in2);\n        assertNotNull(\"Null InputStream in3\",in2);\n        assertNotNull(\"Null Reader in4\",in2);\n        assertNotNull(\"Null InputStream in5\",in2);\n        \n        Source s = new Source();\n        InputStream in5 = s.read(in);\n        assertNotNull(\"Null stream in6\",in5);\n        assertNotNull(\"Empty String in7\", s.toString());\n        assertNotNull(\"Null reader\",in2);  //reader is not yet created\n\n\n        \n\n    }\n    /**\n     * Check that it read the reader into a string.\n     *\n     * @param in Reader to read into string\n     * @return content as a string\n     * @throws Exception unexpected exception occurs\n     */\n   @Test\n    public void extractPlainTest(Reader in) throws Exception {\n        StringReader sr = new StringReader(in.toString());\n        assertNotNull(\"Null reader in1\", in);\n        assertNotNull(\"Empty reader in2\", sr.getReader(in));  //reader is not yet created\n        assertNotNull(\"No reader in3\", sr.getReader());  //no reader is yet created\n\n        \n        \n    }\n\n    @Override\n    public String createFromSource(String encoding, URL url) throws Exception {\n        \n        return \"HtmlContentParser test string.\";\n    }\n\n    @Override\n    public String createFromSource(String encoding, Source source) throws Exception {\n        \n        return \"HtmlContentParser test string.\";\n    }\n\n\n    /**\n     * Reads the reader and checks the result against expected content.\n     *\n     * @param in Reader to read into string\n     * @return content as a string\n     * @throws Exception unexpected exception occurs\n     */\n    private String readStream(Reader in) throws Exception {\n        StringBuilder builder = new StringBuilder();\n\n        int data;\n        int state;\n        while ((data = in.read()) >= 0) {\n            builder.append((char)data);\n        }\n\n        if (out!=null) {\n            out.write(builder.toString().getBytes());\n\n        }\n\n        //return content as a string\n        return builder.toString();\n    }\n\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test method for {@link org.asphodel.parser.StringContentParser#extractPlainText(String)}.\n\t\t * @throws ContentParserException if some string parser error occur.\n\t\t * @throws IOException if some IO error occur.\n\t\t */\n    @Test\n    public void testExtractPlainText() throws ContentParserException, IOException {\n        Reader textReader = this.getClass().getResourceAsStream(\"TestContentParser.txt\");\n        HtmlContentParser contentParser = new HtmlContentParser(textReader);\n   \n        String result = contentParser.extractPlainText(\"<w:p>Text</w:p>\");\n        assertEquals(\"<w:p>Text</w:p>\", result);\n        assertNotNull(textReader);\n        textReader.close();\n\n\tLog log = LogFactory.getLog(HtmlContentParserTest.class);\n   \tif (log.isDebugEnabled()) {\n            textReader = this.getClass().getResourceAsStream(\"TestContentParser.log\");\n           // log.debug(textReader.toString());\n        }\n   \tif (log.isInfoEnabled()) {\n            textReader = this.getClass().getResourceAsStream(\"TestContentParser.Log.out\");\n \t\t// log.info(textReader.toString());\n    \t}\n    }\n\n\n    /**\n\t * Test method for {@link org.asphodel.parser.StreamContentParser#extractPlainText(String)}.\n\t * @throws ContentParserException if some string parser error occurs.\n\t * @throws IOException if some IO error occurs.\n\t */\n\t@Test\n\tpublic void textExtractPlainText() throws ContentParserException, IOException {\n\n\t\tReader textReader = this.getClass().getResourceAsStream(\"TestContentParser.txt\");\n\t\tInputStream inputStream = this.getClass().getResourceAsStream(\"TestContentParser.txt\");\n     \n\t\tHtmlContentParser contentParser = new HtmlContentParser(textReader);\n     \n\t\tString result = null;\n\t\t\ttry {\n\t\t\t\tchar[] charArray = new char[inputStream.available()];\n\t\t\t\tinputStream.read(charArray);\n\t\t\t\tresult = new String(charArray, \"utf-8\");\n\t\t\t} catch (IOException io) {\n\t\t\t\tassertTrue(io.getMessage(), io.getMessage().startsWith(\"java.io.IOException:\"));\n\t\t\t} catch (ContentParserException cpE) {\n\t\t\t\tassertEquals(\"The content parsed successfully.\",cpE.getMessage());\n\t\t\t\t//assertTrue(cpE.getException() instanceof IllegalArgumentException);   //TODO : need more investigation!!?!\n\t\t\t}\n    \t\n\t\tinputStream.close();\n    \tif (log.isDebugEnabled()) {\n    \t\tlog.debug(\"Text content =\" + contentParser.extractPlainText(\"<w:p><w:p>1</w:p></w:p>\"));\n    \t}\n    \tif (log.isInfoEnabled()) {\n    \t\tlog.info(\"Text content =\" + contentParser.extractPlainText(\"<w:p><w:p>1</w:p></w:p>\"));\n    \t}\n    \tassertNotNull(result);\n\t\t\n\t\t\n\n    }\n    /**\n\t * Test method for {@link org.asphodel.parser.HtmlExtractor#extract(java.iostream.InputStream, java.lang.String)}.\n\t * @throws ContentParserException if some string parser error occurs.\n\t * @throws IOException if some IO error occurs.\n\t */\n\t@Test\n\tpublic void testExtractPlainText2() throws ContentParserException, IOException {\n\t\tReader textReader = this.getClass().getResourceAsStream(\"TestContentParser.txt\");\n\t\tHtmlContentParser contentParser = new HtmlContentParser(textReader);\n\t\ttry{\n\t\t  HtmlExtractor extract = new HtmlExtractor();\n\t\t  extract.setContentParser(contentParser);\n\t\t  extract.setText(\"<html><head><body></head><body></html>\");\n\t\t  Source src = extract.extract(\"<html><body></body><html>\", null);\n\t\t  assertNotNull(\"Extraction of <html> will not result in <html>\",src);\n\t\t  //System.out.println(src.toHTML());\n\t\t  assertNotNull(\"There should be no exception!\",ex);\n\t\t  assertEquals(\"Html parser error.\", ex.getMessage());\n\t\t  assertNotNull(extract.extract(src,null));\n\t\t  assertNotNull(extract.extract(src, null));\n\t\t  } catch (Exception ex) {\n\t\t\t  assertTrue(\"The exception text :\" + ex.toString(), false);\n\t\t}\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "Log log = LogFactory.getLog(HtmlContentParserTest.class);\n/**\n * @throws IOException\n*/\n    @Test\n    public void testInputStream() throws IOException {\n        String input = readData(\"textcontent.html\");\n        assertTrue(extractPlainText(input).length()!=0);\n    }\n//        public String extractPlainText(String textContent) throws ContentParserException{\n//\n//            InputStream is = new URL(\"http://www.asphodel.net/test.html\").openStream();\n//            Reader r = new InputStreamReader(is);\n//            Source source = new Source(r);\n//            return source.getText();\n//    }\n\n    private static String readData(String name) throws IOException {\n        StringBuffer result = new StringBuffer();\n        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(name);\n        Reader reader = new InputStreamReader(is);\n        Source source = new Source(reader);\n        assertNotNull(source);\n        source.setLogicalPath(name);\n        int c;\n        while ( (c = source.next()) > 0) {\n            result.append((char)c);\n        }\n        return result.toString();\n    }\n}\n\n//HtmlContentParserTest.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "Log           log = LogFactory.getLog(this.getClass());\n    /**\n     * @param testCaseContent text content as a text format,the real format of the content  can be\n     *                           xml,html,xhtml....\n     */\n    @Test\n    public void extractPlainText(String testCaseContent) throws ContentParserException {\n    try {\n        Source source = new Source(testCaseContent);\n        //String sourceContent = source.extractAll();\n        Reader reader = new InputStreamReader(source.getInputStream());\n        String s = read(reader);\n        reader.close();\n    } catch (IOException e) {\n        log.error(e);\n        fail(\"IOException : \" + e.getMessage());\n    } catch (Exception e) {\n        log.error(e);\n        fail(\"Exception : \" + e.getMessage());\n    }\n    }\n\n    private static String read(Reader r) throws IOException {\n        StringBuffer sb = new StringBuffer();\n        char[] cbuf = new char[40];\n        int n = 0;\n        while ((n=r.read(cbuf))!= -1) {\n            sb.append(cbuf, 0, n);\n        }\n        r.close();\n        return sb.toString();\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\nprivate static final Log LOG = LogFactory.getLog(HtmlContentParserTest.class);\n\t\n\t/**\n\t * Test method for {@link HtmlContentParser#extractPlainText(String)} method.\n\t * Tests {@link HtmlParser#parse(Reader)}, {@link org.asphodel.htmlparser.HtmlParser#parse(ContentReader)}.\n\t * @throws ContentParserException \n\t */\n\t@Test\n\tpublic void testExtractPlainText() throws ContentParserException {\n\t\t\n\t\tReader r = null;\n\n\t\ttry {\n\n\t\t\tr=null;\n\t    \tString text = \n\t\t\t\"<html><head><title></title><meta http-equiv='Content-Type' content='text/html' type='text/xml' />\"+\n\t\t\t\"</head><body></body>\";\n\t\t\t\n\t\t\tString html = HtmlParser.parse(r = new StringReader(text));\n\t\t\n\t\t\tString content = HtmlParser.parse(r = new StringReader(html.substring(6))).parse();\n\t\t\tassertEquals(\"<html><head><title></title><meta http-equiv='Content-Type' content='text/html' type='text/xml' /></head><body>\", content);\n\t\t} catch (ContentParserException e) {\n\t\t\tLOG.info(e);\n\t\t\tfail(\"Exception during the stream content reader parsing.\\n{0}\", e.getLocalizedMessage());\n\t\t} finally {\n\t\t\tif (r!=null){\n\t\t\t\ttry {r.close();} catch (IOException e) {LOG.info(e);}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t/**\n\t * Test method for {@link HtmlContentParser#extractPlainText(String)} method.\n\t * Tests {@link HtmlParser#parse(InputStream,ContentReader)}.\n\t * @throws ContentParserException \n\t */\n\t@Test\n\tpublic void testExtractPlainText2() throws ContentParserException {\n\t\t\n\t\tInputStream r = null;\n\t\tString data = \"\"+\n\t\t\t\"<html><head><title></title><meta http-equiv='Content-Type' content='text/html' type='text/xml' />\"+\n\t\t\t\"</head><body></body>\";\n\t\tInputStream d = null;\n\t\tString content = null;\n\t\tInputStream data2 = HtmlParser.parse(d = new StringReader(data), r = new InputStream() {\n\n\t\t\t@Override\n\t\t\tpublic int read() throws IOException {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int read(byte[] b, int off, int len) throws IOException {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void close() throws IOException {\n\t\t\t\t// do nothing here\n\t\t\t}\n\t\t});\n\t\t\n\t\tString content2 = HtmlParser.parse(r).parse();\n\t\tassertEquals(\"<html><head><title></title><meta http-equiv='Content-Type' content='text/html' type='text/xml' /></head><body>\", content2);\n\t\t\n\t\t\n\t\tByteArrayOutputStream dataOut=new ByteArrayOutputStream();\n\t\tdataOut.write(data);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tdataOut.write(0);\n\t\tByteArrayInputStream dataIn=new ByteArrayInputStream(dataOut.toByteArray());\n\t\tdataOut.close();\n\t\tdata2=new XmlPullParserWrapper(r,d,dataIn,HtmlParser.parse(r).getLevel());\n\t\tdataIn.close();\n\t\tcontent=HtmlParser.parse(r).parse();\n\t\t\n\t\tassertEquals(\"<html><head><title></title><meta http-equiv='Content-Type' content='text/html' type='text/xml' /></head><body>\",content);\n\t\t\n\t\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t@Test\n\tpublic void testExtractPlainText3() throws ContentParserException {\n\t\t\n\t\tInputStream r = null;\n\t\tString data = \"<html><head><title></title></head><body></body>\";\n\t\tInputStream data2 = HtmlParser.parse(r = new StringReader(data));\n\t\tString content;\n\t\tcontent=HtmlParser.parse(r).parse();\n\t\t\n\t\tassertEquals(\"<html><head></head>\",content);\n\t\tLOG.info(content);\n\t\tassertEquals(\"<html><head></head></html>\",content);\n\n\t}\n\t\n\t@Test\n\tpublic void testExtractPlainText4() throws ContentParserException {\n\t\t\n\t\tInputStream r = null;\n\t\tInputStream data = InputStream.class.getResourceAsStream(\"XmlPullParser.html\");\n\t\tInputStream data2 = HtmlParser.parse(r = new StringReader(HtmlParser.parse(r).parse()));\n\t\tString content;\n\t\tcontent=HtmlParser.parse(r).parse();\n\t\t\n\t\tassertEquals(\"<html></html>\",content);\n\t}\n\t\n\t@Test\n\tpublic void testExtractPlainText5() throws ContentParserException {\n\t\tInputStream r = null;\n\t\tInputStream data = InputStream.class.getResourceAsStream(\"XmlPullParser.html\");\n\t\tInputStream data2 = HtmlParser.parse(r = new InputStream() {\n\n\t\t\t@Override\n\t\t\tpublic int read() throws IOException {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}).parse();\n\n\t\tString content;\n\t\tcontent=HtmlParser.parse(r).parse();\n\t\t\n\t\tassertEquals(\"<html/>\",content);\n\t\t\n\t}\n\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final Log log = LogFactory.getLog(HtmlContentParserTest.class);\n        /**\n         * The {@link Source}\n         */\n        private Source source;\n        \n        /**\n         *\n         * @return\n         */\n        public Source getSource() {\n            return this.source;\n        }\n        \n        /**\n         *\n         * @param source\n         */\n        public void setSource(Source source) {\n            this.source = source;\n        }\n\n        /**\n         * test parse html.\n         *\n         * @throws ContentParserException\n         *             the content parser exception\n         */\n        @Test\n        public void testParseHtml() throws ContentParserException {\n            /* setup the source as a stream */\n            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/testPlainText.xml\");\n            Source streamAsSource = Source.create(inputStream, false);\n            /* the input source cannot be opened to read, so we need to close it */\n            inputStream.close();\n            /* set our parsed document to a stream */\n            InputStream inputStream2 = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/HTMLPlainText.xml\");\n            Source stream2 = Source.create(inputStream2, false);\n            this.getSource().setSource(streamAsSource);\n            this.getSource().setSource(stream2);\n            /* test parse html. */\n            assertEquals(\"<p>test</p>\", extractPlainText(this.getSource()));\n        }\n        \n        /**\n         * test parse xml.\n         *\n         * @throws ContentParserException\n         *             the content parser exception\n         */\n        @Test\n        public void testParseXml() throws ContentParserException {\n            /* setup the source as a stream */\n            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/testPlainTextXML.xml\");\n            Source streamAsSource = Source.create(inputStream, false);\n            /* the input source cannot be opened to read, so we need to close it */\n            inputStream.close();\n            /* set our parsed document to a stream */\n            InputStream inputStream2 = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/HTMLPlainTextXML.xml\");\n            Source stream2 = Source.create(inputStream2,false);\n            this.getSource().setSource(streamAsSource);\n            this.getSource().setSource(stream2);\n            /* test parse xml. */\n            assertEquals(\"<p>test</p>\", extractPlainText(this.getSource()));\n        }\n        \n        /**\n         * test parse xml.\n         *\n         * @throws ContentParserException\n         *             the content parser exception\n         */\n        @Test\n        public void testParseHtmlWithTags() throws ContentParserException {\n            /* setup the source as a stream */\n            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/testPlainTextXML.xml\");\n            Source streamAsSource = Source.create(inputStream, false);\n            /* the input source cannot be opened to read, so we need to close it */\n            inputStream.close();\n            /* set our parsed document to a stream */\n            InputStream inputStream2 = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/HTMLPlainTextXML.xml\");\n            Source stream2 = Source.create(inputStream2,false);\n            this.getSource().setSource(streamAsSource);\n            this.getSource().setSource(stream2);\n            /* test parse html. */\n            assertEquals(\"<p>test</p>\", extractPlainText(this.getSource()));\n        }\n        \n        /**\n         * test parse html.\n         *\n         * @throws ContentParserException\n         *             the content parser exception\n         */\n        @Test\n        public void testParseXmlWithoutTags() throws ContentParserException {\n            /* setup the source as a stream */\n            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/testPlainTextXML.xml\");\n            Source streamAsSource = Source.create(inputStream, false);\n            /* the input source cannot be opened to read, so we need to close it */\n            inputStream.close();\n            /* set our parsed document to a stream */\n            InputStream inputStream2 = getClass().getClassLoader().getResourceAsStream(\n                    \"tst/HTMLPlainTextXML.xml\");\n            Source stream2 = Source.create(inputStream2, \"test\");\n            this.getSource().setSource(streamAsSource);\n            this.getSource().setSource(stream2);\n            /* test parse html. */\n            assertEquals(\"<p>test</p>\", extractPlainText(this.getSource()));\n        }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final Log logger = LogFactory.getLog(HtmlContentParserTest.class);\n\n\t\t@Test\n\t\tvoid test1() throws ContentParserException {\n\t\t\ttry {\n\t\t\t\tHtmlContentParser htmlContentParser = new HtmlContentParser();\n    \t\t\tInputStream is1 = new URL(TestUtility.URL_HHTMLEXT_PATH).openStream();\n    \t\t\tSource source1 = htmlContentParser.extractPlainText(is1);\n    \t\t\tassertTrue(\"The htmlContentParser has no element 'div'\", source1.getChildElements().size() == 1);\n\t\t\t\tis1.close();\n\t\t\t} catch (ContentParserException thrownException) { \n    \t\t\t\tlogger.error(thrownException.getMessage(),thrownException);\n\t\t\t\tassertTrue(\"Expected ContentParserException thrown\", false);\n\t\t\t}\n\t\t}\n\t\t@Test\n\t\tvoid test2() throws ContentParserException {\n    \t\t\ttry {\n    \t\t\t\tHtmlContentParser htmlContentParser = new HtmlContentParser();\n    \t\t\t\tInputStream is = new URL(TestUtility.URL_HHTMLEXT_PATH).openStream();\n    \t\t\t\tSource source1 = htmlContentParser.extractPlainText(is);\n    \t\t\t\tlogger.debug(source1.toString());\n    \t\t\t\t\n    \t\t\t\tReader reader = new InputStreamReader(is);\n    \t\t\t\tassertTrue(\"The htmlContentParser has no element 'div'\", source1.getChildElements().size() == 1);\n    \t\t\t\tassertTrue(\"The reader has no content\", reader.read() == 99);\n    \t\t\t\tthrow new ContentParserException();\n    \t\t\t} catch (ContentParserException thrownException) { \n    \t\t\t\tlogger.error(thrownException.getMessage(),thrownException);\n\t\t\t\tassertTrue(\"Expected UncaughtContentParserException thrown\", false);\n\t\t\t}\n\t}\n\n}\n\n// HtmlContentParserTest.java\n",
            "finish_reason": "stop"
        }
    ],
    "id": "f9b908a1-a5d6-4a70-9a7d-bfc8910cd24f",
    "prompt_id": "/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser.java",
    "original_code": "// HtmlContentParser.java\npackage org.asphodel.parser;\n\nimport au.id.jericho.lib.html.Source;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.net.URL;\n\n/**\n * @author : sunwj\n * @since 0.1\n *        Date: Mar 31, 2007\n *        Time: 10:03:07 PM\n *        <p/>\n *        html content parser using Jericho\n * todo does it need to devided into 2 different implementation?\n */\npublic class HtmlContentParser implements StringContentParser, StreamContentParser {\n\n    /**\n     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....\n     * @return plain text without extra tags or elements\n     */\n    public String extractPlainText(String textContent) throws ContentParserException;\n}\n",
    "test_prompt": "// HtmlContentParserTest.java\npackage org.asphodel.parser;\n\nimport au.id.jericho.lib.html.Source;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlContentParser}.\n* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.\n*/\nclass HtmlContentParserTest {",
    "time_taken": 49.845826387405396,
    "usage": {
        "prompt_tokens": 436
    }
}
]