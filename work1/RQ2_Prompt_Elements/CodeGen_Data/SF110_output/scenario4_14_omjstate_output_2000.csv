ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
124f2953-cc1a-4b3d-911c-f2180c1375e6,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,21.74879026412964,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard);

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode();

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent();

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString();

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {
/**
		* Test value constructor.
		*/
		public Transition_0Test() {
		}

		/**
		 * Insert the method's description here.
		 * Creation date: (16/07/2013 00:51:57 PM)
		 * @return com.objectmentors.state.State
		 * @throws Exception 
		*/
		@Test
		public final void testTrigger_0_1() throws Exception {
				fail(""Not yet implemented"");
		}

		/**
		* Insert the description JUnit method here instead.
		* Creation date: (12/08/2012 12:28:46)
		* @throws Exception 
		*/
		@Test
		public void testTrigger_0_2() throws Exception {
		    final IState state = new State();
		    
		    // Test value for trigger with NULL event
		    assertThrows(ClassCastException.class, ()->{
		    	assertTrue(state.trigger(null, new Event("""")));
		    });
		}
		 
		
		/**
		 * Test Equality.
		* Creation date: (22/06/2013 23:06:36)
		* @throws Exception 
		*/
		@Test
		public void testEquals() throws Exception {

		assertTrue(new Transition().equals(new Transition()));
		
		assertFalse(new Transition().equals(new Transition_0Test()));
		
		assertEquals(new Transition_0Test(), new Transition_0Test());
		
		assertFalse(new Transition_0Test().equals(new Transition()));
			
		assertFalse(new Transition().equals(null));
			
		assertFalse(new Transition_0Test().equals(null));
		}
		
		/**
		* Insert the description JUnit method here instead.
		* Creation date: (10/11/2013 15:06:34)
		* @throws Exception 
		*/
		@Test"
3544a6a7-35cc-41a5-a987-5a14dff4254e,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,21.613550424575806,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard);

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode();

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent();

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString();

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {

	IState initialState;
	IState outcomeState;
	Event triggerEvent;

	/**
	* Method to test the willTrigger, to be added as public.
	* <p>
	* Creates a new State that is not the start state of a State Machine.
	* We should check to ensure that the initialState is still equal to the
	* start state of a State Machine by checking to ensure that
	* this method returns the expected outcome when passed a trigger Event.
	*/
	@Test
	public void test_willTrigger1() {
		initialState = s_initialState;

		outcomeState = s_initialState;
		triggerEvent = s_triggerEvent;
		assertTrue(
				""Expecting a state equal to the start state of ""
					+ s_initialState.getClass().getSimpleName()
					+ "" when calling willTrigger"",
				initialState.equals(s_initialState)
		);
	}

	/**
	* Method to test the willTrigger, to be added as public.
	* <p>
	* Create a new State to hold initialState (as a IState) and a trigger Event
	* for this Transition.
	*/
	@Test
	public void test_willTrigger2() {
		initialState = s_initialState;
		triggerEvent = s_triggerEvent;
		outcomeState = s_initialState;
		assertTrue(
				""Expecting a state equal to the start state of ""
					+ s_initialState.getClass().getSimpleName()
					+ "" when calling willTrigger"",
				initialState.equals(s_initialState)
		);
	}

	/**
	* Method to test the willTrigger, to be added as public.
	* @param pInitState an IState to be used as the initial state of this Transition.
	*/
	@Test
	public void test_willTrigger2(IState pInitState) {
		initialState = p"
96305b05-abee-4f6e-a936-b1b0f9b21f36,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,59.674180030822754,length,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    private final java.lang.String Value;

    /**
     * StringMatchesGuardCondition constructor comment.
     */
    public StringMatchesGuardCondition(java.lang.String newStr) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:11:09 PM)
     * @return java.lang.String
     */
    public final java.lang.String getValue();

    /**
     * Returns a String that represents the value of this object.
     * @return a string representation of the receiver
     */
    @Override
    public String toString();
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test public void test()
	* Tests that {@link StringMatchesGuardCondition#evaluate(Object)} throws an IllegalArgumentException when String not matched to guard
	*/
	@Test
	public void test() throws IllegalArgumentException {
		StringMatchesGuardCondition Guard = new StringMatchesGuardCondition(null);
		assertNull(Guard);
		String newStr = ""new test"";
		assertEquals(newStr, Guard.getValue());
		newStr = """";
		assertNull(Guard);
		GuardedAction<String, Object, IllegalArgumentException> Guard2 = Guard.newGuard(new GuardGuardReturnValue(newStr), null);
		GuardedAction<String, Object, IllegalArgumentException> Guard3 = Guard2.newGuard(new GuardGuardReturnValue(newStr), null);
		Guard2.setAction(new GuardGuardAction(GuardedAction.Action.SAFE));
		GuardedAction<String, Object, IllegalArgumentException> Guard4 = Guard2.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard5 = Guard4.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		assertNotNull(Guard4);
		GuardedAction<String, Object, IllegalArgumentException> Guard6 = Guard5.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard7 = new Guard7(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard8 = new Guard7.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		Guard.evaluate(GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr)));
		GuardedAction<String, Object, IllegalArgumentException> Guard9 = Guard8.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard10 = new Guard9.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard11 = new Guard10.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard12 = (GuardedAction<String, Object, IllegalArgumentException>)Guard11.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard13 = (GuardedAction<String, Object, IllegalArgumentException>)Guard11.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard14 = (GuardedAction<String, Object, IllegalArgumentException>)Guard12.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard15 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard16 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard17 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard18 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard19 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard20 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard21 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard22 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard23 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard24 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(newStr));
		GuardedAction<String, Object, IllegalArgumentException> Guard25 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard26 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard27 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard28 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(""new test""), new GuardGuardReturnValue(""new test""));
		GuardedAction<String, Object, IllegalArgumentException> Guard29 = (GuardedAction<String, Object, IllegalArgumentException>)GuardedAction.newGuard(new GuardGuardReturnValue(newStr), new GuardGuardReturnValue(""new test""));
		"
6650c008-86df-4fc4-abd5-c47249702698,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,36.895546674728394,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName();

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {
/**
		 * A constructor for this class.
		 * Creation date: (2/24/01 15:20:34 AM)
		 * @since 0.1
		 */
		protected EndState_0Test() {
			assertNotNull(""The EndState is null."",SINGLETON);
		}
}"
792a56d4-22eb-461e-9611-7feacc6617fb,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,38.11761283874512,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName();

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {
// Tests the toObject() method
	@Test
    public void toObject_1() {
		//System.out.println(""toObject"");
		/*
		 * Test cases
		 * Case 1.1: ToObject() can always return a fully initialized object.
		 */
		EndState test = EndState.getSingleton();
		System.out.println(test);
		assertEquals(test, Object.toObject(test));
		assertFalse (test instanceof EndState);




		// Case 1.2: Creating the object instance will not create the object
		//      If the object instance does already exist, this is the test case
		//      that should NOT be executed.
		EndState test2 = EndState.getSingleton();
		assertEquals(test2, Object.toObject(test2));
		assertFalse (test2 instanceof EndState);


	}


	@Test
    public void getName_1() {
		/*
		 * Test cases
		 * Case 1.1 a.b.c.d (a test case)
		 */
		EndState test = EndState.getSingleton();
		assertEquals(test.getName(), test.getName());
	}


	@Test
	public void setName_1() throws Exception {
		/*
		 * Constructors in classes and interfaces of interfaces.
		 * Case 1.1 a.b.c.d (a test case)
		 * @throws Exception
		 */
		EndState test = EndState.getSingleton();
		test.setName(NAME);
		assertEquals(NAME, test.getName());
		assertFalse(ENDSTATE_SINGLETON_INSTANCE == test);

		/*
		 * Test cases
		 * Case 1.2 1.3 (a test case)
		 * Case 1.3 1.3.1 (a test case)
		 * @throws Exception
		 */
		/*
		 * test1 : Case 1.1.1_1.1a.b.c (a test case)
		 */
		test = EndState.getSingleton();
		EndState test1 = EndState.getSingleton();
		//System.out.println(test);
		assertEquals(test1, test.toObject());

		/*
		 * test2 : Case 1.1.1.1.2 (a test case)
		 */
		test = EndState.getSingleton();
		assertTrue(test instanceof EndState);
		EndState tmp = (EndState) test;
		//System.out.println(tmp);
		assertEquals(test.getName(), test1.getName());
		assertFalse(test2 == tmp);
		//System.out.println(test2);

		/*
		 * test3 : Case 1.1.1.1a (a test case)
		 * @throws Exception
		 */
		/*
		 * test3.1 : Case 1.1 a.b.c (a test case)
		 * @throws Exception
		 */
		test = EndState.getSingleton();
		tmp = new EndState(ENDSTATE_SINGLETON_INSTANCE);
		//System.out.println(test);
		//System.out.println(tmp);
		assertEquals(tmp, test.toObject());

		//Case 1.1.1 aa (same name, different type)
		/*
		 * test4 : Case 1.1 ab (same name, different type)
		 */
		test = new EndState();
		tmp = new EndState(ENDSTATE_SINGLETON_INSTANCE);
		//System.out.println(test);
		//System.out.println(tmp);
		assertEquals(tmp, test.toObject());

	}
		/*
		 * Test cases
		 * //Case 1.1.2
		 * Case 1.2.1
		 * @throws Exception
		 */
		/*
		 * test5 : Case 1.1
		 */
		/*
		 * Test cases
		 * //Case 1.2
		 */
		/*
		 * test6 : Case 1.1
		 */
		/*
		 * test7 : Case 1.2
		 */

}"
c109d296-a266-4f30-8256-9cd3e1698ea2,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,42.24650239944458,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {
/**
		 * The following test method compares this
		 * object with an instance retrieved from 
		 * the {@code getSingleton()} method.
		 * @throws java.lang.NullPointerException if this
		 * object array returned from the method is null.
		 * @throws uk.me.jockmacmad.jstate.patterns.NonExistentKeyException if this
		 * object cannot be found in the {@code getSingleton()} array.
		 * @throws uk.me.jockmacmad.jstate.patterns.IllegalKeyException if the
		 * object array used as array can not be validated by the
		 * {@code Key} in the {@code getSingleton()} array.
		 * @see StartState#getSingleton()
		 */
		@Test
		public void testEquals()
		{
			assertEquals(""Error in comparing StartState"",
						getSingleton().equals(new StartState()), false);
		}

		/**
		 * The following test method is a method that determines
		 * if the instance object from the array of object matches
		 * that in the first object.
		 * @since 0.1
		 * @throws java.lang.NullPointerException if this
		 * array is null, false if the object is null or the
		 * objects are not of the same type.
		 * @throws uk.me.jockmacmad.jstate.patterns.NonExistentKeyException if
		 * this object in the array object is of a different type than the
		 * object array object.
		 * @throws uk.me.jockmacmad.jstate.patterns.IllegalKeyException
		 * if the object array used as array can not be validated by the
		 * {@code Key} in the {@code getSingleton()} array.
		 * @see java.lang.Object#equals(java.lang.Object)
		 * @see StartState#equals(java.lang.Object)
		 */
		@Test
		public void testEquals2()
		{
			assertTrue(""Error in matching a StartState instance"",
						getSingleton().equals(getClass()));
		}

		/**
		 * The following test method is a method that determines
		 * if the type of objects in the array is {@link java.lang.Object}
		 * or an instance of the array class.
		 * @since 0.1
		 * @throws java.lang.ClassCastException if the value in the array is
		 * not an object type.
		 * @throws uk.me.jockmacmad.jstate.patterns.NonExistentKeyException if
		 * the object in the array cannot be cast to the array class.
		 */
		@Test
		public void testToString()
		{
			String refExpected;

			// Test with Array containing a not-equal Object.
			refExpected = ""ERROR: Error in comparing a StartState instance"";
			assertEquals(""Incorrect toString"", refExpected,
						getSingleton().toString());
			
			// Test with Array containing an object of the Array class.
			refExpected = ""Object with toString:"";
			assertEquals(""Incorrect toString"", refExpected,
							getSingleton().toString());

		}

		/**
		 *  The following test method is a method that attempts
		 *  to convert a StartState into an Object.
		 *  It then tests if an IllegalKeyException is thrown.
		 * @since 0.1
		 * @throws java.lang.NullPointerException if this
		 * object cannot be converted into an object of the given
		 * kind.
		 * @throws uk.me.jockmacmad.jstate.patterns.NonExistentKeyException if the
		 * object cannot be converted into an object of the supplied
		 * type.
		 * @throws uk.me.jockmacmad.jstate.patterns.IllegalKeyException if a
		 * object cannot be converted to the givety.
		 * @see java.lang.Object#toString()
		 */
		@Test(expected=java.lang.IllegalKeyException.class)
		public void testToObject()
		{
			getSingleton().toObject().equals(getClass()[0]);
		}

		/**
		 * The following test method is a method that constructs the
		 * an object representing a StartState object.
		 * As this is just a test"
b7376502-e6d6-4187-a177-9cfa2691729e,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,18.815421104431152,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {

	/**
	* Creates a new StartState object, uses the private constructor to build the instance.
	* @since 0.1
	*/
	@Test
	public void testToObject() {
		try {
			new StartState();
		}
		catch(ClassCastException e) {
			fail( e.getLocalizedMessage() );
		}

	}

	/**
	* This test is just to give the {@link StartState} a happy little name space.
	* It contains the test cases.
	* It is used throughout the unit tests.
	*/
	@Test
	public void testName() throws Exception {
		assertEquals( START_STATE.getName(), START_STATE.toString() );
	}

	/**
	* These are the equals and hashcode methods specific to StartState.  
	* We need to ensure that the {@link Start} instances have identical equality and hashcode to other instances of {@link StartState}.
	* We do not test the instances themselves, as this means that they do not participate in a common set of tests.
	* @since 0.1
	*/
	@Test
	public void testEquals_EqualsObject() {
		
		// Note that START_STATE equals START_STATE with this hashcode method
		
		boolean theObjectSameHashCode = new EqualsBuilder().
				appendSuper( START_STATE, new IState(), 0 = hashCode() ).
				append( START_STATE, new IState() ).
				append( START_STATE, new IState() ).
				build().
				equals( START_STATE, new IState() );  // Make sure we did not do the equals check twice and rehash the hash by calling hashCode

		assertFalse( theObjectSameHashCode );
	}

}
"
