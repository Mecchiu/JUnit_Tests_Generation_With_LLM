ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
08420bec-0459-4b99-80b1-6331445802d6,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_0Test.java,25.810303449630737,stop,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + ""drinks/"";

    public static final String NEW_DRINK_NAME = ""Neues Getr�nk"";

    /**
     * Name of the drink
     */
    private String name;

    /**
     * Minimum price(Cent) for what the drink is sold.
     */
    private int minPrice = 70;

    /**
     * Maximum price(Cent) for what the drink is sold,
     */
    private int maxPrice = 130;

    /**
     * Current price(Cent) of the drink.
     */
    private int currentPrice = 0;

    /**
     * Start price for this drink
     */
    private int startPrice = 100;

    /**
     * Amount of drinks sold in the last iteration
     */
    private int lastSold = 0;

    /**
     * The total amount of drinks sold
     */
    private int totalSold = 0;

    /**
     * The average amount of drinks sold in an iteration. Used to calculate the new price.
     */
    private float averageAmount = 0;

    /**
     * The average price in cent
     */
    private float averagePrice = 0;

    /**
     * The average price (Cent) for what the drink is sold
     */
    private float averageSoldPrice = 0;

    /**
     * The maximum difference between two prices in one iteration
     */
    private int maxStep = 20;

    /**
     * The target amount of drinks to keep the price stable
     */
    private int targetAmount = 20;

    /**
     * The delta to calculate the step width. If the targetAmount - delta is not reached
     * the price is decreased by the maximum step. If the targetAmount + delta is reached
     * the price is increased by the maximum step.
     */
    private int deltaAmount = 15;

    /**
     * Show if the drink is used currently
     */
    private boolean used = true;

    /**
     * Key used to indicate the sell of a drink
     */
    private int key = KeyEvent.VK_F1;

    /**
     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration
     */
    private int trend = 0;

    /**
     * Keep the price and do no new calculation
     */
    private boolean keepPrice = false;

    /**
     * Set the new price directly without calculating
     */
    private int directPrice = 0;

    /**
     * Model that uses the drink
     */
    Model model;

    /**
     * *******************************************************************************************************************************************
     *  Constructor
     * *******************************************************************************************************************************************
     */
    public Drink(String name, Model model) {
    }

    public Drink(String name, Model model, int startPrice) {
    }

    /**
     * Sell the amount of drinks
     *
     * @param amount Amount of drinks sold
     */
    public synchronized void sell(int amount);

    public void setDirectPrice(int directPrice);

    /**
     * Recalculate the current price for this drink
     */
    public int recalculate();

    /**
     * Save the drink description to a XML file
     */
    public File save();

    /**
     * Load the description from a XML file
     */
    public void load();

    public String toString();

    public static String getDataHeaderString();

    public String getDataString();

    public int getMinPrice();

    public void setMinPrice(int minPrice);

    public int getMaxPrice();

    public void setMaxPrice(int maxPrice);

    public int getCurrentPrice();

    public void setCurrentPrice(int currentPrice);

    public int getLastSold();

    public void setLastSold(int lastSold);

    public int getTotalSold();

    public void setTotalSold(int totalSold);

    public float getAverageAmount();

    public void setAverageAmount(float averageAmount);

    public float getAveragePrice();

    public void setAveragePrice(float averagePrice);

    public float getAverageSoldPrice();

    public void setAverageSoldPrice(float averageSoldPrice);

    public int getMaxStep();

    public void setMaxStep(int maxStep);

    public int getTargetAmount();

    public void setTargetAmount(int targetAmount);

    public int getDeltaAmount();

    public void setDeltaAmount(int deltaAmount);

    public String getName();

    public void setName(String name);

    public int getStartPrice();

    public void setStartPrice(int startPrice);

    public boolean isUsed();

    public void setUsed(boolean used);

    public int getKey();

    public void setKey(int key);

    public int getTrend();

    public boolean isKeepPrice();

    public void setKeepPrice(boolean keepPrice);

    public int getDirectPrice();

    @Override
    public boolean equals(Object obj);
}
","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {
/**
		 * Test case run to the unit tests
		 */
		@Test
		public void test_recalculate() {
		    final Drink instance = new Drink(NEW_DRINK_NAME, Model.INSTANCE, 100);
			
		    // assert recalculate()
		    assertNotEquals(instance.recalculate(), instance);
		}
}"
4b43f7e9-48d4-44b0-aced-a413f0cff0f2,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_1Test.java,25.829588890075684,stop,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + ""drinks/"";

    public static final String NEW_DRINK_NAME = ""Neues Getr�nk"";

    /**
     * Name of the drink
     */
    private String name;

    /**
     * Minimum price(Cent) for what the drink is sold.
     */
    private int minPrice = 70;

    /**
     * Maximum price(Cent) for what the drink is sold,
     */
    private int maxPrice = 130;

    /**
     * Current price(Cent) of the drink.
     */
    private int currentPrice = 0;

    /**
     * Start price for this drink
     */
    private int startPrice = 100;

    /**
     * Amount of drinks sold in the last iteration
     */
    private int lastSold = 0;

    /**
     * The total amount of drinks sold
     */
    private int totalSold = 0;

    /**
     * The average amount of drinks sold in an iteration. Used to calculate the new price.
     */
    private float averageAmount = 0;

    /**
     * The average price in cent
     */
    private float averagePrice = 0;

    /**
     * The average price (Cent) for what the drink is sold
     */
    private float averageSoldPrice = 0;

    /**
     * The maximum difference between two prices in one iteration
     */
    private int maxStep = 20;

    /**
     * The target amount of drinks to keep the price stable
     */
    private int targetAmount = 20;

    /**
     * The delta to calculate the step width. If the targetAmount - delta is not reached
     * the price is decreased by the maximum step. If the targetAmount + delta is reached
     * the price is increased by the maximum step.
     */
    private int deltaAmount = 15;

    /**
     * Show if the drink is used currently
     */
    private boolean used = true;

    /**
     * Key used to indicate the sell of a drink
     */
    private int key = KeyEvent.VK_F1;

    /**
     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration
     */
    private int trend = 0;

    /**
     * Keep the price and do no new calculation
     */
    private boolean keepPrice = false;

    /**
     * Set the new price directly without calculating
     */
    private int directPrice = 0;

    /**
     * Model that uses the drink
     */
    Model model;

    /**
     * *******************************************************************************************************************************************
     *  Constructor
     * *******************************************************************************************************************************************
     */
    public Drink(String name, Model model) {
    }

    public Drink(String name, Model model, int startPrice) {
    }

    /**
     * Sell the amount of drinks
     *
     * @param amount Amount of drinks sold
     */
    public synchronized void sell(int amount);

    public void setDirectPrice(int directPrice);

    /**
     * Recalculate the current price for this drink
     */
    public int recalculate();

    /**
     * Save the drink description to a XML file
     */
    public File save();

    /**
     * Load the description from a XML file
     */
    public void load();

    public String toString();

    public static String getDataHeaderString();

    public String getDataString();

    public int getMinPrice();

    public void setMinPrice(int minPrice);

    public int getMaxPrice();

    public void setMaxPrice(int maxPrice);

    public int getCurrentPrice();

    public void setCurrentPrice(int currentPrice);

    public int getLastSold();

    public void setLastSold(int lastSold);

    public int getTotalSold();

    public void setTotalSold(int totalSold);

    public float getAverageAmount();

    public void setAverageAmount(float averageAmount);

    public float getAveragePrice();

    public void setAveragePrice(float averagePrice);

    public float getAverageSoldPrice();

    public void setAverageSoldPrice(float averageSoldPrice);

    public int getMaxStep();

    public void setMaxStep(int maxStep);

    public int getTargetAmount();

    public void setTargetAmount(int targetAmount);

    public int getDeltaAmount();

    public void setDeltaAmount(int deltaAmount);

    public String getName();

    public void setName(String name);

    public int getStartPrice();

    public void setStartPrice(int startPrice);

    public boolean isUsed();

    public void setUsed(boolean used);

    public int getKey();

    public void setKey(int key);

    public int getTrend();

    public boolean isKeepPrice();

    public void setKeepPrice(boolean keepPrice);

    public int getDirectPrice();

    @Override
    public boolean equals(Object obj);
}
","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {
/**
		* The unit test for saving a {@link Drink}
		*
		*/
    @Test
    public void testSave() {
        new Drink(_NEW_DRINK_NAME, Model.MODEL_SIZE, Model.MODEL_FOLDER, Model.CONFIG_FOLDER);
    }
    @Test
    public void testLoad() {
        String file = Drink.getDataString();
        new Drink(file,Model.MODEL_SIZE,Model.MODEL_FOLDER, Model.CONFIG_FOLDER);
    }
	public static void main(String[] args) {
        //To use this command:
        //java Drink_1Test
	}
}


"
61b2ab19-3427-426f-9af1-7f151797bd1c,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Settings.java,47.50070834159851,length,"// Settings.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class Settings {

    private static final String DOM_SETTINGS_ROOT = ""settings"";

    private static final String DOM_TIME_INTERVAL = ""timeInterval"";

    private static final String DOM_PRICE_STEPS = ""priceSteps"";

    private static final String DOM_CURRENCY = ""currency"";

    private static final String DOM_BACKGROUND_IMG = ""backgound"";

    private static final String DOM_STANDARD_LOGIC = ""standardLogic"";

    private static final String DOM_MESSAGE = ""message"";

    private static final String DOM_MESSAGE_SPEED = ""messageSpeed"";

    private static final String DOM_YES = ""y"";

    private static final String DOM_NO = ""n"";

    public static final String SETTINGS_FOLDER = Model.CONFIG_FOLDER + ""settings/"";

    /**
     * Time interval(seconds) in which the current prices are recalculated.
     */
    private int timeInterval = 10;

    /**
     * The steps that are available for the prices, e.g. 10, 20 or 50 cents
     */
    private int priceSteps = 10;

    /**
     * The currency symbol used
     */
    private java.lang.String currency = ""�"";

    private boolean standardLogic = true;

    private String backgroundImagePath = null;

    private String message = ""Das ist eine Standard-Nachrichtf�r das Laufband!"";

    private int messageSpeed = 10;

    /**
     * Model that uses these settings
     */
    private Model model;

    public Settings(Model m) {
    }

    /**
     * Save the settings
     */
    public File save();

    /**
     * Load the settings
     */
    public void load();

    public int getTimeInterval();

    public void setTimeInterval(int timeInterval);

    public int getPriceSteps();

    public void setPriceSteps(int priceSteps);

    public java.lang.String getCurrency();

    public void setCurrency(java.lang.String currency);

    public boolean isStandardLogic();

    public void setStandardLogic(boolean standardLogic);

    public String getBackgroundImagePath();

    public void setBackgroundImagePath(String backgroundImagePath);

    public String getMessage();

    public void setMessage(String message);

    public int getMessageSpeed();

    public void setMessageSpeed(int messageSpeed);
}
","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {
 
	@Test
	void testSettingsExists() {
		try {
			File settingsFolder = SettingsTest.class.getClassLoader().getResource(SETTINGS_FOLDER).getFile();
			File settings = new File(settingsFolder, DOM_SETTINGS_ROOT);
			if (!settings.exists()) {
				settings.mkdirs();
			}
			
			SettingsModel model = new SettingsModel(settings);
			assertNotNull(model);
			assertEquals(true, model.create());
			

		}
		catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}

	@Test
	void testSave() {
		
		SettingsModel m = new SettingsModel(new File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertNotNull(m);
		assertEquals(true, m.create());
		
		try {
			m.save();
		} catch (Exception e) {
			// nothing, so we just want to go on.
			
		}
	}
 
	@Test
	void testOpen() throws IOException {
		
	}
	

	@Test
	void testGetTimeInterval() {
		
	}
	
	@Test
	void testGetPriceSteps() {
		
		SettingsModel m = null;
		m = new SettingsModel(new File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertEquals(true, m.create());
		SettingsModel model = m;
		model.save();
		
		
		m = new SettingsModel(new File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertNotNull(model);
		assertEquals(true, model.create());
		
		
		m = new SettingsModel(""settings"");
		assertNotNull(model);
		assertEquals(true, model.create());
		
	}
	
	@Test
	void testGetCurrency() {
		SettingsModel model = new SettingsModel(new File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertNotNull(model);
		assertEquals(true, model.create());
		
		String result = model.getCurrency();
		System.out.println(""\nGet Currency: ""+result);

		assertNotEquals(false, result.equals(JT400Constants.CURRENCY));
	}

	@Test
	void testIsShowStandardLogic() {
		SettingsModel.setStandardLogic(true);
		SettingsModel m = new SettingsModel(new  File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertEquals(true, m.isShowStandardLogic());
		
		SettingsModel.setStandardLogic(false);
		SettingsModel m2 = new SettingsModel(new  File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()));
		assertEquals(false, m2.isShowStandardLogic());
		
	}
	
	@Test
	void testIsBackgoundImg() throws IOException {
		
	}

	@Test
	void testGetBackgroundImagePath() {
		Map<String, Object> root = new java.util.HashMap<String, Object>(2, 0.75f);
		root.put(""backgroundImagePath"", ""settingsbackground"");
	
		SettingsModel m = new SettingsModel(new  File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile()),root);
		m.save();
		
		File settingsDir = new File(SETTINGS_FOLDER);
		File modelDir = new File(SettingsTest.class.getResource(SETTINGS_FOLDER).getFile().substring(0, SETTINGS_FOLDER.length()));
		File modelFile = new File(modelDir, SETTINGS_FOLDER+ DOM_SETTINGS_ROOT+DOM_MESSAGE);
		File dataDir = new File(modelDir + ""/data"");
		File settings = new File(settingsDir, DOM_MESSAGE);
		File dataFile = new File(dataDir, DATA_FILE);
		File targetDir = new File(settingsDir+ ""/model"");
		File imgDir = new File(targetDir, DOM_MESSAGE_SPEED);
		File imgSettings = new File(imgDir, DOM_MESSAGE_SPEED + "".settings"");
		
		assertEquals(true, new File(settings.getParentFile(), ""data"").exists());
		assertFileHasContent(""Settings"",settings);
		assertFileHasContent(""Model"",modelFile);
		assertFileHasContent(""Background Image"",settingsFile);
		
		m.load();
		
		assertEquals(""Data File"",dataFile.getName()); //modelFile.getName());
//		assertEquals(""Data Settings"",imgSettings.getName());  
		assertEquals(settingsFile.getName(), imgSettings.get"
