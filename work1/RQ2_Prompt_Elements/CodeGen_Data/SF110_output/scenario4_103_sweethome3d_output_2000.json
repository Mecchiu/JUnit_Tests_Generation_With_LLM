[
{
    "choices": [
        {
            "text": "\n    private URLContentTest() {\n    }\n\t\t\n\t// Test case for the <code>openStream()</code> method.\n\t@Test\n\tpublic void testopenStream_1() throws MalformedURLException, IOException{\n\t\tURLContent content = new URLContent(new URL(\"http://www.eteks.ca/xmldoc/Content.java\"));\n\t\tInputStream in = content.openStream();\n\t\tString contentString = new String (getBytes(in));\n\n\t\tassertNotNull(content);\n\t\tassertNotNull(content.url);\n\t\tassertNotNull(content.isJAREntry());\n\t\tassertEquals(getJAREntry(), content.url);\n\t\tassertArrayEquals(getJAREntryName(), new String(getJAREntryContent(content)));\n\t\tassertArrayEquals(content.getURL(), getJAREntryContent(content).getURL());\n\t\tassertArrayEquals(content.getURL(), content.getJAREntryURL().toExternalForm());\n\t\tassertArrayEquals(content.getURL(), getURL(content));\n\t\tassertObjectDoesNotEquals(new URL(content.getURL()));\n\t\tassertArrayEquals(content.getURL().toExternalForm(), getURL(content));\n\t}\n\n\t// Test case for <code>isJAREntry()</code> method.\n\t@Test\n\tpublic void testisJAREntry_1() throws MalformedURLException, IOException {\n\t\tURLContent content = new URLContent(new URL(\"http://www.eteks.ca/xmldoc/Content.java\"));\n\t\tassertTrue(content.isJAREntry());\n\t}\n\n    // Test case for the <code>getURL()</code> method.\n    @Test\n\tpublic void testgetURL_1() throws MalformedURLException, IOException {\n\t\tURLContent content = new URLContent(new URL(\"http://www.eteks.ca/xmldoc/Content.java\"));\n\t\tString contentString = new String (getBytes(content.openStream()));\n\t\tcontent.getURL();\n\n\t\tassertEquals(new URL(\"http://www.eteks.ca\"), content.getURL());\n\t\tassertEquals(content, content.getURL());\n\t\tassertArrayEquals(content, new String(getBytes(content)));\n\t\tassertEquals(contentString, new String(getBytes(\"http://www.eteks.ca\")));\n\t}\n\n\t// Test case for the <code>getURLFrom()</code> method.\n\t@Test\n\tpublic void testgetURLFrom_1() throws MalformedURLException {\n\t\tURLContent content = new URLContent(new URL(\"http://www.eteks.ca/\"));\n\t\tassertEquals(content.getURL(), content.getURLFrom(new URL(content)));\n\t}\n\n\t// Test case for the <code>getURLFrom()</code> method.\n\t@Test\n\tpublic void testgetURLFrom_2() throws MalformedURLException {\n\t\tURLContent content = new URLContent(new URL(\"http://www.eteks.ca/xmldoc/Content.java\"));\n\t\tassertEquals(content.getURL(), content.getURLFrom(new URL(\"http://www.eteks.ca/xmldoc/\")));\n\t}\n\n\t@After\n\tpublic void cleanup() throws IOException {\n\t\tdeleteFile(\"test.txt\");\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "@Test\n\tpublic void testOpenStream() throws MalformedURLException, IOException {\n    \tURL url = new URL(\"some url\");\n    \tURLContent urlContent = new URLContent(url);\n    \tint expectedStream = 1;\n    \tInputStream stream = urlContent.openStream();\n    \tassertEquals(expectedStream, stream.available());\n    }\n\n  @Test\n  public void testJAREntry() throws Exception {\n    \tURL url = new URL(\"http://www.eteks.com/files/test.html\");\n    \tURLContent urlContent = new URLContent(url);\n    \tContent content = urlContent.openStream(new URLContent.JAREntry());\n    \tassertEquals(\"eteks\", content.getURL().path);\n  \t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Returns the url of the URL content class.\n\t * @throws MalformedURLException if this object can't be opened.\n\t*/\n\t@Test\n    public void testConstructor() throws MalformedURLException {\n\t\tURLContent classAsURLContent = new URLContent(URLContent.class.getURL());\n\n\t\tassertNotNull(classAsURLContent);\n\n\t\tassertEquals(URLContent.class.getName(), classAsURLContent.getClass().getName());\n    \tassertEquals(classAsURLContent.uri(), classAsURLContent.getURL().toString()); \n        assertEquals(classAsURLContent.getURL(), classAsURLContent.openStream());              \n\t}\n\t\n\t/**\n\t * Test method for {@link  URLContent#getURL()}.\n\t */\n    @Test\n    public void testGetURL() throws MalformedURLException {\n\n        URLContent classAsURLContent = new URLContent(URLContent.class.getURL());\n        \n\t\t// Check the value obtained by calling openStream()\n        URI uri = classAsURLContent.getURL();\n        \n        URL url = ClassLoader.getSystemResource(uri.getPath());\n        \n        assertNotNull(url);\n\t\t\n        // check the URI:\n        assertTrue(url.toString().matches(\"^[a-zA-Z0-9][a-zA-Z0-9\\\\-]*://\" + uri.toString()));\n\t\t\n        // Check the value obtained by calling getJAREntryURL()\n        URI jarentryUri = classAsURLContent.getJAREntryURL();\n        \n        assertEquals(\"jarentry\", jarentryUri.getPath());\n        assertEquals(\"jarentry.html\", jarentryUri.getPath().substring(0, uri.toString().length() - 1));\n        \n        // Check the value obtained by calling getJAREntryName()\n        URI jarentryNameUri = classAsURLContent.getJAREntryName();\n        \n        assertEquals(\"jarentry.html\", jarentryNameUri.getPath().substring(uri.toString().length() - 1, uri.toString().length()));\n    }\n\n    /**\n\t * Test method for {@link  URLContent#equals(Object)}.\n\t */\n    @Test    \n    public void testEquals() throws MalformedURLException {\n    \t\tURLContent classAsURLContent1 = new URLContent(URLContent.class.getURL());\n    \t\tURLContent classAsURLContent2 = new URLContent(URLContent.class);\n    \t\t\n    \t\tassertEquals(classAsURLContent1, classAsURLContent2);\n    \t\t\n    \t\tassertFalse(classAsURLContent1.equals(new URLContent(null)));       \t\t        \t\t\n    }\n    \n    \n\t/**\n\t * Test method for {@link URLContent#toString()}.\n\t */\n    @Test\n    public void testToString() throws MalformedURLException {\n    \t\tURLContent classAsURLContent1 = new URLContent(URLContent.class);\n    \t\tString result = classAsURLContent1.toString();\n    \t\t\n    \t\tURLCaptionURI uri = new URLCaptionURI(classAsURLContent1.getURL());\n\n    \t\tURL expectedURL;\n    \t\t\n    \t\tSystem.out.printf(\"Existe URI %s \\\\\\n\\t\", uri);\n    \t\texpectedURL = \"URI:\";\n    \t\t\n    \t\texpectedURL = new URL(\"http://www.eteks.com/foo\");\n    \t\t\n    \t\tSystem.out.printf(\"%s\\t, %s\\n\", expectedURL.toString(), result);\n    \t\t\n    \t\texpectedURL = new URL(\"http://example.com/foo.html#bar\");\n    \t\t\n    \t\tSystem.out.println(result);\n    \t\t\n    \t\texpectedURL = new URL(\"http://example.com/foo\");\n    \t\t\n    \t\tSystem.out.println(result);\n    \t\t\n    \t\texpectedURL = new URL(\"http://www.example.com/foo#bar\");\n    \t\t\n    \t\tSystem.out.println(result);\n\n    \t\texpectedURL = new URL(\"http://abcxyz.com/foo\");\n    \t\t\n    \t\tSystem.out.println(result);\n    \t\t\n    \t\texpectedURL = new URL(\"http://example.com/foo:bar/\");\n    \t\t\n    \t\tSystem.out.println(result);\n\n    \t\texpectedURL = new URL(\"http://example.com:123/foo/\");\n    \t\t\n    \t\tSystem.out.println(result);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n    public void testConstructor() {\n        String s1 = \"name\";\n        String s2 = \"name\" + \"  \";\n        String s3 = \"name\" + \"/\";\n        String s4 = \"name\" + \"  /\";\n\n        //\n        URLContent content = new URLContent(s1) {\n            @Override\n            public URL getURL() {\n                return s2;\n            }\n        };\n        assertEquals(s1, content.getJAREntryURL().getName());\n\n        //\n        content = new URLContent(s2) {\n            @Override\n            public URL getURL() {\n                return s3;\n            }\n        };\n        assertEquals(s2, content.getJAREntryURL().getName());\n\n        //\n        content = new URLContent(s4) {\n            @Override\n            public URL getURL() {\n                return s2;\n            }\n        };\n        assertEquals(s4, content.getJAREntryURL().getName());\n    }\n\n\n\n    /**\n    * Tests the behavior if <code>openStream()</code>\n    * throws an exception.\n    */\n    @Test\n    public void openStreamException() throws IOException {\n        URLContent content = new URLContent(new URL(\"\")) {\n            @Override\n            public InputStream openStream() throws IOException {\n                return null;\n            }\n        };\n        try {\n            content.getURL();\n        } catch (IllegalStateException e) {\n            assertTrue(true);\n        }\n        assertTrue(false);\n    }\n\n    /**\n    * Tests the behavior if <code>getURL()</code>\n    * throws an exception.\n    */\n    @Test\n    public void getURLException() throws MalformedURLException {\n        URLContent content = new URLContent(new URL(\"\")) {\n            @Override\n            public URL getURL() {\n                return null;\n            }\n        };\n        try {\n            content.getJAREntryURL();\n        } catch (Exception e) {\n            assertTrue(true);\n        }\n        assertTrue(false);\n    }\n\n\tprivate static class TesterClass {\n\t\t@Test\n\t\tpublic void testGetURL() throws IOException {\n\t\t\tURLContent content = new URLContent(new URL(\"\"));\n\t\t\tassertNull(content.getURL());\n\t\t}\n\t}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tpublic\n\tvoid testClass() {\n\t\t// Empty string or byte[]\n\t\tassertNull(new URLContent(null).openStream());\n\t\tassertNull(new URLContent(null, \"\").openStream());\n\t\tassertNull(new URLContent(null, \"\".toCharArray()).openStream());\n\t\t\n\t\tURL myURL = new URL(\"https://api.github.com/\");\n\t\tassertNotNull(myURL.openStream());\n\t\ttry {\n\t\t\tmyURL = new URL(\"https://api.github.com/j\");\n\t\t\t// MalformedURLException - malformed URL\n\t\t\t// Cannot understand that url can contain characters that are not allowed in an RFC-850 compliant URL\n\t\t\tassertAllUrlErrors(\"MalformedURL %s\", myURL.toExternalForm());\n\t\t}\n\t\tcatch(MalformedURLException e) {\n\t\t\t// OK, this was expected, so the URL is ok\n\t\t}\n\t}\n\t\n\tprivate void assertAllUrlErrors(String what, String expected, URL url) throws MalformedURLException {\n\t\t/*\n\t\t\tTry to get the stream with the correct URL\n\t\t*/\n\t\tURL parsedURL;\n\t\ttry {\n\t\t\tparsedURL = new URL(url.toString());\n\t\t} catch(NumberFormatException e) {\n\t\t\t// This won't happen anyway\n\t\t\t\n\t\t\t// Return null if the URL passed doesn't contain a URL.\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Get the stream with the correct URL\n\t\t\tInputStream stream = parsedURL.openStream();\n\t\t\tint nread = stream.read();\n\t\t\tString result = new String(new byte[]{(byte) nread});\n\t\t\tassertNull(result);\n\t\t\t\n\t\t\ttry {\n\t\t\t\t// Get the stream with the other URL\n\t\t\t\tstream = parsedURL.openStream();\n\t\t\t\tnread = stream.read();\n\t\t\t\tresult = new String(new byte[]{(byte) nread});\n\t\t\t\t\n\t\t\t} catch(IOException e) {\n\t\t\t\t// This can't happen\n\t\t\t\t\n\t\t\t}\n\t\t} catch(IOException e) {\n\t\t\t// This can't happen\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Get the stream with an URL with different scheme\n\t\t\ttry {\n\t\t\t\tparsedURL = new URL(url.toURI().toString());\n\t\t\t}\n\t\t\tcatch(MalformedURLException e) {\n\t\t\t\t// Never happens\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tcatch(MalformedURLException e) {\n\t\t\tassertNull(what);\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tassertEquals(\"Unepected result '\"+expected+\"'/'\", expected, result);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * The test method to call before each unit test case of this\n     * class.\n     * @see java.lang.Object#finalize()\n     */\n    @Test\n    public void testPublicConstructor() {\n        //System.out.println(getClass().getSimpleName() + \" - \" + this.getClass().getSimpleName() + \" - \" + getClass().getSimpleName() + \": public Constructor\");\n    }\n\n    /**\n     * The test method to call after each unit test case.\n     * @see java.lang.Object#finalize()\n     */\n    @Test\n    public void testFinalize() {\n        // System.out.println(getClass().getSimpleName() + \" - \" + this.getClass().getSimpleName() + \" - \" + getClass().getSimpleName() +\n         // \": public Finalize\");\n    }\n\n    /**\n     * Returns an empty string for content.\n     * @throws IOException if URLstream doesn't contain enough data.\n     */\n    @Test\n    public void testEmptyInputStream() throws IOException {\n        //System.out.println(getClass().getSimpleName() + \" - \" + this.getClass().getSimpleName() + \": public Test\");\n        try {\n            assertEquals(\"The expected class name is\", URLContent.class.getCanonicalName(), getClass().getCanonicalName());\n            assertEquals(\"The expected name is\", \"\", getClass().getName());\n        } catch (ClassNotFoundException ignored) {\n        }\n        \n        URL url = new URL(\"http://www.www.example.com/\");\n        InputStream in = new Content(null).openStream();\n        Content expectedContent = new Content();\n        expectedContent.setURL(url);\n\n        assertNotSame(\"The expected result is different from the actual one\", expectedContent, new Content());\n\n//        System.out.println(getTestName() + \": openStream => \" + url);\n        assertTrue(\"The URL should be correctly open\", in.ready());\n    }\n\n    /**\n     * Gets the name of the test. This method is only used in the unit test\n     * class.\n     */\n    public String getTestName() {\n        return url.toString();\n    }\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "String urlPath;\n\t\tString urlEncodedPath;\n\t\tString testPath;\n\t\tString encodingPath;\n\t\tString encodingFile;\n\t\tString encodingInputStream;\n\tpublic URLContentTest() {\n\t}\n    int length = 10;\n    int pathPrefixLength = 0;\n    int contentCountBeforeGetPath = 4;\n    int contentCountAfterGetPath = 0;\n    int contentCountBeforeGetStringPath = 0;\n    int contentCountAfterGetStringPath = 0;\n    int contentCountBeforeGetBooleanPath = 0;\n    int contentCountAfterGetBooleanPath = 0;\n    int contentCountBeforeGetBytesPath = 0;\n    int contentCountAfterGetBytesPath = 0;\n    \n    /**\n     * Test method for {@link URLContent#getURL()}.\n     */\n    @Test\n    public void testGetNullURL() {\n        String emptyString = \" \";\n        String nullString = null;\n        assertNotNull( \"getURL should not throw null\", URLContent.getURL( nullString ));\n\n        if(!URLContent.isJAREntry ( emptyString )) {\n            inputStream = null;\n            expectedPath = null;\n            expectedStringPath = null;\n            expectedBooleanPath = null;\n            expectedBytesPath = null;\n        } else {\n                        return;\n                    \n        }\n        \n    }\n\n    /**\n     * Test method for {@link URLContent#openStream()}.\n     */\n    @Test\n    public void testOpenStream() throws MalformedURLException, IOException {  \n\t\t\n\t\tassertNull ( \"Should be null\", URLContent.getURL( \"\" ));\n\t\tassertNull( \"Should be null\", URLContent.getURL( null ));\n\t\tassertNotNull ( \"Should not throw exception\", URLContent.openStream( \"\" ));\n\t\tassertNotNull( \"Should not throw exception\", URLContent.openStream( null ));\n\n        FileInputStream fileInputStream = null;\n\t\ttry {\n\t\t\tURLContent.openStream( \"\" );\n\t\t\t\n\t\t} catch ( MalformedURLException e ) {\n\t\t\tfail( \"Exception should not happen due to URL\", e );\n\t\t} catch ( IOException e ) {\n\t\t\tfail( \"Exception should not happen due to URL\", e );\n\t\t}\n\t}\n\n    /**\n     * Test method for {@link URLContent#isJAREntry()}.\n     */\n    @Test\n    public void testGetJAREntry() throws MalformedURLException, IOException {  \n        assertNull( \"Should return null\", URLContent.getURL( \"http://www.eteks.net/content/\" ));\n        assertNotNull( \"Should not throw exception\", URLContent.getLink( \"http://www.eteks.net/content/\" ));\n        assertNotNull( \"Should not throw exception\", URLContent.getByteArray( \"http://www.eteks.net/content/\" ));\n        assertNotNull( \"Should not throw exception\", URLContent.getBytes( \"http://www.eteks.net/content/\" ));\n\n        FileInputStream fileInputStream = null;\n        try {\n\t\turlPath = \"http://www.eteks.net/content/\";\n\t\turlEncodedPath = urlPath;\n\t\ttestPath = \"content/\";\n        fileInputStream = new FileInputStream(\"/temp\");\n\t\tassertNotNull( \"Should not throw exception\", URLContent.openStream( urlPath ));\n        contentCountAfterGetPath = 1;\n        expectedPath = testPath;\n\t\texpectedStringPath = testPath + \"content?url=\";\n        expectedBooleanPath = expectedStringPath + URLContent.isJAREntry(\"/temp/content/\");\n        expectedBytesPath = expectedBooleanPath + URLContent.getBytes(\"/temp/content/?url=\");\n        expectedJAREntryQueryTest = URLContent.getJAREntry(\"http://www.eteks.net/content/page?url=content/content/\");\n\n        } catch ( MalformedURLException e ) {\n           fail( \"Exception should not happen due to malformed URL\", e );\n        }catch ( IOException e ) {\n           fail( \"Exception should not happen due to malformed URL\", e );\n        }            \n            \n        }\n                \n    /**\n     * Test method for {@link URLContent#getURL()}.\n     */\n    @Test\n    public void testGetJAREntryPath() throws MalformedURLException, IOException {      \n        URLContent urlContent = URLContent.getURL( \"http://www.eteks.net/content/content/\" );\n        assertNotNull( \"Should not throw exception\", urlContent );\n        contentCountAfterGetPath = 1;\n        expectedPath = testPath + \"content/\";\n        expectedStringPath = testPath + \"content?url=\";\n        expectedBooleanPath = expectedStringPath + URLContent.isJAREntry(\"/temp/content/\");\n        expectedBytesPath = expectedBooleanPath + URLContent.getBytes(\"/temp/content/?url=\");\n        expectedJAREntryQueryTest = urlContent;\n        \n        }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Creates a new URLContentTest object.\n     */\n    public URLContentTest() {\n    }\n\n    /**\n     * Tests if the URL given at creation time is a JAR entry.\n     * @throws IOException\n     * @throws MalformedURLException\n     */\n    @Test\n    public void testURLContentIsJAREntry() throws IOException, MalformedURLException {\n         assertNotNull(\"the URL of this content is null\", new URL(\"http\", \"https?\", null));\n         assertTrue(\"the content can't be used as a JAR entry\", new URLContent(new URL(\"http:\", \"https?+?@\", null)) instanceof URLContent.JAREntry);\n    }\n    \n     /**\n     * Tests if the given URL is a JAR entry.\n     * @throws IOException\n     * @throws MalformedURLException\n     */\n    @Test\n    public void testURLContentIsJAREntry2() throws IOException, MalformedURLException {\n        assertNotNull(\"the URL of this content is null\", new URL(\"http\", \"https?+?@#\", null));\n     \n        assertTrue(\"the content can't be used as a JAR entry\", new URLContent(new URL(\"http:#%26-%21@%252F\", null)) instanceof URLContent.JAREntry);\n    }\n    \n     /**\n     * Tests if the given URL is the URL of a JAR entry.\n     * @throws IOException\n     * @throws MalformedURLException\n     */\n    @Test\n    public void testURLContentWithBase() throws IOException, MalformedURLException {\n        assertTrue(\"the content can't be used as a JAR entry\", new URLContent(new URL(\"http://file:%C1-\", null)) instanceof URLContent.JAREntry);\n    }\n    \n     /**\n     * Tests if the given URL reference can be a JAR entry.\n     */\n    @Test\n    public void testURLCanBeUsedAsJAREntry() throws IOException {\n        assertNotNull(\"the URL of this content is null\", new URL(\"http\", \"https?\", null));\n        assertTrue(\"the content can't be used as a JAR entry\", new URLContent(new URL(\"http%3A%2F%2F\", null)) instanceof URLContent.JAREntry);\n    }\n     \n    @Test\n    public void testCanCreateURLContentObject() throws IOException {\n        URL url = new URL (\"https\", null, \"\");\n        assertNull(\"the URL was not deleted\", new URLContent(url));\n        assertEquals(\"a URL instance was not returned\", url, new URLContent(url).getURL());\n    }\n\n    @Test\n    public void testGetFullURL() throws IOException {\n        URL url = new URL (null,\"file:name\");\n        assertEquals(\"the URL does not have a well-formed URL\", \"file:name\", new URLContent(url).getFullURL());\n    }\n\n    @Test\n    public void testGetContentURL() throws IOException {\n        URL url = new URL (null,\"file:/name\");\n        assertEquals(\"the URL does not have a well-formed URL\", \"file:/name\", new URLContent(url).getFullURL());\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n    * Unit test that opens the stream returned by the {@link #openStream()} method.\n    *\n    *  @throws IOException          if the URL can't be opened.\n    *  @throws MalformedURLException if URL doesn't exist.\n    */\n    @Test\n    public void testOpenStream() throws IOException, MalformedURLException {\n\t// Test without encoding\n\tURLContent content = new URLContent(new URL(\"http://www.eteks.com\"));\n\tInputStream stream = content.openStream();\n\tassertNotNull(stream);\n\tassertTrue(stream instanceof InputStream);\n\tbyte[] data = new byte[1024];\n\tint read = 0;\n\twhile((read = stream.read(data))!=-1) {\n\t    assertEquals(data, new byte[read]);\n\t}\n    }\n\n    /**\n     * Unit test that can also be used to make a file content.\n     */\n    @Test\n    public void testFile() throws MalformedURLException, IOException {\n\t// Test without encoding\n\tfinal String file = \"datafile\";\n\tURLContent content = new URLContent(new URL(\"file://\" + file));\n\tInputStream stream = content.openStream();\n\tassertNotNull(stream);\n\tassertTrue(stream instanceof InputStream);\n\tbyte[] data = new byte[1024];\n\tint read = 0;\n\twhile((read = stream.read(data))!=-1) {\n\t    assertEquals(data, new byte[read]);\n\t}\n    }\n\n}",
            "finish_reason": "stop"
        },
        {
            "text": "public URLContentTest() {\n\t\t}\n\n        @Test\n\t\tpublic void testOpenStream() throws MalformedURLException, IOException {\n            URLContent testContent =    new URLContent( new URL(\"https://www.google.com\"), \"java-http://content.open.javadoc.org\");\n            final String result = testContent.openStream().toString();\n\t\t\t// check result\n\t        assertTrue(\"Expecting text to be a URL\", result.toLowerCase().contains(\"http\"));\n\t        assertTrue(\"Expecting text to be a URL\", result.toLowerCase().contains(\"java-http\"));\n\t        assertTrue(\"Expecting text to be a URL\", result.toLowerCase().contains(\"content.open.javadoc\"));\n\t        assertTrue(\"Expecting text to be a URL\", result.toLowerCase().contains(\"java-http\"));\n            // check error result\n\t        assertFalse(\"Expecting this to fail\", testContent.exists());\n\t        try {\n\t        \ttestContent.openStream();\n\t        \tfail(\"Expecting an exception for a URL that isn't readable.\");\n\t        } catch (IOException ex) {\n\t        \t// expected\n\t        }\n        }\n        \n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "1d6d9665-3b11-4b73-b417-c0a93579fd9d",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/URLContent.java",
    "original_code": "// URLContent.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport com.eteks.sweethome3d.model.Content;\n\n/**\n * URL content for files, images...\n *\n * @author Emmanuel Puybaret\n */\npublic class URLContent implements Content {\n\n    private static final long serialVersionUID = 1L;\n\n    private URL url;\n\n    public URLContent(URL url) {\n    }\n\n    /**\n     * Returns the URL of this content.\n     */\n    public URL getURL();\n\n    /**\n     * Returns an InputStream on the URL content.\n     * @throws IOException if URL stream can't be opened.\n     */\n    public InputStream openStream() throws IOException;\n\n    /**\n     * Returns <code>true</code> if the URL stored by this content\n     * references an entry in a JAR.\n     */\n    public boolean isJAREntry();\n\n    /**\n     * Returns the URL base of a JAR entry.\n     * @throws IllegalStateException if the URL of this content\n     *                    doesn't reference an entry in a JAR.\n     */\n    public URL getJAREntryURL();\n\n    /**\n     * Returns the name of a JAR entry.\n     * If the JAR entry in the URL given at creation time was encoded in application/x-www-form-urlencoded format,\n     * this method will return it unchanged and not decoded.\n     * @throws IllegalStateException if the URL of this content\n     *                    doesn't reference an entry in a JAR URL.\n     */\n    public String getJAREntryName();\n\n    /**\n     * Returns <code>true</code> if the object in parameter is an URL content\n     * that references the same URL as this object.\n     */\n    @Override\n    public boolean equals(Object obj);\n\n    @Override\n    public int hashCode();\n}\n",
    "test_prompt": "// URLContentTest.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport com.eteks.sweethome3d.model.Content;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link URLContent}.\n* It contains one unit test case for the {@link URLContent#openStream()} method.\n*/\nclass URLContentTest {",
    "time_taken": 44.493098974227905,
    "usage": {
        "prompt_tokens": 641
    }
},
{
    "choices": [
        {
            "text": "// A class for holding testing of Operating Systems.\n        private OperatingSystem operatingSystem;\n\n\t\t// Tests\n\t\t@Test\n\t\tpublic void OperatingSystem_0_01_createTemporaryFile_CreateEmptyFile() throws IOException {\n\t\t\tFileManager.initialize(new File(System.getProperty(\"user.dir\")));\n\t\t\t// Test\n\t\t\t// 1: create a temporary folder that will be deleted\n\t\t\tFile temp = OperatingSystem_0Test.createTemporaryFile(null, null);\n\t\t\tassertTrue(temp.isDirectory() == false);\n\t\t\tassertTrue(temp.exists());\n\t\t\tassertTrue(temp.canWrite() == true);\n\t\t\tFileManager.setDefaultTemporaryFolder(temp);\n\t\t}\n\n\t\t@Test\n\t\tpublic void OperatingSystem_0_02_createTemporaryFile_CreateEmptyFileFromParent() throws IOException {\n\t\t\t// Set up test\n\t\t\tFileManager.initialize(new File(System.getProperty(\"user.dir\")));\n\t\t\t// Test\n\t\t\t// 1: create a temporary folder that will be deleted\n\t\t\tFile temp = OperatingSystem_0Test.createTemporaryFile(null, null);\n\t\t\tassertTrue(temp.isDirectory() == false);\n\t\t\tassertTrue(temp.exists());\n\t\t\tassertTrue(temp.canWrite() == true);\n\t\t\tFileManager.setDefaultTemporaryFolder(temp);\n\t\t\ttry {\n\t\t\t\tFileManager.setHome(Home.HOME_USER_0);\n\t\t\t\t// Test: failed\n\t\t\t\t// 1: create a temporary folder that will be deleted\n\t\t\t\t// 2: create a temporary file  that will be deleted\n\t\t\t\t// 3: delete the temp file\n\t\t\t\tFile temp2 = OperatingSystem_0Test.createTemporaryFile(null, null);\n\t\t\t\tassertTrue(temp2.isDirectory() == false);\n\t\t\t\tassertTrue(temp2.exists());\n\t\t\t\tassertTrue(temp2.canWrite() == true);\n\t\t\t\tFileManager.setDefaultTemporaryFolder(temp2);\n\t\t\t\t// Test: failed\n\t\t\t\t// 1: create new test folder\n\t\t\t\t// 2: create a new temp folder\n\t\t\t\t// 3: delete the temp folder\n\t\t\t\t// 4: delete the temp file\n\t\t\t\t// 5: delete the temporary folder\n\t\t\t} finally {\n\t\t\t\t// Release temporary files\n\t\t\t\tFileManager.deinitialize();\n\t\t\t}\n\t\t}\n\n\t\t@Test\n\t\tpublic void OperatingSystem_0_03_createTemporaryFile_CreatedEmptyFile() throws IOException {\n\t\t\t// Set up test\n\t\t\tFileManager.initialize(new File(System.getProperty(\"user.dir\")));\n\t\t\tFile temp = OperatingSystem_0Test.createTemporaryFile(String.valueOf(UUID.randomUUID()), null);\n\t\t\tassertTrue(temp.isFile() == false);\n\t\t\t// Test\n\t\t\t// 1: create a temporary folder that will be deleted\n\t\t\tFileManager.setDefaultTemporaryFolder(temp);\n\t\t\t// Test: succeeded\n\t\t}\n\n\t\t@Test\n\t\tpublic void OperatingSystem_0_04_createTemporaryFile_CreateEmptyFileFromEmptyParent() throws IOException {\n\t\t\t// Set up test\n\t\t\tFileManager.initialize(new File(System.getProperty(\"user.dir\")));\n\t\t\tFile temp = OperatingSystem_0Test.createTemporaryFile(null, null);\n\t\t\tassertTrue(temp.isFile() == false);\n\t\t\t// Test: failed\n\t\t\t// 1: create a temporary folder that will be deleted\n\t\t\t// 2: create a new empty temp folder\n\t\t\t// 3: create a new empty file\n\t\t\tFileManager.setDefaultTemporaryFolder(temp);\n\t\t\t// Test: failed\n\t\t\t// 1: create a new temp folder that will be deleted\n\t\t\t// 2: create a new empty file\n\t\t\tFileManager.setDefaultTemporaryFolder();\n\t\t}\n\n\t\t@Test\n\t\tpublic void OperatingSystem_0_05_createTemporaryFile_CreateFromParent() throws IOException {\n\t\t\t// Set up temp\n\t\t\tFileManager.initialize(new File(System.getProperty(\"user.dir\")));\n\t\t\tFile temp = OperatingSystem_0Test.createTemporaryFile(String.valueOf(UUID.randomUUID()), null);\n\t\t\t// Test: check if the temp file is created\n\t\t\t// 1: create a folder that will be deleted\n\t\t\tassertTrue(temp.isDirectory() == false);\n\t\t\tassertTrue(temp.exists());\n\t\t\tassertTrue(temp.canWrite() == true);\n\t\t\tFileManager.setDefaultTemporaryFolder(temp);\n\t\t\t// Test: failed\n\t\t\t// 2: create a new folder that will be deleted\n\t\t\t// 3: create a new empty file\n\t\t\tFileManager.setDefaultTemporaryFolder();\n\t\t\t// Test: failed\n\t\t\t// 2: create a new folder that will be deleted\n\t\t\t// 3: create a new file\n\t\t\tFileManager.setDefaultTemporaryFolder();\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "static {\n                // Explicitly initialize the class and resource bundle\n                // as we will be invoking the methods of this class directly\n\t\t\t\tResourceBundle r = OperatingSystem_0Test.class.getResourceBundle(null);\n\t\t\t\t((FileManager) r.get(\"fileManager\"))\n                   .putString(UUID.randomUUID().toString(), \"\");\n        }\n\n\t\t/**\n        * Test of isLinux method, of class OperatingSystem.\n        */\n        @Test\n        public void testIsLinux() throws IOException {\n            SystemInfo.instance().setMacOSX();\n            SystemInfo.instance().setLinux();\n            assertTrue(OperatingSystem.isLinux());\n        }\n        \n        /**\n        * Test of isWindows method, of class OperatingSystem.\n        */\n        @Test\n        public void testIsWindows() throws IOException {\n            SystemInfo.instance().setMacOSXLeopardOrSuperior();\n            SystemInfo.instance().setLinux();\n            assertTrue(OperatingSystem.isWindows());\n        }\n\n        /**\n        * Test of isMacOSX method, of class OperatingSystem.\n        */\n        @Test\n        public void testIsMacOSX() throws IOException {\n            SystemInfo.instance().setMacOSXLeopardOrSuperior();\n            assertFalse(\"Windows system already loaded\", OperatingSystem.isMacOSXLeopardOrSuperior());\n            SystemInfo.instance().setLinux();\n        }\n\n        /**\n        * Test of isMacOSXLeopardOrSuperior method, of class OperatingSystem.\n        */\n        @Test\n\t\tpublic void testIsMacOSXLeopardOrSuperior() throws IOException {\n            SystemInfo.instance().setMacOSXLeopardOrSuperior();\n            assertTrue(\"Windows system already loaded\", OperatingSystem.isMacOSXLeopardOrSuperior());\n        }\n\n\n        /**\n        * Test of createTemporaryFile method, of class OperatingSystem.\n        */\n        @Test\n        public void testCreateTemporaryFile() throws IOException{\n            File temp = OperatingSystem.createTemporaryFile(\"\", \"\");\n            SystemInfo.instance().setMacOSX();\n            assertNotNull(\"Could not retrieve temporary folder for Mac OS X\", temp);\n        }\n\n        /**\n        * Test of deleteTemporaryFiles method, of class OperatingSystem.\n        */\n        @Test\n        public void testDeleteTemporaryFiles(){\n            File temp = OperatingSystem.createTemporaryFile(\"\", \"\");\n            SystemInfo.instance().setMacOSX();\n            assertNotNull(\"Could not retrieve temporary folder for Mac OS X\", temp);\n            Utilities.remove(temp);\n            Utilities.remove(temp);\n        }\n \n \n\t}// OperatingSystem_0Test\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Tests if OperatingSystem.isLinux() returns <code>true</code> for linux\n\t * family.\n\t* @throws ClassNotFoundException if any of class can't be loaded\n\t*/\n\t@Test\n\tpublic void isLinux() throws ClassNotFoundException{\n\t\t\n\t\t// Getting a system property which is required\n\t\tjava.lang.System.setProperty(MacOSXFileManager.MACOSX_APPLICATION_FOLDER_PROPERTY, \"/Applications\");\n\t\t\n\t\t// Testing isLinux\n\t\tassertTrue(OperatingSystem.isLinux());\n\t}\n\t/**\n\t * Tests if OperatingSystem.isLinux() returns <code>false</code> for windows\n\t * family.\n\t* @throws ClassNotFoundException if any of class can't be loaded\n\t*/\n\t@Test\n\tpublic void isWindows() throws ClassNotFoundException{\n\t\t\n\t\t// Getting a system property which is required\n\t\tjava.lang.System.setProperty(MacOSXFileManager.MACOSX_APPLICATION_FOLDER_PROPERTY, \"/Applications\");\n\t\t\n\t\t// Testing isWinnt\n\t\tassertFalse(OperatingSystem.isWindows());\n\t}\n\n\n\t\t/**\n\t * Tests if OperatingSystem.isWindows() returns <code>true</code> for system with no JVM\n\t*/\n\t@Test\n\tpublic void isWindowsNoJVM () throws ClassNotFoundException{\n\t\t\n\t\t// Getting a system property which is required\n\t\tjava.lang.System.setProperty(MacOSXFileManager.MACOSX_APPLICATION_FOLDER_PROPERTY, \"\");\n\t\t\n\t\t// Testing isWindows\n\t\tassertTrue(OperatingSystem.isWindows());\n\t}\n\n\t\t/**\n\t * Tests if OperatingSystem.isWindows() returns <code>false</code> for system with a JDK6.4\n\t*/\n\t@Test\n\tpublic void isWindowsJDK6() throws ClassNotFoundException{\n\t\t\n\t\t// Getting a system property which is required\n\t\tjava.lang.System.setProperty(MacOSXFileManager.MACOSX_APPLICATION_FOLDER_PROPERTY, \"lib:/usr/lib/amd64\");\n\t\t\n\t\tassertFalse(OperatingSystem.isWindows());\n\t}\n\n\t/**\n\t * Tests if OperatingSystem.isWindows() returns <code>true</code> for system with an unknown JDK\n\t*/\n\t@Test\n\tpublic void isWindowsUnknownJDK() throws ClassNotFoundException{\n\t\t\n\t\t// Testing isWindows\n\t\tassertFalse(OperatingSystem.isWindows());\n\t}\n\t\n/*\n\t * (non-Javadoc)\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn \"OperatingSystem[\" +\n\t\t\t\"!isLinux() ==!!\"+isLinux()+\",\"+\n\t\t\t!isWindows()+\",\"+\n\t\t\t!isWindowsJDK()+\n\t\t\t\"]\";\n\t}\n\n\t\t/**\n\t * Tests if OperatingSystem.getTemporaryFile() returns new instance of {@link\n\t * java.io.File File} with given name which exists and have {@link\n\t * File.Path#exists() == true}.\n\t* @throws ClassNotFoundException if any of class can't be loaded\n\t*/\n\t@Test\n\tpublic void getTemporaryFile() throws ClassNotFoundException, InstantiationException {\n\t\t\n\t\ttry{\n\t\t\t// Gets the system property and checks if required name exists\n\t\t\tString name = System.getProperty(MacOSXFileManager.MACOSX_APPLICATION_FOLDER_PROPERTY);\n\n\t\t\t// The expected filename has prefix \"tmp\" and the folder can contain\n\t\t\t// files and sub-folders if exists\n\t\t\tfileExists(File.pathSeparatorChar + \"tmp\" + File.pathSeparatorChar + name, \"/tmp\");\n\t\t\tfileExists(File.pathSeparatorChar + \"/tmp\" + File.pathSeparatorChar + name, \"/tmp\");\n\t\t\tfileExists(File.pathSeparatorChar + \"tmp\" + File.pathSeparatorChar + name + File.pathSeparatorChar + \"/tmp\", \"/tmp\");\n\t\t\tfileExists(File.pathSeparatorChar + \"/tmp\" + File.pathSeparatorChar + name + File.pathSeparatorChar + \"/tmp\", \"/tmp\");\n\t\t} catch (FileManagerException e) {\n\t\t\tthrow new RuntimeException(\"Exception while creating \" + \"temporary files\", e);\n\t\t}\n\t}\n\n\t\t/**\n\t * Tests if OperatingSystem.getTemplateFile() returns new instance of {@link\n\t * java.io.File File} with given",
            "finish_reason": "length"
        },
        {
            "text": "String operatingSystem = \"\";\n\t\t\n\t\t@Test\n\t\tpublic void isLinux() {\n\t\t\tassertEquals(OperatingSystem.isLinux(), OperatingSystem.isLinux());\n\t\t\tassertNotNull(OperatingSystem.getOperatingSystem());\n        }\n\t\n        @Test\n        public void getDefaultTemporaryFolder() throws IOException {\n\t\t\tString defaultTemporaryFolder = OperatingSystem.getDefaultTemporaryFolder(false);\n\t\t\tassertNotNull(defaultTemporaryFolder);\n\t\t\tassertTrue(defaultTemporaryFolder.startsWith(File.separator));\n\t\t\tassertEquals(Path.separator, defaultTemporaryFolder.charAt(0));\n\t\t\tassertTrue(defaultTemporaryFolder.endsWith(File.separator));\n\t\t}\n\n\t\t@Test\n        public void getDefaultApplicationFolder() throws IOException {\n\t\t\tString defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder(false);\n\t\t\tassertNotNull(defaultApplicationFolder);\n\t\t\tassertTrue(defaultApplicationFolder.startsWith(File.separator));\n\t\t\tassertEquals(Path.separator, defaultApplicationFolder.charAt(0));\n\t\t\tassertTrue(defaultApplicationFolder.endsWith(File.separator));\n\t\t}\n\n        @Test\n        public void getDefaultTemporaryFolderInSystemProp() throws IOException {\n\t\t\tString envVarOperatingSystemDefaultTemporaryFolder =\n\t\t\t\t\tOperatingSystem.getEnvironmentVariable(OPERATING_SYSTEM_ENVIRONMENT_VARIABLE_PREFIX_TEMP_FOLDER);\n\t\t\tString defaultTemporaryFolder = OperatingSystem.getDefaultTemporaryFolder(false) + File.separator;\n\t\t\tassertEquals(envVarOperatingSystemDefaultTemporaryFolder, defaultTemporaryFolder);\n        }\n\n\t\t@Test\n        public void getDefaultApplicationFolderInSystemProp() throws IOException {\n\t\t\tString envVarOperatingSystemDefaultApplicationFolder =\n\t\t\t\t\tOperatingSystem.getEnvironmentVariable(OPERATING_SYSTEM_ENVIRONMENT_VARIABLE_PREFIX_APPLICATION_FOLDER);\n\t\t\tString defaultDirectory = OperatingSystem.getDefaultApplicationFolder(false);\n\t\t\tassertEquals(envVarOperatingSystemDefaultApplicationFolder, defaultDirectory);\n        }\n\n        /**\n         * Method that creates new temporary folder.\n         */\n        private final File createTemporaryFile(String prefix, String suffix) throws IOException {\n            String applicationSupportFolder = OperatingSystem.getApplicationSupportFolder();\n            assertNotNull(applicationSupportFolder);\n            assertEquals(applicationSupportFolder, OperatingSystem.getTemporaryFilePath());\n            String temporaryFolderPath = applicationSupportFolder + Path.separator + prefix + File.separator + UUID.randomUUID() + Path.separator + suffix;\n            File file = new File(temporaryFolderPath);\n            file.mkdirs();\n            return file;\n            //return createTemporaryFile(prefix, suffix);\n        }\n\n        /**\n         * Method creates new temporary folder.\n         */\n        private File createTemporaryFile(String prefix, String suffix) throws IOException {\n            assertNotNull(prefix);\n            assertNotNull(operatingSystem);\n            assertTrue(\"Operating system should not be <1\"\n                    + operatingSystem, OperatingSystem.getOperatingSystem().getClass().toString().indexOf(operatingSystem) > 0);\n            //String applicationSupportFolder = OperatingSystem.getApplicationSupportFolder();\n            //assertNotNull(applicationSupportFolder);\n            //assertEquals(applicationSupportFolder, OperatingSystem.getTemporaryFilePath());\n            //String temporaryFolderPath = applicationSupportFolder + Path.separator\n            //\t+ prefix + File.separator + UUID.randomUUID() + Path.separator + suffix;\n            //File file = new File(temporaryFolderPath);\n            //file.mkdirs();\n            return createTemporaryFile(prefix, suffix);\n        }\n\n        /**\n         * Method that deletes all the temp files created.\n         */\n        private void deleteTemporaryFiles() throws IOException {\n            FileManager.deleteFolders(0, 0x61737570);\n            Path.separator = FileManager.separator();\n        }\n    }\n\n// OperatingSystem_1Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final String TEST_MESSAGES_FOLDER = \"testMessages\";\n\n\t\tprivate static Home home = new Home(\"Test\");\n\n\n\t@Test\n\tpublic void getOperatingSystem() {\n\t\tassertEquals(\"Linux\", OperatingSystem.isLinux());\n\n\t}\n\n\t@Test\n\tpublic void createTempFolder() throws IOException {\n\t\t// Creates a temporary folder and checks the existence\n\t\tFile folder = OperatingSystem.createTemporaryFolder(true);\n\t\tassertNotNull(folder);\n\t\tassertTrue(!folder.exists());\n\t\tassertTrue(folder.mkdir());\n\t\tassertTrue(folder.isDirectory());\n\t\tassertEquals(true, folder.exists());\n\t}\n\n\t@Test\n\tpublic void deleteTempFiles() throws IOException {\n\t\t// Deletes all the temporary files created by OperatingSystem.\n\t\t// This will make Windows-only operating system to behave\n\t\t// differently, so the files won't be deleted.\n\t\t// For example Windows users can run code on the file manager\n\t\t// that access to this property is Windows specific as MacOSXFileManager\n\t\t// doesn't have permissions to write to it.\n\t\tfor (File file : OperatingSystem.getDefaultTemporaryFiles(false)) {\n\t\t\tfile.delete();\n\t\t}\n\t}\n\t/**\n\t * Returns a list of the operating system specific temporary folders\n\t * that exist and are created by Operating System.\n\t * @return a List of File objects\n\t */\n\tprivate List<File> getDefaultTemporaryFiles(boolean create) throws IOException {\n\t\tList<File> list = new ArrayList<>();\n\t\tgetDefaultTemporaryFolder(create);\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.FILE));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.APPLICATION_SUB_FOLDER, FileFileFilter.FILE));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TMP_SUB_FOLDER, FileFileFilter.FILE));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_FOLDER, FileFileFilter.FILE));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_FOLDER, FileFileFilter.FILES_AND_DIRS));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_FOLDER, FileFileFilter.FILE));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_FOLDER, FileFileFilter.DIRS));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_SUB_FOLDER, FileFileFilter.DIR_AND_SUB_SUB_FOLDER));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_SUB_SUB_FOLDER, FileFileFilter.SUB_FOLDER));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_SUB_SUB_SUB_FOLDER, FileFileFilter.FOLDER));\n\t\tlist.addAll(FileManager.getFiles(TEMPORARY_SUB_FOLDER, FileFileFilter.TEMP_SUB_SUB_SUB_SUB_SUB_SUB_FOLDER, FileFileFilter.FOLDERS));\n\n        return list;\n    }\n    /**\n\t * @todo: make it better to create an instance each time this is called.\n\t *       Should also create the message bundle\n\t */\n\tprivate ResourceBundle getMessages() {\n\t\tif (TEST_MESSAGES_FOLDER == null) {\n\t\t\tthrow new IllegalStateException(\"Messages folder is required by Operating Systems class\");\n\t\t}\n\t\tResourceBundle bundle = ResourceBundle.getBundle(\n                TEST_MESSAGES_FOLDER,\n                Thread.currentThread().getContextClassLoader()\n\t\t);\n\t\treturn bundle;\n\t}\n\n\t/**\n\t",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Test method.\n\t\t*/\n\t\t@Test\n\t\tvoid getApplicationSupportFolder() throws IOException {\n\t\t\tString expected = OperatingSystem.getDefaultApplicationFolder().getAbsolutePath();\n\t\t\tString actual = OperatingSystem_0Test.class.getResource(\"OS_0.dat\").getFile();\n\t\t\tassertEquals(expected, actual, OperatingSystem.OS_0);\n\t\t}\n\n\t\t/**\n\t\t * Tests a failed attempt at getting the path where temporary files are created.\n\t\t*/\n\t\t@Test\n\t\tvoid noTemporaryFile() throws IOException {\n\t\t\tString path = OperatingSystem_0Test.class.getResource(\"OS_1.dat\").getFile();\n\t\t\tString appPath = OperatingSystem.getDefaultApplicationFolder().getAbsolutePath();\n\t\t\tassertFalse(path.startsWith(appPath));\n\t\t}\n\n\t}\n\n// OperatingSystem_0Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static OperatingSystem instanceToClean() throws IOException {\n\t\t\tLog.message(\"Getting initial test parameters for OperatingSystem_0Test\");\n\t\t\tLog.message(\"The program will create a temporary folder to store your home data\");\n\t\t\tLog.message(\"with the default value for 'operatingSystem'\");\n\t\t\tLog.message(\"for the first time by default.\");\n\t\t\tLog.message(\"You can do just following steps just as you can :\");\n\t\t\tLog.message(\"1) set up operating system\");\n\t\t\t// 1.1 creating the base folder that will contain home data, home data, home data and the user properties folder\n\t\t\tString dirName = System.getProperty(\"user.home\");\n\t\t\tint i = dirName.lastIndexOf(\"/\");\n\t\t\tif (i >= 0) {\n\t\t\t\tLog.message(\"There exists a temporary folder '\" + dirName + \"' with the name \" + i + \".\");\n\t\t\t\tLog.message(\"You should delete it manually, this folder will be erased \");\n\t\t\t\tLog.addLogMessage(\"on the next run of OperatingSystem_0Test\");\n\t\t\t}\n\t\t\tLog.message(\"2) you have to use the first folder with the name \" + \"home data (i.e. /data) or the name Home (\" + System.getProperty(\"user.home\") + \")\");\n\t\t\tLog.message(\"3.1: set operating system\");\n\t\t\tLog.message(\"3.2: set the value of operatingSystem\");\n\t\t\tLog.message(\"3.3: use the operatingSystem with which you would want to setup your home data. You should set its value\");\n\t\t\tLog.addLogMessage(\"This is done when the first time you run OperatingSystem_0Test 1\")\n\t\t\tLog.message(\": you call initLogFolder()\");\n\t\t\tLog.message(\"5.1: set the value for operatingSystem\");\n\t\t\tLog.message(\"Not necessary since the file with the name 'operatingSystem' is a folder\");\n\t\t\tLog.message(\"6.1.1 : use the \" + System.getProperty(\"os.name\") + \" OS\");\n\t\t\tLog.message(\"6.2: set the value for operatingSystem\");\n\t\t\tLog.message(\"6.3.1 : create a new temporary folder with this os.name \" + System.getProperty(\"os.name\"));\n\t\t\tLog.message(\"6.4 : the default value of this property is the value of operatingSystem ; which is OSX or Linux\");\n\t\t\treturn new OperatingSystem(System.getProperty(\"operatingSystem\"), System.getProperty(\"programPath\"));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void test01() throws IOException,\n\t\t\t\t\t\tIOException,\n\t\t\t\t\t\tAccessControlException,\n\t\t\t\t\t\tFileExistsException,\n\t\t\t\t\t\tFileNotFoundException,\n\t\t\t\t\t\tMissingResourceException {\n//\t\t\tPermissionsException exc= null;\n//\t\t\tPermission denied= AccessControlException.class;\n//\t\t\tPermission notOwner= RuntimeException.class,\n//\t\t\t\t\t\t\t\t\tRuntimeException,\n//\t\t\t\t\t\t\t\t\tSecurityException;\n//\t\t\tFileFilter filter1;\n//\n//\t\t\ttry {\n//\n//\t\t\t\tFile parentFolder = createTemporaryFolder(true);\n//\n//\t\t\t\tFile homeFolder = new File(parentFolder, \"home\");\n//\n//\t\t\t\t// We can change folder here\n//\t\t\t\tFile dataSourceFolder1 = new File(parentFolder, \"homedata\");\n//\t\t\t\tFile newHomeFolder = new File(dataSourceFolder1, \"home\");\n//\t\t\t\tLog.message(\"Home folder created after creating home data folder :\");\n//\t\t\t\tLog.message(newHomeFolder.getAbsolutePath());\n//\t\t\t} catch (IOException | FileExistsException | FileNotFoundException | RuntimeException | SecurityException e) {\n//\t\t\t\t\n//\t\t\t\texc = e;\n//\n//\t\t\t\t// TODO write an error to log - why is logging not implemented?\n//\t\t\t\tLog.message(e.getMessage());\n//\t\t\t}\n\t\t\tassertEquals(\"Operating System_0Test initLogFolder\", \"/data\", HOME_FOLDER.getAbsolutePath());\n\t\t\t// 1.2 creating temporary folder for user properties folder (1)\n\t\t\t// with new values of operating system\n\t\t\t// with 1.2 value of OperatingSystem is OSX or Linux\n\t\t\t// with 1.4 value of OperatingSystem and 1.2 value of OperatingSystem is OSX\n\t\t\t// with 3.0 value of OperatingSystem is OSX\n\t\t\tassertTrue(\"initLogFolder\", HOME_FOLDER.exists());\n\t\t\tLog.message(Home.getFile(HOME_FOLDER).getAbsolutePath());\n\t\t\t// 1.2 create user folder\n\t\t\tassertTrue(\"createUserFolder\", HOME.getFile(HOME_FOLDER).createFolder());\n\t\t\tLog.message(Home.getFile(HOME_FOLDER).getAbsolutePath());\n\t\t\t// 1.2 create home folder\n\t\t\tassertTrue(\"createHome",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n   * Test case for {@link OperatingSystem#isLinux()}.\n   */\n\t@Test\n\tvoid testIsLinux() {\n    //System.setProperty(\"user.dir\", System.getProperty(\"user.dir\") + \"/..\");\n\n\t\ttry {\n\t        assertFalse(OperatingSystem.isLinux());\n\t    } catch (IOException ex) {\n\t    \tassertTrue(false);\n\t    }\n\t}\n\t \n  // Test case for a file\n\t\t@Test\n\t void testCreateTemporaryFile() throws IOException, MissingResourceException {\n\t \t// Create a temporary folder\n\t\tFile dir = OperatingSystem_0Test.createTemporaryFolder(false);\n\t\t// Create a temporary file in this folder\n\t\tFile file = OperatingSystem.createTemporaryFile(\"test\", \"test\");\n\t\t// Delete all the temporary files\n\t\tdeleteTemporaryFiles();\n  \n  // Find out if the created file have exist in application support folder (-32763)\n\t\tassertTrue(file.isFile());\n  \n  // Delete temporary file\n  \tfile.delete();\n  } \n  @Test\n  void testCreateTemporaryFileLeafFolder() throws IOException, MissingResourceException {\n\t \t// Create a temporary folder\n\t\tFile dir = OperatingSystem_0Test.createTemporaryFolder(false);\n\t\t// Create a temporary folder (root: 0x61737570\n\t        File tmp = OperatingSystem.createTemporaryFile(String.valueOf(UUID.randomUUID()), \"0_0_0_0_\" + String.valueOf(UUID.randomUUID()));\n\t        \n\t \tassertTrue(tmp.isFile());\n\t \t\n  // Find out if the created file have exist in application support folder (-32763)\n\t\tassertTrue(tmp.isDirectory());\n\t \n  // Delete temporary folder\t(root: 0x61737570 \t\t\t\n  \ttmp.delete();\n  } \n\t/**\n\t * Tests for {@link OperatingSystem#createTemporaryFile(String, String) createTemporaryFile}.\n\t * @throws IOException if a File cannot be written to\n\t * @throws AccessControlException\n\t */\n\t@Test\n\tvoid testCreateTemporaryFile() throws IOException, AccessControlException {\n\t\t// Create a temporary file\n\t\tFile file = OperatingSystem.createTemporaryFile(\"default\", \"file\");\n\t\t// Delete all the temporary files\n\t\tdeleteTemporaryFiles();\n\n\t\t// Check if temporary file has become writable\n\t\tassertTrue(file.exists());\n\t\tassertTrue(file.canWrite());\n \t}\n \t/**\n \t * Tests for {@link OperatingSystem#createTemporaryFile(String, String) createTemporaryFile}.\n \t * @throws IOException\n \t * @throws AccessControlException\n \t */\n\t@Test\n \tvoid testCreateTemporaryFile() throws IOException, AccessControlException {\n\t\t// Create a temporary file\n\t\tFile file = OperatingSystem.createTemporaryFile(\"default\", \"file\");\n\t\t// Delete all the temporary files\n\t\tdeleteTemporaryFiles();\n\n\t\t// Check if temporary file has become writable\n\t\tassertTrue(file.exists());\n\t\tassertTrue(file.canWrite());\n \t}\n \t\n   // Test for null argument\n   @Test\n    public void testCreateTemporaryFileWithNullString() {\n        try {\n            OperatingSystem.createTemporaryFile(\"\", null);\n            fail(\"OperatingSystem.createTemporaryFile() must throw IllegalArgumentException when the File cannot be written.\");\n        } catch (NullPointerException e) {}\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    void testLinux() {\n        assertTrue(OperatingSystem.isLinux());\n    }\n\t\n\t@Test\n\tvoid testWindows() {\n\t\tassertFalse(OperatingSystem.isWindows());\n\t}\n\t\n\t@Test\n\tvoid testMacOSX() {\n\t\tassertFalse(OperatingSystem.isMacOSX());\n\t}\n\t\n\t@Test\n\tvoid testMacOSXLeopardOrSuperior() {\n\t\tassertTrue(OperatingSystem.isMacOSXLeopardOrSuperior());\n\t}\n\t\n\t@Test\n\tpublic void testCreateTempFolder() throws IOException {\n\t\tassertNotNull(OperatingSystem.createTemporaryFile(new String[] {\"\"}, new String[] {\".tmp\"}));\n\t}\n\t\n\t@Test\n\tpublic void testGetDefaultTemporaryFolder() {\n\t\tassertNotNull(OperatingSystem.getDefaultTemporaryFolder(true));\n\t}\n\t\n\t/* @Test\n\tpublic void testGetDefaultApplicationFolder() {\n\t\tassertNotNull(OperatingSystem.getDefaultApplicationFolder(true));\n\t}\n\t*/\n\t\n\t@Test\n\tpublic void testUpdateAndDeleteTempFile() {\n\t\tassertTrue(OperatingSystem.createTemporaryFile(new String[] {\"\"}, new String[] {\".tmp\"}).exists());\n\t\t\n\t\tfinal File defaultTempFile = OperatingSystem.createTemporaryFile(new String[] {\"\"}, new String[] {\".tmp\"});\n\t\tfinal File deleteTempFile = OperatingSystem.createTemporaryFile(new String[] {\"\"}, new String[] {\".tmp\"});\n\t\t\n\t\tfinal Timer stopTimer = new Timer();\n\t\tfinal TimerTask stopTask = new StopTask();\n\t\t\n\t\tfinal Timer startTimer = new Timer();\n\t\tfinal TimerTask startTask = new StartTask();\n\t\t\n\t\tstopTask.execute();\n\t\tstopTask.cancel();\n\t\t\n\t\tstartTask.execute();\n\t\tstartTask.cancel();\n\t\t\n\t\tstopTimer.schedule(stopTask, 100);\n\t\tstartTimer.schedule(startTask, 0);\n\t\t\n\t\ttry {\n\t\t\tFileUtils.deleteFile(defaultTempFile);\n\t\t\tassertTrue(defaultTempFile.exists());\n\t\t} catch (Exception e) {\n\t\t\tthrow new AssertionError(\"Expected success; however exception thrown: \" + e);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tFileUtils.deleteFile(deleteTempFile);\n\t\t\tfail(\"Expected exception not thrown.\");\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tassertTrue(OperatingSystem.isLinux());\n\t\t}\n\n\t\tFile[] files = OperatingSystem.getDefaultTemporaryFolder(true).listFiles(new FileFilter() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean accept(File f) {\n\t\t\t\treturn f.getName().startsWith(\".tmp\");\n\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t});\n\t\tassertEquals(1, files.length);\n\t\t\t\t\n\t\tstopTask.cancel();\n\t\tstartTask.cancel();\n\t\t\n\t}\n\t\n\t// TimerTask class for the stop task\n\tprivate class StopTask implements Runnable {\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"The timer has passed.\");\n\t\t}\n\t\t\n\t}\n\t\n\t// TimerTask class for the start task\n\tprivate class StartTask implements Runnable {\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"The timer has passed.\");\n\t\t}\n\t\t\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate static final String EDITOR_SUB_FOLDER;\n\n\tprivate static final String APPLICATION_SUB_FOLDER;\n\n\tprivate static final String TEMPORARY_SUB_FOLDER;\n\n\tprivate static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n\tstatic {\n\t\t// Load the System Property that stores the temp folder string as name of a file\n\t\tResourceBundle bundle = ResourceBundle.getBundle(\"org.junit.jupiter.api.Test.Resources\");\n\t\tString tempFolderString = bundle.getString(\"TEMP_PATH\");\n\n\t\tif (tempFolderString == null) {\n\t\t\tthrow new MissingResourceException(\"You must set a temp folder in the system property\", \"TEMP_PATH\", \"org.junit.jupiter.api.Test\");\n\t\t}\n\n\t\t// Use a temporary folder with the default name\n\t\tString tempDirectory = FileManager.getTempFolderDir();\n\t\tFile folder = new File(tempFolderString);\n\n\t\t// Check if we have a unique temporary folder\n\t\tif (!folder.exists() && folder.mkdirs() && folder.isDirectory()) {\n            Log.verbose(\"Got an unique temporary directory. Creating one.\", \"test-root\");\n\t\t\t// Store the temp folder in the System properties and create a unique temporary folder\n\t\t\tString tempFolderString2 = System.getProperty(\"TEMP_PATH\");\n\t\t\tif (tempFolderString2!= null) {\n            Log.verbose(\"Got a temp folder, calling System.setProperty.\", \"temp-folder\");\n\t\t\t\t// Load the System Property that stores the temp folder name as name of a file\n\t\t\t\tResourceBundle bundle1 = ResourceBundle.getBundle(\"org.junit.jupiter.api.Test.Resources\");\n\t\t\t\ttempFolder = new File((String)bundle1.getString(\"TEMPDIR\"));\n\t\t\t\t// Call the setProperty method with the real temp folder name\n                FileManager.setProperty(tempFolder, \"TEMP_PATH\", tempFolderString2);\n\t\t\t}\n\t\t\t// Create and launch the file manager\n\t\t\tif (tempFolder.exists()) {\n            Log.verbose(\"Got a unique folder, creating a valid temporary folder.\", \"test-root\");\n\t\t\t\t// Create and launch the File Manager client\n\t\t\t\tFileManager.launchApplication(tempFolder.getAbsolutePath(), true);\n            Log.verbose(\"File manager started  in\", \"test-root\");\n\t\t\t} else {\n                throw new IOException(\"The temporary folder was not created or already exists.\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IOException(\"Could not create a unique temporary folder\");\n\t\t}\n\t\tEDITOR_SUB_FOLDER = FileManager.getUniqueEditorDir().getAbsolutePath();\n\t\tAPPLICATION_SUB_FOLDER = FileManager.getUniqueApplicationDir().getAbsolutePath();\n\t\tTEMPORARY_SUB_FOLDER = FileManager.getUniqueTempDir(true).getAbsolutePath();\n\t\tTEMPORARY_SESSION_SUB_FOLDER = FileManager.getUniqueTempDir(true).getAbsolutePath();\n\t}\n\n\t@Test\n    public void testIsLinux() throws IOException {\n        Log.verbose(\"Is a Linux system\");\n        assertFalse(Runtime.getRuntime().online());\n\n        //Check that we find the file Manager class in classpath\n        FileManager fileManager = new FileManager();\n        fileManager.launchApplication(\"com.apple.eio.FileManager\", true);\n        assertNotNull(fileManager);\n\n        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"darwin\")) {\n            Log.verbose(\"Testing os.name=darwin\");\n            assertTrue(System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac os x\"));\n\n            //Checking the Operating system name of the file manager\n            File fileManager2 = new File(fileManager.getTempDirectoryDir().getAbsolutePath() + File.separator + \"tst_\" + getSubFolderName() + File.separator + TEMPORARY_SUB_FOLDER + \".properties\");\n            fileManager2.delete();\n            assertTrue(\"FileManager with darwin is empty\", fileManager2.exists());\n            assertEquals(OsType.DARWIN.toString(),\n                    fileManager2.getFileSystemType());\n\n            // Check that temp folder of darwin is the valid temporary folder of the file manager\n            String darwinTempPath = FileManager.getUniqueTempDir(true).getAbsolutePath();\n            assertTrue(darwinTempPath.startsWith(EDITOR_SUB_FOLDER));\n\n            // Check the folder has been created or not\n            ",
            "finish_reason": "length"
        }
    ],
    "id": "86f4d8f4-5a98-4b5d-b3e1-51dbf057d631",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_0Test.java",
    "original_code": "// OperatingSystem.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n *\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns <code>true</code> if current operating is Linux.\n     */\n    public static boolean isLinux();\n\n    /**\n     * Returns <code>true</code> if current operating is Windows.\n     */\n    public static boolean isWindows();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior();\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn't be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException;\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles();\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException;\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException;\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * <code>os.name</code> System property is <code>Mac OS X</code>.\n     * This class requires some classes of <code>com.apple.eio</code> package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "test_prompt": "// OperatingSystem_0Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#isLinux()} method.\n*/\nclass OperatingSystem_0Test {",
    "time_taken": 44.14009642601013,
    "usage": {
        "prompt_tokens": 960
    }
},
{
    "choices": [
        {
            "text": "\n  @Test\n\tpublic void checkOperatingSystemTest1() {\n    File originalApplicationManifest;\n    try {\n      File applicationManifestSubFolder = FileManager.findFolder(\"ApplicationManifest\", 'F');\n      originalApplicationManifest = FileManager.findResource(\"ApplicationManifest\", applicationManifestSubFolder);\n    } catch (IOException e) {\n      fail(\"Can't find applicationManifest in folder \" + (fileToString(applicationManifestSubFolder)));\n    }\n    \n    File temporaryDirectory;\n    try {\n      temporaryDirectory = FileManager.findTempFile(\"\", 'M');\n    } catch (IOException e) {\n      fail(\"Can't find temporary directory \" + (fileToString(temporaryDirectory)));\n    }\n    \n    try {\n      File temporaryFolder = FileManager.findTempFile(\"\", 'F');\n    } catch (IOException e) {\n      fail(\"Can't find temporary folder  \\\"\" + (fileToString(temporaryFolder)) + \"\\\"\");\n    }\n\t\t\n        File applicationFile = new File(\"/Volumes/Applications/Appleseed 3.0\");\n\t\t\n      assertTrue(FileManager.isFileOrDir(applicationFile));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/LinkedModules\")));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/Resources\")));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/Frameworks\")));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/MacOS\")));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/Caches\")));\n      assertTrue(FileManager.isFileOrDir(new File(applicationFile + \"/Contents/Libraries\")));\n      \n      File subFolder = new File(applicationFile.getParentFile(), \"Contents/Frameworks\");\n      assertTrue(FileManager.isFileOrDir(subFolder));\n      assertTrue(FileManager.isFileOrDir(new File(subFolder + \"/Contents/Info.plist\")));\n      assertTrue(FileManager.isFileOrDir(new File(temporaryDirectory + \"/Contents/Frameworks/PkgConfig\")));\n      assertTrue(FileManager.isFileOrDir(new File(temporaryDirectory + \"/Contents/Frameworks/PkgConfig.bundle/\" + UUID.randomUUID().toString())));\n      \n      File managerDirectory = new File(\"/Volumes/Applications/Application Support\");\n      File root, folder;\n      try {\n        managerDirectory.listFiles(new FileFilter() {\n            public boolean accept(File pathname) {\n                if (pathname.getAbsolutePath().endsWith((\".jar\") + File.separator)) {\n                  folder = pathname;\n                }\n                return true;\n            }\n        });\n      } catch (IOException e) {\n        fail(\"Directory does not exist:\" + (managerDirectory!= null? managerDirectory.getCanonicalPath() : \"null\"));\n      }}\n\t\t\n  @Test\n  public void checkOperatingSystemTest2() {\n    Path path = new Path(originalApplicationManifest.getCanonicalPath());\n    File currentTempFile = null;\n\n    try {\n      FileManager.setTempFile(path);\n    } catch (IOException e) {\n      System.out.println(\"Error while setting application manifest path\");\n    }\n\n    try {\n      FileManager.recycleTempFile();\n    } catch (IOException e) {\n      System.out.println(\"Error while recycling temporary directory\");\n    }\n\n    // This method should be called only once on the program execution\n    assertTrue(isLinux());\n\n  }\n\n\t@Test\n\tpublic void checkOperatingSystemTest3() {\n\t\tString originalApplicationManifestFile = UUID.randomUUID().toString() + \".manifest\";\n\t\tResourceBundle resourceBundle = ResourceBundle\n\t\t\t\t.getBundle(\"/Volumes/Library/Application Support/Appleseed 3.0/org.appleseed.devel/ApplicationManifest.properties\");\n\n\t\tFile originalApplicationManifest = new File(originalApplicationManifestFile);\n\t\tFile actualDefaultApplicationManifest = FileManager.findResource(\"ApplicationManifest\",\n\t\t\t\toriginalApplicationManifest.getParentFile());\n\n\t\tassertEquals(originalApplicationManifest.getCanonicalPath(),\n\t\t\t\tactualDefaultApplicationManifest.getCanonicalPath());\n\n\t\tString newDirectory;\n\t\ttry {\n\t\t\tnew Directory(resourceBundle, \"newPath\");\n\t\t} catch (IOException e) {\n\t\t\tfail(\"Can't setup directory \" + (",
            "finish_reason": "length"
        },
        {
            "text": "\n    private OperatingSystem_1Test() {\n    }\n\n    @Test\n    public void TestOSLinux() throws MissingResourceException, SecurityException, IOException {\n        assertNotNull(System.getProperty(\"os.name\"));\n        assertFalse(\"os.name property can't be found\", System.getProperty(\"os.name\").isEmpty());\n        assertNotNull(System.getProperty(\"os.version\"));\n        assertFalse(\"os.version property can't be found\", System.getProperty(\"os.ver\").isEmpty());\n    }\n\n    private void assertFalse(String failCondition, Object target) {\n        assertFalse(failCondition, target == null);\n        assertFalse(failCondition, target.equals(target));\n        assertTrue(failCondition,!target.equals(target));\n    }\n\n    private void assertNotNull(String failCondition, Object target) {\n        assertTrue(\"Failure condition must be present in case of null and with a target object.\", failCondition.isPresent());\n        assertNotNull(failureDescription(failureCondition, target));\n        failureDescription(\"Expected failure condition but couldn't find it.\", target);\n    }\n\n    private String failureDescription(String condition, Object target) {\n        return \"Could not check if operating system \"\n                + (condition!= null? condition : \"unexpectedly failed\")\n                + \":\\n expected: \"\n                + target.toString()\n                + \"\\n and\\n actual: \"\n                + target.toString();\n    }\n\n    /**\n     * Test condition: OperatingSystem_isWindows() == OperatingSystem.Windows\n     */\n    @Test\n    public void TestOSWindows() throws IOException {\n        File tempFolder1 = OperatingSystem.getDefaultTemporaryFolder(false);\n        File tempFolder2 = OperatingSystem.getDefaultTemporaryFolder(true);\n        File tempFolder3 = OperatingSystem.getDefaultTemporaryFolder(true);\n        File tempFolder4 = OperatingSystem.getDefaultTemporaryFolder(true);\n\n        File resultFile1 = OperatingSystem.createTemporaryFile(tempFolder1, \".txt\");\n        File resultFile2 = OperatingSystem.createTemporaryFile(tempFolder2, \".txt\");\n        File resultFile3 = OperatingSystem.createTemporaryFile(tempFolder3, \".txt\");\n        File resultFile4 = OperatingSystem.createTemporaryFile(tempFolder4, \".txt\");\n        File tempFolder1result = OperatingSystem.createTemporaryFolder(true);\n\n        assertEquals(tempFolder1.toString(), resultFile1.toString());\n        assertEquals(tempFolder2.toString(), resultFile2.toString());\n        assertEquals(tempFolder3.toString(), resultFile3.toString());\n        assertEquals(tempFolder4.toString(), resultFile4.toString());\n\n        tempFolder1result.delete();\n        assertNull(tempFolder1result);\n        tempFolder1.delete();\n        tempFolder2.delete();\n        tempFolder3.delete();\n        tempFolder4.delete();\n        tempFolder1result = OperatingSystem.createTemporaryFolder(false);\n        tempFolder1result.delete();\n        tempFolder2result = OperatingSystem.createTemporaryFolder(true);\n        tempFolder2result.delete();\n        tempFolder3result = OperatingSystem.createTemporaryFolder(true);\n        tempFolder3result.delete();\n        tempFolder4result = OperatingSystem.createTemporaryFolder(true);\n        tempFolder4result.delete();\n\n\n        assertNull(tempFolder1);\n        assertNotNull(tempFolder2);\n        assertNotNull(tempFolder3);\n        assertNotNull(tempFolder4);\n    }\n\n    /**\n     * Test condition: OperatingSystem_getPlatformFoldersForProcessing() == OperatingSystem_MacOSX\n     */\n    @Test\n    public void TestOSMacOSX() throws MissingResourceException, FileNotFoundException, IOException {\n        File tempFolder1 = OperatingSystem.getDefaultTemporaryFolder(false);\n        File tempFolder2 = OperatingSysem.getMacOSXApplicationFolder();\n        File tempFolder3 = OperatingSystem.getDefaultTemporaryFolder(true);\n        File tempFolder4 = OperatingSystem.getDefaultTemporaryFolder(true);\n\n        File resultFile1 = OperatingSystem.createTemporaryFile(tempFolder1, \".txt\");\n        File resultFile2 = OperatingSystem.createTemporaryFile(tempFolder2, \".txt\");\n        File resultFile3 = OperatingSystem.createTemporaryFile(tempFolder3, \".txt\");\n        File resultFile4 = OperatingSystem.createTemporaryFile(tempFolder4, \".txt\");\n        File tempFolder1result = OperatingSystem.createTemporaryFolder(true);\n\n        assertEquals(tempFolder1.toString(),",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test public void isWindows() throws IOException {\n\t\t\n        // Mac OS X 10.4 or superior\n        assertNotNull(OperatingSystem.isWindows());\n        // Mac OS X 10.3\n        assertNotNull(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Mac OS X 10.2\n        assertNull(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Mac OS X 10.1\n        assertNull(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Mac OS X 10.0\n        assertNotNull(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Mac OS X 10.1\n        assertNotNull(OperatingSystem.isMacOSXLeopardOrSuperior());\n        \n    }\n}\n\n// OperatingSystem_2Test.java\npublic class OperatingSystem_2Test {\n\t\t\n    /**\n     * Test if user is a machine running OSX 10.4 or superior.\n     */\n    @Test\n    public void isWindowsLeopardOrSuperior() {\n        assertTrue(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Is Windows 10.4.5\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Is Windows 10.5\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Should not be Windows.\n        assertFalse(OperatingSystem_1Test.isWindows());\n        // Should not be Mac OS X 11.2 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n        // Should not be Mac OS X 10.4 or superior\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n    }\n    \n    /**\n     * Test if user is a machine running OSX 10.3 or superior.\n     */\n    @Test\n    public void isWindowsLeopardOrSuperior() {\n        assertTrue(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Is Windows 10.3\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Is Windows 10.33\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Should not be Windows.\n        assertFalse(OperatingSystem_1Test.isWindows());\n        // Should not be Mac OS X 10.5 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n        // Should not be Mac OS X 10.3\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n        // Should not be Mac OS X 10.2 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n    }\n    \n    /**\n     * Test if user is a machine running OSX 10.2 or superior.\n     */\n    @Test\n    public void isWindowsLeopardOrSuperior() {\n        assertTrue(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Is Windows 10.2\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Is Windows 10.21\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Should not be Windows.\n        assertFalse(OperatingSystem_1Test.isWindows());\n        // Should not be Mac OS X 10.1 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n        // Should not be Mac OS X 10.2\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n    }\n    \n    /**\n     * Test if user is a machine running OSX 10.1 or superior.\n     */\n    @Test\n    public void isWindowsLeopardOrSuperior() {\n        assertTrue(OperatingSystem.isWindowsLeopardOrSuperior());\n        // Is Windows 10.1\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Is Windows 10.1.1\n        assertTrue(OperatingSystem_1Test.isWindows());\n        // Should not be Windows.\n        assertFalse(OperatingSystem_1Test.isWindows());\n        // Should not be Mac OS X 10.0 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n        // Should not be Mac OS X 10.1 or superior.\n        assertFalse(OperatingSystem_1Test.isMacOSXLeopardOrSuperior());\n    }\n    \n    /**\n     * Test if user is a machine running OSX 10.0 or superior.\n     */\n    @Test",
            "finish_reason": "length"
        },
        {
            "text": "@Test\n    public void isWindows() throws IOException, MissingResourceException, AccessControlException, IllegalStateException, InterruptedException {\n        FileManager fileManager = new FileManager(\"~/data/TEST_OSX_FILES\");\n        FileManager systemFolder = new FileManager(\"/Users/user/Local Workspaces/TEST_OSX_FILES\");\n\n        FileSystem fsystem = new FileSystem(fileManager);\n        FileManager dirsManager = new FileManager(\"/Users/user/Local Workspaces/TEST_OSX_FOLDERS\");\n\n        // Test if operating system is on Windows\n        Home home = new Home(\"/home/user\", \"user\", fsystem);\n        assertTrue(fileManager.exists(\"/home/user/Library\"));\n\n        boolean wasEnabled = System.getProperty(\"os.name\").contains(\"Mac\");\n        assertTrue(wasEnabled);\n\n        // Start time and time for test should not overlap\n        Timer timer = new Timer();\n        final TimerTask task = new TimerTask() {\n            public void run() {\n                System.exit(0);\n            }\n        };\n        task.scheduleAtFixedRate(task, 0L, 1L);\n\n        // The test is a part of the automated test suite that need to be automated\n        // by the automated test suite framework.\n\t// It was created to test the OSX support of system folders when\n\t// the test execution is initiated by the JVM, so we can test\n\t// them ourselves.\n\n        timer.schedule(task, 1L, 2L);\n\n        // Verify if operating system is on Windows with the given system folder\n        home.setUserFolder(dirsManager.getFolder(\"Folders\", \"User\"));\n        assertEquals(System.getProperty(\"os.name\"), \"Linux\");  // Linux by default\n        assertEquals(false, isLinux());\n    }\n    \n    /**\n     * Return the file object manager used for testing.\n     */\n    FileManager getFileManager(String file) throws IOException {\n        return new FileManager(file, \"/home/user\", \"user\", \"TEST_OSX_FILES\");\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid isWindows() throws IOException {\n\t\tassertTrue(OperatingSystem.isWindows());\n\t}\n\n\t@Test\n\tvoid isLinux() throws IOException {\n\t\tassertTrue(OperatingSystem.isLinux());\n\t}\n\n\t@Test\n\tvoid isMacOSX() throws IOException {\n\t\tassertTrue(OperatingSystem.isMacOSX());\n\t}\n\n}\n\n// OperatingSystem_2Test.java\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#isWindows()} method.\n*/\nfinal class OperatingSystem_2Test {\n\n\t@Test\n\tvoid isWindows() throws IOException {\n\t\tassertTrue(OperatingSystem.isWindows());\n\t}\n\n\t@Test\n\tvoid isLinux() throws IOException {\n\t\tassertTrue(OperatingSystem.isLinux());\n\t}\n\n\t@Test\n\tvoid isMacOSX() throws IOException {\n\t\tassertTrue(OperatingSystem.isMacOSX());\n\t}\n\n\t@Test\n\tvoid isUnix() throws IOException {\n\t\tassertTrue(OperatingSystem.isUnix());\n\t}\n\n}\n\n// OperatingSystem_3Test.java\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#deleteTemporaryFiles()} method.\n* Use of this method may lead to a resource leak where other test cases won't work.\n*/\nfinal class OperatingSystem_3Test {\n\n\t@Test\n\tvoid deleteTemporaryFiles() throws IOException {\n\t\tassertTrue(OperatingSystem.deleteTemporaryFiles());\n\t\tFile file1 = OperatingSystem.getDefaultTemporaryFolder(false);\n\t\tassertTrue(file1.exists());\n\t\tassertTrue(file1.isDirectory()); // This is only valid in Java1.4 and above\n\t\tassertTrue(OperatingSystem.getDefaultApplicationFolder()!= OperatingSystem.getDefaultTemporaryFolder(false)/* || OperatingSystem.getDefaultTemporaryFolder(true) == OperatingSystem.getDefaultTemporaryFolder(false)*/);\n\t}\n\n}\n\npublic class OperatingSystem_1Test extends OperatingSystem_2Test {\n\n\t@Test\n\tpublic void testGetDefaultTemporaryFolder() throws IOException {\n\t\tassertNotNull(OperatingSystem.getDefaultTemporaryFolder(false));\n\t\tFile folder = OperatingSystem.getDefaultTemporaryFolder(false);\n\t\tassertFalse(folder.exists());\n\t\tassertTrue(folder.mkdir());\n\t}\n\n\t@Test\n\tpublic void deleteTemporaryFiles() throws IOException {\n\t\tassertTrue(OperatingSystem.deleteTemporaryFiles());\n\t\tFile file1 = OperatingSystem.getDefaultTemporaryFolder(false);\n\t\tassertTrue(file1.exists());\n\t\tassertTrue(file1.isDirectory()); // This is only valid in Java1.4 and above\n\t\tassertTrue(OperatingSystem.getDefaultApplicationFolder()!= OperatingSystem.getDefaultTemporaryFolder(false)/* || OperatingSystem.getDefaultTemporaryFolder(true) == OperatingSystem.getDefaultTemporaryFolder(false)*/);\n\t}\n}\n\n/**\n* Unit test for {@link OperatingSystem#FileManager}.\n* Use of this method may lead to a resource leakage as it depends on the\n* Java1.4 or higher environments.\n*/\nclass OperatingSystem_3Test {\n\t\n\t@Test\n\tvoid FileManager_defaultsToRootFolder() throws IOException {\n\t\tFileManager.getFileManager().setDefaultDirectory(\"/\");\n\t\tassertTrue(OperatingSystem.FileManager.getFileManager().getDefaultDirectory().equals(\"/\"));\n\t}\n\t\n\t@Test\n\tvoid FileManager_withTemporaryFolder() throws IOException {\n\t\tFileManager.getFileManager().setDefaultDirectory(System.getProperty(\"java.io.tmpdir\")/* + \"/tempidir/\"*/);\n\t\tFileManager.getFileManager().setDefaultDirectory(\"/home\")/* /home/meltzer/etcdir \"*/;\n\t\tassertEquals(\"/home/meltzer/etcdir/home\", OperatingSystem.FileManager.getFileManager().getDefaultDirectory());\n\t}\n\t\n\t@Test(expected = IOException.class)\n\tpublic void FileManager_withTemporaryFolder_doesNotThrowException() throws IOException {\n\t\tFileManager.getFileManager().setDefaultDirectory(\"/home/a/usr/t/etc\");\n\t}\n\t\n\t// -----------------------------------------------------------------------\n\t\t\n}\n\n// OperatingSystem_4Test.java\n\n/**\n* Test class of {@link OperatingSystem}.\n* Use of this method may lead to a resource leak as it depends on the\n* Java1.4 or higher environments.",
            "finish_reason": "length"
        },
        {
            "text": "\n\t\tstatic String TEST_APP_FOLDER = \"test-app\";\n\t\t\n\t\t@Test\n\t\tpublic void isWindows_returnsTrue() throws IOException, IOException, AccessControlException {\n\t\t\n\t\t\tFile workingDir =  new File(\"/Volumes/DataDir/home\");\n\t\t\tFile tempWorkingDir =  new File(\"/Volumes/DataDir/temp\");\n\t\t\tFile tempTempDirectory =  new File (tempWorkingDir, TEST_APP_FOLDER + \"/test/\" + \"temp\");\n\t\t\tFile tempSessionDirectory =  new File(tempTempDirectory, TEST_APP_FOLDER + \"/test/session\");\n\t\t\t\n        // Set the temporary working folder\n        FileManager.setCurrentWorkingFolder(new File(tempWorkingDir, \"home\"));\n        FileManager.setCurrentSessionWorkingDirectory(new File(tempTempDirectory, TEST_APP_FOLDER + \"/test/session\"));\n        \n        FileManager.setUserSessionName(\"temporary\");\n        FileManager.setUserSessionID(new UUID(0,0));\n        FileManager.setUserSessionTypeName(new UUID(0,0));\n        \n\t\t    try {\n\t\t\t\tif (!isWindows()) {\n\t\t\t\t\tSystem.exit();\n\t\t\t\t} else {\n\t\t\t\t\tFile workingFile = (File) FileManager.findFolder(Home.ACTUAL_POD_HOME, 0x61737570);\n\t\t\t\t\tSystem.err.println(\"TEST_APP_FOLDER = \"+ TEST_APP_FOLDER);\n\t\t\t\t\tassertTrue(workingFile.getAbsolutePath().endsWith(\"home\"));\n\t\t\t\t}\n\t\t    }\n\t\t    catch (AccessControlException ex) {\n\t\t        System.err.print(\"Error in access control\");\n\t\t        ex.printStackTrace(System.err);\n\t\t\t    assertTrue(false);\n\t\t    }\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final String TEMP_FOLDER = \"tmp-\";\n    private static final String TEMP_SUB_FOLDER = TEMP_FOLDER + UUID.randomUUID() + \"-\";\n    private static final String APPLICATION_FOLDER = TEMP_FOLDER + UUID.randomUUID() + \"-\";\n    private static final String TEMPORARY_SUB_FOLDER = TEMP_SUB_FOLDER + UUID.randomUUID() + \"-\";\n    private static final String TEMPORARY_SESSION_SUB_FOLDER = TEMPORARY_SUB_FOLDER + UUID.randomUUID() + \"-\";\n    //private static final String TEMP_CURR_FOLDER = \"cur-\";\n\n\t\t\n    @Test\n    public void testIsWindows() throws IOException {\n        File rootFolder = new File(System.getProperty(\"user.home\"));\n        rootFolder.mkdirs();\n        assertTrue(isWindows());        \n    }\n    \n    @Test\n    public void testIsLinux() throws IOException {\n        FileManager rootFolder = new FileManager();\n        File temporaryFolder = createTemporaryFile(null, \"\");\n        rootFolder.setTempFolder(new File(temporaryFolder.getPath() + TEMP_FOLDER));\n        rootFolder.setApplicationFolder(new File(APPLICATION_FOLDER));\n        rootFolder.setApplicationFolder(null);\n        rootFolder.setTempFolder(rootFolder.getTempFolder());\n\n        assertFalse(isWindows());\n\n        File subFolder = null;\n        try {\n            FileManager subFolderManager = new FileManager();\n            subFolder = new File(rootFolder.subFolder(new File(SubfolderNames.TEMP_SUB_FOLDER).toString()).getPath() + \"/\");\n            subFolderManager.setTempFolder(subFolder.getPath() + TEMP_SUB_FOLDER);\n            subFolderManager.setApplicationFolder(new File(ApplicationFolderNames.APPLICATION_FOLDER).toString());\n        } catch (IllegalArgumentException e) {\n            assertTrue(false);\n        }\n    }\n    \n    private static boolean isWindows() {\n        return false;\n    }\n    \n    private static boolean noSessionFolderCreation(){\n        return true;\n    }\n\n    private void createTempFolder(String subFolderPrefix) throws IOException {\n        File tempFolder = null;\n\n        String filename = subFolderPrefix.isEmpty()? \n                \"TemporaryFolder\" : subFolderPrefix + TEMP_FOLDER;\n\n        try {\n            tempFolder = createTemporaryFile(filename, \"\");\n        } catch (IOException e) {\n            throw new IOException(\"Create temporary folder failed.\", e);\n        }\n   \n        if (noSessionFolderCreation()){   \n            assertFalse(tempFolder.exists());  \n        } else {\n            assertTrue(tempFolder.exists()); \n        }\n    }\n\n    private static File createTemporaryFile(String filename, String prefix) throws IOException {\n        String filePath = prefix.isEmpty()? filename : prefix + filename;\n        FileManager fileManager = new FileManager();\n        \n        try {\n            fileManager.setEnvironmentVariable(TEMPORARY_FOLDER, tempFolder.getPath());\n            return fileManager.createFile(filePath.replace(\"\\\\\", \"/\"));                \n        } catch (MissingResourceException e) {\n            assertEquals(File.class, fileManager.getClass());\n            \n            // check if we are not allowed to try to read from file manager\n            try {\n                fileManager.getFile(filename, ResourceBundle.getBundle(\"com.eteks.sweethome3d.resource.FileManager\"));\n                throw new RuntimeException(\"This file should not be readable from Mac OS X at this time\");\n            } catch (IOException err) {\n                // expected\n            }\n        }\n        \n        return null;\n    }\n\n    private void createTempFolderAndSessionFolder(String subFolderPrefix) throws IOException {\n        String filePath = subFolderPrefix.isEmpty()? filename : subFolderPrefix + filename;\n        FileManager parentFolderManager = new FileManager();\n        \n        try {\n            FileManager tempFolder = parentFolderManager.subFolder(parentFolderManager.getEnvironmentVariable(\"TEMP_FOLDER\"));\n            \n            parentFolderManager.setEnvironmentVariable(APPLICATION_FOLDER.replace(\"\\\\\", \"/\"), APPLICATION_FOLDER);\n            return (isWindows() || isMacOSXLeopardOrSuperior())? \n",
            "finish_reason": "length"
        },
        {
            "text": " \n    /**\n     * Test method for {@link OperatingSystem#isWindows()} method.\n     */\n    @Test\n    public void testIsWindows(){\n        assertTrue(OperatingSystem.isWindows());\n    }\n}\n\n// OperatingSystem_2Test.java\n/* package com.eteks.sweethome3d.tools; */\n\n/**\n* Test class of sub-packages OperatingSystem.\n*/\nclass OperatingSystem_2Test {\n\t\n\n\t/**\n\t * Checks if sub-packages OperatingSystem contain\n\t * a file that does not exist in the given file-list.\n\t * @param folder Name of the folder in which to check for the sub-package\n     * @param filename Name of the file in which to check for the sub-package\n\t */\n\tstatic boolean isFileNotFound(String folder, String filename) throws IOException{\n\t\tlog(\"Checking \"+(folder!=null? folder : \"null\")+\" for \"+filename);\n\t\t\n\t\tFile f = new File(OperatingSystem_2Test.getDefaultApplicationFolder(), folder+\"/\"+filename);\n\t\t\n\t\tf.delete();\n\t\t\n\t\treturn this.f.exists();\n\t}\n\t\n\tstatic boolean isFileNotFound(File f){\n\t\treturn this.f.exists();\n\t}\n\n\t/**\n\t * Checks if sub-packages OperatingSystem contain\n\t * a file that exists in the given directory.\n    * @param folder Name of the folder in which to check for the sub-package\n     * @param filename Name of the file in which to check for the sub-package\n\t */\n\tstatic boolean isFolderNotFound(String folder, String filename) throws IOException{\n\t\tlog(\"Checking \"+(folder!=null? folder : \"null\")+\" for \"+filename);\n\t\t\t\t\n\t\tFile f = new File(OperatingSystem_2Test.getDefaultApplicationFolder(), folder+\"/\"+filename);\n\t\t\t\n\t\tf.delete();\n\t\t\n\t\treturn this.f.exists();\n\t}\n\t\n\tstatic boolean isFolderNotFound(File f){\n\t\treturn this.f.exists();\n\t}\n\n\t/**\n\t * Checks if sub-packages OperatingSystem contain\n\t * a file.\n\t * @param srcPath Source path of the file\n\t * @param destPath Destination path of the file\n\t */\n\tstatic ResourceBundle getBundle(String srcPath, String destPath) {\n\t\tlog(\"Get the ResourceBundle\");\n\t\tResourceBundle bundle = ResourceBundle.getBundle(srcPath);\n\t\t\t\n\t\tlog(\"Set path \"+(destPath!=null? (destPath.isEmpty()? \"\" : destPath) : \"\"));\n\t\t\n\t\tbundle.setSourceEncoding(\"utf-8\");\n\t\t\t\t\t\t\t\n\t\treturn bundle;\n\t}\n\n\t/**\n     * This method checks the existence of file\n     * for the content. It gets a file for the given folder and saves a file-\n     * with a name starting with \"temp\". The file-path is saved without any\n     * file-extension.\n     * @param folder Folder name of the folder in which to check for the sub-package\n     * @param fileName Name of the file in which to check for the sub-package\n     */\n\tpublic static void getFileForName(String folder, String fileName){\n\t\tlog(\"Getting file \"+(folder!=null? folder : \"null\")+\" for \"+fileName);\n\t\t\t\t\t\t\n\t\tFile f = new File(OperatingSystem_2Test.getDefaultApplicationFolder(), (folder!=null? folder : \"null\")+\"/\"+fileName);\n\t\t\t\t\t\n\t\tf.delete();\n\t\t\n\t\tf = f.createNewFile();\n\t\tif (!f.exists())\n\t\t\tthrow new Error(\"Failed to create file \"+(folder!=null? folder : \"null\")+\" for \"+fileName);\n\t\t\t\t\n\t\t((FileManager) FileManager.getDefaultManager()).saveFile(f);\n\t}\n\n\t/**\n     * This method checks if sub-packages OperatingSystem contains\n     * a file.\n     * @param srcPath Source path of the file\n     * @param destPath Destination path of the file\n     */\n\tpublic static boolean isFile(String srcPath, String destPath) {\n\t\tlog(\"Checking for \"+srcPath+\" in \"+destPath);\n\n\t\treturn isFileNotFound(new File(srcPath), destPath);\n\t}\n\n\t/**\n     * This method checks if sub-packages OperatingSystem contains\n     * a file.\n     * @param srcPath Source path of the file\n     */\n\tpublic static boolean isFile(File srcPath) {\n\t\treturn isFileNotFound(srcPath, \"\");\n\t}\n\n\t/**\n     * This method checks if",
            "finish_reason": "length"
        },
        {
            "text": "\n\t\n\t/**\n\t * This instance of the test contains two tests, one which execute a JUnit test, and the other a unit test\n\t */\n\n  @Test\n  public void testIsMacOSXLeopardOrSuperiorThanSofaLeopard() throws IOException {\n    File defaultTemplateFile = null, defaultSubFile = null, defaultSubSubFile = null;\n\n    defaultTemplateFile = new File(\"templates/templatedelet.txt\");\n    assertTrue(defaultTemplateFile.exists(), \"Missing template file: templates/templatedelet.txt\");\n    defaultSubFile = new File(\"templates/subfolder\");\n    assertTrue(defaultSubFile.exists(), \"Missing template file: templates/subfolder\");\n    defaultSubSubFile = new File(\"templates/subfolder/subfolder\");\n    assertTrue(defaultSubSubFile.exists(), \"Missing template file: templates/subfolder/subfolder\");\n    assertFalse(isMacOSXLeopardOrSuperior());\n\n    // Test isWindows\n    defaultTemplateFile = null;\n    defaultSubFile = null;\n    defaultSubSubFile = null;\n    isWindows(); \n\n    defaultTemplateFile = new File(\"templates/templatedelet.txt\");\n    defaultSubFile = new File(\"templates/subfolder/subfolder\");\n    defaultSubSubFile = new File(\"templates/subfolder/subfolder/subfolder\");\n    assertFalse(isMacOSXLeopardOrSuperior());\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Operator version as a global variable.\n\tprivate static String testVersion;\n\n\t@Test\n\tvoid isWindowsTest() throws IOException, AccessControlException {\n\t\tassertFalse(testVersion.isEmpty());\n\t\tassertEquals(\"isWindows\", OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t}\n\n\t@Test\n\tvoid isLinuxTest() throws IOException, AccessControlException {\n\t\tassertFalse(testVersion.isEmpty());\n\t\tassertEquals(\"isLinux\", OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t}\n\n\t@Test\n\tvoid isMacOSXTest() throws IOException, AccessControlException {\n\t\tassertTrue(testVersion.isEmpty());\n\t\tassertEquals(\"Mac OS X\", OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t}\n\t\t\n\t@Test\n\tvoid isMacOSXLeopardOrSuperiorTest() throws IOException, AccessControlException {\n\t\tassertTrue(testVersion.isEmpty());\n\t\tassertEquals(\"Mac OS X Leopard or Superior\", OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t}\n\t\n\t@Test\n\tvoid isMacOSXTest() throws IOException {\n\t\tassertFalse(testVersion.isEmpty());\n\t\tassertEquals(\"Mac OS X\", OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t}\n\n\t@Test\n\tpublic void getApplicationFolderTest() throws IOException {\n\t\tassertNull(testVersion);\n\t\tassertEquals(\"com.eteks.sweethome3d\", OperatingSystem.class.getPackage().getName());\n\t}\n\n\t@Test\n\tpublic void getDefaultTemporaryFolderTest() throws IOException {\n\t\tassertNull(testVersion);\n\t\tFile defaultDirectory1 = OperatingSystem.getDefaultTemporaryFolder((boolean) (new Timer()).cancel());\n\t\tassertNotNull(\"Get default temp folder\", defaultDirectory1);\n\t\tFile defaultFolder2 = OperatingSystem.getDefaultTemporaryFolder(false);\n\t\t//Tests the return of FileManager.findFolder(false)\n\t\t//Test if the folder is the default one\n\t\tFile expectedFile = new File(defaultFolder2, OperatingSystem.class.getPackage().getName() + \".OperatingSystem\");\n\t\tassertTrue(\"File shouldn't exist on a non-default temp folder!\" + defaultFolder2, expectedFile.exists());\n\t\tFileManager.deleteFile(expectedFile);\n\t}\n}\n\n// OperatingSystem_2Test.java\n",
            "finish_reason": "stop"
        }
    ],
    "id": "efaf988f-f53f-4e20-b8ee-6c7db888760d",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_1Test.java",
    "original_code": "// OperatingSystem.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n *\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns <code>true</code> if current operating is Linux.\n     */\n    public static boolean isLinux();\n\n    /**\n     * Returns <code>true</code> if current operating is Windows.\n     */\n    public static boolean isWindows();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior();\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn't be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException;\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles();\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException;\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException;\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * <code>os.name</code> System property is <code>Mac OS X</code>.\n     * This class requires some classes of <code>com.apple.eio</code> package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "test_prompt": "// OperatingSystem_1Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#isWindows()} method.\n*/\nclass OperatingSystem_1Test {",
    "time_taken": 43.82041549682617,
    "usage": {
        "prompt_tokens": 960
    }
},
{
    "choices": [
        {
            "text": "private static final String APPLICATION_SUB_FOLDER = \"/Applications/Application/Application.app/Contents/Resources/Resources\";\n\t\tprivate static final String TEMPORARY_SUB_FOLDER = \"/temp/temp/\";\n\t\tprivate static final String TEMPORARY_SESSION_SUB_FOLDER = \"/Session0Tmp/session0tmp/\";\n\t\tstatic {\n\t\t\tEDITOR_SUB_FOLDER = \"/Users/jaredp/Documents/eteks/eteks\";\n\t\t\tAPPLICATION_SUB_FOLDER = \"/Applications/Programs/eteks.app\";\n\t\t\tTEMPORARY_SUB_FOLDER = \"/temporary\";\n\t\t\tTEMPORARY_SESSION_SUB_FOLDER = \"/Session0temporary\";\n\t\t}\n\n\t\tprivate static void createTemporaryFile(FileManager sm, String prefix, String suffix) throws IOException {\n\t\t\tString userHome;\n\t\t\tFile temporaryFileSt = new File(TEMPORARY_SUB_FOLDER);\n\t\t\tif(temporaryFileSt==null || temporaryFileSt.exists()==false){\n\t\t\t\ttemporaryFileSt = new File(FileManager.getPath(\"/\").toString()+TEMPORARY_SUB_FOLDER);\n\t\t\t\tString tmpName = temporaryFileSt.getName().toLowerCase();\n\t\t\t\tString tmpPrefix = tmpName.substring(0, tmpName.indexOf(\".\"));\n\t\t\t\tdo {\n\t\t\t\t\tif(tmpPrefix.equals(\"eteks-3d\")) break;\n\t\t\t\t\ttmpPrefix = tmpPrefix.substring(0, tmpPrefix.indexOf(\"-\"));\n\t\t\t\t}while(temporaryFileSt.renameTo(new File(tmpPrefix+\"temporary\"))!=null);\n\t\t\t}\n\t\t\t// Create temporary folder if exists and allow to have more than 10 files in it\n\t\t\tif(temporaryFileSt.exists()){\n\t\t\t\tString folderName = temporaryFileSt.getName();\n\t\t\t\tString baseName = folderName.substring(0,folderName.indexOf(\".\")).toLowerCase();\n\t\t\t\tString dirName = baseName.substring(0,baseName.indexOf(\"-\"));\n\t\t\t\tif(dirName.equals(\"eteks\")){\n\t\t\t\t\tFile newFolder = new File(temporaryFileSt.getParentFile().getAbsolutePath()+File.separator+prefix);\n\t\t\t\t\tif(newFolder!=null){\n\t\t\t\t\t\tFileManager.rename(newFolder.getPath(),\"/temporary-temp\"+(prefix.length()==0? \"\" :  File.separator)+temporaryFileSt.getName(),newFolder.getAbsolutePath()+File.separator+temporaryFileSt.getName()+suffix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Create folder and allow to have more than 10 files in it\n\t\t\t\tFileManager.createFolder(temporaryFileSt.getParentFile().getAbsolutePath(),prefix,10);\n\t\t\t}\n\t\t\tuserHome = FileManager.getPath(\"/\").toString()+Application_SUB_FOLDER;\n\t\t\tFileManager.createFile(userHome+File.separator+prefix+suffix,null);\n\n\t\t}\n\t\t\n\t\t//@Test\n\t\t@Test\n\t\tpublic void testGetApplicationSupportFolder() throws IOException, MissingResourceException {\n\t\t\tFileManager sm = FileManager.getFolder(\"/Programs/eteks\");\n\t\t\tString userHome = sm.getSystemProperty(System.getProperty(\"user.name\").toLowerCase());\n\t\t\tboolean isMacOSX = OperatingSystem.getOS().toLowerCase().startsWith(\"mac os x\");\n\t\t\tString applicationHome = (isMacOSX? \"/Users/jaredp/Documents/eteks/eteks\" : \"Applications/Programs/Application.app\");\n\t\t\tString userApplicationHome = (isMacOSX? (userHome.replaceFirst(\"/Applications/Application\",\"/Applications/\"+prefix+\"app\")) : \"Applications/Application\");\n\t\t\tassertTrue(userApplicationHome.endsWith(applicationHome));\n\t\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testCleanUpAfter() throws IOException, InterruptedException, AccessControlException {\n\t\t\tFileManager sm = FileManager.getFolder(\"/\");\n\t\t\tFileManager sm1 = sm.delete(FileManager.RECOVER_MADE_READER, false);\n\t\t\tFileManager sm2 = sm3.delete(FileManager.RECOVER_MADE_READER, true);\n\t\t\tFileManager.cleanUpAfter(sm);\n\t\t\tFileManager.cleanUpAfter(sm1);\n\t\t\tFileManager.cleanUpAfter(\"Application/Library/Preferences\",sm2);\n\n\t\t}\n\t\n\t}\n\t\n\t@Test\n\tpublic void testOS",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Tests that user does not have any operating system files in \n\t\t * any of their working directories.\n\t\t*/\n\t\t@Test\n\t\tpublic void isWindowsWithoutMacOS() throws IOException {\n\t\t\tassertFalse(isWindowsWithoutMacOS());\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of his operating system folders\n\t\t * and that their working directory isn't a MacOSX folder.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithMacOS() throws IOException {\n\t\t\t\t\tassertTrue(isMacOSX());\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating system folders\n\t\t * and that their working directory isn't a MacOSX folder.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithoutExt() throws IOException {\n\t\t\tassertTrue(isMacOSXWithoutExt());\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating system folders\n\t\t * and that the directory containing the operating system file is the current directory.\n\t\t */\n\t\t@Test\n\t\tpublic void isMacOSXWithoutExtAndCurrentDirectory() throws IOException {\n\t\t\tString file = \"/tmp/test-file\";\n\t\t\t\t\tassertTrue(isMacOSXWithoutExtAndCurrentDirectory(file));\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating\n\t\t * system folders and that the directory containing the operating system\n\t\t * file is not the current directory.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithoutExtAndOtherCurrentDirectory() throws IOException {\n\t\t\tString file = \"/tmp/test-file\";\n\t\t\t\t\t\tassertFalse(isMacOSXWithoutExtAndOtherCurrentDirectory(file));\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating\n\t\t* system folders, the operating system folder is a parent folder with no\n\t\t* file inside, and the directory containing the operating system file is\n\t\t* the current directory.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithFileAndCurrentDirectory() throws IOException {\n\t\t\tString file = \"/tmp/test-file\";\n\t\t\t\t\t\tassertTrue(isMacOSXWithFileAndCurrentDirectory(file));\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating\n\t\t* system folders, the operating system folder is a parent folder with no\n\t\t* file inside, and the directory containing the operating system file is\n\t\t* the current directory, but the file outside the directory is also\n\t\t* checked.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithoutFileAndOtherCurrentDirectory() throws IOException {\n\t\t\tString file = \"/tmp/test-file\";\n\t\t\tassertFalse(isMacOSXWithoutFileAndOtherCurrentDirectory(file));\n\t\t}\n\n\t\t/**\n\t\t * Tests that user have an operating system file in all of their operating\n\t\t* system folders, the operating system folder is a parent folder with no\n\t\t* file inside, and the directory containing the operating system file is\n\t\t* the current directory and the file outside the directory is checked.\n\t\t*/\n\t\t@Test\n\t\tpublic void isMacOSXWithoutFileAndFileAndOtherCurrentDirectory() throws IOException {\n\t\t\tString file = \"/tmp/test-file\";\n\t\t\tassertTrue(isMacOSXWithoutFileAndFileAndOtherCurrentDirectory(file));\n\t\t}\n\n\t\t/**\n\t\t * Tests the case when the provided argument is not a file\n\t\t * @param filename The argument to test\n\t\t * @return <code>true</code> if it is not a file\n\t\t * @throws IOException In case of any exception\n\t\t*/\n\t\tpublic static boolean isMacOSXWithoutFileAndFileAndOtherCurrentDirectory(String filename) throws IOException {\n\t\t    File userFiledir = new File(\"/tmp/TEMP_SUB_FOLDER\");\n\t\t    File userFile = new File(userFiledir, filename);\n\t\t    return!userFile.exists();\n\t\t}\n\n\t\t/**\n\t\t * Tests the case when the provided argument is not a file\n\t\t * @param filename The argument to test\n\t\t * @return <code>true</code> if it is not a folder\n\t\t * @throws IOException In case of any exception\n\t\t*/\n\t\tpublic static boolean isMacOSXWithoutFileAndFolderAndFileAndOtherCurrentDirectory(String filename) throws IOException {\n\t\t    File userFiledir = new File(\"/tmp/TEMP_SUB_FOLDER\");\n\t\t    File userFile = new File(userFiledir, filename);\n\t\t    return!userFile.isDirectory();\n\t\t}\n\n\t\t/**\n\t\t * Tests the case when the provided argument is not a file\n\t\t * @param filename The argument to",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link OperatingSystem#isMacOSX()}.\n\t */\n\t@Test\n\tpublic void testIsMacOSX() throws IOException {\n\t\t\n\t\tFile file = new File(System.getProperty(\"user.home\") + \"/Library/Application Support/\" + \"Praata_praata.xcode\");\n\t\tassertTrue(\"File \" + file + \" expected to exist\", file.exists());\n\t\t\n\t\t// Get the BUNDLE and BUNDLE PARSER location from ResourceBundles\n\t\tString key = OperatingSystem.class.getName().replace(\".\", \"/\") + \".key\";\n\t\tString bundleLocation = System.getProperty((System.getProperty(\"user.home\") + \"/Library/\") + \"/Resources\") + \"/\" + \"BUNDLE/*.dat\";\n\t\tString bundlePropLocation = System.getProperty(key) + \"/\" + \"BUNDLE/*.dat\";\n\t\t\n\t\t// Assert if the BUNDLE folder doesn't exist\n\t\tassertFalse(\"BUNDLE folder doesn't exist\", new File(bundleLocation).exists());\n\t\t\n\t\t// Assert if the BUNDLE PARSER file doesn't exist\n\t\tassertFalse(\"BUNDLE PARSER location doesn't exist\", new File(bundlePropLocation).exists());\n\t\t\n\t\t// Assert if the SYSTEM variable doesn't exist\n\t\tassertFalse(\"SYSTEM variable doesn't exist\", System.getenv(\"SYSTEM\"));\n\t\t\n\t\t// Create a file to create temp file\n\t\tFile temp = createTemporaryFile(\"xcode\", \".xcode\");\n\t\ttry {\n\t\t\t// Assert if file couldn't be created\n\t\t\tassertTrue(\"File couldn't be created\", temp.exists());\n\t\t} catch (IOException E) {\n\t\t\t// Catch the case where code fails here\n\t\t\tfail(\"Couldn't create temp file.\");\n\t\t}\n\t\t\n\t\t// Assert if it could be read\n\t\tassertTrue(\"File could be read.\", temp.length() > 0);\n\t\t\n                // Create a Timer to create the temp folder\n\t\tTimerTask createTimerTask = new CreateTempFolderTask();\n\t\tcreateTimer = new java.util.Timer(null);\n\t\tcreateTimer.scheduleAtFixedRate(createTimerTask, 0, 2000, 10);\n\t\tTimerTask runTimerTask = new RunTimerTask();\n\t\trunTimer = new java.util.Timer(null);\n\t\trunTimer.schedule(runTimerTask, 500, 500);\n\t\t\n\t\t// Assert if running time wasn't exceeded\n\t\tassertTrue(\"Running time wasn't exceeded after creating temp folder\", 1 < runTimer.getQueueLength());\n\t\t\n                // Assert if folder gets created with an Xcode file\n\t\t// FIXME: The framework only checks it for a few files in the folder.\n                // Do I want to check every folder?\n\t\tHome home = Home.getHomeDirectory();\n\t\tassertFalse(\"folder does not exist\", home == null || home.getHomeFolders().size() == 0);\n\t\t\n\t\t// Create folder with a property file\n\t\tFile propertyFile = new File(temp.getAbsolutePath() + File.separator + \"PROPERTY\");\n                // Assert if the temp folder gets created with the property file\n\t\tassertTrue(\"File couldn't be created\", propertyFile.exists());\n\t\t\n\t\t// Assert if home folder gets created with an Xcode folder\n\t\tFile folder = home == null? null : home.getHomeFolders().get(0);\n                // Assert if home folder gets created with a property file\n\t\tassertTrue(\"folder getXcode folder expected to exist\", folder!= null);\n                // Assert if property file doesn't exist\n\t\tassertFalse(\"property file exists\", propertyFile.exists());\n                // Assert if home folder doesn't have an Xcode folder\n\t\tassertFalse(\"home folder doesn't have a Xcode folder\", home == null || home.getHomeFolders().size() == 0);\n\t\t\n\t\t// Exit JVM\n\t\tSystem.exit(0);\n\t}\n\t\t\n\t\t\n\n        public static class CreateTempFolderTask extends TimerTask {\n\n\n                public void run() {\n                        try {\n                                System.setProperty(OperatingSystem.class.getName().replace(\".\", \"/\"), \"home\");\n                        } catch (AccessControlException E) {\n                                throw new RuntimeException(E);\n                        }\n                        new File(System.getProperty(\"user.home\"))//Set HOME environment variable\n                               .mkdir();\n                }\n        }\n\t\n\n        public static class RunTimerTask extends TimerTask {\n\n        public void run() {\n                        try {\n                                System.setProperty(OperatingSystem.class.getName().replace(\".\", \"/\"), \"home\");\n                        ",
            "finish_reason": "length"
        },
        {
            "text": "\n\tstatic {\n        // Force compilation of ResourceBouncer, because it uses classloader by default.\n\t\t// Resource Bouncer cannot be used together: it causes a link error so we have to manually set it.\n\t\tResourceBundle bundle = ResourceBundle.getBundle(OperationSystem.class.getName()+\".resources.UTF-8\");\n\t\tFileManager.setResourceLoader(bundle);\n\t\t\n\t\t// This class will run each time System.loadLibrary will be called.\n\t\t// It needs the file manager, which is also loaded when calling loadLibrary\n\t\tSystem.loadLibrary(\"android\");\n\t}\n\n\t\n\t/**\n\t* Test empty constructor.\n\t*/\n\t\n\tint noopOpens;\n\t\n\t/**\n\t* Test isMacOSX method.\n\t*/\n\n\tpublic static void isMacOSX() throws IOException, AccessControlException, InterruptedException, IOException, ClassNotFoundException {\n\t\ttry {\n\t\t\tnew OperatingSystem();\n\t\t\tfail();\n\t\t} catch (Exception e) {\n\t\t\tassertInstanceOf(IOException.class, e.getCause());\n\t\t}\n\t}\n\n\tprivate OperatingSystem() throws IOException, ClassNotFoundException, MissingResourceException {\n\t\t// Create File manager\n\t\tSystem.setProperty(\"apple.data_direction\", \"heap\");\n\t\tFileManager manager = new FileManager(\"os/home/home1\");\n\t\tmanager.ensureRoot();\n\n\t\tString userDataDir;\n\t\tif (AccessControlException.class == Class.forName(\"com.apple.eio.FileManager.FileManagerException\").getClass()) {\n\t\t\t// We assume that there won't be any issues with user data directory.\n\t\t} else {\n\t\t\t// We assume that the user home directory may be different from the\n\t\t\t// application data directory. For the moment it's not.\n\t\t}\n\n\t\tFile homePath;\n\t\thomePath = manager.getHomePath();\n\t\tUUID u1 = UUID.randomUUID();\n\t\tSystem.setProperty(\"os.system-user-dir\", homePath.getParentFile().getAbsolutePath());\n\t\tSystem.setProperty(\"os.system-home-dir\", \"/home/data\");\n\t\tuserDataDir = System.getProperty(\"os.system-user-data\");\n\n\t\tFile tempFolder = createTemporaryFolder(\"\");\n\t\tcreateTemporaryFile(\"\", \".appdata\");\n\t\t\n\t\tFile tempSessionsFolder = createTemporaryFolder(\"\");\n\t\tcreateTemporaryFile(\"\", \".session\");\n\t\t\n\t// TODO test if this is still used in a real program\n\t\thomePath.mkdir();\n\t\t\n\t\tFile tempApplicationFolder = createTemporaryFolder(\"application\");\n\t\tFile tempApplicationSettingsFolder = createTemporaryFolder(\"app-settings\");\n\t\tFile tempApplicationDataFolder = createTemporaryFolder(\"app-data\");\n\t\tcreatedFiles = createApplicationDataFolder().mkdir();\n\t\tcreatedFiles = createApplicationDataFolder().mkdir();\n\t\t\n\t// TODO test if this is still used in a real program\n\t\thomePath.mkdir();\n\t\t\n\t\tcreatedFiles = homePath.mkdir();\n\t// TODO test if this is still used in a real program\n\t\thomePath = homePath.mkdir();\n\t\tcreatedFiles = homePath.mkdir();\n\t\t\n\t// TODO test if this is still used in a real program\n\n\t\tFileManager.setResourceLoader(manager);\n\t\t\n\t\tnew File(userDataDir).mkdir();\n\t\tnew File(tmpApplicationFolder).mkdir();\n\t\t\n\t\thomePath.mkdir();\n\t\n\t\tSystem.setProperty(\"os.system-home-dir\", homePath.getAbsolutePath());\n\n\t\t// This method was deprecated. The main problem it is about is that\n\t\t// the FileManager returned by the constructor doesn't have the\n\t\t// necessary system properties set. This can cause problems in case\n\t\t// of a crash within a user application as there is no way\n\t\t// to get the original classloader.\n\t\t// The alternative is to call  systemClassLoader.getClass().toString(),\n\t\t// but it doesn't do anything...\n\n\t\tbyte[] bytes = manager.getClassloader().toByteArray();\n\t\tString classText = new String(bytes);\n\t\tFile applicationDataFolder = new File(\n\t\t    \"application-data:\" + \n\t\t        userDataDir);\n\t\t\n\t\t// The following is in case of a crash during testing.\n\t\t// I want to be safe and leave any other problems, though\n\t\tbyte[] content = new byte[(new String(classText).startsWith(\"com.apple.eio\")))\n\t\t{\n\t\t\tpublic boolean equals(Object theOther)\n\t\t\t{\n\t\t\t\treturn theOther instanceof File;\n\t\t\t\n\t\t\t}\n\t\t};\n\t\n\t\tString javaHome = System.get",
            "finish_reason": "length"
        },
        {
            "text": "\n\t//Test to ensure correct implementation.\n\t@Test\n\tpublic void testOperatingSystemMethod() {\n\t\ttry {\n\t\t\t// Create home using the current running Operating System object.\n\t\t\tHome h;\n\t\t\th = Home.createHome();\n\t\t\t// Now you must wait for the startup of the home, this will trigger when the\n\t\t\t// user has finished changing the values.\n\t\t\th.waitHomeUpdatedAndReady();\n\n\t\t\t// You must call isMacOSX() before you can call getDefaultTemporaryFolder()\n\t\t\tassertThrows(IOException.class, () -> OperatingSystem.isMacOSX());\n\t\t\t// Test if default folder does not exists\n\t\t\tassertThrows(IOException.class, () -> Environment.getDefaultHome().getDefaultTemporaryFolder());\n\n\t\t\t// Calling updateTemplate() or reload() with empty templates.\n\t\t\th.updateTemplate(\"\");\n\t\t\th.updateTemplate(\"\");\n\t\t}\n\t\tcatch (AccessControlException e) {\n\t\t\tfail(e.getMessage());\n\t\t\t// Just log here in case there is an expected exception at some level\n\t\t\t// than AccessControlException\n\t\t\tLogManager.printLog();\n\t\t\tLogManager.printLog();\n\t\t\tLogManager.printLog();\n\t\t\tLogManager.printLog();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t\t// Just log here in case there is an expected exception at some level\n\t\t\t// than IOException\n\t\t\tLogManager.printLog();\n\t\t\tLogManager.printLog();\n\t\t\tLogManager.printLog();\n\t\t}\n\t}\n\n\tprivate File getDefaultTemporaryFolder(boolean create) throws IOException {\n\t\tif (create && (System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\"))) {\n\t\t\treturn FileManager.findFolder(\"temp\", 0x61737570);\n\t\t}\n\n\t\t// Not created yet\n\t\ttry {\n\t\t\treturn Environment.getDefaultHome().getDefaultTemporaryFolder();\n\t\t} catch (AccessControlException e) {\n\t\t\tassertThrows(IOException.class, () -> Environment.getDefaultHome().getDefaultTemporaryFolder());\n\t\t\treturn Environment.getDefaultHome().getDefaultTemporaryFolder();\n\t\t}\n\t}\n\n\t/**\n\t * Checks to see if the operating system can handle the given directory.\n\t */\n    \t@Test\n    \tpublic void canHandleHome() throws IOException {\n\t\tfinal Home h = Home.createHome();\n\t\th.waitHomeUpdatedAndReady();\n\n\t\t// Test if default home does not exists\n\t\tassertNoFile(h, \"/Applications\", \"/System/Library\", \"/Library/Java\");\n\t}\n\n\t/**\n\t * Tests to see if user has launched the system already correctly.\n\t*/\n    @Test\n    public void canLaunchHome() throws IOException {\n\t\tfinal Home h;\n\n\t\t// Create home using the current running Operating System object.\n\t\th = Home.createHome();\n\t\t// Now you must wait for the startup of the home, this will trigger when the\n\t\t// user has finished changing the values.\n\t\th.waitHomeUpdatedAndReady();\n\n\t\t// User has launched the home, so now the check should work.\n\t\tassertDoesNotThrow(() -> h.canLaunchHome());\n    }\n\n    /**\n     * Tests to see if a temporal file without extension or folder structure exists.\n     */\n    @Test\n    public void canNotBeExistsWithUndefinedExtensionFile() {\n        final Home h;\n\n        // Create home using the current running Operating System object.\n        h = Home.createHome();\n\n        // New home is created\n        h.createTemp();\n\n        // Not ready yet\n        assertDoesNotThrow(() -> h.canLaunchHome());\n    }\n\n    @Test\n    public void canNotBeExistsWithUndefinedFolder() throws RuntimeException {\n        final Home h;\n\n        // Create home using the current running Operating System object.\n        h = Home.createHome();\n\n        // New home is created\n        h.createTemp();\n\n        // Not ready yet\n        assertDoesNotThrow(() -> h.canLaunchHome());\n    }\n\n    /**\n     * Tests to see if a folder without extension or folder structure exists.\n     */\n    @Test\n    public void canNotBeExistsWithUndefinedFolder() throws RuntimeException {\n        final Home h;\n\n        // Create home using the current running Operating System object.\n        h = Home.createHome();\n\n        // New home is created\n        h.createTemp();\n\n        // Not ready yet\n        assertDoesNotThrow(() -> h.canLaunchHome());\n    }\n\n    /**\n     * Tests to see if a temporal file with extension without extension also has the extension 'TTF' present.\n     */\n    @Test\n    public void canNotBeExistsWithTTF",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t* Returns the default folder where user home should be created.\n\t* Requires <code>com.apple.eio</code> source-code distribution package to compile.\n\t* (This package cannot be used without invoking this method).\n\t*/\n    private File getDefaultHomeFolder() {\n        return new File(\"home\");\n    }\n    \n    /**\n\t* Checks if the operating system is operating on Mac OS X.\n\t* @throws IOException If the operating system fail to access the property <code>os.name</code>.\n\t*/\n    @Test\n    void isMacOSX() throws IOException {\n        assertTrue(System.getProperty(\"os.name\").equals(\"Mac OS X\"));\n    }\n    \n    /**\n\t* Checks if the user home folder exist in the operating system.\n\t* Requires <code>com.apple.eio</code> source-code distribution package to compile.\n\t* (This package cannot be used without invoking this method).\n\t*/\n    @Test\n    void getHomeFolder() throws IOException, MissingResourceException {\n        File file = getDefaultHomeFolder();\n        System.out.println(file);\n        assertTrue(file!= null && file.isDirectory());\n        // This line is needed for this test to show there is nothing is set up but the other tests can fail.\n        assertFalse(getDefaultTemporaryFolder(false));\n        assertEquals(getDefaultHomeFolder().getAbsoluteFile().getCanonicalPath(),\n                     System.getProperty(\"user.home\"));\n    }\n    \n    /**\n\t* Creates temporary folder in the operating system.\n\t* Requires <code>com.apple.eio</code> source-code distribution package to compile.\n\t* (This package cannot be used without invoking this method).\n\t*/\n    private boolean createTemporaryFolder(boolean create) throws IOException, MissingResourceException {\n\t\tFile folder = getDefaultTemporaryFolder(create);\n\t\tassertTrue(folder!= null && folder.isDirectory());\n\t\treturn folder.mkdir();\n    }\n\t/**\n\t* Deletes the default temporary folder created in the operating system.\n\t* Requires <code>com.apple.eio</code> source-code distribution package to compile.\n\t*/\n\t@Test\n    void deleteTemporaryFile() throws IOException {\n\t\tSystem.out.println(File.separatorChar);\n\t  File home = getDefaultHomeFolder();\n\t  File tempFolder = File.createTempFile(\"temp\", \".tmp\", home);\n\t  assertTrue(tempFolder.delete());\n\t}\n\t/**\n\t* Creates temporary file with given prefix and suffix in the operating system.\n\t* Requires <code>com.apple.eio</code> source-code distribution package to compile.\n\t* (This package cannot be used without invoking this method).\n\t*/\n\t@Test\n    void createTemporaryFile(String prefix, String suffix) throws IOException {\n        assertTrue(System.getProperty(\"os.name\").equals(\"Mac OS X\"));\n    \tFile folder = getDefaultTemporaryFolder(false);\n        new File(folder.getAbsolutePath() + File.separator + UUID.randomUUID()).mkdir();\n\t\tFile file = File.createTempFile(prefix, suffix, folder);\n        assertTrue(file.getCanonicalFile().exists());\n\t}\n    \n\t/**\n\t* Returns the FileManager class that accesses to Mac OS X specifics.\n\t* Do not invoke methods of this class without checking first if the system property <code>os.name</code>\n\t* is <code>Mac OS X</code>.\n\t* @return FileManager.\n\t*/\n    protected FileManager getFileManager() throws MissingResourceException {\n        FileManager manager = new FileManager();\n\t\tassertTrue(manager!= null);\n\t\treturn manager;\n    }\n}\n\n/**\n* Tests the methods of the class {@link OperatingSystem}.\n*/\nclass OperatingSystemTest {\n\t/**\n\t* Getter for operating system and utility functions.\n\t*/\n    public static OperatingSystem getInstance() {\n        return OperatingSystem_2Test.getFileManager().getOs();\n    }\n    /**\n\t* Returns the default application folder.\n\t*/\n    public static File getDefaultApplicationFolder() {\n        UserAccounts user = System.getProperty(\"user.home\")  ;\n        return new File(user.getAppData(), \"applications\");\n    }\n    /**\n\t* Checks if an application folder exists in the operating system\n\t*/\n    @Test\n    void getHomeFolder() throws IOException {\n        File file = new File(System.getProperty(\"user.home\") + \"/AppData/Local/",
            "finish_reason": "length"
        },
        {
            "text": "\n    private final File homeFolder, desktopFolder, appSupportFolder;\n    \n    /**\n     * Test method for {@link OperatingSystem#isMacOSX()}.\n     * Test the existence of Apple OS X specific folder of the application user, \n     * and its associated resources folder.\n     * TODO: Implement the test.\n     */\n    @Test\n    public void isMacOSX_2_Test() throws InterruptedException, IOException {\n        \n        // Get the resource folder of the application user, containing files\n        // of OS X specific folders and the contents of some other content of files.\n        File resourcesFolder = new File(FileManager.findFolder(\"Mac OS X\", 0x61737570));\n        File file = new File(resourcesFolder, \"Application User\");\n\n        String resourceFolder = \"com.eteks.sweethome3d.tools.OperatingSystem_2_Test\";\n        String content = FileManager.contentOfFile(file, resourceFolder); \n\n        // Check if this content already exists!\n        File existingFile = new File(content);\n        assertTrue(ExistValidApplicationFile.isValidApplicationFile(existingFile));\n\n        // Get folder containing file with correct content\n        File resourceFolderContentsFile = new File(resourceFolder);\n\n        // Check if proper folder contents exist\n        assertTrue(resourceFolderContentsFile.exists());\n\n        // Return if this test succeeds!\n        assertTrue(ExistValidApplicationFile.areFileContentsTheSame(existingFile, resourceFolderContentsFile));\n\n        // Check if proper content exists in this folder\n        assertTrue(new File(resourceFolder, \"Application User\").exists());\n\n        // Check if proper contents and folder for file exist\n        assertTrue(new File(content).exists());\n        assertTrue(new File(resourceFolder, \"Application User\").exists());\n\t\n        // Delete the folder structure\n        // Delete the file contents folder\n        FileManager.deleteFile(file);\n        File resourceFolderContentsFile = new File(resourceFolder);\n        assertTrue(resourceFolderContentsFile.exists());\n        FileManager.deleteFile(resourceFolderContentsFile, resourceFolder);\n        assertFalse(resourceFolderContentsFile.exists());\t\n\n        // Check if resources folder for this test is empty\n        resourceFolderContentsFile = appSupportFolder.listFiles(new MacOSXFileFilter());\n        assertEquals(resourceFolderContentsFile.length(), 0);\n        \n        // Stop the timer and delete file when the test ends!\n        Log.logDebug(\"End test\");\n        Timer timer = new Timer();\n        TimerTask task = new TimerTask() {\n            public void run() {\n                Log.logDebug(\"Cleaning up temporary files\");\n                FileManager.recursiveDelete(tempFileFolder());\n                FileManager.recursiveDelete(desktopFolder());\n                Log.logDebug(\"Done\");\n            }\n        };\n        timer.schedule(task, 0, 100);\n        // This code will block until all the files will be deleted\n        timer.cancel();\t\n        task.cancel();\n        \n        // Check contents of folder for file and folder are not identical\n        FileManager.recursiveDelete(appSupportFolder.listFiles(new MacOSXFileFilter()));\n        assertFalse(\"App support folder should contain new content!\", ResourceUtils.newResourceUtils().areFileContentsTheSame(\n                appSupportFolder, content));\n        assertFalse(\"Contents folder should be empty!\", appSupportFolder.listFiles(\n                new MacOSXFileFilter()).length!= 0);\n    }\n}\n\n/**\n * File filter to only contain file that have extension '.log' or\n * anything that is below.\n * The '.log' extension implies that the file contains the text\n * log message of some operating system.\n*/\nclass MacOSXFileFilter extends FileFilter {\n\n    @Override\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        String lowerCaseFileName = fileName.toLowerCase();\n        for (String suffix : new String[]{\"log\", \".log\"}) {\n            if (fileName.endsWith(suffix)) {\n                return true;\n            }\n        }\n        return lowerCaseFileName.endsWith(\"log\");\n    }\n}\n\t\n/**\n * Test class for {@link OperatingSystem#isWindows()}.\n * Test case for a file that has extension \".log\" and then a file that contains nothing except for \"log\".\n*/\nclass WindowsLog {\n\n\t/**\n\t * Test method for {@link OperatingSystem#isWindows()}.\n\t * Test case for a file that has extension \".log\" and then a file that contains nothing except for \"log\".\n\t */\n\t@Test\n\tpublic void isWindows_2_Test",
            "finish_reason": "length"
        },
        {
            "text": "\n    // Utility class:  to avoid unneccessary instantiations\n\tprivate OperatingSystem() {\t\t\n    }\n\n    // Utility class:  to avoid unneccessary instantiations\n\tprivate static class MacOSXFileManagerFactory\n    {\n        public static FileManager createFileManager(String name, String resourceName) \n                throws MissingResourceException, ClassNotFoundException, \n                AccessControlException, IOException {\n            return FileManager.createFileManager((short) -123456, name, (short) 99, resourceName);\n        }\n    }\n\n\t/**\n\t * Returns <code>true</code> if operating system is Mac OS X\n\t */\n\tpublic static boolean isMacOSX() {\n\t    String osName = System.getProperty(\"os.name\");\n\t    return osName.startsWith(\"Mac OS X\");\n\t}\n\t\n\t/**\n\t * Returns <code>true</code> if operating system is Windows\n\t */\n\tpublic static boolean isWindows() {\n\t    String osName = System.getProperty(\"os.name\");\n\t    return osName.startsWith(\"Windows\")&&osName.endsWith(\"NT\");\n\t}\n\t\n\t/**\n\t * Returns <code>true</code> if operating system is a Linux system\n\t */\n\tpublic static boolean isLinux() {\t\n        String osName = System.getProperty(\"os.name\");\n        return osName.startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns <code>true</code> if operating system is a Mac OS X (10.5 or superior).\n     */\n    public static boolean isMacOSXLeopardOrSuperior(boolean createTemp)\n    {\n        return isMacOSX()||isMacOSXLeopardOrSuperior() || isMicrosoftExplorerExplorerExplorer() || isMicrosoftRhapsodyExplorerExplorer() || isIBMExplorerExplorer()||isMicrosoftExplorerExplorerExplorer();\n    }\n\n    /**\n     * Provides information about the default file manager that will be used for temporary files created in program.\n     */\n    @Test\n    public void tempFileManagerTest() throws IOException, MissingResourceException,\n    AccessControlException, IOException {\n\t\t\n\t\t// Check which file manager needs to be used\n\t\tFileManager manager = getFileManager();\n\t\t\n\t\t/* Create dummy folder structure for a temporary file */\n\t\tFile tempFile = createTemporaryFile(null, \"hello\");\n\t\ttempFolder = createTemporaryFolder(false);\n\n\t\t/* Check if the default file manager for this user type can be found */\n\t\tString fileManagerName = manager.getFile(tempFile.getAbsolutePath());\n\t\tassertEquals(\"Dummy file manager cannot be found\", manager.getFileManager().getFileManagerName(), fileManagerName);\n\t\t\n\t\t/* Check if default file manager needs to be created */\n\t\tFileManager fakeManager = getFileManager();\n\t\tassertEquals(\"Default file manager cannot be created\", fakeManager.getFileManagerName(), manager.getFileManager().getFileManagerName());\n\t\tassertTrue(\"Default temporary files can't be created\", tempFile.exists());\n\n\t\t/* Check if default file manager can be deleted */\n\t\tdeleteFileManager(tempFile);\n\t\tassertFalse(\"Default temporary files can't be deleted\", tempFile.exists());\n\t\t\n\t\t// System.exit() must be called after all the tests to ensure the file manager can be deleted\n\t\tSystem.exit();\n    }\n\n    /**\n     * This method allows overriding of the default file manager for user type.\n     */\n    private static void deleteFileManager(File... file) {\n        if(file.length == 0) {\n            FileManager.deleteFileManager();\n        }\n        else {\n            FileManager.deleteFileManager(file[0].getAbsolutePath());\n        }\n    }\n\t\t\n\t/**\n\t * Returns <code>true</code> if this file manager is available if it needs to used (Windows systems only)\n\t */\n\tprivate boolean getFileManager() {\n\t\treturn!isMacOSX() &&\n\t\t\t!isMacOSX() &&\n\t\t\t!isWindows();\n\t}\n\t\n\t/**\n\t * Returns <code>true</code> if it looks for default temporary files.\n\t * This method uses the getFileManager() method as it returns an FileManager that can be used to use\n\t * the default temporary files.\n\t */\n\tprivate static boolean tempFolderExists(File tempFolder) {\n\t\tif (tempFolder == null) {\n\t\t\ttempFolder = FileManager.findFolder((short) -12345, 0x61737570);\n\t\t}\n\t\treturn new File(\"/tmp/temp\").exists();\n\t}\n\t\n\t/**\n\t *",
            "finish_reason": "length"
        },
        {
            "text": "\n\t\tprivate OperatingSystem operatingSystem;\n\t\t\n\t\t/**\n\t\t * Initializes OperatingSystem_1Test (class {@link OperatingSystem_2Test}).\n\t\t * @throws IOException if some problems found when creating temporary folder\n\t\t */\n\t\t@Test\n\t\tvoid setUp() throws IOException {\n\t\t\toperatingSystem = new OperatingSystem();\n\t\t\t\n\t\t\t// Add a temporary folder to a temporary file manager\n\t\t\tFile fileFolder = new File(UUID.randomUUID().toString()).getAbsoluteFile();\n\t\t\toperatingSystem.getDefaultTemporaryFolder(true);\n\t\t\toperatingSystem.getDefaultApplicationFolder();\n\t\t\toperatingSystem.deleteTemporaryFiles();\n\t\t\t\n\t\t\tSystem.out.println(\"Temporary folder:\" + operatingSystem.getDefaultTemporaryFolder());\n\t\t\tSystem.out.println(\"Application folder:\" + operatingSystem.getDefaultApplicationFolder());\n\t\t\tSystem.out.println(\"FileManager:\" + operatingSystem.getFileManager(fileFolder));\n\t\t}\n\n\n\t\t/**\n\t\t * Initializes OperatingSystem_1Test (class {@link OperatingSystem_2Test}).\n\t\t * This constructor runs once.\n\t\t * @throws IOException if some problems found when reading from a file manager for the temporary folder.\n\t\t */\n\t\t@Test\n\t\tvoid readFileManager_1Read() throws IOException {\n\t\t\tFile fileFolder = new File(UUID.randomUUID().toString()).getAbsoluteFile();\n\t\t\toperatingSystem.getFileManager(fileFolder);\n\t\t\tassertNotNull(\"Could not get file manager\", operatingSystem.getFileManager(fileFolder));\n\t\t}\n\t} // OperatingSystem_2Test\n\n// OperatingSystem_3Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * This unit test checks the {@link OperatingSystem#isMacOSX()} method.\n\t*/\n\t@Test\n\tpublic void testIsMacOSX() {\n\t\t\n\t\tcheck(isMacOSX(), 2);\n\t}\n\t\n\t/**\n\t * This unit test checks the {@link OperatingSystem#isWindows()} method.\n\t */\n\t@Test\n\tpublic void testIsWindows() {\n\t\t\n\t\tcheck(isWindows(), 2);\n\t}\n\t\n\t/**\n\t * This unit test checks the {@link OperatingSystem#isLinux()} method.\n\t */\n\t@Test\n\tpublic void testIsLinux() {\n\t\t\n\t\tcheck(isLinux(), 2);\n\t}\n\t\n\t/**\n\t * Check if the specified operating system has a default working directory.\n\t* This method checks if the default working dir is not already set for current user.\n\t*/\n\tprivate static boolean check(boolean useDefaultWorkingDir) {\n\t\tFile defaultWorkingDir = getDefaultWorkingDirectory(useDefaultWorkingDir);\n\t\tif (useDefaultWorkingDir && defaultWorkingDir == null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn defaultWorkingDir!= null;\n\t\t}\n\t}\n\t\n\t/**\n\t * This method calls the {@link OperatingSystem#createTemporaryFile(String, String)} method in order\n\t * to create a temporary directory with the prefix \"Temp.tas\" and suffix \".tst\". The temporary\n\t * directory is used to store temporary files for testing purposes.\n\t* It stores the created file in temporary folder <code>&lt;Temp.tas&gt;.tst</code>.\n\t*/\n\tprivate static File createTemporaryFile(String prefix, String suffix) throws IOException {\n\t\treturn createTemporaryFile(prefix, prefix, suffix, true);\n\t}\n\t\n\t/**\n\t * Creates a temporary folder and returns it.\n\t */\n\tprivate static File createTemporaryFile(String prefix, String suffix,\n\t\t\tboolean create) throws IOException {\n\t\t// Create temporary folder.\n\t\tString tmpFolderPath = prefix + \"Temp.tas\";\n\t\tFile tmpFolder = new File(tmpFolderPath);\n\t\tif (!tmpFolder.exists() &&!tmpFolder.mkdir()) {\n\t\t\tthrow new IOException(\"Failed to create temporary folder \" + tmpFolder + \".\");\n\t\t}\n\t\t\n\t\t// Return created folder as temporary folder.\n\t\treturn tmpFolder;\n\t}\n\t\n\t/**\n\t * Check the working directory of the default session.\n\t* This check ensures that there is a directory with a default working directory.\n\t* It stores the created \"TempDir.tas\" and \"TempDir.tst\" files in it.\n\t*/\n\tprivate static File getDefaultWorkingDirectory(boolean create) throws IOException {\n\t\tFile baseDir = OperatingSystem.createTemporaryFolder(\"\", \"\", true);\n\t\tFile workingDir = new File(baseDir, \"TempDir\");\n\t\tworkingDir.mkdir();\n\t\t\n\t\t// Create the working directory from the temporary file.\n        FileManager.getInstance().makeDirectory(workingDir.getAbsolutePath());\n\t\tSystem.setProperty(\"user.dir\", workingDir.getAbsolutePath());\n\t\t\n\t\tif (create) {\n\t\t\tFileManager.makeFolder(workingDir.getAbsolutePath(), \"Temp\");\n\t\t}\n\t\t\n\t\tworkingDir.delete();\n\t\t\n\t\treturn workingDir;\n\t}\n\t\n\t/**\n\t * Check if the specified working location has a default session.\n\t* This check ensures that the working directory is not already set for the current user.\n\t*/\n\tprivate static boolean checkWorkingDirectory() {\n\t\tString defaultWorkingDir = OperatingSystem.createTemporaryFolder(\"\", \"\", true);\n\t\tif (defaultWorkingDir == null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn FileManager.isDirectory(defaultWorkingDir);\n\t\t}\n\t}\n\t\n\t/**\n\t * A timer object used to check if a temporary folder has been created.\n\t* The object is constructed when the following operations have been performed\n\t* <em>1.</em> the timer calls {@link FileManager#makeDirectory(String)} with the name of the\n\t* temporary folder to create a default directory\n\t* <em>2.</em> the working directory is reset to the default temporary folder.\n\t* To check the temporal directory is not empty (ie. created) create a temporary folder.\n\t* It is necessary to check if temporary folder will be deleted first, if it has not yet been created this method throws exception.\n\t*/\n\tprivate static class WorkingAndCreatingTemporaryFolder {\n\t\tpublic Timer timer;\n\t\t\n\t\t/**\n\t\t * Construct",
            "finish_reason": "length"
        }
    ],
    "id": "199e0c4b-53e4-4744-889b-c6a5ab816822",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_2Test.java",
    "original_code": "// OperatingSystem.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n *\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns <code>true</code> if current operating is Linux.\n     */\n    public static boolean isLinux();\n\n    /**\n     * Returns <code>true</code> if current operating is Windows.\n     */\n    public static boolean isWindows();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior();\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn't be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException;\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles();\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException;\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException;\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * <code>os.name</code> System property is <code>Mac OS X</code>.\n     * This class requires some classes of <code>com.apple.eio</code> package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "test_prompt": "// OperatingSystem_2Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#isMacOSX()} method.\n*/\nclass OperatingSystem_2Test {",
    "time_taken": 43.784509897232056,
    "usage": {
        "prompt_tokens": 962
    }
},
{
    "choices": [
        {
            "text": "\n    @Test\n    public void macosxLeopard() throws IOException, MissingResourceException, AccessControlException {\n\n\t\t// Create temporary folder for temporal file\n\t\tFile folder = new File(OperatingSystem_3Test.getDefaultTemporaryFolder(false));\n        assertTrue(folder.mkdir());\n        assertTrue(folder.isDirectory());\n\n        // Create sub-folder with temporary file\n        File subsubFolder = new File(\"\"+System.currentTimeMillis());\n        assertTrue(subsubFolder.mkdir());\n        assertTrue(subsubFolder.isDirectory());\n\n\t\t// Create a temporary sub-directory and a temporary file in it\n        File subdirRoot = new File(\"/\"+subsubFolder.getName());\n        File tempFile = createTemporaryFile(subdirRoot.getAbsolutePath(), \".tmp\");\n        assertTrue(tempFile.isFile());\n\n\t\t// Test if the temporal file is in the directory\n\t\tassertTrue(subsubFolder.contains(tempFile.toString()));\n\t}\n\t\n    @Test\n    public void macosxSuperior() throws IOException, MissingResourceException, AccessControlException {\n\n\t\t// Create temporary folder for temporal file\n\t\tFile folder = new File(OperatingSystem_3Test.getDefaultTemporaryFolder(true));\n        assertTrue(folder.mkdir());\n        assertTrue(folder.isDirectory());\n\n        // Create sub-folder with temporary file\n        File subsubFolder = new File(\"\"+System.currentTimeMillis());\n        assertTrue(subsubFolder.mkdir());\n        assertTrue(subsubFolder.isDirectory());\n\n\t\t// Create a temporary sub-directory and a temporary file in it\n        File subdirRoot = new File(\"/\"+subsubFolder.getName());\n        File tempFile = createTemporaryFile(subdirRoot.getAbsolutePath(), \".tmp\");\n        assertTrue(tempFile.isFile());\n\n\t\t// Test if the temporal file is in the sub-directory\n\t\tassertTrue(subsubFolder.contains(tempFile.toString()));\n\t}\n\t\n\t/**\n\t * Test if file is created correctly in the file manager, \n\t * according to the OS.exe file manager\n\t */\n\t@Test\n    public void exesystemFileManager() throws IOException {\n    \t// Use a temporary file manager to avoid deadlock\n        FileManager manager = new MacOSXFileManager();\n        String path = getDefaultTemporaryFolder(true).getAbsolutePath();\n\n        // Create file\n        File tempFile = createTemporaryFile(\"default\", \".txt\");\n\t\tassertTrue( tempFile.exists());\n        assertTrue( manager.getFile(tempFile.toString()) == tempFile);\n \n\n\t\t// Update timestamp and delete file\n        tempFile.delete();\n        assertFalse(\"File should be deleted\", manager.getFile(tempFile.toString()) == null);\n    }\n\n    @Test\n    public void testWindowsExe() throws IOException, MissingResourceException, AccessControlException {\n        // Create temporary folder for temporal file\n        File folder = new File(OperatingSystem_3Test.getDefaultTemporaryFolder(false));\n        assertTrue(folder.mkdir());\n        assertTrue(folder.isDirectory());\n\n        // Update timestamp and delete file\n        File tempFile = createTemporaryFile(\"default\", \".old\");\n        assertTrue( tempFile.exists() );\n        tempFile.delete();\n        assertFalse(\"File should be deleted\", tempFile.exists() );\n    }\n\n    @Test\n    public void testInvalidTimeFormat() throws IOException, MissingResourceException, AccessControlException {\n\n        // Update timestamp and delete file\n        File tempFile = createTemporaryFile(\"default\", \".notanexicalstring\");\n        assertTrue( tempFile.exists() );\n        tempFile.delete();\n        assertFalse(\"File should be deleted\", tempFile.exists() );\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n     * Test for the {@link OperatingSystem#isMacOSXLeopardOrSuperior()} method.\n     */\n\t@Test\n    void isMacOSXLeopardOrSuperior() throws IOException {\n\t\t\n\t\t// Create a new OperatingSystem object\n\t\tSystem.setProperty(\"java.library.path\", \"sun:/\");\n\t\tOSMOperatingSystem operatingSystem = new OSOperatingSystem();\n\t\t\n\t    // Check if Mac OS X is leopard\n    \tassertTrue(operatingSystem.isMacOSXLeopardOrSuperior());\n   \n    \t// Remove the previous path\n    \tString osXPath = System.getProperty(\"java.library.path\");\n    \tSystem.setProperty(\"java.library.path\", osXPath.replace(\"sun:/\",\"\"));\n    \t\n    \t// Remove Java Runtime Environment jar\n\t\tFile path = new File(FileManager.getApplicationSupportFolder(), \"javaRuntime\");\n\t\tif (path.exists()) {\n\t\t\tpath = new File(path, \"javaRuntime.jar\");\n\t\t\tFile[] listPath = path.listFiles();\n\t\t\tfor(File f : listPath) {\n\t\t\t\tif (f.getName().endsWith(\"Jar\")) {\n\t\t\t\t\tSystem.out.println(\"Removing jar: \" + f.getName());\n\t\t\t\t\tf.delete();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Check if Java Runtime Environment jar was removed\n\t\tif (path.exists()) {\n\t\t\tSystem.out.println(\"Java Runtime Environment jar not removed. Please remove previous path setting.\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Java Runtime Environment jar not removed\");\n\t\t}\n\t\t\n\t}\n}\n\n// OperatingSystem._1Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void test() throws IOException, MissingResourceException\n    {\n        // Assertions in this file\n        assertTrue(isMacOSXLeopardOrSuperior());\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program (OS X only).\n     */\n    public static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        // Try to find default template in system folder\n        return FileManager.findFolder((short) -32763, 0x61737570);\n    }\n\n    /**\n\t * The default template used as default folder for created files.\n\t */\n\tpublic static final File TEMP_DEFAULT_FOLDER;\n\n\tpublic static void setTEMP_DEFAULT_FOLDER(File tempFile) {\n\t\tTEMP_DEFAULT_FOLDER = tempFile;\n\t}\n\n    /**\n     * Returns default folder that should be used for temp files created in the program.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        // Try to find default template in system folder\n        File tempDefaultFolder = FileManager.findFolder((short) -32763, 0x61737570);\n        assertNotNull(tempDefaultFolder);\n        return tempDefaultFolder;\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "private OperatingSystem operatingSystem;\n\t\t{\n\t\t\ttry {\n\t\t\t\tSystem.setProperty(\"os.name\", \"Mac OS X\");\n\t\t\t} catch (MissingResourceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\toperatingSystem = new OperatingSystem();\n\t\t}\n\t\tpublic OperatingSystem_3Test() {\n\t\t\tsuper();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testMacLeopard() {\n\t\t\tassertFalse(operatingSystem.isMacOSXLeopardOrSuperior());\n\t\t\t\n\t\t\toperatingSystem.addApplication(\"ApplicationLeopard\", \"path\");\n\t\t\tassertTrue(operatingSystem.isMacOSXLeopardOrSuperior());\t\t\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testWindowsLeopard() {\n\t\t\tassertFalse(operatingSystem.isWindows());\n\t\t\t\n\t\t\toperatingSystem.addApplication(\"PackageLeopard\", \"path\");\n\t\t\tassertTrue(operatingSystem.isWindows());\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testWindowsLeopardLea() {\n\t\t\tassertTrue(operatingSystem.isWindows());\n\t\t\t\n\t\t\t// TODO: check some more lea-based\n\t\t\t// TODO: check this\n\t\t\tFile tmp = createTemporaryFile(\".app\", \"temppath\");\n\t\t\toperatingSystem.addApplication(\"PackageLeopardLea\", tmp.getAbsolutePath());\n\t\t\tFile tmp2 = createTemporaryFile(\".app\", \".tmp\");\n\t\t\toperatingSystem.addApplication(\"PackageLeopardLea\", tmp2.getAbsolutePath());\n\t\t\t\n\t\t\toperatingSystem.deleteTemporaryFiles();\n\t\t\t\n\t\t\tassertFalse(operatingSystem.isWindows());\n\t\t\tassertFalse(operatingSystem.isWindowsLeopard());\n\t\t\t\n\t\t\tFile tmp3 = createTemporaryFile(\".app\", \"anothertemppath\");\n\t\t\toperatingSystem.addApplication(\"PackageLeopardLea\", tmp3.getAbsolutePath());\n\t\t\tFile tmp4 = createTemporaryFile(\".app\", \".tmp\");\n\t\t\toperatingSystem.addApplication(\"PackageLeopardLea\", tmp4.getAbsolutePath());\n\t\t}\n\n\t\t\n\t\t@Test\n\t\tpublic void testLinuxLeopard() {\n\t\t\tassertFalse(operatingSystem.isLinux());\n\t\t\t\n\t\t\t// TODO: check some more lea-based\n\t\t\t// TODO: check this\n\t\t\tFile tmp = createTemporaryFile(\".app\", \"temppath\");\n\t\t\toperatingSystem.addApplication(\"com.eteks.home3d.ApplicationLeopard\", tmp.getAbsolutePath());\n\t\t\t\n\t\t\t// Wait some time to wait for the process to start.\n\t\t\tTimer timer = new Timer();\n\t\t\ttimer.schedule(new TimeOutTask(), 0, 5000);\n\t\t\t\n\t\t\toperatingSystem.deleteTemporaryFiles();\n\t\t\t\n\t\t\tassertTrue(operatingSystem.isLinux());\n\t\t\t\n\t\t\tassertFalse(operatingSystem.isLinuxLeopard());\n\t\t}\n\n\t\t@Test\n\t\tpublic void testWindows() {\n\t\t\tassertFalse(operatingSystem.isWindows());\n\t\t\t\n\t\t\t// TODO: check some more lea-based\n\t\t\t// TODO: check this\n\t\t\tFile tmp = createTemporaryFile(\".app\", \"temppath\");\n\t\t\t\n\t\t\tfileSetToRoot()\n\t\t\tassertFalse(operatingSystem.isWindows());\n\t\t\tboolean found = false;\n\t\t\tfor (File file : OperatingSystem.getOperatingSystem()\n\t\t\t\t\t.getApplication(\"PackageLeopardLea\").getFiles()) {\n\t\t\t\tif (file.getAbsolutePath().equals(tmp.getAbsolutePath())) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tassertTrue(found);\n\t\t\t\n\t\t\toperatingSystem.deleteTemporaryFiles();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testMacLeopardLeaNotOnHomeFolder() {\n\t\t\tFile tmp2 = createTemporaryFile(\".app\", \".tmp\");\n\t\t\tFile tmp3 = createTemporaryFile(\".app\", \".tmp\");\n//\t\t\tFile tmp4 = createTemporaryFile(\".app\", \".tmp\");\n\t\t\tFile tmp0 = createTemporaryFile(\".app\", \"anothertemppath\");\n\t\t\t\n\t\t\toperatingSystem.addApplication(\"com.eteks.home3d.ApplicationLeopardLea\", tmp2.getAbsolutePath());\n\t\t\toperatingSystem.addApplication(\"com.eteks.home3d.ApplicationLeopardLea\", tmp3.getAbsolutePath());\n\t\t\toperatingSystem.addApplication(\"com.eteks.home3d.ApplicationLeopardLea\", tmp4.getAbsolutePath());\n\t\t\t\n\t\t\tFile tmp8 = createTemporaryFile(\".app\", \".tmp\");\n\t\t\toperatingSystem.addApplication(\"com.eteks.home3d.ApplicationLeaper\", tmp8.",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Tests whether the operating system is Linux.\n\t * This test case can be executed with jtravis;\n\t * The only supported OS version is 10.5 or higher\n\t */\n\t@Test\n\tpublic void isLinux() throws IOException {\n\t\ttry {\n\t\t\tFileManager.setDefaultFolder((short) -32763, getDefaultApplicationFolder(true));\n\t\t\tSystem.out.println(\"The operating system is Linux\");\n\t\t\treturn; // Always return true\n\t\t} catch (RuntimeException e) { // Don't stop when something goes wrong\n\t\t\te.printStackTrace();\n\t\t\tSystem.err.println(\"There is something wrong with the test configuration (in this case, the operating system is linux)\");\n\t\t\treturn;\n\t\t} finally { \n\t\t\tFileManager.setDefaultFolder((short) -32763, null);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void isWindows() {\n\t\ttry {\n\t\t\tFileManager.setDefaultFolder((short) -32763, \"~/\");\n\t\t\tSystem.out.println(\"The operating system is Windows\");\n\t\t} catch (RuntimeException e) { // Don't stop when something goes wrong\n\t\t\te.printStackTrace();\n\t\t\tSystem.err.println(\"There is something wrong with the test configuration (in this case, the operating system is windows)\");\n\t\t\treturn;\n\t\t}\n\t}\n\n\t@Test\n\tpublic void isMacOSX() {\n\t\ttry {\n\t\t\tFileManager.setDefaultFolder((short) -32763, \"~/Applications/\");\n\t\t\tSystem.out.println(\"The operating system is Mac OS X\");\n\t\t} catch (RuntimeException e) { // Don't stop when something goes wrong\n\t\t\te.printStackTrace();\n\t\t\tSystem.err.println(\"There is something wrong with the test configuration (in this case, the operating system is macosx)\");\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void isMacOSXLeopardOrSuperior() throws IOException, InterruptedException, InvocationTargetException, IllegalAccessException {\n\t\t// This is what a macro does not have:\n        //  if ( (i = 2) && (((i = 0) < ((i++) << 16) < ((i++) <<  9)))\n\t\t// && (((i = 0))!= ((i = 16) << 5) <= ((i++) <<  5))) {\n\t\t// This is not an ugly macro, but is it?\n\t\t// Let's try again with no arguments and with same arguments but different number of pointers\n\t\tSystem.out.println(\"Testing to see if we can access a macro with a different number of pointers.\");\n\t\t//System.out.println();\n\t\t\n\t\ttry {\n\t\t\tFileManager.setDefaultFolder((short) -32763, getDefaultApplicationFolder(false));\n\t\t\t\n\t\t\tSystem.out.println(\"The operating system is \" + getDefaultApplicationFolder(false));\n\t\t\t\n\t\t\t// This is what Apple does, but it doesn't work:\n\t\t\t// If you call MacOSXFileManager.getApplicationFolder()\n\t\t\t// it returns null\n\t\t\t// It returns the default application folder. The following line call does the same, but doesn't work:\n\t\t\t// getDefaultApplicationFolder(false);\n\t\t\tFileManager.setDefaultFolder((short) -32763, getDefaultApplicationFolder(false));\n\t\t\t\n\t\t\tSystem.out.println(\"Testing to see if we can access a macro with a different number of pointers, but no macro name is provided.\");\n\t\t\t//No message is printed\n\t\t\t\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"\\nTesting macro name, but no arguments.\");\n\t\t\t\t//System.out.println();\n\t\n\t\t\t\tFileFolder folder = FileFolder.getFolder();\n\t\t\t\tString macros = folder.getByName(\"\");\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\t// No message is printed\n\t\t\t\t\n\t\t\t\tif (e.getMessage().contains(\"macros\")) {\n\t\t\t\t\t//message is something like /Users/prusep/bin/MacOSX.pck or /Applications/MacOSX.appc\n\t\t\t\t\t// message that has parameters, separated by ;\n\t\t\t\t\tif (e.getMessage().contains(\"/Users/prusep/bin/MacOSX.pck\") || e.getMessage().contains(\"/Applications/MacOSX.appc\")) {\n\t\t\t\t\t\tFileManager.setDefaultFolder((short) -32763, \"/Applications/\");\n\t\t\t\t\t\tString macros = FileFolder.getFolder().getByName(\"\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t// A message of /Application/MacOSX/\n\t\t\t\t\t\tif (e.getMessage().startsWith(\"/Application/MacOSX/\")) {\n\t\t\t\t\t\t\tint pos = e.getMessage().indexOf(\"MacOSX\");\n\t\t\t\t\t\t\tmacros = e.",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * The test case for OS X Mac OSX >= 10.5 and superior.\n\t\t * @throws IOException if the file couldn't be created\n\t\t */\n\tprivate OperatingSystem_3Test() throws IOException {\n\t}\n\n\t/**\n\t * Tests the method {@link OperatingSystem#isMacOSXLeopardOrSuperior()}\n\t * for operating system.\n\t * @throws IOException if the file couldn't be created\n\t */\n\t@Test\n\tvoid isMacOSXLeopardOrSuperior() throws IOException {\n\t\tassertTrue(OSX_FILEMANAGER.isMacOSXLeopardOrSuperior());\n\t}\n\n\t/**\n\t * Test case for checking the path of the temporary files\n\t * created by the program. The code is copied from\n\t * {@link File#delete() File.delete()} method.\n\t * @throws IOException\n\t */\n\t@Test\n\tvoid deleteTemporaryFiles() throws IOException {\n\t\tFile defaultTemp = new File(MacOSXFileManager.getApplicationSupportFolder());\n\t\tFile temp = new File(MacOSXFileManager.getApplicationSupportFolder() + \"/\" + \"temp.pdf\");\n\t\tif (!temp.exists() || temp.lastModified() <= defaultTemp.lastModified()) {\n\t\t\tassertTrue(\"Last modified timestamp of temp isn't equal to that of default folder (\"\n\t\t\t\t+ defaultTemp.lastModified() + \") or equal to that of user folder (\" + temp.lastModified()\n\t\t\t\t+ \").\", temp.lastModified() <= defaultTemp.lastModified());\n\t\t} else {\n\t\t\tassertEquals(defaultTemp.lastModified(), temp.lastModified());\n\t\t}\n\t\ttemp.deleteOnExit();\n\t}\n\n\t/**\n\t * Tests the method {@link OperatingSystem#getDefaultTemporaryFolder(boolean)}\n\t * for operating system.\n\t * @throws IOException if the file couldn't be created\n\t */\n\t@Test\n\tvoid getDefaultTemporaryFolder() throws IOException {\n\t\t// Test with temporary folder\n\t\tFile defaultTemp = new File(MacOSXFileManager.getApplicationSupportFolder());\n\t\tFile temp = new File(MacOSXFileManager.getApplicationSupportFolder() + \"/\" + \"temp.pdf\");\n\t\tassertNotNull(temp.getAbsolutePath());\n\n\t\t// Test with no user folder\n\t\tdefaultTemp =\n\t\t\tnew File(MacOSXFileManager.getApplicationSupportFolder(), \"temp.pdf\");\n\t\ttemp = new File(MacOSXFileManager.getApplicationSupportFolder() + \"/\" + \"temp.pdf\");\n\t\tassertNotNull(temp.getAbsolutePath());\n\t}\n\n\t/**\n\t * Tests the method {@link OperatingSystem#getDefaultApplicationFolder()}\n\t * for operating system.\n\t * @throws IOException if the file couldn't be created\n\t */\n\t@Test\n\tvoid getDefaultApplicationFolder() throws IOException {\n\t\tFile defaultTemp =\n\t\t\tnew File(MACOSXFileManager.getApplicationSupportFolder(), File.separator\n\t\t\t\t+ \"AppData\" + File.separator + \"Library\" + File.separator + \"Application Support\");\n\t\tFile temp = new File(MACOSXFileManager.getApplicationSupportFolder()\n\t\t\t+ \"/\" + \"Application Support\");\n\t\tassertNotNull(temp.getAbsolutePath());\n\t}\n\n\t/**\n\t * Tests the method {@link OperatingSystem#getDefaultTemporaryFolder(boolean)}\n\t * for operating system.\n\t * @throws IOException if the file couldn't be created\n\t */\n\t@Test\n\tvoid getDefaultTemporaryFolderLeopard() throws IOException {\n\t\t// Test with temporary folder in leopard\n\t\tFile defaultTemp = new File(MacOSXFileManager.getApplicationSupportFolder());\n\t\tFile temp = new File(MacOSXFileManager.getApplicationSupportFolder()\n\t\t\t+ \"/\" + \"temp.pdf\" + File.separator + \"laptop\");\n\t\tassertNotNull(temp.getAbsolutePath());\n\n\t\t// Test with no user folder\n\t\tdefaultTemp =\n\t\t\tnew File(MacOSXFileManager.getApplicationSupportFolder()\n\t\t\t\t+ File.separator + \"AppData\" + File.separator\n\t\t\t\t+ \"Library\" + File.separator + \"Application Support\");\n\t\ttemp = new File(MacOSXFileManager.getApplicationSupportFolder());\n\t\tassertNotNull(temp.getAbsolutePath());\n\t}\n\t\n\t/**\n\t * Test class for handling {@link com.apple.eio.FileManager#registerPathFilter(FileFilter)}\n\t * @throws IOException if the path couldn't be handled by {@link FileManager}\n\t */\n\t@Test\n\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static final boolean UNDETERMINED = false;\n\t\n\tprivate static final boolean WINEDETERMINED = true;\n\n    /**\n     * Method that checks if the operating system is Linux.\n     * @throws IOException if the OS isn't Linux,\n     */\n\t@Test\n\tpublic void isLinux() throws IOException {\n\t\tcheckOperatingSystemState(true);\n\t}\n\t\n\t/**\n\t * Method that checks if the operating system is Windows.\n\t * @throws IOException if the OS isn't Windows,\n\t */\n\t@Test(expected = IOException.class)\n\tpublic void isWindows() throws IOException {\n\t\tcheckOperatingSystemState(false);\n\t}\n\n\t/**\n\t * Test class of {@link OperatingSystem} that uses Windows.\n\t * It contains one test case for the {@link OperatingSystem#getDefaultApplicationFolder() getDefaultApplicationFolder}.\n\t */\n\tprivate static class WindowsFileManager extends MacOSXFileManager {\n\n\t\tprivate final File defaultApplicationFolder;\n\t\t\n\t\t/**\n\t\t * Creates a file manager instance that use the default application folder as default folder.\n\t\t * @param defaultApplicationFolder default folder\n\t\t */\n\t\tWindowsFileManager(final File defaultApplicationFolder) {\n\t\t\tsuper();\n\t\t\t\n\t\t\tthis.defaultApplicationFolder = defaultApplicationFolder;\n\t\t}\n\t}\n\n    /**\n     * Method that checks if the operating system is Mac OS X or later.\n     * @throws IOException if the operating system is not Mac OS X\n     */\n\t@Test\n\tpublic void isMacOSX() throws IOException {\n\t\tcheckOperatingSystemState(false);\n\t}\n\n\t/**\n\t * Test class of {@link OperatingSystem} that uses Mac OS X or later.\n\t * It contains one test case for the {@link OperatingSystem#getDefaultApplicationFolder() getDefaultApplicationFolder}.\n\t */\n\tprivate static class MacOSXFileManager extends MacOSXFileManager {\n\n\t\t@Override\n\t\tprotected File getDefaultApplicationFolder() throws IOException {\n\t\t\tthrow new IOException(\"This class shouldn't be invoked for Mac OS X\");\n\t\t}\n\t}\n\t\n\t/**\n\t * Method returns the application's folder, and creates one if it doesn't have one.\n\t * @throws IOException if the OS isn't Mac OS X or later,\n\t */\n\t@Test\n\tpublic void getDefaultApplicationFolder() throws IOException {\n\t\tcheckOperatingSystemState(UNDETERMINED);\n\t}\n\n\t/**\n\t * Method that checks if the current running operating system is Windows or macOS specific for Windows.\n\t * @throws IOException if the OS isn't Windows or macOS specific to Windows,\n\t */\n\t@Test\n\tpublic void getDefaultApplicationFolderWindows() throws IOException {\n\t\tcheckOperatingSystemState(UNDETERMINED);\n\t}\n\n\t/**\n\t * Method that checks if OperatingSystem is Windows specific to Windows.\n\t * @throws IOException if the operating system isn't Windows specific to Windows,\n\t */\n\t@Test\n\tpublic void getDefaultApplicationFolderWindowsSpecificToWindows() throws IOException {\n\t\tcheckOperatingSystemState(UNDETERMINED);\n\t}\n\n\t/**\n\t * Method that checks if OperatingSystem is not Windows specific to Windows.\n\t * @throws IOException if the operating system isn't Windows specific to Windows,\n\t */\n\t@Test\n\tpublic void getDefaultApplicationFolderNonWindowsSpecificToWindows() throws IOException {\n\t\tcheckOperatingSystemState(UNDETERMINED);\n\t}\n\n\t/**\n\t * @throws IOException if the operating system isn't MacOSX or later\n\t */\n\tprivate void checkOperatingSystemState(boolean isMacOSXLeopardOrSuperior) throws IOException {\n\t\tfinal File defaultApplicationFolder = getDefaultApplicationFolder();\n\t\tif (isMacOSXLeopardOrSuperior) {\n\t\t\tassertTrue(isWindows());\n\t\t} else {\n\t\t\tassertTrue(isMacOSXSpecificToWindows());\n\t\t}\n\t\tfinal File defaultApplicationFolderWindows = isMacOSXLeopardOrSuperior? new File(WINDOWS_FOLDER, \"home.yaml\") : null;\n\t\tassertNotNull(defaultApplicationFolder);\n\t\tassertFalse(defaultApplicationFolder.exists());\n\t\tassertFalse(defaultApplicationFolderWindows.exists());\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t Returns <code>true</code> if current operating is the current user's domain.\n\t\t * @return <code>true</code> if current operating is the current user's domain, <code>false</code> otherwise.\n\t\t */\n\t\tboolean isMacOSXLeopardOrSuperior(){\n\t\t\treturn System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n\t\t}\n\t\tprivate static class TestTask extends TimerTask {\n\n\t\t\tprivate final UUID id;\n\n\t\t\tprivate Home home;\n\n\t\t\tprivate boolean isShutdownNeeded;\n\t\t\tprivate FileManager manager;\n\t\t\tprivate File file;\n\n\t\t\tTestTask(){\n\t\t\t\tisShutdownNeeded   = false;\n\t\t\t\thome                = Home.USER;\n\t\t\t\tmanager             = FileManager.getFileManager();\n\n\t\t\t\tid= UUID.randomUUID();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void run(){\n\t\t\t\ttry{\n\t\t\t\t\tFile file = manager.openFile((short)0);\n\t\t\t\t\t//file.delete();\n\t\t\t\t\thome = Home.getHome(manager, file, id);\n\t\t\t\t\tif(home==Home.PRIMARY) {\n\t\t\t\t\t\tSystem.out.println(\"Running test for primary user folder\");\n\n\t\t\t\t\t\thome = Home.getHome((short)-2,manager);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.println(\"Running test for secondary user folder\");\n\n\t\t\t\t\t\thome = Home.getHome((short)2,manager);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tfile = File.createTempFile(\"sWEINTHOME3SD\", \".sqlite3\", new File(\"/tmp/sWEINTHOME3SD\"));\n\t\t\t\t\tfile.deleteOnExit();\n\t\t\t\t\t\n\t\t\t\t\tfile = manager.openFile(0);\n\t\t\t\t\thome = Home.getHome(manager, file, id);\n\t\t\t\t\tif( home==Home.PRIMARY ) {\n\t\t\t\t\t\tSystem.out.println(\"Running test for primary user folder\");\n\n\t\t\t\t\t\thome = Home.getHome(manager, file, id);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.println(\"Running test for secondary user folder\");\n\n\t\t\t\t\t\thome = Home.getHome(manager, file, id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(IOException e){\n\t\t\t\t\tthrow new RuntimeException(\"Cannot initialize file manager.\");\n\t\t\t\t}\n\t\t\t\tcatch(Throwable n){\n\t\t\t\t\tn.printStackTrace();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\tfile = null;\n\t\t\t\t}\n\t\t\t}}\n\t\t}\n\tprivate static class TestTask2 extends TestTask {\n\n\t\t@Override \n\t\tpublic void run(){\n\t\t\thome = Home.getHome(manager, file, id);\n\t\t}\n\t}\n\tprivate static class TestTask3 extends TestTask{\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tprivate long count = 0;\n\n\t\t@Override\n\t\tpublic void run(){\n\t\t\tUUID id = UUID.randomUUID();\n\t\t\tint value = id.getMostSignificantBits();\n\t\t\tSystem.out.println(\"This is a test with id: \" + value + \". The count of files created is: \" + count);\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t@Test\n\tpublic void getDefaultTemporaryFolder(){\n\t\tSystem.out.print(\"==getDefaultTemporaryFolder() ==\");\n\n    String home_ = System.getProperty(\"user.home\")+\".sWEINTHOME3SD\";//System.getProperty(\"user.dir\")+\"/Temp\";\n\n    File homepath   = new File(home_);\n    File default_tmp = new File(homepath, \"temp\");\n\n    File tmp = getDefaultTemporaryFolder(true);\n\n    if(!home_.equals(tmp.getAbsolutePath())){\n      assertNotEquals(\"The following files are left on Temp folder\",tmp.getAbsolutePath(),home_.concat(\"/Temp/Temp-\"));\n    }\n\t\tSystem.out.println(\"Temp folder created. The default folder is: \"+default_tmp.getAbsolutePath());\n\t\tSystem.out.println(\"Current operating system \"+ System.getProperty(\"os.name\"));\n\n\t\tFile temp_file = getDefaultTemporaryFolder(false);\n\t\tFile temp_tmp = temp_file;\n\n        assertNotEquals(\"File with temp folder created\",home_,home_.concat(\"/Temp/Temp-\"));\n\n        assertNotEquals(\"The following files are left on Temp folder\",tmp.getAbsolutePath(),temp_tmp.getAbsolutePath());\n    } else {\n      assertTrue(\"The following files are left on temp folder\",tmp.listFiles().length==0);\n        System.out.println(\"Default folder created, the number of files created is: \"+ count);\n    }\n\t}\n\n\t/**\n\t Returns default temporary folder.\n\t */\n",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tpublic void isMacOSXLeopardOrSuperior() throws IOException, ResourceBundle.MissingResourceException {\n\n\t\tfinal OperatingSystem thisOS = OperatingSystem.getInstance();\n\n\t\tassertNotNull(thisOS);\n\t\tassertNotNull(thisOS.getApplicationSupportFolder());\n\t\tassertNotNull(thisOS.getDefaultApplicationFolder());\n\t\tassertNotNull(thisOS.getDefaultTemporaryFolder(false));\n\t\t\n\t\tSystem.out.format(\"This OS: '%s' is operating under Mac OS X.\\n\", thisOS.toString());\n\t\t// No default folder.\n\t\t\n\t\tassertEquals(false, thisOS.isMacOSXLeopardOrSuperior());\n\t\tassertEquals(true, thisOS.isWindows());\n\t\t\n\t\tassertEquals(false, thisOS.isWindows());\n\t\tassertEquals(false, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\tassertEquals(false, thisOS.isWindows());\n\n\t\t// Check home folder with only one folder inside it.\n\t\tthisOS.getHome();\n\t\tassertEquals(true, thisOS.isWindows());\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\tassertEquals(true, thisOS.isWindows());\t\t\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\t// Check home folder with folder named \"Application Settings\".\n\t\tassertNotNull(thisOS.getApplicationSupportFolder());\n\t\tassertEquals(true, thisOS.isWindows());\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\tassertEquals(true, thisOS.isWindows());\n\t\t\n\t\t// Check home folder with only root folder inside it.\n\t\tassertNotNull(thisOS.getDefaultApplicationFolder());\n\t\tassertNotNull(thisOS.getTempFolder(true));\n\t\tassertEquals(true, thisOS.isWindows());\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\tassertEquals(true, thisOS.isWindows());\t\t\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\t\t\n\n\t\tassertEquals(false, thisOS.isMacOSXLeopardOrSuperior());\n\t\tassertEquals(false, thisOS.isWindows());\n\n\t\t// Check home folder with single file inside it.\n\t\tthisOS.getTempFolder(true);\n\t\tassertNotNull(thisOS.getApplicationSupportFolder());\n\t\tassertNotNull(thisOS.getTempFolder(true));\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\n\t\t// Check home folder with only 1 folder inside it.\n\t\tassertNotNull(thisOS.getDefaultTemporaryFolder(true));\n\t\tassertNotNull(thisOS.getTempFolder(true));\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\n\t\t\n\t\t// Check home folder with only root folder inside it.\n\t\tassertNotNull(thisOS.getDefaultApplicationFolder());\n\t\tassertNotNull(thisOS.getTempFolder(true));\n\t\tassertEquals(true, thisOS.isMacOSXLeopardOrSuperior());\t\t\n\n\t\tassertEquals(false, thisOS.isNative());\n\t\t\n\t\tassertEquals(false, thisOS.isNative());\n\t\t\n\t\t// No default folder.\n\t\t\n\t\t// No application folder.\n\t\t\n\t\t// No home folder.\n\t\t\n\t\t// No temp folder.\n\t}\n\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tstatic {\n\t\ttry {\n\t\t\t// Add folder from system's resource sub folder\n\t\t    File resourceFile = new File(OperatingSystem_3Test.class.getProtectionDomain().getCodeSource().getLocation().getFile());\n\t\t    resourceFile = resourceFile.getParentFile().getParentFile();\n\t\t    resourceFile = new File(resourceFile, \"../Platform/Resources/\");\n\t\t    resourceFile = new File(resourceFile, System.getProperty(\"user.dir\"));\n\t\t    FileManager.addToSystemFileManager(resourceFile);\n\t\t}\n\t\tcatch (AccessControlException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void isLinux(){\n\t\tassertNotNull(OperatingSystem_3Test.LinuxFileManager.getApplicationSupportFolder());\n\t}\n\n\n\n\t@Test\n\tpublic void isWindows(){\n\t\tassertNotNull(OperatingSystem_3Test.WindowsFileManager.getApplicationSupportFolder());\n\t}\n\t\n\t@Test\n\tpublic void isMacOSXLeopardOrSuperior(){\n\t\tassertNotNull(OperatingSystem_3Test.MacOSXFileManager.getApplicationSupportFolder());\n\t}\n\n\t@Test\n\tpublic void isMacOSXLeopardOrSuperior_testFileManager(){\n\t\tTimer timer = new Timer(\"File manager\");\n\t\tFileManager fileManager = new MacOSXFileManager();\n\t\ttimer.schedule(new FileManagerTask(fileManager), 10, 1000);\n\t\tassertNotNull(fileManager);\n\t}\n\n\t/**\n\t * Class that represent a task when operating system manager executes {@link FileManagerTask}.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprivate class FileManagerTask implements TimerTask {\n\t\tprivate FileManager fileManager;\n\n\t\tpublic FileManagerTask(FileManager fileManager){\n\t\t\tthis.fileManager = fileManager;\n\t\t\t\t\n\t\t}\n\t\t\n\t\tpublic void run(){\n\t\t\tFile file = fileManager.getFile(OperatingSystem_3Test.LinuxFileManager.getApplicationSupportFolder());\n            // check whether the root folder of system was created properly\n            if (file.toString().contains(\"/Platform/ResourceSubFolder\")){\n                assertTrue(file.toString());\n            }\n            else{\n                assertFalse(file.toString());\n            }\n\t\t\t\n\t\t\tFile tempFile = fileManager.getTemporaryFile();\n            if (tempFile.getName().equals(\"tempfile\")){\n                // check whether the default folder is used\n                try {\n                    file = fileManager.findFolder(Runtime.USED_PARAMETERS, 0x7fffffff);\n                    File found = null;\n                    \n                    if (file.exists()){\n                        found = file;\n                    }\n                    else{\n                        File targetFolder = new File(operatingSystem.TEMPORARY_SUB_FOLDER);\n                        File addedFolder = fileManager.addToDirectory(tempFile.getPath(), targetFolder);\n                        \n                        if (addedFolder == null){\n                            System.out.println(\"There was no folder created for temporary folder\");\n                        }\n                        else if (targetFolder.equals(addedFolder)){\n                            assertFalse(\"There was no folder added - \" + targetFolder.getPath(), true);\n                        }\n                    }\n                    FileManager.deleteResource(file);\n                    fileManager.getFile(OperatingSystem_3Test.WindowsFileManager.getApplicationSupportFolder());\n                    found = fileManager.hasFile(tempFile);\n                    \n                    assertTrue(found);\n                } catch (MissingResourceException e){\n                    File tempFileParent = new File(fileManager.getTemporaryFolder());\n                    fileManager.deleteResource(file);\n                    // remove all temporary files not in used folder\n                    FileManager.addToSystemFileManager(tempFileParent);\n                }\n                \n            }\n            \n\t\t\t// Check that all tests methods are called once\n\t\t\tassertEquals(\"testInit\", 1, fileManager.getFileManagers().size());\n\t\t\tassertEquals(\"testHasFile\", 1, fileManager.getFileManagers().get(0).getFileManagers().size());\n\t\t\tassertEquals(\"testHasFolder\", 1, fileManager.getFileManagers().get(0).getFiles().size());\n\t\t\t\n\t\t\ttry {\n\t\t\t\tfileManager.removeFromFolder(fileManager.getFileManagers().get(0));\n\t\t\t} catch (AccessControlException e) {\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// check that the test methods are called once\n\t\t\tassertEquals(\"testGetFile\", 1, fileManager.getFileManagers().size());\n\t\t\tassertEquals(\"testOpenFile\", 1, fileManager.getFileMan",
            "finish_reason": "length"
        }
    ],
    "id": "0e0de8a1-c865-4cf9-bded-7facf6613dd3",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_3Test.java",
    "original_code": "// OperatingSystem.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n *\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns <code>true</code> if current operating is Linux.\n     */\n    public static boolean isLinux();\n\n    /**\n     * Returns <code>true</code> if current operating is Windows.\n     */\n    public static boolean isWindows();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior();\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn't be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException;\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles();\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException;\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException;\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * <code>os.name</code> System property is <code>Mac OS X</code>.\n     * This class requires some classes of <code>com.apple.eio</code> package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "test_prompt": "// OperatingSystem_3Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#isMacOSXLeopardOrSuperior()} method.\n*/\nclass OperatingSystem_3Test {",
    "time_taken": 43.64087963104248,
    "usage": {
        "prompt_tokens": 967
    }
},
{
    "choices": [
        {
            "text": "/**\n\t\t * Checks that OperatingSystem_4Test.getDefaultApplicationFolder returns correctly\n\t\t * defined folder.\n\t\t */\n\t\t@Test\n\t\tvoid getDefaultApplicationFolder_1() {\n\t\t\tassertNotNull( OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../../../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../../../../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"..build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../..build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../../..build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"..../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"..../../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"../..../build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertEquals(new File(\"..../../..build\"), OperatingSystem.getDefaultApplicationFolder());\n\t\t\tassertNull( OperatingSystem.getDefaultApplicationFolder());\n\t\t\ttry {\n\t\t\t\tOperatingSystem.getDefaultApplicationFolder();\n\t\t\t\tassertTrue(\"Could not get an application folder\", false);\n\t\t\t} catch (final Exception e) {\n\t\t\t\tassertTrue(true);\n\t\t\t}\n\t\t}\n\t}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t* Checks if current operating system is Mac OS X 10.5 or superior.\n\t* @throws IOException any I/O exception\n\t*/\n\t@Test\n\tpublic void checkMacVersionTester() throws IOException{\n\t\tassertNotNull(OperatingSystem.getMacVersion()); // ensure check if Mac OS X was compiled from SDK 1.5 or later\n\t\tassertTrue(OperatingSystem.getMacVersion().startsWith(\"10.5u\")); // check if major version number of the OS is equal to 10.5\n\n\t\t//Check if SDK versions before 10.5 are older than 10.5t.9\n\t\t//(if SDKs are older than 10.5t, an error would occur)\n\t\tFile tmp = OperatingSystem.getDefaultApplicationFolder();\n\t\ttmp = OperatingSystem.getDefaultApplicationFolder();\n\t\tFile tmpNew = OperatingSystem.createTemporaryFile(\".tmp\", \"\");\n\t\tassertNotNull(tmpNew);\n        tmpNew = tmp;\n        FileManager.deleteAll(tmpNew);\n        FileManager.createFolder(tmpNew);\n        File tmpCompatibility = OperatingSystem.createTemporaryFolder(\"com.apple.lib\", \"\");\n        FileManager.deleteAll(tmpCompatibility);\n        FileManager.createFolder(tmpCompatibility);\n        FileWriter fw = new FileWriter(tmpCompatibility);\n        fw.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\n<SystemRoot xmlns=\\\"urn:schemas-microsoft-com:office:office\\\" pathStart=\\\"/lib\\\" />\\n\");\n        fw.close();\n\t\tassertNotNull(tmpCompatibility);\n\t\ttmpCompatibility = tmpNew;\n\t\ttmpCompatibility = tmpCompatibility.getParentFile();\n\t}\n\n\n}// OperatingSystem_4Test.java",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid getDefaultApplicationFolder_ReturnsTheAppropriateAppFolderWhenOsWindows();\n\t\n\t@Test\n\tvoid getDefaultApplicationFolder_ReturnsTheAppropriateAppFolderWhenOsMacOSX();\n\t\n\t@Test\n\tvoid getDefaultApplicationFolder_ReturnsTheAppropriateAppFolderWhenOsMacOSXLeopardOrSuperior();\n\t\t\n}\n\n/**\n* This test class specifies the {@link OperatingSystem} static fields by which all the tests for the\n* class are considered within this test case. \n* Note that this test class is tested in the same test cases\n* as test OperatingSystem_4Test, to compare the behavior between Java 1.7 and Java 1.6 version.\n*/\ninterface OperatingSystem_4Test{\n\t\t\n\tFile getDefaultApplicationFolder();\n\t\n\tFile getDefaultApplicationFolderMacOSX() throws Exception;\n\t\n\tFile getDefaultApplicationFolderWindows() throws Exception;\n\t\n\tFile getDefaultApplicationFolderWindowsLeopard() throws Exception;\n\n        FileManager getFileManagerByFileManagerClass(File fileManagerClass, boolean isWindows);\n\n\tFile getDefaultTemporaryFile(String prefix, String suffix);\n\t\n    File getDefaultTemporaryFolder() throws IOException;\n\t\n\tFile createTemporaryFile(String prefix, String suffix) throws IOException;\n\t\n\tFile createTemporaryFolder(String prefix, String suffix) throws IOException;\n\t\n\t/*\n\t * (non-Javadoc)\n\t * @see com.eteks.sweethome3d.model.Home#check()\n\t */\n\tboolean check(Home home, File root);\n\n\t/*\n\t * (non-Javadoc)\n\t * @see com.eteks.sweethome3d..model.Home#getHome()\n\t */\n\tHome getHome();\n\n\n\t/*\n\t * (non-Javadoc)\n\t * @see com.eteks.sweethome3d.model.Home#getApplicationSupportFolder()\n\t */\n\tString getApplicationSupportFolder();\n\t\n\t// (non-Javadoc)\n\t// FileManager.Checker.FileManagerClass checkClass(FileManager.Checker.FileManagerClass fileManagerClass);\n\tFileManager.FileManagerClass getFileManagerClass(FileManager.FileManagerClass fileManagerClass);\n\n\tFileManager.FileManagerClass getFileManagerClassMacOSX(FileManager.FileManagerClass fileManagerClass);\n\n\tFileManager.Checker.FileManagerClass checkClass(FileManager.Checker.FileManagerClass fileManagerClass);\n\n\tFile getDefaultTemporaryFolderLeopard();\n\n\t/**\n\t * Creates a temporary folder\n\t * @throws IOException \n\t*/\n\tFile createTemporaryFolderLeopard() throws IOException; \n\t\n\t/**\n\t * Starts timer and returns {@link TimerTask} instance to wait for process termination.\n\t * @throws Exception \n\t */\n\tTimerTask startTimerTaskLeopard() throws Exception;\n\n\t/**\n\t * Creates a temporary folder\n\t * @throws IOException \n\t*/\n\tFile createTemporaryFolder() throws IOException; \n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n    public void testGetDefaultApplicationFolder() throws IOException, MissingResourceException, AccessControlException {\n\t\tString subFolderName = \"com.eteks.sweethome3d\";\n\t\t// test if application folder exists\n\t\tString subFolderPath = new File(\"/Applications/\" + subFolderName).getAbsolutePath();\n\t\tFile fileApplicationFolder = new File(subFolderPath);\n\t\tassertTrue(fileApplicationFolder.exists(), \"Application folder not exists\");\n\t\t// test if subfolder is correct\n\t\tassertEquals(subFolderNodeName, subFolderName, subFolderPath);\n\t}\n\t\n\t\n\t@Test\n    public void testGetDefaultHome() throws IOException, RuntimeException {\n\t\tString homeFolderName = \"home\";\n\t\t// test it can return home object\n\t\tHome home = OperatingSystem.getHome(homeFolderName);\n\t\tassertNotNull(home, \"Home is null\");\n\t\t// test if the current home matches the passed one\n\t\tassertInstanceOf(Home.class, home, \"Failed to find home of the passed one\");\n\t\t// test if home exists\n\t\tassertTrue(!home.getHome().equals(\"\"), \"Home folder is empty\");\n\t\t// test if home and home folder are correct\n\t\tassertEquals(homeFolderName, home.getHomeName(), homeFolderName);\n\t\tassertTrue(!home.getHome().equals(home), \"home matches home name\");\t\t\n\t\t// test create a new home with specified folder name\n\t\tHome homeWithFolderName = new Home(homeFolderName);\n\t\tassertNotNull(homeWithFolderName, \"Home is null\");\n\t\tassertEquals(homeWithFolderName.getHomeName(), homeFolderName, \"home folder name is wrong\");\n\t\t//test if home and home folder are correct\n\t\tassertEquals(homeFolderName, homeWithFolderName.getHomeName(), homeFolderName);\n\t\t// test the home folder is created\n\t\tassertTrue(!homeWithFolderName.getHome().equals(\"\"), \"home folder not created yet\");\n\t\t// test if it can be deleted with the home\n\t\tassertTrue(Executor.isExecuting(home), \"Failed to delete home folder\");\n\t\t// wait for the timer end\n\t\tTimer timer = new Timer();\n\t\t\t\n\t\tfinal Home homeAfterTimer = new Home(home.getHome(), home.getHomeName(), UUID.randomUUID().toString());\n\t\t\t\n\t\tassertTrue(Executor.isExecuting(homeAfterTimer), \"Failed to delete home folder\");\n\t\ttimer.schedule(new TimerTask() {\n\n\t\t\t@Override\n            public void run() {\t\t\t\n\t\t\t\tExecutor.delete(home);\n\t\t\t}\n\t\t}, 1000, 10800);\n\t\t// wait for a while for the home deleted\n\t\tassertTrue(Executor.isExecuting(home), \"Failed to delete home folder\");\n\t\t\n\t\t// test the home is deleted\n\t\tassertFalse(Home.isHomeFolder(home), \"home folder has existed\");\n\t\t\n\t}\n\t\n\t\n\t@Test\n    public void testGetDefaultTemporaryFolder(){\n\t\t\n\t\tString subFolderName = \"temporary\";\n\t\t// test if the default temporary folder exists\n\t\tFile folder = new File(\"/Users/UserName/TemporaryFolder\" + subFolderName);\n\t\tassertTrue(folder.exists(), \"Temporary folder not exists\");\n\t\t// test if we can create a new folder\n\t\tString folderContent = \"my name\" + File.separator + File.separator;\n\t\tFile folderFile = new File(folder.getAbsolutePath() + File.separator + subFolderName);\n\t\tassertTrue(folderFile.exists(), \"Temporary folder is empty\");\n\t\t// test if it can create a new folder\n\t\tassertTrue(new File(folderFile.getAbsolutePath() + File.separator + subFolderName).mkdir(), \"Folder folder is created\");\n\t}\n\t\n\tprivate <T> File getInstanceOf(Class<T> clazz, File file){\n\t\treturn ((FileManager)System.getSecurityManager().getClassContext().getClassLoader()).getFile(clazz.getName()).createTempFile(null, file.getName());\n\t}\n\n\tprivate static class MyTimer extends Timer {\n\n    \tprivate String timerName;\n\n\t\t@Override\n        public void run() {\n            File f = getInstanceOf(MyTimer.class, getClass().getClassLoader().getResourceAsFile(\"timers/\"+ timerName) );\n            try {\n            \tf.delete();\n            } catch (IOException e) {\n                System.out.println(e.getMessage() + \" (or other reason for it) \");\n                e.printStackTrace();\n            }\n\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Tests the {@link OperatingSystem.getDefaultApplicationFolder()} method.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetDefaultApplicationFolder() {\n\t\t\tassertNotNull(\n\t\t\t\t\"The default application folder doesn't exist.\",  //$NON-NLS-1$\n\t\t\t\tOperatingSystem.getDefaultApplicationFolder()\n\t\t\t);\n\t\t\tassertEquals(\n\t\t\t\t\"The current application folder can't be equal to the default application folder.\",  //$NON-NLS-1$\n\t\t\t\tnew File(getDefaultApplicationFolder()).getAbsolutePath(),\n\t\t\t\tOperatingSystem.getDefaultApplicationFolder()\n\t);\n\t\t}\n\n\t\t/**\n\t\t* Tests if the default application folder exists.\n         * @throws IOException if the default application folder doesn't exist\n\t\t */\n\t\t@Test\n\t\tpublic void testCheckApplicationFolderExists() throws IOException {\n\t\t\ttry {\n\t\t\t\tFileManager.createFolder(getDefaultApplicationFolder());\n\t\t\t}\n\t\t\tcatch(AccessControlException e) {\n\t\t\t\t// The Application's home folder can't be created.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tFileManager.createFolder(new File(getDefaultApplicationFolder()).getAbsolutePath());\n\n\t\t\tassertTrue(\n\t\t\t\t\"The default application folder should be created.\",\n\t\t\t\tFileManager.exists(getDefaultApplicationFolder())\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t* Tests if default working directory is in a temporary folder.\n\t\t* @throws IOException\n\t\t*/\n\t\t@Test\n\t\tpublic void testIsTempDirectory() throws IOException {\n\t\t\tcreateTemporaryFolder(\"\");\n\t\t\tassertTrue(\n\t\t\t\t\"The default working directory should be in a temporary folder.\",\n\t\t\t\tFileManager.exists(new File(OperatingSystem_4Test.getDefaultWorkingDirectory()).getAbsolutePath()))\n\t\t};\n\n\t\t/**\n\t\t * Tests if default working folder is in a temporary folder\n\t\t*/\n\t\t@Test\n\t\tpublic void testIsTempFile() throws IOException {\n\t\t    File working = new File(\n                        OperatingSystem_4Test.getDefaultWorkingDirectory() + File.separator + \"TMP\"\n\t\t);\n\t\t    assertTrue(fileExists(work), \"The default working folder should be in a temporary folder.\");\n\t\t    FileManager.createFolder(working);\n\t\t};\n\n\t\t/**\n\t\t * Tests if default working folder is in a directory specified by a user\n\t\t* @param prefix name to be inserted at the beginning of the folder name.\n         * @throws IOException if the default working directory doesn't exist\n\t\t */\n\t\tprivate void testUserSpecifiedWorkingDirectir(String prefix)\n\t\t\tthrows IOException\n\t\t{\n\t\t\tcreateTemporaryFolder(prefix);\n\t\t\tcreateTemporaryFile(prefix, \"dir\");\n\t\t\tFile dir = new File(getDefaultWorkingDirectory() + File.separator + \"dir\", getTempFolder());\n\t\t\tassertTrue(!fileExists(dir), dir.getAbsolutePath());\n\t\t\tassertTrue(fileExists(new File(dir, \"dir\").getAbsolutePath()), dir.getAbsolutePath());\n\t\t\tcreateTemporaryFile(prefix, \"file\");\n\t\t\tFile file = new File(getDefaultWorkingDirectory() + File.separator + \"file\", getTempFolder());\n\t\t\tassertTrue(!fileExists(file), file.getAbsolutePath());\n\t\t\tassertTrue(fileExists(new File(file, \"dir\").getAbsolutePath()), file.getAbsolutePath());\n\t\t}\n\n\t\t/**\n\t\t * Tests if default working directory is in a tmp, temp or default directory\n\t\t * @param prefix name to be inserted at the beginning of the folder name.\n\t\t */\n\t\tprivate void testUserSpecifiedWorkingDirectir(String prefix)\n\t\t\tthrows IOException\n\t\t{\t\t\n\t\t    String currentDirectory = getDefaultWorkingDirectory();\n\t\t    FileManager.createFolder(currentDirectory);\n\t\t  \n\t\t    createTemporaryFolder(prefix);\n\t\t    createTemporaryFile(prefix, \"dir\");\n\t\t    File dir = new File(getDefaultWorkingDirectory() + File.separator + \"dir\", getTempFolder());\n\t\t    assertTrue(!fileExists(dir), dir.getAbsolutePath());\n\t\t    assertTrue(fileExists(new File(dir, \"dir\").getAbsolutePath()), dir.getAbsolutePath());\n\t\t    createTemporaryFile(prefix, \"file\");\n\t\t    File file = new File(getDefaultWorkingDirectory() + File.separator + \"file\", getTempFolder());\n\t\t    assertTrue(!fileExists(file), file.getAbsolutePath());\n\t\t    assertTrue(fileExists(new File(file, \"dir\").getAbsolutePath()), file.getAbsolutePath());\n\t\t}\n\n\t\t/**\n\t\t * Tests for the user",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tvoid ensureCorrectDefaultPathIsCreated() {\n\t\tHome home = Home.INSTANCE;\n\t\tFile parentFile = home.getUserHome();\n\t\tString newPath = OperatingSystem.getDefaultApplicationFolder() + File.separator + UUID.randomUUID().toString();\n\t\ttry {\n\t\t\tassertEquals(parentFile, new File(newPath));\n\t\t} catch (IOException io) {\n\t\t}\n\t}\n\t\n\t@Test\n\tvoid ensureCorrectApplicationFolderIsCreated() throws IOException {\n\t\tFile root = OperatingSystem.getDefaultApplicationFolder();\n\t\tFile folder = new File(root.getAbsolutePath() + File.separator + \"/Temporary\");\n\t\tfolder.mkdir();\n\t\tassertTrue(folder.exists());\n\t}\n\t\n\t@Test\n\tvoid ensureCorrectApplicationFolderForEquality() throws IOException {\n\t\tfor (File folder : OperatingSystem.getDefaultApplicationFolder().listFiles()) {\n\t\t}\n\t\tFile root = OperatingSystem.getDefaultApplicationFolder();\n\t\tFile folder = new File(root.getAbsolutePath() + File.separator + \"/Temporary\");\n\t\tassertFalse(folder.exists());\n\t}\n\t\n\t@Test\n\tvoid getDefaultTemporaryFolderDoesNotExist() {\n\t\tFile folder = OperatingSystem.getDefaultTemporaryFolder(true);\n\t\tassertEquals(\"Could not create temporary files\", 0, folder.listFiles().length);\n\t}\n\t\n\t/**\n\t * This class contains utility methods that are not part of class of org.junit.jupiter.api.Jupiter\n\t */\n\tpublic class MacOSXFileManagerTest {\n\t\t\n\t\t@Test\n\t\tvoid ensureSystemDefaultsFolderIsReadOnly() throws IOException {\n\t\t\tassertTrue(\"File should be created with read only access\",\n\t\t\t\t\tMacOSXFileManager.hasFileBeenCreated(new File(\"/tmp\")));\n\t\t}\n\t\t\n\t\tpublic boolean hasFileBeenCreated(File file) {\n\t\t\treturn file.exists() && file.isFile();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * This class contains utility methods that are not part of class of org.junit.jupiter.api.Jupiter\n\t */\n\tpublic class getDefaultTemporaryFolderTest {\n\t\t\n\t\t@Test\n\t\tvoid ensureTemporaryFolderExists() throws IOException {\n\t\t\tassertTrue(\"File should be created\",\n\t\t\t\t\tMacOSXFileManager.hasFileBeenCreated(OperatingSystem.getDefaultTemporaryFolder(true)));\n\t\t}\n\t\t\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    void getDefaultApplicationFolder() throws IOException {\n    \t\tFile application = OperatingSystem.getDefaultApplicationFolder();\n    \t\tassertNotNull(application);\n    \t\tassertTrue(application.exists());\n    \t\t\n\t\t\t/* Check if user's folder exists from System property */\n    \t\tString prefix = OperatingSystem.getSystemProperty(\"applications.subs\");\n    \t\tFile appfile = new File(application, prefix);\n    \t\tassertNotNull(appfile);\n    \t\tassertTrue(appfile.exists());\n    \t\n\t\t\t/* Remove file from folder and check if user's folder is deleted */\n    \t\tString suffix = \".log\";\n\t        File fileApp = new File(application, suffix);\n    \t\tassertFalse(fileApp.exists());\n    }\n\n    @Test\n    void getDefaultApplicationFolder() throws IOException {\n        deleteTemporaryFiles();\n        \n        File application = OperatingSystem.getDefaultApplicationFolder();\n        assertNotNull(application);\n        assertTrue(application.exists());\n    }\n\n    @Test\n    void getDefaultTemporaryFolder() throws IOException {\n\n    }\n\n    @Test\n    void createTemporaryFile() throws IOException {\n    \t\t// Create temporary file with name\n    \t\tString temp = UUID.randomUUID().toString();\n    \t\tString prefix = OperatingSystem.getSystemProperty(\"temporary.subs\");\n    \t\tFile tempdir = new File(TemporaryFile.getTempFolder(), prefix);\n    \t\tassertNotNull(tempdir);\n    \t\tFile f = File.createTempFile(\"temp\", \".tmp\", tempdir);\n    \t\tassertNotNull(f);\n    \t\tassertTrue(f!= null);\n    \t\ttry {\n\t    \t\tThread.sleep(100);\n\t    \t\tassertTrue(f.delete());\n    \t\t} catch (IOException e) {\n    \t\t\tassertTrue(e instanceof IllegalStateException);\n    \t\t}\n    \t\ttry {\n\t    \t\tint a = 1000;\n\t    \t\t/*\n\t    \t\t\tFile f = File.createTempFile(temp, \"a\", f);\n\t    \t\t\tassertNotNull(f);\n\t    \t\t\tassertTrue(f.delete());\n\t    \t\t*/\n    \t\t} catch (NullPointerException | IOException e) {\n    \t\t\tfail();\n    \t\t}\n    \t\ttry {\n    \t\t\tint a = 1000;\n\t\t\t\t/*\n\t    \t\t\tFile f = File.createTempFile(temp, \".a\", f);\n\t    \t\t\tassertNotNull(f);\n\t    \t\t\tassertTrue(f.delete());\n\t    \t\t*/\n    \t\t} catch (IOException e) {\n    \t\t\tfail();\n    \t\t}\n    \t\ttry {\n    \t\t\tif(f.exists())\n\t\t\t\t{\n    \t\t\t\tassertTrue(fileExists(f));\n                }else\n                {\n                    assertFalse(f.exists());\n                }\n            } catch (IOException e) {\n                fail();\n            }\n    }\n\n    /**\n     * This method is executed only once.\n     */\n    private void checkTimerExpired() throws IOException {\n    \t\tif (Timer.activeCount() == 0) {\n    \t\t\treturn;\n    \t\t}\\\n    \t\tassertTrue(Timer.activeCount() > 0);\n    }\n\n    /**\n     * This method has a 1% chance of throwing exception.\n     */\n    private boolean fileExists(File f) throws IOException {\n\t\ttry {\n\t\t\tFileManager.getInstance().getFileContent(f.getPath());\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Checks that operating system is able to create directory with the supplied path.\n\t*/\n\t@Test\n\tpublic void testGetDefaultApplicationFolder() throws IOException {\n\t\tFile workingDirectory = new File(System.getProperty(\"user.dir\"));\n\n\t\tHome home = Home.getHome();\n\t\thome.setEnvironmentType(Home.TYPE_WINDOWS);\n\t\thome = home.addDeviceType(Home.TYPE_WINDOWS);\n\n\t\t// creating sub directory\n\t\tFile tempHomeSubFolder = home.newDirectory(home.newFolder(home.getApplicationSubFolderName()));\n\t\thome.setApplicationSubFolderName(home.newFolder(home.getApplicationSubFolderName()));\n\t\thome.setApplicationSubFolder(home.newFile(home.newFolder(home.getApplicationSubFolderName() + \"/\") + home.getApplicationSubFolderName()));\n\t\thome.addApplicationSubDirectory(tempHomeSubFolder);\n\n\t\t// creating application folder\n\t\tFile tempApplicationFolder = home.newFolder(home.getApplicationFolderName() + \"/\" + home.getApplicationSubFolderName());\n\t\thome.setApplicationFolderName(home.newFolder(home.getApplicationFolderName()));\n\t\thome.setApplicationFolder(home.newFile(home.newFolder(home.getApplicationFolderName() + \"/\") + home.getApplicationFolderName()));\n\t\thome.addApplicationFolder(tempApplicationFolder);\n\n\t\t//creates temp folders for testing\n\t\thome.getApplicationSubFolderName() + \"/\" + home.getApplicationSubFolderName();\n\t\thome.getApplicationFolderName() + \"/\" + home.getApplicationFolderName() + \"/\";\n\t\thome.getApplicationSubFolderName() + \"/\" + home.getApplicationSubFolderName();\n\t\thome.getApplicationFolderName() + \"/\" + home.getApplicationFolderName();\n\n\t\tif(!workingDirectory.exists()) {\n\t\t\tworkingDirectory.mkdirs();\n\t\t}\n\t\tFile tempHome = home.getDefaultHome();\n\t\tFile tempApplicationFolder = home.getApplicationFolder();\n\t\thome.deleteHome();\n\t\thome.deleteFolder();\n\t\thome.deleteFolder();\n\n\t\tassertTrue(\"Could not create directory\", workingDirectory.createNewFile());\n\t\tassertTrue(\"Create folder before creating application\", workingDirectory.mkdirs() == 0);\n\t\tassertTrue(\"Application folder not created\", tempApplicationFolder.exists() );\n\t\tassertTrue(\"Application folder should exists\", tempApplicationFolder.isDirectory());\n\t\tassertEquals(\"Name of application folder does not match expected\", home.getApplicationFolderName(),tempApplicationFolder.getName());\n\t\tassertTrue(\"Home folder not created\", home.getHome() == null);\n\t\tassertTrue(\"Home folder doesn't exist\", home.getHome() == null);\n\n\t\tFile home_3_6 = home.getDefaultApplicationFolder();\n\t\tassertTrue(\"Application folder should exist\", home_3_6!= null);\n\t\tassertTrue(\"Application folder does not exist\",!home_3_6.exists());\n\t\tassertTrue(\"Delete home folder\", home.deleteHome());\n\t\thome.shutdown();\n\n\t\tassertTrue(\"Could not create folder\", home_3_6.mkdir());\n\t\tassertTrue(\"Home folder created\", home_3_6.exists() == true);\n\t\tassertTrue(\"Home folder doesn't exist\", home_3_6.isDirectory());\n\t\thome_3_6.delete();\n\t\tassertTrue(\"Home folder deleted\", home_3_6.exists() == false);\n\t}\n\n\n\t//@Test\n\t  public void testGetDefaultApplicationFolder() throws IOException {\n\t        File workingDirectory = new File(System.getProperty(\"user.dir\"));\n\n\t    Home home = Home.getHome();\n\t    home.setEnvironmentType(Home.TYPE_WINDOWS);\n\t    home = home.addDeviceType(Home.TYPE_WINDOWS);\n\n\t    // creating sub directory\n\t    File tempHomeSubFolder = home.newDirectory(home.newFolder(home.getApplicationSubFolderName()));\n\t    home.setApplicationSubFolderName(home.newFolder(home.getApplicationSubFolderName()));\n\t    home.setApplicationSubFolder(home.newFile(home.newFolder(home.getApplicationSubFolderName() + \"/\") + home.getApplicationSubFolderName()));\n\t    home.addApplicationSubDirectory(tempHomeSubFolder);\n\n\t    // creating application folder\n\t    File tempApplicationFolder = home.newFolder(home.getApplicationFolderName() + \"/\" + home.getApplicationSubFolderName());\n\t    home.setApplicationFolderName(home.newFolder(home.getApplicationFolderName()));\n\t    home.setApplicationFolder(home.newFile(home.newFolder(home.getApplicationFolderName() + \"/\") +",
            "finish_reason": "length"
        },
        {
            "text": "\n    private OperatingSystem() {\n    }\n    \n    // Test method of {@link OperatingSystem#getDefaultApplicationFolder()}\n    @Test\n    void getDefaultApplicationFolder() throws IOException {\n        assertNotNull(\"The default folder cannot be null.\", OperatingSystem.getDefaultApplicationFolder());\n    }\n    \n    // Test method of {@link OperatingSystem#getDefaultApplicationFolder()}\n    @Test\n    void getDefaultApplicationFolderWithAbsolute() throws IOException {\n        // Assure that empty file is created.\n        assertTrue(\"Created file cannot be empty.\", getFileManager().getFileManager().exists(\"\"));\n    }\n    \n    // Test method of {@link OperatingSystem#getDefaultApplicationFolder()}\n    @Test\n    void getDefaultApplicationFolderWithRelative() throws IOException {\n        File tmpFile = OperatingSystem.createTemporaryFile(\"relative\", \".tmp\");\n        assertNotNull(\"Created file can't be null.\", tmpFile);\n        FileManager fileManager = getFileManager();\n        File destFile = getTempFolder();\n        assertTrue(\"Dest file can't be null.\", destFile!= null);\n        fileManager.setDestFolder(\"..\\\\tmp\");\n        assertTrue(\"Dest folder can't be null.\", destFile!= null);\n        fileManager.setDestFolder(tmpFile.getAbsolutePath());\n        File tempFile = OperatingSystem.createTemporaryFile(\"relative\", \".tmp\");\n        assertNotNull(\"Failed to create new file.\", tempFile);\n        assertFalse(\"Failed to move to the destination.\", tempFile == destFile);\n        assertTrue(\"Failed to create temporary file.\", fileManager.getFileManager().exists(\"..\\\\tmp\\\\tmp\"));\n        // If empty file is created, this tests will fail.\n        assertTrue(fileManager.getFileManager().exists(tmpFile) ||!fileManager.getFileManager().exists(destFile));\n        assertTrue(\"File should be created.\", fileManager.getFileManager().exists(tmpFile));\n        assertFalse(\"File shouldn't be created.\", fileManager.getFileManager().exists(destFile));\n        FileManager testFileManager = getFileManager();\n        assertFalse(\"Failed to move folder and file\", testFileManager.exists(tmpFile) || testFileManager.exists(destFile));\n        assertTrue(\"Failed to exist directory.\", testFileManager.exists(tmpFile));\n    }\n    \n    // Test method of {@link OperatingSystem#getDefaultApplicationFolder()}\n    @Test\n    void getDefaultApplicationFolderWithTempFolder() throws IOException {\n        // If destination folder can not be null, this will fail\n        FileManager tmpFileManager = getFileManager();\n        assertNotNull(tmpFileManager);\n        FileManager destFileManager = getFileManager();\n        assertNotNull(destFileManager);\n        assertTrue(tmpFileManager.getDestFolder() == null);\n        assertTrue(destFileManager.getDestFolder() == null);\n        // The dest folder is the default if nothing is changed\n        assertNull(tmpFileManager.getDestFolder());\n        destFileManager.setDestFolder(tmpFileManager.getTempFolder());\n        // The temporary folder is the dest folder if not null else null\n        assertNull(tmpFileManager.getDestFolder());\n        // The test folders do not equal the default\n        assertNotSame(tmpFileManager.getTempFolder(), destFileManager.getTempFolder());\n        assertNotSame(tmpFileManager.getTempFolder(), OperatingSystem.getDefaultApplicationFolder());\n        assertNotSame(destFileManager.getTempFolder(), OperatingSystem.getDefaultApplicationFolder());\n        tmpFileManager.setTempFolder(tmpFileManager.getTempFolder());\n        destFileManager.setTempFolder(tmpFileManager.getTempFolder());\n        tmpFileManager.setTempFolder(null);\n        assertNotSame(tmpFileManager.getTempFolder(),  OperatingSystem.getDefaultApplicationFolder());\n        assertNotSame(destFileManager.getTempFolder(),  OperatingSystem.getDefaultApplicationFolder());\n        assertNotSame(tmpFileManager.getTempFolder(),  tmpFileManager.getTempFolder());\n        tmpFileManager.setDestFolder(tmpFileManager.getTempFolder());\n        tmpFileManager.setTempFolder(null);\n        assertNotSame(tmpFileManager.getTempFolder(),  tmpFileManager.getTempFolder());\n        assertSame(tmpFileManager.getTempFolder(),  tmpFileManager.getTempFolder());\n    }\n    \n    // Test method of {@link OperatingSystem#getDefaultApplicationFolder()}\n    @Test\n    void getDefaultApplicationFolderWithTempFolder1() throws IOException {\n        // If tempFolder doesn't exist, this will fail\n        FileManager tmp",
            "finish_reason": "length"
        },
        {
            "text": "static final ThreadLocal<Home> home = new ThreadLocal<Home>();\n\t\t\n\t\t@Test\n\t\tvoid getDefaultApplicationFolderTest01() {\n\t\t\tassertNotNull(getDefaultApplicationFolder());\n\t\t}\n\n\t\t@Test\n\t\tvoid getDefaultApplicationFolderTest02() {\n\t\t\tHome testHome = home.get();\n\t\t\tassertEquals(\"foo.com\", testHome.getProperty(\"Foo.com\"));\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid getDefaultApplicationFolderTest03() {\n\t\t\tHome testHome = home.get();\n\t\t\tResourceBundle props = new ResourceBundle() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected Object handleGetObject(String key) {\n\t\t\t\t\tObject value = super.handleGetObject(key);\n\t\t\t\t\tassertTrue(value instanceof File);\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t};\n\t\t\tassertEquals(\"file.path\", testHome.getProperty(\"File.path\"));\n\t\t\tassertEquals(\"file.properties\", testHome.getProperty(\"File.properties\"));\n\t\t\tassertEquals(\"file.txt\", testHome.getProperty(\"File.txt\"));\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid getDefaultApplicationFolderTest44() throws IOException {\n\t\t\tassertNotNull(getDefaultApplicationFolder());\n\t\t}\n\n\n\t\t@Test\n\t\tvoid deleteTempFolderTest01() {\n\t\t\tFile tmpFolder = createTemporaryFile(\"tmpFolder\", TEMPORARY_FILE_SUFFIX);\n\t\t\tassertNotNull(\"createTemporaryFile failed\", tmpFolder);\n\t\t\t\n\t\t\t// This test does not work as we delete old sub folders without\n\t\t\t// the above test.  Instead we just delete empty sub folder and keep it\n\t\t\tassertFalse(\"Could not clean temporary folder\", tmpFolder.exists());\n    \t}\n    \n    \t@Test\n    \tvoid deleteTempFolderTest02() throws IOException {\n    \t\tFile tmpFolder = createTemporaryFile(\"tmpFolder\", TEMPORARY_SUB_FILE_SUFFIX);\n    \t\tassertNotNull(\"createTemporaryFile failed\", tmpFolder);\n    \t\t\n    \t\tassertTrue(\"Could not delete temporary folder\", tmpFolder.exists());\n    \t}\n    \t\n    \t@Test\n    \tvoid deleteTempFolderTest03() {\n    \t\tFile tmpFolder = createTemporaryFile(\"tmpFolder\", TEMPORARY_SUB_FILE_SUFFIX);\n    \t\tassertNotNull(\"createTemporaryFile failed\", tmpFolder);\n    \t\tassertTrue(\"Could not delete temporary folder\", tmpFolder.exists());\n    \t\t\n    \t\ttry {\n\t\t\t\ttmpFolder.delete();\n\t\t\t} catch (SecurityException e) {\n\t\t\t\t// Do nothing and the test succeeded.\n\t\t\t}\n    \t\tassertFalse(\"Could not delete temporary folder\", tmpFolder.exists());\n    \t}\n\n    \t@Test\n    \tvoid deleteTempFolderTest05() {\n    \t\tassertTrue(\"Unable to delete temporary folder\",\n\t\t\t\t!FileManager.exists(new File(getDefaultTemporaryFolder().getAbsolutePath(), TEMPORARY_SUB_FOLDER)));\n    \t}\n\n\n\t\t@Test\n\t\tvoid deleteTempFolderTest06() throws IOException {\n\t\t\tFile tmpFolder = createTemporaryFile(\"tmpFolder\", TEMPORARY_SUB_FILE_SUFFIX);\n\t\t\tassertNotNull(\"createTemporaryFile failed\", tmpFolder);\n\t\t\tassertTrue(\"Could not delete temporary folder\", tmpFolder.exists());\n\t\t\t\n\t\t\tassertTrue(\"Could not delete temporary folder\", \n\t\t\t\t\tFileManager.exists(new File(tmpFolder.getAbsolutePath(), TEMPORARY_SUB_FOLDER)));\n\t\t\t\n\t\t\tassertTrue(\"Could not delete temporary folder\",\n\t\t\t\t\tFileManager.exists(new File(getDefaultTemporaryFolder().getAbsolutePath(), tmpFolder)));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tFileManager.deleteFile(tmpFolder);\n\t\t\t} catch (AccessControlException e) {\n\t\t\t\t// This is a temporary error, so it should just fail.\n\t\t\t} \n\n\t\t\tassertFalse(\"Could not delete temporary folder\", \n\t\t\t\t\tFileManager.exists(new File(tmpFolder.getAbsolutePath())));\n\t\t\tassertFalse(\"Could not delete temporary folder\",\n\t\t\t\t\tFileManager.exists(new File(getDefaultTemporaryFolder().getAbsolutePath())));\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid isMacOsXTestTest01() throws IOException {\n\t\t\tassertFalse(isMacOSX());\n\t\t}\n\n\t\t@Test\n\t\tvoid isMacOsX() {\n\t\t\tassertFalse(isMacOSX());\n\t\t\tassertTrue(isLinux());\n\t\t\tassertTrue(isWindows());\n            \n            assertTrue(isWindows());\n        }\n    }\n\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "cf24fd0d-0b23-4d97-82fe-40a292a32b68",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_4Test.java",
    "original_code": "// OperatingSystem.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n *\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns <code>true</code> if current operating is Linux.\n     */\n    public static boolean isLinux();\n\n    /**\n     * Returns <code>true</code> if current operating is Windows.\n     */\n    public static boolean isWindows();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX();\n\n    /**\n     * Returns <code>true</code> if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior();\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn't be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException;\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles();\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException;\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException;\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * <code>os.name</code> System property is <code>Mac OS X</code>.\n     * This class requires some classes of <code>com.apple.eio</code> package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "test_prompt": "// OperatingSystem_4Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains one unit test case for the {@link OperatingSystem#getDefaultApplicationFolder()} method.\n*/\nclass OperatingSystem_4Test {",
    "time_taken": 43.783119916915894,
    "usage": {
        "prompt_tokens": 962
    }
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "379b0d8c-61e2-4945-af9b-d127a442e677",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/TextureChoiceComponent.java",
    "original_code": "// TextureChoiceComponent.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.AffineTransform;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport javax.swing.AbstractListModel;\nimport javax.swing.BorderFactory;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.TransferHandler;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.HomeTexture;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceController;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * Button displaying a texture as an icon. When the user clicks\n * on this button a dialog appears to let him choose an other texture.\n */\npublic class TextureChoiceComponent extends JButton implements TextureChoiceView {\n\n    private final UserPreferences preferences;\n\n    /**\n     * Creates a texture button.\n     */\n    public TextureChoiceComponent(final UserPreferences preferences, final TextureChoiceController controller) {\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected texture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteSelectedCatalogTexture();\n\n    /**\n     * A panel that displays available textures in a list to let user make choose one.\n     */\n    private static class TexturePanel extends JPanel {\n\n        private static final int PREVIEW_ICON_HEIGHT = 64;\n\n        private TextureChoiceController controller;\n\n        private TextureImage previewTexture;\n\n        private JLabel chosenTextureLabel;\n\n        private JLabel texturePreviewLabel;\n\n        private JLabel availableTexturesLabel;\n\n        private JList availableTexturesList;\n\n        private JButton importTextureButton;\n\n        private JButton modifyTextureButton;\n\n        private JButton deleteTextureButton;\n\n        public TexturePanel(UserPreferences preferences, TextureChoiceController controller) {\n            super(new GridBagLayout());\n            this.controller = controller;\n            createComponents(preferences, controller);\n            setMnemonics(preferences);\n            layoutComponents();\n        }\n\n        /**\n         * Creates and initializes components.\n         */\n        private void createComponents(final UserPreferences preferences, final TextureChoiceController controller) {\n            this.availableTexturesLabel = new JLabel(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"availableTexturesLabel.text\"));\n            this.availableTexturesList = new JList(createListModel(preferences.getTexturesCatalog()));\n            this.availableTexturesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n            this.availableTexturesList.setCellRenderer(new TextureListCellRenderer());\n            this.availableTexturesList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n\n                public void valueChanged(ListSelectionEvent ev) {\n                    CatalogTexture selectedTexture = (CatalogTexture) availableTexturesList.getSelectedValue();\n                    setPreviewTexture(selectedTexture);\n                    if (modifyTextureButton != null) {\n                        modifyTextureButton.setEnabled(selectedTexture != null && selectedTexture.isModifiable());\n                    }\n                    if (deleteTextureButton != null) {\n                        deleteTextureButton.setEnabled(selectedTexture != null && selectedTexture.isModifiable());\n                    }\n                }\n            });\n            this.chosenTextureLabel = new JLabel(preferences.getLocalizedString(TextureChoiceComponent.class, \"chosenTextureLabel.text\"));\n            this.texturePreviewLabel = new JLabel() {\n\n                private int lastIconWidth;\n\n                @Override\n                protected void paintComponent(Graphics g) {\n                    // If icon width changed after its loading\n                    Icon icon = getIcon();\n                    if (icon != null && icon.getIconWidth() != this.lastIconWidth) {\n                        // Revalidate label to layout again texture panel\n                        this.lastIconWidth = icon.getIconWidth();\n                        revalidate();\n                    } else {\n                        super.paintComponent(g);\n                    }\n                }\n\n                @Override\n                public void setIcon(Icon icon) {\n                    if (icon != null) {\n                        this.lastIconWidth = icon.getIconWidth();\n                    }\n                    super.setIcon(icon);\n                }\n            };\n            // Update edited texture in texture panel\n            setPreviewTexture(controller.getTexture());\n            try {\n                String importTextureButtonText = SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"importTextureButton.text\");\n                this.texturePreviewLabel.setBorder(SwingTools.getDropableComponentBorder());\n                // Add to label a transfer handler to let user drag and drop a file on it\n                this.texturePreviewLabel.setTransferHandler(new TransferHandler() {\n\n                    @Override\n                    public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n                        return Arrays.asList(flavors).contains(DataFlavor.javaFileListFlavor);\n                    }\n\n                    @Override\n                    public boolean importData(JComponent comp, Transferable transferedFiles) {\n                        try {\n                            List<File> files = (List<File>) transferedFiles.getTransferData(DataFlavor.javaFileListFlavor);\n                            final String textureName = files.get(0).getAbsolutePath();\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    controller.importTexture(textureName);\n                                }\n                            });\n                            return true;\n                        } catch (UnsupportedFlavorException ex) {\n                            return false;\n                        } catch (IOException ex) {\n                            return false;\n                        }\n                    }\n                });\n                this.importTextureButton = new JButton(importTextureButtonText);\n                this.importTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.importTexture();\n                    }\n                });\n                this.modifyTextureButton = new JButton(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"modifyTextureButton.text\"));\n                this.modifyTextureButton.setEnabled(false);\n                this.modifyTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.modifyTexture((CatalogTexture) availableTexturesList.getSelectedValue());\n                    }\n                });\n                this.deleteTextureButton = new JButton(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"deleteTextureButton.text\"));\n                this.deleteTextureButton.setEnabled(false);\n                this.deleteTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.deleteTexture((CatalogTexture) availableTexturesList.getSelectedValue());\n                    }\n                });\n                preferences.getTexturesCatalog().addTexturesListener(new TexturesCatalogListener(this));\n            } catch (IllegalArgumentException ex) {\n                // Do not support import texture if importTextureText isn't defined\n                this.texturePreviewLabel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\n            }\n        }\n\n        /**\n         * Renderer used to display the textures in list.\n         */\n        private static class TextureListCellRenderer extends DefaultListCellRenderer {\n\n            private Font defaultFont;\n\n            private Font modifiablePieceFont;\n\n            @Override\n            public Component getListCellRendererComponent(final JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n                // Initialize fonts if not done\n                if (this.defaultFont == null) {\n                    this.defaultFont = getFont();\n                    this.modifiablePieceFont = new Font(this.defaultFont.getFontName(), Font.ITALIC, this.defaultFont.getSize());\n                }\n                final CatalogTexture texture = (CatalogTexture) value;\n                value = texture.getName();\n                value = texture.getCategory().getName() + \" - \" + value;\n                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\n                setIcon(new Icon() {\n\n                    public int getIconWidth() {\n                        return 16;\n                    }\n\n                    public int getIconHeight() {\n                        return 16;\n                    }\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                        Icon icon = IconManager.getInstance().getIcon(texture.getImage(), getIconHeight(), list);\n                        if (icon.getIconWidth() != icon.getIconHeight()) {\n                            Graphics2D g2D = (Graphics2D) g;\n                            AffineTransform previousTransform = g2D.getTransform();\n                            g2D.translate(x, y);\n                            g2D.scale((float) icon.getIconHeight() / icon.getIconWidth(), 1);\n                            icon.paintIcon(c, g2D, 0, 0);\n                            g2D.setTransform(previousTransform);\n                        } else {\n                            icon.paintIcon(c, g, x, y);\n                        }\n                    }\n                });\n                setFont(texture.isModifiable() ? this.modifiablePieceFont : this.defaultFont);\n                return component;\n            }\n        }\n\n        /**\n         * Catalog listener that updates textures list each time a texture\n         * is deleted or added in textures catalog. This listener is bound to this component\n         * with a weak reference to avoid strong link between catalog and this component.\n         */\n        private static class TexturesCatalogListener implements CollectionListener<CatalogTexture> {\n\n            private WeakReference<TexturePanel> texturePanel;\n\n            public TexturesCatalogListener(TexturePanel texturePanel) {\n                this.texturePanel = new WeakReference<TexturePanel>(texturePanel);\n            }\n\n            public void collectionChanged(CollectionEvent<CatalogTexture> ev) {\n                // If controller was garbage collected, remove this listener from catalog\n                final TexturePanel texturePanel = this.texturePanel.get();\n                if (texturePanel == null) {\n                    ((TexturesCatalog) ev.getSource()).removeTexturesListener(this);\n                } else {\n                    texturePanel.availableTexturesList.setModel(texturePanel.createListModel((TexturesCatalog) ev.getSource()));\n                    switch(ev.getType()) {\n                        case ADD:\n                            texturePanel.availableTexturesList.setSelectedValue(ev.getItem(), true);\n                            break;\n                        case DELETE:\n                            texturePanel.availableTexturesList.clearSelection();\n                            break;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Sets components mnemonics and label / component associations.\n         */\n        private void setMnemonics(UserPreferences preferences) {\n            if (!OperatingSystem.isMacOSX()) {\n                this.availableTexturesLabel.setDisplayedMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"availableTexturesLabel.mnemonic\")).getKeyCode());\n                this.availableTexturesLabel.setLabelFor(this.availableTexturesList);\n                if (this.importTextureButton != null) {\n                    this.importTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"importTextureButton.mnemonic\")).getKeyCode());\n                    this.modifyTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"modifyTextureButton.mnemonic\")).getKeyCode());\n                    this.deleteTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"deleteTextureButton.mnemonic\")).getKeyCode());\n                }\n            }\n        }\n\n        /**\n         * Layouts components in panel with their labels.\n         */\n        private void layoutComponents() {\n            // First row\n            add(this.availableTexturesLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0, 0, 5, 15), 0, 0));\n            add(this.chosenTextureLabel, new GridBagConstraints(1, 0, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            // Second row\n            add(new JScrollPane(this.availableTexturesList), new GridBagConstraints(0, 1, 1, 2, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 5, 15), 50, 0));\n            SwingTools.installFocusBorder(this.availableTexturesList);\n            add(this.texturePreviewLabel, new GridBagConstraints(1, 1, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            if (this.importTextureButton != null) {\n                // Third row\n                JPanel buttonsPanel = new JPanel(new GridLayout(3, 1, 2, 2));\n                buttonsPanel.add(this.importTextureButton);\n                buttonsPanel.add(this.modifyTextureButton);\n                buttonsPanel.add(this.deleteTextureButton);\n                add(buttonsPanel, new GridBagConstraints(1, 2, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            }\n        }\n\n        /**\n         * Returns the chosen texture.\n         */\n        public TextureImage getPreviewTexture() {\n            return this.previewTexture;\n        }\n\n        /**\n         * Sets the chosen texture.\n         */\n        public void setPreviewTexture(TextureImage previewTexture) {\n            this.previewTexture = previewTexture;\n            if (previewTexture != null) {\n                this.texturePreviewLabel.setIcon(IconManager.getInstance().getIcon(previewTexture.getImage(), PREVIEW_ICON_HEIGHT, this.texturePreviewLabel));\n            } else {\n                // Preview a dummy empty icon\n                this.texturePreviewLabel.setIcon(new Icon() {\n\n                    public int getIconHeight() {\n                        return PREVIEW_ICON_HEIGHT;\n                    }\n\n                    public int getIconWidth() {\n                        return PREVIEW_ICON_HEIGHT;\n                    }\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                    }\n                });\n            }\n            // Update selection in texture list\n            this.availableTexturesList.setSelectedValue(previewTexture, true);\n            if (this.availableTexturesList.getSelectedValue() != previewTexture) {\n                int selectedIndex = this.availableTexturesList.getSelectedIndex();\n                this.availableTexturesList.removeSelectionInterval(selectedIndex, selectedIndex);\n            }\n        }\n\n        /**\n         * Returns a list model from textures catalog.\n         */\n        private AbstractListModel createListModel(TexturesCatalog texturesCatalog) {\n            final CatalogTexture[] textures = getTextures(texturesCatalog);\n            return new AbstractListModel() {\n\n                public Object getElementAt(int index) {\n                    return textures[index];\n                }\n\n                public int getSize() {\n                    return textures.length;\n                }\n            };\n        }\n\n        /**\n         * Returns the array of textures in catalog.\n         */\n        private CatalogTexture[] getTextures(TexturesCatalog texturesCatalog) {\n            List<CatalogTexture> textures = new ArrayList<CatalogTexture>();\n            for (TexturesCategory category : texturesCatalog.getCategories()) {\n                for (CatalogTexture texture : category.getTextures()) {\n                    textures.add(texture);\n                }\n            }\n            return textures.toArray(new CatalogTexture[textures.size()]);\n        }\n\n        public void displayView(View textureChoiceComponent) {\n            // Show panel in a resizable modal dialog\n            final JOptionPane optionPane = new JOptionPane(this, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);\n            JComponent parentComponent = SwingUtilities.getRootPane((JComponent) textureChoiceComponent);\n            if (parentComponent != null) {\n                optionPane.setComponentOrientation(parentComponent.getComponentOrientation());\n            }\n            final JDialog dialog = optionPane.createDialog(parentComponent, controller.getDialogTitle());\n            dialog.applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n            dialog.setResizable(true);\n            // Pack again because resize decorations may have changed dialog preferred size\n            dialog.pack();\n            dialog.setMinimumSize(getPreferredSize());\n            // Add a listener that transfer focus to focusable field of texture panel when dialog is shown\n            dialog.addComponentListener(new ComponentAdapter() {\n\n                @Override\n                public void componentShown(ComponentEvent ev) {\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent(TexturePanel.this);\n                    dialog.removeComponentListener(this);\n                }\n            });\n            this.availableTexturesList.addMouseListener(new MouseAdapter() {\n\n                @Override\n                public void mouseClicked(MouseEvent ev) {\n                    // Close on double clicks in texture list\n                    if (ev.getClickCount() == 2) {\n                        optionPane.setValue(JOptionPane.OK_OPTION);\n                        availableTexturesList.removeMouseListener(this);\n                    }\n                }\n            });\n            dialog.setVisible(true);\n            dialog.dispose();\n            if (Integer.valueOf(JOptionPane.OK_OPTION).equals(optionPane.getValue())) {\n                TextureImage selectedTexture = getPreviewTexture();\n                if (selectedTexture instanceof HomeTexture || selectedTexture == null) {\n                    this.controller.setTexture((HomeTexture) selectedTexture);\n                } else {\n                    this.controller.setTexture(new HomeTexture(selectedTexture));\n                }\n            }\n        }\n    }\n}\n",
    "test_prompt": "// TextureChoiceComponentTest.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.AffineTransform;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport javax.swing.AbstractListModel;\nimport javax.swing.BorderFactory;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.TransferHandler;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.HomeTexture;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceController;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextureChoiceComponent}.\n* It contains one unit test case for the {@link TextureChoiceComponent#confirmDeleteSelectedCatalogTexture()} method.\n*/\nclass TextureChoiceComponentTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "fa570533-a0eb-4fe9-a082-2d204408f2ef",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/SwingTools.java",
    "original_code": "// SwingTools.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Rectangle;\nimport java.awt.Toolkit;\nimport java.awt.Window;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Area;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.FilteredImageSource;\nimport java.awt.image.RGBImageFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.jnlp.BasicService;\nimport javax.jnlp.ServiceManager;\nimport javax.jnlp.UnavailableServiceException;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JToggleButton;\nimport javax.swing.JViewport;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.border.AbstractBorder;\nimport javax.swing.border.Border;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\n\n/**\n * Gathers some useful tools for Swing.\n *\n * @author Emmanuel Puybaret\n */\npublic class SwingTools {\n\n    // Borders for focused views\n    private static Border unfocusedViewBorder;\n\n    private static Border focusedViewBorder;\n\n    private SwingTools() {\n    }\n\n    /**\n     * Updates the border of <code>component</code> with an empty border\n     * changed to a colored border when it will gain focus.\n     * If the <code>component</code> component is the child of a <code>JViewPort</code>\n     * instance this border will be installed on its scroll pane parent.\n     */\n    public static void installFocusBorder(JComponent component);\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and class loader.\n     */\n    public static void updateSwingResourceLanguage();\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and the class loaders of preferences.\n     */\n    public static void updateSwingResourceLanguage(UserPreferences preferences);\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and class loaders.\n     */\n    private static void updateSwingResourceLanguage(List<ClassLoader> classLoaders);\n\n    /**\n     * Updates a Swing resource bundle in use from the current Locale.\n     */\n    private static void updateSwingResourceBundle(String swingResource, List<ClassLoader> classLoaders);\n\n    /**\n     * Returns a localized text for menus items and labels depending on the system.\n     */\n    public static String getLocalizedLabelText(UserPreferences preferences, Class<?> resourceClass, String resourceKey, Object... resourceParameters);\n\n    /**\n     * Adds focus and mouse listeners to the given <code>textComponent</code> that will\n     * select all its text when it gains focus by transfer.\n     */\n    public static void addAutoSelectionOnFocusGain(final JTextComponent textComponent);\n\n    /**\n     * Forces radio buttons to be deselected even if they belong to a button group.\n     */\n    public static void deselectAllRadioButtons(JRadioButton... radioButtons);\n\n    /**\n     * Displays <code>messageComponent</code> in a modal dialog box, giving focus to one of its components.\n     */\n    public static int showConfirmDialog(JComponent parentComponent, JComponent messageComponent, String title, final JComponent focusedComponent);\n\n    /**\n     * Displays <code>messageComponent</code> in a modal dialog box, giving focus to one of its components.\n     */\n    public static void showMessageDialog(JComponent parentComponent, JComponent messageComponent, String title, int messageType, final JComponent focusedComponent);\n\n    private static Map<TextureImage, BufferedImage> patternImages;\n\n    /**\n     * Returns the image matching a given pattern.\n     */\n    public static BufferedImage getPatternImage(TextureImage pattern, Color backgroundColor, Color foregroundColor);\n\n    /**\n     * Returns the border of a component where a user may drop objects.\n     */\n    public static Border getDropableComponentBorder();\n\n    /**\n     * Displays the image referenced by <code>imageUrl</code> in an AWT window\n     * disposed once an other AWT frame is created.\n     * If the <code>imageUrl</code> is incorrect, nothing happens.\n     */\n    public static void showSplashScreenWindow(URL imageUrl);\n\n    /**\n     * Returns a new panel with a border and the given <code>title</code>\n     */\n    public static JPanel createTitledPanel(String title);\n\n    /**\n     * Returns a scroll pane containing the given <code>component</code>\n     * that always displays scroll bars under Mac OS X.\n     */\n    public static JScrollPane createScrollPane(JComponent component);\n\n    /**\n     * Adds a listener that will update the given popup menu to hide disabled menu items.\n     */\n    public static void hideDisabledMenuItems(JPopupMenu popupMenu);\n\n    /**\n     * A popup menu listener that displays only enabled menu items.\n     */\n    private static class MenuItemsVisibilityListener implements PopupMenuListener {\n\n        public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n            JPopupMenu popupMenu = (JPopupMenu) ev.getSource();\n            hideDisabledMenuItems(popupMenu);\n            // Ensure at least one item is visible\n            boolean allItemsInvisible = true;\n            for (int i = 0; i < popupMenu.getComponentCount(); i++) {\n                if (popupMenu.getComponent(i).isVisible()) {\n                    allItemsInvisible = false;\n                    break;\n                }\n            }\n            if (allItemsInvisible) {\n                popupMenu.getComponent(0).setVisible(true);\n            }\n        }\n\n        /**\n         * Makes useless menu items invisible.\n         */\n        private void hideDisabledMenuItems(JPopupMenu popupMenu) {\n            for (int i = 0; i < popupMenu.getComponentCount(); i++) {\n                Component component = popupMenu.getComponent(i);\n                if (component instanceof JMenu) {\n                    boolean containsEnabledItems = containsEnabledItems((JMenu) component);\n                    component.setVisible(containsEnabledItems);\n                    if (containsEnabledItems) {\n                        hideDisabledMenuItems(((JMenu) component).getPopupMenu());\n                    }\n                } else if (component instanceof JMenuItem) {\n                    component.setVisible(component.isEnabled());\n                }\n            }\n            hideUselessSeparators(popupMenu);\n        }\n\n        /**\n         * Makes useless separators invisible.\n         */\n        private void hideUselessSeparators(JPopupMenu popupMenu) {\n            boolean allMenuItemsInvisible = true;\n            int lastVisibleSeparatorIndex = -1;\n            for (int i = 0; i < popupMenu.getComponentCount(); i++) {\n                Component component = popupMenu.getComponent(i);\n                if (allMenuItemsInvisible && (component instanceof JMenuItem)) {\n                    if (component.isVisible()) {\n                        allMenuItemsInvisible = false;\n                    }\n                } else if (component instanceof JSeparator) {\n                    component.setVisible(!allMenuItemsInvisible);\n                    if (!allMenuItemsInvisible) {\n                        lastVisibleSeparatorIndex = i;\n                    }\n                    allMenuItemsInvisible = true;\n                }\n            }\n            if (lastVisibleSeparatorIndex != -1 && allMenuItemsInvisible) {\n                // Check if last separator is the first visible component\n                boolean allComponentsBeforeLastVisibleSeparatorInvisible = true;\n                for (int i = lastVisibleSeparatorIndex - 1; i >= 0; i--) {\n                    if (popupMenu.getComponent(i).isVisible()) {\n                        allComponentsBeforeLastVisibleSeparatorInvisible = false;\n                        break;\n                    }\n                }\n                boolean allComponentsAfterLastVisibleSeparatorInvisible = true;\n                for (int i = lastVisibleSeparatorIndex; i < popupMenu.getComponentCount(); i++) {\n                    if (popupMenu.getComponent(i).isVisible()) {\n                        allComponentsBeforeLastVisibleSeparatorInvisible = false;\n                        break;\n                    }\n                }\n                popupMenu.getComponent(lastVisibleSeparatorIndex).setVisible(!allComponentsBeforeLastVisibleSeparatorInvisible && !allComponentsAfterLastVisibleSeparatorInvisible);\n            }\n        }\n\n        /**\n         * Returns <code>true</code> if the given <code>menu</code> contains\n         * at least one enabled menu item.\n         */\n        private boolean containsEnabledItems(JMenu menu) {\n            boolean menuContainsEnabledItems = false;\n            for (int i = 0; i < menu.getMenuComponentCount() && !menuContainsEnabledItems; i++) {\n                Component component = menu.getMenuComponent(i);\n                if (component instanceof JMenu) {\n                    menuContainsEnabledItems = containsEnabledItems((JMenu) component);\n                } else if (component instanceof JMenuItem) {\n                    menuContainsEnabledItems = component.isEnabled();\n                }\n            }\n            return menuContainsEnabledItems;\n        }\n\n        public void popupMenuCanceled(PopupMenuEvent ev) {\n        }\n\n        public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n        }\n    }\n\n    /**\n     * Attempts to display the given <code>url</code> in a browser and returns <code>true</code>\n     * if it was done successfully.\n     */\n    public static boolean showDocumentInBrowser(URL url);\n\n    /**\n     * Separated static class to be able to exclude JNLP library from classpath.\n     */\n    private static class BrowserSupport {\n\n        public static boolean showDocumentInBrowser(URL url) {\n            try {\n                // Lookup the javax.jnlp.BasicService object\n                BasicService basicService = (BasicService) ServiceManager.lookup(\"javax.jnlp.BasicService\");\n                // Ignore the basic service, if it doesn't support web browser\n                if (basicService.isWebBrowserSupported()) {\n                    return basicService.showDocument(url);\n                }\n            } catch (UnavailableServiceException ex) {\n                // Too bad : service is unavailable\n            } catch (LinkageError ex) {\n                // JNLP classes not available in classpath\n                System.err.println(\"Can't show document in browser. JNLP classes not available in classpath.\");\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns the children of a component of the given class.\n     */\n    public static <T extends JComponent> List<T> findChildren(JComponent parent, Class<T> childrenClass);\n\n    private static <T extends JComponent> void findChildren(JComponent parent, Class<T> childrenClass, List<T> children);\n\n    /**\n     * Returns <code>true</code> if the given rectangle is fully visible at screen.\n     */\n    public static boolean isRectangleVisibleAtScreen(Rectangle rectangle);\n}\n",
    "test_prompt": "// SwingToolsTest.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Rectangle;\nimport java.awt.Toolkit;\nimport java.awt.Window;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Area;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.FilteredImageSource;\nimport java.awt.image.RGBImageFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.jnlp.BasicService;\nimport javax.jnlp.ServiceManager;\nimport javax.jnlp.UnavailableServiceException;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JToggleButton;\nimport javax.swing.JViewport;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.border.AbstractBorder;\nimport javax.swing.border.Border;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SwingTools}.\n* It contains one unit test case for the {@link SwingTools#getDropableComponentBorder()} method.\n*/\nclass SwingToolsTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "8057ea00-d95e-4bfb-a59f-bf0578495774",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_0Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_0Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#showOpenDialog()} method.\n*/\nclass HomePane_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "9abcb07f-f494-4b00-addb-246a50c8ec61",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_1Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_1Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#showImportLanguageLibraryDialog()} method.\n*/\nclass HomePane_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "f21eaa60-09d2-4cdb-9106-af79bd3d5972",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_2Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_2Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#showImportFurnitureLibraryDialog()} method.\n*/\nclass HomePane_2Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "ffdc2d95-dcee-4c40-ac01-a7578b68cc1d",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_3Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_3Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#showImportTexturesLibraryDialog()} method.\n*/\nclass HomePane_3Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "5d24b342-e3ed-42e0-81f3-a9ed83bdbc16",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_4Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_4Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#confirmExit()} method.\n*/\nclass HomePane_4Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "ca27d128-ed84-4c29-a104-6a97f18d720a",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_5Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_5Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#showPrintDialog()} method.\n*/\nclass HomePane_5Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "75b2d083-4a88-403a-a29a-80d57fab4b5a",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_6Test.java",
    "original_code": "// HomePane.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n *\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY = \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY = \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY = \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY = \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY = \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY = \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY = \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT = 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty = true;\n\n    private ActionMap menuActionMap;\n\n    private List<Action> pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object that calls on <code>controller</code> a given\n     * <code>method</code> with its <code>parameters</code>. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Returns a new <code>ControllerAction</code> object associated with a <code>ToggleButtonModel</code> instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters);\n\n    /**\n     * Creates a <code>ReourceAction</code> object that calls\n     * <code>actionPerfomed</code> method on a given\n     * existing <code>clipboardAction</code> with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction);\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller);\n\n    /**\n     * Creates a <code>ResourceAction</code> object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action);\n\n    /**\n     * Creates the Swing actions matching each actions available in <code>plugins</code>.\n     */\n    private void createPluginActions(List<Plugin> plugins);\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller);\n\n    /**\n     * Adds a property change listener to <code>home</code> to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home);\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected);\n\n    /**\n     * Adds listener to <code>home</code> to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home);\n\n    /**\n     * Adds a property change listener to <code>preferences</code> to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to <code>planController</code> to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController);\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener();\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener = null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener = new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent != null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent = homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode != null && (lostFocusedComponent == homePane.controller.getPlanController().getView() || ev.getNewValue() == null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode = null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() != null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent = (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) && gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews = { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view != null && SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent = (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener = new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController = controller.getPlanController();\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && (ev.getModifiers() & (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) == 0 && getActionMap().get(ActionType.PAN).getValue(Action.NAME) != null && planController.getMode() != PlanController.Mode.PANNING && !planController.isModificationState() && SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) && !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode = planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() == KeyEvent.VK_SPACE && previousPlanControllerMode != null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode = null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap = getActionMap();\n            Action[] specialKeyActions = { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask = KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke = (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() == actionKeyStroke.getKeyChar() && (ev.getModifiers() & modifiersMask) == (actionKeyStroke.getModifiers() & modifiersMask) && specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy();\n\n    /**\n     * Returns <code>true</code> if the top or the bottom component of the <code>splitPane</code>\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent);\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu);\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton);\n\n    /**\n     * Adds the given action to <code>menu</code>.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu);\n\n    /**\n     * Adds to <code>menu</code> the menu item matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu);\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component);\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Adds to <code>actions</code> the action matching <code>actionType</code>.\n     */\n    private void addActionToMap(ActionType actionType, Map<HomePieceOfFurniture.SortableProperty, Action> actions, HomePieceOfFurniture.SortableProperty key);\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences);\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup);\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home);\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in <code>home</code> use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences);\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener);\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup);\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup);\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller);\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup);\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup);\n\n    /**\n     * Updates <code>openRecentHomeMenu</code> from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller);\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>\n     * and returns <code>true</code> if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Adds to tool bar the button matching the given <code>actionType</code>.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar);\n\n    /**\n     * Enables or disables the action matching <code>actionType</code>.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText);\n\n    /**\n     * Sets the <code>NAME</code> and <code>SHORT_DESCRIPTION</code> properties value\n     * matching <code>actionType</code>. If <code>name</code> is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name);\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled);\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener();\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller);\n\n    /**\n     * Configures <code>splitPane</code> divider location.\n     * If <code>dividerLocationProperty</code> visual property exists in <code>home</code>,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller);\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JComponent> furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.furnitureCatalogView = new WeakReference<JComponent>(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            if (homePane == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView = this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView != null) {\n                    boolean transferHandlerEnabled = homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView = (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent = newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent = SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent = newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView = new WeakReference<JComponent>(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller);\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences);\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference<HomePane> homePane;\n\n        private WeakReference<JScrollPane> planScrollPane;\n\n        private WeakReference<HomeController> controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane = new WeakReference<HomePane>(homePane);\n            this.planScrollPane = new WeakReference<JScrollPane>(planScrollPane);\n            this.controller = new WeakReference<HomeController>(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane = this.homePane.get();\n            JScrollPane planScrollPane = this.planScrollPane.get();\n            HomeController controller = this.controller.get();\n            if (homePane == null || planScrollPane == null || controller == null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible);\n\n    /**\n     * Adds to <code>view</code> a mouse listener that disables all menu items of\n     * <code>menuBar</code> during a drag and drop operation in <code>view</code>.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar);\n\n    /**\n     * Detaches the given <code>view</code> from home view.\n     */\n    public void detachView(final View view);\n\n    /**\n     * Detaches a <code>view</code> at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height);\n\n    /**\n     * Attaches the given <code>view</code> to home view.\n     */\n    public void attachView(View view);\n\n    /**\n     * Returns among <code>parent</code> children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName);\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog();\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName);\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog();\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName);\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName);\n\n    /**\n     * Displays <code>message</code> in an error message box.\n     */\n    public void showError(String message);\n\n    /**\n     * Displays <code>message</code> in a message box.\n     */\n    public void showMessage(String message);\n\n    /**\n     * Displays the tip matching <code>actionTipKey</code> and\n     * returns <code>true</code> if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey);\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn't want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn't want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return <code>true</code> if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName);\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return <code>true</code> if user confirmed to exit.\n     */\n    public boolean confirmExit();\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog();\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or <code>null</code> if the user canceled print.\n     *    The <code>call</code> method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable<Void> showPrintDialog();\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName);\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName);\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException;\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName);\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException;\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer = null;\n            boolean exportInterrupted = false;\n            try {\n                writer = new OBJWriter(objFile, header, -1);\n                List<Selectable> emptySelection = Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() > 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds = getExportedHomeBounds(home);\n                    Ground3D groundNode = new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i = 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode = new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i = 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode = new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i = 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode = new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted = true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer != null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn't export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns <code>home</code> bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds = updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds == null) {\n                        homeBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given <code>furniture</code>.\n         */\n        private static List<HomePieceOfFurniture> getVisibleFurniture(List<HomePieceOfFurniture> furniture) {\n            List<HomePieceOfFurniture> visibleFurniture = new ArrayList<HomePieceOfFurniture>(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates <code>objectBounds</code> to include the bounds of <code>items</code>.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection<? extends Selectable> items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() == null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds == null) {\n                            objectBounds = new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return <code>true</code> if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection();\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or <code>null</code> if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName);\n\n    /**\n     * Returns <code>true</code> if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty();\n\n    /**\n     * Execute <code>runnable</code> asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable);\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction = pluginAction;\n            this.propertyChangeSupport = new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName = ev.getPropertyName();\n                    Object oldValue = ev.getOldValue();\n                    Object newValue = ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don't check new value is null !)\n                        if (newValue != null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue != null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue != null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon = (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon != null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic = (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic != null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat<T extends Selectable> {\n\n        public abstract String format(T item);\n    }\n}\n",
    "test_prompt": "// HomePane_6Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains one unit test case for the {@link HomePane#confirmDeleteCatalogSelection()} method.\n*/\nclass HomePane_6Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "50c6807e-cdee-459b-8857-89bcce59325c",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_0Test.java",
    "original_code": "// IconManager.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n *\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn't be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map<Content, Map<Integer, Icon>> icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance();\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear();\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height);\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the error icon\n     * used by this manager to indicate it couldn't load an icon.\n     */\n    public boolean isErrorIcon(Icon icon);\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height);\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the wait icon\n     * used by this manager to indicate it's currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon);\n\n    /**\n     * Returns an icon read from <code>content</code>.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent);\n\n    /**\n     * Returns an icon read from <code>content</code> and rescaled at a given <code>height</code>.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent);\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon);\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon = waitIcon;\n            if (iconsLoader == null) {\n                iconsLoader = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon = createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "test_prompt": "// IconManager_0Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains one unit test case for the {@link IconManager#getInstance()} method.\n*/\nclass IconManager_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "7368e830-ac87-48fe-a49f-819b91470b62",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_1Test.java",
    "original_code": "// IconManager.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n *\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn't be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map<Content, Map<Integer, Icon>> icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance();\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear();\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height);\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the error icon\n     * used by this manager to indicate it couldn't load an icon.\n     */\n    public boolean isErrorIcon(Icon icon);\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height);\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the wait icon\n     * used by this manager to indicate it's currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon);\n\n    /**\n     * Returns an icon read from <code>content</code>.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent);\n\n    /**\n     * Returns an icon read from <code>content</code> and rescaled at a given <code>height</code>.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent);\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon);\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon = waitIcon;\n            if (iconsLoader == null) {\n                iconsLoader = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon = createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "test_prompt": "// IconManager_1Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains one unit test case for the {@link IconManager#getIcon(Content, Component)} method.\n*/\nclass IconManager_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "8d9751cb-8e79-46fa-8041-886894aa26b2",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_2Test.java",
    "original_code": "// IconManager.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n *\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn't be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map<Content, Map<Integer, Icon>> icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance();\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear();\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height);\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the error icon\n     * used by this manager to indicate it couldn't load an icon.\n     */\n    public boolean isErrorIcon(Icon icon);\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height);\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon();\n\n    /**\n     * Returns <code>true</code> if the given <code>icon</code> is the wait icon\n     * used by this manager to indicate it's currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon);\n\n    /**\n     * Returns an icon read from <code>content</code>.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent);\n\n    /**\n     * Returns an icon read from <code>content</code> and rescaled at a given <code>height</code>.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent);\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon);\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon = waitIcon;\n            if (iconsLoader == null) {\n                iconsLoader = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon = createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "test_prompt": "// IconManager_2Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains one unit test case for the {@link IconManager#getIcon(Content, int, Component)} method.\n*/\nclass IconManager_2Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "48c8150d-1b72-4f59-8707-fe2d3d05a270",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/DefaultHomeInputStream.java",
    "original_code": "// DefaultHomeInputStream.java\npackage com.eteks.sweethome3d.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * An <code>InputStream</code> filter that reads a home from a stream\n * at .sh3d file format.\n *\n * @see DefaultHomeOutputStream\n */\npublic class DefaultHomeInputStream extends FilterInputStream {\n\n    private final ContentRecording contentRecording;\n\n    private File tempFile;\n\n    /**\n     * Creates a home input stream filter able to read a home and its content\n     * from <code>in</code>.\n     */\n    public DefaultHomeInputStream(InputStream in) throws IOException {\n    }\n\n    /**\n     * Creates a home input stream filter able to read a home and its content\n     * from <code>in</code>.\n     */\n    public DefaultHomeInputStream(InputStream in, ContentRecording contentRecording) throws IOException {\n    }\n\n    /**\n     * Throws an <code>InterruptedRecorderException</code> exception\n     * if current thread is interrupted. The interrupted status of the current thread\n     * is cleared when an exception is thrown.\n     */\n    private static void checkCurrentThreadIsntInterrupted() throws InterruptedIOException;\n\n    /**\n     * Reads home from a zipped stream.\n     */\n    public Home readHome() throws IOException, ClassNotFoundException;\n\n    /**\n     * <code>ObjectInputStream</code> that replaces temporary <code>URLContent</code>\n     * objects by <code>URLContent</code> objects that points to file.\n     */\n    private class HomeObjectInputStream extends ObjectInputStream {\n\n        public HomeObjectInputStream(InputStream in) throws IOException {\n            super(in);\n            if (contentRecording != ContentRecording.INCLUDE_NO_CONTENT) {\n                enableResolveObject(true);\n            }\n        }\n\n        @Override\n        protected Object resolveObject(Object obj) throws IOException {\n            if (obj instanceof URLContent) {\n                URL tmpURL = ((URLContent) obj).getURL();\n                String url = tmpURL.toString();\n                if (url.startsWith(\"jar:file:temp!/\")) {\n                    // Replace \"temp\" in URL by current temporary file\n                    String entryName = url.substring(url.indexOf('!') + 2);\n                    URL fileURL = new URL(\"jar:file:\" + tempFile.toString() + \"!/\" + entryName);\n                    try {\n                        // Check entry exists\n                        fileURL.openStream().close();\n                    } catch (IOException ex) {\n                        throw new IOException(\"Missing entry \\\"\" + entryName + \"\\\"\");\n                    }\n                    return new HomeURLContent(fileURL);\n                } else {\n                    return obj;\n                }\n            } else {\n                return obj;\n            }\n        }\n    }\n}\n",
    "test_prompt": "// DefaultHomeInputStreamTest.java\npackage com.eteks.sweethome3d.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultHomeInputStream}.\n* It contains one unit test case for the {@link DefaultHomeInputStream#readHome()} method.\n*/\nclass DefaultHomeInputStreamTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "a6f318ab-2e92-48cb-969b-07efd9bc0c72",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences_0Test.java",
    "original_code": "// FileUserPreferences.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * User preferences initialized from\n * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}\n * and stored in user preferences on local file system.\n *\n * @author Emmanuel Puybaret\n */\npublic class FileUserPreferences extends UserPreferences {\n\n    private static final String LANGUAGE = \"language\";\n\n    private static final String UNIT = \"unit\";\n\n    private static final String FURNITURE_CATALOG_VIEWED_IN_TREE = \"furnitureCatalogViewedInTree\";\n\n    private static final String NAVIGATION_PANEL_VISIBLE = \"navigationPanelVisible\";\n\n    private static final String MAGNETISM_ENABLED = \"magnetismEnabled\";\n\n    private static final String RULERS_VISIBLE = \"rulersVisible\";\n\n    private static final String GRID_VISIBLE = \"gridVisible\";\n\n    private static final String FURNITURE_VIEWED_FROM_TOP = \"furnitureViewedFromTop\";\n\n    private static final String ROOM_FLOOR_COLORED_OR_TEXTURED = \"roomFloorColoredOrTextured\";\n\n    private static final String WALL_PATTERN = \"wallPattern\";\n\n    private static final String NEW_WALL_HEIGHT = \"newHomeWallHeight\";\n\n    private static final String NEW_WALL_THICKNESS = \"newWallThickness\";\n\n    private static final String NEW_FLOOR_THICKNESS = \"newFloorThickness\";\n\n    private static final String AUTO_SAVE_DELAY_FOR_RECOVERY = \"autoSaveDelayForRecovery\";\n\n    private static final String AUTO_COMPLETION_PROPERTY = \"autoCompletionProperty#\";\n\n    private static final String AUTO_COMPLETION_STRINGS = \"autoCompletionStrings#\";\n\n    private static final String RECENT_HOMES = \"recentHomes#\";\n\n    private static final String IGNORED_ACTION_TIP = \"ignoredActionTip#\";\n\n    private static final String FURNITURE_NAME = \"furnitureName#\";\n\n    private static final String FURNITURE_CATEGORY = \"furnitureCategory#\";\n\n    private static final String FURNITURE_ICON = \"furnitureIcon#\";\n\n    private static final String FURNITURE_MODEL = \"furnitureModel#\";\n\n    private static final String FURNITURE_WIDTH = \"furnitureWidth#\";\n\n    private static final String FURNITURE_DEPTH = \"furnitureDepth#\";\n\n    private static final String FURNITURE_HEIGHT = \"furnitureHeight#\";\n\n    private static final String FURNITURE_MOVABLE = \"furnitureMovable#\";\n\n    private static final String FURNITURE_DOOR_OR_WINDOW = \"furnitureDoorOrWindow#\";\n\n    private static final String FURNITURE_ELEVATION = \"furnitureElevation#\";\n\n    private static final String FURNITURE_COLOR = \"furnitureColor#\";\n\n    private static final String FURNITURE_MODEL_ROTATION = \"furnitureModelRotation#\";\n\n    private static final String FURNITURE_STAIRCASE_CUT_OUT_SHAPE = \"furnitureStaircaseCutOutShape#\";\n\n    private static final String FURNITURE_BACK_FACE_SHOWN = \"furnitureBackFaceShown#\";\n\n    private static final String FURNITURE_ICON_YAW = \"furnitureIconYaw#\";\n\n    private static final String FURNITURE_PROPORTIONAL = \"furnitureProportional#\";\n\n    private static final String TEXTURE_NAME = \"textureName#\";\n\n    private static final String TEXTURE_CATEGORY = \"textureCategory#\";\n\n    private static final String TEXTURE_IMAGE = \"textureImage#\";\n\n    private static final String TEXTURE_WIDTH = \"textureWidth#\";\n\n    private static final String TEXTURE_HEIGHT = \"textureHeight#\";\n\n    private static final String FURNITURE_CONTENT_PREFIX = \"Furniture-3-\";\n\n    private static final String TEXTURE_CONTENT_PREFIX = \"Texture-3-\";\n\n    private static final String LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER = \"languages\";\n\n    private static final String FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER = \"furniture\";\n\n    private static final String TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER = \"textures\";\n\n    private static final Content DUMMY_CONTENT;\n\n    private final Map<String, Boolean> ignoredActionTips = new HashMap<String, Boolean>();\n\n    private List<ClassLoader> resourceClassLoaders;\n\n    private final File preferencesFolder;\n\n    private final File[] applicationFolders;\n\n    private Preferences preferences;\n\n    private Executor catalogsLoader;\n\n    private Executor updater;\n\n    static {\n    }\n\n    /**\n     * Creates user preferences read from user preferences in file system,\n     * and from resource files.\n     */\n    public FileUserPreferences() {\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or <code>null</code> if this folder is the default one.\n     * @param applicationFolders the folders where application private files are stored\n     *    or <code>null</code> if it's the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won't be able to import them.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders) {\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or <code>null</code> if this folder is the default one.\n     * @param applicationFolders  the folders where application private files are stored\n     *    or <code>null</code> if it's the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won't be able to import them.\n     * @param updater  an executor that will be used to update user preferences for lengthy\n     *    operations. If <code>null</code>, then these operations and\n     *    updates will be executed in the current thread.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders, Executor updater) {\n    }\n\n    /**\n     * Updates the default supported languages with languages available in plugin folder.\n     */\n    private void updateSupportedLanguages();\n\n    /**\n     * Returns the languages included in the given language library file.\n     */\n    private Set<String> getLanguages(File languageLibraryFile) throws IOException;\n\n    /**\n     * Returns the default class loader of user preferences and the class loaders that\n     * give access to resources in language libraries plugin folder.\n     */\n    @Override\n    public List<ClassLoader> getResourceClassLoaders();\n\n    /**\n     * Reloads furniture default catalogs.\n     */\n    private void updateFurnitureDefaultCatalog(Executor furnitureCatalogLoader, final Executor updater);\n\n    /**\n     * Reloads textures default catalog.\n     */\n    private void updateTexturesDefaultCatalog(Executor texturesCatalogLoader, final Executor updater);\n\n    /**\n     * Adds to auto completion strings the default strings of the new chosen language.\n     */\n    private void updateAutoCompletionStrings();\n\n    /**\n     * Read modifiable furniture catalog from preferences.\n     */\n    private void readModifiableFurnitureCatalog(Preferences preferences);\n\n    /**\n     * Returns model rotation parsed from key value.\n     */\n    private float[][] getModelRotation(Preferences preferences, String key);\n\n    /**\n     * Returns a content instance from the resource file value of key.\n     */\n    private Content getContent(Preferences preferences, String key);\n\n    /**\n     * Read modifiable textures catalog from preferences.\n     */\n    private void readModifiableTexturesCatalog(Preferences preferences);\n\n    /**\n     * Writes user preferences in current user preferences in system.\n     */\n    @Override\n    public void write() throws RecorderException;\n\n    /**\n     * Writes modifiable furniture in <code>preferences</code>.\n     */\n    private void writeModifiableFurnitureCatalog(Preferences preferences) throws RecorderException;\n\n    /**\n     * Returns the string value of the given float, except for -1.0, 1.0 or 0.0 where -1, 1 and 0 is returned.\n     */\n    private String floatToString(float f);\n\n    /**\n     * Writes modifiable textures catalog in <code>preferences</code>.\n     */\n    private void writeModifiableTexturesCatalog(Preferences preferences) throws RecorderException;\n\n    /**\n     * Writes <code>key</code> <code>content</code> in <code>preferences</code>.\n     */\n    private void putContent(Preferences preferences, String key, Content content, String contentPrefix, Set<URL> furnitureContentURLs) throws RecorderException;\n\n    /**\n     * Returns a content object that references a copy of <code>content</code> in\n     * user preferences folder.\n     */\n    private URLContent copyToPreferencesURLContent(Content content, String contentPrefix) throws RecorderException;\n\n    /**\n     * Returns the folder where language libraries files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getLanguageLibrariesPluginFolders();\n\n    /**\n     * Returns the folder where furniture catalog files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getFurnitureLibrariesPluginFolders();\n\n    /**\n     * Returns the folder where texture catalog files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getTexturesLibrariesPluginFolders();\n\n    /**\n     * Returns the first Sweet Home 3D application folder.\n     */\n    public File getApplicationFolder() throws IOException;\n\n    /**\n     * Returns Sweet Home 3D application folders.\n     */\n    public File[] getApplicationFolders() throws IOException;\n\n    /**\n     * Returns subfolders of Sweet Home 3D application folders of a given name.\n     */\n    public File[] getApplicationSubfolders(String subfolder) throws IOException;\n\n    /**\n     * Returns a new file in user preferences folder.\n     */\n    private File createPreferencesFile(String filePrefix) throws IOException;\n\n    /**\n     * Creates preferences folder and its sub folders if it doesn't exist.\n     */\n    private void checkPreferencesFolder() throws IOException;\n\n    /**\n     * Creates the first folder in the given folders.\n     */\n    private void checkPreferencesSubFolder(File[] librariesPluginFolders);\n\n    /**\n     * Deletes from application folder the content files starting by <code>contentPrefix</code>\n     * that don't belong to <code>contentURLs</code>.\n     */\n    private void deleteObsoleteContent(final Set<URL> contentURLs, final String contentPrefix) throws RecorderException;\n\n    /**\n     * Returns the folder where files depending on preferences are stored.\n     */\n    private File getPreferencesFolder() throws IOException;\n\n    /**\n     * Returns default Java preferences for current system user.\n     * Caution : This method is called once in constructor so overriding implementations\n     * shouldn't be based on the state of their fields.\n     */\n    protected Preferences getPreferences();\n\n    /**\n     * Sets which action tip should be ignored.\n     */\n    @Override\n    public void setActionTipIgnored(String actionKey);\n\n    /**\n     * Returns whether an action tip should be ignored or not.\n     */\n    @Override\n    public boolean isActionTipIgnored(String actionKey);\n\n    /**\n     * Resets the display flag of action tips.\n     */\n    @Override\n    public void resetIgnoredActionTips();\n\n    /**\n     * Returns <code>true</code> if the given language library exists in the first\n     * language libraries folder.\n     */\n    public boolean languageLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds <code>languageLibraryName</code> to the first language libraries folder\n     * to make the language library it contains available to supported languages.\n     */\n    public void addLanguageLibrary(String languageLibraryName) throws RecorderException;\n\n    /**\n     * Returns <code>true</code> if the given furniture library file exists in the first\n     * furniture libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean furnitureLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds the file <code>furnitureLibraryName</code> to the first furniture libraries folder\n     * to make the furniture library available to catalog.\n     */\n    @Override\n    public void addFurnitureLibrary(String furnitureLibraryName) throws RecorderException;\n\n    /**\n     * Returns <code>true</code> if the given textures library file exists in the first textures libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean texturesLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds the file <code>texturesLibraryName</code> to the first textures libraries folder\n     * to make the textures library available to catalog.\n     */\n    @Override\n    public void addTexturesLibrary(String texturesLibraryName) throws RecorderException;\n\n    /**\n     * Copies a library file to a folder.\n     */\n    private void copyToLibraryFolder(File libraryFile, File folder) throws IOException;\n\n    /**\n     * Preferences based on the <code>preferences.xml</code> file\n     * stored in a preferences folder.\n     * @author Emmanuel Puybaret\n     */\n    private class PortablePreferences extends AbstractPreferences {\n\n        private static final String PREFERENCES_FILE = \"preferences.xml\";\n\n        private Properties preferencesProperties;\n\n        private boolean exist;\n\n        private PortablePreferences() {\n            super(null, \"\");\n            this.preferencesProperties = new Properties();\n            this.exist = readPreferences();\n        }\n\n        public boolean exist() {\n            return this.exist;\n        }\n\n        @Override\n        protected void syncSpi() throws BackingStoreException {\n            this.preferencesProperties.clear();\n            this.exist = readPreferences();\n        }\n\n        @Override\n        protected void removeSpi(String key) {\n            this.preferencesProperties.remove(key);\n        }\n\n        @Override\n        protected void putSpi(String key, String value) {\n            this.preferencesProperties.put(key, value);\n        }\n\n        @Override\n        protected String[] keysSpi() throws BackingStoreException {\n            return this.preferencesProperties.keySet().toArray(new String[0]);\n        }\n\n        @Override\n        protected String getSpi(String key) {\n            return (String) this.preferencesProperties.get(key);\n        }\n\n        @Override\n        protected void flushSpi() throws BackingStoreException {\n            try {\n                writePreferences();\n            } catch (IOException ex) {\n                throw new BackingStoreException(ex);\n            }\n        }\n\n        @Override\n        protected void removeNodeSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected String[] childrenNamesSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected AbstractPreferences childSpi(String name) {\n            throw new UnsupportedOperationException();\n        }\n\n        /**\n         * Reads user preferences.\n         */\n        private boolean readPreferences() {\n            InputStream in = null;\n            try {\n                in = new FileInputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.loadFromXML(in);\n                return true;\n            } catch (IOException ex) {\n                // Preferences don't exist\n                return false;\n            } finally {\n                try {\n                    if (in != null) {\n                        in.close();\n                    }\n                } catch (IOException ex) {\n                    // Let default preferences unchanged\n                }\n            }\n        }\n\n        /**\n         * Writes user preferences.\n         */\n        private void writePreferences() throws IOException {\n            OutputStream out = null;\n            try {\n                checkPreferencesFolder();\n                out = new FileOutputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.storeToXML(out, \"Portable user preferences 3.0\");\n            } finally {\n                if (out != null) {\n                    out.close();\n                    this.exist = true;\n                }\n            }\n        }\n    }\n}\n",
    "test_prompt": "// FileUserPreferences_0Test.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUserPreferences}.\n* It contains one unit test case for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.\n*/\nclass FileUserPreferences_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "3e84ace2-2574-44ac-a5cd-14f7d8f21d12",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences_1Test.java",
    "original_code": "// FileUserPreferences.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * User preferences initialized from\n * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}\n * and stored in user preferences on local file system.\n *\n * @author Emmanuel Puybaret\n */\npublic class FileUserPreferences extends UserPreferences {\n\n    private static final String LANGUAGE = \"language\";\n\n    private static final String UNIT = \"unit\";\n\n    private static final String FURNITURE_CATALOG_VIEWED_IN_TREE = \"furnitureCatalogViewedInTree\";\n\n    private static final String NAVIGATION_PANEL_VISIBLE = \"navigationPanelVisible\";\n\n    private static final String MAGNETISM_ENABLED = \"magnetismEnabled\";\n\n    private static final String RULERS_VISIBLE = \"rulersVisible\";\n\n    private static final String GRID_VISIBLE = \"gridVisible\";\n\n    private static final String FURNITURE_VIEWED_FROM_TOP = \"furnitureViewedFromTop\";\n\n    private static final String ROOM_FLOOR_COLORED_OR_TEXTURED = \"roomFloorColoredOrTextured\";\n\n    private static final String WALL_PATTERN = \"wallPattern\";\n\n    private static final String NEW_WALL_HEIGHT = \"newHomeWallHeight\";\n\n    private static final String NEW_WALL_THICKNESS = \"newWallThickness\";\n\n    private static final String NEW_FLOOR_THICKNESS = \"newFloorThickness\";\n\n    private static final String AUTO_SAVE_DELAY_FOR_RECOVERY = \"autoSaveDelayForRecovery\";\n\n    private static final String AUTO_COMPLETION_PROPERTY = \"autoCompletionProperty#\";\n\n    private static final String AUTO_COMPLETION_STRINGS = \"autoCompletionStrings#\";\n\n    private static final String RECENT_HOMES = \"recentHomes#\";\n\n    private static final String IGNORED_ACTION_TIP = \"ignoredActionTip#\";\n\n    private static final String FURNITURE_NAME = \"furnitureName#\";\n\n    private static final String FURNITURE_CATEGORY = \"furnitureCategory#\";\n\n    private static final String FURNITURE_ICON = \"furnitureIcon#\";\n\n    private static final String FURNITURE_MODEL = \"furnitureModel#\";\n\n    private static final String FURNITURE_WIDTH = \"furnitureWidth#\";\n\n    private static final String FURNITURE_DEPTH = \"furnitureDepth#\";\n\n    private static final String FURNITURE_HEIGHT = \"furnitureHeight#\";\n\n    private static final String FURNITURE_MOVABLE = \"furnitureMovable#\";\n\n    private static final String FURNITURE_DOOR_OR_WINDOW = \"furnitureDoorOrWindow#\";\n\n    private static final String FURNITURE_ELEVATION = \"furnitureElevation#\";\n\n    private static final String FURNITURE_COLOR = \"furnitureColor#\";\n\n    private static final String FURNITURE_MODEL_ROTATION = \"furnitureModelRotation#\";\n\n    private static final String FURNITURE_STAIRCASE_CUT_OUT_SHAPE = \"furnitureStaircaseCutOutShape#\";\n\n    private static final String FURNITURE_BACK_FACE_SHOWN = \"furnitureBackFaceShown#\";\n\n    private static final String FURNITURE_ICON_YAW = \"furnitureIconYaw#\";\n\n    private static final String FURNITURE_PROPORTIONAL = \"furnitureProportional#\";\n\n    private static final String TEXTURE_NAME = \"textureName#\";\n\n    private static final String TEXTURE_CATEGORY = \"textureCategory#\";\n\n    private static final String TEXTURE_IMAGE = \"textureImage#\";\n\n    private static final String TEXTURE_WIDTH = \"textureWidth#\";\n\n    private static final String TEXTURE_HEIGHT = \"textureHeight#\";\n\n    private static final String FURNITURE_CONTENT_PREFIX = \"Furniture-3-\";\n\n    private static final String TEXTURE_CONTENT_PREFIX = \"Texture-3-\";\n\n    private static final String LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER = \"languages\";\n\n    private static final String FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER = \"furniture\";\n\n    private static final String TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER = \"textures\";\n\n    private static final Content DUMMY_CONTENT;\n\n    private final Map<String, Boolean> ignoredActionTips = new HashMap<String, Boolean>();\n\n    private List<ClassLoader> resourceClassLoaders;\n\n    private final File preferencesFolder;\n\n    private final File[] applicationFolders;\n\n    private Preferences preferences;\n\n    private Executor catalogsLoader;\n\n    private Executor updater;\n\n    static {\n    }\n\n    /**\n     * Creates user preferences read from user preferences in file system,\n     * and from resource files.\n     */\n    public FileUserPreferences() {\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or <code>null</code> if this folder is the default one.\n     * @param applicationFolders the folders where application private files are stored\n     *    or <code>null</code> if it's the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won't be able to import them.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders) {\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or <code>null</code> if this folder is the default one.\n     * @param applicationFolders  the folders where application private files are stored\n     *    or <code>null</code> if it's the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won't be able to import them.\n     * @param updater  an executor that will be used to update user preferences for lengthy\n     *    operations. If <code>null</code>, then these operations and\n     *    updates will be executed in the current thread.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders, Executor updater) {\n    }\n\n    /**\n     * Updates the default supported languages with languages available in plugin folder.\n     */\n    private void updateSupportedLanguages();\n\n    /**\n     * Returns the languages included in the given language library file.\n     */\n    private Set<String> getLanguages(File languageLibraryFile) throws IOException;\n\n    /**\n     * Returns the default class loader of user preferences and the class loaders that\n     * give access to resources in language libraries plugin folder.\n     */\n    @Override\n    public List<ClassLoader> getResourceClassLoaders();\n\n    /**\n     * Reloads furniture default catalogs.\n     */\n    private void updateFurnitureDefaultCatalog(Executor furnitureCatalogLoader, final Executor updater);\n\n    /**\n     * Reloads textures default catalog.\n     */\n    private void updateTexturesDefaultCatalog(Executor texturesCatalogLoader, final Executor updater);\n\n    /**\n     * Adds to auto completion strings the default strings of the new chosen language.\n     */\n    private void updateAutoCompletionStrings();\n\n    /**\n     * Read modifiable furniture catalog from preferences.\n     */\n    private void readModifiableFurnitureCatalog(Preferences preferences);\n\n    /**\n     * Returns model rotation parsed from key value.\n     */\n    private float[][] getModelRotation(Preferences preferences, String key);\n\n    /**\n     * Returns a content instance from the resource file value of key.\n     */\n    private Content getContent(Preferences preferences, String key);\n\n    /**\n     * Read modifiable textures catalog from preferences.\n     */\n    private void readModifiableTexturesCatalog(Preferences preferences);\n\n    /**\n     * Writes user preferences in current user preferences in system.\n     */\n    @Override\n    public void write() throws RecorderException;\n\n    /**\n     * Writes modifiable furniture in <code>preferences</code>.\n     */\n    private void writeModifiableFurnitureCatalog(Preferences preferences) throws RecorderException;\n\n    /**\n     * Returns the string value of the given float, except for -1.0, 1.0 or 0.0 where -1, 1 and 0 is returned.\n     */\n    private String floatToString(float f);\n\n    /**\n     * Writes modifiable textures catalog in <code>preferences</code>.\n     */\n    private void writeModifiableTexturesCatalog(Preferences preferences) throws RecorderException;\n\n    /**\n     * Writes <code>key</code> <code>content</code> in <code>preferences</code>.\n     */\n    private void putContent(Preferences preferences, String key, Content content, String contentPrefix, Set<URL> furnitureContentURLs) throws RecorderException;\n\n    /**\n     * Returns a content object that references a copy of <code>content</code> in\n     * user preferences folder.\n     */\n    private URLContent copyToPreferencesURLContent(Content content, String contentPrefix) throws RecorderException;\n\n    /**\n     * Returns the folder where language libraries files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getLanguageLibrariesPluginFolders();\n\n    /**\n     * Returns the folder where furniture catalog files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getFurnitureLibrariesPluginFolders();\n\n    /**\n     * Returns the folder where texture catalog files must be placed\n     * or <code>null</code> if that folder can't be retrieved.\n     */\n    private File[] getTexturesLibrariesPluginFolders();\n\n    /**\n     * Returns the first Sweet Home 3D application folder.\n     */\n    public File getApplicationFolder() throws IOException;\n\n    /**\n     * Returns Sweet Home 3D application folders.\n     */\n    public File[] getApplicationFolders() throws IOException;\n\n    /**\n     * Returns subfolders of Sweet Home 3D application folders of a given name.\n     */\n    public File[] getApplicationSubfolders(String subfolder) throws IOException;\n\n    /**\n     * Returns a new file in user preferences folder.\n     */\n    private File createPreferencesFile(String filePrefix) throws IOException;\n\n    /**\n     * Creates preferences folder and its sub folders if it doesn't exist.\n     */\n    private void checkPreferencesFolder() throws IOException;\n\n    /**\n     * Creates the first folder in the given folders.\n     */\n    private void checkPreferencesSubFolder(File[] librariesPluginFolders);\n\n    /**\n     * Deletes from application folder the content files starting by <code>contentPrefix</code>\n     * that don't belong to <code>contentURLs</code>.\n     */\n    private void deleteObsoleteContent(final Set<URL> contentURLs, final String contentPrefix) throws RecorderException;\n\n    /**\n     * Returns the folder where files depending on preferences are stored.\n     */\n    private File getPreferencesFolder() throws IOException;\n\n    /**\n     * Returns default Java preferences for current system user.\n     * Caution : This method is called once in constructor so overriding implementations\n     * shouldn't be based on the state of their fields.\n     */\n    protected Preferences getPreferences();\n\n    /**\n     * Sets which action tip should be ignored.\n     */\n    @Override\n    public void setActionTipIgnored(String actionKey);\n\n    /**\n     * Returns whether an action tip should be ignored or not.\n     */\n    @Override\n    public boolean isActionTipIgnored(String actionKey);\n\n    /**\n     * Resets the display flag of action tips.\n     */\n    @Override\n    public void resetIgnoredActionTips();\n\n    /**\n     * Returns <code>true</code> if the given language library exists in the first\n     * language libraries folder.\n     */\n    public boolean languageLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds <code>languageLibraryName</code> to the first language libraries folder\n     * to make the language library it contains available to supported languages.\n     */\n    public void addLanguageLibrary(String languageLibraryName) throws RecorderException;\n\n    /**\n     * Returns <code>true</code> if the given furniture library file exists in the first\n     * furniture libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean furnitureLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds the file <code>furnitureLibraryName</code> to the first furniture libraries folder\n     * to make the furniture library available to catalog.\n     */\n    @Override\n    public void addFurnitureLibrary(String furnitureLibraryName) throws RecorderException;\n\n    /**\n     * Returns <code>true</code> if the given textures library file exists in the first textures libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean texturesLibraryExists(String name) throws RecorderException;\n\n    /**\n     * Adds the file <code>texturesLibraryName</code> to the first textures libraries folder\n     * to make the textures library available to catalog.\n     */\n    @Override\n    public void addTexturesLibrary(String texturesLibraryName) throws RecorderException;\n\n    /**\n     * Copies a library file to a folder.\n     */\n    private void copyToLibraryFolder(File libraryFile, File folder) throws IOException;\n\n    /**\n     * Preferences based on the <code>preferences.xml</code> file\n     * stored in a preferences folder.\n     * @author Emmanuel Puybaret\n     */\n    private class PortablePreferences extends AbstractPreferences {\n\n        private static final String PREFERENCES_FILE = \"preferences.xml\";\n\n        private Properties preferencesProperties;\n\n        private boolean exist;\n\n        private PortablePreferences() {\n            super(null, \"\");\n            this.preferencesProperties = new Properties();\n            this.exist = readPreferences();\n        }\n\n        public boolean exist() {\n            return this.exist;\n        }\n\n        @Override\n        protected void syncSpi() throws BackingStoreException {\n            this.preferencesProperties.clear();\n            this.exist = readPreferences();\n        }\n\n        @Override\n        protected void removeSpi(String key) {\n            this.preferencesProperties.remove(key);\n        }\n\n        @Override\n        protected void putSpi(String key, String value) {\n            this.preferencesProperties.put(key, value);\n        }\n\n        @Override\n        protected String[] keysSpi() throws BackingStoreException {\n            return this.preferencesProperties.keySet().toArray(new String[0]);\n        }\n\n        @Override\n        protected String getSpi(String key) {\n            return (String) this.preferencesProperties.get(key);\n        }\n\n        @Override\n        protected void flushSpi() throws BackingStoreException {\n            try {\n                writePreferences();\n            } catch (IOException ex) {\n                throw new BackingStoreException(ex);\n            }\n        }\n\n        @Override\n        protected void removeNodeSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected String[] childrenNamesSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected AbstractPreferences childSpi(String name) {\n            throw new UnsupportedOperationException();\n        }\n\n        /**\n         * Reads user preferences.\n         */\n        private boolean readPreferences() {\n            InputStream in = null;\n            try {\n                in = new FileInputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.loadFromXML(in);\n                return true;\n            } catch (IOException ex) {\n                // Preferences don't exist\n                return false;\n            } finally {\n                try {\n                    if (in != null) {\n                        in.close();\n                    }\n                } catch (IOException ex) {\n                    // Let default preferences unchanged\n                }\n            }\n        }\n\n        /**\n         * Writes user preferences.\n         */\n        private void writePreferences() throws IOException {\n            OutputStream out = null;\n            try {\n                checkPreferencesFolder();\n                out = new FileOutputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.storeToXML(out, \"Portable user preferences 3.0\");\n            } finally {\n                if (out != null) {\n                    out.close();\n                    this.exist = true;\n                }\n            }\n        }\n    }\n}\n",
    "test_prompt": "// FileUserPreferences_1Test.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUserPreferences}.\n* It contains one unit test case for the {@link FileUserPreferences#texturesLibraryExists(String)} method.\n*/\nclass FileUserPreferences_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "285ebe6f-23eb-445b-a511-d140768061ad",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/viewcontroller/UserPreferencesController.java",
    "original_code": "// UserPreferencesController.java\npackage com.eteks.sweethome3d.viewcontroller;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\n\n/**\n * A MVC controller for user preferences view.\n *\n * @author Emmanuel Puybaret\n */\npublic class UserPreferencesController implements Controller {\n\n    /**\n     * The properties that may be edited by the view associated to this controller.\n     */\n    public enum Property {\n\n        LANGUAGE,\n        UNIT,\n        MAGNETISM_ENABLED,\n        RULERS_VISIBLE,\n        GRID_VISIBLE,\n        FURNITURE_VIEWED_FROM_TOP,\n        ROOM_FLOOR_COLORED_OR_TEXTURED,\n        WALL_PATTERN,\n        NEW_WALL_THICKNESS,\n        NEW_WALL_HEIGHT,\n        NEW_FLOOR_THICKNESS,\n        FURNITURE_CATALOG_VIEWED_IN_TREE,\n        NAVIGATION_PANEL_VISIBLE,\n        AUTO_SAVE_DELAY_FOR_RECOVERY,\n        AUTO_SAVE_FOR_RECOVERY_ENABLED\n    }\n\n    private final UserPreferences preferences;\n\n    private final ViewFactory viewFactory;\n\n    private final HomeController homeController;\n\n    private final PropertyChangeSupport propertyChangeSupport;\n\n    private DialogView userPreferencesView;\n\n    private String language;\n\n    private LengthUnit unit;\n\n    private boolean furnitureCatalogViewedInTree;\n\n    private boolean navigationPanelVisible;\n\n    private boolean magnetismEnabled;\n\n    private boolean rulersVisible;\n\n    private boolean gridVisible;\n\n    private boolean furnitureViewedFromTop;\n\n    private boolean roomFloorColoredOrTextured;\n\n    private TextureImage wallPattern;\n\n    private float newWallThickness;\n\n    private float newWallHeight;\n\n    private float newFloorThickness;\n\n    private int autoSaveDelayForRecovery;\n\n    private boolean autoSaveForRecoveryEnabled;\n\n    /**\n     * Creates the controller of user preferences view.\n     */\n    public UserPreferencesController(UserPreferences preferences, ViewFactory viewFactory, ContentManager contentManager) {\n    }\n\n    /**\n     * Creates the controller of user preferences view.\n     */\n    public UserPreferencesController(UserPreferences preferences, ViewFactory viewFactory, ContentManager contentManager, HomeController homeController) {\n    }\n\n    /**\n     * Returns the view associated with this controller.\n     */\n    public DialogView getView();\n\n    /**\n     * Displays the view controlled by this controller.\n     */\n    public void displayView(View parentView);\n\n    /**\n     * Adds the property change <code>listener</code> in parameter to this controller.\n     */\n    public void addPropertyChangeListener(Property property, PropertyChangeListener listener);\n\n    /**\n     * Removes the property change <code>listener</code> in parameter from this controller.\n     */\n    public void removePropertyChangeListener(Property property, PropertyChangeListener listener);\n\n    /**\n     * Updates preferences properties edited by this controller.\n     */\n    protected void updateProperties();\n\n    /**\n     * Returns <code>true</code> if the given <code>property</code> is editable.\n     * Depending on whether a property is editable or not, the view associated to this controller\n     * may render it differently.\n     * The implementation of this method always returns <code>true</code> except for <code>LANGUAGE</code> if it's not editable.\n     */\n    public boolean isPropertyEditable(Property property);\n\n    /**\n     * Sets the edited language.\n     */\n    public void setLanguage(String language);\n\n    /**\n     * Returns the edited language.\n     */\n    public String getLanguage();\n\n    /**\n     * Sets the edited unit.\n     */\n    public void setUnit(LengthUnit unit);\n\n    /**\n     * Returns the edited unit.\n     */\n    public LengthUnit getUnit();\n\n    /**\n     * Sets whether the furniture catalog should be viewed in a tree or a different way.\n     */\n    public void setFurnitureCatalogViewedInTree(boolean furnitureCatalogViewedInTree);\n\n    /**\n     * Returns <code>true</code> if furniture catalog should be viewed in a tree.\n     */\n    public boolean isFurnitureCatalogViewedInTree();\n\n    /**\n     * Sets whether the navigation panel should be displayed or not.\n     */\n    public void setNavigationPanelVisible(boolean navigationPanelVisible);\n\n    /**\n     * Returns <code>true</code> if the navigation panel should be displayed.\n     */\n    public boolean isNavigationPanelVisible();\n\n    /**\n     * Sets whether magnetism is enabled or not.\n     */\n    public void setMagnetismEnabled(boolean magnetismEnabled);\n\n    /**\n     * Returns whether magnetism is enabled or not.\n     */\n    public boolean isMagnetismEnabled();\n\n    /**\n     * Sets whether rulers are visible or not.\n     */\n    public void setRulersVisible(boolean rulersVisible);\n\n    /**\n     * Returns whether rulers are visible or not.\n     */\n    public boolean isRulersVisible();\n\n    /**\n     * Sets whether grid is visible or not.\n     */\n    public void setGridVisible(boolean gridVisible);\n\n    /**\n     * Returns whether grid is visible or not.\n     */\n    public boolean isGridVisible();\n\n    /**\n     * Sets how furniture should be displayed in plan.\n     */\n    public void setFurnitureViewedFromTop(boolean furnitureViewedFromTop);\n\n    /**\n     * Returns how furniture should be displayed in plan.\n     */\n    public boolean isFurnitureViewedFromTop();\n\n    /**\n     * Sets whether floor texture is visible in plan or not.\n     */\n    public void setRoomFloorColoredOrTextured(boolean floorTextureVisible);\n\n    /**\n     * Returns <code>true</code> if floor texture is visible in plan.\n     */\n    public boolean isRoomFloorColoredOrTextured();\n\n    /**\n     * Sets how furniture should be displayed in plan, and notifies\n     * listeners of this change.\n     */\n    public void setWallPattern(TextureImage wallPattern);\n\n    /**\n     * Returns the wall pattern in plan.\n     */\n    public TextureImage getWallPattern();\n\n    /**\n     * Sets the edited new wall thickness.\n     */\n    public void setNewWallThickness(float newWallThickness);\n\n    /**\n     * Returns the edited new wall thickness.\n     */\n    public float getNewWallThickness();\n\n    /**\n     * Sets the edited new wall height.\n     */\n    public void setNewWallHeight(float newWallHeight);\n\n    /**\n     * Returns the edited new wall height.\n     */\n    public float getNewWallHeight();\n\n    /**\n     * Sets the edited new floor thickness.\n     */\n    public void setNewFloorThickness(float newFloorThickness);\n\n    /**\n     * Returns the edited new floor thickness.\n     */\n    public float getNewFloorThickness();\n\n    /**\n     * Sets the edited auto recovery save delay.\n     */\n    public void setAutoSaveDelayForRecovery(int autoSaveDelayForRecovery);\n\n    /**\n     * Returns the edited auto recovery save delay.\n     */\n    public int getAutoSaveDelayForRecovery();\n\n    /**\n     * Sets whether auto recovery save is enabled or not.\n     */\n    public void setAutoSaveForRecoveryEnabled(boolean autoSaveForRecoveryEnabled);\n\n    /**\n     * Returns <code>true</code> if auto recovery save is enabled.\n     */\n    public boolean isAutoSaveForRecoveryEnabled();\n\n    /**\n     * Returns <code>true</code> if language libraries can be imported.\n     */\n    public boolean mayImportLanguageLibrary();\n\n    /**\n     * Imports a language library chosen by the user.\n     */\n    public void importLanguageLibrary();\n\n    /**\n     * Controls the modification of user preferences.\n     */\n    public void modifyUserPreferences();\n\n    /**\n     * Resets the displayed flags of action tips.\n     */\n    public void resetDisplayedActionTips();\n}\n",
    "test_prompt": "// UserPreferencesControllerTest.java\npackage com.eteks.sweethome3d.viewcontroller;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserPreferencesController}.\n* It contains one unit test case for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.\n*/\nclass UserPreferencesControllerTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "64e8abd9-7e7d-4605-81b7-e4cd3ebe99e7",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/TextureManager.java",
    "original_code": "// TextureManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.media.j3d.ImageComponent;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.Texture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.sun.j3d.utils.image.TextureLoader;\n\n/**\n * Singleton managing texture image cache.\n *\n * @author Emmanuel Puybaret\n */\npublic class TextureManager {\n\n    private static TextureManager instance;\n\n    // Image used if an image content couldn't be loaded\n    private final Texture errorTexture;\n\n    // Image used while an image content is loaded\n    private final Texture waitTexture;\n\n    // Map storing loaded texture contents\n    private final Map<Content, TextureKey> contentTextureKeys;\n\n    // Map storing loaded textures\n    private final Map<TextureKey, Texture> textures;\n\n    // Map storing model nodes being loaded\n    private Map<Content, List<TextureObserver>> loadingTextureObservers;\n\n    // Executor used to load images\n    private ExecutorService texturesLoader;\n\n    private TextureManager() {\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static TextureManager getInstance();\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear();\n\n    /**\n     * Returns a texture image of one pixel of the given <code>color</code>.\n     */\n    private Texture getColoredImageTexture(Color color);\n\n    /**\n     * Reads a texture image from <code>content</code> notified to <code>textureObserver</code>\n     * If the texture isn't loaded in cache yet, a one pixel white image texture will be notified\n     * immediately to the given <code>textureObserver</code>, then a second notification will\n     * be given in Event Dispatch Thread once the image texture is loaded. If the texture is in cache,\n     * it will be notified immediately to the given <code>textureObserver</code>.\n     * @param content an object containing an image\n     * @param textureObserver the observer that will be notified once the texture is available\n     */\n    public void loadTexture(final Content content, final TextureObserver textureObserver);\n\n    /**\n     * Reads a texture image from <code>content</code> notified to <code>textureObserver</code>.\n     * If the texture isn't loaded in cache yet and <code>synchronous</code> is false, a one pixel\n     * white image texture will be notified immediately to the given <code>textureObserver</code>,\n     * then a second notification will be given in Event Dispatch Thread once the image texture is loaded.\n     * If the texture is in cache, it will be notified immediately to the given <code>textureObserver</code>.\n     * @param content an object containing an image\n     * @param synchronous if <code>true</code>, this method will return only once image content is loaded.\n     * @param textureObserver the observer that will be notified once the texture is available\n     * @throws IllegalStateException if synchronous is <code>false</code> and the current thread isn't\n     *    the Event Dispatch Thread.\n     */\n    public void loadTexture(final Content content, boolean synchronous, final TextureObserver textureObserver);\n\n    /**\n     * Returns a texture created from the image from <code>content</code>.\n     */\n    public Texture loadTexture(final Content content);\n\n    /**\n     * Returns either the <code>texture</code> in parameter or a shared texture\n     * if the same texture as the one in parameter is already shared.\n     */\n    public Texture shareTexture(Texture texture);\n\n    /**\n     * Returns the texture matching <code>content</code>, either\n     * the <code>texture</code> in parameter or a shared texture if the\n     * same texture as the one in parameter is already shared.\n     */\n    private Texture shareTexture(final Texture texture, final Content content);\n\n    /**\n     * Sets the attributes and capabilities of a shared <code>texture</code>.\n     */\n    private void setSharedTextureAttributesAndCapabilities(Texture texture);\n\n    /**\n     * Returns <code>true</code> if the texture is shared and its image contains\n     * at least one transparent pixel.\n     */\n    public boolean isTextureTransparent(Texture texture);\n\n    /**\n     * An observer that receives texture loading notifications.\n     */\n    public static interface TextureObserver {\n\n        public void textureUpdated(Texture texture);\n    }\n\n    /**\n     * Key used to ensure texture uniqueness in textures map.\n     * Image bits of the texture are stored in a weak reference to avoid grabbing memory uselessly.\n     */\n    private static class TextureKey {\n\n        private Texture texture;\n\n        private WeakReference<int[]> imageBits;\n\n        private int hashCodeCache;\n\n        private boolean hashCodeSet;\n\n        private boolean transparent;\n\n        public TextureKey(Texture texture) {\n            this.texture = texture;\n        }\n\n        public Texture getTexture() {\n            return this.texture;\n        }\n\n        /**\n         * Returns the pixels of the given <code>image</code>.\n         */\n        private int[] getImagePixels() {\n            int[] imageBits = null;\n            if (this.imageBits != null) {\n                imageBits = this.imageBits.get();\n            }\n            if (imageBits == null) {\n                BufferedImage image = ((ImageComponent2D) this.texture.getImage(0)).getImage();\n                if (image.getType() != BufferedImage.TYPE_INT_RGB && image.getType() != BufferedImage.TYPE_INT_ARGB) {\n                    // Transform as TYPE_INT_ARGB or TYPE_INT_RGB (much faster than calling image.getRGB())\n                    BufferedImage tmp = new BufferedImage(image.getWidth(), image.getHeight(), this.texture.getFormat() == Texture.RGBA ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB);\n                    Graphics2D g = (Graphics2D) tmp.getGraphics();\n                    g.drawImage(image, null, 0, 0);\n                    g.dispose();\n                    image = tmp;\n                }\n                imageBits = (int[]) image.getRaster().getDataElements(0, 0, image.getWidth(), image.getHeight(), null);\n                this.transparent = image.getTransparency() != BufferedImage.OPAQUE;\n                this.imageBits = new WeakReference<int[]>(imageBits);\n            }\n            return imageBits;\n        }\n\n        /**\n         * Returns <code>true</code> if the image of the texture contains at least one transparent pixel.\n         */\n        public boolean isTransparent() {\n            return this.transparent;\n        }\n\n        /**\n         * Returns <code>true</code> if the image of this texture and\n         * the image of the object in parameter are the same.\n         */\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            } else if (obj instanceof TextureKey) {\n                TextureKey textureKey = (TextureKey) obj;\n                if (this.texture == textureKey.texture) {\n                    return true;\n                } else if (hashCode() == textureKey.hashCode()) {\n                    return Arrays.equals(getImagePixels(), textureKey.getImagePixels());\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            if (!this.hashCodeSet) {\n                this.hashCodeCache = Arrays.hashCode(getImagePixels());\n                this.hashCodeSet = true;\n            }\n            return this.hashCodeCache;\n        }\n    }\n}\n",
    "test_prompt": "// TextureManagerTest.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.media.j3d.ImageComponent;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.Texture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.sun.j3d.utils.image.TextureLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextureManager}.\n* It contains one unit test case for the {@link TextureManager#getInstance()} method.\n*/\nclass TextureManagerTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "cd20afd3-8ffc-4964-8d8b-047aa7c25040",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager_0Test.java",
    "original_code": "// Component3DManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\n\n/**\n * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.\n * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.\n *\n * @author Emmanuel Puybaret\n */\npublic class Component3DManager {\n\n    private static final String CHECK_OFF_SCREEN_IMAGE_SUPPORT = \"com.eteks.sweethome3d.j3d.checkOffScreenSupport\";\n\n    private static Component3DManager instance;\n\n    private RenderingErrorObserver renderingErrorObserver;\n\n    // (use Object class to ensure Component3DManager class can run with Java 3D 1.3.1)\n    private Object renderingErrorListener;\n\n    private Boolean offScreenImageSupported;\n\n    private GraphicsConfiguration defaultScreenConfiguration;\n\n    private Component3DManager() {\n    }\n\n    /**\n     * Returns the template to configure the graphics of canvas 3D.\n     */\n    private GraphicsConfigTemplate3D createGraphicsConfigurationTemplate3D();\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static Component3DManager getInstance();\n\n    /**\n     * Sets the current rendering error listener bound to <code>VirtualUniverse</code>.\n     */\n    public void setRenderingErrorObserver(RenderingErrorObserver observer);\n\n    /**\n     * Returns the current rendering error listener bound to <code>VirtualUniverse</code>.\n     */\n    public RenderingErrorObserver getRenderingErrorObserver();\n\n    /**\n     * Returns <code>true</code> if offscreen is supported in Java 3D on user system.\n     * Will always return <code>false</code> if <code>com.eteks.sweethome3d.j3d.checkOffScreenSupport</code>\n     * system is equal to <code>false</code>. By default, <code>com.eteks.sweethome3d.j3d.checkOffScreenSupport</code>\n     * is equal to <code>true</code>.\n     */\n    public boolean isOffScreenImageSupported();\n\n    /**\n     * Returns a new <code>canva3D</code> instance that will call <code>renderingObserver</code>\n     * methods during the rendering loop.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    private Canvas3D getCanvas3D(GraphicsConfiguration deviceConfiguration, boolean offscreen, final RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance. The returned canvas 3D will be associated\n     * with the graphics configuration of the default screen device.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D();\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance which rendering will be observed\n     * with the given rendering observer. The returned canvas 3D will be associated with the\n     * graphics configuration of the default screen device.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance which rendering will be observed\n     * with the given rendering observer.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(GraphicsConfiguration deviceConfiguration, RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new off screen <code>canva3D</code> at the given size.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     *    To avoid this exception, call {@link #isOffScreenImageSupported() isOffScreenImageSupported()} first.\n     */\n    public Canvas3D getOffScreenCanvas3D(int width, int height);\n\n    /**\n     * Returns an image at the given size of the 3D <code>view</code>.\n     * This image is created with an off screen canvas.\n     * @throws IllegalRenderingStateException  if the image couldn't be created.\n     */\n    public BufferedImage getOffScreenImage(View view, int width, int height);\n\n    /**\n     * An observer that receives error notifications in Java 3D.\n     */\n    public static interface RenderingErrorObserver {\n\n        void errorOccured(int errorCode, String errorMessage);\n    }\n\n    /**\n     * Manages Java 3D 1.5 <code>RenderingErrorListener</code> change matching the given\n     * rendering error observer.\n     */\n    private static class RenderingErrorListenerManager {\n\n        public static Object setRenderingErrorObserver(final RenderingErrorObserver observer, Object previousRenderingErrorListener) {\n            if (previousRenderingErrorListener != null) {\n                VirtualUniverse.removeRenderingErrorListener((RenderingErrorListener) previousRenderingErrorListener);\n            }\n            RenderingErrorListener renderingErrorListener = new RenderingErrorListener() {\n\n                public void errorOccurred(RenderingError error) {\n                    observer.errorOccured(error.getErrorCode(), error.getErrorMessage());\n                }\n            };\n            VirtualUniverse.addRenderingErrorListener(renderingErrorListener);\n            return renderingErrorListener;\n        }\n    }\n\n    /**\n     * An observer that receives notifications during the different steps\n     * of the loop rendering a canvas 3D.\n     */\n    public static interface RenderingObserver {\n\n        /**\n         * Called before <code>canvas3D</code> is rendered.\n         */\n        public void canvas3DPreRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after <code>canvas3D</code> is rendered.\n         */\n        public void canvas3DPostRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after <code>canvas3D</code> buffer is swapped.\n         */\n        public void canvas3DSwapped(Canvas3D canvas3D);\n    }\n}\n",
    "test_prompt": "// Component3DManager_0Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Component3DManager}.\n* It contains one unit test case for the {@link Component3DManager#getInstance()} method.\n*/\nclass Component3DManager_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "c11cb64e-d04e-4782-90c3-68ae90d7039e",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager_1Test.java",
    "original_code": "// Component3DManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\n\n/**\n * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.\n * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.\n *\n * @author Emmanuel Puybaret\n */\npublic class Component3DManager {\n\n    private static final String CHECK_OFF_SCREEN_IMAGE_SUPPORT = \"com.eteks.sweethome3d.j3d.checkOffScreenSupport\";\n\n    private static Component3DManager instance;\n\n    private RenderingErrorObserver renderingErrorObserver;\n\n    // (use Object class to ensure Component3DManager class can run with Java 3D 1.3.1)\n    private Object renderingErrorListener;\n\n    private Boolean offScreenImageSupported;\n\n    private GraphicsConfiguration defaultScreenConfiguration;\n\n    private Component3DManager() {\n    }\n\n    /**\n     * Returns the template to configure the graphics of canvas 3D.\n     */\n    private GraphicsConfigTemplate3D createGraphicsConfigurationTemplate3D();\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static Component3DManager getInstance();\n\n    /**\n     * Sets the current rendering error listener bound to <code>VirtualUniverse</code>.\n     */\n    public void setRenderingErrorObserver(RenderingErrorObserver observer);\n\n    /**\n     * Returns the current rendering error listener bound to <code>VirtualUniverse</code>.\n     */\n    public RenderingErrorObserver getRenderingErrorObserver();\n\n    /**\n     * Returns <code>true</code> if offscreen is supported in Java 3D on user system.\n     * Will always return <code>false</code> if <code>com.eteks.sweethome3d.j3d.checkOffScreenSupport</code>\n     * system is equal to <code>false</code>. By default, <code>com.eteks.sweethome3d.j3d.checkOffScreenSupport</code>\n     * is equal to <code>true</code>.\n     */\n    public boolean isOffScreenImageSupported();\n\n    /**\n     * Returns a new <code>canva3D</code> instance that will call <code>renderingObserver</code>\n     * methods during the rendering loop.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    private Canvas3D getCanvas3D(GraphicsConfiguration deviceConfiguration, boolean offscreen, final RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance. The returned canvas 3D will be associated\n     * with the graphics configuration of the default screen device.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D();\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance which rendering will be observed\n     * with the given rendering observer. The returned canvas 3D will be associated with the\n     * graphics configuration of the default screen device.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new on screen <code>canva3D</code> instance which rendering will be observed\n     * with the given rendering observer.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(GraphicsConfiguration deviceConfiguration, RenderingObserver renderingObserver);\n\n    /**\n     * Returns a new off screen <code>canva3D</code> at the given size.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn't be created.\n     *    To avoid this exception, call {@link #isOffScreenImageSupported() isOffScreenImageSupported()} first.\n     */\n    public Canvas3D getOffScreenCanvas3D(int width, int height);\n\n    /**\n     * Returns an image at the given size of the 3D <code>view</code>.\n     * This image is created with an off screen canvas.\n     * @throws IllegalRenderingStateException  if the image couldn't be created.\n     */\n    public BufferedImage getOffScreenImage(View view, int width, int height);\n\n    /**\n     * An observer that receives error notifications in Java 3D.\n     */\n    public static interface RenderingErrorObserver {\n\n        void errorOccured(int errorCode, String errorMessage);\n    }\n\n    /**\n     * Manages Java 3D 1.5 <code>RenderingErrorListener</code> change matching the given\n     * rendering error observer.\n     */\n    private static class RenderingErrorListenerManager {\n\n        public static Object setRenderingErrorObserver(final RenderingErrorObserver observer, Object previousRenderingErrorListener) {\n            if (previousRenderingErrorListener != null) {\n                VirtualUniverse.removeRenderingErrorListener((RenderingErrorListener) previousRenderingErrorListener);\n            }\n            RenderingErrorListener renderingErrorListener = new RenderingErrorListener() {\n\n                public void errorOccurred(RenderingError error) {\n                    observer.errorOccured(error.getErrorCode(), error.getErrorMessage());\n                }\n            };\n            VirtualUniverse.addRenderingErrorListener(renderingErrorListener);\n            return renderingErrorListener;\n        }\n    }\n\n    /**\n     * An observer that receives notifications during the different steps\n     * of the loop rendering a canvas 3D.\n     */\n    public static interface RenderingObserver {\n\n        /**\n         * Called before <code>canvas3D</code> is rendered.\n         */\n        public void canvas3DPreRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after <code>canvas3D</code> is rendered.\n         */\n        public void canvas3DPostRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after <code>canvas3D</code> buffer is swapped.\n         */\n        public void canvas3DSwapped(Canvas3D canvas3D);\n    }\n}\n",
    "test_prompt": "// Component3DManager_1Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Component3DManager}.\n* It contains one unit test case for the {@link Component3DManager#getOnscreenCanvas3D(RenderingObserver)} method.\n*/\nclass Component3DManager_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "db51fee6-56c0-4964-8e45-6b6d6880adf4",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_0Test.java",
    "original_code": "// ModelManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D <code>Loader</code> interface may be\n * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>\n * (separated by a space or a colon :) to enable the support of other formats.<br>\n * Note: this class is compatible with Java 3D 1.3.\n *\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * <code>Shape3D</code> user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX = \"sweethome3d_window_pane\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX = \"sweethome3d_window_mirror\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX = \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES = new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL = new Material();\n\n    private static final float MINIMUM_SIZE = 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES = \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map<Content, BranchGroup> loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map<Content, List<ModelObserver>> loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class<Loader>[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map<String, Shape> parsedShapes;\n\n    private ModelManager() {\n    }\n\n    /**\n     * Returns the class of name <code>loaderClassName</code>.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<Loader> getLoaderClass(String loaderClassName);\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance();\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear();\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize();\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node);\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code> after an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code> with an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes, contrary to <code>node.getBounds()</code>\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation);\n\n    /**\n     * Returns <code>true</code> if the rotation matrix matches only rotations of\n     * a multiple of 90\ufffd degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation);\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry);\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation);\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper);\n\n    /**\n     * Returns a transform group that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Returns a transform that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Reads asynchronously a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn't the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver);\n\n    /**\n     * Reads a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param synchronous if <code>true</code>, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is <code>false</code> and the current thread isn't\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver);\n\n    /**\n     * Returns a clone of the given <code>node</code>.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node);\n\n    private Node cloneNode(Node node, Map<SharedGroup, SharedGroup> clonedSharedGroups);\n\n    /**\n     * Returns the node loaded synchronously from <code>content</code> with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException;\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene);\n\n    /**\n     * Turns off light nodes of <code>node</code> children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node);\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given <code>node</code>\n     * projected on the floor (plan y = 0).\n     */\n    public Area getAreaOnFloor(Node node);\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node);\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeVerticesOnFloor(Node node, List<float[]> vertices, Transform3D parentTransformations);\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations);\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Returns the convex polygon that surrounds the given <code>vertices</code>.\n     * From Andrew's monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices);\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2);\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase);\n\n    /**\n     * Returns the mirror area of the given <code>area</code>.\n     */\n    private Area getMirroredArea(Area area);\n\n    /**\n     * Returns the AWT shape matching the given <a href=\"http://www.w3.org/TR/SVG/paths.html\">SVG path shape</a>.\n     */\n    private Shape parseShape(String svgPathShape);\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer = new AWTPathProducer();\n                PathParser pathParser = new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "test_prompt": "// ModelManager_0Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains one unit test case for the {@link ModelManager#getInstance()} method.\n*/\nclass ModelManager_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "33f28468-104d-4c73-84e8-0ea9dde32dbc",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_1Test.java",
    "original_code": "// ModelManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D <code>Loader</code> interface may be\n * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>\n * (separated by a space or a colon :) to enable the support of other formats.<br>\n * Note: this class is compatible with Java 3D 1.3.\n *\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * <code>Shape3D</code> user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX = \"sweethome3d_window_pane\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX = \"sweethome3d_window_mirror\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX = \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES = new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL = new Material();\n\n    private static final float MINIMUM_SIZE = 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES = \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map<Content, BranchGroup> loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map<Content, List<ModelObserver>> loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class<Loader>[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map<String, Shape> parsedShapes;\n\n    private ModelManager() {\n    }\n\n    /**\n     * Returns the class of name <code>loaderClassName</code>.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<Loader> getLoaderClass(String loaderClassName);\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance();\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear();\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize();\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node);\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code> after an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code> with an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes, contrary to <code>node.getBounds()</code>\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation);\n\n    /**\n     * Returns <code>true</code> if the rotation matrix matches only rotations of\n     * a multiple of 90\ufffd degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation);\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry);\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation);\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper);\n\n    /**\n     * Returns a transform group that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Returns a transform that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Reads asynchronously a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn't the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver);\n\n    /**\n     * Reads a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param synchronous if <code>true</code>, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is <code>false</code> and the current thread isn't\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver);\n\n    /**\n     * Returns a clone of the given <code>node</code>.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node);\n\n    private Node cloneNode(Node node, Map<SharedGroup, SharedGroup> clonedSharedGroups);\n\n    /**\n     * Returns the node loaded synchronously from <code>content</code> with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException;\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene);\n\n    /**\n     * Turns off light nodes of <code>node</code> children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node);\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given <code>node</code>\n     * projected on the floor (plan y = 0).\n     */\n    public Area getAreaOnFloor(Node node);\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node);\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeVerticesOnFloor(Node node, List<float[]> vertices, Transform3D parentTransformations);\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations);\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Returns the convex polygon that surrounds the given <code>vertices</code>.\n     * From Andrew's monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices);\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2);\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase);\n\n    /**\n     * Returns the mirror area of the given <code>area</code>.\n     */\n    private Area getMirroredArea(Area area);\n\n    /**\n     * Returns the AWT shape matching the given <a href=\"http://www.w3.org/TR/SVG/paths.html\">SVG path shape</a>.\n     */\n    private Shape parseShape(String svgPathShape);\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer = new AWTPathProducer();\n                PathParser pathParser = new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "test_prompt": "// ModelManager_1Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains one unit test case for the {@link ModelManager#getNormalizedTransformGroup(Node, float[][], float)} method.\n*/\nclass ModelManager_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "771c7484-0dc9-45cb-8678-34b3d86ef64e",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_2Test.java",
    "original_code": "// ModelManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D <code>Loader</code> interface may be\n * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>\n * (separated by a space or a colon :) to enable the support of other formats.<br>\n * Note: this class is compatible with Java 3D 1.3.\n *\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * <code>Shape3D</code> user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX = \"sweethome3d_window_pane\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX = \"sweethome3d_window_mirror\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX = \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES = new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL = new Material();\n\n    private static final float MINIMUM_SIZE = 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES = \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map<Content, BranchGroup> loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map<Content, List<ModelObserver>> loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class<Loader>[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map<String, Shape> parsedShapes;\n\n    private ModelManager() {\n    }\n\n    /**\n     * Returns the class of name <code>loaderClassName</code>.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<Loader> getLoaderClass(String loaderClassName);\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance();\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear();\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize();\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node);\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code> after an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code> with an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes, contrary to <code>node.getBounds()</code>\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation);\n\n    /**\n     * Returns <code>true</code> if the rotation matrix matches only rotations of\n     * a multiple of 90\ufffd degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation);\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry);\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation);\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper);\n\n    /**\n     * Returns a transform group that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Returns a transform that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Reads asynchronously a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn't the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver);\n\n    /**\n     * Reads a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param synchronous if <code>true</code>, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is <code>false</code> and the current thread isn't\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver);\n\n    /**\n     * Returns a clone of the given <code>node</code>.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node);\n\n    private Node cloneNode(Node node, Map<SharedGroup, SharedGroup> clonedSharedGroups);\n\n    /**\n     * Returns the node loaded synchronously from <code>content</code> with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException;\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene);\n\n    /**\n     * Turns off light nodes of <code>node</code> children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node);\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given <code>node</code>\n     * projected on the floor (plan y = 0).\n     */\n    public Area getAreaOnFloor(Node node);\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node);\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeVerticesOnFloor(Node node, List<float[]> vertices, Transform3D parentTransformations);\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations);\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Returns the convex polygon that surrounds the given <code>vertices</code>.\n     * From Andrew's monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices);\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2);\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase);\n\n    /**\n     * Returns the mirror area of the given <code>area</code>.\n     */\n    private Area getMirroredArea(Area area);\n\n    /**\n     * Returns the AWT shape matching the given <a href=\"http://www.w3.org/TR/SVG/paths.html\">SVG path shape</a>.\n     */\n    private Shape parseShape(String svgPathShape);\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer = new AWTPathProducer();\n                PathParser pathParser = new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "test_prompt": "// ModelManager_2Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains one unit test case for the {@link ModelManager#getNormalizedTransform(Node, float[][], float)} method.\n*/\nclass ModelManager_2Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "35786b9b-a46a-421f-95ad-6bd2404877bd",
    "prompt_id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_3Test.java",
    "original_code": "// ModelManager.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D <code>Loader</code> interface may be\n * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>\n * (separated by a space or a colon :) to enable the support of other formats.<br>\n * Note: this class is compatible with Java 3D 1.3.\n *\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * <code>Shape3D</code> user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX = \"sweethome3d_window_pane\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX = \"sweethome3d_window_mirror\";\n\n    /**\n     * <code>Shape3D</code> user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX = \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES = new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL = new Material();\n\n    private static final float MINIMUM_SIZE = 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES = \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map<Content, BranchGroup> loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map<Content, List<ModelObserver>> loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class<Loader>[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map<String, Shape> parsedShapes;\n\n    private ModelManager() {\n    }\n\n    /**\n     * Returns the class of name <code>loaderClassName</code>.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class<Loader> getLoaderClass(String loaderClassName);\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance();\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear();\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize();\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node);\n\n    /**\n     * Returns the size of 3D shapes of <code>node</code> after an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code>.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to <code>node.getBounds()</code> that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node);\n\n    /**\n     * Returns the bounds of the 3D shapes of <code>node</code> with an additional <code>transformation</code>.\n     * This method computes the exact box that contains all the shapes, contrary to <code>node.getBounds()</code>\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation);\n\n    /**\n     * Returns <code>true</code> if the rotation matrix matches only rotations of\n     * a multiple of 90\ufffd degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation);\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry);\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation);\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper);\n\n    /**\n     * Returns a transform group that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Returns a transform that will transform the model <code>node</code>\n     * to let it fill a box of the given <code>width</code> centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or <code>null</code> if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);\n\n    /**\n     * Reads asynchronously a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn't the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver);\n\n    /**\n     * Reads a 3D node from <code>content</code> with supported loaders\n     * and notifies the loaded model to the given <code>modelObserver</code> once available.\n     * @param content an object containing a model\n     * @param synchronous if <code>true</code>, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is <code>false</code> and the current thread isn't\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver);\n\n    /**\n     * Returns a clone of the given <code>node</code>.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node);\n\n    private Node cloneNode(Node node, Map<SharedGroup, SharedGroup> clonedSharedGroups);\n\n    /**\n     * Returns the node loaded synchronously from <code>content</code> with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException;\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene);\n\n    /**\n     * Turns off light nodes of <code>node</code> children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node);\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given <code>node</code>\n     * projected on the floor (plan y = 0).\n     */\n    public Area getAreaOnFloor(Node node);\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node);\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeVerticesOnFloor(Node node, List<float[]> vertices, Transform3D parentTransformations);\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of <code>node</code>.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations);\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea);\n\n    /**\n     * Adds to <code>nodePath</code> the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea);\n\n    /**\n     * Returns the convex polygon that surrounds the given <code>vertices</code>.\n     * From Andrew's monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices);\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2);\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase);\n\n    /**\n     * Returns the mirror area of the given <code>area</code>.\n     */\n    private Area getMirroredArea(Area area);\n\n    /**\n     * Returns the AWT shape matching the given <a href=\"http://www.w3.org/TR/SVG/paths.html\">SVG path shape</a>.\n     */\n    private Shape parseShape(String svgPathShape);\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer = new AWTPathProducer();\n                PathParser pathParser = new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "test_prompt": "// ModelManager_3Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains one unit test case for the {@link ModelManager#loadModel(Content)} method.\n*/\nclass ModelManager_3Test {",
    "time_taken": -1
}
]