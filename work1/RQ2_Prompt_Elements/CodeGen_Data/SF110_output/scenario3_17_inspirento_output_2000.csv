ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
ce194685-966f-45c5-be1c-1bd33cf1f5c0,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java,64.33131074905396,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity();
}
","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {

    /**
     * Test case for <code>capacity()</code> method.
     */
	@Test
    void testCapacity() {
        DefaultNoteListModel m = new DefaultNoteListModel();
		
        int oldCapacity = m.capacity();
        m.add(new AbstractNote(""a""));
		
        // No change the capacity of m.
        assertEquals(m.capacity(), oldCapacity+1);

        // Reset the capacity to the old value
        m.reset();
        assertEquals(m.capacity(), oldCapacity);
    }
}"
492f7ecd-b302-4227-b23a-6f8504425d8e,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java,62.12356448173523,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size();
}
","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {
private Collection<AbstractNote> allNotesList = getAllNotesList() ;
		private AbstractNote toDelete;
		private int sizeOfAllNotesList = this.allNotesList.size() ;

		/**
		* Returns the number of notes in this list.
		*
		* @return the number of notes in this list
		* @see com.allenstudio.ir.ui.DefaultNoteListModel#size()
		*/
		public int size();
	        //    @Test
        public void testSize()
        {
			assertEquals(1, sizeOfAllNotesList) ;
		}

		/**
		* Checks if <code>n</code> is the last element.
		*
		* @return {@code true} if it is the last, {@code false} if not
		*/
		public boolean isLast();

		/**
		* Checks if a specific note is in this list.
		*
		* @param n the note to check
		* @return {@code true} if n is in this list and {@code false} of not
		*/
		public boolean contains(AbstractNote n);

		/**
		* Checks if a specific note is in this list.
		*
		* @param n the note to check
		* @return {@code true} if n is in this list and {@code false} of not
		*/
		public boolean contains(AbstractNote n, Collection<AbstractNote> allNotesList);

		/**
		* Returns <code>true</code> if any of the notes in the given collection is in this list.
		*
		* @param c the collection of notes to check
		* @return <code>true</code> if any of the notes in the given collection is in this list
		*/
		public boolean contains(Collection<AbstractNote> c) ;
	}
"
52f9e1aa-9c2c-42e9-aeac-38e7fa79031f,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java,60.94151568412781,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements();
}
","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {

    /**
     * The default note.
     */
    private AbstractNote note;

    /**
     * Creates a new instance of this class.
     * 
     * @param note the note
     */
    public DefaultNoteListModel_2Test(AbstractNote note) {
       this.note = note;
    }

}"
a300f71d-37d3-4ee1-bd9f-2beed4f01672,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java,57.11683011054993,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem);
}
","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {
private final DefaultNoteListModel listModel_3 = new DefaultNoteListModel();
		
		/**
		* The test method for {@link DefaultNoteListModel#contains(AbstractNote)}.
		*/
		@Test
		public void contains() {
			// given
			final AbstractNote element_3 = new TestElement_1();
			final Collection<AbstractNote> allNotes_2 = Collections.emptySet()
				.asList();
			final ListView_1 view_1 = new List_1(allNotes_2);
			assertTrue(""contains for empty collection"",
					listModel_3.contains(element_3));
			
//         // when
//         assertTrue(""getNumberOfElements"", listModel_3.getNumberOfElements()==1);
//         for (final Iterator<AbstractNote> it = listModel_3.cloneElementIterator(); it.hasNext(); ) {
//         // then
//         assertTrue(""element is found"", listModel.get()!=null);
//         assertTrue(""element is not an element"", listModel.contains(element_3)
//                 && listModel.contains(it.next()));
//         }
		}
		
        /**
        * Test method for {@link DefaultNoteListModel#getNumberOfElements()}.
        * 
        * Method testGetNumberOfElements() has return value set to 1.
        */
        @Test
        public void getNumberOfElements() {
            // arrange
            final DefaultListView<AbstractNote> listView_1;
            try {
                listView_1 = new DefaultListView<AbstractNote>(new DefaultTableModel(5));
                listModel_3.onListViewAdd(listView_1);
                listView_1.setModel(new DefaultTableModel(5)); // set empty list at the end

            } catch (final IndexOutOfBoundsException ex) {
                // expected...
            }

            // then
            assertEquals(""getNumberOfElements"", 1, listModel_3.getNumberOfElements());
        }

//        private final class TestElement_1 implements AbstractNote {
//            int index;
//        }
//
//        private final class List_1 implements ListModel<AbstractNote> {
//            private final List<AbstractNote> allNotes_2;
//
//            public List_1(final List<AbstractNote> allNotes_2) {
//                this.allNotes_2 = allNotes_2;
//            }
//            
//            public List<AbstractNote> get() {
//                return this.allNotes_2;
//            }
//        }
}"
a1e01513-086f-4f53-b633-97d677395a3f,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java,60.106014013290405,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem);
}
","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {

    /**
     * Empty private constructor to force the class construction.
     */
     private DefaultNoteListModel_4Test() {
    }

    @Test
    public void emptyDefaultNoteList_5Test() {
        String noteString =  ""TBD"", noteString2 = ""TBD2"";

		final DefaultNoteListModel listModel = new DefaultNoteListModel();

        listModel.add(new DefaultNote(""NOTE""));
        listModel.add(new DefaultNote(""NOTE""));

		final Collection resultCollection = listModel.get(0);

		assertEquals(3, resultCollection.size());    
        assertEquals(noteString, resultCollection.iterator().next());
        assertEquals(noteString2, resultCollection.iterator().next());
        assertFalse(listModel.isEmpty());
    }
}


"
54abfd06-905d-457a-85c8-7553e3544236,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java,58.070969581604004,length,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem an desired component
     * @param index the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index);
}
","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {

	@Test
    public void test1_1_1_1(){
		
		final DefaultNoteListModelModel model =  new DefaultNoteListModel(this);
		
		final ArrayList<AbstractNote> list = new ArrayList<>();
        model.addCollectionEventListener( new NoteListDataListener() {
				
			@Override
			public void noteAdded( NoteListDataEvent e ) {
				notifyAddElement( 1, new AbstractNote() {
					@Override
					public boolean equals( Object other ) {
						return false;
					}
					
					@Override
					public char getChar() {
						return 'A';
					}
					
					@Override
					public long getCount() {
						return 0;
					}

					@Override
					public float getFloat() {
						return 0;
					}
					
					@Override
					public int getInt() {
						return 0;
					}
					
					@Override
					public char getNoteChar() {
						return 'A';
					}
					
					@Override
					public int getNoteIndex() {
						return 0;
					}
					
					@Override
					public int getNoteLength() {
						return 0;
					}
					
					@Override
					public Set<?> getNotes() {
						return Collections.singleton( (Set) Collections
									.singleton( ""A"") );
					}
					
					@Override
					public boolean getShowNoteIndex() {
						return false;
					}
					
					@Override
					public boolean isDirty() {
						return false;
					}
					
					@Override
					public Collection<?> getElements() {
						return list;
					}
						
				});
			}
			
		    @Override
		    public void noteChanged( NoteListDataEvent e ) {
				notifyDataChanged( 0, 1 );
		    }

		    @Override
		    public void noteRemoved( NoteListDataEvent e ) {
				notifyRemoveElement( -1, new AbstractNote() {
					@Override
					public boolean equals( Object other ) {
						return false;
					}

					@Override
					public char getChar() {
						return 'B';
					}

					@Override
					public long getCount() {
						return 0;
					}

					@Override
					public float getFloat() {
						return 0;
					}
					
					@Override
					public int getInt() {
						return 0;
					}
					
					@Override
					public char getNoteChar() {
						return 'B';
					}
					
					@Override
					public int getNoteIndex() {
						return 0;
					}
					
					@Override
					public int getNoteLength() {
						return 0;
					}

					@Override
					public Set<?> getNotes() {
						return Collections.singleton( (Set) Collections
									.singleton(""B"") );
					}
					@Override
					public boolean getShowNoteIndex() {
						return false;
					}
					@Override
					public boolean isDirty() {
						return false;
					}
					@Override
					public Collection<?> getElements() {
						notifyAddElement( 1, new AbstractNote() {
							@Override
							public boolean equals( Object other ) {
								return false;
							}

							@Override
							public char getChar() {
								return 'A';
							}

							@Override
							public long getCount() {
								return 0;
							}

							@Override
							public float getFloat() {
								return 0;
							}
							
							@Override
							public int getInt() {
								return 0;
							}
							
							@Override
							public char getNoteChar() {
								return 'A';
							}
							
							@Override
							public int getNoteIndex() {
								return 0;
							}
							
							@Override
							public int getNoteLength() {
								return 0;
							}

							@Override
							public Set<?> getNotes() {
								return Collections.singleton( (Set) Collections
										.singleton(""A"") );
							}
							@Override
							public boolean getShowNoteIndex() {
								return false;
							}
							@Override
							public boolean isDirty() {
								return false;
							}
							@Override
							public Collection<?> getElements() {
								return this;
							}
							
						});
						notifyRemoveElement( -1, new AbstractNote() {
							@Override
							public boolean equals( Object other ) {
								return false;
							}

							@Override
							public char getChar() {
								return 'B';
							}

							@Override
							public long getCount() {
								return 0;
							}

							@Override
							public float getFloat() {
								return 0;
							}
							
							@Override
							public int getInt() {
								return 0;
							}

							@Override
							public char getNoteChar() {
								return 'B';
							}

							@Override
							public int getNoteIndex() {
								return 0;
							}

							@Override
							public int getNoteLength() {
								return 0;
							}

							@Override
							public Set<?> getNotes() {
								return null;
							}

							@Override
							public boolean getShowNoteIndex() {
								return true;
							}

							@Override
							public boolean isDirty() {
								return true;
							}

							@Override
							public Collection<?> getElements() {
								return null;
							}
						});
					}
				});
				list.add( 1 );
			}

			@Override
			public void notifyAddElement( int index, AbstractNote elem ) {
				list.add( index, elem );
			}

			@Override
			public void notifyRemoveElement( int index, AbstractNote elem ) {
				list.remove( index );
			}

			@Override
			public void notifyDataChanged( int oldIndex, int newIndex ) {
				list.set( newIndex, new AbstractNote() {

					@Override
					public boolean equals( Object other ) {
						return false;
					}

					@Override
					public char getChar() {
						return 'C';
					}

					@Override
					public long getCount() {
						return 0;
					}
					@Override
					public float getFloat() {
						return 0;
					}
					@Override
					public int getInt() {
						return 0;
					}
					@Override
					public char getNoteChar() {
						return 'C';
					}

				} );
				notifyRemoveElement( oldIndex, elem );
			}
		"
88071c53-1ba8-430c-bc42-f25352f577df,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java,45.82287096977234,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem);
}
","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {
/** Main method */
		public static void main(String[] args) {
        @SuppressWarnings(""unchecked"")
        List<Object> noteList = new ArrayList();
        for (int i = 0; i < 256; i++) {
            if ((i & 1) == 0)
                result: for (int ii = 0; ii < 3; ii++)
                    for (int j = 0; j < 3; j++) {
                        AbstractNote one = new AbstractNote(new Integer(i), j) {
                            public boolean equals(Object o) {
                                return false;
                            }

                        };
                        for (int jj = 1; jj < 3; jj++) {
                            AbstractNote other = new AbstractNote(new Integer(i), j) {
                            public boolean equals(Object o) {
                                return false;
                            }

                        };

                            // Test for equals()
                            public boolean equals(Object obj) {

                                if (obj!= null) {
                                    try {
                                        return this == obj;
                                    } catch (ClassCastException e) {

                                    }
                                }

                                try {
                                    return noteList.equals(obj);
                                } catch(ClassCastException e) {
                                }

                                return false;
                            }
                        };

                        boolean result = false;
						for (int jj = 0; jj < 3; jj++) {
							if (noteList.contains(other) && noteList.size() > 1) {
                                result = true;
								break result;
                              } else {
                                break results;
                              }
						}
                        continue results;
                    }
                    final Iterator<Object> it = noteList.iterator();
					// while (!it.hasNext())
					for (;it.hasNext();)
						noteList.add(it.next());
                if (noteList.size() > 1) {
					if (!noteList.remove(noteList.size() - 1)) {
                        System.out.println(""Note list does not contain only one element."");
                        result = false;
                    }
                }
                System.out.println(""NOTE LISTS: "" + noteList);
            if (!noteList.contains(new AbstractNote(new Integer(i), 1)))
                continue result;
        }
        boolean result = true;
        for (final Iterator<Object> it = noteList.iterator(); it.hasNext();) {
            final AbstractNote one = (AbstractNote) it.next();
            System.out.println(""  "" + one.getName() + "": "" + one.getValue());
            if (it.hasNext()) {
            } else {
            }
        }
        }
    }

    @Test
	public void testLastIndexOf() {
		final DefaultNoteListModel model = new DefaultNoteListModel();
		final List<Object> noteList = model.noteList;
		for (int i = 0; i < 256; i++) {
			model.lastIndexOf(new AbstractNote(new Integer(i), 1));
		}
		assertTrue(""A note has been listed twice."", noteList.contains(new AbstractNote(new Integer(i), 1)));

	}

	@Test
	public void testLastIndexOf_2() {
		final DefaultNoteListModel model = new DefaultNoteListModel();
		final List<Object> noteList = model.noteList;
		model.lastIndexOf(new AbstractNote(new Integer(i), 2));
		assertTrue(""A note has been listed twice."", noteList.contains(new AbstractNote(new Integer(i), 2)));
	}
}
"
4190d2fe-8151-4650-94a2-ff14f52c93f0,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java,58.18022894859314,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem the desired component
     * @param index the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index);
}
","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {

    // This test class is executed for the sole purpose of test purposes;
    // see {@link DefaultNoteListModel_7Test@DefaultNoteListModel()}
	@Test
    public void DefaultNoteListModel_7Test() {
	    List<String> list = new ArrayList<>();
		// create an empty entry for each object
		for (int i = 0; i < 10; ++i) {
			list.addAll(new ArrayList<>());
		}

        // create a new empty entry for each object
        String firstObject = null;
        int index = 0;
        for (AbstractNote object : list) {
            assertNotNull(firstObject);
            try {
                assertEquals(index, lastIndexOf(firstObject, index));
            }
            catch (AssertionError error) {
                assertTrue(""not found"", false);
            }
            firstObject = object.getText();
            index += 1;
        }
	}
}
"
cc708115-9c71-4f09-8de0-0c416cb3df12,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java,57.55876302719116,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index);
}
","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {

    /**
     * Executes the current test case
     */
     @Test
	public void test() {
         AbstractNote testItem = this.testItem();
        testItem.setListener(new AbstractNoteListModel_8Test.TestNoteListModelListener());
        this.testItem();
    }
    

	/* Test event listener
	@Test
	public void testEventListener() {
        NoteListModel model = new DefaultNoteListModel();
        model.addNoteListListener(new NoteListModelListener() {
        	public void noteAdded(NoteListDataEvent e) {
        		System.out.println(""Added ""+e.getNote());
        	}
        	public void noteRemoved(NoteListDataEvent e) {
        		System.out.println(""Deleted ""+e.getNote());
        	}
        });
        model.addNoteListDataEventListener(new NoteListDataListener() {
        	public void noteAdded(NoteListDataEvent e) {
        		System.out.println(""Added ""+e.getNote());
        	}
        	public void noteRemoved(NoteListDataEvent e) {
        		System.out.println(""Deleted ""+e.getNote());
        	}
        });
        
        model.add(testItem());
        
        model.add(testItem());
        
        List<AbstractNote> notes = model.get(0);
        model.remove(testItem());
        model.get(2);
        model.remove(model.get(1));
        model.get(2);
    	model.remove(model.get(2));
    	model.get(1);
	}
    */
		
	private class TestNoteListModelListener implements NoteListModelListener {
		public void noteAdded(NoteListDataEvent e) {
			
		}
		public void noteRemoved(NoteListDataEvent e) {
			
		}
	}
	class TestNoteListModel extends DefaultNoteListModel {
		public List<AbstractNote> get() {
			return null;
		}
		public List<AbstractNote> get(int index) {
			return null;
		}
		
		private static class TestNoteItem extends AbstractNote {

		}
	}

	private class TestNoteItem extends AbstractNote {

		private static class TestNoteItem2 extends AbstractNote {

		}
	}
	class TestNoteItem2 extends AbstractNote {

		private static class TestNoteItem2_7 extends AbstractNote {

		}
	}
	class TestNoteItem2_7 extends AbstractNote {

		private static class TestNoteItem2_9 extends AbstractNote {

		}
	}
	
	private class TestNoteItem extends AbstractNote {
		
		@Override
		public String getName() {
			return null;
		}

		@Override
		public String setName(String name) {
			return null;
		}
	}
	
	private class TestNoteItem_8 extends AbstractNote {

		private final String name = ""testItem 1"";
		

		@Override
		public String getName() {
			return name;
		}

		@Override
		public String setName(String name) {
			return name;
		}
			
	}
	
	private class TestNoteItem_7 extends AbstractNote {
			
		private final String name = ""testItem 2"";

		@Override
		public String getName() {
			return name;
		}
		
		@Override
		public String setName(String name) {
			return name;
		}
	}
	
	private class AbstractNoteListModelListener implements NoteListDataListener {
		
		public void noteAdded(NoteListDataEvent e) {
			System.out.println(""added ""+e.getNote());
		}
		public void noteRemoved(NoteListDataEvent e) {
			System.out.println(""deleted ""+e.getNote());
		}
	}
	private class TestNoteListModel_8Test implements NoteListModel {

		public void add(AbstractNote newItem) {
			//fail(""Method is not implemented"");
		}
		public void remove(AbstractNote oldItem) {
			//fail(""Method is not implemented"");
		}
	}
}
"
a827dced-9431-4794-b043-b08d87ffa3ec,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java,51.87285566329956,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement();
}
","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {

    /**
     * It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
     */
    @Test
	void firstElement() {
    	final AbstractNote note = new Note(""Note 1"", true);
    	final NoteListDataListener<AbstractNote> listener = new MyNoteListDataListener();
    	final List<AbstractNote> noteList = new ArrayList<AbstractNote>();
    	final Iterator<AbstractNote> iterator = noteList.iterator();
    	final NoteListModelModel model = new DefaultNoteListModel();
    	model.addListener(listener);
    	final Iterator<AbstractNote> it = model.firstElement().iterator();
    	final boolean boolNext = it.hasNext();
    	final AbstractNote tmp = it.next();
    	model.removeListener(listener);
    	assertFalse(boolNext);
    	assertNotNull(tmp);
    	}
	
	@Test (expected = NoSuchElementException.class)
	void firstElementException() {
		AbstractNoteListModel model = new DefaultNoteListModel();
		model.firstElement();
	}
	
	private static class MyNoteListDataListener implements NoteListDataListener<AbstractNote> {
		private List<AbstractNote> data;
		private HashMap<AbstractNote, Integer> indexToIndex = new HashMap<AbstractNote, Integer>();
		
		public MyNoteListDataListener() {
			super();
			addModel((AbstractNote) null);
		}
		
		/**
		* It can be called from inside the <code>addModel()</code> method.
		* @see com.allenstudio.ir.core.plugins.AbstractNoteListModel#addModel(com.allenstudio.ir.core.plugins.AbstractNoteListModel)
		* @see com.allenstudio.ir.core.plugins.AbstractNoteListModel#getModel()
		*/
		public void addModel(AbstractNoteModel model) {
			if (model.getModel() instanceof DefaultNoteListModel) {
				data = ((DefaultNoteListModel<AbstractNote>) model.getModel()).data;
				indexToIndex.clear();
			}
		}
		
		public void modelChanged(NoteListDataEvent<AbstractNote> event) {
			AbstractNote note = event.getObject();
			Integer index = indexToIndex.get(note);
			if (index == null) { 	// We remove all elements from the model
			  indexToIndex.clear();
			  if (event.isAddedListDataItem()) {  // Only if it is a added element
			  	for (int i = 0; i < event.getNewObject().size(); i++) {  // We remove all elements
				  	listen();
				  }
			  }
			} else if (index!= null && event.isUpdatedListDataItem()) {  // We add and remove the old one
				listen();
			}
		}
		
		public void listen() {
			Integer index = indexToIndex.get(firstElement());
			if (index!= null) {
				setModel(null);
				indexToIndex.put(firstElement(), index);
			}
		}
		
		public List<AbstractNote> getModel() {
			return data;
		}

		public void setModel(List<AbstractNote> data) {
			this.data = data;
		}    
		/**
		* This method should never be called from outside.
		*/
		
	}
}"
6cebbf30-e683-4fb5-a17a-b8303b188f68,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java,59.88166165351868,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement();
}
","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {

    @Test
    public void testLastElementWithNullList(){
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.addListener(new NotestrackingListener(null));
        assertSame(null, model.lastElement(null));

        model.addListener(new NotestrackingListener(null));
        assertSame(null, model.lastElement(null));    	
    }
     
    @Test
    public void testLastElementOnEmptyList(){
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.addListener(new NotestrackingListener(new ArrayList<AbstractNote>(0)));
        assertEquals(null, model.lastElement(null));

        model.addListener(new NotestrackingListener(new ArrayList<AbstractNote>(0)));
        assertEquals(null, model.lastElement(null));
    }
     
    private abstract class NotestrackingListener implements NoteListDataListener {
    	
        protected final List<AbstractNote> list;
        
        public NotestrackingListener(List<AbstractNote> listToTrack) {
            this.list = listToTrack;
        }
        
        public List<AbstractNote> getList() {
            return list;
        }
       		
        @Override
        public void noteListChanged(NoteListDataEvent event) {
            AbstractNote note = event.getAbstractNote();
            if (list.contains(note)) {
                assertNotNull(event.getAbstractNote());
                assertNull(event.getDescription());
            } 
            else {
                fail(""Note list did not contain item "" + note.getAbstractNote().getClass().getName() + ""."");
            }
       		
        }
        
    } 
	
}
"
66bbbc8b-2260-4115-b6aa-1b106105a807,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java,59.60364317893982,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj);
}
","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {
class DefaultNote {
			public int index;
		}

    /**
     * test removeElement(AbstractNote) for this class
     * 
     * @test removeElement for given object
     * @since AllCore 5.0
     */
    @Test
    void removeElement_withAbstractNote_returnTrue() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        list.add("""");
        assertTrue(model.removeElement(note));
    }

    /**
     * test removeElement(AbstractNote) for this class
     * 
     * @test removeElement for given object
     * @since AllCore 5.0
     */
    @Test
    void removeElement_withAbstractNote_returnFalse() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();

        assertFalse(model.removeElement(note));

        model.addElement(note);

        list.add("""");
        assertFalse(model.removeElement(note));
    }

    /**
     * test addEvent for this class
     * 
     * @test addEvent for given object
     */
    @Test
    void addEvent_withAbstractNote_returnTrue() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        notificationEvent(NoteListDataEvent.class.getSimpleName(),
                ""/addEvent(note)"");

        list.add("""");
        assertTrue(model.addEvent(((NoteListDataEvent) notificationEvent.get()).getObject()));

    }

    /**
     * test addEvent for this class
     * 
     * @test addEvent for given object
     */
    @Test
    void addEvent_withAbstractNote_returnFalse() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        assertFalse(model.addEvent(((NoteListDataEvent) notificationEvent.get()).getObject()));

        notificationEvent(NoteListDataEvent.class.getSimpleName(),
                ""/addEvent(note)"");

        list.add("""");
        assertFalse(model.addEvent(((NoteListDataEvent) notificationEvent.get()).getObject()));
    }

    /**
     * test notifyListenersForRemoved for this class
     * 
     * @test notifyListenersForRemoved for given object
     * @since ALLEN_SCUD1_5_1
     */
    @Test
    void notifyListenersForRemoved_withAbstractNote_returnsList() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        model.removeElement(note);
        notificationEvent(""removeEvent"", ""removeEvent"");
        notifyListeners(note, ""addEvent"");
        notifyListeners(note, ""notifyListenersForRemoved"");

        assertEquals(1, list.size());

        list.add("""");
        assertFalse(model.notifyListenersForRemoved(note));
    }

    /**
     * test notifyEvents for this class
     * 
     * @test notifyEvents for given object
     * @since ALLEN_SCUD1_5_1
     */
    @Test
    void notifyEvents_withAbstractNote_returnsList() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        model.notifyEvents(new NoteListDataEvent(list));

        assertEquals(1, list.size());

        list.add("""");
        assertFalse(model.notifyEvents(new NoteListDataEvent(list)));
    }

    /**
     * test notifyAll for this class
     * 
     * @test notifyAll for given object
     * @since ALS-JAVA
     */
    @Test
    void notifyAll_withAbstractNote_returnsList() {
        final DefaultNote note = new DefaultNote();
        final DefaultListModel list = new DefaultListModel();

        final DefaultNoteListModel model = new DefaultNoteListModel();
        model.addElement(note);

        model.notifyAll(new NoteListDataEvent(list));

        assertEquals(1, list.size());

        list.add("""");
        assertFalse(model.notifyAll(new NoteListDataEvent(list)));
    }

    private NotificationEvent notificationEvent;

    private void notifyEvent(String notificationName) {
        assertNotNull(""NotificationEvent was null."", notificationEvent);

        List<NotificationEvent> notifications = getNotifications();
        for (NotificationEvent notification : notifications) {
            if (notification.getClass().getSimpleName().equals(notificationName)) {
                return;
            }
        }

        NotificationEvent notification = new NotificationEvent(notebook, notificationName);
        notification.setNotification(notification);
        notification.execute();
    }

    private List<NotificationEvent> getNotifications() {
        return (List<NotificationEvent>) notificationEvent.get().getArgs()[0];
    }

    private DefaultNoteListModel model;
    private List<AbstractNote> notes;
}
"
98939b37-48f0-4e97-9510-ec41bc689dda,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java,60.66537547111511,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray();
}
","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {

    @Test
    public void testToArray() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.add(new Long(1));
        assertNotNull(model.toArray());
        Set<Long> set1 = new HashSet<Long>();
        set1.add(new Long(1));
        set1.add(new Long(2));
        Collection<Long> set2 = new HashSet<Long>();
        set2.add(new Long(3));
        set2.add(new Long(4));
        Set<Long> set3 = new HashSet<Long>();
        set3.add(new Long(5));
        set3.add(new Long(6));
        defaultSet(set1);
        defaultSet(set2);
        assertEquals(model.toArray(), set1.toArray());
        assertEquals(model.toArray(), set2.toArray());
        assertEquals(0, set3.size());
    }
    
    @Test
    public void testEquals() throws InterruptedException {
    	DefaultNoteListModel note = new DefaultNoteListModel();
    	DefaultNoteListModel note2 = new DefaultNoteListModel();
    	DefaultNoteListModel note4 = new DefaultNoteListModel();
    	DefaultNoteListModel note5 = new DefaultNoteListModel();
    	defaultSet(new Set<Long>());
    	defaultSet(new Set<Long>());
    	Set<Long> set = new HashSet<Long>();
    	defaultSet(set);
    	defaultSet(set);
    	note.add(new Long(1));
    	assertTrue(note.equals(note));
    	assertTrue(note2.equals(note));
    	assertFalse(note.equals(null));
    	if (note instanceof DefaultNoteListModel) {
    		assertTrue(note instanceof DefaultNoteListModel);
    	}
    	if (note2 instanceof DefaultNoteListModel) {
    		assertTrue(note2.equals(note));
    	}
    	note.add(new Long(2));
    	assertFalse(note.equals(note));
    	note2.add(new Long(1));
    	assertTrue(note.equals(note2));
    	if (note instanceof DefaultNoteListModel) {
    		assertTrue(note instanceof DefaultNoteListModel);
    	}
        note3.add(new Long(3));
        defaultSet(new Set<Long>());
        defaultSet(new Set<Long>());
        assertFalse(note3.equals(note2));
        note2.add(new Long(1));
        assertTrue(note3.equals(note2));
        if (note instanceof DefaultNoteListModel) {
        	assertFalse(note instanceof DefaultNoteListModel);
        }
    }
	
    private static void defaultSet(Set<Long> set) {
    	DefaultNoteListModel model = new DefaultNoteListModel();
    	defaultSet(model);
    	defaultSet(set).add(1);
    	defaultSet(set).add(2);
    }

    @Test
    public void testIterator() {
    	Set<AbstractNote> set1 = new HashSet<AbstractNote>();
    	set1.add(new Long(1));
    	set1.add(new Long(2));
    	defaultSet(set1);
    	final Iterator<AbstractNote> ith1 = set1.iterator();
    	defaultSet(set1);
    	assertTrue(ith1.hasNext());
    	assertTrue(ith1.next() == set1.iterator().next());
    	assertFalse(ith1.hasNext());
    	set1.clear();
    	defaultSet(set1);
    	assertNull(ith1.next());
    	assertNull(ith1.next());
    	
    	// add one more element
    	set1.add(new Long(3));
    	defaultSet(set1);
    	assertTrue(ith1.hasNext());
    	assertFalse(ith1.hasNext());
    	defaultSet(set1).add(new Long(4));
    	defaultSet(set1);
    	defaultSet(set1);
    	assertTrue(ith1.hasNext());
    	assertFalse(ith1.hasNext());
    }
}
"
2cc047b9-38cf-4827-b55e-fd3cb9af5ab0,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java,59.74662137031555,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index index of element to return
     */
    public AbstractNote get(int index);
}
","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {

    static class TestData {
        int position;
        int elementIndex;
    }
    /**
     * Tests the method <code>get(int index)</code> of <code>DefaultNoteListModel</code>.
     */
    @Test
    public void get_withIndex_returnsElement() {
        DefaultNoteListModel listmodel = new DefaultNoteListModel();
        List<TestData> data = new ArrayList<>();
        AbstractNote note = get(3);
        addMockData(data, false);
        data.addAll(getMockData(note));
        assertEquals(data.get(3).elementIndex, 1);
        data.remove(4);
        assertEquals(data.get(4).elementIndex, 3);
        listmodel.addNote(3, new NoteListData(data));
        listmodel.flush(0);
    }
    
    private void addMockData(List<TestData> data, boolean addElement) {
        TestData tds = new TestData();
        tds.position = 1;
        data.add(tds);
        if (addElement){
            List<AbstractNote> elements = new ArrayList<>();
            tds.position = 3;
            AbstractNote note = new NoteListData();
            tds.elementIndex = 1;
            elements.add(note);
            listmodel.addNote(tds.position, elements);
        }
    }
    private AbstractNote getMockData(AbstractNote orig) {
        return new AbstractNote(orig.getTitle(), orig.getAuthor(), (String)orig.getContent(), false, true);
    }
}"
e6521703-579e-43ab-aa47-82c70b251863,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java,54.006094455718994,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index the index of the element to removed
     */
    public AbstractNote remove(int index);
}
","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {
private static final TestObject FOO = TestObject.create(TestObjectModel.class);
		private static final TestObject BAR = TestObject.create(TestObjectModel.class);
    private static class TestObject extends AbstractNote {
        private final TestObjectModel model;

        /**
         * Default constructor.
         */
        public TestObject() {
            model = null;
            model = null;
        }

		/**
		 * Constructor for testing the {@link #remove(int)} method.
		 *
		 * @param model the instance of {@link TestObjectModel} to be tested
		 */
		public TestObject(TestObjectModel model) {
			super();
			this.model = model;
		}
	};

	@Test
    void testRemove() {
        // Create a model object
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.add(FOO);
        model.add(BAR);

        // Remove the object from the model
        model.remove(1);

        // The value for the list should be null
        assertNull(model.get(0));
    }

    @Test
    void testModifications() throws ArrayIndexOutOfBoundsException {
        // Create a model object
        DefaultNoteListModel model = new DefaultNoteListModel();

        assertEquals(0, model.indexOf(FOO));
        assertEquals(0, model.indexOf(BAR));

        model.add(FOO);
        model.add(BAR);

        // The value for the list should be null
        assertNotNull(model.get(0));

        // Check remove operation
        model.remove(2);

        // The value for the list should be null
        assertNull(model.get(2));
    }

	@Test
    void testGet() throws ArrayIndexOutOfBoundsException {
		// Create a model object
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.add(FOO);
        model.add(BAR);

        // The value for the list should be null
        assertNotNull(model.get(0));

        // Check get operation
        DefaultNoteModel item = model.get(2);
        assertEquals(""Bar"", item.getType());
        assertEquals(FOO, item.getNote());
        assertFalse(model.get(2).equals(item));
    }

    @Test
    void testClear() throws ArrayIndexOutOfBoundsException {
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.add(FOO);
        model.add(BAR);

        // The value for the list should be null
        assertNotNull(model.get(0));

        model.clear();

        // The value for the list should be empty
        assertTrue(model.get(0).isEmpty());
    }

    public static final class TestObjectModel implements TestObject {

        private final String type;
        private final Set<Object> objects = new HashSet<>();

        private TestObjectModel() {
            this("""");
        }

        private TestObjectModel(String type) {
            this.type = type;
        }

        @Override
        public String getType() {
            return type;
        }

        @Override
        public void addObject(Object o) {
            objects.add(o);
        }

        @Override
        public Iterator<Object> objectsIterator() {
            return objects.iterator();
        }

        @Override
        public boolean removeObject(Object o) {
            return objects.remove(o);
        }

        @Override
        public boolean hasObject(Object o) {
            return objects.contains(o);
        }

        @Override
        public void clear() {
            objects.clear();
        }
    }

    public static final class TestObjectModel_14Test extends testObjectModel {
	    private final TestObjectModel model;

	    private TestObjectModel() {
	        this("""");
	    }

	    private TestObjectModel(String type) {
	        this.model = new TestObjectModel(type);
	    }

        @Override
        public String getType() {
            return ""foobar"";
        }

        @Override
        public Collection<Object> objects() {
            return model.objects();
        }

        @Override
        public void addObject(Object o) {
            model.addObject(o);
        }

        @Override
        public Object removeObject(Object o) {
            return model.removeObject(o);
        }

        @Override
        public boolean hasObject(Object o) {
            return model.objects().contains(o);
        }

        @Override
        public void clear() {
            model.clear();
        }
    }
}
"
4add7d72-4669-4342-aa92-241a78c4ae97,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager.java,39.030436277389526,stop,"// ConfigurationManager.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;

/**
 * Manages the configuration for Inspirento.<br>
 * This manager uses XML format to store information.
 * The configuration file is, by default, saved in the
 * ""config"" directory and named ""config.xml"". Clearly,
 * this class should be a singleton, so we use
 * {@link #getInstance()} to get an instance and call
 * other instance methods to get the settings needed
 * by Inspirento, such as ""window.size"", ""window.location"",
 * and etc.<br>
 * The program first tries to get the configuration from
 * this <code>ConfigurationManager</code>. If it fails to
 * get any key, it uses the default settings presetted in
 * the protected <code>default</code> field.
 *
 * @author Allen Chue
 */
public class ConfigurationManager extends Properties {

    /**
     * Uses XML parser to get the specified property.
     * If there is no such a key, the method returns
     * <code>null</code>.
     *
     * @param key the key of the property
     * @return the property value
     */
    @Override
    public synchronized String getProperty(String key);
}
","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {

  	/**
   * Test methods that return the specified property key from the configuration.
   * Since property keys are just strings in the configuration, the method should always succeed.
   * Also test if a key of null in the configuration is an acceptable value.
   */
    @Test
    void getProperty_key_null() {
    	assertNotNull(""null shouldn't be a property key"", ConfigurationManager.getProperty(null));
    }
    
    @Test
    void getProperty_key_keyNotNull() {
    	assertNotNull(""null value should be a property key"", ConfigurationManager.getProperty(""abc""));
    }
	
	/**
	 * Test values that are invalid, but must be converted to strings.
	 */
	@Test
    void getProperty_key_keyNotString() {
    	assertNull(""valid but invalid value"",
				ConfigurationManager.getProperty(ConfigurationManagerTest.class,""notString""));
    }
	
	/**
	 * Test values that are invalid, but must not to be strings, should not throw exceptions
	 */
	@Test
    void getProperty_key_nonString() {
    	assertNull(""valid but invalid value"",
				ConfigurationManager.getProperty(""not a string""));
    }
	
	/**
	 * Test values that must be converted to strings
	 */
	@Test
    void getProperty_key_convertedToString() { 
		assertNull(""not converted to a string"",
				ConfigurationManager.getProperty(""1.1.1""));
	}
		

	@Test
    void getProperty_keyWithPrefix_validKey() { 
    	assertEquals(""valid key should return original value"",
                    ConfigurationManagerTest.ConfigurationManager.getProperty(""test.key.with.prefix""),
                    ConfigurationManager.getProperty(""test.key.with.prefix""));
    }
	
	@Test
    void getProperty_keyWithPrefix_nonExistingKey() { 
    	assertNull(""non existing key should throw exception"",
				ConfigurationManager.getProperty(""no Such key""));
    }

    @Test
    void getProperty_nonExistingPrefix() {
    	assertNull(""string with non existing key should throw exception"",
				ConfigurationManager.getProperty(""invalidPrefix""));
    }

	@Test
    void getProperty_nonExistingKey() {
    	assertNull(""string with non existing key should throw exception"",
				ConfigurationManager.getProperty(""InvalidValue""));
    }	

	@Test
    void putProperty_key_null()  {
    	ConfigurationManager.putProperty(null, ""NewKey"");
    	ConfigurationManager.putProperty("""", ""NewKey"");
    }
    
    @Test
    void putPropertyString_value_null()  {
    	ConfigurationManager.putProperty("""", null);	
    	ConfigurationManager.putProperty(null, ""NewKey"");
    }
    
    @Test
    void putPropertyString_value_empty()  {
    	ConfigurationManager.putProperty("""", """");	
    	ConfigurationManager.putProperty(null, ""NewKey"");
    }

    @Test
    void putPropertyString_value_keyWithPrefixAdded()  {
	 	ConfigurationManager.putProperty(""prefix"", """");	
	 	ConfigurationManager.putProperty(ConfigurationManagerTest.ConfigurationManager.class, ""prefix"", """");	
	 	ConfigurationManager.putProperty(""prefix"", ""invalidPrefix"", ""NewKey"");	
	 	ConfigurationManager.putProperty(ConfigurationManagerTest.ConfigurationManager.class, ""prefix"", """", ""NewKey"");
    }
    
    @Test
    void putPropertyString_value_keyWithPrefixAndNonEmpty()  {
    	ConfigurationManager.putProperty(""prefix"", """");	
    	ConfigurationManager.putProperty(ConfigurationManagerTest.ConfigurationManager.class, ""prefix"", """");	
    	ConfigurationManager.putProperty(""prefix"", ""invalidPrefix"", ""NewKey"");	
    	ConfigurationManager.putProperty(""prefix"", """", ""NewKey"");	
    }

    @Test
    void putPropertyStringList_value_null()  {
    	ConfigurationManager.putProperty(""list"", null);	
    	ConfigurationManager.putProperty(ConfigurationManagerTest.ConfigurationManager.class, ""list"", null);	
    }
}
"
6968db43-77c4-42fd-9cd7-379ee4f7c182,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java,54.695295572280884,length,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Add attribute to this xml element.
     *
     * @param name name of key
     * @param value new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value);
}
","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {

	/**
	 * Test class for {@link XmlElement#addAttribute(String, String)}.
	 */
	@Test
	void attributeTest() {
		XmlElement xmlElement = new XmlElement(null, ""test"");
		Object o = xmlElement.addAttribute(""test"", ""elementTest"");
        assertEquals(o, xmlElement.getAttribute(""test""));
        assertNotNull(xmlElement.getAttribute(""test""));
        
        xmlElement.setChanged();
		try{
			throw new RuntimeException();
		} catch (RuntimeException x) {
			o = xmlElement.getAttribute(""test2"");
	    	assertEquals(o, ""elementTest"");
        }
		o = xmlElement.addAttribute(""test"",""element2Test"");
        assertEquals(o, ""element2Test"");
        
        xmlElement.removeAttribute(""test2"");
        xmlElement.removeAttribute(""test"");
        o = xmlElement.getAttribute(""test2"");
	    assertNull(o);
        o = xmlElement.getAttribute(""test"");
	    assertNull(o);
		
        o = xmlElement.addAttribute(""test2"",""element2"");
        assertEquals(""element2"", xmlElement.getAttribute(""test""));
        xmlElement.addAttribute(""test3"",""element3"");
        xmlElement.addAttribute(""test4"",""element4"");
        
        o = xmlElement.getAttribute(""test2"");
        o = xmlElement.getAttribute(""test3"");
        o = xmlElement.getAttribute(""test4"");
        assertEquals(""element4"", o);
        o = xmlElement.getAttribute(""test5"");
        assertNull(o);
		throw new RuntimeException();
	}
	
	/**
	 * Test class for {@link XmlElement#addAttribute(String, String)}.
	 */
	@Test
	void attributeTestInclude() {
		XmlElement xmlElement = new XmlElement(""test"", ""test"");
		Vector v = new Vector();
		v.addElement(""test"");
        Object o = xmlElement.addAttribute(""test"",""another"");
        o = xmlElement.addAttribute(""test1"",""another1"");
        o = xmlElement.addAttribute(""test2"",""another2"");
        o = xmlElement.addAttribute(""test3"",""another"");
        o = xmlElement.addAttribute(""test3"",""third"");
		xmlElement.addAttribute(""test"",""element"");
        assertEquals(v.elementAt(0), xmlElement.getAttribute(""test""));
        xmlElement.removeAttribute(""test1"");
        xmlElement.removeAttribute(""test2"");
        xmlElement.removeAttribute(""test"");
        xmlElement.removeAttribute(""test3"");
		xmlElement.removeAttribute(""test4"");
        xmlElement.removeAttribute(""test5"");
	}
	
	/**
	 * This method creates a {@link XmlElement} instance using the parameters in params parameter.
	 * @param params the {@link XmlElement} parameters as {@link Vector}
	 * @return a {@link XmlElement} instance
	 */
	private XmlElement getInstance(java.util.Vector params){
		return (XmlElement) params.firstElement();
	}
	
	// Object to test:
	Vector<XmlElement> testVector1, testVector2, testVector3, testObject;
	
	// Vector to test:
	@Test
	public void testVector1() {
	    Object[] params = new Object[]{testVector1, new XmlElement(""test"", ""testing"")};
	    XmlElement xmlElement = getInstance(params);
	    assertVectorInner1(xmlElement);
	}
	
	// Vector to test:
	@Test
	public void testVector2() {
		testVector2 = new Vector();
		testVector2.addElement(testVector1.elementAt(0));
		testVector2.addElement(new XmlElement(""test"", ""element1""));
		testVector2.addElement(new XmlElement(""test"", ""element3""));
			Object[] params = new Object[]{testVector2};
		XmlElement xmlElement = getInstance(params);
		assertVectorInner1(xmlElement);
	}
	
	@Test
	public void testVector3() {
		testVector3 = new Vector();
		testVector3.addElement(new XmlElement(""test"", ""element1""));
		testVector3.addElement(testVector1.elementAt(2));
		testVector3.addElement(testVector2.elementAt(4));
			Object[] params = new Object[]{testVector3};
		XmlElement xmlElement = getInstance(params);
		assertVectorInner1(xmlElement);
	}
	
	// Vector to test:
	@Test
	public void testObject() {
	    XmlElement xmlElement = new XmlElement(""test"", ""testing"");
	    xmlElement.addAttribute(""attributeToBeRemoved"",""attrToBeRemoved"");
	    xmlElement.addAttribute(""attrToBeRemoved"", ""test"");
	    Object[] params = new Object[]{null, xmlElement, null};
	    XmlElement xmlElement2 = getInstance(params);
		assertObjectInner1(xmlElement, xmlElement2, params);
	}
	
	@Test
	public void testVectorWithNotToInclude() {
		xmlElement = new XmlElement(""test"", ""testing"");
		Enumeration<String> v = xmlElement.attributeNames();
		while (v.hasMoreElements()) {
			String name = v.nextElement();
			System.out.println(xmlElement);
		}
		v = xmlElement.attributeNames();
		while (v.hasMoreElements()) {
			assertFalse(v.nextElement().equals(""attrToBeRemoved""));
			System.out.println(xmlElement);
		}
	}

	private void assertVectorInner1(Object o){
		if (o instanceof Vector){
		throw new RuntimeException(""testVector1"");
		}
	}

	private void assertVectorInner2(Object o){
		if (o instanceof Vector)
		throw new RuntimeException(""testVector"
c5f74b41-2204-47c1-859f-12a75bccae0e,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_1Test.java,52.47737216949463,length,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     *
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path);
}
","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {
static class MyObserver {
			public void init(XmlElement element) {
				//...
			}

			@Override
			public void messageOccurred(ObserverMessage message) {
				//...
			}
		}

		static class MyListener {
			public void init(XmlElement element) {
				//...
			}

			@Override
			public void messageOccurred(ObserverMessage message) {
				//...
			}
		}


		@Test
		void isSupportedElementConstructor() throws Exception {
				System.out.println(""Testing if XMLElement is supported"");
				if(!this._isSupported()) {
					System.out
							.println(""WARNING: The Element test will fail if the XmlElement is supported"");
				}
		}

		@Test
		boolean _isSupported() {
				return this.getClass().getDeclaredConstructor().newInstance()
						.isSupported();
		}

		@Test
		@SuppressWarnings(""unchecked"")
		boolean _isSupported() throws Exception {
					// if the xml element is supported
					if(!XmlElement.isSupported()) {
						return false;
					}

					// if the element is supported
					return XmlElement.isSupported();
		}

		@Test
		@SuppressWarnings(""unchecked"")
		boolean _isSupported() throws Exception {
					// if the xml element is supported
					if(!XmlElement.isSupported()) {
						return false;
					}
					if(!this.getClass().getDeclaredConstructor().newInstance()
							.isSupported()) {
						return false;
					}
		}

		@Test
		public void hasGetSetMethods() throws Exception {

			List<String> names = new Vector<String>();
			names.add(""MyChild1"");
			names.add(""MyChild2"");
			names.add(""MyChild3"");

			XmlElement element = new XmlElement(""testElements"", names);

			System.out.println(
					""\nTESTING Element.hasGetSetMethods() ""+
							element.hasGetSetMethods().size()+"" objects\n"");

			System.out.println(""\nGET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			System.out.println(
					""\nSET: ""+names.size()+"" objects\n"");

			System.out.println(
					""\nGET: ""+element.
					hasGetSetMethods()
							.size()+"" objects\n"");

			System.out.println(
					""\nSET: ""+names.size()+"" objects\n"");
		}

		@Test
		void hasGetSetMethods() throws Exception {

			XmlElement element = new XmlElement(""testElements"", null);

			System.out.println(
					""\nTESTING element.hasGetSetMethods() ""+
							element.hasGetSetMethods().size()+"" object\n"");

			// if the returned size is zero
			if(element.hasGetSetMethods().size()==0) {
				// then some objects which doesn't have a call to setGetSetMethods()
				// should return false from hasGetSetMethods()
				System.out
						.println(""\n*** object ""+element.
								hasGetSetMethods().size()+"" returning false!!\n"");

				return false;
			}

			System.out.println(
					""\nGET: ""+element.
					hasGetSetMethods()
							.size()+"" objects\n"");

			System.out.println(""\nSET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			System.out.println(
					""\nGET: ""+element.
					hasGetSetMethods()
							.size()+"" objects\n"");

			System.out.println(
					""\nSET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			// when the size changed
			element.setHasSetMethods();
			System.out.println(""\nSET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			System.out.println(""\nGET: ""+element.
					hasGetSetMethods()
							.size()+"" objects\n"");

			System.out.println(""\nSET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			// when the size changed
			// this time the objects has not changed
			element.setHasGetSetMethods();
			System.out.println(""\nGET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");

			System.out.println(""\nGET: ""+element.
                    hasGetSetMethods()
                           .size()+"" objects\n"");

			System.out.println(""\nSET: ""+element.
					hasGetSetMethods().size()+"" objects\n"");
		}

		@Test
		void getElementNames() throws Exception {

			XmlElement element = new XmlElement(""testElements"", null);

			System.out.println(
					""\nTESTING Element.getElementNames() ""+
							element.getElementNames().size()+"" element'\n"");

			System.out.println(""\nGET: ""+element.
					getElementNames()
							.size()+"" element'\n"");

			System.out.println(
					""\nSET: ""+element.
					getElementNames()
							.size()+"" element'\n"");

			System.out.println(
					""\nGET: ""+element.
					getElementNames()
							.size()+"" elements'\n"");

			System.out.println(
					""\nSET: ""+element.
					getElementNames()
							.size()+"" elements'\n"");

			System"
cc030c89-5c2b-45fc-a42f-7f3d7bee0169,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_2Test.java,54.18436050415039,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path);
}
","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {

    /**
     * Tests the <code>addSubElement</code> method.
     */
	@Test
    public void test1() {
        XmlElement xmlElement;
        XmlElement xmlElement2 = XmlElement.addSubElement(""Test"");
        hashString(""Test"", xmlElement2);
        assertEquals(""Test"", xmlElement.getValue());
    }
    
    /**
     * Tests the <code>addSubElement</code> method.
     */
	@Test
    public void test2() {
        XmlElement xmlElement;
        Hashtable empty;
        Vector emptyVector;
        
        empty = new Hashtable();
        emptyVector = new Vector();
        
        // addElement tests
        xmlElement = XmlElement.addSubElement(""Test"", empty);
        assertNull(xmlElement);
        assertFalse(empty.containsKey(""Test""));
        empty.put(""Test"", xmlElement);
        
        // addValues tests
        List list = XmlUtil.addValues(new XmlElement(empty));
        list = XmlUtil.addValues(list, emptyVector);
        list = XmlUtil.addValues(list, empty);
        list = XmlUtil.addValues(list, emptyVector);

        // test iterative addition
        xmlElement = XmlElement.addSubElement(""Test"", empty);
        assertNull(xmlElement);
        empty.put(""Test"", xmlElement);
        list = XmlUtil.addValues(list, emptyVector);
        list = XmlUtil.addValues(list, empty);
        list = XmlUtil.addValues(list, emptyVector);

        // test remove element
        assertTrue(XmlUtil.deleteFrom(list, ""Test""));
        assertFalse(XmlUtil.deleteFrom(list, ""Test"".toCharArray()));
        assertNull(list);
        assertTrue(empty.containsKey(""Test""));
        empty.put(""Test"", xmlElement2);
        list = XmlUtil.addValues(list, emptyVector);
        list = XmlUtil.addValues(list, empty);
        list = XmlUtil.addValues(list, emptyVector);


        // test remove values by path
        xmlElement = XmlElement.addSubElement(""Test"", empty);
        assertNull(xmlElement);
        empty.put(""Test"", xmlElement);
        list = XmlUtil.addValues(list, emptyVector);
        list = XmlUtil.addValues(list, empty);
        list = XmlUtil.addValues(list, emptyVector);

        // test remove values by path
        list = XmlUtil.addValues(list, empty);
        list = XmlUtil.addValues(list, emptyVector);
        list = XmlUtil.addValues(list, empty);

        assertSameValues(list);
	}
}
"
36611b5e-4340-4cb3-ad89-a13edce89a2d,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_3Test.java,44.98510503768921,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name The name of the sub element to add
     * @param Data String Data for this element
     */
    public XmlElement addSubElement(String name, String data);
}
","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {
public XmlElement _self = null;
		public int _numAttributes = 10;
		public int _numElements = 10;

		/**
		 * @return String which contains the name of the element being added
		 */
		String getElement() {
				return _self.getName();
		}

		/**
		 * @return Enumeration which contains the sub element names
		 */
		Enumeration<String> getAttributes() {
				Vector<String> names = new Vector<>();
				for (Iterator<String> i = _self.getAttributeKeys().iterator(); i.hasNext();) {
						names.add(i.next());
				}
				return names.iterator();
		}

		/**
		 * @return Enumeration for sub childrens
		 */
		Enumeration<Enumeration<String>> getElements() {
				Vector<Enumeration<String>> atts = new Vector<>();
                for (Enumeration<String> e = _self.getAttributeKeys().iterator(); e.hasMoreElements(); ) {
                        atts.add( e.next() );
                }
				return atts.iterator();
		}

		/**
		 * @return Vector of sub childrens
		 */
		Vector<Enumeration<Attribute>> getAttributeKeys() {
				Vector<Enumeration<Attribute>> keys = new Vector<>();
		        for ( Enumeration<String> e = _self.getAttributeKeys().iterator(); e.hasMoreElements(); ) {
		                Attribute a = new Attribute( e.next(), e.next());
		                keys.add( a.getKeysAndValues());
		        }
		        return keys;
		}

		String makeString() {
				return getName() + "">"";
		}

}

/**
* Test class for {@link XmlElement#addSubElement(String, String)}.
// Make a ""Xml element"" with attributes and child elements as subelemenet.
* This class can be used as the element for both Model/View/Pipeline classes
* which use an XML element as a data source or View/Controller.
*/
public class XmlElement_4Test extends XmlElement_3Test {
	public XmlElement_4Test() {
		super.addSubElement(""Test"", ""test"");
		super.addElements(""Test1"", ""Test2"");
		super.addSubElements(""TestSub1"", ""TestSub2"");
	}
}
"
fe3e541e-db83-42e8-a969-77a61bc5a8d8,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_0Test.java,52.28311252593994,length,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    /**
     * Loads from the InputStream into the root Xml Element.
     *
     * @param input the input stream to load from.
     */
    public boolean load(InputStream input);
}
","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {

	/**
	 * Test case for {@link XmlIO#load(InputStream)} method.
	 */
	@Test
	public final void test_load( ) {
		
   	// Create an Atttributes instance and store it
   	Attributes atttribs = Attributes.getAttributes( ""test"", ""test"" );
   	
   	// Create an Atttemptor to handle the XML stream containing a test element
   	//
   	TestXMLAttributeSetter atttress = new TestXMLAttributeSetter(""Test"" );
   	
   	try {
       	   // Load from the XML stream
               StringBuffer sb = new StringBuffer();
               
               // Print out the XML file
       	    System.out.println(""TestXMLFile1 is created"");
               XMLReader xmlReader = SAXParserFactory.newInstance()
       			.newSAXParser().getXMLReader( );
               
               sb.append(xmlReader.getFeature( ""http://xml.org/sax/features/namespaces"" ) );
           	
       	    // Load the test element
   	     		sb.append(atttress.load(""test""));
       	
       	   	// Parse the test ee
               System.out.println(""TestXMLFile2 is created"");
               XMLReader xmlReader11 = SAXParserFactory.newInstance()
       				.newSAXParser().getXMLReader( );
               // Load the test element
               StringBuffer sb11 = new StringBuffer(sb);
               StringBuffer sb2 = ( new StringBuffer("" "") ).append(sb11).append("" "");
               StringBuffer sb22 = new StringBuffer("" "").append(sb).append("" "");
               sb22 = sb22.toString()
               		.substring(sb22.toString().lastIndexOf('""{'),
                       sb22.toString().lastIndexOf('""'));
               System.out.println(sb22);
               
               // Test if the loaded tag is correct
       	    assertTrue(xmlReader11.getNamespaceContext().getPrefix(""ns1"").equals(""ns1""));
       	    System.out.println("""");
       	        		
               // Parsed the test element
               sb2.append(atttress.load(sb22));
               // Parsed the test element
       	    sb2.append(""\n"");
       	    System.out.println(""test element2 is created"");
       	    final StringBuffer sb3 = new StringBuffer(sb2);
       	    StringBuffer sb4 = sb3
       				.append(""\n\n\n\n"")
       				.append(atttress.load(sb3));
       	    sb4.append(""\n"");
       	    System.out.println(sb4.toString());
       	    
       	    // Test if the loaded test element is correct
       	    assertTrue(xmlReader2.getNamespaceContext().getPrefix(""ns2"").equals(""ns2""));
       	    assertEquals(12, sb4.toString().length());
       	
       	    // Test loading some missing elements
       	    sb2.append(
       			   atttress.load(sb4));
       	    StringBuffer sb5 =
       			   new StringBuffer
       			   (
       			   new StringBuilder(""\n\n\n\n\n"")
       					.append(
       					 		sb4
       							.toString())
       					.toString())
       			  .append(""\n"");
       	    System.out.println(
       			    new String(
       			    		sb5.toString()
       			    		.replaceAll(""\""{ns2\\}\"""", ""\""test\"">ns2</test>""))
       			   .toString());
       	    
       	    try {
       	    // Load the test element
       	    	Object obj = xmlReader.getProperty( ""http://xml.org/sax/properties/lang"" );
       	    	assertTrue(obj instanceof String);
       	    	// System.out.println(xmlReader2.getLang().getValue());
       	    	assertEquals(""XML ParsER - Test"",
       	    	( (String)obj) );
       	    } catch (SAXException ex) {
       	        // Ignore the exception
    	    }
       	    try {
       	    // Load the test element
       	    	Object obj = xmlReader.getProperty( ""http://xml.org/sax/properties/base"" );
       	    	assertTrue(obj instanceof String);
       	    	// System.out.println(xmlReader2.getBaseClass().getValue());
       	    	// assertEquals(""Test XmlIO with base class"",
       	    	    // ( (String)obj) );
       	    } catch (SAXException ex) {
       	        // Ignore the exception
    	    }
       	    try {
       	    // Load the test element
       	    	Iterator i = xmlReader.getPropertyNames();
       	    	while ( i.hasNext() ) {
       	    	    System.out.println(i.next());
       	    	    String propName = i.next();
       	    	    Object nsObject = xmlReader.getProperty(
       	    	            propName.substring(
       	    	                propName.indexOf(""http://xml.org/sax/properties/namespace"") + 
       	    	                  propName.indexOf(""http://xmlpull.org/)"")
       	    	           .split(""/"")[1]);
       	    	    String ns = ((String)nsObject).split("" "")[0]."
342ed8dd-d122-458c-b3c6-08757f60b8a8,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java,52.33877372741699,stop,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    /**
     * Load a file. This is what starts things off.
     *
     * @param inputURL the URL to load XML from.
     */
    public boolean load(URL inputURL);
}
","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {

    /** Test if a correct xml file exists.
     * @throws IOException if something goes wrong.
     * @throws SAXException if something goes wrong.
     */
    @Test
    public void loadTest() throws IOException,SAXException {
        System.out.println(""loadTest()"");

        FileInputStream fis = null;
        try {
            InputStream xslis = getClass().getResourceAsStream(""XmlIO.xsl"");
            xslis = new BufferedInputStream(xslis);
            SAXParserFactory factory = SAXParserFactory.newInstance();
            factory.setValidating(true);
            factory.setExpandEntityReferences(false);
            SAXParser parser = factory.newSAXParser();
             
            parser.parse(xslis, new XmlIO());
        }
        finally {
            if (null!= xslis) {
                xslis.close();
            }
        }
    }
}
"
eebf4c03-532d-458f-bb78-79fc19b39cd9,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java,39.69631361961365,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     *
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input);
}
","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {
/**
		* Test method for {@link InspirentoUtilities#tokenize(java.lang.String)}.
		* Test input string, which must contain
		* {@link javax.swing.text.PlainDocument#getText(int, int)}, is:
		* {""file"", ""edit"", ""view""}
		*
		* @throws IllegalArgumentException if {@link javax.swing.text.PlainDocument#getText}
		*                           fails and throws this exception
		*/
		@Test
		public final void testTokenize() throws IllegalArgumentException {
			String input = ""file edit view"";
			String expected[] = {""file"", ""edit"", ""view""};
			assertArrayEquals(expected, InspirentoUtilities.tokenize(input));
		}
}
// End InspirentoUtilities_0Test.java
"
c78db7b0-f262-4dd2-917f-4eebffc14dff,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_1Test.java,51.09010577201843,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Replaces all characters that may
     * affect program's normal running in the string
     * with the escape strings in HTML.
     *
     * @param str source string
     * @return a string which is processed
     */
    public static String escapeText(String str);
}
","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {

    @Test
    void testEscapeText(){
//        assertEquals(""foo&bar"", InspirentoUtilities.escapeText(""foo&bar""));
        assertEquals(
                ""foo\u0023bar"",
                InspirentoUtilities.escapeText(""foo\u0023bar""));
    }
	
}



"
50b61ad7-c918-4752-b027-764bab0c816e,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java,21.748894929885864,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Utility method to replace all the specified <code>token</code> in
     * string <code>source</code> with the specified <code>
     * replacement</code>.
     *
     * @param source the source string
     * @param token the token to be replaced
     * @param replacement the string used to replace the token
     * @return a <code>StringBuffer</code> object that contains
     *         the modified string
     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)
     */
    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement);
}
","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {

	@Test
	void stringReplaceAllString() throws Exception {
		assertSame(""First string"", ""someString"", InspirentoUtilities.stringReplaceAll(""someString"", 'a', ""someString2""));
		assertEquals(""Second string"", ""someString2"", InspirentoUtilities.stringReplaceAll(""someString"", 'a', ""someString2""));
	}
	
	@Test
	void stringReplaceAllStringString() throws Exception {
		assertSame(""First string"", ""someString"", InspirentoUtilities.stringReplaceAll(""someString"", 'a', ""someString2"", ""someString3""));
		assertEquals(""Second string"", ""someString2"", InspirentoUtilities.stringReplaceAll(""someString"", 'a', ""someString2"", ""someString3""));
	}
	
}

// Test Vector implementation
class TestVector {
	Vector testList;
	
     public TestVector(Vector list1) {
         testList = list1;
     }
}
"
