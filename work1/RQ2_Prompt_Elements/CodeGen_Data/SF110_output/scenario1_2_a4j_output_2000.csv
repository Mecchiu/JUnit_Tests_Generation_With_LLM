ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
7489ccee-b81f-4fe7-9d85-b8463be4e12e,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_0Test.java,63.282809257507324,stop,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }
}
","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_0Test {","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_0Test {
@Test
		void BlendedSearch_withDefaults() {
			BlendedSearch search = A4j.BlendedSearch(null, null);

			assertNotNull(search);
		}

		@Test
		void BlendedSearch_withTypeAsQuery() {
			BlendedSearch _search = A4j.BlendedSearch(""test"", null);
			assertNotNull(""Should not be null"".equals(String
					.valueOf(_search.returnType())));
		}

        @Test
        void BlendedSearch_withTypeAsQuery_emptyQuery() {
            for (String query : null) {
                BlendedSearch search = A4j.BlendedSearch(null, null);
                assertNull(""BlendedSearch should have null"".equals(search));
            }
        }

	@Test
	void BlendedSearch_returnResultOnTypeOfSearch() {
		Search search = A4j.BlendedSearch(
				""test"",
				Product.Type.BANDWIDTH
		);

		assertNotNull(search);
		assertEquals(productType(Product.Type.BANDWIDTH),
				search.type());
	}
	
        @Test
        void BlendedSearch_returnResultOnTypeOfSearch_forNull() {
            Search search = A4j.BlendedSearch(""test"", null);
            assertNotNull(search);
            assertEquals(Product.Type.BANDWIDTH, search.type());
        }

	@Test
	void BlendedSearch_returnResultOnTypeOfSearch_forBoll() {
		Search search = A4j.BlendedSearch(""test"", null);
		DAO.Cart cart = new DAO.Cart(new DAO.CartDAO());

		Product.Type[] productTypes = new Product.Type[] { 
				Product.Type.P1_1, Product.Type.P2_2
		};

		//
		// Searching with just Boll
		//
		for (Product.Type itemType : productTypes) {
			Search _search = search.forType(itemType);
			assertNotNull(""Search should not be null"".equals(
					""Boll "" + itemType.name()))
					&& ""Boll"".equals(itemType.name());
		}

		//
		// Searching with combination of both
		//
		for (Product.Type itemType : productTypes) {
			for (String type : new String[] {""P1_3"", ""P1_2"", ""P1_1""})
			//if (itemType.name().equals(type)
			//		&& String.valueOf(type).equals(itemType.name())) {
			Search _search = productType(itemType).combinedWith(type);
			assertNotNull(""Search should not be null"".equals(
					""P1_3 + P1_2 + P1_1"")
					&& ""P1_3 + P1_2 + P1_1"".equals(
					_search.whereType().equals(Product.Type.P1_3)
					&& ""P1_2 + P1_1"".equals(
					_search.whereType().equals(Product.Type.P1_2)
					&& type.equals(itemType.name()))))
					&& ""P1_3 + P1_2 + P1_1"".equals(
					_search.whereProductType().equals(itemType.name()))
					&& ""P1_3 + P1_2 + P1_1"".equals(
					_search.whereProductType().equals(itemType.name()));
		}
	}

}
"
f2647ddc-9b3d-46d2-9702-67c611725433,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_1Test.java,25.07881259918213,stop,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }
}
","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_1Test {","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_1Test {
/**
		 * Check if the method is called correctly with invalid parameters.
		 */
		@Test
		public void whenCallWrongNumberOfParameters_ItReturnsError() {
			String searchTerm = ""Test String"";
			String productLine = ""Folio"";
			String type = ""Plastic"";
			String page = ""Page"";
			ProductInfo info = null;
			try {
				info = A4j.KeywordSearch(searchTerm, productLine, type, page);
			} catch (A4jBadQueryException e) {
				assertTrue(true);
				return;
			}
			assertTrue(false);
		}
		/**
		 * Check if the method is properly called correctly.
		 */
		@Test
		public void whenCallCorrectParameter_ItReturnsCorrectData() {
			String searchTerm = ""Test String"";
			String productLine = ""Folio"";
			String type = ""Plastic"";
			String page = ""Page"";
			String result = null;
			try {
				result = A4j.KeywordSearch(searchTerm, productLine, type, page);
			} catch (A4jErrorException e) {
				return;
			}
			assertNotNull(result);
			assertNotNull(result);
		}
}
"
66b8aef3-7f03-481d-a5b7-1e7d22547da9,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_2Test.java,60.85762071609497,stop,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }
}
","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_2Test {","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_2Test {

	private A4j dao;
				
	/**
	* Init of test case A4j_2Test that contains one unit test.
	*/
	public A4j_2Test() {
		dao = new A4j();
	}
	
	/**
	* Sets the dao instance for both tests.
	* @param dao the instance of A4j
	*/
	public void setDAO(A4j dao) {
		this.dao = dao;
	}
	
	/**
	* Gets dao instance for both tests.
	*/
	private A4j getDAO() {
		return dao;
	}
	
	/**
	* Test case of {@link A4j#ActorSearch(String, String, String)}.
	*/
	@Test
	public void testActorSearch() {
		String a1 = ""Jasper"";
		String a2 = ""Majordomo"";
		String a3 =""Omar"";
		String a4 = ""Jim"";
		DAO.ProductInfo b1 = dao.ActorSearch(a1, 2, ""D"");
		DAO.CartCoupon b2 = dao.ActorSearch(b1, ""D"", ""D"");
		DAO.CartCoupon b3 = dao.ActorSearch(b2, ""D"");
		assertEquals(b1, b2);
		assertEquals(""D"", b3.couponTypeName);
		assertNull(b3.couponPrice);
		
		DAO.CartCart b4 = null;
		b4 = dao.ActorSearch(b2, ""D"", ""J"");
		assertEquals(b2, b4);
		
		DAO.CartCoupon b5 = null;
		b5 = dao.CartCouponSearch(b1, ""D"", ""J"");
		assertEquals(b1, b5);
		
		DAO.Cart C = dao.ActorSearch(""T"", ""C"", ""A"");
		assertEquals(""E"", C.userTypeName);
		assertNull(C.couponTypeName);
		DAO.ProductInfo c1 = dao.ActorSearch(b1, ""D"", ""A"");
		assertEquals("""", c1.userTypeName);
		DAO.CartCoupon c2 = dao.ActorSearch(c1, ""D"");
		assertEquals(""A"", c2.couponTypeName);
		assertNull(c2.couponPrice);		
		
		DAO.ProductInfo d1 = dao.ActorSearch(""B"", ""D"");
		ProductInfo a1 = dao.ActorSearch(""A"", ""D"");
		assertEquals(b1, a1);
		assertEquals(10, a1.totalPrice);
		assertEquals("""", a1.currencyCode);
		assertNull(a1.userTypeName);
		DAO.CartCoupon a2 = dao.ActorSearch(a1, ""D"");
		ProductInfo r1 = dao.ActorSearch("""", ""D"");
		assertEquals(10, r1.totalPrice);
		assertEquals("""", r1.currencyCode);
		assertNull(r1.userTypeName);
		
		DAO.CartCoupon x1 = dao.CartCouponSearch(""M"", ""D"");
		assertEquals(c1, x1.from)
		assertEquals(b4.couponTypeName, x1.to);
		
		return;
	}
}"
763fb67a-f47f-4d2c-996b-e1df978a7dc7,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_3Test.java,52.573567152023315,stop,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }
}
","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_3Test {","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_3Test {

  
    private Search search = new Search();

    /**
     * Test case for {@link A4j#ArtistSearch(String, String, String)}.
     */
    @Test
    public void testArtistSearch() {

        ArtistsInfo ret = search.ArtistSearch(""cat"", ""all"", ""2"").getFirstResult();
		assertNotNull(ret);
        assertTrue(ret instanceof ArtistInfo);
        assertEquals(""Cat"", ((ArtistInfo) ret).getArtistName());
        assertEquals(""all"", ((ArtistInfo) ret).getMode());
		assertEquals(2, ((ArtistInfo) ret).getTotalPageNumber());
		assertNotNull(((ArtistInfo) ret).getArticleList());
		assertNotNull(((ArtistInfo) ret).getSearchList());
        assertNotNull(((ArtistInfo) ret).getArtists());
		
	}  
	
	
}// End class A4j_3Test"
9727cd6e-fcb3-4c8c-815d-137eb7a2c104,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_4Test.java,60.53982925415039,stop,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }
}
","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_4Test {","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_4Test {
String TestString = ""Some author search"";
	A4j_4Test() {
        // do nothing
	}

	// A4j.AuthorSearch(String authorName, String page)
	@Test
	public void authorSearch()
	{
        assertEquals(""There should be exactly one author search"", 1, getCount());
        assertResultsMatch(authorName, getResults(), new A4jResultsData(TestString));
	}

    // A4j.AuthorSearch(""Author name"", ""page"")
	@Test
    public void authorSearch2() throws Exception {

		Cart cart = new Cart();
        cart.addAuthor(""Some name"");
		Author search = new Author(TestString, cart);

		A4jDAO.authorSearch = search;

		AuthorSearch();
	}

	// A4j.Search(DataObject obj)
	@Test
	public void searches() throws Exception {

		Search search = new Search();
		// do nothing
	}
}"
6bf490b2-420d-4f6e-852d-691f29c52e8b,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_5Test.java,60.44460964202881,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }
}
","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_5Test {","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains one unit test case for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_5Test {
private A4jDAO a4jDAO;

        public A4j_5Test( ) throws Exception {
                a4jDAO = new A4jDAO( );
        }

        @Test
        public void testAddtoCart() throws Exception {
                final String asin = ""kpkqwxyz0w8""; // ""qwxyz0w8""
                final String quantity = 42;
                final String quantityA = ""34""; // ""34""
                final boolean a = true; // ""true""
                final String order = ""kpkqwxyzq9m""; // ""qwxyzq9m""
                final String orderA = ""qpqwxyzq12a9""; // ""qpqwxyzq12a9""
                final String qty0 = ""123""; // ""123""
                final String qty1 = ""34""; // ""34""
                final String qty2 = ""321""; // ""321""
                final String qty3 = ""321""; // ""321""
                final String qty4 = ""234567""; // ""234567""

                final Product asinproduct = new A4jProduct( asin );
                final Product qtyproduct = new A4jProduct( qty0, qty1, qty2, qty3, qty4 );
                final Product quantityproduct = new A4jProduct( quantity, quantityA );

				final Product orderproduct = new A4jProduct( order );
				final Product orderAproduct = new A4jProduct( orderA );

				final Product qty2product = new A4jProduct( qty2 );
				final Product qty3product = new A4jProduct( qty3 );
				final Product qty4product = new A4jProduct( qty4 );

                final String expectedQuery = ""qpqwxyzq12a9 = \""Qpqwxyzq12a9 = \""&order=kpkqwxyzq.&qy0=44&qy1=0&qy2=345&qy3=321&qy4=234567\"""";

                FindAll findAll = new FindAll();

		    	// Make sure the Cart is not null.
				assertFalse( ( (Cart) a4jDAO.AddtoCart( asinproduct.ASIN, qtyproduct.Qty ).result).isCart());

        	    // Verify that a Cart is returned.
		    	// A Cart is returned for a cart containing more than one product with the same quantity.
        		findAll.run();
		    	final Cart cart = (Cart) a4jDAO.AddtoCart( asinproduct.ASIN, qtyproduct.Qty ).result;

	            assertEquals(expectedQuery, cart.GETQUERY_QTY, ""The returned query is different than expected."");

		    	// Make sure the quantity product is returned.
		    	assertNotNull( cart.GETQUERY_QTY );
		    	assertEquals( expectedQuery, cart.GETQUERY_QTY.Qty, ""The returned query.Qty does not match the expected quantity of the product."");

		    	// Verify that the products is returned.
		    	FindProducts findProducts = new FindProducts();

		    	// Verifies two products
		    	List products = findProducts.run();

		    	assertEquals( 3, products.size(), ""The returned product list should have matched"" + "" the expected result."");

		    	Product qty2product2 = (Product) products.get(0);
		    	Product qty3product2 = (Product) products.get(1);
		    	Product qty4product2 = (Product) products.get(2);

		    	// Make sure both products are returned.
		    	assertTrue( qty2product.isCart(), ""The query query.qy0 did not match the product."");
		    	assertTrue( qty3product.isCart(), ""The query query.qy1 did not match the product."");
		    	assertTrue( qty4product.isCart(), ""The query query.qy2 did not match the product."");
		    	assertTrue( qty2product2.isCart(), ""The query query.qy0 did not match the product."");
		    	assertTrue( qty3product2.isCart(), ""The query query.qy1 did not match the product."");
		    	assertTrue( qty4product2.isCart(), ""The query query.qy2 did not match the product."");

		    	// Verify that the query was executed.
		    	assertFalse(findProducts.getQuery().equals( expectedQuery),
		    			""Query does not match the expected result."");

		    	// Verify that the result of the query is a list.
		    	List list = (List) findProducts.getQuery().result;

		    	// Make sure two lists are returned.
		    	assertEquals( 2, list.size(), ""The expected number of result is not the same. Results of two products matching different quantity."");

		    	// Verify that the result is correct product.
		    	Product results = (Product) list.get(0);

		    	// Verify that the first element is an A4j Product.
		    	assertNotNull( results, ""The returned value for a4jProduct.qy0 is null."" );
		    	assertTrue( results.isCart(), ""The result of a4jProduct.qy0 is not a Cart."" );
		    	assertTrue( results.isProduct(), ""The result of a4jProduct.qy0 is not a Product."" );

		    	// Verify the quantity product of the A4j Product.
		    	assertNotNull( results.qtyProduct(), ""The returned quantity of a4jProduct.qy0 is null."" );
		    	assertEquals( qtyproduct.Qty, results.qtyProduct().Qty, ""The returned quantity of a4jProduct does not match the expected quantity of the product of the cart."" );

		    	// Verify the quantity product of the A4j Product.
		    	assertNotNull( results.qtyProducts(),
		    			""The returned quantity of a4jProduct.qy0 is null."" );
		    	assertEquals( qtyproducts.Qty, results.qtyProducts().Qty, ""The returned quantity of a4jProduct does not match the expected quantity of items in the cart."" );

		    	//
		    	// Verify the cart.
		    	assertNotNull( cart.GETQUERY_QTY, ""Cart did not contain the expected results."" );
		    	assertTrue( cart.GETQUERY_QTY.Qty.equals( qtyproduct.Qty ), ""The query query.qy0 for A4jProduct did not match the expected quantity of the product."" );

		    	//
		    	// Verify the cart.
		    	assertNotNull( cart.GETQUERY_QTY, ""Cart did not contain the expected results."" );
		    	assertTrue( cart.GETQUERY_QTY.Qty.equals( qtyproduct.Qty ),"
