ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
8d962684-2c77-48f6-ad9a-e357b7ffad32,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_0Test.java,39.009495973587036,length,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    /**
     * Recalculate the current price for this drink
     */
    public int recalculate() {
        //Calculate new average values
        totalSold += lastSold;
        averageAmount = (float) totalSold / model.getIteration();
        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();
        if (totalSold > 0) {
            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;
        }
        int newPrice;
        if (directPrice != 0) {
            // If a direct price was set, use it
            newPrice = directPrice;
            directPrice = 0;
        } else if (keepPrice) {
            // Keep the price
            newPrice = currentPrice;
        } else {
            // Calculate the new price
            double diffSold = lastSold - targetAmount;
            double factor = diffSold / deltaAmount;
            double change = factor * maxStep;
            int priceSteps = model.getSettings().getPriceSteps();
            double rest = Math.floor(Math.abs(change % priceSteps));
            double full = Math.floor(Math.abs(change / priceSteps));
            int priceChange = 0;
            if (rest >= priceSteps / 2) {
                priceChange = priceSteps;
            }
            priceChange += full * priceSteps;
            // Check that the change of the price is not more than the max step
            if (priceChange > maxStep) {
                priceChange = maxStep;
            }
            if (model.getSettings().isStandardLogic()) {
                if (factor >= 0) {
                    newPrice = currentPrice + priceChange;
                } else {
                    newPrice = currentPrice - priceChange;
                }
            } else {
                // Inverse logic
                if (factor >= 0) {
                    newPrice = currentPrice - priceChange;
                } else {
                    newPrice = currentPrice + priceChange;
                }
            }
        }
        // Check that the new price is not above the max price or below the min price
        if (newPrice > maxPrice) {
            newPrice = maxPrice;
        } else if (newPrice < minPrice) {
            newPrice = minPrice;
        }
        // Calculate the trend
        if (newPrice > currentPrice) {
            trend = 1;
        } else if (newPrice < currentPrice) {
            trend = -1;
        } else {
            trend = 0;
        }
        currentPrice = newPrice;
        //Debug output
        model.getLog().debug(""Recalculating drink: "" + name + "" for iteration: "" + model.getIteration());
        model.getLog().debug(""Last sold: "" + lastSold);
        model.getLog().debug(""Total sold:"" + totalSold);
        model.getLog().debug(""Average sold: "" + averageAmount);
        model.getLog().debug(""Average price: "" + averagePrice);
        model.getLog().debug(""Average sold price: "" + averageSoldPrice);
        model.getLog().debug(""New price: "" + currentPrice);
        // Reset values for the next iteration
        lastSold = 0;
        return currentPrice;
    }
}
","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {
// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    /**
     * Recalculate the current price for this drink
     */
    public int recalculate() {
        //Calculate new average values
        totalSold += lastSold;
        averageAmount = (float) totalSold / model.getIteration();
        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();
        if (totalSold > 0) {
            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;
        }
        int newPrice;
        if (directPrice!= 0) {
            // If a direct price was set, use it
            newPrice = directPrice;
            directPrice = 0;
        } else if (keepPrice) {
            // Keep the price
            newPrice = currentPrice;
        } else {
            // Calculate the new price
            double diffSold = lastSold - targetAmount;
            double factor = diffSold / deltaAmount;
            double change = factor * maxStep;
            int priceSteps = model.getSettings().getPriceSteps();
            double rest = Math.floor(Math.abs(change % priceSteps));
            double full = Math.floor(Math.abs(change / priceSteps));
            int priceChange = 0;
            if (rest >= priceSteps / 2) {
                priceChange = priceSteps;
            }
            priceChange += full * priceSteps;
            // Check that the change of the price is not more than the max step
            if (priceChange > maxStep) {
                priceChange = maxStep;
            }
            if (model.getSettings().isStandardLogic()) {
                if (factor >= 0) {
                    newPrice = currentPrice + priceChange;
                } else {
                    newPrice = currentPrice - priceChange;
                }
            } else {
                // Inverse logic
                if (factor >= 0) {
                    newPrice = currentPrice - priceChange;
                } else {
                    newPrice = currentPrice + priceChange;
                }
            }
        }
        // Check that the new price is not above the max price or below the min price
        if (newPrice > maxPrice) {
            newPrice = maxPrice;
        } else if (newPrice < minPrice) {
            newPrice = minPrice;
        }
        // Calculate the trend
        if (newPrice > currentPrice) {
            trend = 1;
        } else if (newPrice < currentPrice) {
            trend = -1;
        } else {
            trend = 0;
        }
        currentPrice = newPrice;
        //Debug output
        model.getLog().debug(""Recalculating drink: "" + name + "" for iteration: "" + model.getIteration());
        model.getLog().debug(""Last sold: "" + lastSold);
        model.getLog().debug(""Total sold:"" + totalSold);
        model.getLog().debug(""Average sold: "" + averageAmount);
        model.getLog().debug(""Average price: "" + averagePrice);
        model.getLog().debug(""Average sold price: "" + averageSoldPrice);
        model.getLog().debug(""New price: "" + currentPrice);
        // Reset values for the next iteration
        lastSold = 0;
        return currentPrice;
    }
}

// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {
		/**
		 * @NoArgsConstructor Use only in Spring
		 * @param <T>
		 */
		@Test
		public void test001_S1_recalculate() throws Exception {
			model.getLog().debug(SimpleModel.getMethodName());
			model.setSettings(SimpleModel.getSettings());
			model.getSettings().set(SimpleModel.PRODUCTION_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_DEVICE_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_TRAFFIC_TRAINING, true);
			// Run the test
			String fullPath = new File(new File(""src/test/resources/drink/"")
					.getCanonicalPath() + ""/"" + name).getAbsolutePath();
			model.getSettings().set(SimpleModel.TRAFFIC_TRAINING,
					new File(fullPath).exists());
			new Drink().recalculate();
		}

		@Test
		public void test002_S1_recalculate_T() throws Exception {
			model.getLog().debug(SimpleModel.getMethodName());
			model.getLog().debug(SimpleModel.getMethodDisplayName());
			model.setSettings(SimpleModel.getSettings());
			model.getSettings().set(SimpleModel.PRODUCTION_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_DEVICE_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_TRAFFIC_TRAINING, true);
            new Drink_T().recalculate();
		}

		@Test
		public void test_S1_recalculate_test() throws Exception {
			model.getLog().debug(SimpleModel.getMethodName());
			model.getLog().debug(SimpleModel.getMethodDisplayName());
			model.setSettings(SimpleModel.getSettings());
			model.getSettings().set(SimpleModel.PRODUCTION_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_DEVICE_BOUNDARY, true);
			model.getSettings().set(SimpleModel.PRODUCTION_TRAFFIC_TRAINING, true);
			// Run the test
			String simplePath = new File(SimpleModel.getMethodDisplayName()
					.replace(""{model}"", model.getName()).replace(""{iteration}"",
					model.getIteration()).replace(""{model.name}"", model.getName())
					.replace(""{model_name}"", model.getName())).getAbsolutePath();
			String fullPath = new File(new File(fullPath)
					.getCanonicalPath() + ""/"" + name).getAbsolutePath();
			document = new Document();
			SAXBuilder builder = new SAXBuilder();
			builder.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
			builder.setFeature(""http://xml.org/sax/features/external-parameter-entities"",
					false);
			builder.setFeature(""http://xml.org/sax/features/external-parameter-entities"",
					false);
			builder.setFeature(""http://xml.org/sax/features/external-parameter-entities"",
					false);
			Document doc = builder.build(new File(simplePath + ""/"" + name));
			Element root = doc.getRootElement();
			model.setSettings(model.getSettings()
					.set(SimpleModel.TRAFFIC_TRAFFIC_TRAINING, true));
			model.getSettings().getTransient().set(
					SimpleModel.TRANSIENT_PRODUCTION_BOUNDARY, true);
			Element tr = root.addContent(new Element(""transient_productivity""));
			tr.add"
fc57be70-3d9b-4d21-b358-b45c8e1027a1,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_1Test.java,43.52400732040405,length,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    /**
     * Save the drink description to a XML file
     */
    public File save() {
        if (!NEW_DRINK_NAME.equals(name)) {
            model.getLog().debug(""Save drink: "" + name);
            // Build JDOM document representing the settings
            Element root = new Element(""drink"");
            Element minPriceElem = new Element(""minPrice"");
            minPriceElem.setText(String.valueOf(minPrice));
            root.addContent(minPriceElem);
            Element maxPriceElem = new Element(""maxPrice"");
            maxPriceElem.setText(String.valueOf(maxPrice));
            root.addContent(maxPriceElem);
            Element startPriceElem = new Element(""startPrice"");
            startPriceElem.setText(String.valueOf(startPrice));
            root.addContent(startPriceElem);
            Element targetAmountElem = new Element(""targetAmount"");
            targetAmountElem.setText(String.valueOf(targetAmount));
            root.addContent(targetAmountElem);
            Element deltaAmountElem = new Element(""deltaAmount"");
            deltaAmountElem.setText(String.valueOf(deltaAmount));
            root.addContent(deltaAmountElem);
            Element maxStepElem = new Element(""maxStep"");
            maxStepElem.setText(String.valueOf(maxStep));
            root.addContent(maxStepElem);
            Element usedElem = new Element(""used"");
            usedElem.setText(String.valueOf(used));
            root.addContent(usedElem);
            Element keyElem = new Element(""key"");
            keyElem.setText(String.valueOf(key));
            root.addContent(keyElem);
            Document settingsDoc = new Document(root);
            // Save JDOM document to file system
            File folder = new File(DRINKS_FOLDER);
            File file = new File(DRINKS_FOLDER + name + "".xml"");
            try {
                if (!folder.exists()) {
                    folder.mkdirs();
                }
                model.getLog().debug(""File for Drink: "" + file.getAbsolutePath());
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                FileOutputStream fos = new FileOutputStream(file);
                XMLOutputter serializer = new XMLOutputter();
                serializer.output(settingsDoc, fos);
                fos.flush();
                fos.close();
            } catch (Exception e) {
                model.getLog().error(this, e);
            }
            return file;
        }
        return null;
    }
}
","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {
/**
		* @jest-category logging
		*/
    @Test
    public void testSave() {
        Drink_1.setUp();
        try {
            Drink_1.setUp();
            Drink drink = new Drink(name);
            assertNotNull(""Should store a Drink!"", drink);
            assertNotNull(""Should set the ID of the Drink!"", drink.getID());
            assertNotNull(""Should store the name of the Drink!"", drink.getName());
            assertEquals(name, drink.getName());
            assertEquals(name, drink.getName());
            assertEquals(name, drink.getID());
            assertEquals(new Drink(""Test"", new DrinkDescription_1()), drink);
        } catch (AssertionError e) {
            return;
        }
    }

    public void setUp() {
        model = new Drink();
        model.setName(name);
        model.setDescription(new DrinkDescription_1());
        model.setID("""");
        model.setUsed(false);
    }
	
	/**
	* Test for the following JDOM file: 
	* <xmpLiteral name=""${drink.name}"" type=""text/plain"" content=""Testing drink description.</xmp>
	*/
    @Test
    public void testDRINK_1() {
		Drink_1 test = new Drink_1();
        // Build JDOM document representing the settings
        Document doc = new Document(""<xmpLiteral name=\""${drink.name}""
                + ""\n      type=\""text/plain\""""
                + ""\n                content=\""Testing drink description.</xmp>"" + ""</xmpLiteral>"");
        // Save JDOM document to file system
        File file = test.save();
        // Build DOM object representing the content of the DOM document
        Document result = new SAXBuilder().build(new File(file.getAbsolutePath()));
        assertNotNull(""Should store a Drink!"", result);

	}  
    
	/**
	* Test for the following XML file: 
	* <xmpLiteral name=""${drink.name}"" type=""xsl"" content=""&lt;""&gt;&lt;title&gt;&lt;body&gt;&lt;p&gt;Testing ${drink.name}: ${drink.description}&lt;/p&gt;&lt;/body&gt;&lt;/title&gt;&lt;/body&gt;&lt;/xmpLiteral>
	*/
    @Test
    public void testDRINK_N_2() {
		
        // Build JDOM document representing the settings
        Document doc = new Document(""<xmpLiteral name=\""${drink.name}""
                + ""\n      type=\""xsl\""""
                + ""\n                content=\""&lt;"" 
                + ""<body><p>""+ new DrinkDescription_2().getName() +""</p></body>"" + ""</xmpLiteral>"");
        assertNotNull(""Should store a Drink!"", doc);
        assertNotNull(""Should set the ID of the Drink!"", doc.getRootElement().getAttribute(""id""));
        assertEquals(name, doc.getRootElement().getAttribute(""id""));
        assertNotNull(""Should store the name of the Drink!"", doc.getRootElement().getAttribute(""name""));
        assertEquals(name, doc.getRootElement().getAttribute(""name""));
        // Build XML document object
        Document result = new SAXBuilder().build(new File(
                this.getClass().getResource(""Drink_N_2.xml"").getFile()));
        assertNotNull(""Should store a Drink!"", result);
        assertEquals(""Drink Description"",
                result.getRootElement().getContent());
        assertEquals(""Drink Description"", result.getRootElement().getContent());
    }
       /**
	* Test for the following XML file: 
	* <xmpLiteral name={{drink.name}} id={{drink.ID}} />
	*
	*/
    @Test
    public void testDRINK_N_3() {
		
        // Build JDOM document representing the settings
        Document doc = new Document(""<xmpLiteral name={{drink.name}}""
                + ""\n      type=\""xsl\""""
                + ""\n                content=\""&lt;"" 
                + ""<body><p>""+ new DrinkDescription_2().getName() +""</p></body>"" + ""</xmpLiteral>"" + ""</xmpL"
e003a303-52b5-4802-b61f-3f00435c38e2,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Settings.java,46.38173961639404,length,"// Settings.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class Settings {

    /**
     * Save the settings
     */
    public File save() {
        // Build JDOM document representing the settings
        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
        timeIntervalElem.setText(String.valueOf(timeInterval));
        settingsRoot.addContent(timeIntervalElem);
        Element priceStepsElem = new Element(DOM_PRICE_STEPS);
        priceStepsElem.setText(String.valueOf(priceSteps));
        settingsRoot.addContent(priceStepsElem);
        Element currencyElem = new Element(DOM_CURRENCY);
        currencyElem.setText(currency);
        settingsRoot.addContent(currencyElem);
        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
        backgroundElem.addContent(backgroundImagePath);
        settingsRoot.addContent(backgroundElem);
        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
        if (standardLogic) {
            standardLogicElem.addContent(DOM_YES);
        } else {
            standardLogicElem.addContent(DOM_NO);
        }
        settingsRoot.addContent(standardLogicElem);
        Element messageElem = new Element(DOM_MESSAGE);
        messageElem.addContent(message);
        settingsRoot.addContent(messageElem);
        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);
        messageSpeedElem.addContent(new Integer(messageSpeed).toString());
        settingsRoot.addContent(messageSpeedElem);
        Document settingsDoc = new Document(settingsRoot);
        // Save JDOM document to file system
        File file = new File(SETTINGS_FOLDER + ""settings.xml"");
        try {
            File folder = new File(SETTINGS_FOLDER);
            if (!folder.exists()) {
                folder.mkdirs();
            }
            if (file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileOutputStream fos = new FileOutputStream(file);
            XMLOutputter serializer = new XMLOutputter();
            serializer.output(settingsDoc, fos);
            fos.flush();
            fos.close();
        } catch (Exception e) {
            model.getLog().error(this, e);
        }
        return file;
    }
}
","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {

	/**
	 * Create the unit test.
	 */
	public SettingsTest() {
	}

	/**
	 * Test method for {@link Settings#save()} - the method which takes a settings node
	 * and a JDOM document and output the settings to a JDOM document. The settings can
	 * be saved using the {@link Settings#save As} method.
	 * @throws Throwable the throwable
	 */
	@Test
	public void testSave() throws Exception {
	    System.out.println(""Start test"");
		
		this.testSave();
		
		// Clean up
	    File outputFile = new File(this.getClass().getSimpleName());
	    System.out.println(""Outputfile name:"" + outputFile.getAbsolutePath());
		
		//Delete test file
		File directory = new File(SETTINGS_FOLDER);
		if (directory.exists()) {
		    //delete file
			File file = new File(directory, ""settings.xml"");
			System.out.println(""File:"" + file);
			delete(file, directory);
			System.out.println();
		}
	}
	
	
	/**
	 * Test method for {@link Settings#save()}. The tests create JDOM document with
	 * an attribute named testName where the value is a string with the name of the
	 * configuration. The value is a string with the number of configuration
	 * parameters. The text of the attribute is given by a string, given using
	 * {@link Settings#createEmptyDocument(String)} which is then used to create
	 * a document from a JDOM string which is then used to construct an {@link
	 * Element} object using it.
	 * @throws Throwable the throwable
	 */
	@SuppressWarnings(""static-method"")
	@Test
	public void testCreateEmptyDocumentNoSettings() throws Exception {
		System.out.println(""Start test"");
		
		XMLOutputter serializer = new XMLOutputter();
		serializer.output(createEmptyDocumentWithTestSetting(), new FileOutputStream(new File(SETTINGS_FOLDER, ""NoSettingsElem.xml"")));
		
		Document document = new Document(createEmptyDocumentWithTestSetting());
		try {
			serializer.output(document, new FileOutputStream(new File(SETTINGS_FOLDER, ""NoSettingsElem.xml"")));
			fail(""A specification error occured"");
		} catch (IOException e) {
			assertThat(true, ""A specification error occured"");
		}
		
	}
	
	
	/**
	 * Create an empty document which is used as an example, created by a different 
	 * code.
	 * @param testSettingNameName
	 * @return an created empty configuration element with the name of testSettingNameName
	 */
	public Element createEmptyDocumentWithTestSetting(String testSettingNameName) {
		Element newConfigSettingElem = new Element(testSettingNameName);
		return createEmptyDocument(newConfigSettingElem);
	}
	
	/**
	 * Create an empty document. It is designed to be used for unit tests.
	 * @return an empty configuration element
	 */
	public Element createEmptyDocumentWithoutSettings() {
		return createEmptyDocument(new Element(""NoSettingsElem""));
	}
	
	/**
	 * Test method for {@link Settings#save()}. The tests creates a document
	 * with an attribute named ""testXML"" that is given the value given by the
     * {@link #createEmptyDocumentWithTestSetting(String)} method. The value
     * is given by the given {@link #createEmptyDocumentWithoutSettings()} method.
	 * @throws Throwable the throwable
	 */
	@SuppressWarnings(""static-method"")
	@Test
	public void testSaveWithNoSettings() throws Exception {
		System.out.println(""Start test"");
		
		Document document = new Document(createEmptyDocumentWithoutSettings());
		
		//Create XML document with no content from the empty document
		this.save(document);
		
		//Create XML document without content from the empty document
		try {
			this.save(document);
			fail(""A specification error occured"");
		} catch (IOException e) {
			assertThat(true, ""A specification error occured"");
		}
	}
	
	
	/**
	 * Test method for {@link Settings#createXMLWithSettings(Element)}.
	 * @throws Throwable the throwable
	 */
	@SuppressWarnings(""static-method"")
	@Test
	public void testCreateXMLWithSettings() throws Exception {
		System.out.println(""Start test"");
		
		Document document = new Document(createEmptyDocumentWithoutSettings());
		
		//Set elements
		Element testXMLElem = new Element(""NoSettingsElem"");
		Element textElem = createEmptyDocumentWithoutSettings();
		Element testNAMEText = createEmptyDocumentWithoutSettings"
