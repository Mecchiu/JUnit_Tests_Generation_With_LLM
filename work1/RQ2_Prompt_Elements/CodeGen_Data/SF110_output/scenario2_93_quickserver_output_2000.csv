ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
0880ad17-83bd-4eff-8748-2086595f9e2d,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_0Test.java,29.992860794067383,stop,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    /**
     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector
     * after RegisterForWrite is called.
     *
     * @since 1.4.7
     */
    public static boolean getWakeupSelectorAfterRegisterWrite() {
        return wakeupSelectorAfterRegisterWrite;
    }
}
","// NonBlockingClientHandler_0Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.
*/
class NonBlockingClientHandler_0Test {","// NonBlockingClientHandler_0Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.
*/
class NonBlockingClientHandler_0Test {
public static class TestThread extends Thread implements NonBlockingClientHandler {
            private boolean stop;
            /**
             * The constructor.
             *
             */
            public TestThread() {
            	super(""Thread for checking"");
            }

            public void run() {
            	while (!this.stop) {
            		String clientMessage = new String();
            		try {
            			clientMessage = this.getMessage();
            		} catch (IOException e) {

            		}
            		Connection con = null;
            		try {
            			con = this.getConnection();
            			while (!this.stop) {
            				try {
            					int ret = con.getAcceptancePolicy().checkClientConnection(clientMessage);
            					return;
                    			} catch (IOException e) {

            					}
            				try {
            					con.setTimeOut(5000);
            				} catch (Exception e) {

            					con.setNoReply();
            					
            				}
            				try {
            					con.close();
            				} catch (Exception e) {
            				}

                			try {
                				Thread.sleep(100);
                			} catch (Exception e) {
                			}
            			}
            		}
            		catch (IOException io) {

            		} catch (InterruptedException e) {

            		}
            		finally {
            			try {
            				if (con!= null) {

            					con.close();
            				}

            			} catch (Exception e) {

            			}

            			try {
            				if (this.con!= null) {

            					Thread.sleep(50);
            				}
            			} catch (Exception e) {
            			}

            			if (this.con!= null) {

            				Thread.sleep(50);
            			}
            		}
            	}
            }
        }
}

"
70db7600-3a86-4eb7-a9e7-c4bf2297ee3c,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_1Test.java,59.66572308540344,length,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    /**
     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector
     * after RegisterForRead is called.
     *
     * @since 1.4.7
     */
    public static boolean getWakeupSelectorAfterRegisterRead() {
        return wakeupSelectorAfterRegisterRead;
    }
}
","// NonBlockingClientHandler_1Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.
*/
class NonBlockingClientHandler_1Test {","// NonBlockingClientHandler_1Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.
*/
class NonBlockingClientHandler_1Test {
private static final String NAMESPACE = ""test/com.sun.nio.ch.TCP_NAK"";

		/**
		 * A client that does not return to the client, it calls the 
		 * wakeupSelector after RegisterForRead.
		 */
    public final class Client extends Server {

    	private final NonBlockingClientHandler_1Test
    	   serverHandler = new NonBlockingClientHandler_1Test();

		public Client(
				ServerConnectionFactory serverClientFactory,
				ServerAddressFactory serverAddressFactory,
				ServerConnectionFactory serverServerFactory,
				int port,
				int portMin,
				int portMax)
		throws IOException {
			super(serverClientFactory, serverAddressFactory, serverServerFactory, port, portMin, portMax);
		}

		static NonBlockingClientHandler_1Test getInstance() {
			return Server_GetInstanceL(NonBlockingClientHandler_1Test::new);
		}

		public Client(int portNum) {
			super(ServerHandler.getInstance(ServerHandler.getNonBlockingServerFactory(NonBlockingServer.DEFAULT)), null, null, portNum);
		}

		public ServerClient getClient(int portNum) {
			return Server_GetClient(0, new TCPServerClientFactory(serverClientFactory), portNum);
		}

		public void stop() {
			stopNow = true;
		}

		static boolean stopNow = false;

		//
		// Test method for 'NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()'
		//
		@Test 
		public void test_getWakeupSelectorAfterRegisterRead() {
			assertFalse(""getWakeupSelectorAfterRegisterRead returned true"", serverHandler.getWakeupSelectorAfterRegisterRead());
			serverHandler.stop();
			try {
				serverHandler.getWakeupSelectorAfterRegisterRead();
			} catch (Exception exc) {
				String expectedString;
				if (exc instanceof UnsatisfiedLinkError) {
					expectedString =  ""UnsatisfiedLinkError"";
				} else if (exc instanceof UnsatisfiedLinkError_1_13) {
					expectedString =  ""UnsatisfiedLinkError_1_13"";
				}
				fail(Client_getWakeupSelectorAfterRegisterReadString(exc, expectedString));
			}
		}
	}

	/**
	* Test method for {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()}. Tests behavior of
	* constructor that takes 0 as the port when port is unset.
	*
	*/
	@Test
	public void test_Client_0Server_GetClient_0_server_GetClient() {
    	final Server connectionServer = serverServerFactory.getServer();
		final Server connectionClient = connectionServer.newServerClient();
		Server_SetNonBlockingServerFactory(connectionServer, NonBlockingServer.DEFAULT);
		Server_SetNonBlockingServerFactory(connectionClient, NonBlockingServer.DEFAULT);
        Server_SetNonBlockingConnectorFactory(connectionClient, NonBlockingConnectorFactory.DEFAULT);
		final ServerServerConnectionFactory connectionServerFactory = Server_GetNonBlockingConnectionFactory(connectionServer);
		final ServerServerConnectionFactory connectionClientFactory = Server_GetNonBlockingConnectionFactory(connectionClient);
		final ServerConnectionFactory socketFactory = ServerConnectionFactory_NonBlockingTCPAddress(connectionClient.getSocket().getLocalAddress(), 20);
		Server_SetSocketFactory(connectionClient, socketFactory);
		Server_SetNonBlockingServerFactory(connectionClient, NonBlockingServer.DEFAULT);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingServerFactory(ConnectionServer)}.
	* Tests behavior of constructor with null parameter.
	*
	*/
	@Test (expected = IllegalArgumentException.class)
	public void test_Server_SetNonBlockingServerFactory_null_connectionServer() {
    	Server_SetNonBlockingServerFactory(null, 0);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingServerFactoryNonBlock(ConnectionServer)}.
	* Tests behavior of constructor with 0 as the port when port is unset, it throws UnsatisfiedLinkError
	* when port is already set to nonBlocking.
	*
	*/
	@Test (expected = UnsatisfiedLinkError_1_3.class)
	public void test_Server_SetNonBlockingServerFactoryNonBlock_0_connectionServer() {
		Server_SetNonBlockingServerFactoryNonBlock(null);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingServerFactoryNonBlock(ConnectionServer)}.
	* Tests behavior of constructor with null parameter.
	*
	*/
	@Test (expected = IllegalArgumentException.class)
	public void test_Server_SetNonBlockingServerFactoryNonBlock_null_connectionServer() {
    	Server_SetNonBlockingServerFactoryNonBlock(null);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingConnectionFactory(ServerConnection)}.
	* Tests behavior of constructor with null parameter.
	*
	*/
	@Test (expected = IllegalArgumentException.class)
	public void test_Server_SetNonBlockingConnectionFactory_null_serverConnection() {
    	Server_SetNonBlockingConnectionFactory(null);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingSslContext(SslContext)}.
	* Tests behavior of constructor with null parameter.
	*
	*/
	@Test (expected = IllegalArgumentException.class)
	public void test_Server_SetNonBlockingSslContext_null_sslContext() {
    	Server_SetNonBlockingSslContext(null);
	}

	/**
	* Test method for {@link NonBlockingClientHandler#Server_SetNonBlockingSslContext(SslContext, int, int, SslCallback)}.
	* Tests behavior of constructor with undefined parameters.
	*
	*/
	@Test (expected = IllegalArgumentException.class)
	public void test_Server_SetNonBlockingSslContext_undefined_callbacks() {
    	Server_SetNonBlockingSslContext(null, 0, 0, null);
	}

    private static String Client_getWakeupSelectorAfterRegisterReadString(
			Exception exc, String expected) {
		return new StringBuilder(StringUtil.getStackTrace(exc))
		.append(""["")
		.append(""getWake"
4efe2e73-da08-4510-9f79-d20d42af3ee5,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_2Test.java,59.20650029182434,length,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    /**
     * Returns the maximum count of thread allowed to run objects of this class at a time.
     *
     * @since 1.4.7
     */
    public static int getMaxThreadAccessCount() {
        return maxThreadAccessCount;
    }
}
","// NonBlockingClientHandler_2Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.
*/
class NonBlockingClientHandler_2Test {","// NonBlockingClientHandler_2Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.
*/
class NonBlockingClientHandler_2Test {
/** This method checks the test count is returned by the
		{@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.
		*/
		@Test
		public void testGetMaxThreadAccessCount() {
			assertEquals(""The test is equal to the server's client connection."", getMaxThreadAccessCount(), client.getMaxThreadAccessCount(), 0.0);
		}
}

// NonBlockingHandler_2Test.java
class NonBlockingHandler_2Test extends HandlerFactory {
	static {
		SINGLE = true;
	}

	private Queue pendingRequests = null;	// Queue containing pending requests for reading and writing
	private Handler handler;					// Handler currently served
	private final Queue readQueue = new LinkedList(); // Current queue of read requests
	private int maxThreadAccessCount = maxThreadAccessCount;	// The count of current threads allowed to access read requests

	private NonBlockingClientHandler client = null;	// The client that will be used to read request
	private int index = 0;


	NonBlockingHandler_2Test(Handler handler) {
		this.handler = handler;
	}

	void setup() {
		readQueue = new LinkedList();
		client = new NonBlockingClientHandler();
		maxThreadAccessCount = maxThreadAccessCount;
	}

	void teardown() {
		client.stopReading();
		client.stopWriting();
	}

	long getMaxAllowedWrite(long amount) {
		long maxFileLength = client.getMaxFileLength();
		if (maxFileLength > 0)
			return maxFileLength;

		return maxThreadAccessCount;
	}

	long getPendingWrite(long amount) {
		long maxFileLength = client.getMaxFileLength();
		if (maxFileLength > 0)
			return maxFileLength;

		return (long) (pendingRequests.size() * 1.5);
	}

	long getReadQueueLength() {
		return readQueue.size();
	}

	long getMaxReadRequested() {
		return maxReadRequests;
	}

	long getMaxWriteRequested() {
		return maxWriteRequests;
	}

	long getMaxReadWrite(long amount) {
		try {
	       return getMaxWriteRequested();
	    }
		catch (InterruptedException e) {
	       return getMaxReadWrite();
	    }		
	}	

	long getMaxWriteWrite(long amount) {
		long maxFileLength = client.getMaxFileLength();
		if (maxFileLength > 0)
			return maxFileLength;

		return maxThreadAccessCount;
	}

	long getWriteQueueLength() {
		return writeQueue.size();
	}

	public Queue getReadQueue() {
		return readQueue;
	}

	public Handler getHandler() {
		return handler;
	}

	HandlerFactory init(String hostAddress, int port) {
		return new NonBlockingHandler_2Test(new MySocketHandler(hostAddress, port));
	}

	static protected Socket createSocket() throws Exception {
		return new java.net.Socket();
	}

	static public void usage() {
		System.out.println(""Usage: ClientHandler #[maxThreadAccessCount] : #""+
			""ClientHandler #[maxThreadAccessCount] <port> <host address>"");
	}

	protected void stopRead() throws InterruptedException {
	   new NonBlockingHandler_2Test(readHandler.getHandler()).stopReading();
	}

	protected void stopWrite() throws InterruptedException {
	   new NonBlockingHandler_2Test(writeHandler.getHandler()).stopWriting();
	}

	public Handler createHandler(Queue readQueue, int index, Queue writeQueue, int maxReadRequested, boolean blocking) throws InterruptedException {
		return new NonBlockingHandler_2Test(new MySocketHandler(
				readQueue.remove(), writeQueue.remove(), index, block(blocking)));
	}

	static private Thread newServer() {
		return Thread.currentThread();
	}

	abstract protected Handler writeHandler = new ServerHandler();

	abstract protected Socket createSocket( int port );

	abstract protected Handler readHandler = new ServerHandler();

	private static class MySocketHandler extends SocketHandler {
		private ServerConnection connection;

		public MySocketHandler(String hostAddress, int port) {
			super(hostAddress, port);
			connection = new ServerConnection(this);
			connection.connect();
		}

        public void handleEvent(SocketChannel socketChannel) throws IOException {
            // Note: the send() call here is blocking and will only
            // be done when the write is made in this method.

            // Note: this method is called directly by the write() callback,
            // so that the write is made synchronously
        	SocketChannel connection = SocketChannel.open();
            socketChannel.socket().connect(connection.address());

            // Set socket to a blocking-mode channel
            Socket socket = connection.socket();
            socket.setSoTimeout(10);

            // Prepare the channel's write
            OutputStream outputStream = connection.socket().getOutputStream();
            IOUtils.writeLine(outputStream, ""Content-Length: "" + outputStream.getChunkCount());
            outputStream.write(Util.array(""POST / HTTP/1.1\r\n\r\n""));
            outputStream.flush();

            // Read the content of the request (from a blocking-mode
            // socket) and write it to the socket channel.
        	String requestLine = Util.readLine(socket.getInputStream(),
        		4096, true);
            int expectedLineLength = requestLine.length();

            int readSize = connection.socket().getReceiveBufferSize();
            byte[] readBuffer = new byte[readSize];

            if (readSize <= expectedLineLength) {
                // Read only the requested amount
                int bytesToRead = readSize;
                while (bytesToRead > 0) {
                    int bytesRead = connection.socket().getReceive(readBuffer);
                    if (bytesRead > 0)
                         client.getWriteQueue().addLast(
                             new ByteArrayPartial(readBuffer, 0, bytesRead));

                    bytesToRead -= bytesRead;
                }
            }
            else {
                client.getWriteQueue().addLast(new ByteArrayPartial(requestLine.getBytes(), 0, expectedLineLength));
            }

            // Make sure this writes are finished with the read buffer.
            // If the next write is not the last call of this method,
            // they should not use bytes read already.
        	byte buffer[] = readBuffer;
            for(int i = 0; i < readSize; i ++) {
                client.getReadQueue().addFirst(new ByteArrayPartial(buffer, 0"
b4a7e968-be50-4256-a42f-1ea3fa9afddf,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_0Test.java,26.105822324752808,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns the version of the library.
     */
    public static final String getVersion() {
        return VER;
    }
}
","// QuickServer_0Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersion()} method.
*/
class QuickServer_0Test {","// QuickServer_0Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersion()} method.
*/
class QuickServer_0Test {
public static void main(String[] args) {
		}
}
/*v1.4.0
 * Test class with JUnit.
 * Test main() function for JUnit.
*/
public final class QuickServer_Test extends junit.framework.TestCase  {
	
	private QuickServer _server;
	private static final Long TIMEOUT_MS = 200L;
	
	public QuickServer_Test(){				
	}
	
	public void setSystemOutOut(java.io.PrintWriter out){
		System.setOut(new PrintWriter(out, true));
	}
	
	protected void setSystemErrOut(java.io.PrintWriter out){
		System.setErr(new PrintWriter(out, true));
	}
	protected void resetSystemOutOut(java.io.PrintWriter out){
		System.setOut(out);
	}
	
    /**
     * Creates a QuickServer with specified client.
     * @param clientName The name of the client.
     * @throws AppException An exception occuring.
     * @see #setName(String)
     */
	public QuickServer(String clientName) throws AppException {
		super();
		_server = new QuickServer();
		setName(clientName);
	}
	
	@SuppressWarnings(""rawtypes"")
	public void setName(String name){
		QuickServer_Test.this._server.setName(name);
		setSysOutOut(System.out);
		setSysErrOut(System.err);
	}

	/**
	 * Closes the server
	 * @throws Exception An exception occuring.
	 * @see #setName(String)
	 * @see #waitUntilClosed()
	 */
	public void cleanUp() throws Exception {
		java.util.Iterator it = _server.getCurrentActiveClient().getObjects().iterator();
		while(it.hasNext()){
			try {
				_server.closeClient(it.nextObject());
				it.remove();
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}
		_server.closeServers();		
	}

	@Override
	public boolean start() {
		java.util.Iterator c = _server.getClients().iterator();
		while(c.hasNext()){
			try {
				_server.addClient(new"
94495220-72ee-4ebe-8cab-fa9b25b86656,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_1Test.java,25.171612977981567,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns the numerical version of the library.
     *
     * @since 1.2
     */
    public static final float getVersionNo() {
        return getVersionNo(VER);
    }
}
","// QuickServer_1Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.
*/
class QuickServer_1Test {","// QuickServer_1Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.
*/
class QuickServer_1Test {
public static void main(String args[]) {
			runTest(true);
//		}
}
"
b9df551a-5793-4d1f-b0b1-7f2cbf93b619,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_2Test.java,25.10789966583252,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns the new line string used by QuickServer.
     *
     * @since 1.2
     */
    public static String getNewLine() {
        return NEW_LINE;
    }
}
","// QuickServer_2Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getNewLine()} method.
*/
class QuickServer_2Test {","// QuickServer_2Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getNewLine()} method.
*/
class QuickServer_2Test {

	/**
	 * Read the string into memory.
	 *
	 * @since 1.4.8
	 */
	private static int READ_BUFFER_SIZE = 1<<24;
	
	/**
	 * Generate test data.
	 *
	 * @param serverName Name of the server.
	 * @param port Port of the server.
	 * @return
	 */
	private static String [] generateTestData(String serverName,
			int port) {
		
		ArrayList testRecords = new ArrayList();
		String testStr = """";
		//generate a string generated from a class-defined test data
		
		for(int i = 0; i < 10; i++) {
			testStr += (String)testData.get(i);
		}
		for(int j = 0; j < 1; j++) {
			String data = testStr.substring(0, 20);
			String xml = ""<TestResult>\n<TotalCalls>"" + i + ""\n</TotalCalls>\
					<TotalErrors>"" + j + ""\n</TotalErrors>\
					<TotalTime>"" + testStr.substring(
						testStr.length()-10, testStr.length()) + ""\n</TotalTime>\
					</TestResult>\n"";
			testRecords.add(xml);
		}
		
		return new String [testRecords.size()];
	}
	
	/**
	 * Generate test data.
	 *
	 * @since 1.4.8
	 */
	private static String [] testData = generateTestData(""DockerDBTest"", 11211);
}

// echoserver --EchoCommandHandler.xml
"
78b1c691-9148-42aa-8b69-bdc109f4d2cd,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_3Test.java,23.021961450576782,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Initialise and create the service.
     *
     * @param param of the xml configuration file.
     * @since 1.2
     */
    public synchronized boolean initService(Object[] param) {
        serviceError = null;
        try {
            initServer(param);
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_3Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.
*/
class QuickServer_3Test {","// QuickServer_3Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.
*/
class QuickServer_3Test {
/**
		 * @see QuickServer#initService(Object[])
		 */
	public boolean initService(Object[] param) {
		try {
			QuickServerService.initService(param);
		} catch (Exception e) {
			serviceError = e;
			return false;
		}
		return true;
	}
}


//----------------------------
//------------------------------------------------------------------
// QuickServer_2_4_Test.java
//------------------------------------------------------------------
class QuickServer_2_4_Test {

  /**
 * This class executes a very fast test method, and a fast test method with the exception
 * of {@link SocketTimeoutException} in the background.
 * @see TestService
  */
  public static void testService_5() {
    long start; //start time of the test
    start = System.currentTimeMillis();

	Service service;
    try {
      service = new TestService();
    } catch (RuntimeException e) {
      //ignore
    }
    int num = 1;

    while (System.currentTimeMillis() < start+50L) {
      System.out.println(Thread.currentThread().getName()
	+ "": Executing test with "" + num + "" times"");
      try {
	      Thread.sleep(1000);
	} catch (InterruptedException e) {}
      num ++;
    }

  } // end of main program

	public static void main(String args[]) {
	  try {
 	    System.exit(new QuickServer_2_4_Test().testService_5());
	  } catch (Exception e) {
		System.err.println(e.getMessage());
		e.printStackTrace();
		System.exit(1);
	  }
  } // end of main
} // end of class QuickServer_2_4_Test
"
c1756ce5-e2bc-4de3-9f00-0963d56b535c,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_4Test.java,22.72868776321411,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Initialise and create the service.
     *
     * @param qsConfig QuickServerConfig object.
     * @since 1.4.6
     */
    public synchronized boolean initService(QuickServerConfig qsConfig) {
        serviceError = null;
        try {
            initServer(qsConfig);
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_4Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.
*/
class QuickServer_4Test {","// QuickServer_4Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.
*/
class QuickServer_4Test {
static QuickServer instance;
		static ArrayList<ClientConfig> configList;
		static ArrayList<QuickServerPort> portsList;
	protected void setUp() throws Exception {
		if(instance == null) {
			instance = new QuickServer();
			//instantiate the server
			instance.instance.initService();
			//initialize the config list
			configList = new ArrayList<ClientConfig>();
			//initialize the ports list
			portsList = new ArrayList<QuickServerPort>();
		}
	}
	protected void tearDown() throws Exception {
		instance.instances.clear();
		configList = null;
		portsList = null;
		instance = null;
	}
	@Test
	public void testInitService() {
		setUp();
		initServer(""QuickServerConfig"");
	}
	@SuppressWarnings(""unchecked"")
	protected <T> void testClientConfig(T in, String inIp){
		String cfgPath = ""config/configFile"";
		String inFile = ""config/data_test"";
		File cfg = new File(cfgPath);
		assertNotNull(""File "" + cfgPath + "" not found"", cfg);
		File inFile2 = new File(inFile);
		assertNotNull(""File "" + inFile + "" not found"", inFile);
		try {
			Configuration newConf = null;
			FileInputStream fis = new FileInputStream(inFile);
			fis.close();
			InputStream is = new FileInputStream(in);
			BufferedInputStream br = new BufferedInputStream(is);
			newConf = org.quickserver.config.Configuration.read(br, cfg);
			br.close();
			fis = new FileInputStream(inFile2);
			FileOutputStream fos = new FileOutputStream(inFile);
			fos.write(cfg.toCharArray());
			fos.close();
			
			is = new FileInputStream(inIp);
			String[] confs = IpAddress.getConfigs();
			"
0f5bd7e1-bdaf-44a5-a8e6-effa96bf2b42,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_5Test.java,22.78932785987854,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Start the service.
     *
     * @return true if serivce was stopped from Running state.
     * @since 1.2
     */
    public boolean startService() {
        serviceError = null;
        if (getServiceState() == Service.RUNNING)
            return false;
        try {
            startServer();
        } catch (AppException e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_5Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#startService()} method.
*/
class QuickServer_5Test {","// QuickServer_5Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#startService()} method.
*/
class QuickServer_5Test {
private ThreadLocal<Socket> socketL = null;
		private ThreadLocal<Socket> serverSocketL = null;
		private Thread testThreadL = null;
		private static Thread mainThreadL = null;
		private static String SERVERNAME = ""EchoServer_5Test"";
		private static String SERVERNAME2 = ""EchoServer_5Test2"";
		private static String SERVERNAME3 = ""EchoServer_5Test3"";
		private static String SERVERNAME4 = ""EchoServer_5Test4"";
		private static String SERVERNAME5 = ""EchoServer_5Test5"";
		private Map<String, String> poolMap = null;
		private Map<String, Map<String, String>> dataModeMap = null;
		private int poolSize = 5;
		private PoolableConnectionFactory factoryL = null;
		private Server serverL;
		private Socket s;
		private PrintStream p;
		private boolean initializedL = false;
        
		/**
		 * Initialization method of {@link QuickServer}
		 *
		 * @param host The host
		 * @param port The port
		 * @param protocol The protocol
		 */
		@Test
		public void initialization(String host, int port, String protocol) {
		    p = new PrintStream(new FileOutputStream(""Echo_Server_init/EchoServer_5Test.sql""));
		}

	



        public void setUp() {
	    serverName = SERVERNAME;
	  init();
	}

	public void run() {
	    super.run();
	    try {
	      initialize();
	    } catch (Exception e) {
	      e.printStackTrace();
	      try {
	        serverL = new DefaultServer();
	      } catch (Exception ex) {
	        ex.printStackTrace();
		}
	    }
	    try {
	    mainThreadL = Thread.currentThread();
	    } catch (Exception e) {
	    }
	}


    /**
     * Close the server,"
62dda00d-d5a3-4a5e-8d6e-2e9f4b193c8f,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_6Test.java,21.416685104370117,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Stop the service.
     *
     * @return true if serivce was stopped from Running state.
     * @since 1.2
     */
    public boolean stopService() {
        serviceError = null;
        if (getServiceState() == Service.STOPPED)
            return false;
        try {
            stopServer();
            clearAllPools();
        } catch (AppException e) {
            serviceError = e;
            return false;
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_6Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#stopService()} method.
*/
class QuickServer_6Test {","// QuickServer_6Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#stopService()} method.
*/
class QuickServer_6Test {

    /**
     * Test case for {@link QuickServer#stopService()}, which calls
     * {@link #stopServer()} and deletes all the
     * {@link QuickServer#clientPool}s contained within QuickServer.
     */
    @Test
    public void testStopService() {
        
        try (ServerSocket ss = new ServerSocket(0)) {
            ss.setReuseAddress(true);
            assertTrue(ss.isBound());
            
            quickserver = new QuickServer(ss.getLocalPort());
            assertTrue(!ss.isBound());
            assertTrue(quickserver.socket!= ss.getLocalPort());
            
            final SimpleServer ssImpl = new SimpleServer();
            ssImpl.onError = e -> {};
            ssImpl.bindAndStart();
            
            readyServer = ssImpl.getServer();
            
            try {
                clearAllPools();
                ssImpl.stopServer();
                assertTrue(""Failed to stop"", ssImpl.socket.isBound());
                
            } catch (AppException e) {
                e.printStackTrace();
                fail(""Cannot stop server."");
            }
            
            assertTrue((readyServer!= null));
            
            readyServer.stop();
            ssImpl.stopServer();
            assertTrue(""server has been stopped"", ssImpl.socket.isBound());
            
        }  catch (Throwable e) {
            e.printStackTrace();
            fail(""Exception running tests"", e);
        }
        
    }
    
    /*
     * This tests the client handling.
     */
    @Test
	public void testClientHandling() throws IOException, InterruptedException, ClassNotFoundException {
		
        try (ServerSocket ss = new ServerSocket(0)) {
			ss.setReuseAddress(true);
			assertTrue(!ss.isBound());
			
			clientServer = new ClientServer();
			"
c40e0f7d-2d65-45ee-8e56-cccac9664ae8,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_7Test.java,20.785451650619507,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Suspends the service.
     *
     * @return true if service was suspended from resumed state.
     * @since 1.2
     */
    public boolean suspendService() {
        serviceError = null;
        if (getServiceState() == Service.RUNNING) {
            suspendMaxConnection = maxConnection;
            suspendMaxConnectionMsg = maxConnectionMsg;
            maxConnection = 0;
            maxConnectionMsg = ""Service is suspended."";
            setServiceState(Service.SUSPENDED);
            logger.log(Level.INFO, ""Service {0} is suspended."", getName());
            return true;
        }
        return false;
    }
}
","// QuickServer_7Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#suspendService()} method.
*/
class QuickServer_7Test {","// QuickServer_7Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#suspendService()} method.
*/
class QuickServer_7Test {

	{ // init
		
		// v1.1
		
		/**
		* Test of {@link QuickServer#suspendService()} method, of class com.sun.jini.test.qa.util.TestServerUtil.
		*/
		
		String name = ""SuspendService"";
		String expectedErrorMessage = ""/home/susame@suntanshaw.com/software/test-framework/TestServerUtil/SuspendServiceTest_Sig"";
		System.out.println(""#TEST: ""+name+"" -- ""+expectedErrorMessage);
		try {
			String testMessage = name + "" - "" + name + "" - SUSPEND"";
			
			System.out.println(""#TEST: ""+testMessage);
			String message = System.out.println(System.out.println(testMessage)+"" "");
			
			if (testMessage == expectedErrorMessage) {
				System.out.println(""Exception was expected."");
				System.out.println(""  Error message = ""+(System.getProperty(""Exception.error.stacktrace"")!= null? Integer.parseInt(System.getProperty(""Exception.error.stacktrace"")) : 0));
				System.out.println();
			} else {
				assertTrue(testMessage.indexOf(expectedErrorMessage)!= -1);
			}
			
		} catch (Exception e) {
			fail(e.toString());
		}
		
	}
	/**
	* Test of {@link QuickServer#suspendService()} method, of class org.quickserver.util.pool.ThreadPoolUtil.
	*/
	
	public void testSuspendService() {
		// TODO: to be implemented.
	}

}

"
20ce877c-0373-4187-bb8b-d163b0595047,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_8Test.java,21.6377911567688,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Resume the service.
     *
     * @return true if service was resumed from suspended state.
     * @since 1.2
     */
    public boolean resumeService() {
        serviceError = null;
        if (getServiceState() == Service.SUSPENDED) {
            maxConnection = suspendMaxConnection;
            maxConnectionMsg = suspendMaxConnectionMsg;
            setServiceState(Service.RUNNING);
            logger.log(Level.INFO, ""Service {0} resumed."", getName());
            return true;
        }
        return false;
    }
}
","// QuickServer_8Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#resumeService()} method.
*/
class QuickServer_8Test {","// QuickServer_8Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#resumeService()} method.
*/
class QuickServer_8Test {
public static final String RESULT_SUCCESS = ""success"";
//		public static final String RESULT_FAILED = ""failed"";
//		public static final String RESULT_ERROR = ""error"";
//		public static final String RESULT_ERROR_STRING = ""error"";
//		public static final String RESULT_TIMEDOUT = ""timeout"";

    String threadName;
    String maxConnection;
    String maxConnectionMsgt;
    String maxConnectionMsg;
	  String state;
	  String serviceError;
	  static final Logger logger = LogManager.getLogger();
	 int clientCount = 1;
//	 boolean stopThread = false;

    /**
	 * Constructor.
	* @param serviceState can be one of {@link Service#SUSPENDED}, {@link Service#RUNNING} or {@link Service#COMPLETED}.
	 * @since 1.2.3
	 */
	 /**
	  * Constructors of {@link QuickServer_8Test}.
	  */
	public QuickServer_8Test() {
		threadName = ""Thread-"" + Thread.currentThread().getName();

	}

	/**
	 * Initialize the {@link QuickServer}, with <code>thread</code> and <code>maxIdleConns</code> parameters.
	 * 
	 * @param thread the {@link Thread} created by Threads.
	 * @param maxIdleConns number of idle connections allowed at start.
	 * @since 1.2
	 */
	public void prepareTest(Thread thread, int maxIdleConns) throws Exception {
		threadCount = 1;
		serverName = ""jtb-server"";
//		this.setPort(40000);
//		stopThread = true;
		maxConnection = (maxIdleConns > 1)? ""auto"" : ""manual"";
//		maxConnectionMsgt = ""/dev/null"";
//		setState(Service.RUNNING"
99c7c7e6-bbae-45e5-9303-ca37b216ee51,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_9Test.java,22.841058492660522,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Information about the service.
     *
     * @since 1.2
     */
    public String info() {
        serviceError = null;
        StringBuilder buf = new StringBuilder();
        buf.append(getName()).append(""\n"");
        buf.append(getBindAddr().getHostAddress()).append("" "");
        buf.append(getPort()).append(""\n"");
        return buf.toString();
    }
}
","// QuickServer_9Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#info()} method.
*/
class QuickServer_9Test {","// QuickServer_9Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#info()} method.
*/
class QuickServer_9Test {
/**
		* @since 1.2
		*/
	public static class ClientBinaryHandler extends ClientHandler<BinaryData> {
		/**
		* @since 1.2
		*/
		public void handleData(ClientEvent event) {
			byte[] buffer = event.getBuffer();
			sendCommand(buffer, 1, buffer.length);
		}
	}
	
	/**
	*
	* @since 1.2
	*/
	public static class ClientCommandHandler implements ClientEventHandler<QuickCommand<BinaryData>>, ClientObjectHandler {
		public static final ClientCommandHandler instance = new ClientCommandHandler();
		private int sendLen;
		private int timeout;
		private ArrayList listener = new ArrayList();

		/**
		* Constructor to be inherited by sub classes.
		*/
		public ClientCommandHandler() {
		}

		/**
		*
		* @since 1.2
		*/
		public QuickCommand<BinaryData> getPayload() {
			return new QuickCommand<BinaryData>(false, false);
		}

		/**
		*
		* @since 1.2
		*/
		public void setTimeout(int timeout) {
			this.timeout = timeout;
		}

		/**
		* This method is called by the service after client connection.
		*
		* @since 1.2
		*/
		public void afterConnection(ClientEvent event) throws AppException {
			quickServiceError = null;
			sendData();
		}

		/**
		*
		* @since 1.2
		*/
		public void beforeServerClose() {
		}

		/**
		*
		* @since 1.2
		*/
		public ClientMessage<BinaryData> getClientMessage() {
			return null;
		}

		/**
		*
		* @since 1.2
		*/
		public synchronized void send(BinaryData buffer, int ack) {
			sendLen += buffer.length;
			if (sendLen > timeout) {
				throw new AppException(""ClientHandler timeout""   + sendLen + "" > 0!!"");"
8999396e-7423-45cb-a01e-133286be1207,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_10Test.java,11.782118082046509,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns an iterator containing all the
     * {@link org.quickserver.net.server.ClientHandler} that
     * are currently handling clients.
     * It is recommended not to change the collection under an iterator.
     *
     * It is imperative that the user manually synchronize on the returned collection
     * when iterating over it:
     * <code><pre>
     *    Eg:
     *
     * 	ClientData foundClientData = null;
     * 	Object syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();
     * 	synchronized(syncObj) {
     * 		Iterator iterator = quickserver.findAllClient();
     * 		while(iterator.hasNext()) {
     * 			foundClientHandler = (ClientHandler) iterator.next();
     * 			....
     * 		}
     * 	}
     *
     * 	//OR
     *
     * 	ClientData foundClientData = null;
     * 	ClientIdentifier clientIdentifier = quickserver.getClientIdentifier();
     * 	synchronized(clientIdentifier.getObjectToSynchronize()) {
     * 		Iterator iterator = clientIdentifier.findAllClient();
     * 		while(iterator.hasNext()) {
     * 			foundClientHandler = (ClientHandler) iterator.next();
     * 			....
     * 		}
     * 	}
     *    </code></pre>
     *
     * @since 1.3.1
     */
    public Iterator findAllClient() {
        return clientIdentifier.findAllClient();
    }
}
","// QuickServer_10Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#findAllClient()} method.
*/
class QuickServer_10Test {","// QuickServer_10Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#findAllClient()} method.
*/
class QuickServer_10Test {
/**
		* A {@link QuickServer} created with {@link QuickServerBuilder#using(org.quickserver.util.pool.PoolPool)}
		*. It represents some test client.
		*
		* @since Version 1.5.0
		* @version 0.50.1
		* @author <a href=""http://www.quickserver.org"">Paulo Villegas (http://www.quickserver.org)</a>
		* @version 1.3.1
		* @author <a href=""http://www.quickserver.org"">Paulo Villegas</a>
		* @version 1.4.8
		*/
		public static class TestServer {
				/**
				* A method to test {@link QuickServer} is now finished.
				* @since Version 1.5.0
				* @version 1.5"
6e8a07f7-77f2-4626-aee9-75251b85ee33,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_11Test.java,18.131243467330933,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns the <code>SSLContext</code> object that implements the specified
     * secure socket protocol from Secure configuring.
     *
     * @see #loadSSLContext
     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.
     * @throws IOException
     * @throws NoSuchAlgorithmException
     * @throws KeyManagementException
     * @since 1.4.0
     */
    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        if (protocol != null && secureStoreManager != null) {
            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);
            _sslc.init(km, tm, null);
            return _sslc;
        }
        return sslc;
    }
}
","// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {","// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {
// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns the <code>SSLContext</code> object that implements the specified
     * secure socket protocol from Secure configuring.
     *
     * @see #loadSSLContext
     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.
     * @throws IOException
     * @throws NoSuchAlgorithmException
     * @throws KeyManagementException
     * @since 1.4.0
     */
    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        if (protocol!= null && secureStoreManager!= null) {
            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);
            _sslc.init(km, tm, null);
            return _sslc;
        }
        return sslc;
    }
}

// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {
		private Server s;

    QuickServer_11Test(){
		try {
			s = new Server();
		} catch (Exception e) {
			fail(e.getMessage());
		}
    }

    public static void main(String[] args) {
        System.exit(new QuickServer_11Test().test(args) );
    }
    public void test() throws IOException, NoSuchAlgorithmException, KeyManagementException {
        String hostname = ""127.0.0.1"";
        ServerSSLContext sc = s.getSSLContext(null);
        if(sc.getWantClientAuth() && sc.getWantClientCert()) {
           try { sc.setKeyManager(km); sc.setSSLContext(sslc); }
           catch (Exception e) {
               e.printStackTrace();
               fail(e.getMessage());
           }
        }
        //Test:
        System.out.println(""\n\nTesting SSL connection via QuickServer."");
        boolean ret = false;
        try {
            s.getSocket(hostname, 5989);
            if(sc.getWantClientAuth() && sc.getWantClientCert()) {
                s.getServerSocket(0);
            } else {
                fail(""Test should be successful"");
            }
        } catch (BindException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ConnectException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (SocketTimeoutException e) {"
4725aa0a-20bf-424f-8f01-b1606cb070b0,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_12Test.java,19.999046802520752,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns a SSLSocketFactory object to be used for creating SSLSockets.
     *
     * @see #setSecure
     * @param protocol the standard name of the requested protocol. If
     * <code>null</code> will use the protocol set in secure configuration
     * of the server.
     * @throws IOException
     * @throws NoSuchAlgorithmException
     * @throws KeyManagementException
     * @since 1.4.0
     */
    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        return secureStoreManager.getSocketFactory(getSSLContext(protocol));
    }
}
","// QuickServer_12Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.
*/
class QuickServer_12Test {","// QuickServer_12Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.
*/
class QuickServer_12Test {

    private static int PORT = 5343;
	  private static SSLContext ctx;
	  private static boolean secure;

	  /**
	  * @see #QuickServer_12Test()
	  */
	  public static void main(String args[]) {
	    String protocol = ""SSLv3"", sslprotocol = ""SSLv3"", sniHost = ""127.0.0.1"", sniPort = 443, sniProtocols = ""ALL"", keyprotocol = ""ALL"", keyprotocols = ""ALL"", cipherSuites = ""ALL"", cipherSuites = ""ALL"",
                        keyStoreLocation = null, keyStorePass = null, truststoreLocation = null, trustStorePass = null,

			    certAlias = null, csrAlias = null, dnsAlias = null, ipAlias = null, uidAlias = null,
			    portStart = null, portEnd = null, portString = null;
	
		
		try {
			Class.forName(""com.sun.net.ssl.internal.ssl"");
			
			if (null!=(SSLContext ctx = SSLContext.getInstance(""SSL""))){
				ctx.init(null, null, null);
				secure = true;
			}

			if (!secure){
				System.out.println(""No Server SSL is enabled"");
				return;
			}
			else
				System.out.println(""SSLEnabled "");
					
		}
		catch(Throwable e) {
			e.printStackTrace();
			return;
		}
				
	  try {
             String certAliasOrNull = null;
			
			if (null!= certAlias || null == sslProtocol)
				certAliasOrNull = caCertAlias;
                  
            if (null!= csrAlias"
2dcc83d5-ec14-4e76-a1c2-1174d2d8a95c,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_13Test.java,24.773098468780518,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    /**
     * Returns PID of the JVM
     *
     * @return PID of the JVM
     * @since 1.4.8
     */
    public static String getPID() {
        return pid;
    }
}
","// QuickServer_13Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getPID()} method.
*/
class QuickServer_13Test {","// QuickServer_13Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getPID()} method.
*/
class QuickServer_13Test {

    static String pid="""";
    static {
        try {
            pid = ManagementFactory.getRuntimeMXBean().getName().split(""@"")[0];
        } catch(Exception e) {
          System.out.println(""no pid information"");
        }
    }
    public static void main(String args[]) {
        try {
            //getPID(); //will check here if PID is a valid string
            
            System.out.println(""pid is : 	""+pid);
        } catch (IOException e) {
            System.out.println(""Test failed!"");
            e.printStackTrace();
        }
    }
}
"
58acceb8-07e1-43e7-8a4c-35fb7e7b17ec,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/qsadmin/QSAdminAPI.java,57.555848598480225,stop,"// QSAdminAPI.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;

/**
 * QSAdminAPI class to communicate to QsAdmin from java applications.
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * 	QSAdminAPI qsAdminApi = new QSAdminAPI(""127.0.0.1"", 9080);
 * 	if(qsAdminApi.logon()) {
 * 		System.out.println(""Logged in"");
 * 		String info = qsAdminApi.sendCommand(""info server"");
 * 		System.out.println(""Info on Server :\n""+info);
 * 		qsAdminApi.logoff();
 * 	} else {
 * 		System.out.println(""Bad Login"");
 * 		qsAdminApi.close();
 * 	}
 * </pre></BLOCKQUOTE></code></p>
 *
 * @see QSAdminServer
 * @since 1.4
 * @author Akshathkumar Shetty
 */
public class QSAdminAPI {

    /**
     * Will attempt to connect and logon to the remote QsAdminServer.
     */
    public boolean logon() throws IOException {
        return logon(username, password);
    }
}
","// QSAdminAPITest.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QSAdminAPI}.
* It contains one unit test case for the {@link QSAdminAPI#logon()} method.
*/
class QSAdminAPITest {","// QSAdminAPITest.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QSAdminAPI}.
* It contains one unit test case for the {@link QSAdminAPI#logon()} method.
*/
class QSAdminAPITest {
private String username = ""testusername"";
		private String password = ""testpassword"";
		private static Socket s = null;
        private static PrintStream os = null;
        private static Connection conn;
		private TestBase tester;
		public QSAdminAPITest() throws IOException {
			if( s==null ) {
				s = ServerSocketFactory.getDefault().createServerSocket(9080);
				os= s.getOutputStream();
			}

			if( conn==null ) {
				conn = s.accept();
				os.print(""Server connected\r\n"");
			}

			tester = new TestBase();
		}

	/**
	* Tests the Logon method, that will authenticate the user to the remote QsAdmin server with their password.
	*/
	@Test
	public void test() throws IOException, InterruptedException, ConnectException {
		new QSAdminAPITest().onConnect();
	}

	/**
	* Tests the SendCommand method, that will send a command to the remote QsAdminServer.
	*/
	@Test
	public void testSend() throws Exception {
		new QSAdminAPITest().sendCommand(""info server"");
	}

	/**
	* Tests logging in to the remote QsAdminServer.
	*/
	@Test
	public void testLogon() throws ConnectException, IOException, LoginException, InterruptedException {
		new QSAdminAPITest().logon();
	}

	/**
	* Tests closing the connection to QsAdminServer.
	*/
	@Test
	public void testCloseConnection() throws InterruptedException, LoginException {
		new QSAdminAPITest().closeConnection();
	}

	private void onConnect() {
		tester.onOpen();
		tester.onConnect();
	}

	private void onConnected() {
		assertNotNull(tester.outputStream);
		tester.onClose();
	}


	private String sendCommand(String command) {
		String res = tester.outputStream.toString();
		tester.outputStream.close();
		return res;
	}
}
"
54f6e8bc-1a2c-4fc4-8a90-932616481a89,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_0Test.java,30.14170479774475,stop,"// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    /**
     * @param prompt The prompt to display to the user.
     * @return The password as entered by the user.
     */
    public static final char[] getPassword(String prompt) throws IOException {
        return getPassword(System.in, prompt);
    }
}
","// PasswordField_0Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.
*/
class PasswordField_0Test {","// PasswordField_0Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.
*/
class PasswordField_0Test {
private String prompt;
		private String[] passwords;
		private BufferedReader reader;

		PasswordField_0Test(String prompt, String password1, String password2) throws IOException {
			this.prompt = prompt;
			this.passwords = new String[]{password1, password2};
		}

		@Test
    	public void testGetPassword_1() throws IOException {
        		assertArrayEquals(this.passwords, getPassword(this.prompt));
        	}

		@Test
    	public void testGetPassword_2() throws IOException {
        		assertArrayEquals(0, getPassword(this.prompt).length);
        	}

		@Test
    	public void testGetPassword_3() throws IOException {
        		assertArrayEquals(this.passwords, getPassword(this.prompt));
        	}

		@Test
    	public void testGetPassword_4() throws IOException {
        		passwords = new String[]{0};
        		try {
        			getPassword(this.prompt);
        			unexpected();
        		} catch (IOException e) {
        			assertEquals(""The password cannot be empty for the field setter."", e.getMessage());
        		}
        	}
    }
"
3b96ea89-b93d-415f-8276-b8eb73779cdb,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_1Test.java,45.34780740737915,length,"// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    /**
     * @param in input stream to be used (e.g. System.in)
     * @param prompt The prompt to display to the user.
     * @return The password as entered by the user.
     */
    public static final char[] getPassword(InputStream in, String prompt) throws IOException {
        MaskingThread maskingthread = new MaskingThread(prompt);
        Thread thread = new Thread(maskingthread);
        thread.start();
        char[] lineBuffer;
        char[] buf;
        int i;
        buf = lineBuffer = new char[128];
        int room = buf.length;
        int offset = 0;
        int c;
        loop: while (true) {
            c = in.read();
            switch(c) {
                case -1:
                case '\n':
                    break loop;
                case '\r':
                    int c2 = in.read();
                    if ((c2 != '\n') && (c2 != -1)) {
                        if (!(in instanceof PushbackInputStream)) {
                            in = new PushbackInputStream(in);
                        }
                        ((PushbackInputStream) in).unread(c2);
                    } else {
                        break loop;
                    }
                default:
                    if (--room < 0) {
                        buf = new char[offset + 128];
                        room = buf.length - offset - 1;
                        System.arraycopy(lineBuffer, 0, buf, 0, offset);
                        Arrays.fill(lineBuffer, ' ');
                        lineBuffer = buf;
                    }
                    buf[offset++] = (char) c;
                    break;
            }
        }
        maskingthread.stopMasking();
        System.out.print(""\010"");
        //Code to clear doskey on win nt/2000 - Alt+F7
        String os = System.getProperty(""os.name"");
        if (os != null && os.toLowerCase().startsWith(""windows"")) {
            try {
                java.awt.Robot robot = new java.awt.Robot();
                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);
                robot.keyPress(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);
            } catch (Exception ignore) {
                logger.warning(""Could not clears command history: "" + ignore);
            }
        }
        if (offset == 0) {
            return null;
        }
        char[] ret = new char[offset];
        System.arraycopy(buf, 0, ret, 0, offset);
        Arrays.fill(buf, ' ');
        return ret;
    }
}
","// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {","// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {
// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    /**
     * @param in input stream to be used (e.g. System.in)
     * @param prompt The prompt to display to the user.
     * @return The password as entered by the user.
     */
    public static final char[] getPassword(InputStream in, String prompt) throws IOException {
        MaskingThread maskingthread = new MaskingThread(prompt);
        Thread thread = new Thread(maskingthread);
        thread.start();
        char[] lineBuffer;
        char[] buf;
        int i;
        buf = lineBuffer = new char[128];
        int room = buf.length;
        int offset = 0;
        int c;
        loop: while (true) {
            c = in.read();
            switch(c) {
                case -1:
                case '\n':
                    break loop;
                case '\r':
                    int c2 = in.read();
                    if ((c2!= '\n') && (c2!= -1)) {
                        if (!(in instanceof PushbackInputStream)) {
                            in = new PushbackInputStream(in);
                        }
                        ((PushbackInputStream) in).unread(c2);
                    } else {
                        break loop;
                    }
                default:
                    if (--room < 0) {
                        buf = new char[offset + 128];
                        room = buf.length - offset - 1;
                        System.arraycopy(lineBuffer, 0, buf, 0, offset);
                        Arrays.fill(lineBuffer,'');
                        lineBuffer = buf;
                    }
                    buf[offset++] = (char) c;
                    break;
            }
        }
        maskingthread.stopMasking();
        System.out.print(""\010"");
        //Code to clear doskey on win nt/2000 - Alt+F7
        String os = System.getProperty(""os.name"");
        if (os!= null && os.toLowerCase().startsWith(""windows"")) {
            try {
                java.awt.Robot robot = new java.awt.Robot();
                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);
                robot.keyPress(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);
            } catch (Exception ignore) {
                logger.warning(""Could not clears command history: "" + ignore);
            }
        }
        if (offset == 0) {
            return null;
        }
        char[] ret = new char[offset];
        System.arraycopy(buf, 0, ret, 0, offset);
        Arrays.fill(buf,'');
        return ret;
    }
}

// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {
		private static final String DEFAULT_PASSWD = """";
		private static final Logger logger = Logger.getLogger(PasswordField_1Test.class.getName());
		private static String defaultPassword;
		
		@Test
		public void test() {
			password = DEFAULT_PASSWD;
			password2 = new PasswordField(password).getPassword(System.in, ""Password must be more or less \n1.2\n<2\n<3"");
//			password = DEFAULT_PASSWD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password = DEFAULT_PASSWD; 
//			password = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;
			password2 = PASSESSION_CONSTANT_USER_PASSWORD;

			DefaultInputStreamReader in = new DefaultInputStreamReader"
72002d63-e850-4845-a44b-3afed23fb624,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/ByteBufferInputStream.java,54.80260109901428,stop,"// ByteBufferInputStream.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;

/**
 * This is an InputStream constructed from list of ByteBuffers. This is
 * used in non-blocking mode.
 *
 * @since 1.4.5
 * @author Akshathkumar Shetty
 */
public class ByteBufferInputStream extends InputStream {

    /**
     * Reads a line of String if ready. If line is not yet ready this will
     * block. To find out if the line is ready use <code>isLineReady()</code>
     *
     * @see #isLineReady()
     */
    public synchronized String readLine() throws IOException {
        if (index == -1) {
            while (isLineReady() == false) {
                try {
                    wait();
                } catch (InterruptedException ie) {
                    logger.warning(""InterruptedException: "" + ie);
                    return null;
                }
            }
        }
        int stringsLength = strings.length();
        Assertion.affirm(index <= stringsLength);
        String data = strings.substring(start, index);
        if (pos < stringsLength)
            strings.delete(0, pos);
        else
            strings.setLength(0);
        start = 0;
        pos = start;
        index = -1;
        return data;
    }
}
","// ByteBufferInputStreamTest.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByteBufferInputStream}.
* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.
*/
class ByteBufferInputStreamTest {","// ByteBufferInputStreamTest.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByteBufferInputStream}.
* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.
*/
class ByteBufferInputStreamTest {
/**
		 *
		 */
	private static final Logger logger = Logger.getLogger(
_JUNIT_NUNHASHC_Test_jUnitTest_class);
     public final static ILogger junitLogger =
             Logger.getLogger(""java.util.logging.junit.nunHashing"");
     public final static ILogger junitLogger =
             Logger.getLogger(""java.util.logging.junit"");

    /**
     * Constructor of test class.
     *
     * @param testName test specific class name
     * @param javaProject java application project name
     */
    public ByteBufferInputStreamTest(String testName,
                                      String javaProject)
    {
        super();
    }

    /**
    * {@inheritDoc}
    */
    public final Object setUp() throws Exception {
	logger = Logger.getLogger(junitLogger.getName());
        junitLogger.info(testName);
        return super.setUp();
    }

    /**
    * {@inheritDoc}
    */
    public final Object tearDown() throws Exception {
        junitLogger.info(testName);
        return super.tearDown();
    }
}
"
703575bc-57d9-4a5b-bb86-70c16f27bd67,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/ClassUtil.java,57.36143517494202,length,"// ClassUtil.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;

/**
 * A utility class to load class.
 *
 * @author Akshathkumar Shetty
 * @since 1.3.2
 */
public class ClassUtil {

    /**
     * Returns the ClassLoader to all the jars present in the
     * dir passed has first parameter.
     *
     * @param jarDir path to the directory containing the jars
     */
    public static ClassLoader getClassLoaderFromJars(String jarDir) throws Exception {
        logger.fine(""Getting ClassLoader for jars in "" + jarDir);
        File file = new File(jarDir);
        ArrayList list = new ArrayList();
        File[] jars = file.listFiles(new JarFileList());
        for (int j = 0; j < jars.length; j++) {
            list.add(jars[j].toURL());
        }
        Object[] array = list.toArray();
        URL[] jarurl = new URL[array.length];
        for (int i = 0; i < array.length; i++) {
            jarurl[i] = (URL) array[i];
        }
        URLClassLoader classLoader = URLClassLoader.newInstance(jarurl);
        return classLoader;
    }
}
","// ClassUtilTest.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassUtil}.
* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.
*/
class ClassUtilTest {","// ClassUtilTest.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassUtil}.
* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.
*/
class ClassUtilTest {

	ClassUtilTest() {}

	@Test
    public void testGetClassLoaderFromJar() throws Exception {
        try {
            ClassUtil.getClassLoaderFromJars(""class://org.quickserver.util.ClassUtil.jar"");
            fail(""ClassUtil cannot load a jar from classpath as a parent jar."");
        } catch (URISyntaxException e) {
            testFailure(""getClassLoaderFromJar"");
        } catch (MalformedURLException e) {
            testFailure(""getClassLoaderFromJar"");
        }

		try {
            JarFile parentJar = new JarFile(""class://org.quickserver.util.TestSuite.jar"");
	        ClassLoader cl = ClassUtil.getClassLoaderFromJars(parentJar.getName());
	        assertEquals(cl, ClassUtil.getClassLoaderFromJars(""class://org.quickserver.util.TestSuite.jar""));
	        logger.warning(""Expecting same Clazzloader for jars, got "" + cl);
        } catch (IOException e) {
            testFailure(""getClassLoaderFromJar"");
	    }
	}

    /**
     * Failure.
     * It cannot access the class from classloader.getClass(),
     * because it has been created by this classloader,
     * it does not contain the java.lang.ClassLoader
     */
    @Test
    public void testGetClassLoaderFromJars() throws IOException {
	File parentJar = File.createTempFile(""jar"", ""txt"");
	parentJar.delete();
	parentJar.getParentFile().delete();
	try {
	        ClassLoader cl = ClassUtil.getClassLoaderFromJars(parentJar.getName());
	        assertEquals(cl, ClassUtil.getClassLoaderFromJars(""class://org.quickserver.util.TestSuite.jar""));
	        } catch(IOException e) {
	        logger.warning(e.getMessage());
            }
	} catch (IOException e) {
                error(""Error while creating fake jar for getClassLoaderFromJars in testGetClassLoaderFromJars"");
	}        }

    @Test
    public void testGetClassLoaderFromJarURL() throws Exception {
	ClassLoader cl = ClassUtil.getClassLoaderFromJars(""class://org.quickserver.util.class/org.quickserver.util.URL.class"");
		assertEquals(cl, ClassUtil.URLClassLoader.getSystemClassLoader());
			}

    private void error(String message) throws Exception {
        System.err.println(""ERROR: "" + message);
    }
}


/**
* This class is an implementation of a class to test the class loaders.
* Only the class should have to have a constructor, 
* since {@link ClassUtil#getClassLoaderFromJars()}
* will be used to call the method.
*
* @since 1.0
*/
class ClassUtilTest {

	private ArrayList classes;
	public ClassUtilTest() {
	classes = new ArrayList();
	}

	public void dumpClass(String classname, Class clazz, boolean skipSafepoints) throws IOException {
		if(skipSafepoints) {
			System.err.println(""\n\n"" + classname);
			return;
		}
        //dump the class to string.
		System.out.print(""\n\n"" + classname);
        if(clazz == null) {
            System.err.println("""");
        } else {
            classes.add(clazz);
        }
	}

	public void dumpClassWithName(String classname, Class classForTest) throws IOException {
		//This should never happen.
		assertTrue( classname + "" should be a class"", classForTest!= null);
		DumpUtil.dumpFile(""classpath"", classForTest.getClassLoader().getParent()
					+ ""/"" + classForTest.getName());
	}

	private void dumpAllClasses(Boolean skipSafepoints) {
		for (int i = 0; i < classes.size(); i++) {
			Class aClass = classes.get(i);
      classes.remove(i);
			files.add(""classpath"" + File.pathSeparatorChar + aClass.getName());
			try {
				aClass.getClassLoader().loadClass(aClass.getName());
			} catch (ClassNotFoundException cnfe) {
			// Do nothing
			}
        if(!skipSafepoints) {

			}
			}
	}

	private void dumpFile(String file, String path, Boolean skipSafepoints) throws IOException {
		if(skipSafepoints) {
			System.err.println("""");
			return;
		}
		files.add(""file/path"" + File.pathSeparatorChar + path + "";"" + file.replaceFirst(""file://"", """"));
	}
	private void error(String message) throws IOException {
		System.err.println(message);
	}

	public void doGetClassLoaderFromJars(String files) throws Exception {
		classes = new ArrayList();
		classes.add(Files.class);
		classes.add(File.class);
		classes.add(URL.class);
		dumpAllClasses(true);
		dumpFile(""classpath"" + File.separatorChar + ""org.quickserver.test.ClassUtilTest.jar"", files.toString(), true);
		StringBuffer clsBuf = new StringBuffer();
//	        clsBuf.append(""  classorg.quickserver.test.ClassUtilTest\n"");
	        ClazzLoader loader = ClassUtil.getClassLoaderFromJars(""classpath"" + File.separatorChar
            		        + ""org.quickserver.test.ClassUtilTest.jar"");
	        classes.remove(loader);
	        classes.add(loader);
		dumpAllClasses(false);
		classes.add(ArrayList.class);
		classes.add(String.class);
		dumpAllClasses(false);
		classes.add(Array.class);
        classes.add(ClassWithException.class);
        classes.add(ClassWithoutThrowableElt.class);
        classes.add(FileTest.class);
		classes.add(ClassTestWithThrowable.class);
		classes.add(ClassWithoutThrowableEltTest.class);"
b5dac44c-a5bc-4c4a-bd5a-c48b478afdcd,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/pool/thread/ClientPool.java,58.926926612854004,stop,"// ClientPool.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;

/**
 * This is a class for managing the pool of threads for
 * handling clients.
 *
 * @author Akshathkumar Shetty
 * @since 1.3
 */
public class ClientPool {

    /**
     * Method to suggest if nio write should be sent for processing.
     *
     * @since 1.4.6
     */
    public boolean shouldNioWriteHappen() {
        if (maxThreadsForNioWrite <= 0 || countNioWriteThreads < maxThreadsForNioWrite) {
            return true;
        } else {
            return false;
        }
    }
}
","// ClientPoolTest.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPool}.
* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.
*/
class ClientPoolTest {","// ClientPoolTest.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPool}.
* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.
*/
class ClientPoolTest {
/**
		* Test {@link ClientPool#shouldNioWriteHappen()} method.
		* It should throw AssertException when
		* maxThreadsForNioWrite is not greater than 0.
		* As a return, this method exits and returns {@code true} if
		* there are no more pooled instances or an error happened
		* during the test. Otherwise, it will throw AssertException
		* and does not exit when there is no pool instance.
		*
		* @param maxThreadsForNioWrite Maximum allowed value for num of threads
		*           in which there is some object left in the pool
		*           <br>If not set value is set to 1.
		* @since 1.4.6
		*/
    @Test(expected = AssertException.class)
	public void doesNotFitNioWrite() throws Exception {
		final int numberOfAvailableThreadsForNioWrite = 10;
		final ClientPool instance = new ClientPool(numberOfAvailableThreadsForNioWrite);
		final int numberOfObtainedThreads = instance.numberOfObtainedThreads;
		assertTrue(numberOfAvailableThreadsForNioWrite > 0);
		assertEquals(numberOfAvailableThreadsForNioWrite, numberOfObtainedThreads);
		instance.shouldNioWriteHappen();
    }
}"
