ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
39d88aa9-0b3f-4e76-9a29-9f2ecab033fa,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_0Test.java,60.95653414726257,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }
}
","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {
private final Random random = new Random();
			ClientHttpRequest request = new ClientHttpRequest();

		@Test
		void boundary() {
			request.addHeader(""foo"", ""bar"");

            assertEquals(""1234567890"", request.getParameters().get(""foo""));
        }
		
		@Test
        void random() {
            assertEquals(new Random().nextInt(), request.query.get(""foo""));
        }
        
		@Test
        void queryParameter() {
            assertTrue(request.query.get(""foo"") == ""bar"");
        }

		@Test
		void writesAllValue() {
            request.addHeader(""test"", ""value"");
            assertFalse(request.query.get(""test"") == null);
            assertEquals(""value"", request.query.get(""test""));
        }

		@Test
	    void readsAllValue() throws IOException, URLException {
	        request.post();
	        URLConnection connection = new URL(""http://user:pass@host:12/foobar"").openConnection();
	        connection.setRequestProperty(""Content-Type"", ""text/plain; random=1"");
	        URLConnection connection2 = connection.openConnection();
	        assertNotNull(connection2.getHeaderField(""content-type""));
	        String body = connection2.getHeaderField(""content-type"");
	        int cnt = 3;
	        boolean bAll = true;
	        while (cnt > 0){
	            assertNotNull(body);
	            body = body.split("";"")[0];
	            assertTrue(Integer.parseInt(body) == cnt);
	            cnt--;
	            bAll =!bAll;
	            if(bAll){
	                break;
	            }
	        }
	        assertFalse(bAll);
	    }
	}

// ClientHttpRequest_1Test.java
"
d50cfee0-d0b9-40a8-aec6-844d2b5157a0,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_1Test.java,58.73074769973755,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {
/**
		 * Test {@link ClientHttpRequest#post(Map)}.
		 */
		@Test
		void testPost() throws IOException {
			String url = new URL(""http://localhost:8082/"").toString();
			String postData = ""dummy post, dummies, dummy post"";
			Map postParameters = new HashMap();
			post(postParameters);
			assertTrue(postParameters.get(""post"").equals(postData));
		}

		/**
		 * Test {@link ClientHttpRequest#post(Map)}.
		 */
		@Test
		void testPostWithExtraParameters() throws IOException {
			String url = new URL(""http://localhost:8082/"").toString();
			String postData = getPostParameterAsString(""post"", 0, 7);
			Map postParameters = new HashMap();
			post(postParameters);
			assertTrue(postParameters.get(""post"").equals(postData));
		}

		/**
		 * Test {@link ClientHttpRequest#post(Map)}.
		 */
		@Test
		void testPostWithFileParameters() throws IOException {
			String url = new URL(""http://localhost:8082/"").toString();
			File file = new File(""test.txt"");
			InputStream fis = new FileInputStream(file);
			String postData = getPostParameterAsString(""post"", 0, 7);
			Map postParameters = new HashMap();
			post(postParameters);
			assertTrue(postParameters.get(""post"").equals(postData));
			postParameters = getPostParameterMapOnFile(postData);
			assertTrue(postParameters.get(""size"").equals(new Integer(file.length()).toString()));
		}

		private void send(Map parameters, Map parametersAsArray) {
			String data = getPostParameterAsString(parameters.get(""post""));
			String headers = getPostParameterMapOnFile(data);
			System.out.println(""\ntestData="" + data);
			System.out.println(""headers="" + headers);
			System.out.println(""parameters"" + parameters);
			URLConnection urlConnection = new URL(""http://www.google.com"").openConnection();
			try (OutputStream out = urlConnection.getOutputStream();) {
				for (Iterator i1=parametersAsArray.keySet().iterator(); i1.hasNext();) {
					urlConnection.setRequestProperty(i1.next(), parametersAsArray.get(i1.next()).toString());
				}
				System.out.println(""\nwrite"");
				System.out.println(""urlConnection.setRequestProperty(\""foo\"","");
				System.out.print(parametersAsArray.get(""foo"").toString());
				System.out.println(""!\"");"");
				out.write(data.getBytes());
				out.write('\n');
				System.out.println(""\nwrite end"");
			}			
		}
		private Map getPostParameterMapOnFile(String data) {
			File file = new File(""test.txt"");
			try (InputStream fis = new FileInputStream(file);) {
				String postData = data.replace(""\\"", ""\\\\"");
				byte buf[] = new byte[postData.length()];
				fis.read(buf);
				HashMap postParameters = new HashMap();
				postParameters.put(""POST_DATA"", postData);
				return postParameters;
			}
		}
		private Map getPostParameterMapOnFile(String data, int size) {
			File file = new File(""test.txt"");
			try (InputStream fis = new FileInputStream(file);) {
				byte buf[] = new byte[data.length()];
				int read;
				int count = size;
				while (count-->0) {
					read = fis.read(buf);
					if (read>0) {
						System.out.printf(""file read %d: %X\n"", count, buf);
						throw new RuntimeException(""File read"");
					}
				}
				HashMap postParameters = new HashMap();
				postParameters.put(""POST_DATA"", data.substring(0, data.length()-(count*buf.length)));
				return postParameters;
			}
		}
		private Map getPostParameterMapOnFile(int size) {
			File file = new File(""test.txt"");
			try (InputStream fis = new FileInputStream(file);) {
				byte buf[] = new byte[size];
				int count = size;
				while (count-->0) {
					fis.read(buf);
					System.out.printf(""file read %d: %X\n"", count, buf);
				}
				HashMap postParameters = new HashMap();
				return postParameters;
			}
		}

		private void setParameters(Map parameters) {
			headers = getPostParameterMapOnFile(""POST.DATA=dummy post,dummies, dummy post"".replaceAll(""\\?"", """"));
			String testSize = parameters.get(""size"").toString();
			headers.put(""Content-Type"", ""application/octet-stream"");
			headers.put(""Content-Length"", testSize);
		}

		private Map getPostParameterMap(String path) {
			String[] parts = path.split(""-"");
			Map map = new HashMap();
			map.put(parts[2], parts[4]);
			return map;
		}
		private String getPostData() throws IOException {
			return getPostParameterMap(new File(""test.txt""), 0, 7);
		}
	private String getPostParameterAsString(String parameterName, int start, int end) {
		String postData = """";
		//Get the headers Map
		Map headers = getPostParameterMap(parameterName);
		Map parameters = getPostParameterMap(parameterName);
		for (int i=start; i<=end; i++) {
			if (headers.get(parameters.get(i).toString()).equals(""""))
				return """";
			postData = postData + parameters.get(i).toString() + ""="" + headers.get(parameters.get(i).toString()) + ""\n"";
		}

		return postData;
	}

}
"
9aaef537-5c37-48da-97fd-88572d52bd4a,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_2Test.java,58.58622193336487,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {

    /**
     * It adds a parameter into a string containing the {@link #expectedParameters} field.
     */
	@Test
    void addParamWith() {
    		
    	assertEquals(
    			""parameter=\""first=value\"", expected=\""first=value\"", expected value:value"", 
    			""\""%1$s=first,%2$s=value\"", expected=\""first=value,value\"""", 
    			createString(expectedParameters)
    				); 
    }
    

    
    // This test case is written to test adding parameters to the '%1$s' pattern.
    String testSetParameter = 
    {
    		""%1$s=first,%2$s=value"",
    		""%3$s=first,%4$s=value"",
    		""%5$s=first,%6$s=value"",
		""%1$s=first,%2$s=value"",
    		
    		""%1$s=first,%2$s=value"",
    		""%3$s=%1$s,%4$s=%5$s"",
    		""%5$s=%3$s,%1$s=%4$s"",
    		
    		""%1$s=first,%2$s=value"",
    		""%3$s=%1$s,%4$s=%1$s,%5$s"",
    		""%5$s=%2$s,%1$s,value"",
    		
    		""%1$s=first,%2$s=value"",
    		""%3$s=%1$s,%4$s=%1$s,%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		""%3$s=%1$s,%4$s=%3$s,%2$s,%3$s"",
    		
    		""%1$s=first,%1$s=value"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3%3$s"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s"",
    		
    		""%1$s=first,%2$s=value"",
    		
    		""%1$s=%2$s,%3$s""    
    	};
    public ClientHttpRequest testSetParameter(Object[] param) {
		
		assertEquals(
    			testSetParameter,
    			createString(expectedParameters)
    				);
        createParameters(param);
        return this;
    }
    
    protected Object[] createParameters(Object[] parameter) {
		
    	if (parameter!=null) {
	          Object[] params = new Object[parameter.length];
            	 
	      for (int i=0; i<params.length; i++) {
	            parameters[i] = parameter[i];
	      }
	    } else {
	        params = new Object[0];
	    }
    	
		return params;
    }
    
    protected String createString(Object[] strings) {
    	HashMap <String, Object> parameters = new HashMap<>(strings.length);
    	for (int i = 0; i < strings.length; i++) {
    		parameters.put(""parameter name : ""+i, strings[i]); 
    	}
    	String string = createString(parameters);
    	return string;
    }
    
    protected String createString(Map<String, Object> map) {
		
		StringBuilder builder = new StringBuilder();
    	builder.append('{');
    	Iterator<String> keys = map.keySet().iterator();
    	while (keys.hasNext()) {
    		String key = keys.next();
     		Object value = map.get(key);  // this is the class name
    		builder.append(createObjectName(key));
    		builder.append('=');
    		builder.append(createObjectValue(value));
    		builder.append(',');
    	}
    	builder.deleteCharAt(builder.length() - 1);
    	builder.append('}');
    	return builder.toString();
    }
   
    protected String createObjectValue(Object value) {
    	if (value instanceof String) {
    		return (String) value;
    	} else if (value instanceof Integer) {
    		return value.toString();
    	} else if (value instanceof Long) {
    		return Long.toString(((Long) value).longValue());
    	}  else if (value instanceof Boolean) {
    		return value.toString();
    	} else if (value instanceof Double) {
    		return value.toString();    			
    	} else if (value instanceof File) {
    		if (!(value instanceof FileInputStream)) {
    			throw new IllegalArgumentException(""Can't write "" + value.getClass() + "" to File."");    			
    		}
    		return new File((File) value).getName();    			
    	} else if (value instanceof InputStream) {
    		return new File((File) value).getName();
    	} else if (value instanceof URL) {
    		return new URL((URL) value).getPath();
    	} else if (value.getClass().isArray()) {
    		Object[] values = (Object"
52199686-a16d-4023-a318-8113c14946d8,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_3Test.java,58.215795278549194,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {

    /**
     * Test setter methods of {@link ClientHttpRequest}.
     */
    @Test
    public void setters() throws IOException{
        String testUri = ""http://localhost:8188/"" + new Random().nextInt(1000) + ""/com.google.sample.Application1/""; // 10mb
        String request = ""GET ""+ new Random().nextInt(10000) + "" HTTP/1.0\r\n""+
                ""Host: 10.1.2.3\r\n""+
                ""Connection: close\r\n""+
                ""X-First-Line: test"";
        ClientHttpRequest request1 = new ClientHttpRequest(request);
        ClientHttpRequest request2 = new ClientHttpRequest();
        assertTrue(request1.equals(request2));
        assertNotEquals(request1.hashCode(), request2.hashCode());
    }

    @Test
    public void getters() throws IOException{
        String testUri = ""http://localhost:8188/1f43d/java/test/test.jpg""; // 0mb
        String request = ""GET ""+ new Random().nextInt(10000) + "" HTTP/1.1\r\n""+
                ""Host: 10.1.2.3\r\n""+
                ""Connection: close\r\n""+
                ""X-First-Line: test\r\n""+
                ""User-Agent: "" + ClientHttpRequest.UA_STRING + ""\r\n""+
                ""Accept-Encoding: gzip, deflate, nocompress, deflate\r\n""+
                ""Accept-Language: en-US, es-ES\r\n""+
                ""Accept-Charset: ISO-8859-1, UTF-8\r\n""+
                ""Accept: "" + ClientHttpRequest.ACCEPT_STRING + ""\r\n""+
                ""Accept-Ranges: bytes\r\n""+
                ""Accept-Encoding: gzip\r\n""+
                ""Accept-Language: en-US\r\n""+
                ""Host: 10.1.2.3"";
        ClientHttpRequest request1 = new ClientHttpRequest(request);
        assertEquals(ClientHttpRequest.STATUS_OK, request1.getStatusCode());
        assertEquals(ClientHttpRequest.STATUS_OK, request1.getStatusCode());
        
        String testImage = ""/home/test/test.jpg"";
        String tempFile = ""/testTemp/testTemp.jpg"";
        String testFile = testImage.substring(0, (testImage.lastIndexOf(tempFile)+1)); // 3.44m
        RequestFileHeader requestFileHeader = new RequestFileHeader(testFile, ""test"");
        assertEquals(ClientHttpRequest.STATUS_OK, request1.setFileHeader(requestFileHeader));
        
        assertFalse(request1.getBytes(ClientHttpRequest.BODY_FILE_HEADER));
        File file = new File(testFile);
        assertFalse(file.exists());
        assertTrue(file.canRead());
        assertEquals(FileHeader(testFile), request1.getFileHeader());
    }
}
"
30b2634d-a675-4ea2-a356-093d5ebb3e5a,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_4Test.java,58.125178813934326,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {

    /**
    * Method for generating a random content as base64 encoded with {@link Random#nextBytes(byte[])}.
    */
  @Test
    public void test_generateRandomContentAsBase64_6() { 
        String content = String.format(""%s"", new String(new Random().nextBytes(new byte[8]))).replace(""-"", ""+"");
        String expected = String.format(""Zm9vZm9uanZXIgZm9uc2FuZXJvZnQ="");
        String expected1 = String.format(""Zm9vZm9uanZXIgZm9uc2FuZXJvZnQaGFuY2UgbWFydWQ="");
        assertEquals(expected, ClientHttpRequest.generateRandomContent(content));
        assertEquals(expected, ClientHttpRequest.generateRandomContent(expected).replaceAll(""\\+"", ""+""));
    }
    
    /**
    * Method for generating a random content as base64 encoded with {@link Random#nextBytes(byte[])}.
    */
  @Test
    public void test_generateRandomContentasBase64_14() { 
        String content = String.format(""%s"", new String(new Random().nextBytes(new byte[8])))
//				+ ""1"";
           .replace(""-"", ""+"");
        String expected = String.format(""Zm9vZm9uanZXIgZm9uc2FuZXJvZnQ="");
        String expected1 = String.format(""Zm9vZm9uanZXIgZm9uc2FuZXJvZnQaGFuY2UgbWFydWQ="");
        assertEquals(expected, ClientHttpRequest.generateNextString(content, 8, expected));
        assertEquals(expected, ClientHttpRequest.generateNextString(content, 8, expected1).replaceAll(""\\+"", ""+""));
    }
    
    /**
    * Method for generating a random content as base64 encoded with {@link Random#nextBytes(byte[])}.
    */
  private String generateNextString(String content, int length, String expected) {
    int count = length;
    String s1;
    s1 = content;
    while (count-- > 0 && s1.length() > 0) {
        s1 = String.format(""%s"", new String(new byte[content.length() - 1]))
            + s1;
    }
    return expected.replaceAll(""\\+"", ""+"") + ""\r\n"" + s1;
  }
	
    /**
    * Method for generating the file names in the directory and test the output result. 
*/
  @Test
    public void test_output_file_names_in_the_directory() throws Exception {
//        assertFileDoesNotExist(""d/test"");
//        assertFileDoesNotExist(""d/test/index.html"");
//        test_output_file_names_with_a_different_name_to_same_directory();
//
//        assertFileDoesNotExist(""d4/test"");
//        assertFileDoesNotExist(""d4/test-1.jpg"");
//        assertFileDoesNotExist(""d4/test-2.jpg"");
//        assertFileDoesNotExist(File.separator + ""d4"");
        setDir(""d4/"");
        assertFileDoesNotExist(File.separator + String.format(""d4/Index.html""));
        assertFileDoesNotExist(File.separator + String.format(""d4/page.html""));
        assertFileDoesNotExist(""d4/test/index.html"");
        assertFileDoesNotExist(""d4/test/page.html"");

        setDir(""dir2/d4/"");
        assertFileDoesNotExist(File.separator + String.format(""dir2/d4/Index.html""));
        assertFileDoesNotExist(File.separator + String.format(""dir2/d4/page.html""));
        assertFileExists(""d4/test/index.html"");
        assertFileDoesNotExist(""d4/test/page.html"");

        setDir(""dir3/d4/"");
        assertFileDoesNotExist(File.separator + String.format(""dir3/d4/Index.html""));
        assertFileDoesNotExist(File.separator + String.format(""dir3/d4/page.html""));
        assertFileDoesNotExist(""d4/test/index.html"");
        assertFileDoesNotExist(""d4/test/page.html"");

        setDir(""dir4/d4"");
        assertFileDoesNotExist(File.separator + String.format(""dir4/index.html""));
        assertFileDoesNotExist(File.separator + String.format(""dir4/page.html""));
        assertFileDoesNotExist(""d4/test/index.html"");
        assertFileDoesNotExist(""d4/test/page.html"");
    }
    
    /**
    * Method for converting the given file name into the directory. 
*/
  public void setDir(String fileName) throws Exception {
	    File file = new File(dir, fileName);	
	    System.out.println(file.getAbsolutePath());
        assertFileExists(fileName);
	    file.delete();
    }
    
    /**
    * Method for getting the contents of the given directory. 
*/
  public void getDirContents(File directory) throws Exception {

    File[] directoryReadings = directory.listFiles();

    assertDirContents(""./"", directory);
//    assertDirContents("".\\."", directory);

    for (int index = 0; index < 10; index++) {
        System.out.println(directory.getAbsolutePath() + ""/"" + String.format(""%02d"", index + 1));
    }
    if (directoryReadings.length == 0) {
        throw new RuntimeException(""The TestClientHttpRequest.init method was not used in case of default input param file."");
    }
  }
  
  private void assertFileDoesNotExist(String fileName) throws Exception {
      assertFileDoesNotExist(new File(dir, fileName));
  }

  private void assertFileDoesNotExist(File file) throws Exception {
      assertFalse(""File "" + file.getAbsolutePath() + "" does not exist"", file.exists());
  }

  private void assertFileAndRead(File file) throws Exception {
	  assertFileExists(file.getAbsolutePath());
	  InputStream input = new FileInputStream(file);
	  String result = new String( new InputStreamReader"
8aa26a0a-c743-4864-afda-007bcfc0f3e1,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_5Test.java,58.42891812324524,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }
}
","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {
/**
		* Create a new ClientHttpRequest.
		*
	    Create a new ClientHttpRequest to be used with requests.
		* The object passed is the response object returned by a GET call.
		* This test will execute the test of the body-only method.
		*
		 */
	    private ClientHttpRequest createNewObject()throws IOException
			{
		    ClientHttpRequest request = new ClientHttpRequest(client);
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.post("""", null);
		    request.post("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.post("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    return request;
			}
	    ClientHttpRequest post(String name, Object value) throws IOException
			{
		    ClientHttpRequest request = new ClientHttpRequest(client);
		    setParameter(name, value);
		    return request;
			}

	    @Test
	    public void testSetParameter()throws IOException
			{
		    ClientHttpRequest request = new ClientHttpRequest(client);
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    request.setParameter("""", new ByteArrayInputStream(""someData.bin"".getBytes()));
		    assertEquals(""someData.bin"", request.getParameter(""""));
		    assertEquals("""", request.getParameter(""""));
		    assertEquals(""someData"", request.getParameter(""""));
		    assertEquals(""someData.bin"", request.getParameter(""someData.bin""));
		    assertEquals(""someDataTest1"", request.getParameter(""someData.bin""));
		    assertEquals(""someDataTest2"", request.getParameter(""someOtherData.bin""));
		    assertEquals("""", new ByteArrayInputStream(""someDataTest1.bin"").getBytes());
		    request.setParameter(""someData"", Byte.MAX_VALUE);
		    assertEquals(new ByteArrayInputStream(""someData.bin"", new ByteArrayInputStream(""someDataTest1.bin"")), request.getParameter(""someData""));
		    assertEquals(""someDataTest2"", request.getParameter(""someData""));
		    assertEquals(""someDataTest1.bin"", request.getParameter(""someData.bin""));
		    assertEquals(""someDataTest2.bin"", request.getParameter(""someData.bin""));
		    assertEquals(""someDataTest1.bin"", request.getParameter(""someData""));
		    assertNull(request.getParameter(""someData0""));
		    assertNull(request.getParameter(""""));
    	}

    	@Test
	    public void testSetParameterIfExist()throws IOException
			{
		   ClientHttpRequest request = new ClientHttpRequest(client);
		   request.setParameter(""someData"", Byte.MAX_VALUE);
		   request.setParameter(""someData"", ""someData.bin"");
		   assertEquals(""someData"", request.getParameter(""someData.bin""));
		   assertEquals(""someData.bin"", request.getParameter(""someData""));

	    }

	    @Test
	    public void testSetParameterWithMap()throws IOException
			{
		   ClientHttpRequest request = new ClientHttpRequest(client);
		   request.exchangeFor(""post"");
		   assertEquals(""post"", request.getParameter(""name""));
		   Iterator<String> iter = request.getParameterMap(""name"").keySet().iterator();
		   String name = iter.next();
		   assertNull(request.getParameter(name));
		   assertEquals(""name"", iter.next());
		   assertEquals(""post"", request.getParameterIfKeyExist(name));
		   assertTrue(iter.hasNext());
		   assertEquals(""post"", iter.next());
		   assertEquals(""name2"", iter.next());
		   assertEquals(""post"", iter.next());
       	   assertEquals(""name2"", iter.next());
		   assertTrue(iter.hasNext());
		   assertEquals(""post"", iter.next());
		   Iterator<String> iter2 = request.getParameterMap(""name2"").keySet().iterator();
		   Iterator<String> iter3 = iter2.next().iterator();
		   assertEquals(""post"", iter3.next());
		   iter3.next();
		   iter3.next();
		   iter3.next();
		   assertEquals(""post"", iter3.next());
		   assertEquals(""post2"", iter2.next());
		   Iterable<Map.Entry<String, String>> me = request.getParameterMap(""name"");

		   Map<String, String> map = new HashMap<String, String>();
		   map.put(""name"", ""post"");
		   map.put(""name2"", ""post2"");
		   map.put(""name3"", ""post3"");

		   Iterable<Map.Entry<String, String>> result = me.iterator();
		   String key = result.next().getKey();
		   assertTrue(result.iterator()  instanceof Map.Entry.class);
		   assertEquals(""name"", result.next().getKey());
     	   assertEquals(""name2"", result.next().getKey());
     	   assertTrue(result instanceof Map.Entry.class);
		   assertEquals(""post"", result.next().getKey());
     	   assertNull(result.next().getKey());
     	  }
	    }
}"
846ee52f-eab4-4888-bbfc-0e45d375b8fd,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_6Test.java,57.87958836555481,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }
}
","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {

		@Test
		public void testPOSTStringObjectCleansCache() throws Exception {
			newClientHttpRequestWithCache(""key"", 42).post(""name"", 123);
		}
	}

	// End of client tests.

	private ClientHttpRequest newClientHttpRequestWithCache(String name, Object value) throws IOException {
        // Create a random key and file.
        File key = new RandomClientHttpRequestCache().createKey(""MyCache"");

		ClientHttpRequest res = new ClientHttpRequest();
		String postParam = res.post(""TestParameter"", value, ""name1"", key.getAbsolutePath());
		assertEquals(postParam, 42);
		return res;
	}
}

final class RandomClientHttpRequestCache implements ClientHttpRequestCache {

    private final Map<String, Map<String, String>> cache;

    public RandomClientHttpRequestCache() {
        this.cache=new HashMap<>();
    }

    @Override
    public InputStream getInputStreamForKey(String key) {
        return new FileInputStream(key.endsWith("".json"")? key : ""MyCache""+key+"".json"");
    }

    @Override
    public String getKeyForPath(String path) {
        return ""MyCache""+path.endsWith("".json"")?path:path.substring(0, path.lastIndexOf("".""));
    }

    @Override
    public OutputStream getOutputStreamForKey(String key) throws IOException {
      return new OutputStream() {

        @Override
        public void write(int b) throws IOException {

        }

        @Override
        public void close() throws IOException {

        }
      };
    }

    @Override
    public void deleteKeyForPath(String key) throws IOException {
      File file = getKeyFileForPath(key);
      if (file.exists()) {
        file.delete();
      }
    }

    @Override
    public void clearKeys() {
      cache.clear();
    }

    @Override
    public void putKeyForPath(String key, String value) throws IOException {
      File file = getKeyFileForPath(key);
      putKeyIntoCache(key, value, file.getPath(), file.getPath());
    }

    private void putKeyIntoCache(String key, String value, String name1, String name2) throws IOException {
      Map<String, String> map = cache.get(name1);
      if (map == null) {
        map = new HashMap<>();
        cache.put(name1, map);
      }
      map.put(name2, value);
    }

    private File getKeyFileForPath(String path) {
      File file = null;
      keyPathFor(path);
      if (path.endsWith("".json"")) {
        file = new File(String.format(""MyCache%s%s.json"", path.substring(0, path.length()-2), path.substring(path.length()-1))
        );
      }
      else {
        file = new File(String.format(""MyCache%s"", path));
      }
      return file;
    }

    private void keyPathFor(String path) {
      if (path.endsWith("".json"")){
        path = path.substring(0, path.length()-2);
        path = path.substring(0, path.length()-1);
      }
    }

    /**
     * Get key for a file that was previously created by the cache.
     * @param path file path being requested
     * @return key for a file that was previously created by the cache
     */
    public String getKeyFileForPath(String path) {
        if (cache.containsKey(path)) {
            File file = cache.get(path).get("""");
            return file.getPath();
        }
        return null;
    }

    @Override
    public Map<String, String> getCachedKeys() {
        return new HashMap<>(cache);
    }
}
"
cf39cdd9-a319-4e7e-949d-2fbd2fdebc8a,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_7Test.java,57.37976098060608,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }
}
","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {
Map<String,Object> parameterMap = new HashMap<String,Object>();
		String text = ""Hello world"";
	@Test
		void post() throws Exception {
        assertEquals(
                new ClientHttpRequest().post(""Parameter1"", ""ParameterValue1"", null, ""ParameterValue2"", ""ParameterValue3"", null),
                new ClientHttpRequest().post(""Parameter1"", ""ParameterValue1"", ""ParameterValue2"", ""ParameterValue3"")
            );
    }

        @Test
        void postFile() throws Exception {
            File file =  new File(""C:\\test.txt"");
            String parameter = ""value"";

            assertEquals(
                    new ClientHttpRequest().post(parameter, FileUtil.openInputStream(file), null, null, ""ParameterValue1"", null)
           ,   new ClientHttpRequest().post(parameter, FileUtil.openInputStream(file), null)
            );
        }
		@Test
        void postFileFile() throws Exception {
			File file =  new File(""C:\\test.txt"");
			String parameter = ""value"";

			assertEquals(
					new ClientHttpRequest().post(parameter, FileUtil.openInputStream(file), null)
           ,   new ClientHttpRequest().post(parameter, FileUtil.openInputStream(file))
            );
		}
		@Test
        void postFileInputStream() throws Exception {
			InputStream is =  new FileInputStream(""C:\\test.txt"");
			String parameter = ""value"";

			assertEquals(
                    new ClientHttpRequest().post(parameter, is)
           ,   new ClientHttpRequest().post(parameter, new InputStream() {
				    @Override
					public int read() throws IOException {
						return 0;
					}
			}), ""value"")
            );
		}
// ServerHttpRequest.java
        static class ServerHttpRequest extends ClientHttpRequest {
            private static Map<String,Object> requestParameters = new HashMap<>();

            public ServerHttpRequest setParameter(String name, Object value) {
                requestParameters.put(name, value);

                return this;
            }


            @Override
            public String getFormEncodedParameter(String name, String separator) {
                return getRequestParameters().get(name);
            }


            @Override
            public Map<String, Object> getRequestParameters() {
                return requestParameters;
            }
        }

// Class ClientHttpRequest_2Test.java
        static class ClientHttpRequest_2Test extends ClientHttpRequest {
            public ClientHttpRequest_2Test setParameter(String name, Object value) {
                return (ClientHttpRequest_2Test)mv.set(name, value);
            }

            public ClientHttpRequest_2Test getRequestParameters() {
                return (ClientHttpRequest_2Test)mv;
            }
        }

        @Test
        void postMulti() throws Exception {
            Map.Entry<String,Object>[] entries = new HashMap.Entry[4];
            entries[0] = new HashMap.Entry<String, Object>(""name1"", ""value1"");
            entries[1] = new HashMap.Entry<String, Object>(""name2"", ""value2"");
            entries[2] = new HashMap.Entry<String, Object>(""name3"", ""value3"");
            entries[3] = new HashMap.Entry<String, Object>(""name4"", ""value4"");

            ClientHttpRequest request = new ClientHttpRequest_2Test();
            Set<String> keys = request.getRequestParameters().keySet();

            for (String key : keys) {
                request.setParameter(key, request.getRequestParameters().get(key));
            }

            assertEquals(
                    new ClientHttpRequest_2Test().getRequestParameters(),
                    new ClientHttpRequest(request).getRequestParameters()
            );
        }
	@Test
	void getFormEncodedParameter() throws Exception {
		URLConnection conn = new URL(ClientHttpRequest.class.getResource(""GetFormEncodedParameter.html"").toExternalForm());


		clientHttprequest(conn).getFormEncodedParameter(""param"");
	}


    public abstract  URLConnection clientHttprequest(URLConnection input) throws IOException;
    @Test
	public void formParams() throws Exception {
		ClientHttpRequest instanceOfFormData = new ClientHttpRequest().getRequestParameters();

		Set<String> set = instanceOfFormData.keySet();

		assertAll(set.iterator());
	}

    public static void assertEquals(Object r1, Object r2) throws Exception {
        String s1 = null!= r1? r1.toString() : null;
        String s2 = null!= r2? r2.toString() : null;
        assertNotNull(s1);
        assertNotNull(s2);

        assertEquals(s1,s2);
    }

	public static void assertNull(Object o) throws Exception {
		String s = null!= o? o.toString() : null;
		assertEquals(s, null);
	}



	private static void assertAll(Iterator<Object> it) throws Exception {
        if (it.hasNext()) {
            Object o = it.next();
            if (o == null) {
            	throw new Exception(""Exception expected"");
            }
        }
        else {
        	throw new Exception(""Exception expected"");
        }

    }



public static final Random RANDOM = new Random();
public static  int NUM = 10;
public static  ClientHttpRequest clientHttprequest(URL url) throws Exception {
        ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		Map<String, Map<String, String>> request = new HashMap<String, Map<String, String>>();

		clientHttpRequest.setURL(url);

		Map<String,String> map = new HashMap<String,String>();
		try (ClientHttpRequest r = clientHttprequest(url)) {
			r.addParameter(""num"",String.valueOf(NUM));
			r.readResponse();

			map = r.getParameterMap();

		}
		assertEquals(NUM,  (int)map.get(""num""));

		Iterator<Map.Entry<String, Map<String, String>>> it = map.entrySet().iterator();

        while (it.hasNext()) {
            Map.Entry<String, Map<String, String>> entry = it.next();
            String name = entry.getKey();
            String value = entry.getValue().get(""value"");

            String prefix = """"+name+""-""+value+"";"";"
1b547e34-03da-41fc-b872-663eeb797e5c,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_8Test.java,56.85918617248535,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {

    /**
     * Tests {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)}.
     * @date 2014-12-10
     */
    @Test
    public void testPostS_01() throws Exception {
    	String name = ""tstpost"";
    	Object id = ""tstid"";
    	Map<String,Object> parameters = new HashMap<String,Object>();
    	parameters.put(""name"", name);
    	parameters.put(""passwd"", ""1234"");
    	parameters.put(""email"", ""user@example.com"");
    	String url = ""http://127.0.0.1:9999/"";
    	ClientHttpRequest testCase = ClientHttpRequest.post(name, parameters, url);
    	assertEquals(url, testCase.getUrl());
    	assertEquals(2, testCase.getHeaders().size());
    	assertEquals(""POST"", testCase.getHeaders().getFirst(""Content-type""));
    	assertEquals(""text/xml;charset=utf-8"", testCase.getHeaders().getFirst(""Content-Disposition""));
    	assertEquals(1, testCase.getParameters().size());
    	assertEquals(id, testCase.getParamters().get(name));
    	assertEquals(""1234"", testCase.getHeader(""X-Post-Password""));
    	assertEquals(name, testCase.getHeader(""X-Post-Name""));
    	assertEquals(""user@example.com"", testCase.getHeader(parameters.getFirst(""passwd"")));
    }

    /**
     * Tests {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)}.
     * @date 2014-12-10
     */
    @Test
    public void testPostS_02() throws Exception {
    	String name = ""tstpost"";
    	Object id = ""tstid"";
    	Map<String,Object> parameters = new HashMap<String,Object>();
    	parameters.put(""name"", name);
    	parameters.put(""passwd"", ""1234"");
    	parameters.put(""email"", ""user@example.com"");
    	String url = ""http://127.0.0.1:9999/"";
    	ClientHttpRequest testCase = ClientHttpRequest.post(name, parameters, url);
    	assertEquals(url, testCase.getUrl());
    	assertEquals(2, testCase.getHeaders().size());
    	assertEquals(""POST"", testCase.getHeaders().getFirst(""Content-type""));
    	assertEquals(""text/xml;charset=utf-8"", testCase.getHeaders().getFirst(""Content-Disposition""));
    	assertEquals(1, testCase.getParamerters().size());
    	assertEquals(id, testCase.getParamerters().get(name));
    	assertEquals(""1234"", testCase.getHeader(""X-Post-Password""));
    	assertEquals(name, testCase.getHeader(""X-Post-Name""));
    	assertEquals(""user@example.com"", testCase.getHeader(parameters.getFirst(""passwd"")));
    }
    
    /**
     * Tests {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)}.
     * @date 2014-12-10
     */
    @Test
    public void testPostS_03() throws Exception {
    	String name = ""tstpost"";
    	Object id = ""tstid"";
    	Map<String,Object> parameters = new HashMap<String,Object>();
    	parameters.put(""name"", name);
    	parameters.put(""passwd"", ""1234"");
    	parameters.put(""email"", ""user@example.com"");
    	String url = ""http://127.0.0.1:9999/"";
    	ClientHttpRequest testCase = ClientHttpRequest.post(name, parameters, url);
    	assertEquals(url, testCase.getUrl());
    	assertEquals(2, testCase.getHeaders().size());
    	assertEquals(""POST"", testCase.getHeaders().getFirst(""Content-type""));
    	assertEquals(""text/xml;charset=utf-8"", testCase.getHeaders().getFirst(""Content-Disposition""));
    	assertEquals(1, testCase.getParamerters().size());
    	assertEquals(id, testCase.getParamerters().get(name));
    	assertEquals(""1234"", testCase.getHeader(""X-Post-Password""));
    	assertEquals(name, testCase.getHeader(""X-Post-Name""));
    	assertEquals(""user@example.com"", testCase.getHeader(parameters.getFirst(""passwd"")));
    }

    /**
     * Tests {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)}.
     * @date 2014-12-10
     */
    @Test
    public void testPostS_04() throws Exception {
    	String name = ""tstpost"";
    	Object id = ""tstid"";
    	String url = ""http://127.0.0.1:9999/"";
    	InputStream body = new FileInputStream(""body.txt"");
    	ClientHttpRequest testCase = ClientHttpRequest.post(name, body, url);
    	assertEquals(url, testCase.getUrl());
    	assertEquals(2, testCase.getHeaders().size());
    	assertEquals(""POST"", testCase.getHeaders().getFirst(""Content-type""));
    	assertEquals(""text/plain"", testCase.getHeaders().getFirst(""Content-Disposition""));
    	assertEquals(1, testCase.getParamerters().size());
    	assertEquals(id, testCase.getParamerters().get(name));
    	assertEquals(""body.txt"", testCase.getHeader(""Content-Disposition""));
    	assertEquals(""body.txt"", testCase.getContentAsString());
    	assertEquals(2, testCase.getParams().size());
    	assertEquals(""POST"", testCase.getParams().getFirst(""Content-type""));
    	"
d55cb4a0-cd95-44d4-9226-c5b3fb14d75a,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_0Test.java,52.22308611869812,stop,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }
}
","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {
// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email!= null &&!email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org!= null) && (username!= null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users!= null) {
                    String userid = (String) users.get(username);
                    if (userid!= null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }
}

// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {
		// @BeforeTest
		// public void beforeClass() throws Exception {
		// cat.warn(""beforeClass():"");
		//}

        @Test
        void getUser_0() throws Exception {
            cat.warn(""getUser(String,String,String): "");

            String username = ""Test User 1"";
            String org = ""org1"";

            SimpleUserMgr sm = new SimpleUserMgr();
            String email = ""test.email@gmail.com"";
            String orgname = ""test.org1"";

            int i = 0;
            while (i < 100) {
                String expectedUser = ""username"" + i++;
                String expectedOrg = ""org"" + i++;
                String expectedEmail = ""user"" + i++;

                boolean found = sm.getUser(expectedUser, expectedOrg, expectedEmail);
                if (!found)
                    return;
            }
            System.err.println(""Test failed, returned 0x00!0x0F!"");

        };
}

// SimpleUserMgr_1.java
"
230ccda0-2659-40ad-aa9b-42760eaf4ac2,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_1Test.java,54.89278054237366,length,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }
}
","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_1Test {","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_1Test {

    public final static String DATABASE_PROP_NAME = ""databas"";
    public final static String PROPERTIES_FILE_PATH = ""propertiyXml1"";
	final static String COOKIE_NAME = ""cookiename"";
        final HashSet set = new HashSet();
    public static Vector recordManagers = null;

    {
        JDBMRecordManager rm = new JDBMRecordManager(PROPERTIES_FILE_PATH);

        rm.setProperty(DATABASE_PROP_NAME, DATABASE_PROPNAME);
        set.add(COOKIE_NAME);
        set.add(""COOKIE"");

        recordManagers = new Vector();
        recordManagers.add(rm);

    }

    @Test
		public void test1() throws IOException, ClassNotFoundException {
            Vector vec = new Vector();

            Properties p = new Properties();
            ArrayList <String> orgs = new ArrayList();
            
            p.put(DATABASE_PROP_NAME, DATABASE_PROPNAME);
            orgs.add(orgs[0]); // Orgname set to A/R

            p.put(""cookiename"", COOKIE_NAME);
            p.put(""orgs.0"", orgs.get(0)); // Orgname set to A/R

			
            // test of getNamesbyOrg method.
			Vector v = new Vector();
			JDBMEnumeration s = null;
            try {
                s = recman.getEnumeration(p.getProperty(COOKIE_NAME));
                v.add(null); // The vector will contain the NULL element. 
                v.add('a'); // The vector will contain a valid element.
            } catch (Exception e) {
                cat.error(""getNamesbyOrg: "" + e);                
            }

            assertTrue(v.contains(COOKIE_NAME));
            assertFalse(v.contains(""a""));
            assertEquals(v.size(), 1, ""testSizeOfVector"");
            Vector tempv = (Vector)v.get(0);
            assertTrue(tempv.size() > 0, ""testNonNullElement"");
            assertTrue(set.contains(COOKIE_NAME), ""Set isEmpty"");

			
            // test of createFile.
            
            //test of set of users.
            
	    
            // test of createRecordManager.
			
            JDBMEnumeration r = null;
            try {
                r = recman.getEnumeration(p.getProperty(COOKIE_NAME));
            } catch (Exception e) {
                cat.error(""getNamesbyOrg: "" + e);
                return;
            }

		    test_createRecordManager(set, orgs); 
            
		    r.close();


            
        } catch (IOException e) {
            cat.error(e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            cat.error(e.getMessage());
            e.printStackTrace();
        } finally {
            if (rm!= null) rm.close();
        }
    }

    private void test_createRecordManager(HashSet set, Vector orgs  ) {

        JDBMEnumeration r = null;

        try {
            r = recman.getEnumeration(COOKIE_NAME);
        } catch (Exception e) {
            cat.error(""test1: "" + e);
            e.printStackTrace();
        }
        try {
	        JDBMRecordManager temp = null;
		        try {
	            test_isValidRecordManager(set, temp = 
	                              new JDBMRecordManager(PROPERTIES_FILE_PATH));
	            assertFalse(set.contains(COOKIE_NAME), ""addRecordManager"");
		        } catch (Exception e) {
                    e.printStackTrace();
		    }

		        
	        // clear the list of record manager
		        r = null;
		        try {
	            JDBMRecordManager temp = null;
		            try {
	                test_isValidRecordManager(set, temp = 
	                              new JDBMRecordManager(PROPERTIES_FILE_PATH));
	                assertFalse(set.contains(COOKIE_NAME), ""addRecordManager"");
		            } catch (Exception e) {
                        e.printStackTrace();
		        }       
		        } finally {
		            // r will be cleared in the catch block
		        }			
			
		        // add record manager to set.
		        r = recman.addEnumeration(set);
	        } catch (Exception e) {
	            e.printStackTrace();
	        } finally {
	            r.close();
	        }


        } catch (IOException e) {
            cat.error(e.getMessage());
            e.printStackTrace();
        }

    }

    private void test_isValidRecordManager(HashSet set,
			JDBMRecordManager temp) {

        JDBMEnumeration s = null;

        try {
            s = recman.getEnumeration(COOKIE_NAME);
        } catch (Exception e) {
            cat.error(""test3: "" + e);
            e.printStackTrace();
        }
        try {
            test_isValidRecordManager(set, s);
        } catch (Exception e) {
            e.printStackTrace();
        }



    }

    private void test_createFile(Vector vec) throws IOException {
        try {
            JDBMRecordManager r = recman.createRecordManager(
			        DATABASE_PROP_NAME, PROPERTIES_FILE_PATH, vec);

            try {
                BufferedReader rr = new BufferedReader(
                        new InputStreamReader(r.getInputSource()));
                for (int c = 0; c < 10; c++) {
                    assertEquals(""c"", rr.readLine());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

"
08c4ec40-f1fa-4023-b41d-00ce3fd1e45f,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_2Test.java,54.901569843292236,length,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }
}
","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_2Test {","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_2Test {
/**
		* Test method for {@link com.browsersoft.aacs.SimpleUserMgr#getMailbyOrg(String)}
		* where org is a system property variable.
		*
		* Test case is the following
        * (1..n). If the system property <i>systemProperty</i> is not null, its value is checked to be a system property <i>systemProperty</i>.
        *
		* Precondition: The two system properties of <i>systemProperty</i> and <i>systemProperty2</i> (in the following order) are checked
		*
		*   a. <i>systemProperty</i> is a system property variable.
        *   b. <i>systemProperty</i> value for property string is a legal property string.
        *   c. <i>systemProperty2</i> is a system property variable.
        *   d. <i>systemProperty</i> value for property string is a legal property string.
        *
		* Postcondition: <i>systemProperty</i> value for property string <i>systemProperty</i> which contains <i>systemProperty2</i> is checked.
		*
		* @throws Exception
		* Test can fail if test case is not executed correctly.
		*/
    @Test
    public void testGetMailbyOrg() throws Exception {
        JDBMHashtable users = recman.getHashtable(""SYS2"");
            Vector vec = (Vector) vec_1_5.clone();
            vec.addElement(""a"");
            vec.addElement(""b"");
            vec.addElement(""c"");
            vec.addElement(""d"");

        users.put(""CJCO"", vec);

         // SimpleUserMgr.getMailbyOrg checks the returned email address set in a.d.
         String s = SimpleUserMgr.getMailbyOrg(users);
        assertEquals(""d.a.c"", s);

         
         // SimpleUserMgr.getMailbyOrg works normally.
         users = recman.getHashtable(""SYS2"");
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO2"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO3"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO4"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO5"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO6"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO7"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO8"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO9"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO10"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO11"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO12"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO13"", vec);
        vec = new Vector();
        vec.addElement(""a"");
        vec.addElement(""b"");
        vec.addElement(""c"");
        vec.addElement(""d"");
        users.put(""CJCO14"", vec);

        s = SimpleUserMgr.getMailbyOrg(users);
        assertEquals(""a.d.c"", s);

        System.out.println(""\n"" + s);
    }

    public void testIsMailFromName() throws Exception {
        System.out.println(""\nTest isMailFromName: "");
        Vector vec_1_5 = new Vector();
        vec_1_5.addElement(""G.A.T.A.V.E.K.H.L"");
        vec_1_5.addElement(""a"");
        vec_1_5.addElement(""b"");
        vec_1_5.addElement(""c"");
        vec_1_5.addElement(""d"");

        JDBMRecordManager recman2 = new JDBMRecordManager();
        recman2.copyElementTo(vec_1_5);
        JDBMHash"
6aecf567-7a1e-48a3-8f32-5cbfdc9ea5e8,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_3Test.java,55.990819454193115,stop,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }
}
","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_3Test {","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_3Test {
static final int DEFAULT_USER_ID = 907001;

    int maxLimit;
    int maxAge;
    int minAge;
    Vector<String> users;
    Vector<String> groups;
    Vector<String> ids;
    HashSet<String> usersGroups;
	SimpleUserMgr userMgr;
	
    public SimpleUserMgr_3Test() {
        this.userMgr = new SimpleUserMgr();	
    }

	@Test
	public void testExport() {

		// create empty properties
		Properties prop1 = new Properties();
		prop1.setProperty(""a"", ""b"");
		prop1.setProperty(""c"", ""d"");

		// create a database manager
		JDBMRecordManager dbMgr = new JDBMRecordManager();

		// create some users
		for (int i = 0; i < 10; i++) {
			String usr = ""usr"" + i;
			String grp = ""group"" + i;
            
			int id = DEFAULT_USER_ID;
			String s = usr + ""-"" + grp;
			users.add(s);
			groups.add(grp);
			
			// create a user
			id = userMgr.export(prop1, dbMgr, usr + ""-"" + grp);

            prop1.setProperty(""userId["" + i + ""]"", id);
		}

		// create some users
		for (int i = 0; i < 10; i++) {
			String username = usr + ""-"" + i;
            // try and export user with the id
			id = userMgr.exportNonExisting(prop1, dbMgr, username);

            // user not found, let's make it
            prop1.setProperty(""userId["" + i + ""]"", id);
            
		}

		// read users from a db
		try {
			users = (Vector) dbMgr.get(prop1);
		} catch (IOException e) {
			e.printStackTrace();
			fail(""Could not read expected users from a db"");
		}

		// iterate through users
		for (String name : users) {

			boolean found = false;
			for (int i = 0; i < 10; i++) {
				
				// try and get properties from user
                // get user names (first)
                String u = name + ""-"" + i;	
				String x = getProperty(prop1, u);

				// get number of groups from user
				int g = getProperty(u, ""grp."");
				
				if (x == null) continue;
				
				// we found this, let's get it
                if (x.equals(g + "".0"")) {
                    found = true;
                    break;
                }
			}
			
			String s = name + ""-"" + """" + g;
			String g = users.size() > 1? """" + users.get(users.size()-1) : ""0"";
			String t = name + ""-"" + g;
			
			if (found) {
                usersIds.add(s + "" - "" + t);
            } else {
                usersIds.add(s);
            }
		}

		// check if we found the required number of users
		assertEquals(""users not found"", 10, usersIds.size());
		
		// check if we found the required number of groups
		assertEquals(""groups not found"", 10,
				usersGroups.size() / 2, Integer.MAX_VALUE);

              
	}

        private String getProperty(Properties prop, String name) {
            String s = null;
            if (prop!= null) {
                String propname = prop.getProperty(name);
                if (propname!= null) {
                    s = propname;
                }
            }
            return s;
        }

	@Test
	public void testParse() throws IOException {
		users = new ArrayList<String>();
		users.add(""foo"");
		users.add(""bar"");

		groups = new ArrayList<String>();
		groups.add(""Group"");
		groups.add(""A"");

		ids = new ArrayList<String>();
		ids.add(""id"");
		ids.add(""1-0"");
		ids.add(""0-1"");

		maxLimit = 0;
		maxAge = 180;
		minAge = 1;

		minLimit = 0;
		userMgr = new SimpleUserMgr();

		// read users from a db
		String res = userMgr.parse(""users"");
		res = res.replace(""["", """").replace(params(""userId""), """").replace(""]"", """");
		res = res.replace(""["", """").replace(""["", """").replace(""["", """");

		assertEquals(""Users not parsed properly"",
				new StringBuffer().append(""\tfoo\t\tbar\t\t\n""),
				res);
	}
	
	public String toString() {
			StringBuffer buff = new StringBuffer();
			StringTokenizer st = new StringTokenizer(export(), "","");
			while (st.hasMoreTokens()) {
				String name = st.nextToken();
				int age = st.countTokens();
				buff.append(name + ""-"" + age);
				if (age == 1) buff.append(""\n"");
			}
			buff.append(""\nusers: "" + users.size() +
					""\ngroups: "" + groups.size() +
					""\nmax(1) limit = "" + maxLimit + ""\nmax age = "" + maxAge +
					""\nmin(1) limit = "" + minLimit + ""\nmin age = "" + minAge);
			return buff.toString();
	}
	
	
}"
303f3983-36c6-410c-927b-9d777c5c6005,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModule.java,17.707781553268433,length,"// FilePolicyModule.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;

/**
 * This module represents a collection of files containing polices,
 * each of which will be searched through when trying to find a
 * policy that is applicable to a specific request. It does not support
 * policy references.
 * <p>
 * Note that this class used to be provided in the
 * <code>com.sun.xacml.finder.impl</code> package with a warning that it
 * would move out of the core packages eventually. This is partly because
 * this class doesn't represent standard functionality, and partly because
 * it isn't designed to be generally useful as anything more than an
 * example. Because so many people have used this class, however, it stayed
 * in place until the 2.0 release.
 * <p>
 * As of the 2.0 release, you may still use this class (in its new location),
 * but you are encouraged to migrate to the new support modules that are
 * much richer and designed for general-purpose use. Also, note that the
 * <code>loadPolicy</code> methods that used to be available from this class
 * have been removed. That functionality has been replaced by the much more
 * useful <code>PolicyReader</code> class. If you need to load policies
 * directly, you should consider that new class.
 *
 * @since 1.0
 * @author Seth Proctor
 */
public class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {

    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {
        // see if the URI is in fact a URL
        URL url = null;
        try {
            url = new URL(""file:"" + policyDir + idReference.toString() + "".xml"");
        } catch (MalformedURLException murle) {
            // it's not a URL, so we can't handle this reference
            return new PolicyFinderResult();
        }
        // try resolving the URL
        AbstractPolicy policy = null;
        try {
            policy = reader.readPolicy(url);
        } catch (ParsingException pe) {
            // An error loading the policy could be many things (the URL
            // doesn't actually resolve a policy, the server is down, the
            // policy is invalid, etc.). This could be interpreted as an
            // error case, or simply as a case where no applicable policy
            // is available (as is done when we pre-load policies). This
            // module chooses the latter interpretation.
            return new PolicyFinderResult();
        }
        // check that we got the right kind of policy...if we didn't, then
        // we can't handle the reference
        if (type == PolicyReference.POLICY_REFERENCE) {
            if (!(policy instanceof Policy))
                return new PolicyFinderResult();
        } else {
            if (!(policy instanceof PolicySet))
                return new PolicyFinderResult();
        }
        // finally, check that the constraints match ... note that in a more
        // powerful module, you could actually have used the constraints to
        // construct a more specific URL, passed the constraints to the
        // server, etc., but this example module is staying simple
        if (!constraints.meetsConstraint(policy.getVersion()))
            return new PolicyFinderResult();
        // if we got here, then we successfully resolved a policy that is
        // the correct type, so return it
        return new PolicyFinderResult(policy);
    }
}
","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {
// FilePolicyModule.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;

/**
 * This module represents a collection of files containing polices,
 * each of which will be searched through when trying to find a
 * policy that is applicable to a specific request. It does not support
 * policy references.
 * <p>
 * Note that this class used to be provided in the
 * <code>com.sun.xacml.finder.impl</code> package with a warning that it
 * would move out of the core packages eventually. This is partly because
 * this class doesn't represent standard functionality, and partly because
 * it isn't designed to be generally useful as anything more than an
 * example. Because so many people have used this class, however, it stayed
 * in place until the 2.0 release.
 * <p>
 * As of the 2.0 release, you may still use this class (in its new location),
 * but you are encouraged to migrate to the new support modules that are
 * much richer and designed for general-purpose use. Also, note that the
 * <code>loadPolicy</code> methods that used to be available from this class
 * have been removed. That functionality has been replaced by the much more
 * useful <code>PolicyReader</code> class. If you need to load policies
 * directly, you should consider that new class.
 *
 * @since 1.0
 * @author Seth Proctor
 */
public class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {

    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {
        // see if the URI is in fact a URL
        URL url = null;
        try {
            url = new URL(""file:"" + policyDir + idReference.toString() + "".xml"");
        } catch (MalformedURLException murle) {
            // it's not a URL, so we can't handle this reference
            return new PolicyFinderResult();
        }
        // try resolving the URL
        AbstractPolicy policy = null;
        try {
            policy = reader.readPolicy(url);
        } catch (ParsingException pe) {
            // An error loading the policy could be many things (the URL
            // doesn't actually resolve a policy, the server is down, the
            // policy is invalid, etc.). This could be interpreted as an
            // error case, or simply as a case where no applicable policy
            // is available (as is done when we pre-load policies). This
            // module chooses the latter interpretation.
            return new PolicyFinderResult();
        }
        // check that we got the right kind of policy...if we didn't, then
        // we can't handle the reference
        if (type == PolicyReference.POLICY_REFERENCE) {
            if (!(policy instanceof Policy))
                return new PolicyFinderResult();
        } else {
            if (!(policy instanceof PolicySet))
                return new PolicyFinderResult();
        }
        // finally, check that the constraints match... note that in a more
        // powerful module, you could actually have used the constraints to
        // construct a more specific URL, passed the constraints to the
        // server, etc., but this example module is staying simple
        if (!constraints.meetsConstraint(policy.getVersion()))
            return new PolicyFinderResult();
        // if we got here, then we successfully resolved a policy that is
        // the correct type, so return it
        return new PolicyFinderResult(policy);
    }
}

// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {
		
        public FilePolicyModuleTest() {

        }
    }
public static class FilePolicyFinder extends PolicyFinderModule {
	/**
	* Create a policy finder using the ""com.browsersoft.aacs.FileInputStream""
	* policy finder for parsing XML files.
	*
	* @param uri
	* @param versionConstraints
	* @param parentMetadata the parent metadata, used for resolving
	* the namespace URI of this policy to set the default
	* namespace (for example, <code>http://w3.org/ns/sxpolicy</code>).
	*
	* @return a new policy finder
	* @throws ParsingException
	*/
	public static PolicyFinder createPolicyFinder(PolicyReference uri, VersionConstraints versionConstraints, PolicyMetaData parentMetadata) throws ParsingException {
		PolicyFinderResult result = new PolicyFinderResult();
		PolicyFinderReader reader = new PolicyFinderReader();
		PolicyReader search = reader.readPolicy(new FileInputStream(uri.getURI(), -1));
		Matcher mat = search.getMatcher();

		// check that we got a matcher
		if (mat!= null) {

			// first, extract the URI to be set the target namespace name

			mat.setURI(search.findAll(mat).iterator().next().getURI());
			
			// now we expect the URI to be set
			Matcher resultMat = search.getMatcher();
			
			assertNotNull(result,"
9184559f-5e5f-482f-a8e6-352fab650cdf,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/User.java,52.5277099609375,stop,"// User.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;

/**
 * User class contains all the necessary attributes of a logged in user
 *
 * @author $Author: grodecki $
 * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class User implements Comparable, Serializable {

    public boolean checkDigest(String digest, String identity) {
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            // ignore the label
            digest = digest.substring(5);
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            // ignore the label
            digest = digest.substring(6);
        }
        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);
        byte[] hash = hs[0];
        byte[] salt = hs[1];
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        boolean valid = true;
        if (!MessageDigest.isEqual(hash, pwhash)) {
            valid = false;
            cat.warn(""doesn't match: "" + identity);
        }
        return valid;
    }
}
","// UserTest.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains one unit test case for the {@link User#checkDigest(String, String)} method.
*/
class UserTest {","// UserTest.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains one unit test case for the {@link User#checkDigest(String, String)} method.
*/
class UserTest {
/**
        *  constructor
        */
    	public UserTest() {
//        	hash = null; 			// this creates an implicit hash of 
        	sha = null;				// the SHA of the original identity
    	}

		/**	Constructor - creates a user and initializes its id.
		 *	@param name the name of the user, required.
		 */
    	public UserTest(String name) {
    		if (name == null)
				throw new IllegalArgumentException(""null name"");
			setIdentity(name);
		}

		/**	Constructor - creates a user and initializes its id.
		 *	@param name the name of the user, required.
		 * @param user the password for the created user.
		 */
    	public UserTest(String name, String user) {
    		if (name == null)
				throw new IllegalArgumentException(""null name"");
    		setIdentity(name);
			setPassword(user);
    	}

    	/**	Get the user name.
		*	@return the user name.
    	*/
    	public String getName() {
  			return getUser();
    	}

    	/**	Set the user name.
		*	@param name the user name.
    	*/
    	public void setName(String name) {
    		setIdentity(name);
    	}

    	/**	Get the identity which was used during the test.
		*	@return the user identity.
    	*/
    	public String getIdentity() {
  			return getUser();
    	}

    	/**	Set the identity which was used during the test.
		*	@param identity the user identity.
    	*/
    	public void setIdentity(String identity) {
	    	setUser(identity);
    	}

    	/** 	Get the password which was used during the test.
		 *	@return the password.
    	*/
    	public String getPassword() {
  			return getUser();
    	}

    	/**	Set the password which was used during the test.
		*	@param password the password.
    	*/
    	public void setPassword(String password) {
	    	setUser(password);
    	}

    	/** Get the User.get() returns a copy of the object.
		 * @return copy
		 */
    	public User get() {
    		if (getPassword().length() > 0) {
    			return new User(getName(), getPassword());
    		} else {
    			return new User(getName());
    		}
    	}
	
	}"
824667c7-2555-461d-8f83-604f35be65bf,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_0Test.java,53.32496523857117,stop,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }
}
","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps(String)} method.
*/
class Login_0Test {","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps(String)} method.
*/
class Login_0Test {

	@Test
	public void testGetProps( ) {
	int s = 0;
        try {
            s = getProps().size();
        } catch (ParseException e) {
            fail(""Failed!"");
        }
        assertEquals(1, s);
	}
	public void testGetPropsAsString( ) {
		Properties p = getProps();
		String s = (String)p.get(""Login"");
		assertEquals(""LoginString"", s);
	}
	
	@Test
	public void testGetLog4J( ) {
		Logger.getRootLogger().setLevel(Level.ALL);
		logger.warn(Login.getProps(""log4j.xml"").toString());
	}
	
	@Test
	public void testGetLog4JAsString( ) {
		Logger.getRootLogger().setLevel(Level.ALL);
		logger.warn(""log4j.xml as String:""+Logger.getContext().toString());
	}
	
	private static final Logger logger = Logger.getLogger(Login.class.getName());
	
    @Test
    public void testGetXOPolicy( ) {
        try {
            RequestBuilder rb = new RequestBuilder(""http://foo"");
            setParam(rb,""xopolicy"",""XORequestXOA"");
            RequestCtx r = rb.get();
            assertEquals(XOPolicy.XORequestXOA.toString(),r.getXopolicies().toString());
            RequestBuilder sub = createRequestBuilder(""https://foo.com"");
    	    RequestCtx subRb = sub.get();
            Iterator<XOPolicy> iter = r.getXopolicies().iterator();
            subRb.setParameter(""xopolicy"",iter.next().toString());
            iter.next();
        } catch (LoginException e) {
            fail(""Failed!"");
        }
    }
	/**
	* Check value of {@link Login#setConfigFile(String)} property.
	*/
	public void testGetConfigFile( ) {
		File newConfigFile = new File(""/tmp/aaa.conf"");
        try {
            newConfigFile.deleteOnExit();
        } catch (SecurityException e) {
            fail(""SecurityException can't delete"");
        }
        setConfigFile(newConfigFile.getCanonicalPath());
        if (newConfigFile.exists()) {
            if (!newConfigFile.canDelete()) {
                fail(""Failed to delete:""+newConfigFile.getName());
            }
        }
        boolean exists = newConfigFile.exists();
        if (!exists) {
            fail(""Failed to create new config file:""+newConfigFile.getName());
        }
	    System.out.println(newConfigFile.getAbsolutePath());
        String configFile = newConfigFile.getAbsolutePath();
        Logger.getRootLogger().addAppender(
        		new FileAppender(new SimpleLayout(), ""\n%n%"", configFile, true, true));
        for (String prop : getProps().size()) {
            if (prop.startsWith(""Login."")) {
                Logger.getRootLogger().removeAppender(configFile);
                propsChanged(prop);
                configFile = newConfigFile.getAbsolutePath();
            }
        }
        Logger.getRootLogger().removeAppender(configFile);
	}

    /**
     * If this file existed, it would also exist.
     */
    private void propsChanged(String prop) {
        Properties p = getProps();
        StringTokenizer st = new StringTokenizer(prop,""="");
        String p1 = st.nextToken();
        String p2 = st.nextToken();
        System.out.println(st.nextToken());
        if (p1.startsWith(""Login."")) {
            String login = p1.substring(""Login."".length());
            String logins = p2;
            if (logins.startsWith(""Login:"")) {
                logins = logins.substring(6);
            }
            for (String sLogin : logins.split("","")) {
                if (!login.equals(sLogin.trim().toLowerCase())) {
                    System.out.println(""login changed to ""+login+"" (no. of occurences ""+nOccurences(logins)+"")"");
                    p.put(login,logins);
                }
            }
        }

    /**
    * Get number of occurences that a login parameter changed.
    *
    */
    private int nOccurences(String s) {
        String tokens = s.split("":"");
        return tokens.length;
    }
}
"
5fdd0647-f52b-4bdb-bd28-5777b047aa61,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_1Test.java,53.70627474784851,stop,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public static Properties getProps() {
        init();
        return props;
    }
}
","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps()} method.
*/
class Login_1Test {","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps()} method.
*/
class Login_1Test {

    // Set the current user's name.
   	private SimpleDateFormat sdf = new SimpleDateFormat(XACML3_USER_NAME, ""dd/MMM/yyyy"");
    // Get the current user's name.
        private String CURRENT_USER_NAME = getUserName();

        // Logout case when there is none.
   	   public Login.Login(String username) {
   	        System.out.println(username);
   	        RequestBuilder builder = new RequestBuilder();;
   	        builder.newPDRequest().newSetResponse().newGet()
   					.newIndenter().newIndenter().newIndenter().get()
   					.setXOP(true).setXOPEnabled(true).build()
   			.newIndenter().newIndenter().newIndenter().setXOP(true).setXOPEnabled(true).build()
   					.setAuthMethod(XACML_AUTH_METHOD).setAuthenticator().setPasswd(""password"").build();
   	        RequestCtx req = builder.build();
   	        ResponseHandler handler = new ResponseHandler();
   	        try {
   	            Set<String> success = new HashSet<>();
   	            success.add(handler.getResponse().toString());
   	            System.out.println(""XOP enabled and success in response: "" + success);
   	        } catch (Exception e) {
   	            throw new AssertionError(e.getMessage());
   	        }
   	        this.props = builder.end().build();
   	    }
    
 /*   		public String getCurrentUserName() {
   			RequestBuilder builder = new RequestBuilder();
   			builder.newPDRequest().newGet().newIndenter().newIndenter().newCond().setXOP(true).newCond().get();
   			ResponseHandler handler = new ResponseHandler();
   			try {
   	            Set<String> success = new HashSet<>();
   	            success.add(handler.getResponse().toString());
   	            System.out.println(""XOP enabled and success in response: "" + success);
   	        } catch (Exception e) {
   	            throw new AssertionError(e.getMessage());
   	        }
    		Properties props = (Properties)builder.end().get().buildProps();
   			Calendar calendar = Calendar.getInstance();
   			Calendar calendar2 = Calendar.getInstance();

    			String current_user = props.getProperty(XACML3_USER_NAME);
    			Calendar ct_current_user = Calendar.getInstance();
    			ct_current_user.set(0, Calendar.DATE, ct_current_user.get(Calendar.YEAR) - 1);
    			calendar.setTime(ct_current_user.getTime());

    			String current_tz = props.getProperty(XACML_USER_TZID);
    			Calendar ct_current_tz = Calendar.getInstance();
    			ct_current_tz.setTime(ct_current_user.getTime());
    			calendar2.setTime(ct_current_user.getTime());

    			String current_tz2 = current_tz;
    			System.out.println(""Using user's TZID "" + ct_current_tz.getTimeInMillis());
    			calendar.setTime(current_tz, Calendar.DATE, 11);
    			calendar.setTime(current_tz2, Calendar.DATE, 11);
    			calendar.setTimeZone(java.security.Security.getProvider(""JVM"").getTimeZone());
    			calendar2.setTimeZone(java.security.Security.getProvider(""JVM"").getTimeZone());

    			if (calendar.get(Calendar.YEAR)!= calendar2.get(Calendar.YEAR))
    			{
    				System.out.println(""Current Date changed."");
    			}
    			if (calendar.get(Calendar.DAY_OF_YEAR)!= calendar2.get(Calendar.DAY_OF_YEAR))
    			{
    				System.out.println(""Current Date changed."");
    			}
    			if (calendar.get(Calendar.MONTH)!= calendar2.get(Calendar.MONTH))
    			{
    				System.out.println(""Current Date changed."");
    			}
    			if (calendar.get(Calendar.HOUR_OF_DAY)!= calendar2.get(Calendar.HOUR_OF_DAY))
    			{
    				System.out.println(""Current Date changed."");
    			}
    			if (calendar.get(Calendar.MINUTE)!= calendar2.get(Calendar.MINUTE))
    			{
    				System.out.println(""Current Date changed."");
    			}
   				String response = sdf.format(calendar.getTime());
    			String response2 = DateBuilder.convertTime(calendar2.getTime().getTime());
    			ResponseHandler handler2 = new ResponseHandler();
    			try {
    	            System.out.println(""Date converted from current time to "" + response2);
    	            Set<String> success2 = new HashSet<>();
    	            success2.add(response2);
    	            System.out.println(""Success2 returned: "" + success2);
    	            
    	        } catch (Exception e) {
    	            throw new AssertionError(e.getMessage());
    	        }

    		}
  */
    public void login() throws LoginException {
    		
    		new Login.Login(CURRENT_USER_NAME);
    }
}
"
750e8223-afb0-4c8b-a917-22d43c95a06f,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_2Test.java,53.619558572769165,length,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }
}
","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {
private static final Logger LOG =
				Logger.getLogger(Login_2Test.class);
	
	/** Test case for {@link Login#getSecurityLogFilePath()}. */
	@Test
    public void getSecurityLogFilePath() {
           
		File logFile  = new File(securityLogFilePath);
		logFile.delete();

        FileAppender simpleLogFileAppender = new FileAppender();
        simpleLogFileAppender.setName(""System Logs"");
        simpleLogFileAppender.setEncoding(""UTF-8"");
        simpleLogFileAppender.setFormatter(new SimpleLayout());

		LOG.log(Level.INFO, ""Created test log file at: ""+logFile.toString());
		LOG.log(Level.INFO, ""This is the INFO level."");
              for (int i = 0; i < 5; i++) {
                String line[] = {""line_""+i+""  "", ""line: line_""+i};
                  simpleLogFileAppender.append(SimpleDateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL) +"" ""+line[0]+"" : ""+line[1]);                
             }                      
           
         java.util.Date logDate = new java.util.Date();        
         logDate.setTime(logDate.getTime() - 1);        
         Set<String> securityLogFiles = new HashSet<>();
         securityLogFiles.add(logFile.toString());

        String lineSeparator = System.getProperty(""line.separator"");
        long time = timeMillis();
        for (Iterator<String> logLine = securityLogFiles.iterator(); logLine.hasNext();){
           String logLineToConvert = (logLine.next() == null? """" : logLine.next());
                if (logLineToConvert.endsWith(lineSeparator) ){
                    // the log line should be formatted according to the date and time the log lines are in.
                    if (logLineToConvert.contains(lineSeparator + ""\n"")) {
                        // remove last lineSeparator and it at the end of the line
                        String logLineToSplit[] = logLineToConvert.split(lineSeparator);
                        String timestamp = logLineToSplit[0];
                        String text = logLineToSplit[1];
                        
                        // remove the last text with an underscore
                        if (logLineToSplit.length > 1) {
                            text = text.substring(0, text.length()-1);
                        }
                        
                        RequestCtx context = new RequestCtx();
                        context.get(""xacmlID"");
      
                        return logLineToSplit[0] + ""(""+text+"")"" + requestIDtoPid(context) + "": "" + context.getRequestId();                        
                    }
                }
        }
        return """";
      }
      
	/** Return the id of request being used.
	 * @param context the request context
	 * @return the id for the request being used
	 */
      protected String requestIDtoPid(RequestCtx context) {
              //the id is ""urn.browsersoft.xacml.aacs.com.browsersoft.aacs.server.authz.RequestContext""
              Properties props = context.getProperties();               
              return context.getId(); 
      }
      
	private long       timeMillis(int times) {
		Calendar cal  = Calendar.getInstance();
		cal.setTimeInMillis(time);
      
		for (int i =0; i < times; i++) {
			Date date = cal.getTime();
			date.setTime((int)cal.getTime().getTime() - (cal.getTime().getTime() / 1000));
		}
         
		cal.setTime(new Date());

		return cal.getTimeInMillis();    
	}
	/**
	* Test for {@link Login#createSecurityLog(XACml)}.
	* It calls {@link Login#createSecurityLog(XACml)} method 
	* for a request which is added by a {@link RequestBuilder} object. 
	* @throws LoginException when the error occurs 
	*/
   @Test
   public void testSecurityLog_1() throws LoginException {   
       // we add a new request to the securityLogs
       XACml request = new RequestBuilder()
          .setXACML_VERSION(XACML_VERSION)
          .setIndenter(new Indenter())
          .setCipherAlgorithm(""AES128"")
          .setSignatureAlgorithm(""SHA-1"")
          .createNew(request.getId(), request.getVersionEnum());

           // we add a new request to the securityLogs
           XACml request2 = new RequestBuilder()
          .setXACML_VERSION(XACML_VERSION)
          .setIndenter(new Indenter())
          .setCipherAlgorithm(""AES128"")
          .setSignatureAlgorithm(""SHA-1"")
          .createNew(request2.getId(), request2.getVersionEnum());

           // we add a new request to the securityLogs
           XACml request3 = new RequestBuilder()
          .setXACML_VERSION(XACML_VERSION)
          .setIndenter(new Indenter())
          .setCipherAlgorithm(""AES128"")
          .setSignatureAlgorithm(""SHA-1"")
          .createNew(request3.getId(), request3.getVersionEnum());

           XACml request4 = new RequestBuilder()
          .setXACML_VERSION(XACML_VERSION)
          .setIndenter(new Indenter())
          .setCipherAlgorithm(""AES128"")
          .setSignatureAlgorithm(""SHA-1"")
          .createNew(request4.getId(), request4.getVersionEnum());

        // we add a new request to the securityLogs
        XACml request5 = new RequestBuilder()
       .setXACML_VERSION(X"
556627dd-7e56-4fab-9e4c-5a1dcde112d2,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_3Test.java,24.17236828804016,length,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }
}
","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {
// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart()!= null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart()!= null) && (user.getPassrenewal()!= null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips()!= null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps!= null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }
}

// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {
		private static String userid = ""root"";
		private static String ipAddr = ""192.168.0.10"";
		private static String pw = ""123456"";
		private static String ipAddrAcl = ""/test/acl"";
		private static Boolean b = Boolean.FALSE;
		private static Boolean isActiveGrp = Boolean.FALSE;
		private static String pw1 = pw;
		private static String user2 = ""root2"";
		private static String pw2 = ""abcdefg"";
		private static String pw3 = ""asdgefj"";
		private static String user3 = ""root3"";
		private static String pw4 = ""asdbgf"";
		private File xacmdir;
		private static Boolean cb;
		private static LDAPService lservice;

		/**
		* Initialize the instance variables.
		*/
		public Login_3Test() {
			//set a temporary directory
			String tempdir = System.getProperty(""java.io.tmpdir"");
			xacmdir = File.createTempFile(""A"", "".xml"", new File(tempdir));
		}

		/**
		* Returns user ids from properties file.
		*
		* @param xml The user ids.
		* @return
		* @precondition The properties file must have at least one user id.
		* @postcondition {@link Properties} contains one instance of {@link Properties} with a single user id.
		*/
		private static String[] getUserIds(String xml) {
			String[] ret = new String[1];
			try {
				ret = xml.split(""="");
				Set<String> userids = new HashSet<>();
				setProperties(userids);
				return ret;
			}
			catch (Exception e) {
				e.printStackTrace();
				return new String[0];
			}
		}

		private void setProperties(Set<String> userids) {
			if (userids == null) {
				userids = new HashSet<String>();
			}
			Set<String> unsetUsersIDs = userids;
			userids.remove(userid);
			userid = userids.iterator().next();
			setIn"
674f48b4-0711-4218-b914-3ca5eec532a3,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_4Test.java,49.84031867980957,length,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }
}
","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {
// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "",userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }
}

// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {
		
    public User authenticate() throws LoginException {
        userid = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (username == null)
            throw new LoginException(""Username not supplied"");
        if (!userMgr.checkSecret(username, password, authType)) {
            this.cat.warn(""Invalid username/Pass phrase for user: "" + username);
            throw new LoginException(""Invalid password/Passphrase"");
        }
        userid = userMgr.getUser().getUniqueId();
        authorize();
		return userMgr.getUser();
    }
	
    public void authorize() throws LoginException {
               
    }
  
	@Test
	public void loginAuthTest() throws LoginException {
        Properties authTypeProperties = new Properties();
        authTypeProperties.setProperty(""auth_level"", ""2"");
        authTypeProperties.setProperty(""auth_type"", """" );
        
        
        
        Logger logger = Logger.getRootLogger();
        logger = Logger.getLogger(""Login"");       
        SimpleDateFormat parser = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        parser.setTimeZone(TimeZone.getTimeZone(""GMT""));
       
        
		Logger.getLogger(""Global"").setLevel(Level.getLevel(""error""));
		
        
        if ((username == null) && (password == null))
            // username/password not given. Login and error 
            throw new LoginException(""Please provide one of the parameters."");
        if (username == null)
        	 username = ""testuser:"";
        
		DateFormatFactory dateFormatFactory = new DateFormatFactory(logger);
	    SimpleDateFormat dFormat = new SimpleDateFormat(""EEE, dd-MMM-yyyy 15:04:05"");       
	    
	    StringBuilder sb = new StringBuilder(""User"");
    	if (username.equalsIgnoreCase(""testuser:"") && password.equalsIgnoreCase(""testuser:testuser:password"")) {
    		sb.append("" "").append(""User1 "");
    		sb.append(""User2 "");
    	}
    	else {
    		sb.append(""User "");        
    		sb.append(username);
    		sb.append("" "");        
    		sb.append("""");
    	}    	   
        logger.warn(""username=""+username+"" password=""+password);
        RequestCtx ctx = makeCtx();
        RequestBuilder rb = new RequestBuilder(RequestFactory.GET, ""/login?auth_type=3"");
        RequestCtx r = rb.build(ctx, authTypeProperties);
        Set<String> errorsCtx = new HashSet<String>();
        try {
        	rb.buildCtx(ctx, r);
    		rb.createCtx(r);
        	if (rb.isValid()!= 1)
    			throw new LoginException(""Invalid Request"");
    			    
        	user = rb.getResult();
        	this.cat.logDebug(""The User: "" + user.getUniqueId() + "" "" + user.getPassword());
    		this.cat.logDebug(""RequestCtx: "" + ctx);
    		try {
        		requestCtx = ctx;
        		requestBuilder = new RequestBuilder(RequestFactory.PUT, user);
        		try {
        			requestBuilder.getRequestCtx(requestCtx);
        			logger.error(""Checking username "" + username + "" password"");
        			
        		} catch(RequestException e) {
							if (errorsCtx.add(e.getName()+"":""+e.getMessage())) return;
    				}
        		this.cat.logDebug(""requestBuilder.getRequestCtx(requestCtx) = ""+requestBuilder.getRequestCtx(requestCtx));
        		this.cat.logDebug(""requestBuilder.buildCtx(requestCtx) = ""+requestBuilder.buildCtx(requestCtx));
        		boolean ctxValid = rb.processCtx(requestCtx);
        		if (!ctxValid) return;
        		// this.cat.logDebug(""requestBuilder.processCtx(requestCtx) = ""+requestBuilder.processCtx(requestCtx));
        		requestCtx = requestBuilder.buildCtx(requestCtx);
        		return;
    		} catch (Exception e) {
							System.err.println(""Exception: "" + e.getMessage());
							requestCtx = requestBuilder.buildCtx(requestCtx);
    			throw new LoginException(e.getMessage());
    		}
			
    		rb.processCtx(requestCtx);
    		requestCtx = requestBuilder.buildCtx(requestCtx);
    		if (!rb.isValid()) return;
    		user = rb.getResult();
    		
			this.cat.logDebug(""Got the User: ""+user.toString());
			this.cat.logDebug(""The User: ""+user.getUniqueId());
			this.cat.logDebug(""User type "" + user.getUserType()+"" user_type[""+user.getUserTypeId()+""] users[""+user.getUsername()+""] password("" + user.getPassword()+ "") username("" + user.getUsername()+"")"");  		
			if (userMgr.hasPassword(user.getUsername"
33a68e85-9d66-48d4-81c2-d0658fc2821f,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_0Test.java,35.728819608688354,length,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }
}
","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user!= null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }
}

// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {
		
	/**
	 * No tests to run.
	 */
	@Test public void noTests() {
	}
	
	/** 
	 * Returns the configured username.
	 * @return ""testUser""
	 */
	public String getUsername() {
		return username;
	}
	
	/** 
	 * Returns the configured password.
	 * @return ""testPassword""
	 */
	public char[] getPassword() {
		return password;
	}
	
	/** Test method for {@link AACSLoginModule#login()}.
	 * This test uses the LoginModule.login() but does not make calls to the provider. */
	@Test public void testNullLoginModule() {
		String authname = ""testUser"";
		// login with no user name
		Login.login(authname, null);
		User user = new User(authname);
		// login with user name different than testUser
		try {
			Login.login(authname, new char[]{'y','o'});
			fail(""LoginException not thrown"");
		} catch (LoginException le) {
			// TODO Auto-generated catch block
			le.printStackTrace();
			// ok
		}
	}
	
	/** Test method for {@link AACSLoginModule#LoginAuthentication}.
	 * This test runs the test without a PasswordCallback parameter.
	 * The expected outcome is that Login.authenticate() fails. */
	@Test public void testLoginFailure() {		
		// login with a null password
		login = new Login(null);
		login.setPassword(new char[0]);
		fail(""LoginException does not throw, Login module returned null password"");
	}
	
	/** Test method for {@link Login#authenticate(String)}.
	 * This test runs the test using a null user name.
	 * No exceptions are thrown. We should be able to complete the test without any issues. */
	@Test public void testNullUser() {		
		// authenticate with a null user name
		login = new Login(null);
		try {
			login.authenticate(null);
			fail(""LoginException does not throw if test user is null"");
		} catch (LoginException le) {
			// ok
		}
	}
	
	/** Test method for {@link Login#getAuthenticatedSubject(String)}.
	 * This test runs the test using a null user name.
	 * No exceptions are thrown. We should be able to complete the test without any issues. */
	@Test public void testNullUserNullSubject() {		
		// authenticate with a null user name
		login = new Login(null);
		try {
			User user = login.getAuthenticatedSubject(null);
			fail(""LoginException does not throw if test user is null"");
		} catch (LoginException le) {
			// ok
		}
	}
	
	/** Test method for {@link java.security.Principal#getName()}.
	 * This test runs the test using a null user name.
	 * No exceptions are thrown. We should be able to complete the test without any issues. */
	@Test public void testNullUserNullName() {		
		// test anonymous principal
		login = new Login(null);
		Principal anonymousPrincipal = login.getAuthenticatedSubject(""anonymous"");
		fail(""LoginException does not throw if test user is null"");
	}
	
	/** Verify that an anonymous principal is returned.
	 * The returned principal is anonymous.
	 * No exceptions are thrown. We should also be able to complete the test without any issues. */
	@Test public void testAnonymAnonymousPrincipal"
c87d81e3-f8d3-43a5-bb50-3d7dd990b3f2,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_1Test.java,45.70853137969971,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }
}
","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }
}

// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {
		private static String username;
		private static String password;
		private static String testUser;
		private static String testPassword;

		public static void setUp(
		   	@SuppressWarnings(""hiding"") User user,
		   	@SuppressWarnings(""hiding"") String testUser,
		   	@SuppressWarnings(""hiding"") String testPassword) {
			UsernamePasswordToken token = new UsernamePasswordToken(
           		testUser,
           		testPassword);
          login(user, token);
		}
		
		// Test method of {@link #setUp(@SuppressWarnings(""hiding""))}
        public static void tsetUp(@SuppressWarnings(""hiding"") String testUser, @SuppressWarnings(""hiding"") String testPassword) throws LoginException {
			setUp(new User(testUser), testPassword, null);
		}

/**
 * Test method of {@link #setUp(char[], CallbackHandler)}.
 * It tests that the LoginModule rejects a call to {@link #commit()} which
 * never succeeds.
 *
 * @throws LoginException if something in the authentication attempt
 * failed.
 */
    @Test(expected=LoginException.class)
    public void test_setUp() throws LoginException {
        setUp("""", null, """");
    }
    
    /**
     * Test method of constructor initializer.
     */
    @Test
    public void test_init() throws Exception {
        setUp(username, password, null);
    }
    
    /**
	 * Test method of {@link #setUp(CallbackHandler)}.
	 */
	@Test(expected=IOException.class)
	public void test_setUp_1() throws Exception {
		setUp(new CallbackHandlerAdapter() {
		}.setReturningLoginName(""username""));
	}

		@Override
		public boolean prompt(Callback[] callbacks, Info info) {
			return true;
		}

        @Override
        public boolean commit(Callback[] callbacks, Info info,
                SecureStore secureStore) {
			return false;
        }






}
"
b22bbeda-b982-4b74-8653-303411bd22f1,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_2Test.java,50.735891819000244,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }
}
","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password!= null) {
                for (int i = 0; i < password.length; i++) password[i] ='';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }
}

// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {
		
	/**
	*  Test the class constructor.
	*/
    public AACSLoginModule_2Test(){
        super();
    }

	/**
	* Tests that the password is null.
	*/
    @Test
    public final void testCnullPassword() throws LoginException {

        // login fail (no password match)
        assertTrue(getLoginFailCause().equals(AACSPrincipal.NULL_KEY));

        // login successful
        assertTrue(succeeded);

    }
}
"
fe0c973d-8ae3-4e3c-8e1b-eb8e1891edfe,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_3Test.java,51.81571364402771,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password!= null) {
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}

// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {
		private static String ach_testProperty;
		
		static {
			String line = null;
			File achFile = createFile(""ACH_test.properties"");
			try {
				line = achFile.getContent().trim();
				ach_testProperty = line;
			} catch (IOException ioe) {};
		}
		
		private static final String username = ""testUser"";
		
		@Test
		public void testLogin() throws LoginException {
			login();
			LoginContext loginContext = new LoginContext(login.getLoginModContextName(), principal, new JAASCallbackHandler(null, null, null));
			loginContext.login();
			assertNull(authenticated);
			User user = new User(""Test"");
			assertSame(authenticated, user); // check returned value
			assertEquals(ach_testProperty, user.getProperty(UserAuthProperties.PASSWORD));
			assertEquals(_user, principal);
		}
}"
