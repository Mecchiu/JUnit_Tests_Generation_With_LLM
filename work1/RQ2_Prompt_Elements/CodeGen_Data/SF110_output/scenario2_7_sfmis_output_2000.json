[
{
    "choices": [
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t/**\n\t\t * \n\t\t * \n\t\t * @param pFile\n\t\t * @param pParams\n\t\t * @return\n\t\t */\n        public String getParams(String pFile, List<String> pParams){\n            String pQuery = null;\n            pQuery = pFile + pFile;\n            pQuery += \"?param1 in (?,?)\";\n            pQuery += \" or \".concat(pFile.charAt(0), pFile.charAt(1));\n            pQuery += \" order by? order by param1\";\n            pQuery += \", par1 asc\";\n            pQuery += \"\";\n            pQuery += \"\";\n            pFile += pFile.charAt(0);\n            String[] pAryArray = pFile.split(\",\");\n            List pList = new ArrayList();\n            for (int i = 0; i < pAryArray.length; i++) {\n                pAryArray[i] = pList.size() + \"/?\";\n                pList.add(pAryArray[i]);\n            }\n            pQuery = pQuery.concat(\",\" + pFile.charAt(0));\n            pParams = pList;\n            return pQuery;\n        }\n\n    @Test\n    public void testDataWithSql() {\n        assertTrue(\"\u6570\u636e\u6ca1\u6709\u7edf\u8ba1\uff0c\u8ffd\u52a0\u6570\u636e\", true);\n        String pfile = \"Data.xml\";\n//        HibernateUtils.addFile(myUtil, pfile);\n        String file = LoaderUtil.FileUtil.getFileByName(pfile);\n//        File file = LoaderUtil.FileUtil.getFileByName(\"Data.xml\");\n        assertTrue(file, file.exists());\n        System.out.println(pfile);\n        Element root = null;\n        HibernateUtils.init();\n        root = new SAXReader().read(file);\n        List sql = new ArrayList();\n        sql.add(\"name\");\n        sql.add(\"price\");\n        sql.add(\"start_time\");\n        sql.add(\"end_time\");\n        Query q = new Query();\n        q.setResult(root);\n        for (Iterator i = q.iterate(); i.hasNext(); ) {\n            Element el = (Element) i.next();\n            String param = null;\n            List params1 = null;\n            params1 = LoaderUtil.setParams(el, sql);\n            if (params1!= null) {\n                Iterator iter = params1.iterator();\n                while (iter.hasNext()) {\n                    param = (String) iter.next();\n                }\n            }\n            Element el2 = new Element(el.getName(), LoaderUtil.getType());\n            el.add(el2);\n            param = param == null? \"\" : param;\n            el2.add(new Element(\"par1\", param));\n            param = null;\n        }\n        String pfile2 = \"Tmp2.xml\";\n        File file2 = LoaderUtil.FileUtil.getFileByName(pfile2);\n        assertTrue(file2, file2.exists());\n        String xml = LoaderdUtil.toXml(file);\n        xml = xml.replaceAll(\"<\", \"&lt;\");\n        xml = xml.replaceAll(\">\", \"&gt;\");\n        assertTrue(xml, xml.equals(pfile));\n        System.out.println(\"**********\" + pfile2 + \"************\");\n        HibernateUtils.dropAll(this.session);\n        HibernateUtils.commitTransaction(this.session);\n        HibernateUtils.clearCache();\n        System.out.println(\"\u6e05\u9664\");\n        HibernateTemplate template = new HibernateTemplate(this.session);\n        template.setMapKeyColumn(3);\n        String pFile = \"Data.xml\";\n        System.out.println(\"**********\" + pfile + \"************\");\n        File tempFile = new File(\"E:/Data\");\n        String[] sArray2 = tempFile.list();\n        for (int i = 0; i < sArray2.length; i++) {\n            if (sArray2[i].startsWith(\"Data\")) {\n                File path2=new File(this.session.getType(sArray2[i]));\n                File path = null;\n                try {\n                    path = new File(path2,pFile);\n                    File file = new File(path,\"tmp2\");\n                    if (path!= null) {\n                        template = new DaoTemplate(this.session,this.session.getType(\"Data2\"));\n                    } else {\n                        template = new DaoTemplate(this.session,this.session.getType(\"tmp2\"));\n                    }\n                    List<Object> result2 = template.executeFindByExample(\"Example2.xml\",new Object[]{\"E_1\",2.0+0.0,0.0+1.0,10.0-2.0,5.0+0.0,1.0+0.0=0.0,5.0+0.0=0.0,1.0+1.0=0.0,5.0+1.0=0.0,.0+0.0=0.0,10.0-2.0=1.0,4.0+0.0=11.0\"},sArray2[i]);\n                    this.setRs(result2);\n                }\n                catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        HibernateUtils.clearCache();\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\tint id, dId;\n\t\tString file, dId2;\n\t\tList rows;\n\t\tList<String[]> parms, pas;\n\t\tString[] pas2;\n\t\t\t\t\n\t\tpublic LoaderTest() {\n        }\n\t}\n \n/**\n* Test suite of {@link Loader} class.\n*/\n@SuppressWarnings(\"empty-test\")\npublic class LoaderTestSuite {\n    @Test\n    public void testLoadDataWithSql() {\n        //create table TestTableWithSql\n    \ttry {\n\n    \t    SAXReader reader = new SAXReader();\n    \t    Document document = reader.read(\"src/main/java/com/hf/sfm/util/TestTableWithSql.xml\");\n    \t    Element root = document.getRootElement();\n    \t    this.setRows(root);\n    \t    System.out.println(\"TestTableWithSql.xml\");\n    \t    \n        \tassertTrue(\"1 test case failed\", rows.size()>0);\n\n    \t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (DocumentException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t\n\t/**\n\t* The following code is generated as test code.\n\t* For each object field in the super field of the class, a new parameter named field\n\t* in parameters are defined (i.e., a new method call parameter named param) then\n\t* the resulting code is executed to be tested against.\n\t*/\n\t\n\t/**\n\t* The following code is generated as test code.\n\t* For each object field in the super field of the class, a new parameter named field\n\t* in parameters are defined (i.e., a new method call parameter named param) then\n\t* the resulting code is executed to be tested against.\n\t*/\n    @Test\n    public void generateTest() {\n        /*\n        // Load objects parameter field\n        field=new Object();\n        */\n    }\n\t\n    private List getRs() {\n        return (List) session.createQuery(\"select x.*\").list();\n    }\n    \n    private void getParams(String queryString, List paramList) {\n\t    // create query as getSql()\n\t    HibernateSessionFactory.closeSession();\n\t    Query q = session.createQuery(queryString);\n\t    // query list\n\t    paramList.addAll(q.list());\n\t    HibernateSessionFactory.closeSession();\n    }\n\t\n    private Query getQuerySql() {\n        HashMap sqlHash = new HashMap();\n\t\tsqlHash.put(\"order by\", dir);\n\t\tsqlHash.put(\"start\", start);\n\t\tsqlHash.put(\"dir\", dir);\n\t\tsqlHash.put(\"paging\", paging);\n        return session.createSQLQuery(\"from SqlObject x1 where \"+sqlHash+\" order by \"+dir+\" limit \"+start+\" \"+dir+\" \"+paging);\n    }\n\t    \n    private List getData(String fieldName, List parameterList, int start, int limit, String dir) throws ParseException {\n        HibernateSessionFactory.closeSession();\n        Query q = null;\n        // create query as getSql()\n        HashMap sqlHash = new HashMap();\n\t\tsqlHash.put(\"order by\", dir);\n\t\tsqlHash.put(\"start\", start);\n\t\tsqlHash.put(\"range\", \"0 to \"+start+\" \"+dir);\n        sqlHash.put(\"limit\", limit);\n        sqlHash.put(\"sql\", fieldName);\n        // create query\n        q = session.createSQLQuery(\"from SqlObject x1 where \"+sqlHash+\" where \"+fieldName+\">0\")\n        \t\t.setFirstResult(start)\n        \t\t.setMaxResults(limit);\n        // use the list parameter\n        Iterator iterator = parameterList.iterator();\n        while (iterator.hasNext()) {\n            List list = (List) iterator.next();\n            assertNotNull(list);\n            Iterator elements = list.iterator();\n            int count = 0;\n            while (elements.hasNext()) {\n                List x = (List)elements.next();\n                assertNotNull(x);\n                // check length equal to numberOfElements\n                assertEquals(count, x.size());\n            } \n            // check length equal to  Limit\n            count = x.size();\n            if (count > limit) {\n                // reset the count and start at 0\n                count = 0;\n                start = 0;\n            }\n            // reset limit\n            limit = count;\n        }\n        // use the session as result\n\t\tquery = q;\n\t\t\n        return query.list();\n    }\n    public String getFileDate(){\n        ArrayList x = new ArrayList();\n        Iterator iterator = getData(\"file_date\", x, 0, 1000,dir);\n        while (iterator.hasNext()) {\n            List array = (List)iterator.next();\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            String date = sdf.format(array.get(0));\n            System.out.println(\"---\"+ date);\n            String tm = sdf.format(array.get(1));\n            System.out.println(\"--\"+ tm);\n        }        \n        String date = null;\n        try {\n            date = getData(\"file_date\", x, 1, 1,dir);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return date;\n    }\n    public static void main(String[] args) {\n        try {\n            HibernateSessionFactory.getSessionFactory().configureCriteria(new HashMap());\n            if (args[0].toLowerCase().endsWith(\".sql\")) {\n                SAXReader saxReader = new SAXReader();\n                try {\n                    File file = new File(args[0]);\n                    Document doc = saxReader.read(file);\n                    List x = (ArrayList) query.list();\n                    //String file_date=\"2015-02-05\";\n                    String s = this.getFileDate() + \"|\" + x + \"/\"+ sdf.format(file.lastModified());\n                    System.out.println(\"Sql: \"+s);\n                } catch (DocumentException x) {\n                    x.printStackTrace();\n                }\n            } else{\n                List x = LoaderTest.getData(\"list_of_parameters\", null);\n                Iterator iterator = x.iterator();\n                while (iterator.hasNext()) {\n                    List array = (List)iterator.next();\n                    System.out.print(\"[\"+array.get(0)+\"-\"+array.get(1) +\"-\"+ array.get(2) +\"-\"+ array.get(3) +\"] \");\n                }\n            }\n            //System.exit(0);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t  \n    @Test\n    void test() {\n \t\t  loader.loadDataWithSql();\n    }\n\n}// class LoaderTest\n// End of LoaderTest.java\n\nclass LoaderTest2 {\n    HibernateSessionFactory theSessionFactory;\n\n    StringBuffer theQuerySql;\n    HibernateSession currentSession;\n\n    public LoaderTest2() throws HibernateException {\n        loader = new Loader(new SessionFactory(new HibernateSessionFactory()));\n    }\n\n    public Loader getLoader() {\n        return loader;\n    }\n\n    void initSession() throws HibernateException {\n        assertNotNull(theSessionFactory);\n        currentSession = theSessionFactory.openSession();\n        theQuerySql = new StringBuffer();\n\n    }\n\n    void setParamSql(String queryParams) {\n        this.sql = queryParams;\n    }\n\n    String getWhere() {\n        return theQuerySql.toString();\n    }\n\n    public void setParams(String sql, String pas) {\n        this.sql = sql;\n        this.pas = pas;\n    }\n\n    String getWhere(String pas) {\n        if (pas == null) {\n            return this.sql;\n        }\n        return this.sql.toString().replace(\"${pas}\", pas);\n    }\n\n    public void query(String query) {\n        Query theQuery = null;\n        String querySql = sql.toString();\n        try {\n            theQuery = theSession.createQuery(query);\n            System.out.println(\"sql : \" + querySql);\n        } catch (HibernateException e) {\n            e.printStackTrace();\n        }\n        HibernateSession.closeSession();\n        Set resultSet = new HashSet();\n        try {\n            Iterator it1 = theQuery.iterate();\n            while (it1.hasNext()) {\n                resultSet.add(((List) it1.next()));\n            }\n        } catch (HibernateException e) {\n            System.out.println(\"it1.hasNext() error\");\n            e.printStackTrace();\n        }\n        try {\n            List result = resultSet.iterator();\n            Set resultSetS = (Set) result.next();\n            Element resultSetEle = (Element) resultSetS.iterator().next();\n            this.setRs(resultSetEle);\n        } catch (HibernateException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void setRs(Element resultSet) {\n        try {\n            Iterator it1 = resultSet.iterator();\n            while (it1.hasNext()) {\n                try {\n                    if (!(it1.next() instanceof Object[])) {\n                        it1.remove();\n                    }\n                } catch (HibernateException e) {\n                    e.printStackTrace();\n                }\n            }\n            System.out.println(\"<resultSet/>\");\n        } catch (HibernateException e) {\n            e.printStackTrace();\n        }\n\n    }\n    public List _getRsElements() {\n        List theList = new ArrayList();\n        try {\n            Iterator it = theSession.createQuery(\" from Data\").iterate();\n            for (; it.hasNext();) {\n                HashMap hm = (HashMap) it.next();\n                Element e = (Element) hm.get(\"data\");\n                Element e2 = (Element) hm.get(\"data2\");\n                theList.add(\"<\" + e2 + \">>\");\n            }\n        } catch (HibernateException e) {\n            e.printStackTrace();\n        }\n        return theList;\n    }\n\n    public void setStart(int number) {\n        this.start = number;\n    }\n\n    public int getLimit() {\n        return limit;\n    }\n    public void setLimit(int number) {\n        limit = number;\n    }\n\n    public List getRs() {\n        return this.getRsElements();\n    }\n\n    public void setParams(String pas) {\n        this.pas = pas;\n    }\n    public String getWhere() {\n        return this.getWhere(pas);\n    }\n    public String getSql() {\n        return this.getQuerySql();\n    }\n    public String getWhereWithPas() {\n        return theQuerySql.toString().toUpperCase();\n    }\n    public void setQuerySql(String querySql) {\n        this.sql = querySql;\n    }\n\n    private Loader loader;\n}\npublic void Set_theSessionFactory(SessionFactory factory){\n        this.currentSession=factory.openSession();\n    }\npublic String getSql(String queryParams) {\n        //return this.theQuerySql.toString().substring(0,this.sql.indexOf(\"order by\") + queryParams.length() + 1);\n        return this.theQuerySql.toString().substring(this.sql.indexOf(\"order by\") + queryParams.length());\n    }\npublic Object[] getParams(String queryParams, Object[] pas) {\n    Session theSession=null;\n    if (currentSession==null)\n        theSession=theSessionFunction.currentSession();\n    else\n        theSession= currentSession;\n            \n    try {\n        Query theQuery = theSession.createQuery(queryParams);\n    } catch (HibernateException e) {\n        e.printStackTrace();\n    }\n    if (theSession!=null)\n        System.out.println(theSession);\n    HibernateSession.closeSession();\n    if ((pa!= null && pas.",
            "finish_reason": "length"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t// \u68c0\u67e5\u6570\u6240\u6709\u7684\u67e5\u8be2\u5bf9\u8c61\n\t\tstatic final String TBL_NAME = \"sf_param1\";\n\t\tstatic final String TBL_NAME_2 = \"sf_param2\";\n\t\t\n\t@Test\n\t    public void test() throws HibernateException {\n        HibernateSessionFactory sessionFactory = HibernateSessionFactory.currentSession();\n        Session session = sessionFactory.openSession();\n\t\ttry {\n\t\t\tSystem.out.println(\"start:\"+start+\",limit:\"+limit+\",sort:\"+sort+\",pas:\"+pas+\",paging:\"+paging);\n\t\t\tloadDataWithSql();\n\t\t\t\n\t\t\tIterator<String> it = this.rs.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tString c = it.next();\n\t\t\t\tSystem.out.println(\"c::\"+c+\",rs:\"+this.rs.getElements());\n\t\t\t}\n\t\t\t\n\t\t\tsession.getCurrentSession().close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tsessionFactory.closeSession();\n\t\t}\n\t\t}\n\t\t\n\t\tpublic Session getSession(){\n\t\t\treturn HibernateSessionFactory.currentSession();\n\t\t}\n\t\t\n\t\tpublic List<HashMap<String, String>> getParams(Query query, String pas) throws HibernateException {\n\t\t\tSession session = null;\n\t\t\tHashMap<String, String> result = new HashMap<String,String>();\n\t\t\t\n            try {\n                session = getSession();\n                query.setPageSize(10);\n                query.setOrdering(\"id DESC\");\n                return query.list();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                HibernateSessionFactory.closeSession(session);\n            }\n            return null;\n\t\t}\n\n\t@Test\n\t    public void test2(){\n\t        HibernateSessionFactory sessionFactory = HibernateSessionFactory.currentSession();\n\t        Session session = sessionFactory.openSession();\n\t        try {\n\t\t\t\tint i = 1;\n\t\t\t\tboolean result = querySql(\"select * from \" + TBL_NAME\n\t\t\t\t\t\t+ \" where \"+\" order by \"\n\t\t\t\t\t\t+ \" \"\n\t\t\t\t\t\t+ TBL_NAME_2\n\t\t\t\t\t\t+ \" asc\").getResultList().size() == 0;\n\t\t\t\tassertTrue(result);\n\t\t\t\tsession.getCurrentSession().close();\n\t        }catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t        } finally {\n\t\t\t\tsessionFactory.closeSession();\n\t\t\t}\n\t    }\n\t\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\tpublic LoaderTest(String orderBy){\n\t\t\tthis.orderBy = orderBy;\n\t\t}\n\t\t\n\t\tpublic void test(){\n\t\t\ttry {\n                File file = new File(\"src/test/resources/orders\");\n    \t\t\tif (file.exists())\n    \t\t\t\tfile.delete();\n\t\t\t\tthis.loadDataWithSql();\n            } catch (Exception e) {\n            \tassertTrue(true);\n            }\n\t\t}\n\t\t\n\t\tpublic Loader getLoadDataWithSql()\n\t\t{\n\t\t\treturn new Loader();\n\t\t}\n\t\t\n\t\tpublic Loader withSql(String sql) throws ParseException, DocumentException {\n\t\t\tthis.sql = sql;\n\t\t\treturn new Loader();\n\t\t\t\t}\n\t\t\n\t\tpublic Loader getSortValue()\n\t\t{\n\t\t\treturn new Loader();\n\t\t\t\t}\n\t\t\n\t\tpublic Loader getSortField(){\n\t\t\treturn new Loader();\n\t\t\t\t}\n\t\t\n\t\tpublic Loader getFirst(Query query1, String orderBy, String dir)\n\t\t{\n\t\t\treturn new Loader();\n\t\t\t\t}\n\t\t\n\t\tpublic long querySize()\n\t\t{\n\t\t\treturn 1000;\n\t\t}\n\t\t\n\t\tpublic long getSize(String sql)\n\t\t{\n\t\t\tSystem.err.println(\"[LoaderTest - test.getSize] \" + this.sql);\n\t\t\treturn this.sql.toString().length();\n\t\t}\n\t\t\n\t\tpublic String getDir()\n\t\t{\n\t\t\treturn \"dir\";\n\t\t\t\t}\n\t\t\n\t\tpublic long getLimit()\n\t\t{\n\t\t\treturn 2000000;\n\t\t\t\t}\n\t\t\n\t\tpublic int getId(){\n\t\t\treturn this.orderBy.toLowerCase().substring(0,this.orderBy.length()-1).split(\" \")[0].toString();\n\t\t\t\t}\n\t\tprivate String dir = \"\";\n\t\tprivate String orderBy = \"\";\n\t\tprivate Query query;\n\t\tpublic Query getQuery()\n\t\t{\n\t\t\treturn this.query;\n\t\t}\n\t\tpublic void setQuery(Query query1)\n\t\t{\n\t\t\tthis.query = query1;\n\t\t}\n\t\tpublic long getLimit(String start, String dir){\n\t\t\treturn this.getLimit().toString().replaceAll(this.startFormat, start);\n\t\t}\n\t\tpublic long getLimit()\n\t\t{\n\t\t\treturn this.getLimit(null, \"order by\");\n\t\t}\n\t\tpublic String getOrderBy()\n\t\t{\n\t\t\treturn this.orderBy;\n\t\t}\n\t\t\n\t\tpublic long getLimit()\n\t\t{\n\t\t\treturn this.getLimit();\n\t\t}\n\t\tpublic void setLimit(long val)\n\t\t{\n\t\t\tthis.getLimit(val, null);\n\t\t}\n\t\tpublic long getLimit()\n\t\t{\n\t\t\treturn this.getLimit(\"limit\", \"order by\");\n\t\t}\n\t\t\n\t\tpublic long getLimit()\n\t\t{\n\t\t\treturn this.getLimit(\"limit\",\"order by\");\n\t\t}\t\t\n\t\tpublic String getDir()\n\t\t{\n\t\t\treturn dir;\n\t\t}\n\t\tpublic void setDir(String dir)\n\t\t{\n            this.dir = dir;\n\t\t}\n\t\tpublic String getOrderBy()\n\t\t{\n\t\t\treturn this.orderBy;\n\t\t}\n\t\t\n\t\tpublic String getOrderBy(String orderBy)\n\t\t{\n\t\t\tthis.orderBy = orderBy;\n\t\t}\n\t\t\n\t\tpublic String getOrderBy(String orderBy)\n\t\t{\n\t\t\tthis.orderBy = orderBy;\n\t\t}\n\t\t\n\t\tpublic static String startFormat = \"%s%n\";\n\t\tpublic static String endFormat = \"%s%n\";\n\t\tprivate String dir;\n\t\tprivate String orderBy;\n\t\tprivate List<Order> orders;\n\t\tprivate HashMap<String, String> parm;\n\t\t\n\t\tprivate Query getParams(Query query1, String pas) {\n\t\t\tQuery query = query1;\n\t\t\tHashMap<String, String> params = new HashMap<String, String>();\n\t\t\tif (pas!= null && pas.length() > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tparams.put(\"%pas%\", \"\\\"\" + pas + \"\\\"\");\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//TODO: \u8f93\u5165\u83b7\u5f97\u7684\u9700\u8981\n\t\t\ttry {\n\t\t\t\tif (dir!= null) {\n\t\t\t\t\tquery = new Query(query);\n\t\t\t\t\tquery.setFirstResult(0);\n\t\t\t\t\tquery.setMaxResults(1);\n\t\t\t\t\tdir = dir + query.getFirstResult() + \"%n\";\n\t\t\t\t}\n\t\t\t\torders = new ArrayList();\n\t\t\t\tif (orderBy!= null && orderBy.length() > 0) {\n\t\t\t\t\tfor (int i=0; i<orderBy.length(); i++) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\torders.add(orderBy.charAt(i));\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparm = new HashMap(orders);\n\t\t\t} catch (HibernateException e) {\n\t\t\t\te.handle(true, true);\n\t\t\t}\n\t\t\treturn query;\n\t\t\t} catch (ParseException e) {\n\t\t\t\tSystem.err.println(\"[LoaderTest - LoaderTest.getParams] Error at getParams\");\n\t\t\t}\n\t\t\tIterator it = parm.keySet().iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tString key = (String) it.next();\n\t\t\t\tString value = parm.get(key);\n\t            try {\n    \t\t\t\tquery = new Query(query);\n    \t\t\t\tquery.addParam(key, \"\\\"\" + value + \"\\\"\");\n    \t\t\t\tparm.remove(key);\n\t\t\t\t} catch (Exception e) {\n    \t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn query;\n\t\t}\n\t\t\n}\n\nclass HashMapUtil {\n\n    public int size(HashMap<",
            "finish_reason": "length"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\tprivate HashMap<String, String> pas = new HashMap<>();\n\t\t\n\t\t/**\n         * @return\n         */\n        public List getRs() {\n            return rowSet;\n        }\n\n        /**\n         * @param rowSet\n         */\n        public void setRs(List rowSet) {\n            this.rowSet = rowSet;\n        }\n    \n        /**\n         * @return\n         */\n        public Query getQuery() {\n            return query;\n        }\n\n        /**\n         * @param query\n         */\n        public void setQuery(Query query) {\n            this.query = query;\n        }\n\n        /**\n         * @return\n         */\n        public int getLimit() {\n            return limit;\n        }\n\n        /**\n         * @param limit\n         */\n        public void setLimit(int limit) {\n            this.limit = limit;\n        }\n\n        /**\n         * @return\n         */\n        public String getSort() {\n            return sort;\n        }\n\n        /**\n         * @param sort\n         */\n        public void setSort(String sort) {\n            this.sort = sort;\n        }\n\n        /**\n         * @return\n         */\n        public String getDir() {\n            return dir;\n        }\n\n        /**\n         * @param dir\n         */\n        public void setDir(String dir) {\n            this.dir = dir;\n        }\n\n        /**\n         * @return\n         */\t\n        private ArrayList<String> rowSet;\n        \n        /**\n         * No methods of class LoaderTest are defined.\n         */\n        public LoaderTest() {\n        }\n\n    }       \n\n// LoaderTest.java",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\tstatic final String CMD = \"/test/cant/exist/file/\";\n\n\t\t/**\n\t\t * @throws ParseException if error occurs finding date\n\t\t */\n\t\t@Test\n\t\tvoid load() throws ParseException, ClassNotFoundException, HibernateException {\n\t\t\tString dbFile = getData(\"dbfile.txt\");\n\t\t\tElement root = (Element) SAXReader.parse(new File(\"test/filedata\"))\n\t\t\t\t\t.read(\"//\" + Loader.DBKEY_NODE.xml));\n\n\t\t\tList rows = this.session.createSQLQuery(root.elements().size() > 1?\n\t\t\t\t\t\" select *\" : \" select * from (select r.*,e.* from (select s.* from\" + root.element(Loader.SORT_NODE) +\" s) as r\"\n\t\t\t\t\t\t\t+ \" order by r.\" + Loader.PROP_ORDER.xml.text() + \" desc\"\n\t\t\t\t\t\t\t+ \" ) as e ORDER BY\" + Loader.PROP_ORDER.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP.xml.text() + Loader.ASCEND_PROP2.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP3.xml.text() + Loader.ASCEND_PROP4.xml.text() + Loader.ASCEND_PROP5.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP6.xml.text() + Loader.ASCEND_PROP7.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP8.xml.text() + Loader.ASCEND_PROP9.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP10.xml.text() + Loader.ASCEND_PROP11.xml.text()\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP12.xml.text() + Loader.ASCEND_PROP13\n\t\t\t\t\t\t\t+ Loader.ASCEND_PROP14.xml.text() + Loader.ASCEND_PROP15.xml.text()\n\t\t\t\t\t+ \") as x\"\n\t\t\t)\t\t\t\t\t\t\n\t\t\t\t\t.list();\n\t\t\tList<HashMap> l= this.getRs(rows);\n\t\t\t// \u901a\u8fc7\u7ed3\u679c\u6587\u4ef6\u4e0e\u8fde\u901a\u8def\u5f84\u6839\u636e\u89c4\u5b9a\u53c2\u6570\u83b7\u53d6\u5bf9\u5e94\u7684list\u4e2d\u7684\u503c\n\t\t\tif(dbFile.charAt(0)!= '/') {\n\t\t\t\tString p[]= dbFile.split(\"file:/\");\n\t\t\t\tboolean flag=false;\n\t\t\t\tfor(int i=0;i<p.length;i++) {\n\t\t\t\t\tif(p[i].charAt(0) == '/') {\n\t\t\t\t\t\tflag=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString d[]= p[0].split(\"/\");\n\t\t\t\t\n\t\t\t\tFile d2 = new File(d[d.length-1]);\n\t\t\t\tString d3 = d2.getAbsolutePath();\n\t\t\t\tfor(int i=0;i<d3.startsWith(\"/\") && flag==false;i++) {\n\t\t\t\t\td2 = new File(\"/\");\n\t\t\t\t\td2.mkdirs();\n\t\t\t\t}\n\t\t\t\td2.mkdirs();\n\t\t\t\td2.setReadable(true, false);\n\t\t\t\td2.setWritable(true, false);\n\t\t\t\td2.setExecutable(true, false);\n\t\t\t}\n\t\t\t\n\t\t\tString d[]= p[0].split(\"/\");\n\t\t\tString s[] = p[1].split(\"/\");\n\t\t\tString b[] = p[2].split(\"/\");\n\t\t\tString q = \"\";\n\t\t\t\n\t\t\tfor(int i=0;i<l.size();i++) {\n\t\t\t\tHashMap hrow1 = (HashMap) l.get(i);\n\t\t\t\tHashMap hrow2 = l.get(i+1);\n\t\t\t\tHashMap hrow3 = new HashMap();\n\t\t\t\tString key1 = (String) hrow1.get(Loader.PROP_NAME.xml);\n\t\t\t\tString key2 = (String) hrow2.get(Loader.PROP_NAME.xml);\n\t\t\t\tString key3=(String)hrow3.get(Loader.SORT.xml);\n\t\t\t\tString key4 = (String) hrow2.get(Loader.ROWINDEX2.xml.text());\n\t\t\t\tString key5 = (String) hrow2.get(Loader.ORDER.xml.text());\n\t\t\t\tString key6 = (String) hrow3.get(Loader.ORDER.xml.text());\n\t\t\t\tString key7 = (String) hrow3.get(Loader.ASCEND_PROP.xml.text());\n\t\t\t\tString key8 = (String) hrow3.get(Loader.ASCEND_PROP2.xml.text());\n\t\t\t\tString key9 = (String) hrow3.get(Loader.ASCEND_PROP3.xml.text());\n\t\t\t\tString key10= (String) hrow3.get(Loader.ASCEND_PROP4.xml.text());\n\t\t\t\tString key11= (String) hrow3.get(Loader.ASCEND_PROP5.xml.text());\n\t\t\t\tString key12= (String) hrow3.get(Loader.ASCEND_PROP6.xml.text());\n\t\t\t\tString key13= (String) hrow3.get(Loader.ASCEND_PROP7.xml.text());\n\t\t\t\tString key14= (String) hrow3.get(Loader.ASCEND_PROP8.xml.text());\n\t\t\t\tString key15= (String) hrow3.get(Loader.ASCEND_PROP9.xml.text());\n\t\t\t\tString key16= (String) hrow3.get(Loader.ASCEND_PROP10.xml.text());\n\t\t\t\tString key17= (",
            "finish_reason": "length"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t\n\t/**\n\t * Test method for {@link Loader#loadDataWithSql()}\n\t */\n\n\t@Test\n\tpublic void test() {\n\t\tString[] files = {\n\t\t\t\t\"HV_Test\",\n\t\t\t\t\"HV_Sub\"\n\t\t};\n\t\tList<Element> list = new ArrayList<Element>();\n\t\tString date = \"2015-01-01\";\n\t\tString file = \"HV_Test.zip\";\n        \tFile file = new File(\"java/net/inet/in\");\n        \tfor(String str: files){\n        \t\tfile = new File(str);\n        \t\tlong size = file.length();\n        \t\tSystem.out.format(\"%s  %s  %s  \\n\", files[0], files[1], size);\n        \t\tString date_tmp = new SimpleDateFormat(date).format(new java.util.Date());\n        \t\tString sql = \"select * from sfj.d2\";\n\t        \tsql = sql + \" where  datemississdate > '\" + date + \"' and datemississdate < '\" + date_tmp + \"' \";\n        \t\tQuery query = session.createSQLQuery(sql);\n             \tString pas_tmp = \"pas=\";\n        \t\tString pas = \"name,phone;price\";\n        \t\ttry {\n        \t\t\tsql = \"select * from sfj.d2 where  \" + pas_tmp + \"<pas>\";\n        \t\t\tquery = session.createQuery(sql);\n             \t\tList<HashMap<String, Object>> list = query.list();\n        \t\t\tIterator<HashMap<String, Object>> iterator = list.iterator();\n        \t\t\tHashMap<String, Object> hashMap_tmp = new HashMap<String, Object> ();\n\t            \twhile(iterator.hasNext()) {\n\t            \t\thashMap_tmp = iterator.next();\n\t        \t\t}\n\t        \t\t\n\t        \t\tList<File> files_tmp = new ArrayList<File> ();\n\t            \tif(list.size() > 0) {}\n\t            \telse hashMap_tmp.put(\"0\", files_tmp);\n                     file_tmp.add(file);\n                     String file2 = \"\";\n                     int index = 0;\n                     while(files_tmp.size() > index) {\n\t            \t\tfile2 = files_tmp.remove(index);\n\t            \t}\n\t            \tfiles_tmp.add(file2);\n\t            \t\n\t        \t} catch (HibernateException e) {\n\t        \t\t\n\t        \t} catch (HibernateException e) {\n\t        \t\t\n\t        \t}\n\t\t} \n\n\t\tHibernateSessionFactory.closeSession();\n\n\t}\n\t\n\n\t/**\n\t * Get the params from the query.\n\t * It contains one unit test case for the {@link Loader#getQuerySql()} method.\n\t * @param query the query.\n\t * @param params the params.\n\t * @return the sql query.\n\t */\n    public String getParams(Query query,String[] params) {\n    \tSystem.out.format(\"Query: %s %s %s %s\\n\", \"Order by\", params[0], params[1], params[2]);\n        String order_by = params[0] .toUpperCase();\n        String dir = params[1].toUpperCase();\n        String[] dir_list = dir.split(\" \");\n        List<Integer> orderList = new ArrayList<Integer>();\n        for(int i = 0; i < dir_list.length; i++) {\n        \torderList.add(i + 1);\n        }\n        String orderStr = \"\";\n        for(int i =0; i< orderList.size(); i+=2){\n            orderStr = i+orderList.size()+\" \";\n            orderStr += orderList.get(i).toString() + orderList.get(i +1).toString();\n        }\n        query.setOrderBy(orderStr);\n        return \"order by \"+ order_by  +\" \" +dir+ \" \" + \" limit \"+ limit+\" offset \"+ start;\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort!= null && sort!= \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas!= null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n\n// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {\n\t\t\n\tpublic LoaderTest() {\n\t\t\n\t}\n\n\tstatic class Param {\n\t\t\n\t\tpublic static final String name1 = \"name1\";\n\t\tpublic static final String name2 = \"name2\";\n\t\tpublic static final String name3 = \"name3\";\n\t\t\n\t\tString descName = \"\";\n\t\tString descValue = \"\";\n\t\tString descLink = \"\";\n\t\tString descUrl = \"\";\n\t\t\n\t\tString descLinkByName = \"\";\n\t\tString descLinkParam = \"\";\n\t\t\n\t\tpublic Param(String name1, String desc1,\n\t\t\t\tString desc2, String desc3){\n\t\t\tthis.name1 = name1;\n\t\t\tthis.desc1 = desc1;\n\t\t\tthis.desc2 = desc2;\n\t\t\tthis.desc3 = desc3;\n\t\t}\n\t\t\n\t\tpublic static Param getDefault() {\n\t\t\tParam param1 = new Param(\n\t\t\t\"\", \"name1\",\n\t\t\t\"\", \"name2\");\n\t\t\tparam1.descValue = \"Desc value 1\";\n\t\t\tparam1.desc4 = \"\\\"Desc 4\\\"\";\n\t\t\t\n\t\t\treturn param1;\n\t\t}\n\t\t\n\t\tstatic HashMap<String, String> getParamMap(){\n\t\t\tHashMap<String, String> params = new HashMap<>();\n\t\t\tparams.put(\"name1\", \"desc1\");\n\t\t\tparams.put(\"name2\", \"desc2\");\n\t\t\treturn params;\n\t\t}\n\t\t\n\t\tpublic static String getParam1(String desc1,String desc2){\n\t\t\treturn new Param(\"name1\", desc1, desc2, \"desc3\").descValue;\n\t\t}\n\t\t\n\t\tpublic static String getParam2(String name1, String name2){\n\t\t\tHashMap<String, String> params = new HashMap<>();\n\t\t\tparams.put(\"name1\", name1);\n\t\t\tparams.put(\"name2\", \"name2\");\n\t\t\treturn new Param(name1, \"\", \"\", \"\").descValue + \" : \" + name2;\n\t\t}\n\t\t\n\t\tpublic static void setParam2(String name1,String name2,String desc1,String desc2){\n\t\t\tParam param1 = new Param(name1, desc1, desc2, \"desc3\");\n\t\t\tparam1.descValue = name2;\n\t\t\tparam1.desc4 = \"\\\"\" + desc2 + \" 3\\\"\";\n\t\t\t\n\t\t\tList params = new ArrayList();\n\t\t\tparams.add(param1);\n\t\t\tparams.add(param1);\n\t\t\tparams.add(param1);\n\t\t\t\n\t\t\tHashMap<String, String> paramMap = new HashMap<>();\n\t\t\tparamMap.put(\"name1\", name1);\n\t\t\tparamMap.put(\"name2\", \"name2\");\n\t\t\tparamMap.put(\"name3\", desc2);\n\t\t\tparamMap.put(\"name4\", \"desc3\");\n\t\t\t\n\t\t\tparam1 = new Param(name1, desc1,  desc2, \"desc3\");\n\t\t\tparamMap.put(\"name1\", name1 );\n\t\t\tparamMap.put(\"name2\", name2);\n\t\t\tparamMap.put(\"name3\", desc2);\n\t\t\tparamMap.put(\"name4\", desc3);\n\t\t\t\n\t\t\t\n\t\t\tQuery<HashMap<String,String>> query1 = query(params, new HashMap<>());\n\t\t\t\n\t\t\tList<HashMap<String, String>> list1 = query1.list();\n\t\t\tassertEquals(2, list1.size());\n\t\t\tIterator<HashMap<String,String>> it1 = list1.iterator();\n\t\t\tHashMap<String, String> map1 = it1.next();\n\t\t\tassertEquals(name1, map1.get(\"name1\"));\n\t\t\tassertEquals(name2, map1.get(\"name2\"));\n\t\t\tassertEquals(desc1, map1.get(\"desc1\"));\n\t\t\tassertEquals(desc2, map1.get(\"desc2\"));\n\t\t\tassertEquals(desc3, map1.get(\"desc3\"));\n\t\t\t\n\t\t\tHashMap<String, String> map2 = it1.next();\n\t\t\tassertEquals(name1, map2.get(\"name1\"));\n\t\t\tassertEquals(name2, map2.get(\"name2\"));\n\t\t\tassertEquals(desc1, map2.get(\"desc1\"));\n\t\t\tassertEquals(desc2, map2.get(\"desc2\"));\n\t\t\tassertEquals(desc3, map2.get(\"desc3\"));\n\t\t\t\n\t\t\tHashMap<String, String> map3 = it1.next();\n\t\t\tassertEquals(name1, map3.get(\"name1\"));\n\t\t\tassertEquals(name2, map3.get(\"name2\"));\n\t\t\tassertEquals(desc1, map3.get(\"desc1\"));\n\t\t\tassertEquals(desc2, map3.get(\"desc2\"));\n\t\t\tassertEquals(desc3, map3.get(\"desc3\"));\n\t\t}\n\t\t\n\t\tpublic static Query<HashMap<String,String>> query(HashMap<String, String> params){\n\t\t\tQuery<HashMap<String, String>> query = new Query<HashMap<String,String>>();\n\t\t\tquery.setParameterMap( params);\n\t\t\t\n\t\t\treturn query;\n\t\t}\n\t\t\n\t\tpublic static List getParamAsList(String name1,String name2){\n\t\t\tHashMap<String, String> params = new HashMap<>();\n\t\t\tparams.put(\"name1\", name1);\n\t\t\tparams.put(\"name2\", \"name2\");\n\t\t\t\n\t\t\tList list = new ArrayList();\n\t\t\tlist.add(params);\n\t\t\tlist.add(params);\n\t\t\tlist.add(params);\n\t\t\t\n\t\t\tHashMap<String, String> paramMap = new HashMap<>();\n\t\t\tparamMap.put(\"name1\", name1);\n\t\t\tparamMap.put(\"name2\", \"name2\");\n\t\t\t\n\t\t\tParametersList paramsList = new ParametersList();\n\t\t\tparamsList.setParameters",
            "finish_reason": "length"
        }
    ],
    "id": "5033a54a-b472-4fdf-b432-8dea7dbe6f6f",
    "prompt_id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java",
    "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n",
    "test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains one unit test case for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {",
    "time_taken": 53.54134917259216,
    "usage": {
        "prompt_tokens": 681
    }
}
]