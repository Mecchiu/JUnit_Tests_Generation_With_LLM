ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
f9b908a1-a5d6-4a70-9a7d-bfc8910cd24f,/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser.java,49.845826387405396,stop,"// HtmlContentParser.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;

/**
 * @author : sunwj
 * @since 0.1
 *        Date: Mar 31, 2007
 *        Time: 10:03:07 PM
 *        <p/>
 *        html content parser using Jericho
 * todo does it need to devided into 2 different implementation?
 */
public class HtmlContentParser implements StringContentParser, StreamContentParser {

    /**
     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....
     * @return plain text without extra tags or elements
     */
    public String extractPlainText(String textContent) throws ContentParserException;
}
","// HtmlContentParserTest.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParserTest {","// HtmlContentParserTest.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParserTest {
/** {@link Log} - to  logger. */
		private final static Log logger = LogFactory.getLog(HtmlContentParserTest.class);
		
                private HtmlContentParser parser = new HtmlContentParser();
     
        private final static String SOURCE = ""{http://asphodel.org/source/xml/}"";
 
        
        /** test case 1. Test parser with no html or text content */
        @Test
        void testEmptySource() throws IOException {
                doTest(SOURCE);
        }
                
        /** test case 1. Test parser with text Content */
        @Test
        void testTextContent() throws IOException {
                logger.debug(""test textContent"");

                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_content.xml"");
                Reader out = Thread.currentThread().getContextClassLoader().getResourceAsReader(""p_test.html"");
                assertTrue(""parser.extractPlainText("".concat(SOURCE))"",parser.extractPlainText(SOURCE).startsWith(""<""));
        }
 
        /** test case 2. Test parser with text content and no html */
        @Test
        void testTextContentAndNoHtml() throws IOException {
                        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_content.xml"");
                        assertNotNull(in);

                logger.debug(""test text content and no html"");

                Reader reader = new InputStreamReader(in) {
                        @Override
                        public int read() throws java.io.IOException {
                                  throw new IOException(""No stream could be retrieved"");
                        }
                        @Override
                        public void close() throws java.io.IOException {
                        }
                };
                Source result = Source.parse(reader);
                                                 
                assertNotNull(""result null"",result);
                assertEquals(""result not parsed"", ""html"", result.getElement());
        }
 
        /** test case 3. Test parser with html content and no html */
        @Test
        void testHtmlContentAndNoHtml() throws IOException {
                        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_content.xml"");
                        assertNotNull(in);

                logger.debug(""test html content and no html"");

                //no html content
                InputStreamReader inReader = new InputStreamReader(in);
                                                           
                Source result = Source.parse(inReader);
                                                           
                assertNotNull(""result null"",result);
                assertEquals(""result not parsed"", ""text"", result.getElement());
        }
 
        
        /** test case 4. Test parser with html and text content */
        @Test
        void testHtmlAndText() throws IOException {
                logger.debug(""test html and text"");

                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_content.xml"");
                Reader reader = new InputStreamReader(in);
                Result result = parser.extractPlainText(reader);
                                                 
                assertEquals(""result not parsed"", ""text"", result.getElement());
        }

    
        @Test
        void testNotFoundSource() throws IOException {
                logger.debug(""test not found source"");
                
                InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_content.xml"");
                InputStream source = Thread.currentThread().getContextClassLoader().getResourceAsStream(""parser_test_not_text.xml"");
                                  
                Source result = Source.parse(source);
                                   
                assertEquals(""result wrong"", ""text"", result.getElement());
        }
 
}
"
