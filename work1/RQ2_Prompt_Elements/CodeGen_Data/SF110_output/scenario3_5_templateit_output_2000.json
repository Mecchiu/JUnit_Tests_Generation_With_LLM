[
{
    "choices": [
        {
            "text": "\n    @Test public void testsGetFormat() {\n        for (short format : new short[] {14, 15, 16, 17, 22, 17, 19, 14, 15, 16, 17}) {\n            assertEquals(getFormat(String.valueOf(format)), format);\n        }\n    } \n    \n    /**\n\t * Test of getFormat method, of class HSSFDataFormat.\n\t */\n    @Test\n    public void getFormatTest() {\n        System.out.println(\"getFormat\");\n        \n\n        final String[] formatTest = new String[] {\"1\", \"2\", \"3\", \"4\"};\n        \n        // get data format\n        final HSSFDataFormat.HSSFDataFormat format = new HSSFDataFormat.HSSFDataFormat();\n        \n        // set data format to string\n        format.setVersion(14);\n        \n        // create a format record\n        final FormatRecord fr = new FormatRecord(format);\n        \n        // set the data format to string\n        format.setVersion(formatTest[1]);\n        \n        /*\n         * Make a list of strings that the\n         * test will have to handle\n         */\n        final List list =new Vector();\n        \n        // add a new string\n        list.add(new String(formatTest[0]));\n        \n        // add one more string\n        list.add(new String(formatTest[2]));\n        \n        // add the list of strings\n        list.add(list);\n        \n        // create the first record\n        fr.setData(getFormatRecord(0,list, formatTest[1]));\n        \n        // add the second record\n        fr.setData(getFormatRecord(1,list,formatTest[3]));\n        \n        // add a new list of strings\n        final List list2 = new Vector();\n        \n        // add a new string\n        list2.add(new String(formatTest[5]));\n        \n        // add one more string\n        list2.add(new String(formatTest[2]));\n        \n        // add the list of strings\n        list2.add(list);\n        \n        // create the first record\n        fr.setData(getFormatRecord(0,list2,formatTest[2]));\n        \n        // set the data format to string\n        format.setVersion(formatTest[2]);\n        \n        \n        /*\n         * Write the data format to a temporary file and then\n         * compare the data structure of the data in the format\n         * file with the data structure of the data stored\n         * there was another test in this file (HSSFDataFormatTest)\n         *    that would be used from there to test the\n         *    same data structure (without the temporary file).\n         *\n         *     Here we'll test the difference in the structure, because\n         *    there were some issues with the HSSFDataFormat to ensure\n         *    the format file and the data format files are the same.\n         */\n        \n        final HSSFDataFormatTest test = new HSSFDataFormatTest();\n        final String filename = test.generateFileName();\n       \n        final HSSFFormat formatFile = HSSFFormat.create(filename, new HSSFSheet(), false);\n        final FormatRecord testFormat = getFormatRecord(0,list, formatTest[0]);\n        final HSSFDataFormat dft = HSSFDataFormat.create(format, null, true);\n        \n        dft.setVersion(formatTest[0]);\n        \n        assertEquals(format,dft);\n        \n        /*\n         * Write data format and data structure,\n         * but not the format file contents.\n         */\n        \n        // write the data format and data structure files\n        formatFile.write(dft);\n        \n        final String filename2 = test.generateFileName();\n        \n        formatFile.setVersion(getFormatRecord(1,list2,formatTest[2]));\n        \n        dft.setVersion(getFormatRecord(1,list2,formatTest[2] + \"1\"));\n        \n        formatFile.write(dft);\n        \n        final byte[] databes;\n        \n        try {\n            databes = formatFile.read();\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n            return;\n        }\n        \n        /*\n         * Compare data structures\n         {\n         System.out.println(\"data = \" + new String(databes));\n         System.out.println(\"format = \" + dft);\n         }\n         */\n        assertArrayEquals(databes,dft.getData());\n        \n        //compare the formatFile with the data structure\n        String sdata, scopy;\n        try {\n            sdata = new String(formatFile.read());\n            scopy = new String(dft.getData());\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n            return;\n        }\n        assertEquals(sdata, scopy);\n        \n        /*\n         * compare the data structures to each other\n         {\n         assertTrue(new String(sdata).equals(new String(scopy)));\n         }\n         */\n        System.out.println(\"comparing \" + test.getFileName());\n        //compare the data structures\n        scopy = dft.getData();\n        try {\n            assertTrue(sdata.equals(scopy));\n            } catch(Exception e) {\n                System.out.println(e.getMessage());\n            }\n        \n        try {\n            dft.getData();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        \n        //compare the two data structures\n        assertTrue(dft == new String(sdata));\n            \n    }\n\n\tprivate FormatRecord getFormatRecord(int numOfRels, List els, String svalue) {\n        //create the first record\n        FormatRecord fr = new FormatRecord(svalue);\n        fr.setVersion(svalue);\n        \n        /*\n         * Set the position of the first record to match the\n         * position within the first record\n         */\n        \n        int posRec = fr.getFirstRecord();\n        \n        /*\n         * Iterate through the elements of the list\n         * and create a data record\n         */\n        \n         ListIterator it = els.listIterator(0);\n        \n         for (int i=0; it.hasNext(); i++) {\n            FormatRecord rec = new FormatRecord(i);\n            String recordValue = it.next().toString();\n            String record = rec.getRecordString();\n            \n            //check for null record value\n            if (record.equals(\"null\")) {\n                return fr;\n            }\n            \n            /*\n             * The following checks indicate the",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Test method for 'org.apache.poi.hssf.usermodel.HSSFDataFormat.getFormat(String)'\n\t\t*\n\t\t* @throws Throwable\n\t\t*/\n    @Test\n    public void testGetFormat() throws Throwable {\n        final int maxLength = 100;\n\n        final String string = \"A\"\n            + \"  B\"\n            + \" C\"\n            + \"D\"\n            + \"E\"\n            + \"F\"\n            + \"G\"\n            + \"H\";\n\n        final Vector<String> fieldStrings = new Vector<String>(string.length());\n\n        List<FormatRecord> formatRecords = Workbook.getRecordCollection(string);\n        Iterator<FormatRecord> iter = formatRecords.iterator();\n\n        assertEquals(true, StringUtil.testString(iter.next().getValue(), null));\n        assertEquals(true, StringUtil.testString(iter.next().getValue(), null));\n        assertTrue(iter.hasNext());\n        assertTrue(verifyFormat(iter.next().getValue(), 0, string));\n        iter.next();\n\n        while (iter.hasNext()) {\n            fieldStrings.add(iter.next().getValue());\n        }\n\n        if (fieldStrings.size() > 0) {\n            assertEquals(false, StringUtil.testString(StringUtil.split(fieldStrings[maxLength-1], '|', StringUtil.DEFAULT_FIELD_SEPARATOR), null));\n            assertEquals(true, StringUtil.testString(fieldStrings[maxLength-1], null));\n        }\n        else {\n            assertEquals(false, StringUtil.testString(\"\", null));\n        }\n\n        assertEquals(true, StringUtil.testString(fieldStrings[fieldStrings.size()], null));\n    }\n\n    /**\n     * Returns true if the given string is one of the form-field-separators\n     * @param string\n     * @return\n     */\n    static String verifyFormat(String string, int pos, String expected) {\n            assertEquals(3, string.length());\n\n            if (!expected.isEmpty()) {\n                    String substring = expected;\n                    if (pos < string.length()) {\n                        assertTrue(string.charAt(pos) == expected.charAt(pos));\n                    }\n\n                    if (string.charAt(pos) == '|') {\n                    assertTrue(pos + 1 < string.length());\n\n                    while (pos++ < string.length()) {\n                assertTrue(string.charAt(pos) == substring.charAt(pos-1));\n                    }\n\n                    }  else {\n                            assertTrue(string.charAt(pos) == substring.charAt(pos));\n                    }\n            }\n            else {\n                    assertEquals(0, pos);\n            }\n        }\n\n        // This is required to be true by now\n\n        //return verifyFormat(string, pos, expected);\n    }\n\n    boolean containsFormat(String formatString)  {\n        String f1 = \"A\"\n                + \"  |\"\n                + \"C\"\n                + \"D\"\n                + \"E\"\n                + \"F\"\n                + \"G\"\n                + \"H\";\n        Vector<String> f1Fields = new Vector<String>(f1.length());\n        f1Fields.addElement(f1);\n\n        final String f2 = \"A\"\n                + \"  B\"\n                + \"C\"\n                + \"D\"\n                + \"E\"\n                + \"F\"\n                + \"G\"\n                + \"H\";\n        Vector<String> f2Fields = new Vector<String>(f2.length());\n        f2Fields.addElement(f2);\n\n        List<FormatRecord> formatRecords = Workbook.getRecordCollection(f1);\n\n        return verifyFormat(f1Fields, f1Fields.size(), f1)\n                    || verifyFormat(f2Fields, f2Fields.size(), f2);\n    }\n\tpublic static boolean verifyFormat(List<String> values, int expPos, String expected) {\n\t\tif (expected == null) {\n\t\t\tassertEquals(values.size() - 1, expPos);\n\t\t}\n\n\t\tboolean result = true;\n\t\tListIterator iterator = values.listIterator(expPos);\n   \t\tint pos = iterator.nextIndex();\n    \tString expectedCmp = expected;\n\n    \tassertEquals(expectedCmp, iterator.next());\n   \t\twhile (iterator.hasPrevious()) {\n   \t\texpectedCmp = expectedCmp +\n   \t\t\t\titerator.previous() + \"|\";\n   \t\t}\n\n  \t\tassertEquals(expectedCmp, values.get(pos));\n   \t\titerator.previous();\n   \t\tassertEquals(false,iterator.hasNext());\n\n\t\treturn result;\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/** Test the {@link #getFormat(String)} methods */\n        @Test\n\t\tpublic void testGetFormat() throws Exception {\n\t\t\t\tWorkbook wB = new Workbook(createInputStream(\"format.xsf\"));\n\t\t\t\tshort format = wB.getWorkbook().getSheetAt(0).getSheetFormat().getType().getIndex();\n\t\t\t\tSystem.out.println(format);\n\t\t}\n\n        /** Test the {@link #getFormat(String)} method, after saving the data */\n        @Test\n\t\tpublic void testGetFormat2Save() throws Exception {\n\t\t\t\tWorkbook wB = new Workbook(createInputStream());\n\t\t\t\tshort format = wB.getWorkbook().getSheetAt(0).getSheetFormat().getType().getIndex();\n\t\t\t\tassertEquals(format, HSSFDataFormats.XLS);\n\t\t}\n\n        /** Test the {@link #getFormat(String)} method with a bad format */\n        @Test(expected = IOException.class)\n\t\tpublic void testGetFormatBad() throws Exception {\n\t\t\t\tshort format = getFormat(\"badformat\");\n\t        throw new IOException(\"invalid format: \" + format);\n\t\t}\n\t\t\t\t\t\n\tprivate InputStream createInputStream() throws IOException {\n\t\treturn HSSFDataFormatTest.class.getResourceAsStream(\"format.xsf\");\n\t}\n}\n\n// End of test-class-HSSFDataFormat.java",
            "finish_reason": "stop"
        },
        {
            "text": "//\n\t\t// public Test getTestCase(String testName)\n\t\t// tests {\n\t\t//   test case: test cases\n\t\t//     for testName\n\t\t//         1: assertHSSFDataFormat(text) throws RuntimeException\n\t\t//         2: assertHSSFDataFormat(text) throws RuntimeException\n\t\t// \n\t\t//     for testName\n\t\t//         3: assertHSSFDataFormat() throws RuntimeException\n\t\t//         4: assertHSSFDataFormat() throws RuntimeException\n\t\t// \n\t\t//     for testName\n\t\t//         5: test cases\n\t\t// \n\t\t//     for testName\n\t\t//         6: test cases\n\t\t//     \n\t\t// }\n\t\t\n        /**\n     * Create a data format entry for a text format.\n     *  text format string \n     *  returns the new data format entry index.\n     *\n     * @param text of the text format.\n     * @return index of the appropriate format entry.\n     */\n    private static short getEntryIndex(String text) {\n        String[] texts = text.split(\" \");\n        \n        return getFormat(texts[0]);\n    }\n    \n    /**\n     * Test getFormat.\n     */\n    @Test\n    void testGetFormat() {\n        assertHSSFDataFormat(\"HSSFDate1904\", \"HSSFDate1904\", \"HSSFDate1904\");\n    }\n    \n    // test 1\n    //     create a new format with an empty format\n    //     create the proper format entry\n    //     read the same format record one line (in different position)\n    //     create the proper format entry 2\n    //     read the same format record one line (in same position)\n    //     check correct data (this should match the data record)\n    //     read the other format record (the format record should be the 2rd one)\n    //     check correct data (this should match the data record)\n    //     look at the first entry line by scanning the table of the data record\n    //     the first text format in the table should be text format 1904\n    public HSSFDataFormatTest(String testCaseName, String text, HSSFDataFormat testFormat) {\n\n        //\n        // create the test record\n        //\n        FormatRecord formatRecord = (FormatRecord) testFormat.get(getEntryIndex(text));\n        assertFormatRecord(formatRecord, testCaseName, testFormat, 10, 20, 3);\n    }\n    \n    //\n    // test case 3  \n    //     test two new formats for the data record, one with text format 1904\n    //     test three new formats for the data record, one with text format  1801\n    //   this case should be tested by reading the records in another\n    // \n    @Test\n    void testFormats() {\n        String[] tests = {\n            // \"test1\"\n            \"116615\",\n            \"HSSFDate1904\",\n            \"1904\",\n            \"221713162326\",\n            \"1904\",\n            \"221713162326\",\n            \"1904\",\n            \"221713162326\",\n            \"1901\"\n        };\n\n        for (String test : tests) {\n            HSSFDataFormatTest testCase = new HSSFDataFormatTest(test, test,\n                    HSSFDataFormat.getFormat(test));\n            // testCase.runTest();\n            testCase.testFormats();\n            // testCase.output();\n        }\n    }\n    \n\t//\n\t\t// test case 1 - for new formats without text format 1904\n\t\t////     test three new formats for the data record\n\t\t////     test one with text format 1701\n\t//\n\t@Test\n\tvoid test15() {\n\t\tString[] tests = {\"test15\",};\n      HSSFDataFormatTest testCase = new HSSFDataFormatTest(\"test15\", \"16\",\n              HSSFDataFormat.getFormat(tests));\n\n\t\ttestCase.testFormats();\n\t\t// testCase.output();\n\t}\n\t\n\t@Test\n    void test1904(){\n        String text = \"1904\";\n        HSSFDataFormatTest testCase = new HSSFDataFormatTest(text);\n        // testCase.runTest();\n\n    }\n\n    @Test\n    void test1801(){\n        String text = \"1801\";\n        HSSFDataFormatTest testCase = new HSSFDataFormatTest(text);\n        // testCase.runTest();\n    }\n\n    @Test\n    void testHSSF16(){\n        String text = \"HSSF16\";\n        HSSFDataFormatTest testCase = new HSSFDataFormatTest(text);\n        // testCase.runTest();\n\n    }\n\n    void assertFormatRecord(FormatRecord record,\n                                        String formattedTestCaseName,\n                                        HSSFDataFormat formatter,\n                                    int formattedTestCaseIndex,\n                                    int formattedTextFormatIndex,\n                                    int expectedEntryIndex) {\n        assertEquals(formattedTestCaseName,\n                record.getName().trim()\n        );\n        assertEquals(\n                \"\"+ expectedEntryIndex,\n                record.getPosition(),\n                \"\"\n        );\n\n        String recordStr = record.toString();\n        HSSFDataFormat test = (HSSFDataFormat) HSSFDataFormat.parse(recordStr);\n\n        test.validate((Workbook) null);\n        test.validate((Workbook) null);\n\n        assertEquals(formattedTestCaseName, test.getString());\n\n        if (formattedTestCaseIndex!= -1) {\n        \tassertEquals(formattedTestCaseIndex + 1, test.getIndex());\n        }\n        if (formattedTextFormatIndex!= -1) {\n        \tassertEquals(formattedTextFormatIndex + 1, test.getFormatRecord().getIndex());\n        }\n\n    }\n\n    void assertHSSFDataFormat(String text,\n                               String expectedStr,\n                               int expectedFormatIndex) {\n        FormatRecord record = HSSFDataFormat._getFormatRecord(dataFormat, text);\n        String recordStr = record.toString();\n\n        assertEquals(expectedStr, recordStr);\n        assertEquals(expectedFormatIndex, record.getPosition());\n        assertFormatRecord(record, text, HSSFDataFormat.getFormat(text),\n                                   expectedFormatIndex, -1, -1);\n    }\n\n    /**\n     * Run all of the test cases to validate the generated file.\n     *  This is in the original code\n     */\n    @Test\n    public void testFormats(){\n\n        test15();\n        test1904();\n        test1801();\n\n        // for the HSSF_DATFRMT record. The name string is ignored\n        testHSSF16();\n\n    }\n\n    @Test\n    public void testFormats16(){\n\n        test15();\n        ",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n     * Test of getFormat method, of class HSSFDataFormat.\n     */\n    @Test\n    public void testGetFormat() {\n        Workbook wb = new SheetBasedWorkbook();\n        HSSFDataFormat df = new HSSFDataFormat();\n        int format = df.getFormat(\"CSV\");\n        assertNotNull(\"Unknown formats\", format);\n        assertEquals(1, format);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * The test case for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * static void main(String[] args)\n\t * \n\t *    {\n\t *         HSSFDataFormat test = HSSFDataFormat.getInstance(); <strong>\n\t *       {@literal Result}\n\t * </pre>\n\t */\n\t@Test\n\tpublic void testGetFormat() throws IOException {\n\t\tIterator<Workbook> iter = Workbook.getWorkbooks();\n\t\twhile ( iter.hasNext() ){\n\t\t\treturn;<strong>{iter.next()} is a valid Workbook</strong>;\n\t\t}\n\t\tthrow new IOException(\"No open workbooks!\");\n\t}\n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * {@link HSSFDataFormat#WORD_FORMAT}, \n\t * {@link HSSFDataFormat#NUMBER_FORMAT}, \n\t * {@link HSSFDataFormat#ALTERNATIONAL_FORMAT}, \n\t * {@link HSSFDataFormat#SHORTCUT_FORMAT}, \n\t * {@link HSSFDataFormat#BLOCK_START_STYLE_FORMAT}, \n\t * {@link HSSFDataFormat#BLOCK_CELL_START_STYLE_FORMAT}, \n\t * {@link HSSFDataFormat#BLOCK_CELL_END_DEST}, \n\t * {@link HSSFDataFormat#BLOCK_CELL_STYLE_FORMAT}\n\t * }<br>\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_3(){\n\t\tHSSFDataFormat.WORD_FORMAT.getFormat(\"\");\n\t}\n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * String expectedLineEnd = \"\\\\N\"; {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_4(){\n\t\tHSSFDataFormat.WORD_FORMAT.getFormat(\"\");\n\t} \n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * String expectedLineEnd = \"\\\\N\"; {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_5(){\n\t\tHSSFDataFormat.WORD_FORMAT.getFormat(\"\");\n\t} \n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * String expectedLineStart = \"\\\\N\"; {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_6(){\n\t\tHSSFDataFormat.WORD_FORMAT.getFormat(\"\");\n\t} \n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * String expectedLineEnd = \"\\\\N\";  {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_7(){\n\t\tHSSFDataFormat.WORD_FORMAT.getFormat(\"\");\n\t} \n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t * \n\t * <pre>\n\t * {@code\n\t * String expectedLineStart = \"\\\\N\";  {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_8(){\n\t\tHSSFDataFormat.SOLID_CELL_STYLE_FORMAT.getFormat(\"\");\n\t} \n\n\t/**\n\t * Test for {@link HSSFDataFormat#getFormat(String)}.\n\t *    \n\t * <pre>\n\t * {@code\n\t * String expectedLineEnd = \"\\\\N\";  {@literal Result}\n\t * }\n\t * </pre>\n\t */\n\t@Test(expected=IllegalArgumentException.class) public void testGetFormat_9(){\n\t\tHSSFDataFormat.SOLID_CELL_STYLE_FORMAT.getFormat(\"\");\n\t} \n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n    public void getFormat() {\n\t\t\n        // Test that the HSSFDataFormat matches the format\n    // in the correct format.\n\t//\n\t\n        // First test that getFormat returns the correct value\n//      short test1 =  getFormat(\"0\");\n//      assertEquals(\"HSSFDataFormat#getFormat() should return value 0\", 0, test1);\n\t\t\n        // Second test that getFormat does not match the format in the correct format.\n//      short test2 =  getFormat(\"1.1\");\n//      assertEquals(\"HSSFDataFormat#getFormat() should return value 1.1\", 1, test2);\n\t\t\n        // third test that getFormat does not match the format in the wrong format.\n//      short test3 =  getFormat(\"1.3\");\n//      assertEquals(\"HSSFDataFormat#getFormat() should return value 1.3\", 1, test3);\n    }\n    \n    @Test\n    public void parseTest() throws Exception\n    {\n        // Test all parseters of the HSSFDataFormat.\n        //\n        // Test the HSSFDataFormat.parseString function.\n        //\n        // The following test checks the string is correctly parsed.\n    //    \n        //   String pString = \"CRLF\\r\\n\\t1234567890123456789012345678901234567890\" +\"\\r\\r\\n\";\n    //    \n        // This string should be parsed to a HSSFSimpleData record.\n    //\n    //    Format record parsed = HSSFSimpleData.parseString(pString);\n    //    assertData(pString, \"HSSFSimpleData\");\n    //\n    //    pString = \"\\r\\n\\t1234567890123456789012345678901234567890\" +\"\\r\";\n    //    pString = pString.replaceFirst(\"(\\r)\", \"\\\\r\");\n    //    pString = pString.replaceFirst(\"(\\n)\", \"\\\\n\");\n    //\n    //    FormatRecord parsed = HSSFSimpleData.parseString(pString);\n    //    assertData(pString, \"HSSFSimpleData\");\n    //\n    //   pString = \"\\r\\n\\t1234567890123456789012345678901234567890\" +\"\";\n    //    pString = pString.replaceFirst(\"(\\r)\", \"\\\\r\");\n    //    pString = pString.replaceFirst(\"(\\n)\", \"\\\\n\");\n    //\n    //    FormatRecord parsed = HSSFSimpleData.parseString(pString);\n    //    assertData(pString, \"HSSFSimpleData\");\n    //\n    //   pString = \"CRLF\\n\\t123456789\";\n    //    pString = pString.replaceFirst(\"(\\r)\", \"\\\\r\");\n    //    pString = pString.replaceFirst(\"(\\n)\", \"\\\\n\");\n    //\t\n    //    FormatRecord parsed = HSSFSimpleData.parseString(pString);\n    //    assertError(pString, \"HSSFSimpleData\");\n    }\n    \n    \n    private void assertSuccessFullParse(String data, HSSFDataFormat instance) {\n        for (int i = 0; i < data.length(); i++) {\n            if (data.charAt(i)!= instance.getFormat(data, i)) {\n                assertError(data, \"HSSFDataFormat\");\n            }\n        }\n    }\n        \n    private void assertError(String data, String methodName) throws Exception {\n        FormatRecord parsed = HSSFSimpleData.parseString(data);\n        assertError(data, methodName);\n    }\n\n    private void assertError(String data, String methodName, Throwable t) throws Exception {\n        FormatRecord parsed = HSSFSimpleData.parseString(data);\n        assertFormatElements(parsed, methodName, t);\n    }\n    \n    private void assertData(String data, String methodName) {\n    \tFormatRecord parsed = HSSFSimpleData.parseString(data);\n        ListIterator<Iterator<String>> dataIterator = parsed.getIterator();\n        int numberOfElements = parsed.getCount();\n        assertEquals(\"Size of the data iterator should be correct\", data.length(), numberOfElements);\n        \n        assertTrue(\"First element should be data.\", dataIterator.hasNext());\n        assertTrue(\"Last element should be data.\", dataIterator.next().hasNext());\n        assertFalse((\"First element should be last one\", dataIterator.next().hasNext()));\n        \n        Iterator<Iterator<String>> iterator = dataIterator;\n        Iterator<String> elem = dataIterator.next();\n        \n        assertEquals(\"First element should be data.\", data.substring(0, elem.nextIndex()), elem.next());\n        assertEquals(\"Last element should be data.\", elem.next().substring(0, elem.nextIndex()), p(data));\n        \n        iterator = elem;\n        elem = dataIterator.next();\n        assertEquals(data, elem.next()) ;\n        \n        assertFalse(iterator.hasNext());\n        \n        String[] dataArray = data.split(\"\\\\r\");\n        assertEquals(\"Number of data should be correct\", 1, dataArray.length);\n        assertEquals(\"Value at index 0 should be the same as value at index \" + elem.nextIndex(), pe(dataArray[0]), p(elem.next()));\n        \n        assertTrue(dataArray[0].charAt(dataArray[0].length() - 1) == '\\r');\n        assertTrue(\"First element should be end of data.\", dataIterator.hasNext());\n        \n    }\n    \n    private void assertFormatElements(FormatRecord parsed, String methodName, Throwable t) {\n    \tif (t == null) {\n    \t\tIterator<FormatRecord> iterator = parsed.iterator();\n    \t\tassertTrue(\"Last position should be the same as first position.\", iterator.next().getIterator().hasNext());\n    \t\tassertFalse(iterator.next().getIterator().hasNext(), \"Last element should be last one\");\n    \t} else {\n    \t\tassertTrue(iterator.hasNext());\n    \t\tFormatRecord current = iterator.next();\n    \t\tIterator<List<String>> dataIterator = current.iterator();\n    \t\twhile (dataIterator.hasNext()) {\n    \t\t\tif (!dataIterator.next().getIterator().hasNext()) {\n    \t\t\t\tassertMessage(format, current, methodName);\n    \t\t\t\tassertError(current.getText(), methodName);\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    private void assertMessage(String message, FormatRecord current, String methodName) {\n        FormatRecord p = new FormatRecord();\n        p.addFormat(\"0\", \"message\", message);\n        ",
            "finish_reason": "length"
        },
        {
            "text": "\n\n    /**\n     * Make sure data format works\n     * <p><u>Test cases</u></p>\n     *   <dl>\n     *   <dt>Format 1 - simple</dt>\n     *   <dd>\n     *   Check no exception, correct formatting\n     *   <p><u>Explanation</u> -\n     *   Formatting works fine with an empty table and with a row for width of 7.</p>\n     *   <p>\n     *   Formatting works fine with an empty table and with a row for width of 7,\n     *   and a column for height of 18, with a column spanning\n     *   18 characters and 6 characters per width (5,6).</p>\n     *  </dd>\n     *  <dt>Format 2 - simple with one column</dt>\n     *   <dd>\n     *   Check no exception, correct formatting\n     *   <p><u>Explanation</u> -\n     *   Formatting works fine with an empty table,\n     *   with 10 columns, and a height of 5 in a row.</p>\n     *   <p>\n     *   Formatting works fine with an empty table,\n     *   with 10 columns, and a height of 5 in a row.</p>\n     *  </dd>\n     *  <dt>Format 3 - simple with two columns</dt>\n     *   <dd>Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *  </dd>\n     *  <dt>Format 4 - complex</dt>\n     *   <dd>Add a format record to check no exception</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *   <dd>\n     *   Check no exception, correct formatting</dd>\n     *  </dd>\n     *  </dl>\n     *\n     * @throws Exception if the tests fail\n     */\n\t@Test\n\tpublic void test_getFormat() throws Exception {\n\t\tbyte[] data = {\n                (byte)0xFE,       // 0xFE = Format record record header\n                (byte)0xFF,       // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n                (byte)0xFF,       // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n                (byte)0xFF\n        };\n\t\t\t\n\t\tWorkbook wb = new Workbook(data);\n\t\t\t\n\t\t// test one format record\n\t\tFormatRecord rec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n        assertNotNull(rec);\n        assertEquals((short)8, rec.getWidth());\n        assertEquals((short)5, rec.getHeight());\n        assertEquals((short)0xFF, rec.getStyle());\n        assertEquals((short)0xFF, rec.getFontStyle());\n        List strings = rec.getContents();\n        Iterator iter = strings.listIterator();\n        assertNotNull(iter.next());\n        assertEquals(\"Text0\", iter.next());\n\n        // test first data record. It's the dummy format\n        rec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n        assertNotNull(rec);\n        assertEquals(0, rec.getContents().size());\n        \n\t\t// test two data records. One contains just the text we need, both contain\n\t\t// no data\n\t\trec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n\t\tassertNotNull(rec);\n\t\tassertEquals(2, rec.getContents().size());\n\t\tList strings1 = rec.getContents();\n    \tassertNotNull(strings1.get(0));\n        assertNotNull(strings1.get(1));\n\n        rec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n        assertNotNull(rec);\n        assertEquals(1, rec.getContents().size());\n        List strings2 = rec.getContents();\n    \tassertNotNull(strings2.get(0));\n        assertEquals(0xFF, rec.getContents().get(0));\n        assertEquals(\"Text1\", iter.next());\n\n        // test format record with a format string and empty data\n        data = {\n        \t(byte)0xFE,     // 0xFE = Format record record header\n        \t(byte)0xFF,     // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n        \t(byte)0xFE,     // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n        \t(byte)0xFF,     // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n        \t(byte)0xFE,\t    // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n        \t(byte)0xFF,\t    // 8-byte string - 0xFF = format data record header (0xFF is last byte)\n        };\n        rec = new FormatRecord();\n        rec.setContents(new Vector());\n        wb = new Workbook();\n\t\trec.setContents((List) wb.getRecordByName(\"0xFF\"));\n        rec = new FormatRecord();\n        rec.setContents(new Vector());\n        wb = new Workbook();\n\t\trec.setContents((List) wb.getRecordByName(\"0xFF\"));\n        \n\t\t// test getFormat() with format data record\n\t\trec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n        assertEquals(\"text\", rec.getFormat());\n        assertEquals(Arrays.asList(new String(\"text\")), rec.getContents());\n\t\t\n\t\t// test getFormat() with format data record and another record\n\t\trec = (FormatRecord) wb.getRecordByName(\"0xFF\");\n\n\t\tassertEquals(\"text\", rec.getFormat());\n\t\tassertEquals(Arrays.asList(new String(\"text\")), rec.getContents());\n\n\n\t\tList data1 = (List) wb.getRecordByName(\"0xFF\").getContents();\n\t\tassertEquals(Arrays.asList(\"text\"), data1);\n\n        List strings1 = (List) wb.getRecordByName(\"0xFF\").getContents();\n        assertEquals(Arrays.asList(\"text\"), strings1);\n        \n\t\tList data2 = (",
            "finish_reason": "length"
        },
        {
            "text": "   \n    /**\n     * HSSFDataFormatTest.java\n     *\n     * Creates a new instance of HSSFDataFormatTest for each test case.\n     */\n    public HSSFDataFormatTest(){\n    }\n    \n    /**\n     * Test case {@link HSSFDataFormat#getFormat(String)} for the given string.\n     *\n\t * @throws IOException\n     */\n    @Test\n    public void testGetFormat() throws IOException {\n        Workbook workbook = new HSSFWorkbook();\n\n\n        FormatRecord record = new FormatRecord();\n        record.setIndex(0);\n        workbook.addWorkbookRecord(record);\n\n        for(int i=1;i<101;i++){\n            record = new FormatRecord();\n            record.setIndex(i);\n            workbook.addWorkbookRecord(record);\n        }\n\n        short[][] formats = {\n            {\"A4 (Letter)\", \"A4_Letter\"},\n            {\"A4 (Letter, 12 pt)\", \"A4_Letter_12pt\"},\n            {\"A4 (Letter, 10 p.v.30, 10 mm)\", \"A4_Letter_10pV30_10mm\"},\n            {\"A4 (Letter, 10 p.v.5, 10 mm)\", \"A4_Letter_10pV5_10mm\"},\n            {\"A4 (Letter, 10 p.v.10, 10 p.l.10, 10 p.p.10, 10 pt)\", \"A4_Letter_10pV10_10pLV10_10pLV10_10pLV\"},\n            {\"A4 (Letter, 10 p.)\", \"A4_Letter_10p\"},\n            {\"A4 (Letter, 10 p.v)\", \"A4_Letter_10pV\"},\n\n            {\"A4 (Letter, 10p.v.5\"), \"A4_Letter_10pV5\"}, // NOTE: Excel ignores this value\n\n            {\"A4 (Letter, 10 p.v.10, 10 p.l.10, 10 p.p.10, 10 pt)\", \"A4_Letter_10pV10_10pLV10_10pLV10_10pLV\"},\n            {\"A4 (Letter,10 p.v.10,10 p.l.10,10 p.p.10, 10 pt)\", \"A4_Letter_10pV10_10pLV10_10pLV10_10pLV\"},\n\n            {\"A4 (Letter, 10 p.v.30, 10 mm)\", \"A4_Letter_10pV30_10mm\"},\n            {\"A4 (Letter,10 p.v.5, 10 mm)\", \"A4_Letter_10pV5_10mm\"}\n\n        };\n        String expectedFormat = formats[9][0].replaceAll(\"^/\", \"\");\n        assertEquals(\"HSSFDataFormatTest.testGetFormat\", expectedFormat, record.getFormat());\n    }\n\n    /**\n     * Test case {@link HSSFDataFormat#getFormat(String)}.\n     */\n    @Test\n    public void testGetFormatNo() throws IOException {\n        Workbook workbook = new HSSFWorkbook();\n\n\n        for (int i = 0; i < 11; ++i) {\n            FormatRecord record = new FormatRecord();\n            workbook.addWorkbookRecord(record);\n        }\n\n        String formatRecordName = formatRecordName(workbook);\n        List records = workbook.getWorkbookRecords(formatRecordName);\n        assertEquals(5, records.size(), \"\");\n\n        short[][] formats = {\n            {\"A4 (Letter)\", null},\n            {\"A4 (Letter, 12 pt)\", \"A4_Letter_12p\"},\n            {\"A4 (Letter, 10 p.\", \"A4_Letter_10p\"},\n            {\"A4 (Letter, 10 pt.\", \"A4_Letter_10pV30_10mm\"},\n            {\"A4 (Letter, 10 p.:10, 10 mm.\", \"A4_Letter_10pV10_10pLV10_10pLV10_10pLV\"},\n            {\"A4 (Letter, 10 p.:10, 10 pt.\", \"A4_Letter_10pV10_10pLV10_10pLV10_10pLV\"},\n            {\"A4 (Letter, 10 pt.)\", \"A4_Letter_10p\"},\n\n            {\"A4 (Letter, 10 p.v)\", \"A4_Letter_10p\", \"A4_Letter_10pV\"},\n\n            {\"A4 (Letter, 10 p.v.5)\", \"A4_Letter_10pV5\"}, // NOTE: Excel ignores this value\n\n            {\"A4 (Letter, 30 p.v.10, 10 mm)\", \"A4_Letter_15pV3m5pLV10_15pLV3m5pLV10_3pLV3m5pLL\"},\n            {\"A4 (Letter, 30 p.v.10,10 pt)\", \"A4_Letter_15pV10pLV10ptm3pLV10ptm15pLV10pLV3pLV3m5pLL\"},\n            {\"A4 (Letter, 30 p.v.10,10 )\", \"A4_Letter_15pV10pV3pLV10ptm15pLVv3pLV10pLV3pLL\"},\n\n            {\"A4 (Letter, 30 p.v.30, 10 mm)\", \"A4_Letter_30pVV3pLV30pLV30pLV30pLV30pLV30pLL\"},\n            {\"A4 (Letter, 30 p.v.5, 10 mm)\", \"A4_Letter_15pV8pV2pLV15pLV11pLVv8pLV9pLVv2pLL\"}\n        };\n        short[][] test = {\n            {null, null},\n            {null, \"A4\"},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null}\n        };\n        for (int i=0; i<5; i++) {\n            String formatName = formatRecordName(records.get(i));\n            byte[][] recordsFormat = record.getFormat();\n            for (int j = 0; j < 4; ++j) {\n                Vector v = new Vector();\n                if (test[i] == null) {\n                    assertEquals(v, recordsFormat[j]);\n                } else {\n                    assertEquals(test[i][j], recordsFormat[j]);\n                }\n                v.add(",
            "finish_reason": "length"
        },
        {
            "text": "public HSSFDataFormatTest() {\n\t}\n\n\n\t@Test\n\tpublic void testEquals() {\n\t\tassertTrue(new HSSFDataFormat((String)null).equals(new HSSFDataFormat(null)));\n\t\tassertTrue(new HSSFDataFormat(\"file content\").equals(new HSSFDataFormat(\"file content\")));\n\t\tassertTrue(new HSSFDataFormat().equals(new HSSFDataFormat(null)));\n        assertFalse(new HSSFDataFormat(\"\").equals(new HSSFDataFormat(\"other stuff\")));\n\t}\n\n\t@Test\n\tpublic void testHashToString() {\n\t\tassertEquals(\"string\", new HSSFDataFormat(\"string\").getDisplayName());\n\t\tassertEquals(\"another string\", new HSSFDataFormat(\"another string\").getDisplayName());\n\t\tassertEquals(\"The format\", new HSSFDataFormat(\"Format\").getDisplayName());\n\t}\n\n\t@Test\n\tpublic void testToString() {\n\t\tassertEquals(\"HSSFDataFormat test object\", new HSSFDataFormat(\"test object\").toString());\n\t\tassertEquals(\"HSSFDataFormat test object\", new HSSFDataFormat(\"another object\").toString());\n\t\tassertEquals(\"HSSFDataFormat object\", new HSSFDataFormat(null).toString());\n\t\tassertEquals(\"HSSFDataFormat null\", new HSSFDataFormat(new String()).toString());\n\t}\n\n\t@Test\n\tpublic void testEqualsAndHashToString() {\n\t\tassertFalse(new HSSFDataFormat(null).equals(new HSSFDataFormat(null)));\n\t\tassertTrue(new HSSFDataFormat(null).toString().equals(new HSSFDataFormat(null).toString()));\n\t\tassertFalse(new HSSFDataFormat(\"\").equals(new HSSFDataFormat(null)));\n\n\t\tassertTrue(new HSSFDataFormat(\"string\").hashCode() == new HSSFDataFormat(\"string\").hashCode());\n\t\tassertFalse(new HSSFDataFormat(\"string\").hashCode()!= new HSSFDataFormat(\"string\").hashCode());\n\t\tassertTrue(new HSSFDataFormat(null).hashCode() == new HSSFDataFormat(null).hashCode());\n\t\t\n\t}\n\n\t@Test\n\tpublic void testGetRecord() {\n\t\tWorkbook eWb = new Workbook();\n\t\ttestIsValid(eWb, null);\n\t\tFormatRecord rr = new FormatRecord(new char[] { 0x10D, 0x10D }, 846, 8847, null);\n\t\t// rr.setFormat(8847, null);\n\t\t// byte[] b1 = { (byte) 0x14, (byte) 0xE5 };\n\t\t// byte[] b2 = { (byte) 0x14, (byte) 0xE5 };\n\t\t// FormatRecord rr2 = new FormatRecord(b1, 846, null);\n\t\t// assertFalse(rr.equals(rr2));\n\t\t\n\t\tassertNoDiffs(new HSSFDataFormat(\"Hello, World\"), new HSSFDataFormat(\"Hello, World\"));\n\t\tassertNoDiffs(new HSSFDataFormat(\"Hello, World\"), new HSSFDataFormat(\"Hello, World\", 15));\n    }\n\n\tprivate void assertNoDiffs(final HSSFDataFormat first, final HSSFDataFormat second) {\n\t\tassertTrue(first.compareTo(second) > 0);\n\t\tassertTrue(first.compareTo(second.getFileObject()) < 0);\n\t\tListIterator ll = first.iterator();\n\t\tListIterator secondIt = second.iterator();\n\t\t// check two values\n\t\twhile (ll.hasNext()) {\n\t\t\tassertTrue(secondIt.hasNext());\n\t\t\tString s = ll.next();\n\t\t\tassertTrue(ll.hasNext());\n\t\t\tString sSecond = secondIt.next();\n\t\t\tassertTrue(secondIt.hasNext());\n\t\t\tif (s.compareTo(sSecond) < 0) {\n\t\t\t\tfail(\"First: \" + s + \" Second of: \\n\" + sSecond); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t\tif (s.compareTo(s)!= 0) {\n\t\t\t\tfail(\"First: \" + s + \" Second of: \\n\" + sSecond); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t}\n\t\t/*\n\t\tSystem.out.println(first);\n\t\tSystem.out.println(second);\n\t\twhile(secondIt.hasNext()){\n\t\t\tString s = secondIt.next();\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\tSystem.out.println(second);\n\t\t*/\n\t\twhile (ll.hasNext())\n\t\t\tSystem.out.println(ll.next());\n\t}\n\t\n\n    private void testIsValid(Workbook eWb, Object dp) {\n        assertTrue(dp==null);\n        \n        int count = 0;\n        Iterator i = eWb.getRootRecord().iterator();\n        formatRecord1:\n        while (i.hasNext()) {\n            FormatRecord r = (FormatRecord)i.next();\n            if (r.isNewRecord()) {\n                assertTrue(formatRecord1.equals(r));\n                assertTrue(\"HSSFDataFormat test is invalid. Got \" + formatRecord1, true);\n                count++;\n                continue formatRecord1;\n            }\n            // else this data is not valid.\n            assertFalse(formatRecord1.equals(r.getDataDescriptionRecord()));\n            continue formatRecord1;\n        }\n        assertTrue(\"Expected format for: \" + dp + \" to get back isValid: \"+formatRecord1, count!= 0); //$NON-NLS-1$ //$NON-NLS-2$\n    }\n    \n\tprivate void testIsValid(List<Object> data) {\n\t\ttestIsValid(null, data);\n\t\tassertFalse(data.get(0) instanceof Workbook);\n\t\tIterator it = data.iterator();\n\t\tFormatRecord dp = null;\n\t\twhile (it.hasNext()) {\n\t\t\tdp = (FormatRecord)it.next();\n\t\t\tif (!dp.isNewRecord())\n\t\t\t\tcontinue;\n\t\t\tassertTrue(data.get(0) instanceof Workbook);\n\t\t}\n\t\t\n\t\tVector<FormatRecord> v = new Vector<FormatRecord>();\n\t\tIterator<FormatRecord> vit = data.iterator();\n\t\twhile (vit.hasNext())\n\t\t\tv.addElement(vit.next());\n\t\tassertFalse(v.get(0) instanceof Workbook);\n\t\tassertTrue(v.get(0) instanceof HSSFDataFormat);\n\t\tassertTrue(v.indexOf(v.get(0)) < 1);\n\t}\n\n\tprivate void assertNoDiffs(Object first",
            "finish_reason": "length"
        }
    ],
    "id": "cdb18605-9bc4-463f-9b90-4b5a3f5ddadc",
    "prompt_id": "/EvoSuiteBenchmark/original/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat.java",
    "original_code": "// HSSFDataFormat.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\n\npublic class HSSFDataFormat {\n\n    /**\n     * Get the format index that matches the given format\n     *  string, creating a new format entry if required.\n     * Aliases text to the proper format as required.\n     *\n     * @param format string matching a built in format\n     * @return index of format.\n     */\n    public short getFormat(String format);\n}\n",
    "test_prompt": "// HSSFDataFormatTest.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSSFDataFormat}.\n* It contains one unit test case for the {@link HSSFDataFormat#getFormat(String)} method.\n*/\nclass HSSFDataFormatTest {",
    "time_taken": 61.78242111206055,
    "usage": {
        "prompt_tokens": 426
    }
}
]