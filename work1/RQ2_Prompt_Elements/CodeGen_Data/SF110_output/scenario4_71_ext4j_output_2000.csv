ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
493cb089-df75-4ac9-9570-c6d8022f46c4,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_0Test.java,25.407453536987305,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add's or'at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}

// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {
		
    @Test
    public void test_1(){
        Map<String,String> m_ParametersFormatMappings = new HashMap<String,String>();
        m_ParametersFormatMappings.put(""month"", STRING_SPACE + STRING_FULLN - STRING_EMPTY);//""yyyy-mm""
        m_ParametersFormatMappings.put(""dateUTC"", STRING_UNDERSCORE_ONE_OR_MORE + STRING_UNDERSCORE);//""yyyy-MM-dd'T'HH:mm:ss.SSSZ""
        m_ParametersFormatMappings.put(""day"", STRING_EMPTY);//null
        m_ParametersFormatMappings.put(""hour"", STRING_EMPTY);//null
        m_ParametersFormatMappings.put(""minute"", STRING_EMPTY);//null
        m_ParametersFormatMappings.put(""second"",STRING_EMPTY);//null
        m_ParametersFormatMappings.put(""fullN"", STRING_EMPTY);//null
//        m_ParametersFormatMappings.put(""full"", EMPTY);//null
        m_ParametersFormatMappings.put(""decimalFormat"", STRING_DOT);//""MM.DD HH:mm:ss.SSSZ""
        m_ParametersFormatMappings.put(""formatMapping"", STRING_EMPTY);
        return;
    }

    @Test
    public void test_2(){
        String[] a_pList = {""2010"", ""2010"", ""2010"", ""2010""};
        assertEquals(Arrays.asList(a_pList), Functions.orderWords(""2010""));
        return;
    }

    //unit tests for the following functions
//    @Test
//    public void test_5() throws Exception{
//
//        DecimalFormat m = new DecimalFormat(""##########"");
//        String s = ""12-30-2014"";
//
//        m.setMaximumFractionDigits(m_ParametersFormatMappings.get(""month""));
//        Calendar c = Calendar.getInstance();
//        s = new DecimalFormat("""").format(c.getTime()) + ""-"" + dFormat(s);
//        m.setMaximumFractionDigits(m_ParametersFormatMappings.get(""day""));
//        String result = Functions.dateFormat(new Date(new Long("
c034e696-d9db-4ab4-a54c-6eaf2427bb45,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_1Test.java,25.46198081970215,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add's or'at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}

// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {
		public Functions_1Test() {
				// This is the simplest case of one unit test.
				// AddOneCase is a one case.
				// In this case we are not using the {@link #replaceCRWithBR(String)} method but just converting
				// between characters.
				for (int i = 0; i < 25; i++) {
						mLogger.debug(
								""Adding a word with the replacement { ""
										+ "", "" + replace("" "", ""'"", replace("" "", ""'"", i, replace("" "", ""'"")) + "" ', '%"").trim());
				}
				mLogger.debug(""In the end of the processing, all words are added."");
				//assertEquals(3, wordsLength());
		}

		@Test
		public final void addOneCase() throws Exception {
				// assertTrue(wordsLength() == 1);
				String s = replace(""-"", "" + "", "");
				assertEquals(4, i(s, 1));
		}

		@Test
		public final void addOneCaseNegativeOnePositive() throws Exception {
				String s = replace(""-"", "" + "", "" + replace("" "", ""'"", replace("" "", ""'"", 0, 0)) + ""'"");
				assertEquals(4, i(s, 1));
		}

		@Test
		public final void addOneCaseOnePosPosNegOne() throws Exception {
				String s = replace(""+"", "" + "", "" + replace("" "", ""'"", replace("" "", ""'"", i(i(s, 10), 0, 0)) + ""'""));
				assertEquals(5, i(s, 10));
		}

		@Test
		public final void addOneCaseNegOnePosOneNegPos() throws Exception {
				final String s = replace(""-"", "" + "", "" + replace("" "", ""'"", replace("" "", ""'"", -10, 0)) + ""'"");
				assertEquals(5, i(s, 10));
		}

		@Test
		public final void addOneCaseNegOnePosOnePosNeg() throws Exception {
				final String s = replace(""-"", "" + "", "" + replace("" "", ""'"", replace("" "", ""'"", -10, 0)) + ""'"");
				assertEquals(5, i(s, 10));
		}

		@Test
		public final void addOneCasePos1PosNeg1PosNeg() throws Exception {
				final String s =
						replace(""+"
c2ed0152-d6a8-4a7e-8636-8b4f52ecf7c0,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_2Test.java,25.342850923538208,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add's or'at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}

// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {
		
	private String toTens(int pInt) {
		return pInt + ""TENS"";
	}
	
	private String getBlurb(String pString, int pMaxLength) {
		java.util.Formatter tf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"");
		return tf.format(new Date(System.currentTimeMillis())) + EOL_LINUX + BLURB_SUFFIX + EOL_MAC_LEGACY + BLURB_SUFFIX;
	}
	
	@Test
    public void testCalendarFormat() throws Exception {
    	
		String s = ""2016/11/16 23:59:00"";
		int year = Integer.valueOf(s);
		assertEquals(year, Functions.dateToMilliseconds(s).get(Calendar.YEAR));
		assertEquals(""June 23, 2016"", Functions.dateToHtml(s).toString());
    
    		
		String sLastMonth = ""2016/08/16 23:59:00"";
		int lastMonth = Integer.valueOf(sLastMonth);
		assertEquals(lastMonth, Functions.dateToMilliseconds(sLastMonth).get(Calendar.MONTH));
        
    	Calendar calendar = Calendar.getInstance();
    	calendar.set(Calendar.YEAR, year);
    	calendar.set(Calendar.MONTH, lastMonth);
    	calendar.set(Calendar.DAY_OF_MONTH, 23);
    	calendar.add(Calendar.DATE, 1);
        
    	String sFirstDay = Functions.dateToHtml(calendar.getTime());
    	
    	String sMonth = Functions.dateToHtml(sLastMonth);
    	String sDays = Functions.dateToHtml(calendar.getTime());
        
    	assertEquals(sMonth + "" - Last Month"", Functions.dateToHtml(sLastMonth).toString());
        
    	assertEquals(sMonth + "" - Last Day"", Functions.dateToHtml(calendar.getTime()).toString());
    }
	
	@Test
    public void testNumber() throws Exception {
    	
		String s = ""01 1234"";
    	int number"
81fead0a-0bd1-4980-ba63-f617c5f47511,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_0Test.java,12.640706777572632,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {

    @Test
    public void test1() {
        Page testObject;
        
        testObject = ObjectFactory.createPage();
        assertNotNull(testObject);
    }
	@Test
	public void test2() {
		Pages testObject;
		
		testObject = ObjectFactory.createPagination();
		assertNotNull(testObject);
	}
	@Test
	public void test3() {
		Pages testObject;
		
		testObject = ObjectFactory.createPages();
		assertNotNull(testObject);
	}
	@Test
	public void test4() {
		Pages testObject;
		
		testObject = ObjectFactory.createStaticPage();
		assertNotNull(testObject);
	}

}"
79c3abc4-8a19-4429-b824-f2c1976825ab,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_1Test.java,37.55256724357605,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {

	/**
	 * Executes {@link ObjectFactory#createStaticPage()} method test.
	 * @throws Exception if a test fails
	 */
	@Test
	public void testCreateStaticPage() throws Exception {
		
		try { // the test 
			ObjectFactory.createStaticPage();
		}
		catch (ClassCastException cce){
			
			System.err.println(""The created object has the wrong class"");
			cce.printStackTrace();
			fail(""The created object has the wrong class"");
		}
	}
	
	/**
	 * Executes {@link ObjectFactory#createPagination()} method test.
	 * @throws Exception if a test fails
	 */
	@Test
	public void testCreatePagination() throws Exception {
		
		try { // the test 
			ObjectFactory.createPagination();
		}
		catch (ClassCastException cce){
			
			System.err.println(""The created object has the wrong class"");
			cce.printStackTrace();
			fail(""The created object has the wrong class"");
		}
	}
	
	/**
	 * Executes {@link ObjectFactory#createPages()} method test.
	 * @throws Exception if a test fails
	 */
	@Test
	public void testCreatePages() throws Exception {
		
		try { // the test 
			ObjectFactory.createPages();
		}
		catch (ClassCastException cce){
			
			System.err.println(""The created object has the wrong class"");
			cce.printStackTrace();
			fail(""The created object has the wrong class"");
		}
	}
}
"
b04c0d9e-28bd-472e-bde6-73830bf0134b,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_2Test.java,44.874343156814575,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {

}"
802792a7-a1cd-4b8e-9532-9756342e47c7,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_3Test.java,37.50381684303284,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {

	/**
	 * Test 1 for createPagination <br/>
	 * 1. When paging is created the page and the container is set to null<br/>
	 * 2. The container is called with page number = 1 and the container is not the page count<br/>
	 * 3. When the page is requested, Paging should be created for the container without page number == 1<br/>
	 * 4. When the page is requested, Paging should be created for the container with page number!= 1<br/>
	 * 5. The container is called with page number = 1 and the container is not the page count<br/>
	 * 6. When the page is requested, Paging should be created for the page count + 1 instead of the page count + 1.
	 */
	@Test
	  public void page1() {
		
		ObjectFactory factory = new ObjectFactory();
		
		//TODO: check the number of pages
		
		Pagination page = factory.createPagination();
		
		assertTrue(page instanceof StaticPage);
		
		page.pageNumber = 2;
		
		assertTrue(page.container.pageNumber == 1 && page.container.getPageCount() == 2);
		
	  }
  
}

"
