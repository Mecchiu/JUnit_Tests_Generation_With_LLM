ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
85837d97-c917-46b9-b16d-f36b4fb1f282,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java,57.38734197616577,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in .xml or .sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file) {
        String fileName = file.getName();
        boolean firstPass = false;
        //  First test:  file must end with one of the registered file extensions.
        for (int i = 0; i < fileExtensions.length; i++) {
            if (fileName.endsWith(fileExtensions[i])) {
                firstPass = true;
            }
        }
        if (firstPass) {
            //  Second test:  file header must contain the biopax declaration
            try {
                String header = getHeader(file);
                if (header.indexOf(""www.sbml.org"") > 0) {
                    return true;
                }
            } catch (IOException e) {
            }
        }
        return false;
    }
}
","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {
// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in.xml or.sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file) {
        String fileName = file.getName();
        boolean firstPass = false;
        //  First test:  file must end with one of the registered file extensions.
        for (int i = 0; i < fileExtensions.length; i++) {
            if (fileName.endsWith(fileExtensions[i])) {
                firstPass = true;
            }
        }
        if (firstPass) {
            //  Second test:  file header must contain the biopax declaration
            try {
                String header = getHeader(file);
                if (header.indexOf(""www.sbml.org"") > 0) {
                    return true;
                }
            } catch (IOException e) {
            }
        }
        return false;
    }
}

// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {
		
    /**
     * Sets up test environment for this test class.
     * Creates a graph builder and connects to a new SBML server.
     *
     * @throws IOException when an error occurred.
     */
    @Test
    void setUpTest() throws IOException {
        File file = new File(""src/java/sbml"");
        setUpTestWithFile(file, true);
    }

    /**
     * Removes a file from the disk.
     *
     * @param file File that does not exist.
     * @throws IOException when an error occurred while attempting to remove the file.
     * @see File
     */
    @Test
    void unRemoveFile(File file) throws IOException {
        setUpTestWithFile(file, false);
        file.delete();
    }

    @Test
    void testSetUpBeforeCreate() throws Exception {
        File file = new File(""src/java/sbml"");
        setUpTestWithFile(file, true);
        ImportHandler importHandler = new ImportHandler();
        importHandler.setServerEndpoint(""http://sbml-ws.sandia.gov:80/biopax"");
        importHandler.setBaseDirectory(""/cytoscape/data"");
        GraphReader graphReader = new GraphReader(importHandler);
        
        SBMLBuilder builder = new SBMLBuilder(graphReader, 30);
        builder.setIgnoreUnsupportedEntities(true);
        builder.open();
        
        assertNotNull(""Expected to get a graph while the SBML is running before we get it."", graphReader.getGraph());
        assertNull(""Got a valid graph!"", graphReader.getGraph());
        
        builder.close();
    }
    
    @Test
    void testSetUp() throws Exception {
        //TODO
        return;
    }
}
"
150f7850-b2af-4bc2-90c9-4940031b071a,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java,40.12485313415527,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Gets the appropirate GraphReader object.
     * If the libsbml is not available use the old sbml library.
     *
     * @author Matthias Koenig
     * @param fileName File Name.
     * @return GraphReader Object.
     */
    public GraphReader getReader(String fileName) {
        System.out.println(""Getting SBML reader ..."");
        try {
            // Test if libsbml library is available
            System.loadLibrary(""sbmlj"");
            /* Extra check to be sure we have access to libSBML: */
            Class.forName(""org.sbml.libsbml.libsbml"");
            // Use the libSBML based parser
            System.out.println(""... using 'libsbml parser'"");
            return new SBMLGraphReader2(fileName);
        } catch (Exception e) {
            // If any error occurs use the classic SBML Reader
            return new SBMLGraphReader(fileName);
        }
    }
}
","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {
// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * Gets the appropirate GraphReader object.
     * If the libsbml is not available use the old sbml library.
     *
     * @author Matthias Koenig
     * @param fileName File Name.
     * @return GraphReader Object.
     */
    public GraphReader getReader(String fileName) {
        System.out.println(""Getting SBML reader..."");
        try {
            // Test if libsbml library is available
            System.loadLibrary(""sbmlj"");
            /* Extra check to be sure we have access to libSBML: */
            Class.forName(""org.sbml.libsbml.libsbml"");
            // Use the libSBML based parser
            System.out.println(""... using 'libsbml parser'"");
            return new SBMLGraphReader2(fileName);
        } catch (Exception e) {
            // If any error occurs use the classic SBML Reader
            return new SBMLGraphReader(fileName);
        }
    }
}

// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {
		
    /**
     * This constructor checks the class integrity.
     * An error message should be reported if an object of class ""SBMLFilter_1Test"" is created with invalid parameters.
     */
    public SBMLFilter_1Test() {
    	// This test class uses standard SBML library (libSBML) and does not call any super
    	// super constructor of 'FileFilter' class
        System.out.println(""\nTest class is an empty class..."");
    }

    /**
     * This test class runs it with no SBML library and checks that every parameters of class
	 * ""SBMLFilter_1Test"" are correct.
	* It performs tests that use the new library functionality.
     * If a wrong parameter was passed to the test constructor an error message will be generated.
     */
    @Test
	public void testGetReaderSBML()
			throws IllegalAccessException, IllegalArgumentException, NoSuchMethodException, IOException, InstantiationException, ClassNotFoundException {
           File fOut = new File(""test.sbml"");

           // In the first step of the test the class SBMLFilter class will be loaded as default graph class
			ImportHandler.loadGraphFactory(""org.sbml.sbml.sbmlj.SBMLGraph"");
		    ImportHandler.importSBMLGraph(fOut, ""org.sbml.sbml.jsbml"", new File(""test.jsbml""));
            
           // If first step failed an error message will be reported.
           if (!new SBMLGraphReader(fOut).getClass().equals(GraphReader.class)) {
             System.out.println(""The first step of the test was not well-formed.\n""
                                + ""Was expecting a good SBML GraphReader but got:""); //$NON-NLS-1$
             System.out.println(new SBMLGraphReader( fOut ).getClass().getCanonicalName());
             System.out.println(System.getProperty(""user.home"")
                                + ""/.sbml/unittestData/sbml/sbml/""); //$NON-NLS-1$
             assertTrue(""Failed to load SBML graph from test.jsbml"",false);
             fail(""Failed to load SBML graph from test.jsbml"");
           }
       }
}

"
ff60cf5c-1298-4710-9f0f-8a30764ea815,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java,29.388991355895996,stop,"// SBMLVisualStyleFactory.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;

/**
 * VisualStyleFactory.java
 * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLVisualStyleFactory {

    /**
     *  DOCUMENT ME!
     *
     * @param network DOCUMENT ME!
     * @return DOCUMENT ME!
     */
    public static VisualStyle createVisualStyle(CyNetwork network) {
        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();
        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();
        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();
        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();
        // ------------------------------ Set node shapes ---------------------------//
        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);
        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);
        disMapping.putMapValue(""species"", NodeShape.DIAMOND);
        disMapping.putMapValue(""reaction"", NodeShape.ELLIPSE);
        Calculator shapeCalculator = new BasicCalculator(""SBMLReader Shape Calculator"", disMapping, VisualPropertyType.NODE_SHAPE);
        nodeAppCalc.setCalculator(shapeCalculator);
        // ------------------------------ Set the label ------------------------------//
        // Display the value for geneName as a label
        String cName = ""sbml name"";
        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);
        if (nlc == null) {
            PassThroughMapping m = new PassThroughMapping(new String(), cName);
            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);
        }
        nodeAppCalc.setCalculator(nlc);
        //--------------------- Set the size of the nodes --------------------------//
        //Discrete mapping on nodeType
        Double speciesNodeSize = new Double(30);
        Double reactionNodeSize = new Double(30);
        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);
        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);
        sizeMapping.putMapValue(""species"", speciesNodeSize);
        sizeMapping.putMapValue(""reaction"", reactionNodeSize);
        Calculator sizeCalculator = new BasicCalculator(""SBMLReader Size Calculator"", sizeMapping, VisualPropertyType.NODE_SIZE);
        nodeAppCalc.setCalculator(sizeCalculator);
        nodeAppCalc.setNodeSizeLocked(true);
        // ------------------------------ Set edge arrow shape ---------------------------//
        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);
        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);
        arrowMapping.putMapValue(""reaction-product"", ArrowShape.ARROW);
        arrowMapping.putMapValue(""reaction-reactant"", ArrowShape.NONE);
        arrowMapping.putMapValue(""reaction-modifier"", ArrowShape.CIRCLE);
        Calculator edgeArrowCalculator = new BasicCalculator(""SBMLReader Edge Arrow Calculator"", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);
        edgeAppCalc.setCalculator(edgeArrowCalculator);
        // ------------------------------ Set edge colour ---------------------------//
        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);
        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);
        edgeColorMapping.putMapValue(""reaction-product"", Color.GREEN);
        edgeColorMapping.putMapValue(""reaction-reactant"", Color.RED);
        edgeColorMapping.putMapValue(""reaction-modifier"", Color.BLACK);
        Calculator edgeColorCalculator = new BasicCalculator(""SBMLReader Edge Color Calculator"", edgeColorMapping, VisualPropertyType.EDGE_COLOR);
        edgeAppCalc.setCalculator(edgeColorCalculator);
        //------------------------- Create a visual style -------------------------------//
        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();
        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);
        return visualStyle;
    }
}
","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains one unit test case for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains one unit test case for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {

	SBMLVisualStyleFactoryTest() {
	}

	@Test
	void testCreateVisualStyle() {
		
		assertNotNull(
				""SBMLVisualStyleFactoryTest instance"",
				createVisualStyle(CyNetwork.getInstance(""sbnml.net""))
		);
//		assertNotNull(""SBMLVisualStyleFactoryTest instance"", createVisualStyle(null));	// No input for SBMLVisualStyleFactoryTest!
	} 	

}"
