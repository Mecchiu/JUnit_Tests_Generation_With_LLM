ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
fa4d7d28-8bec-4450-a9dc-2d085c325b66,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_0Test.java,48.47107529640198,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * data of the node
     */
    String type = null;

    String identity = null;

    /**
     * implements Comparable
     * @param node Object
     * @return int values 0 for same and 1 for different
     */
    public int compareTo(Object node);

    java.util.ArrayList<ASTNode> list = new java.util.ArrayList<ASTNode>();

    /**
     * parent of the node
     */
    ASTNode parent = null;

    /**
     * add child to node
     * @param node ASTNode
     */
    public void addChild(ASTNode node);

    /**
     * default constructor
     */
    public ASTNode() {
    }

    /**
     * construct a  node and set its parent
     * @param p ASTNode
     */
    public ASTNode(ASTNode p) {
    }

    /**
     * construct a node and set data types and parent
     * @param type String
     * @param identity String
     * @param p ASTNode
     */
    public ASTNode(String type, String identity, ASTNode p) {
    }

    /**
     * get the parent node
     * @return ASTNode
     */
    public ASTNode getParent();

    /**
     * set the data element type
     * @param t String
     */
    public void setType(String t);

    /**
     * set the data type identity
     * @param id String
     */
    public void setIdentity(String id);

    /**
     * get the data element type
     * @return String
     */
    public String getType();

    /**
     * get the data element identity
     * @return String
     */
    public String getIdentity();

    /**
     * concat type and identity
     * @return String
     */
    public String toString();

    /**
     * display this node and all its children recursively
     * @param wtr Writer
     */
    public void display(Writer wtr);

    /**
     *  reads the node in from a file
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename);

    /**
     * save the node and its children to disk
     * @param filename String
     */
    public void dump(String filename);

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree();
}
","// ASTNode_0Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#compareTo(Object)} method.
*/
class ASTNode_0Test {","// ASTNode_0Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#compareTo(Object)} method.
*/
class ASTNode_0Test {

    /**
     * constructor
     */
    public ASTNode_0Test() {
    }

    /**
     * Default Constructor
     * @param p ArrayList
     */
    public ASTNode_0Test(ArrayList p) {

    }

    /**
     * Compare two nodes using a comparator.
     * @param node1 Object
     * @param node2 Object
     * @return int values 0 for same and 1 for different
     */
    @Test
    public int compareTo(Object node1, Object node2) {

        ASTNode a1 = (ASTNode) node1, a2 = (ASTNode) node2;
        int result = (int) (type.compareTo(a1.getType().toString()));
        if (result==0) {
            result = (parent.getIdentity().compareTo(a1.getIdentity().toString()));
        }
        return result;
    }

    /**
     * Test that the default constructor exists
     */
    @Test
    public void defaultConstructorExists() {

        assertNotNull(""type must not be null"", type);
    }

    /**
     * check the data
     */
    @Test
    public void checkTree() throws Exception{
            assertNotNull(""the input to the test is null"", getTree());
    }

    /**
     * check the data with a tree structure
     * @param testFile String
     */
    public void checkTree(String testFile) throws Exception {
            int result = 0;
            BufferedReader buff = new BufferedReader(new InputStreamReader(
                                new FileInputStream(testFile), 
                                ""UTF-8""));
            String line="""";
            // create a new tree
            Tree st = new Tree(buff);
            String[] data = {""TestData""};
            String rootName = new String();
            st.addChild(new ASTNode(new ASTNode(data), rootName));
            String child;
            while ((line = buff.readLine())!= null) {
                if (line.startsWith(""The data "")) {
                    continue;
                }
                child = line.substring(""The data "".length() - 1);
                try {
                    result = Integer.parseInt(child);
                } catch (Exception ignored) {
                }
                assertEquals(""Tree should be an equal object"", data.length, result);
                st.addChild(new ASTNode(data, line.substring(0, line.length() - 1)));
            }
            // test
            ((DefaultMutableTreeNode) getTree().getRoot()).expandAll();
            buff.close();
            test(testFile);
            buff.close();
    }

    /**
     * Check the data
     * @param testFile String
     */
    public void test(String fileName) throws Exception{
            loadData(fileName);
        // check
        checkTree();
        // and test
        try {
            test(fileName);

        } catch (Exception ex) {
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * loads the tree data from the file
     * @param testFile String
     */
    private void loadData(String testFile){
            BufferedReader buff = new BufferedReader(new InputStreamReader(
                                new FileInputStream(testFile), 
                                ""UTF-8""));
            String line="""";
            StringBuilder file = new StringBuilder();
            while ((line = buff.readLine())!= null) {
                 file.append(line);
                 file.append(""\n"");
            }
            buff.close();

            String[] data = file.toString().split(""\n"");
            DefaultMutableTreeNode firstRoot = null;

            for (int l = 0; l < data.length; l++) {
                ArrayList list = new ArrayList();
                StringTokenizer st = new StringTokenizer(data[l], ""-"");
                while (st.hasMoreTokens()) {
                    st.nextToken().trim();
                    list.add(st.nextToken());
                }
                DefaultMutableTreeNode root = (DefaultMutableTreeNode) createTree().getRoot();
                root.add(new ASTNode(list, data[l]));
                if (firstRoot == null) {
                    firstRoot = root;
                } else {
                    DefaultMutableTreeNode parent = firstRoot;
                    while (parent.getChildCount() > 0) {
                        parent = (DefaultMutableTreeNode) parent.getChildAt(0);
                    }
                    parent.add(new DefaultMutableTreeNode(new ASTNode(list, data[l])));
                    firstRoot = parent;
                }
            }
            // and test
            test(testFile);
    } 
}
"
8ce96313-aef8-4632-9f1a-dae724ccb09b,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_1Test.java,48.18574643135071,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * data of the node
     */
    String type = null;

    String identity = null;

    /**
     * implements Comparable
     * @param node Object
     * @return int values 0 for same and 1 for different
     */
    public int compareTo(Object node);

    java.util.ArrayList<ASTNode> list = new java.util.ArrayList<ASTNode>();

    /**
     * parent of the node
     */
    ASTNode parent = null;

    /**
     * add child to node
     * @param node ASTNode
     */
    public void addChild(ASTNode node);

    /**
     * default constructor
     */
    public ASTNode() {
    }

    /**
     * construct a  node and set its parent
     * @param p ASTNode
     */
    public ASTNode(ASTNode p) {
    }

    /**
     * construct a node and set data types and parent
     * @param type String
     * @param identity String
     * @param p ASTNode
     */
    public ASTNode(String type, String identity, ASTNode p) {
    }

    /**
     * get the parent node
     * @return ASTNode
     */
    public ASTNode getParent();

    /**
     * set the data element type
     * @param t String
     */
    public void setType(String t);

    /**
     * set the data type identity
     * @param id String
     */
    public void setIdentity(String id);

    /**
     * get the data element type
     * @return String
     */
    public String getType();

    /**
     * get the data element identity
     * @return String
     */
    public String getIdentity();

    /**
     * concat type and identity
     * @return String
     */
    public String toString();

    /**
     * display this node and all its children recursively
     * @param wtr Writer
     */
    public void display(Writer wtr);

    /**
     *  reads the node in from a file
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename);

    /**
     * save the node and its children to disk
     * @param filename String
     */
    public void dump(String filename);

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree();
}
","// ASTNode_1Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#getTree(String)} method.
*/
class ASTNode_1Test {","// ASTNode_1Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#getTree(String)} method.
*/
class ASTNode_1Test {
/**
		 * Creates a new of the {@link ASTNode_1Test} instance.
		 * @throws IOException
		 */

}

// ASTNode_1Test.java
"
7bfda834-44a5-4dab-a008-13b042121d2c,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_2Test.java,47.879843950271606,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * data of the node
     */
    String type = null;

    String identity = null;

    /**
     * implements Comparable
     * @param node Object
     * @return int values 0 for same and 1 for different
     */
    public int compareTo(Object node);

    java.util.ArrayList<ASTNode> list = new java.util.ArrayList<ASTNode>();

    /**
     * parent of the node
     */
    ASTNode parent = null;

    /**
     * add child to node
     * @param node ASTNode
     */
    public void addChild(ASTNode node);

    /**
     * default constructor
     */
    public ASTNode() {
    }

    /**
     * construct a  node and set its parent
     * @param p ASTNode
     */
    public ASTNode(ASTNode p) {
    }

    /**
     * construct a node and set data types and parent
     * @param type String
     * @param identity String
     * @param p ASTNode
     */
    public ASTNode(String type, String identity, ASTNode p) {
    }

    /**
     * get the parent node
     * @return ASTNode
     */
    public ASTNode getParent();

    /**
     * set the data element type
     * @param t String
     */
    public void setType(String t);

    /**
     * set the data type identity
     * @param id String
     */
    public void setIdentity(String id);

    /**
     * get the data element type
     * @return String
     */
    public String getType();

    /**
     * get the data element identity
     * @return String
     */
    public String getIdentity();

    /**
     * concat type and identity
     * @return String
     */
    public String toString();

    /**
     * display this node and all its children recursively
     * @param wtr Writer
     */
    public void display(Writer wtr);

    /**
     *  reads the node in from a file
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename);

    /**
     * save the node and its children to disk
     * @param filename String
     */
    public void dump(String filename);

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree();
}
","// ASTNode_2Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#createTree()} method.
*/
class ASTNode_2Test {","// ASTNode_2Test.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains one unit test case for the {@link ASTNode#createTree()} method.
*/
class ASTNode_2Test {
/**
		* Unit test case for {@link ASTNode#createTree()} method.
		*/
		@Test
		void createTree();

		/**
		* Unit method for {@link ASTNode#createTree()} method.
		*/
		@Test
		void createTreeSuccess();

		/**
		* Set up the class.
		*/
		static {
		
	
	}
		
}"
1efc6f54-88a1-4c53-9a2b-c6e80c3ef6c8,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAParser.java,40.77838110923767,stop,"// JMCAParser.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;

public class JMCAParser implements Parser {

    String intermediateFile = ""default.xml"";

    /**
     * parse implements parse for Parser
     * precondition is the intermediatFile is set
     * @param rdr Reader
     * @return ASTNode
     */
    public ASTNode parse(Reader rdr);
}
","// JMCAParserTest.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains one unit test case for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCAParserTest {","// JMCAParserTest.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains one unit test case for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCAParserTest {
String testString =
			""<?xml version=\""1.0\"" encoding=\""utf-8\"" encoding=\""UTF-8\""?>""
			+ ""<env:Env>"" //$NON-NLS-1$
				+   ""<env:Environ>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref1/pref2/Pref1></env:EnvironPref>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref2/Pref2></env:EnvironPref>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref1/pref3></env:EnvironPref>""//$NON-NLS-1$
				+  ""</env:Environ>""
				+  ""<env:EnvironPref></env:EnvironPref>""
				+  //$NON-NLS-1$
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref1/pref2/Pref3></env:EnvironPref>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref2/Pref2></env:EnvironPref>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref1/pref4></env:EnvironPref>""
				+  ""<env:EnvironPref><env:CEN4010/CEN4010_01/pref2/Pref4></env:EnvironPref>""
				+  ""</env:Environ>""
				+  ""</env:Envv>""
			+  ""</env:Env>""

			+ ""   <env:Envs>""
			+  ""   <env:EnvsPref><env:CEN4010/CEN4010_01/pref1/envs4></env:EnvsPref>""
			+  ""   <env:EnvsPref><env:CEN4010/CEN4010_01/pref1/envs4/ENV4>1</env:EnvsPref>""
			+  ""</env:Envs>""
			+  ""<env:EnvsPref></env:EnvsPref>""
			+  ""</env:Envs>"";

    @Test
    void test() throws IOException, ParseException {
        JavaParser parser = new JavaParser();
        String intermediateFile = ""test.xml"";
		ASTNode tree = parser.parse(new StreamBasedInputStream(new FileInputStream(new File(intermediateFile))), null);
        ASTNode root = parser.getASTProcessor().getAST();
        parser.getASTProcessor());
        assertNotNull(root);
        assertTrue(tree.getType() == root.getType() && tree.toString().equals(""Test""));
    }

	Reader getReader(String file) throws IOException {
        FileInputStream fis = new FileInputStream(new File(file));
		Reader reader = new StreamBasedInputStream(fis, fis.available());
        return reader;
    }
}"
0b1a6148-5e6e-4161-a4f5-bc86abdf23c2,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/UILayoutDisplayAnalyzer.java,60.99028396606445,stop,"// UILayoutDisplayAnalyzer.java
package com.soops.CEN4010.JMCA;

/**
 * <p>Title: Group 2 Project </p>
 *
 * <p>Class: CEN4010 Fall 2005</p>
 *
 * <p>Description: Description: UILayoutDisplayAnalyzer implements a dummy Analyzer
 *    use for UI layout  </p>
 *
 * <p>Instructor Dr. Stoeklin</p>
 *
 * @author Group 2
 */
public class UILayoutDisplayAnalyzer implements Analyzer {

    String filename = null;

    /**
     * store the file name for formatted display purposes
     * @param file String
     */
    public void setFileName(String file);

    /**
     * no operational implementation of Analyzer
     * @param dummy ASTNode not used for dummy output
     * @return display string
     */
    public String analyze(ASTNode dummy);
}
","// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains one unit test case for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {","// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains one unit test case for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {

    @Test
    void setFileName() {
	String testFileName = System.getProperty(""user.dir"") + ""\\CEN4010Log.txt"";
	UILayoutDisplayAnalyzer.setFileName(""CEN4010Log.txt"");
	assertNotNull(""unable to read test file from system"", System.getProperty(""user.dir"") + ""\\CEN4010Log.txt"");
    }
	
}"
d7c0a2ab-7e1b-4f64-b582-3e1d36b4ef51,/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAAnalyzer.java,45.88360595703125,length,"// JMCAAnalyzer.java
package com.soops.CEN4010.JMCA;

import java.util.*;

/**
 * <p>Title: JMCAAnalyzer </p>
 *
 * <p>Description: implements Analyzer</p>
 *
 * Group2 for CEN4010 at FSU - Fall 2005
 */
public class JMCAAnalyzer implements Analyzer {

    private String fileName = """";

    private StringBuilder output = new StringBuilder();

    private java.util.HashSet<String> classList = null;

    private static final boolean DEVELOPMENT = false;

    /**
     * Analyze the ASTree and return a formatted string
     * @param root ASTNode
     * @return String
     */
    public String analyze(ASTNode root);

    /**
     * top level analyzer for each class <br>
     * calls analyzeMethod for each method
     * @param node ASTNode
     */
    private void analyzeClass(ASTNode node);

    /**
     * called for each method
     * @param node ASTNode
     */
    private void analyzeMethod(ASTNode node);

    /**
     * recursive method to create a chain of modifiers to a variable <b>
     * using this method then :   a = b + c;  d = a;  e = d; <br>
     *   e would contain both d and a as modifiers it is dependent on
     * @param stE StatementElement
     * @param list ArrayList
     */
    private void createArrayListOfModifiers(StatementElement stE, ArrayList<String> list);

    /**
     * recusive method to analyze statements
     * @param parentNode ASTNode
     * @param statementList ArrayList
     * @param isInSelection boolean
     * @param isInIteration boolean
     */
    private void statements(ASTNode parentNode, ArrayList<StatementDS> statementList, boolean isInSelection, boolean isInIteration);

    /**
     * called for each statement
     * @param node ASTNode
     * @return StatementDS
     */
    private StatementDS analyzeStatement(ASTNode node);

    /**
     * called from analyzeStatement - gets a list of RVals in assignment statements
     * @param locDS StatementDS
     * @param ctr int
     * @param list ArrayList
     */
    private void getRVals(StatementDS locDS, int ctr, ArrayList<ASTNode> list);

    /**
     * helper function - checks for delimiters in a equation where delimiters <br>
     * are defined as arithmetic operands such as '+' and '-'
     * @param id String
     * @return boolean
     */
    private boolean isOperator(String id);

    /**
     * gets the variable name for the lVal of an expression
     * @param ctr int
     * @param list ArrayList
     * @return int
     */
    private int getLVal(int ctr, ArrayList<ASTNode> list);

    /**
     * write the report header to output
     */
    private void setHeader();

    /**
     * Store the file name parsed for formatted display purposes
     * @param fileName String
     */
    public void setFileName(String fileName);
}
","// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains one unit test case for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {","// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains one unit test case for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {
private String[] tokens = {""c#"", ""d"", ""e""};

			private String[] strings = {""a"", ""b"", ""c"", ""d"", ""e""};
			private int[] ints = {""1"", ""2"", ""3"", ""-1"", ""-2"", ""-3""}; 
			private double[] doubles = {""1"", ""2"", ""3"", ""4""};
			private double[] doubles1 = {""1.0"", ""2.0"", ""3.0""};
		private ASTNode[] nodes;
		private ArrayList<String> classesForCodegen;

	
	
		/**
		 * Call the constructor for a class - 
		 * first - generates the arrayList of classes and its modifiers
		 * @param classList List<String> classes
		 * @param list ArrayList<ASTNode> list of statements inside the main
		 * @exercise constructor - first - collects all the classes,modifiers and values
		 * @exercise constructor2 - first-and only class
		 * @exercise second - creates the arrayList of methods - uses both types of lists from the variable
		 * @see java/lang/Object
		 */
	@Test
	public void testConstructor() {
		
		this.classesForCodegen = new ArrayList<String>();
		String var;
		String classNameOfFunction;
		String val;
		String valString;
		String rval;
		String rvalString;
		
		classNameOfFunction = """";
		val = """";
		classNameOfFunction += ""   public ""+ this.tokens[0] + ""(){  ""+ this.tokens[1] + ""  }\n\n"";
		classNameOfFunction += ""   ""+ this.classesForCodegen.get(0) + "" {  \n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""  {\n"";
		classNameOfFunction += this.classesForCodegen.get(0) +  ""      return "" + this.tokens[2] + "";\n"";
		classNameOfFunction += ""    }\n\n"";
		classNameOfFunction += ""   public ""+ this.tokens[1] + ""()  {\n"";
		classNameOfFunction += ""    return "" + this.ints[0] + "";\n"";
		classNameOfFunction += ""   }\n\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""  {\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""    for "" + this.ints[1] + "" in {"";
		classNameOfFunction += this.tokens[1] + ""\n"";
		classNameOfFunction += ""      }\n"";
		classNameOfFunction += ""\n\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""  {\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""    for "" + this.ints[1] + "" in {"";
		classNameOfFunction += this.tokens[2] + ""\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""        for "" + this.ints[1] + "" in {"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""     }\n"";
		classNameOfFunction += ""  }\n"";
		classNameOfFunction += ""\n\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""    {  \n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""      return ""+this.doubles[3] + "";\n"";
		classNameOfFunction += ""    }\n\n"";
		classNameOfFunction += "" }\n\n"";
		classNameOfFunction += ""\n\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""\n\n"";
		classNameOfFunction += ""   ""+ this.classesForCodegen.get(0) + ""() {""  + this.doubles[2] + ""  }\n"";
		classNameOfFunction += ""\n\n"";
		classNameOfFunction +=  ""   ""+ this.classesForCodegen.get(0) + ""  {\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""    public  static  public int "" + this.doubles[0] + ""  =  "" + ""  {"" + this.tokens[2] + ""  };\n"";
		classNameOfFunction += this.classesForCodegen.get(0) + ""    public  static  public  int "" + this.double1 + ""  =  "" + ""  {"" + this.ints[1] + ""  };\n"";
		classNameOfFunction += this.classes"
