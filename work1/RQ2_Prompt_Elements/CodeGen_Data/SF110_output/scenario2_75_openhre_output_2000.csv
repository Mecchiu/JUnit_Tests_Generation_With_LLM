ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
182f56ee-fa51-4089-a81b-9cf1acf9fe3b,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_0Test.java,59.17411804199219,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     *
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }
}
","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {

    @Test
    public void test01add_param_file() throws IOException {
        // file as directory
        String dir_1 = ""D:\\test\\"";
        File f_1 = new File(dir_1);
        f_1.mkdir();
        File f_1_1 = new File(dir_1, ""1"");
        f_1_1.mkdir();
        
        ClientHttpRequest request = new ClientHttpRequest();
        Map<String, String> form = new HashMap<String, String>();
        form.put(""file"", ""file1.txt"");
        Map<String, File> file = new HashMap<String, File>();
//		file.put(""1"", new File(""D:\\test\\1.txt""));
//		request.file = file;
        String fileName = ""fFileName.txt"";
//		request.file = file;
        
        request.put(null, form); //add all form data
        request.add((InputStream)null, file);//add files or files as directory 
        File file2 = new File(f_1, fileName);
        f_1_1.mkdir();
        request.post(""/upload/"", file2, null);
//		System.out.println(""Client test: file2 created"");
    }
	
    @Test
    public void test02getHeaderOnly() throws IOException {
        // file as directory
        String dir_1 = ""D:\\test\\"";
        File f_1 = new File(dir_1);
        f_1.mkdir();
        File f_1_1 = new File(dir_1, ""1"");
        f_1_1.mkdir();
        
        ClientHttpRequest request = new ClientHttpRequest();
        Map<String, String> form = new HashMap<String, String>();
        form.put(""file"", ""file1.txt"");
        Map<String, File> file = new HashMap<String, File>();
//		file.put(""1"", new File(""D:\\test\\1.txt""));
//		request.file = file;
        String fileName = ""fFileName.txt"";
        request.file = file;
        request.put(null, form); //add all form data		

        request.getHeaderOnly(""/upload/""); //get upload request only
        String requestValue = request.getHeaderOnly(null); //get only header value
        assertEquals(""Get header value:file1.txt"", form.get(""file1.txt""), requestValue);
    }

    @Test
    public void test03getHeaderOnlyWithCookie() throws IOException {
        // file as directory
        String dir_1 = ""D:\\test\\"";
        File f_1 = new File(dir_1);
        f_1.mkdir();
        File f_1_1 = new File(dir_1, ""1"");
        f_1_1.mkdir();

        ClientHttpRequest request = new ClientHttpRequest();
        Map<String, String> form = new HashMap<String, String>();
        form.put(""file"", ""file1.txt"");
        Map<String, File> file = new HashMap<String, File>();
        file.put(""1"", new File(""D:\\test\\1.txt""));
//		file.put(""1"", new File(""D:\\test\\1.txt""));
        String fileName = ""fFileName.txt"";

        request.file = file;
        request.put(null, form); //add all form data
        request.getHeaderOnly(""/upload/"", null, ""Cookie"");
        String requestValue = request.getHeaderOnly(null);

        request.file = file;
        request.getHeaderOnly(""/upload/""); //get upload request only
        assertEquals(""Get header value:file1.txt"", form.get(""file1.txt""), requestValue);
    }
	
    @Test
    public void test04postOnlyWithContentLength(){
            int contentLength = (new Random()).nextInt(500);
            String contentLength = Integer.toString(contentLength);
            
            ClientHttpRequest request = new ClientHttpRequest();
            String formData = ""ContentLength: "" + contentLength;
            Map<String, String> form = new HashMap<String, String>();
            form.put(""contentLength"", contentLength);
            request.put(null, form); //add form data
            System.out.println(""ContentLength request created with "" + form.get(""contentLength""));
            
            //post with content length
            OutputStream os = null;
            try {
            	
                URLConnection connection = new URL(""http://localhost:""+port+""/test"").openConnection();
                connection.setDoOutput(true);     //request use Data  
                
                //create a connection with content length
                connection = (URLConnection) connection.getConnection();
                
                // send the multipart request
                os = connection.getOutputStream();
                os.write(""POST /test/ HTTP/1.1\r\n"" + formData + ""\r\n"".getBytes());
                os.flush();
                os.close();
                os = null;

                InputStream is = connection.getInputStream();
                
                FileInputStream fis = new FileInputStream(file);//Create a FileInputStream. The stream is not closed by this object.
                byte[] buffer = new byte[10000]; //buffer size
                int readNumber = 0;
                while ((readNumber = is.read(buffer))!= -1) {
                    //write bytes to outputstream
                    os.write(buffer);
                    os.flush();
                }
                
                InputStream is2 = connection.getInputStream();
                int bufferSize = os.available();
                String b = """";
                while (is2.read()!= -1) {
                    //read bytes from outputstream
                    b += (char)is2.read();
                }
                System.out.println(b);
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

            fis = new FileInputStream(file);//Create a FileInputStream. The stream is not closed by this object
            String fileContent = new String(fis.read(10000));// create string
            assertEquals(contentLength, fileContent);
            assertEquals(contentLength, fileContent.length());
    }
}"
8af2398a-760e-4a65-b2c2-e75b8a6441af,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_1Test.java,56.79226326942444,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     *
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {

    @Test (expected = IOException.class)
    public void test_error_1() throws IOException {
    	URLConnection con = new URL(""http://localhost:9876/"").openConnection();
    	con.setConnectTimeout(1000);
    	con.setReadTimeout(1000);
    	con.connect();
        
        try {
	    	ClientHttpRequest request = new ClientHttpRequest();
	    	// request.post(parameters);
	    	request.post();
	    } catch (IOException e) {
	        throw e;
	    }
        throw new IOException(""client error"");
    }

	@Test
    public void test_success_1() throws IOException {
    	final String filename = String.format(""%d"", new Random().nextInt(1000000000));
		
    	File file = new File(filename);
    	FileInputStream input = new FileInputStream(file);
    	try {
        	final URL url = new URL(""file://"" + filename);
            final URLConnection urlConn = url.openConnection();

	    	final ClientHttpRequest request = new ClientHttpRequest();
	    	request.setParameters(null);
	    	urlConn.connect();

	        URLConnection connection = urlConn;
	        Map<String,String> parameters = new HashMap<String, String>(1);
	        parameters.put(""param1"", ""value1"");
	        request.setParameters(parameters);
	        
	        InputStream in = connection.getInputStream();

	        return_check(in);
	    } finally {
	        input.close();
	    }
    }
    
    private static void return_check(InputStream in) {
        HashMap<String,String> results = new HashMap<String, String>();
        
        results.put(""key1"", ""value1"");
        results.put(""key2"", ""value2"");
        results.put(""key3"", ""value3"");
        
        assertEquals(results, new ClientHttpRequest().getParameters());
        
        try {
	        boolean success = false;
	        Iterable<String> iterator = results.keySet().iterator();
	        while (iterator.hasNext()) {
	            final String key = iterator.next();
	            final String value = results.get(key);
	            assertEquals(key, value);
	            // success = success | value
	            success = iterator.hasNext();
	        }
	        assertTrue(""return_check on empty client"", success);
        } catch (IOException e) {
            fail();
        }
    }
    
}
"
a0e5eb9f-70e3-4522-bda7-dba9224b8e68,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_2Test.java,56.7315571308136,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     *
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {

	private static final String TEST_URL = null;
	
	/**
	* This function parses and tests the parameters of the request.
	*/
	@Test
    public void testParseParameters() {
		
		/**
		 * the parameters of the request
		 */
		Map<String, Object> params = new HashMap<>();
		String urlParams = new Random().nextInt(3) + ""?foo=bar&baz=qux"";
		String[] paramsArray = urlParams.split(""&"");
		for(String param: paramsArray) {
			if (param.contains(""foo="")) {
				String[] parArr = param.split(""="");
				params.put(parArr[1], parArr[2]);
			}
		}
		
		/**
		 * the request type, which can be POST or PUT
		 */
		String type = null;

		/**
		 * if it the request type is POST, it adds the cookies that were sent in the request
		 */
		if(type == null) {
			type = ClientHttpRequest.POST;
			params.put(ClientHttpRequest.HTTP_COOKIE_PARAM, new Random().nextInt(30));
		}
		
		/**
		 * if it the request type is PUT, it adds the ""X-BASIC-AUTH"" to the request
		 */
		type = ClientHttpRequest.PUT;
		/**
		 * if it the request type is GET, it adds ""X-BASIC-AUTH"" to the request
		 */
		if(type == null) {
			type = ClientHttpRequest.GET;
			params.put(ClientHttpRequest.HTTP_AUTH, ""Basic"");
		}

		/**
		 * if it type is POST, it adds Cookie
		 */
		params.put(ClientHttpRequest.HTTP_COOKIE_PARAM, ""X-AUTH-TOKEN"");
		
		/**
		 * if it type is PUT, it adds Cookie for ""test""
		 */
		params.put(""test"", ""test"");
		
		/**
		 * if type is GET, it adds the ""test"" to the request
		 */
		params.put(ClientHttpRequest.HTTP_RETURN, ""test; charset=US-ASCII"");
		
		/**
		 * if it type is PUT, it adds ""test"" to the request
		 */
		post2();
		
		// test POST
		urlParams = new Random().nextInt(3) + ""?foo=bar&baz=qux"";
		method = ClientHttpRequest.POST;
		
		/**
		 * if it type is POST, it adds the cookies that were sent in the request
		 */
		type = method;
        params.put(ClientHttpRequest.HTTP_COOKIE_PARAM, ""X-AUTH-TOKEN"");
		
		method = ClientHttpRequest.POST;
		
		String authString = null;
		type = method;
		
		/**
		 * if it type is PUT, it adds the ""X-BASIC-AUTH"" to the request
		 */
		type = method;
		authString = ""Basic"";
		params.put(ClientHttpRequest.HTTP_AUTH, authString);
		
		post2();
		
		parameters = params;
       
    }
	
	/**
	 * this function post the request with the passed parameters into the server
	 */
	private static InputStream post2() {
		try {
			FileInputStream fis = new FileInputStream(new File(""httpUploadTest/clientHttpRequest_2Test.txt""));
			URLConnection connection = new URL(TEST_URL).openConnection();
			URLConnection.setRequestProperty(""Authorization"", ""Basic ""+params.get(ClientHttpRequest.HTTP_AUTH));
			connection.setDoInput(true);
            InputStream is = new BufferedInputStream(fis);
            FileOutputStream fos = new FileOutputStream(""httpUploadTest/clientHttpRequest_2Request.txt"");
            OutputStream out = new BufferedOutputStream(fos);
			byte[] buffer = new byte[1024];
			int len;
			while ((len = is.read(buffer))!= -1) out.write(buffer, 0, len);
            is.close();
			out.close();
			connection.disconnect();
		}
		catch (IOException ioe) {
            assertTrue(""Error occured while testing request"", false);
		}
		return null;
	}
	
	/**
	 * Method to make a connection to the server
	 * @return connection to the server
	 */
	public static URLConnection newConnection() {
		URLConnection connection = null;
		try {
			connection = new URL(""http://localhost:8080/request"").openConnection();
		}
		catch (IOException ioe) {
            assertTrue(""Error occured while creating a connection to the server"", false);
        }
		return connection;
	}
	
	/**
	 * Method to make an input stream for POST and PUT operations
	 * @return InputStream for POST and PUT operations
	 */
	public static InputStream newInputStream() {
		String urlParams = null;
		String[] paramsArray = null;
		String method = null;
		try {
			urlParams = new Random().nextInt(2) + """";
			HashMap<String, Object> map = new HashMap<>();
			int i = 0;
			HashMap<String, Object> rv = new HashMap<>(4);
			
			rv.put(ClientHttpRequest.HTTP_URI, ""http://localhost:8080/request"");// method=POST
			rv.put(ClientHttpRequest.HTTP_METHOD, """"+method); // httpmethod=POST
			
			while(i<4) {
				paramsArray = new Random().nextInt(4)+""&""+ClientHttpRequest.HTTP_URI; // get the params
				paramsArray[0] = urlParams +paramsArray[0];
				rv.put(paramsArray[2], paramsArray[1]);
				i++;
			}
			
			urlParams = """";
			paramsArray[0]= urlParams; 
			
			method = httpMethod;
			rv.put(""HTTP_METHOD"", method); //httpmethod=POST
			rv.put(""HTTP_URI"", urlParams);// httpuri
			rv.put(ClientHttpRequest.HTTP_AUTH"
bbe259c5-1f00-4bcd-aeb7-a573649b3322,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_3Test.java,55.920520067214966,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     *
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {

	/**
	* Test sending HTTP POST request with all the parameters.
	*
	* @throws Exception Exception
	*/
	@Test
	void test0() throws Exception{
		URLConnection connection1 = new URL(""http://localhost:8080/"").openConnection();
		connection1.setAllowUserIntercepts(false);

		// HTTP request with all parameters
		URLConnection connection2 = new URL(""http://localhost:8080/"").openConnection();

		assertEquals(""http.cookies"", connection1.getRequestProperty(""cookie1""));
		assertEquals(""http.parameters"", connection1.getRequestProperty(""param""));

		assertEquals(""http.cookies"", connection2.getRequestProperty(""cookie1""));
		assertEquals(""http.parameters"", connection2.getRequestProperty(""param""));
	}
	
	/**
	* Test sending HTTP POST request with parameters.
	*
	* @throws Exception Exception
	*/
	@Test
	void test1() throws Exception{
		URL url = new URL(""http://localhost:8080/"");

		// HTTP request with a parameter
		URLConnection conn1 = url.openConnection();
		conn1.setDoInput(true);
		conn1.setDoOutput(true);
		conn1.setUseCaches(true);

		url = (URL) conn1.getURL();
		assertEquals(""http.cookies"", conn1.getURL().getRequestProperty(""cookie1""));
		assertEquals(""http.cookies"", url.getRequestProperty(""cookie1""));

		String param = new String();
		url = (URL) conn1.getURL();
		assertTrue(""http.parameters"", url.getRequestProperty(""param"").equals(param));
	}

	/**
	* Test sending HTTP POST request with some parameters and parameters added in it.
	*
	* @throws Exception Exception
	*/
	@Test
	void test2() throws Exception{
		URL url = new URL(""http://localhost:8080/"");
		// POST request with a parameter
		URLConnection connection1 = url.openConnection();
		connection1.setDoOutput(true);
		// POST request with parameters
		connection1.setRequestMethod(""GET"");
		connection1.setRequestProperty(""param"", ""value1"");

		String params = url.getRequestProperty(""param"");
		assertEquals(""http.params"", params);

		url = url.openConnection();
		// GET request with another parameter
		connection1.setRequestMethod(""GET"");
		connection1.setRequestProperty(""param"", ""value2"");

		params = url.getRequestProperty(""param"");
		assertEquals(""http.params"", params);
	}

	/**
	* Test sending HTTP POST request with some parameters.
	*
	* @throws Exception Exception
	*/
	@Test
	void test3() throws IOException {
		try (InputStream in = new FileInputStream(new File(""F:\\test.file""));
				OutputStream out = new FileOutputStream(new File(""F:\\test2.file""))) {

			ClientHttpRequest.post(new HashMap(), null);
			String params = new String(new byte[] { (byte) 0x80, (byte) 0x81 });
			assertEquals(""http.params"", params);

			out.write(new byte[] { (byte) 0x80, (byte) 0x81 });
			// test sending GET request wihch without parameters
			in.read();

			out.write(new byte[] { (byte) 0x84, (byte) 0x81 });
			// test sending POST request wihch without parameters
			in.read();

			// test if both requests are in the same state : server not working, request must stop, so the input stream might be corrupted
			in = new FileInputStream(new File(""F:\\test.file""));
			out = new FileOutputStream(new File(""F:\\test2.file""));

			ClientHttpRequest.post(new HashMap(), in);

			assertTrue(""test1"", in.read()!= -1);
			assertTrue(""test2"", in.read()!= -1);
			in.close();
			out.close();
		}
	}

	/**
	* Test sending HTTP POST request with all the parameters.
	*
	* @throws Exception Exception
	*/
	@Test
	void test4() throws Exception{
		String url = new URL(""http://localhost:8080/"").toString();
		ClientHttpRequest.post(null, url);
		String urlparam = new URL(url).getQuery();
		assertEquals(""http.query"", urlparam);
	}
	
}
"
3482a047-b526-4ff1-9a08-5e2250985949,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_4Test.java,55.715575218200684,length,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     *
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }
}
","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {
/**
		 * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
		 *
		 * @param _cookies request cookies
		 * @param _parameters request parameters
		 * @return input stream with the server response
		 * @throws IOException
		 * @see setParameters
		 */
		static InputStream post(String[] _cookies, Object[] _parameters) throws IOException {
				return post(_cookies, _parameters, null);
		}
    static void writeTo(File _file, ClientHttpRequest _httpRequest) throws IOException {
        OutputStream _os = ClientHttpRequest.getOutputStream(_httpRequest);
        InputStream _is = _httpRequest.getInputStream();
        try {
            _os.close();
            _is.close();
        }
        finally {
            _os = null;
            _is = null;
        }
    }

		/**
		 * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
		 *
		 * @param _file file to write the server response to
         * @param _httpRequest request
		 * @throws IOException
		 */
		static void post(File _file, ClientHttpRequest _httpRequest) throws IOException {

			FileOutputStream _outf = new FileOutputStream(_file, true);
			OutputStream _out = ClientHttpRequest.getOutputStream(_httpRequest);
			try {
				_out.write(_httpRequest._content, _httpRequest._contentLength);
			}
			finally {
				_out = ClientHttpRequest.closeOutputStream(_outf);
			}
		}

    static ClientHttpRequest.InputStream getInputStream(File _file) throws IOException {
        return ClientHttpRequest.getInputStream(_file, ""test"", ""UTF-8"");
    }

		/**
		 * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
		 *
		 * @param _cookies request cookies
		 * @param _parameters request parameters
		 * @param _encoding encoding
		 * @return input stream with the server response
		 * @throws IOException
		 */
		static ClientHttpRequest.InputStream getInputStream(String[] _cookies, Object[] _parameters, String _encoding) throws IOException {
				return ClientHttpRequest.getInputStream(_cookies, _parameters, _encoding);
		}

    static ClientHttpRequest.OutputStream getOutputStream(File _file) throws IOException {
        return ClientHttpRequest.getOutputStream(_file, ""test"", ""UTF-8"");
    }

		/**
		 * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
		 *
		 * @param _cookies request cookies
		 * @param _parameters request parameters
		 * @param _encoding encoding
		 * @return output stream for the server response
		 * @throws IOException
		 */
		static ClientHttpRequest.OutputStream getOutputStream(String[] _cookies, Object[] _parameters, String _encoding) throws IOException {
				return ClientHttpRequest.getOutputStream(_cookies, _parameters, _encoding);
		}


		/**
		 * post request parameters to the server and get response output stream
        *
        * @param _url url
        * @param _encoding encoding
        * @return stream of input stream
        * @throws IOException
        */
		static ClientHttpRequest.InputStream postParams(String _url, Map<String, Object> _params, String _encoding) throws IOException {
				return ClientHttpRequest.postParams(_url, _params, _encoding);
		}

		/**
		 * post request parameters to the server and get response stream that doesn't return response body
        *
        * @param _url url
        * @param _encoding encoding
        * @return stream of input stream
        * @throws IOException
        */
		static ClientHttpRequest.InputStream postParams(String _url, Map<String, Object> _params) throws IOException {
				return ClientHttpRequest.postParams(_url, _params);
		}

		/**
		 * post request parameters to the server and get response stream that doesn't return response body
        *
        * @param _url url
        * @param _encoding encoding
        * @return stream of input stream
        * @throws IOException
        */
		static ClientHttpRequest.InputStream postParams(URL _url, Map<String, Object> _params, Map<String, Object> _formParams) throws IOException {
				return ClientHttpRequest.postParams(_url, _params, _formParams);
		}

		/**
		 * post request parameters to the server and get response stream that doesn't return response body
        *
        * @param _url url
        * @param _encoding encoding
        * @return string
        * @throws IOException
        */
		static ClientHttpRequest.InputStream postParams(String _url, Map<String, Object> _params, Map<String, Object> _formParams) throws IOException {

            StringBuffer buffer = new StringBuffer();
            buffer.append(""POST "");
            buffer.append(_url);

            if (null!= _params && _params.size() > 0) {
                buffer.append("";"");
                for (Iterator<Map.Entry<String, Object>> it = _params.entrySet().iterator(); it.hasNext(); ) {
                    Map.Entry<String, Object> _param = it.next();
                    buffer.append('?');
                    buffer.append(_param.getKey());
                    buffer.append(""="");
                    buffer.append(_param.getValue());
                    if (it.hasNext()) {
                        buffer.append(""&"");
                    }
                }
            }
            if (null!= _formParams &&! _formParams.isEmpty() & _params!= null) {
                // form params
                String form = """";
                for (Map.Entry<String, Object> _param : _formParams.entrySet()) {
                    form += ("";param="" + _param."
3c93d779-3f77-4a75-845c-16fa338cf2e0,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_5Test.java,56.78618240356445,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * post the POST request to the server, with the specified parameter
     *
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }
}
","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {
public static class Test {
                @Test
                public void test() {
                        ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
                        Object input = generateTestFile();
                        String parameterName = new Random().nextInt(30);
                        Object expectedOutput = """";
                        ClientHttpRequest.setParameter(input,parameterName,expectedOutput);
                        String inputStream = """";
                        OutputStream outputStream = null;
                        try {
                                outputStream = clientHttpRequest.post("""",input);
                            } catch (IOException e) {
                                assertTrue(false);
//                            } 
                            inputStream = """";
                        } catch (Exception e) {
                            assertTrue(false);
                        }
                        String expectedOutput2 = inputStream;
                        ClientHttpRequest.setParameter(expectedOutput,parameterName,expectedOutput2);
                        Object expectedOutput3 = expectedOutput2;
                        ClientHttpRequest.setParameter(expectedOutput3,parameterName,expectedOutput);
                        String expectedOutput4 = inputStream;
                        ClientHttpRequest.setParameter(expectedOutput4,parameterName,expectedOutput);
                        Object expectedOutput5 = expectedOutput4;
                        ClientHttpRequest.setParameter(expectedOutput5,parameterName,expectedOutput);
                        InputStream expectedOutputStream2 = null;
                        OutputStream expectedOutputStream3 = null;
                        OutputStream expectedOutputStream = null;
                        try {
                            expectedOutputStream2 = clientHttpRequest.post("""",expectedOutput);
                        } catch (Exception e) {
                            assertTrue(false);
                        }
                        File expectedFile = null;
                        expectedFile = File.createTempFile(""file"", null);
                        expectedFile.delete();
                }
                File generateTestFile() {
                        File f = File
                               .createTempFile(""test"", null);
                        try {
                                random.setSeed(f.getAbsolutePath() + 
                                        ""?file=/tmp/&timeout=10&count="" + 
                                        ""10&method=POST"" +
                                        ""&acceptHeader=application/json"");
				InputStream inputStream = new FileInputStream(f);
//				HashMap<String, String> param = new HashMap<String, String>();
//				param.put(""file"",f.getAbsolutePath());
//				param.put(""timeout"",String.valueOf(10));
//				param.put(""count"",String.valueOf(10));
//				param.put(""method"",""POST"");
//				param.put(""acceptHeader"",""application/json"");
//
//				ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
//				clientHttpRequest.setParameter(param,parameterName,expectedOutput);
			Object file = f;
//			} catch (IOException e) {
//				assertTrue(false);
//			}
                        return f;
                }
                private void setParameter(Object object, String name, Object value) throws IOException {
                        Map<String, Object> map = new HashMap<String, Object>();
                        map.put(name, value);
                        ClientHttpRequest.setParameter(object, value, map);
                }
        }

        @Test
        public void test() {
                ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
                Object input = new File(""/tasks/"").toURI();
                String name = generateTestFile().toString();
                Object result = null;
                ClientHttpRequest.setParameter(input, name, result);
                assertNotNull(name);
//                if (result.equals(new File(""/tasks/"").toURI())) {
//                    System.out.println(""TEST PASSED"");
//                } else {
//                assertTrue(false);
//                }
        }

}
"
327fbfef-7e4d-4f96-9f41-ee41cd4b40db,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_6Test.java,55.54885005950928,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * post the POST request to the server, with the specified parameters
     *
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }
}
","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {
/**
		* Post the POST request to the server, with the specified parameters
		* @param name1 first parameter name
		* @param value1 first parameter value
		* @param name2 second parameter name
		* @param value2 second parameter value
		* @return input stream with the server response
		* @throws IOException
		*/
	public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
                URL url = new URL(""http://server/servlet/test/post"");
        URLConnection conn = url.openConnection();
        if(conn instanceof FileInputStream){
                conn.setChunkedStreamingMode(1024);
                FileInputStream stream = ((FileInputStream) conn);
                byte[] buffer = new byte[16384];
                int read = stream.read(buffer);
                while(read!= -1) {
                        write(buffer, read);
                        buffer = new byte[16384];
                        read = stream.read(buffer);
                }
        }

        HttpHost p = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
        String queryString = ""name=""+name1 + ""&value=""+value1 + ""&name2=""+name2+""&value2=""+value2;
        String postString = ""POST method=""+queryString;
        StringEntity strEntity = new StringEntity(postString, ""application/x-www-form-urlencoded"", ""UTF-8"");
        conn.setRequestProperty(""Content-Length"",Integer.toString(postString.length()));
         return conn.getInputStream();
	}

    /**
     * @throws IOException if an I/O exception occurs
     */
    @Test
    public void test() throws IOException {
	ClientHttpRequest_6Test.this.post((String)""test"", (Object)""test"", ""name"", ""value"");
    }

    /*
    Test method sendForm http method POST with parameters
    @Test
    public void test() throws IOException {
	ClientHttpRequest_6Test.this.post(""test"", (Object)""test"", ""name"", ""value"");
    }
    */
}

/**
*
* Class of {@link ClientHttpRequest}.
* For the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {
	/**
	 * POST the POST request to the server, with the specified parameters
	 * @param name1 first parameter name
	 * @param value1 first parameter value
	 * @param name2 second parameter name
	 * @param value2 second parameter value
	 * @param name3 third parameter name
	 * @param value3 third parameter value
	 * @return input stream with the server response
	 * @throws IOException
	*/
	public InputStream post(String name1, Object value1, String name2, Object value2,
	String name3, Object value3) throws IOException {

   	  return post(name1, value1, name2, value2, name3, value3);	
        }
}
"
e8c509f3-d452-411b-8c8f-f34ffc19ffe5,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_7Test.java,56.05386543273926,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * post the POST request to the server, with the specified parameters
     *
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }
}
","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {
private final Random r = new Random(System.currentTimeMillis());
		private final ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		private static final String POSTURL = ""http://cahchas.mock.cst.com"";
		private static final String PASSWORD = ""password"";
		protected final int N = 100, K = 300;
		private static final int TESTSCOUNT = 20;
		protected void setParameter(String name, Object val) throws IOException {
			Iterator<Map.Entry<String, Object>> it = clientHttpRequest.getParameters().entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry<String, Object> entry = it.next();
				String key = name + ""."" + entry.getKey();
				if (r.nextInt(100) < val.toString().length()) {
					it.remove();
				}
				assertEquals(val.toString(), clientHttpRequest.getParameter(name, key, (String) null));
			}
			if (r.nextInt(1000) < val.toString().length() || r.nextInt(100) < N) {
				it = clientHttpRequest.getParameters().entrySet().iterator();
				while (it.hasNext()) {
					clientHttpRequest.addParameter(name, val.toString());
					it.remove();
				}
			}
		}
		@Test
		public void test() throws IOException {
			for (int i = 0; i < TESTSCOUNT; i++) {
				if (generateFile(100)) {
					clientHttpRequest.post(POSTURL, ""{}"", PASSWORD, N, K, true);
				} else {
					clientHttpRequest.post(POSTURL, ""{}"", PASSWORD, N, K, false);
				}

				if (generateFile(K)) {
					clientHttpRequest.post(POSTURL, ""{}"", PASSWORD, N, K, ""true"");
				} else {
					clientHttpRequest.post(POSTURL, ""{}"", PASSWORD, N, K, ""false"");
				}
			}

			// get request content
			HttpRequestRequest request = (HttpRequestRequest) clientHttpRequest.getRequest();
			assertTrue(request.getEntityLine() > 0L);

			// content length
			assertEquals(N, request.getEntityDataLength());

			// content type
			assertEquals(""UTF-8"", request.getEntityContentType());

			// encoding
			assertEquals(""charset="" + Charsets.UTF_8.asString(), request.toString());
		}
		private boolean generateFile(final int count) throws IOException {
			Map<File, FileOutputStream> map = new HashMap<File, FileOutputStream>();

			for (int i = 1; i <= count; i++) {
				String tmp = String.valueOf(r.nextInt(100) * 25) +
						String.valueOf(r.nextInt(100) * 25) +
						String.valueOf(r.nextInt(100) * 25);
				if (count % 2 == 0) {
					tmp += ""true"";
				}
				File tmpDir = new File(""tmp/test"", tmp);
				map.put(tmpDir, new FileOutputStream(tmpDir));
			}

			for (Iterator<Map.Entry<File, FileOutputStream>> it = map.entrySet().iterator(); it.hasNext(); ) {
				FilePath fp = it.next().getKey();
				byte[] tmp = fp.toContents();
				File tmpDir = new File(fp.toString());
				try {
					fp.writeDirectly(new FileInputStream(tmp));
					fp.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
				it.remove();
			}

			return true;
		}
	}
"
db40d5fd-b649-4785-9ef0-993ebcc88ebd,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_8Test.java,53.40419912338257,stop,"// ClientHttpRequest.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    /**
     * post the POST request to the server, with the specified parameters
     *
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains one unit test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {
protected String path;
		protected Object[] parameters;
		protected String cookie;
		protected String response;
		protected String[] formdata;
		protected Map<String, String> header;
		protected byte[] file;

		/**
		 * Create test object and return it.
		 */
        public static ClientHttpRequest_8Test create() {
			final ClientHttpRequest p = new ClientHttpRequest_8Test().newInstance();
			return p;
		}

		/**
		 * Initialize this object after the constructor call.
		 */
        protected void setParameters(final String path, final Object[] parameters) {
			this.path = path;
			this.parameters = parameters;
		}

        /**
         * Constructor for serialized instance.
         */
        public ClientHttpRequest_8Test() {
        }

        /**
         * Initialize instance after the constructor call.
         *
         * @param path to add post parameters
         * @param parameters to add post parameters
         */
		protected void setParameters(final String path, final Object[] parameters) {
			this.path = path;
			this.parameters = parameters;
		}

        /**
         * Constructor for serialized instance.
         *
         * @param parameters parameters to add post parameters
         */
		protected void setParameters(final Object[] parameters) {
			this.parameters = parameters;
		}

        /**
         * Constructor for serialized instance.
         *
         * @param path to add post parameters
         * @param filename name of the file for POST parameters
         * @param parameters parameters of the file
         * @param file file to add post parameters
         */
		protected void setParameters(final String path, final String filename, final Object[] parameters, final String file) {
			this.path = path;
			this.file = new Random(System.currentTimeMillis()).nextInt() == 0? new ObjectInputStream(new FileInputStream(filename)).readObject() : file;
			this.parameters = parameters;
			this.response = new String();
		}

		/**
		 * Constructor for serialized instance.
		 *
		 * @param path to add post parameters
		 * @param parameters parameters to add post parameters	
		 * @param filename name of the file for POST parameters
		 * @param cookie cookies
		 * @param response response to the request
		 * @param formdata form data
		 * @param header header
		 * @param responseToCookie response to the cookie
		 * @param fis body stream
		 * @param file file
		 * @param header header
		 * @param response response to the request
		 */
		protected void setParameters(String path, Object[] parameters, String filename, String cookie, String response, Object[] formdata, String header,String responseToCookie, File fis, Object[] file, String header,String response) {
			this.path = path;
			this.parameters = parameters;
			this.cookie = cookie;
			this.response = response;
			this.formdata = formdata;
			this.header = header;
			this.file = fis.toByteArray();
			this.responseToCookie = responseToCookie;
		}
}"
dab69cbc-869b-4aae-af5f-41234d47685b,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_0Test.java,50.88238549232483,length,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    /**
     * get User with username, org and email
     *
     * @param username cn variable
     * @param org o variable
     * @param email email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }
}
","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {
// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    /**
     * get User with username, org and email
     *
     * @param username cn variable
     * @param org o variable
     * @param email email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email!= null &&!email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org!= null) && (username!= null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users!= null) {
                    String userid = (String) users.get(username);
                    if (userid!= null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }
}

// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_0Test {
		/**
		* Test method for {@link SimpleUserMgr#getUser(int, String, String)}.
		*/
    @Test
    void test_getUser() {
        int userid = 12;
    	int userid2 = 22;
    	int userid3 = 33;
    	User user = null;

        try {
            // try unique email first (this should always return the user)
            user = (User) id.get(userid);
            if (user == null)
                user = (User) id.get(userid2);
            if (user == null)
                user = (User) id.get(userid3);
        } catch (IOException e) {
            cat.error(""test_1_getUser: "" + e);
        }
        assertNotNull(user);
        assertEquals(""getUser - User's id mismatch"",userid,user.getId());
        assertEquals(""getUser - User's name mismatch"",user.getUsername(),user.getName().toUpperCase());
        assertNotNull(user.getOrgList());
        assertEquals(""test_2_getUserId"",userid2+"""",((String) user.getOrgList().get(0)).toUpperCase());
        assertEquals(""test_3_getUserId"",userid3+"""",((String ) user.getOrgList().get(1)).toUpperCase());
    }

    /**
	* Test method for {@link SimpleUserMgr#getUsers(int)} method.
	*/
    @Test
    void test_getUserCollection() {
        // test for null arguments
        assertNull(SimpleUserMgr.getUsers(0));

        // test for normal cases
        ArrayList<User> users1 = new ArrayList<>();
        Vector<String> users2 = new Vector<>();
        int startId = new Integer(1250).intValue();
        int endId = new Integer(1250).intValue();
        JDBMHashtable<String> users3 = JDBMHashtable.init(new Properties(""""));
    	boolean empty = JDBMEnumeration.NEXT_FALSE;
    	try {
    	    JDBMEnumeration.PREVIOUS_TRUE;
    	} catch (IOException e) {
    	    cat.error(""getUserCollection: "" + e);
    	}
        while (users3.size() > 0) {
            users1.add(users3.get(0));
        }
        while (empty && users1.size() > 0) {
            users2.add(users3.get(0));
        }
        int cnt = users2.size();
        Vector<User> newusers = new Vector<>();
        if (users2.size() > 0)
            cnt &= ~(users2.size() - 1);
        while (users2.size() > 0) {
            newusers.add(users2.elementAt(0));
            if (cnt & 1) {
                users2.remove(0);
                if (users2.size() > 0)
                    cnt &= ~(users2.size() - 1);
            }
        }
        assertEquals(""test_4_getUserCollection: User"",users1.size(),users2.size());
        assertTrue(""Failed to put users in correct order"",users2.equals(newusers));
    }

    /**
	* Test method for {@link SimpleUserMgr#UserManager(Properties)}.
	*/
    @Test
    void test_JDBM_MGR() throws IOException {
        // test for valid properties object
        Properties props = new Properties();
        String prop = props.getProperty(""usermanager.""+SimpleUserMgr.class.getName() +"".dir"",""./users.properties"");
        //String prop = System.getProperty(""usermanager.dir"");
        String prop2 = false;
        String prop3 = "".browsersoft.aacs.users.conf"";
        props.setProperty(""usermanager.dir"",prop);
        props.setProperty(""usermanager.dir.prop3"",prop3);

        // test for null arguments
        assertNull(SimpleUserMgr.UserManager(null));

        props.setProperty(""usermanager.dir"", prop);
        props.setProperty(""usermanager.dir.prop3"", prop3);

        // test on properties
        ArrayList<String> list = new ArrayList<>();
        props.listProperties("""");
        props.listProperties(""."");
        props.remove(""."");
        String prop1 = """";
        props.remove(""."");
        props.list(""."");
        String prop2 = """";
        props.remove(""."");
        props.list(""."");
        String prop3 = ""abc"";
        props.remove(""."");
        props.list(""."");

        // test properties in files
        props.listProperties("".browsersoft.aacs.users.properties"");
        assertEquals(""test_5_getUserManager: dirProps"",props.getProperty(""usermanager."" + SimpleUserMgr.class.getName() + "".dir""),prop);
        assertEquals(""test_5_getUserManager: prop3"",props.getProperty(""usermanager.dir.prop3""),prop);
        try {
            InputStream bis = new UserManagerManager().openURL(new URL(""file://""+props.getProperty(""usermanager.dir"")));
            BufferedReader br = new BufferedReader(new Input"
2a5376b1-e846-471b-95a5-b7967cde967b,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_1Test.java,53.65437984466553,stop,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    /**
     * Get all the userNames for a given organization
     *
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }
}
","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_1Test {","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_1Test {
public String[] namesbyOrg(String org) {
			ArrayList nameList = new ArrayList();
			try {
				JDBMRecordManager rm = JDBMRecordManager.getManager(""SimpleUserMgr_1Test"");
				JDBMEnumeration oj = rm.keys();
				while (oj.hasMoreElements()) {
					String e = oj.nextElement();

					// Check if organization exists.
					JDBMHashtable users = rm.getHashtable(e);
					if (users.contains(org)){
						JDBMEnumeration e1 = users.keys();
						while (e1.hasMoreElements()) {
							String u=e1.nextElement();
							nameList.add(u);
						}
					}
				}
			} catch (IOException e) {
				cat.error(""getNamesbyOrg: "" + e);
			} catch (jdbm.DBError e) {
				cat.error(""getNamesbyOrg: "" + e);
			} catch (jdbm.DBNotFound e2) {
				cat.error(""getNamesbyOrg: "" +
				this.getClass().getName() + "" doesn't seem to exist!"");
			}

			Vector v = new Vector();
			v.addElement(""Fred"");
			v.addElement(""Harry"");
			v.addElement(""Mike"");
			nameList.addAll(v);
			v.removeAllElements();
			return v.toArray(new String[v.size()]);
		}
}
"
d7acf922-7ed7-4b9d-8bd6-100adafa3a1c,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_2Test.java,53.65935659408569,length,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    /**
     * get the email addresses of all users in an organization
     *
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }
}
","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_2Test {","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_2Test {

    /**
     * Test cases - tests UserMgr.getMailbyOrg method
     * @throws IOException
     * @throws Exception
     * @see SimpleUserMgr.SimpleUserMgr_Test
     * @see java.io.File
     * @see java.io.InputStream
     */

    @Test
    public void testGetMailbyOrg_String() throws Exception {


		URL url;
		String urlString;
		try {
			url = new URL(""file://""+Utility.getUserDataFile().getCanonicalPath());
		}
		catch (Exception e) {
			url = null;
		}
//		url = urlString = url.toURI().toURL();

		if ( url!= null ) {
			Vector v = new Vector();
			try {
				urlString = urlString.substring(1);
			}
			catch (Exception e) {
				urlString = null;
			}
			try {
				JDBMRecordManager dbm = null;
				try {
					dbm = JDBMRecordManager.getInstance(url);
				}
				catch (Exception e) {
					Utility.fail(""getMailbyOrg: "" + e);
				}
				JDBMEnumeration e = dbm.getEnumeration();
				while (e.hasMoreElements()) {
					JDBMHashtable table = (JDBMHashtable) e.nextElement();
					Vector v2 = table.getVector();
					for (int i = 0; i < v2.size(); ++i) {
						Vector v = (Vector) v2.get(i);
						if ( ( (String) v.elementAt(0).toString()).contains(urlString) ||
								 ( v.size() == 1 && (String) v.set(0).toString().equalsIgnoreCase(urlString))) {
//							Vector v3 = ArrayList.class.cast(v.elementAt(0)).toArray();
							System.out.println(""User found in "" + urlString);
							
						}
					}
				}
			}
			catch (Exception e1) {
				cat.error(""getMailbyOrg: "" + e1);
			}
		}
		Utility.getFile(""users.properties"", Utility.getUserDataFile());
    }

    /**
     * Test cases - tests UserMgr.getMailbyOrg method
     * @throws Exception
     * @see SimpleUserMgr.SimpleUserMgr_Test
     * @see java.io.File
     * @see java.io.InputStream
     */

  
    @Test
    public void testGetMailbyOrg_InputStream() throws Exception {


		Vector v = new Vector();
		BufferedReader br = new BufferedReader(new StringReader(Utility.getFile(""users.properties"")));
		String input;
		String key;
		while ((key = br.readLine())!= null) {
			if ( (this.getClass()).getName().equals(""SimpleUserMgr_2Test"") && 
					key.startsWith(""#"")) {
				continue;
			}
			StringTokenizer tokenizer = new StringTokenizer(key.trim(),Utility."","""");
			while (tokenizer.hasMoreTokens()) {
				String token = tokenizer.nextToken(); // token without '#'
				int index = token.indexOf(""=""); // get index of key
				if (index == -1 && token.indexOf(""."") == -1) {
					continue;
				}
				String key1 = token.substring(0,index).trim();
				String value = token.substring(index+1); //value after key
				
				if (""key"".equals(key1)) {
					System.out.println(""KEY: "" + key + "" "" + value + "" "" + value);
				}
				else {
					Vector v2 = new Vector();
					JDBMEnumeration e = null;
					try {
						e = JDBMEnumeration.getEnumerator(key.toCharArray(), value.toCharArray());
					}
					catch (Exception e2) {
						cat.error(""getMailbyOrg: "" + e2);
					}
//					JDBMRecordManager dbm = null;
//					try {
//						dbm = JDBMRecordManager.getInstance(url);
//					}
//					catch (Exception e3) {
//						Utility.fail(""getMailbyOrg: "" + e3);
//					}
					
					Vector v3 = new Vector();
					while (e.hasMoreElements()) {
						JDBMRecordManager table = (JDBMRecordManager) e.nextElement();
						v3.add(table.getRecord(null, key.toCharArray(), value.toCharArray()));
					}
					JDBMHashtable table = new JDBMHashtable(v3);
					v3.clear();
					
					JDBMHashtable[] array = {table};
					v.addElement(array);
				}
			}
		}

		try {
			while ((input = br.readLine())!= null) {
				StringTokenizer tokenizer = new StringTokenizer(input, Utility.getLineBreak());
				while (tokenizer.hasMoreTokens()) {
					String token = tokenizer.nextToken().trim();
					Vector v2 = new Vector();
					JDBMEnumeration e = null;
//					e = JDBMEnumeration.getEnumerator(token, ""\n"");
					try {
						e = JDBMEnumeration.getEnumerator(token.toCharArray());
					}
					catch (Exception e2) {
						cat.error(""getMailbyOrg: "" + e2);
					}
//					JDBMRecordManager dbm = null;
//					try {
//						dbm = JDBMRecordManager.getInstance(url);
//					}
//					catch (Exception e3) {
"
592f6ef5-b923-4afa-be9e-95e1fda28f36,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_3Test.java,55.35793328285217,stop,"// SimpleUserMgr.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public class SimpleUserMgr implements UserMgr {

    /**
     * get all the users in in the persistent hashtable
     *
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }
}
","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_3Test {","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains one unit test case for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_3Test {
 /**
		      * The method for accessing the JDBMHashtable (in the new constructor).
		      * @return Properties
		      * @throws java.io.IOException
		      */
    private static Properties getProperties() throws IOException {
		   Properties pp = new Properties();
		   pp.load( new InputStreamReader(
		        new InputStream() {
					@Override
					public int read() throws IOException {
						return 'c';
					}
				       }) );
		   return pp;
	   }
		 /**
		      * Test constructor.
		      */
    private SimpleUserMgr_3Test() throws IOException {
	   Properties pp = getProperties();
	   id.clear();
	   id = new HashSet();
	   id.add(""username"");
          id.add(""password1"");
	   id.add(""username2"");
    }
		 /**
		     * The type of test to run.
		     * @param args arguments
		     */
    @Test
    public void getUsers(final String[] args) {
		   if (args.length == 1 ) {
			   // Check if the username is present in persistent hashtable.
			   JDBMRecordManager crm = new JDBMRecordManager();
			   JDBMEnumeration users = crm.enumerate(""User"");
			   Vector usersVector = users.next();
			   boolean found = false;
			   String nameString;
			   JDBMHashtable hash;
			   while(usersVector.hasMoreElements()) {
				   usersString = (String) usersVector.nextElement();
				   found = false;
				   if (usersString.toUpperCase().startsWith(""USER"") && id.containsKey(usersNameString)) {
					   nameString = getName(crm, usersString);
					   found = true;
					   break;
				   }
				   else if (usersString.toUpperCase().startsWith(""USER2"") && id.containsKey(usersNameString) && id.containsKey(nameString)) {
					   nameString = getName(crm, usersString);
					   found = true;
					   break;
				   }
				   if (nameString.equals(id.get(usersNameString))) {
					   found = true;
					   break;
				   }
			   }
			   if (found) {
				   System.out.println(""User : '"" + nameString + ""' already exists."");
			   }
			   else {
				   id.add(usersNameString);
				   id.add(nameString);
				   hash = crm.get(nameString);
				   if (hash!= null) {
					   // add the hash table
					   System.out.println(""Hash Table found:"" + hash.getName());
				   }
				   else {
					   System.out.println(""Hash table was not present."");
				   }
			   }
		   }
		   else if (args.length > 0) {
			   System.out.println(""There is one argument with parameters: "" +
				   args[0]);
		   }
    }
    
    public String getName(JDBMEnumeration crm, String user) {
        int index = user.toLowerCase().indexOf((String) id.get(user));
        do {
            crm.next();
            if(crm.next().toString().equals(user))
                return crm.next().toString();
        } while(index >= 0);
        return null;
    }
    
    /**
     * The tests for the {@link SimpleUserMgr_3Test#getUsers(String[])}.
     */
    @Test
    public void testGetAll() {
		  SimpleUserMgr sm = new SimpleUserMgr_3();
		  StringBuffer result = sm.getUsers(new String[] {} );
		  assertNotNull(""Null users"", result);
	}

	/**
	  The methods for {@link SimpleUserMgr#export()}.
	  @throws java.io.IOException
	  */
    @Test
    public void testExport() throws IOException {
		  SimpleUserMgr sm = new SimpleUserMgr_3();
		  String result = sm.export();
		  assertNotNull(""Null"", result);
	}
}
"
f3154cc4-89bb-4780-8022-d373cf20e0c7,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModule.java,7.39275860786438,length,"// FilePolicyModule.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;

/**
 * This module represents a collection of files containing polices,
 * each of which will be searched through when trying to find a
 * policy that is applicable to a specific request. It does not support
 * policy references.
 * <p>
 * Note that this class used to be provided in the
 * <code>com.sun.xacml.finder.impl</code> package with a warning that it
 * would move out of the core packages eventually. This is partly because
 * this class doesn't represent standard functionality, and partly because
 * it isn't designed to be generally useful as anything more than an
 * example. Because so many people have used this class, however, it stayed
 * in place until the 2.0 release.
 * <p>
 * As of the 2.0 release, you may still use this class (in its new location),
 * but you are encouraged to migrate to the new support modules that are
 * much richer and designed for general-purpose use. Also, note that the
 * <code>loadPolicy</code> methods that used to be available from this class
 * have been removed. That functionality has been replaced by the much more
 * useful <code>PolicyReader</code> class. If you need to load policies
 * directly, you should consider that new class.
 *
 * @since 1.0
 * @author Seth Proctor
 */
public class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {

    /**
     * Attempts to find a policy by reference, based on the provided
     * parameters. Specifically, this module will try to treat the reference
     * as a URL, and resolve that URL directly. If the reference is not
     * a valid URL, cannot be resolved, or does not resolve to an XACML
     * policy, then no matching policy is returned. This method never
     * returns an error.
     *
     * @param idReference an identifier specifying some policy
     * @param type type of reference (policy or policySet) as identified by
     *             the fields in <code>PolicyReference</code>
     * @param constraints any optional constraints on the version of the
     *                    referenced policy (this will never be null, but
     *                    it may impose no constraints, and in fact will
     *                    never impose constraints when used from a pre-2.0
     *                    XACML policy)
     * @param parentMetaData the meta-data from the parent policy, which
     *                       provides XACML version, factories, etc.
     * @return the result of looking for a matching policy
     */
    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {
        // see if the URI is in fact a URL
        URL url = null;
        try {
            url = new URL(""file:"" + policyDir + idReference.toString() + "".xml"");
        } catch (MalformedURLException murle) {
            // it's not a URL, so we can't handle this reference
            return new PolicyFinderResult();
        }
        // try resolving the URL
        AbstractPolicy policy = null;
        try {
            policy = reader.readPolicy(url);
        } catch (ParsingException pe) {
            // An error loading the policy could be many things (the URL
            // doesn't actually resolve a policy, the server is down, the
            // policy is invalid, etc.). This could be interpreted as an
            // error case, or simply as a case where no applicable policy
            // is available (as is done when we pre-load policies). This
            // module chooses the latter interpretation.
            return new PolicyFinderResult();
        }
        // check that we got the right kind of policy...if we didn't, then
        // we can't handle the reference
        if (type == PolicyReference.POLICY_REFERENCE) {
            if (!(policy instanceof Policy))
                return new PolicyFinderResult();
        } else {
            if (!(policy instanceof PolicySet))
                return new PolicyFinderResult();
        }
        // finally, check that the constraints match ... note that in a more
        // powerful module, you could actually have used the constraints to
        // construct a more specific URL, passed the constraints to the
        // server, etc., but this example module is staying simple
        if (!constraints.meetsConstraint(policy.getVersion()))
            return new PolicyFinderResult();
        // if we got here, then we successfully resolved a policy that is
        // the correct type, so return it
        return new PolicyFinderResult(policy);
    }
}
","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {
// FilePolicyModule.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;

/**
 * This module represents a collection of files containing polices,
 * each of which will be searched through when trying to find a
 * policy that is applicable to a specific request. It does not support
 * policy references.
 * <p>
 * Note that this class used to be provided in the
 * <code>com.sun.xacml.finder.impl</code> package with a warning that it
 * would move out of the core packages eventually. This is partly because
 * this class doesn't represent standard functionality, and partly because
 * it isn't designed to be generally useful as anything more than an
 * example. Because so many people have used this class, however, it stayed
 * in place until the 2.0 release.
 * <p>
 * As of the 2.0 release, you may still use this class (in its new location),
 * but you are encouraged to migrate to the new support modules that are
 * much richer and designed for general-purpose use. Also, note that the
 * <code>loadPolicy</code> methods that used to be available from this class
 * have been removed. That functionality has been replaced by the much more
 * useful <code>PolicyReader</code> class. If you need to load policies
 * directly, you should consider that new class.
 *
 * @since 1.0
 * @author Seth Proctor
 */
public class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {

    /**
     * Attempts to find a policy by reference, based on the provided
     * parameters. Specifically, this module will try to treat the reference
     * as a URL, and resolve that URL directly. If the reference is not
     * a valid URL, cannot be resolved, or does not resolve to an XACML
     * policy, then no matching policy is returned. This method never
     * returns an error.
     *
     * @param idReference an identifier specifying some policy
     * @param type type of reference (policy or policySet) as identified by
     *             the fields in <code>PolicyReference</code>
     * @param constraints any optional constraints on the version of the
     *                    referenced policy (this will never be null, but
     *                    it may impose no constraints, and in fact will
     *                    never impose constraints when used from a pre-2.0
     *                    XACML policy)
     * @param parentMetaData the meta-data from the parent policy, which
     *                       provides XACML version, factories, etc.
     * @return the result of looking for a matching policy
     */
    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {
        // see if the URI is in fact a URL
        URL url = null;
        try {
            url = new URL(""file:"" + policyDir + idReference.toString() + "".xml"");
        } catch (MalformedURLException murle) {
            // it's not a URL, so we can't handle this reference
            return new PolicyFinderResult();
        }
        // try resolving the URL
        AbstractPolicy policy = null;
        try {
            policy = reader.readPolicy(url);
        } catch (ParsingException pe) {
            // An error loading the policy could be many things (the URL
            // doesn't actually resolve a policy, the server is down, the
            // policy is invalid, etc.). This could be interpreted as an
            // error case, or simply as a case where no applicable policy
            // is available (as is done when we pre-load policies). This
            // module chooses the latter interpretation.
            return new PolicyFinderResult();
        }
        // check that we got the right kind of policy...if we didn't, then
        // we can't handle the reference
        if (type == PolicyReference.POLICY_REFERENCE) {
            if (!(policy instanceof Policy))
                return new PolicyFinderResult();
        } else {
            if (!(policy instanceof PolicySet))
                return new PolicyFinderResult();
        }
        // finally, check that the constraints match... note that in a more
        // powerful module, you could actually have used the constraints to
        // construct a more specific URL, passed the constraints to the
        // server, etc., but this example module is staying simple
        if (!constraints.meetsConstraint(policy.getVersion()))
            return new PolicyFinderResult();
        // if we got here, then we successfully resolved a policy that is
        // the correct type, so return it
        return new PolicyFinderResult(policy);
    }
}

// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains one unit test case for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {
		/**
		<p>A test that tests <code>findPolicy</code>.</p>
		<p>The motivation for this test is that we can test
		both the {@link PolicyReader Module} as well as by directly
		reading a policy from a file.</p>
		*/
	@Test
    public void testFindPolicy() throws FileNotFoundException, MalformedURLException {
        // create a new module, but"
2d97766b-be2f-4694-a256-5fcf14e9b436,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/User.java,51.57651901245117,length,"// User.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;

/**
 * User class contains all the necessary attributes of a logged in user
 *
 * @author $Author: grodecki $
 * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class User implements Comparable, Serializable {

    /**
     * Check Digest against identity
     *
     * @param digest is digest to be checked against
     * @param identity to be checked
     */
    public boolean checkDigest(String digest, String identity) {
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            // ignore the label
            digest = digest.substring(5);
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            // ignore the label
            digest = digest.substring(6);
        }
        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);
        byte[] hash = hs[0];
        byte[] salt = hs[1];
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        boolean valid = true;
        if (!MessageDigest.isEqual(hash, pwhash)) {
            valid = false;
            cat.warn(""doesn't match: "" + identity);
        }
        return valid;
    }
}
","// UserTest.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains one unit test case for the {@link User#checkDigest(String, String)} method.
*/
class UserTest {","// UserTest.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains one unit test case for the {@link User#checkDigest(String, String)} method.
*/
class UserTest {
@Test
        public void test() {
            // Test case for check against ID
            String hash = sha.digest(""{SHA}"").substring(0, 20);
            String identity = sha.digest(""{SSHA}"").substring(0, 30);
            int identitysize = identity.length();
            String password = sha.digest(""{PWHASH}"").substring(0, 20);
            int passwordsize = password.length();
            int hashsize = 20;
            
			/*
			 * Check Digest against Identifer
			 *
			 * TODO: I should get ""null"" when the value for password is null (not all fields)
			 */
            if (messageDigest == null) {
                MessageDigest md = MessageDigest.getInstance(""MD5"");
                md.update(""{SHA}"".getBytes());
                hash = md.digest();
            }
			/*
			 * Check Digest against Id of the User.
			 *
			 * For example, test for a user with one identity, id=""rootuserid""
			 *
			 * NOTE: the password is not verified, since it depends on user's password length
			 */
            String[] tokens = {""user"", ""id"", ""password""};
            boolean valid = false;
            for (String value : tokens) {
                /* TODO: this could be made more precise by passing ""password"" as string to test()
                                but it should work fine for now */
                String value0 = value;
                if (password == null) {
                    value = value0.substring(0, 1);
                } else {
                    value = value.substring(0, 1);
                }
                for (String username : tokens) {
                    if (!User.checkIdentifier(username, value0))
                        continue;
                    HashSet uname = new HashSet();
                    uname.add(username);
                    uname.add(""password"");
                    if (User.checkPassword(username, value)) {
                        valid = true;
                        break;
                    }
                }
            }
            assertTrue(""CheckDigest did not match for username: "" + value0, valid);
            
            /*
			 * Get Password.
			 */
                                        if (password.length() <= passwordsize) {
                                            password = Base64.decode(password.toCharArray());
                                        } else if (password.length() > passwordsize) {
                                            password = Base64.encode(password);
                                        }
                                        
            assertTrue(""Password is equal to the one sent to user"", sha.digest(""{PWHASH}"".getBytes()) == password);
            /*
			 * Compare Id
			 */
                                        // TODO: this could be made more precise by passing ""password"" as string to test()
                                        if (password.length() <= passwordsize) {
			                    String[] token = {user, id, password};
                                                Base64.encode(token);
                                            int position = 0;
                                            iteration = 0;
                                            hash = sha.digest(""{SHA}"".getBytes());
                                            while (iteration < 10) {
                                                position = 0;
                                                value = sha.digest(""{SHA}"".getBytes());
                                                System.out.print(
                                                    value);
                                                if (hash!= null) {
                                                    if (base64 == null)
                                                            hash = base64.hash(hash.getBytes(), hash.getBytes().length); 
                                                        byte b = 0;
                                                    do {
                                                         b = (byte) (hash[position] ^ value[position]);
                                                         System.out.print(
                                                            b);
                                                         iteration++;
                                                        } while (position++;++position < 20);
                                                } else {
                                                    if (hash==null)
                                                            hash = Base64.encode(value);
                                                         position = 0;
                                                         b = value[0];
                                                         System.out.print(
                                                            b);
                                                         iteration++;
                                                }
                                                try {  
                                                    Thread.sleep(10);
                                                } catch (InterruptedException e) {
                                                    AssertionError.setB(e);
                                                }
                                            }
                                        }
			/*
			 * compare
			 */
                                            // we are using a tokenizer to avoid time zone savings.
                                            StringTokenizer st = new StringTokenizer(value.toCharArray(), '-', 8);
                                            if (st.hasMoreTokens()) {
                                                Object o = st.nextToken().trim();
				            // System.out.println(""comparing password: "" + o.toString());
                                            } else {
                                                // not possible to have it in result set without it.
                                                    assertFalse(""checkDigest did not match for username: "" + token.toString(), valid);
                                            }
			/*
			 * Check Identifier
			 */
            String username = tokens[0];
            //
            byte[] hash0;
            String value0;
            messageDigest = null;
            iter"
12c85929-da64-4dff-ad91-4ac6dec67fa7,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_0Test.java,52.50454592704773,length,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Load and get the Properties from the Config File
     *
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }
}
","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps(String)} method.
*/
class Login_0Test {","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps(String)} method.
*/
class Login_0Test {
Set<String> testSet = new HashSet<>();
		
		Login_0Test() {
			Properties props = getProps(""login-test.properties"");
			testSet = new HashSet<String>(props.keySet());
		}
	
        /**
         * Get log4j properties from the properties file ""login-test.properties""  
         */
        Properties getProps(){
            Properties props = new Properties(); // empty
            props.loadFromXML(new File (""login-test.properties""));
	            return props;
        }
        
        /**
	     * Get the default log4j properties
	     * @throws LoginException, ParseException
	     */
        void getDefaultPropsAndCheckErrorCase() throws LoginException, ParseException {
            Properties prop = getProps(""login.properties"");
            for (String key : testSet) {
                String value = prop.getProperty(key);
                if (key.startsWith(""login-default-""))
                    assertEquals(value, prop.getProperty(""login-default-"" + key));
            }
            // This test needs to be in sync with what is done in the
	            // 'testProperties' config file
            assertEquals(""No login default value found"", prop.getProperty(""log4J.LoggerImpl""), null);
            assertEquals(""No login default value found"", 
                         prop.getProperty(""log4J.Logger.level.test""), ""OFF"");
        }
        
	     /**
	     * Get the log4j properties from the file system
	     */
        void getLog4jPropsFromFileSystem(String theDir) {
            Properties props = getProps(theDir);
            for (String key : testSet) {
                String value = props.getProperty(key);
                if (key.startsWith(""login-default-""))
                    assertEquals(value, props.getProperty(""login-default-"" + key));
            }
	        // This test needs to be in sync with what is done in the
	        // 'testProperties' config file
            assertEquals(""No login default value found"", value, props.getProperty(""log4J.LoggerImpl""));
            assertEquals(""No login default value found"", 
                         String.valueOf (value), 
                         String.valueOf (props.getProperty(""log4J.Logger.level.test"")));
        }
        
}

// login_1.java
class Login_1Test {
	Properties oldPropSet;
	Properties newPropSet;

	Login_1Test () {
		Properties pProps = new Properties();
		oldPropSet = new Properties(); 
		newPropSet = new Properties();
		Login_1Test.initProps(pProps, oldPropSet, newPropSet);
	}
	
	@Test
	public void testLog4J () {
		TimeZone toz1 = TimeZone.getTimeZone(""GMT"");
		StringTokenizer tok1 = new StringTokenizer(""GMT"",
				""+00:00"");
		String tok2 = new StringTokenizer(""GMT"",
                ""+01:00"");
		
		Properties old = oldPropSet;
		old.clear();
		oldPropSet = new Properties(); 
		
		Properties new = newPropSet;
		new.clear();
		newPropSet = new Properties(); 
		

		new.setProperty(""log4J.LoggerImpl"", Level.FATAL.getName()+"".fatal"");
		new.setProperty(""log4J.Logger.level.fatal"", Level.WARNING.getName());
		old.setProperty(""log4J.LoggerImpl"", Level.FATAL.getName()+"".fatal"");
		old.setProperty(""log4J.Logger.level.fatal"", Level.FATAL.getName()+"".fatal"");
		
		old.clear();
		newPropSet.setProperty(""log4J.LoggerImpl"", Level.FATAL.getName()+"".fatal"");
		newPropSet.setProperty(""log4J.Logger.level.fatal"", Level.INFO.getName());
		old.setProperty(""log4J.LoggerImpl"",Level.FATAL.getName()+"".fatal"");
		old.setProperty(""log4J.Logger.level.fatal"", Level.INFO.getName());
	    // This test just needs to be in sync with what is done in

	    assertEquals(""No log4J.LoggerImpl set from old config file"", ""fatal"", old.getProperty(""log4J.LoggerImpl""));
	    assertEquals(""No log4J.Logger.level.fatal set from old config file"", Level.FATAL.getName(), old.getProperty(""log4J.Logger.level.fatal""));
	    assertEquals(""No log4J.LoggerImpl set from old config file"", ""fatal"", new.getProperty(""log4J.LoggerImpl""));
	    assertEquals(""No log4J.Logger.level.fatal set from old config file"", Level.FATAL.getName(), new.getProperty(""log4J.Logger.level.fatal""));
		
		old = new;
		newPropSet = old;
		
		//This test just needs to be in sync with what is done in
	    assertEquals(""No log4j.Logger set from new config file"", ""fatal"", old.getProperty(""log4j.LoggerImpl""));
	    assertEquals(""No log4j.Logger.fatal set from new config file"", Level.FATAL.getName(), newPropSet.getProperty(""log4j.Logger.fatal""));
		
		new.setProperty(""log4j."
08ff9bc9-fd26-4637-8084-1921db6c7b5f,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_1Test.java,53.29752802848816,stop,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }
}
","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps()} method.
*/
class Login_1Test {","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getProps()} method.
*/
class Login_1Test {

    private static String prop_file_name = ""/conf/log4j_log.properties"";
    private static String testCaseFile = ""../test_data/login_1_basic_auth_checks"";

	/** Main method that tests all cases of login from file */
	@Test
    public void loginTest01() throws LoginException, ParseException, ParseException{
	
	    RequestBuilder reqBuilder = RequestBuilder.newBuilder()
	       .withLoginRequestBuilder(FileHelper.fetchResourceAsString(testCaseFile))
	       .withCredentials(""browsersoft"", ""aacs"")
	       .withClientCredentials(""browsersoft"", ""AACS"")
	       .withResource(""http://example.com"")
	       .startBuilder();

     // Test with invalid login form element
	reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/non_exist.log4j.properties""))
	       .withResource(""http://example.com"");
     assertNull(reqBuilder.endStringBuilder());

	// Test with no login form element
	reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/login.log4j.properties""))
	        .withResource(""http://example.com"");
	assertSame(testCaseFile, reqBuilder.endStringBuilder());

	
	// Test with invalid client
	reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/simple.log4j""));
     assertNull(reqBuilder.endStringBuilder());
	reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/nonexistent.log4j""));
     assertNull(reqBuilder.endStringBuilder());

	// Test with invalid resource
	reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/complex.log4j""));
     assertNull(reqBuilder.endStringBuilder());

	// Test with no valid token.  Check login and password for the client creds and resource.  Also, validate login and password.
     reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(""/conf/expired_token.log4j""));
     assertEquals(testCaseFile, reqBuilder.endStringBuilder());


	// Test with valid login
	// Test with client credentials.  Check login for the client creds and resource.  Also, validate login and password.


     reqBuilder = reqBuilder.withLoginRequestBuilder(FileHelper.fetchResourceAsString(testCaseFile));
     
     String password = ""password"";
     // Test with login as client credentials
     reqBuilder = reqBuilder.withClientCredentials(""browsersoft"",password);
     assertEquals(""password"",reqBuilder.endStringBuilder().getValue());
     // Test with login as invalid credential credentials.  Test with empty username and password.
     String invalid_cred=""password"";
     reqBuilder = reqBuilder.withLoginRequestBuilder(invalid_cred);
     assertEquals(""password"",reqBuilder.endStringBuilder().getValue());
     
	 }
	
	
}
/*
 * Log4j Config File is stored in 
 * /user/sc/aacs/xacml/aacs_lib/target/testcase/log4j_log.properties
*/
"
351c47e3-6902-498c-8810-fc9df8442006,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_2Test.java,53.26069164276123,stop,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }
}
","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {

private static final String PROP_LOGINPATH = ""org.apache.log4j.xml.conf.xml"";
private static final String SECURITY_LOG_FILENAME = ""LOGIN.xml"";
	
	// A set of all the tests being performed in this suite.
	Set<Test> tests = new HashSet<Test>();
	
	@Test
	public void testGetSecurityLogFilePath() throws ParseException, LoginException,
	LoginException {
		
		// load the database and initialize all the test.
		Iterator<String> loginFileIterator =
		    FileDirectoryManager.getLoginFileIterator().iterator();
		File tempDir = FileDirectoryManager.getTemporaryDirectory();
		File logFile = File.createTempFile(tempDir.getName(), ""log"", tempDir);
		
		String line = null;
		while ((line = loginFileIterator.next())!= null) {
			logFile = new File(logFile, line);
		}
		
        // set the defaults for the log file
        Properties properties = new Properties();
        properties.setProperty(""log4j.rootLogger"", ""INFO, TASK"");
        properties.setProperty(""log4j.logger.INFO"", ""INFO"");
        properties.setProperty(""log4j.logger.DEFAULT"", ""[INFO]"");
		properties.setProperty(PROP_LOGINPATH, logFile.getAbsolutePath());
		
        // log a message to the console and create a new file.
        FileAppender fileAppender =
                new FileAppender(
                    new SimpleLayout(
                        
                        "" [INFO]"", ""  Level: INFO     : \""Logging a message on the console\"""",
                        
                        
                        "" [INFO]"", ""  Level: DEBUG     : \""Logging a message on the console\"""",
                        
                        "" [INFO]"", ""  Level: WARN      : \""Logging a message on the console\"""",
                        
                        "" [INFO]"", ""  Level: ERROR    : \""Logging a message on the console\"""",
                        
                        "" [INFO]"", ""  Level: FATAL    : \""Logging a message on the console\"""",
                        
                        
                        "" [FATAL]"", ""   Level: ERROR     : \""Logging a message on the console\""""),
                new Indenter("" ""),
                new PDPadapter(),
                properties);
        logFile =  new File(""target/log_""+System.getProperty(""user.name"")+""_testlog.txt"");
        fileAppender.doAppend(logFile);
        
        // we need this so that the log files are ready by the start method.
        logFile.deleteOnExit();
		
        // create a new log file with the new data.
        Date date = new Date();
        SimpleDateFormat dateFormatter = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");
        dateFormatter.setTimeZone(TimeZone.getTimeZone(""GMT+8""));
		
        // Create a new security log file
        logFile.deleteOnExit();
        try {
			logFile.createNewFile();
		} catch (Exception exc) {
			fail(""Error creating a new security log file. ""+exc);
		}
				
		Logger securityLogger = Logger.getRootLogger();
		securityLogger.setLevel(Level.INFO);
		
		if (System.getProperty(""os.name"").contentEquals(""Mac OS X"")) {
			// Add the security log filename
			FileSecurityLogFile fsl = new FileSecurityLogFile(logFile, SECURITY_LOG_FILENAME);
			securityLogger.addAppender(fsl);
		} else {
			// Add the security log filename
			FileSecurityLogFile fsl = new FileSecurityLogFile(logFile, SECURITY_LOG_FILENAME);
			securityLogger.addAppender(fsl);
			
			// Initialize the log file for every test
			fsl.setFirstDataDate(date);
			for (Test test : tests) {
				fsl.setDataDate(date);
				fsl.initialize(null, null, dateFormatter.format(dateFormatter.parse(test.setUpMethod(date))));
				fsl.start(date);
				
				// if the logger is logged when this test is run first time, then reset the data of the first test to 
				// the file's first logdata.
				if (test.getFirstDataDate().after(date)) {
					test.setFirstDataDate(date);
				}
				
				
			}
			
			// if we are going to see all the tests finish, just run the last data
			fsl.start(date);
		}
		
		
	}

	public static class FileSecurityLogFile extends FileAppender {
		
		private Date dataDate;
		
		public FileSecurityLogFile(String logFile,String filename) {
			super(logFile, filename);
		}
		
		public Date getDataDate() {
			return dataDate;
		}
		
		public void start(Date startDate) {
			dataDate = startDate;
		}	
		
	}

}
"
a5ac329e-81c2-4f32-a3a2-4de233ebfbd5,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_3Test.java,22.433898210525513,length,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     *
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }
}
","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {
// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     *
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart()!= null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart()!= null) && (user.getPassrenewal()!= null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips()!= null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps!= null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }
}

// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authorize()} method.
*/
class Login_3Test {
		
	/**
	 * A simple instance of a user.
	 */
	private User user = null;
	
	/**
	 * A {@link Properties} file with a test property value.
	 */
	private Properties props = null;
	
	/**
	 * A {@link String} with a test property file name.
	 */
	private String username = ""Test_username"";
	
	/**
	 * A {@link InputStream} with a test property file contents.
	 */
	private File propertiesFile = null;
	
	/**
	 * A {@link InputStream} with a test property file name.
	 */
	private InputStream inputStream = null;
	
	/**
	 * The location of the test files and resources.
	 */
	private File tmpdir = null;

	/**
	 * The test user file name.
	 */
	private static String testUser = ""user"";

	/**
	 * Creates a new instance of a Login_3Test.
	 * @throws LoginException any exception occurring during test setup
	 * @throws FileNotFoundException any exception occurring while creating the temporary files
	 *
	 */
	public Login_3Test() throws LoginException, FileNotFoundException{
		this.props = new Properties();
		this.propertiesFile = getTestPropertiesFile();
		this.tmpdir = new File(""tmp"");
		this.tmpdir.mkdirs();
		this.tmpdir.deleteOnExit();
		this.tmpdir.deleteOnExit();
	}
	
	/**
	 * Tests the {@link Login_3Test#testUser} method.
	 * 
	 * @throws LoginException any exception occurring during test setup
	 * @throws LoginException any exception occurring during test setup
	 */
	@Test
	public void testUser() throws LoginException, LoginException {
		
		log(user = null);
		user  = new User(propertiesFile, testUser);
		assertLoginUser(user  );
	}
	
	/**
	 * Tests the"
3a6eb4c5-953a-4423-b185-e893015e71bc,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/aacs/Login_4Test.java,49.45880722999573,stop,"// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     *
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }
}
","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {
// Login.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

public class Login {

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     *
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "",userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }
}

// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains one unit test case for the {@link Login#authenticate()} method.
*/
class Login_4Test {
		
	/**
	 * The XML data file to load from a source file.
	*/
	private final String input_filename = ""src/test/data/test_login.xml"";
	
    /**
	 * The password for the {@link Login_4Test#input_filename} file, which is parsed as the
	 * <strong>XML</strong> content.
	*/
    private final String input_password = ""password"";
    
	/**
	 * The {@link Properties} class to store the properties of the {@link SimpleDateFormat} used
	 * in tests.
	*/
	private final Properties input_properties = new Properties();
    
	/**
	 * The {@link SimpleLayout} used when loading {@link String}s directly in a
	 * {@link Logger}.
	*/
	private final SimpleLayout _layout = new SimpleLayout();
	
    {
		input_properties.put(""password"", input_password);
        input_properties.put(""userid"", userid);
        input_properties.put(""authType"", authType);
        input_properties.put(""location"", ""user"");
    }
	/**
	 * Returns the name of the {@link XMLFileInputLoader} being used.
	 */
	private static String fileLoaderName() {
		if (_layout.isLayoutTabbed()) {
			return ""MYSCHEMA"";
		} else {
			return ""META-INF"";
		}
	}
	//Constructor
	/**
	 * Test case for a login with an {@link XACML} provider that uses a file input loader.
	 */
	@Test
	public void login_4TestXACMLFile_01() throws ParseException {
		input_properties.put(""location"", fileLoaderName());
		user = authenticate();
        assertNotNull(""expected user"", user);
	}

	//Method
	/**
	 * Attempts to create the request context containing an entry for a {@link User#getFirstName()}
	 * entry.
	 */
	private void create_create_context() throws LoginException {
		create_contextForUser(user);
	}
	
	/**
	 * Convenience method for validating the request credentials using the {@link #create_create_context()}
	 * method.
	 */
	private void validate_returnsUser(User user) throws LoginException {
		RequestCtx reqctx = RequestBuilder.create(new String[] {""user/entry""}).setInput(
            (String) user.getFirstName()).setOutput(() -> (Calendar) String.valueOf(""2007-08-11""));
		reqctx.validate();
	}
	
	/**
	 * Validates a {@link Set} of strings for the {@link #create_create_context()} method.
	 */
    private void validate_returnsUser(Set results) throws LoginException {
        assertNotNull(""result string"", results);
        Iterator it = results.iterator();
        while (it.hasNext()) {
            if (it.next().toString().equals(user.toString()))
                return;
        }
        assertFalse(""result set"", results.isEmpty());
        assertTrue(""return set"", results.size() > 1);
    }
	//Test case for login with XACML
	@Test
	public void login_4TestXACMLFile_02() throws ParseException, LoginException {
		create_create_context();
		user = authenticate();
		validate_returnsUser(user);
    }

    }
    //Logger.
    private static final Logger LOG = Logger.getLogger(""com.browsersoft.aacs.Login"");
    
    /**
     * Return the path to the credentials file for tests.
     */
    public static String getXMLFilePath() {
        return fileLoaderName() + ""/"" + ""xacml/xacml-1.11.xml"";
    }

    //Properties.
    private static final String userID = ""userid"";
    private static final String userType = ""user_type"";
    private static final String authType = ""authType"";
    private static final String password = ""password"";
    private static final String ipAddr = ""ipAddr"";
    private static final String userManagerName = ""user_manager"";
    private static final String userManagerURL = ""user_manager.org"";
    private static final String authToken = ""userid"";
    private static final boolean useCache = false;
}"
ecd8a433-8491-4b80-924f-dd2ed8136bed,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_0Test.java,32.088834285736084,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * Authenticate the user with a user name and password.
     *
     * <p>
     *
     * @return true in all cases since this <code>LoginModule</code>
     * 	should not be ignored.
     * @exception FailedLoginException if the authentication fails. <p>
     * @exception LoginException if this <code>LoginModule</code>
     * 	is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }
}
","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * Authenticate the user with a user name and password.
     *
     * <p>
     *
     * @return true in all cases since this <code>LoginModule</code>
     * 	should not be ignored.
     * @exception FailedLoginException if the authentication fails. <p>
     * @exception LoginException if this <code>LoginModule</code>
     * 	is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user!= null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }
}

// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {
		
	/**
	 * Test method of this class.
	 * @throws FailedLoginException thrown if any error occurs
	 * @throws LoginException exception thrown by the login implementation
	 * of the {@link LoginModule}
	 */
    @Test
    private void testLogin() throws FailedLoginException, LoginException {
        //
        if (debug)
            System.out.println(""AACSLoginModule_0Test.login() called"");
        // try all combinations of possible values
        Login login = new Login(""test"");
        assertEquals(""username and password should match"", null, login.getUser());
        // try various combinations of the above
        for (int i = 0; i < 4; i++) {
            switch (i) {
                case 0:
                    // try null user name
                    assertNull(""Null user name should not be accepted"", login.getPassword());
                    login = new Login("""");
                    // fallthrough to next case for null password
                case 1:
                case 2:
                case 3:
                    // try null password
                    assertNull(""Null password should not be accepted"", login.getUser());
                    break;
                default:
                    assertNotNull(""Null user name should be accepted"", login.getPassword());
            }
        }
    }
}
"
098206f0-b171-45fd-b356-8bab6b3a13fb,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_1Test.java,38.0394811630249,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * <p> This method is called if the LoginContext's
     * overall authentication succeeded
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * succeeded).
     *
     * <p> If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * <code>login</code> method), then this method associates a
     * <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     * with the <code>Subject</code> located in the
     * <code>LoginModule</code>.  If this LoginModule's own
     * authentication attempted failed, then this method removes
     * any state that was originally saved.
     *
     * <p>
     *
     * @exception LoginException if the commit fails.
     * @return true if this LoginModule's own login and commit
     * 	attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }
}
","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * <p> This method is called if the LoginContext's
     * overall authentication succeeded
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * succeeded).
     *
     * <p> If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * <code>login</code> method), then this method associates a
     * <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     * with the <code>Subject</code> located in the
     * <code>LoginModule</code>.  If this LoginModule's own
     * authentication attempted failed, then this method removes
     * any state that was originally saved.
     *
     * <p>
     *
     * @exception LoginException if the commit fails.
     * @return true if this LoginModule's own login and commit
     * 	attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }
}

// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {
		
	/**
	* Constructor test for {@link AACSLoginModule#AACSLoginModule_1Test}.
	*/
	@Test
	public void test_constructor() {
		// check that constructor calls initialize() method
		// and that it throws LoginException when required parameters
		// are not specified...
		assertNotNull(""loginModule.loginModule"", LoginModule.loginModule.loginModule);
		PasswordCallback pc = new PasswordCallback(""FirstPassword"", 0);
		Callback[] callbacks = { pc };
		try {
			subject = new Subject();
			subject.getPrincipals().add(new Principal(null, null, null));
			// call the loginModule constructor with no arguments
			// which will throw a LoginException
			throw new LoginException();
		} catch (LoginException le) {
			// if password is null, this should be
			// thrown a LoginException, which will also
			// be used as the argument for callbacks
			assertTrue(""Expecting exception when called without username"", le.getMessage().contains(""loginModule.loginModule""));
		}
		try {
			subject = null;
			subject.getPrincipals().remove(new Principal(null, null, null));
			subject = null;
			// if username is null, this should be
			// returned null as the argument for argument0
			// but for callback0 the it should be
			// the username parameter
			assertNull(""Username should be returned null but null is returned"", pc.getPassword());
		} catch (LoginException le) {
			// if username is null, return null
			// for callback0, otherwise throw exception.
			assertEquals(""wrong username type: "" + le.getMessage(), subject.getPrincipals().size(), 0);
		} catch (Exception e) {
			e.printStackTrace();
			assertEquals(""wrong username type: "" + e.getMessage(), subject.getPrincipals().size(), 0);
		}
	}
}
"
3b388d30-1b44-4e78-8973-0ad3595e5943,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_2Test.java,45.425750970840454,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * <p> This method is called if the LoginContext's
     * overall authentication failed.
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * did not succeed).
     *
     * <p> If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * <code>login</code> and <code>commit</code> methods),
     * then this method cleans up any state that was originally saved.
     *
     * <p>
     *
     * @exception LoginException if the abort fails.
     * @return false if this LoginModule's own login and/or commit attempts
     * 	failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }
}
","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * <p> This method is called if the LoginContext's
     * overall authentication failed.
     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     * did not succeed).
     *
     * <p> If this LoginModule's own authentication attempt
     * succeeded (checked by retrieving the private state saved by the
     * <code>login</code> and <code>commit</code> methods),
     * then this method cleans up any state that was originally saved.
     *
     * <p>
     *
     * @exception LoginException if the abort fails.
     * @return false if this LoginModule's own login and/or commit attempts
     * 	failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password!= null) {
                for (int i = 0; i < password.length; i++) password[i] ='';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }
}

// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {
		    
    /**
     * Test the behaviour of {@link #abort()} properly after a login and
     * commit failure. The configuration file is located at {@link #PATH}
     * and is assumed to contain the following line:
     * ""AACSLoginModule_2Test -debug=true"".
     * @throws Exception if the configuration fails.
     */
    @Test
    public void abort_with_debug_option_logs_out_of_process() throws Exception {
        new LoginModule_2Test() {
            @Override
            public boolean commit() throws LoginException {
                return false; 
            }

            @Override
            public void initialize(Subject subject, CallbackHandler cbh, Map<String,?> sharedState) {

            }

            @Override
            public boolean abort() throws LoginException {
                return true;
            }

            @Override
            protected boolean onLoginSuccessCheck(Subject subject, CallbackHandler cbh) {
                // this code would be called by the login callback
                // to allow the login module to do an extra ""exit""
                // if exit is successful
		/*            // exit was called before login complete
                         cbh.handle(null);
                     System.exit(0);
                 */
                return false;
            }

            @Override
            protected boolean onLoginFailureCheck(Subject subject, CallbackHandler cbh) {
                if (succeeded == false) {
                    // login failed
                    return true;
                } else {
                    // login succeeded and commit succeeded
                    return false;
                }
            }

            protected String getConfigurationPath() {
                return ""config/aacs-basic-login-policy.xml"";
            }
        }.run();
    }
}

/**
 * A test class for the class {@link LoginModule}.
 */
public class LoginModule_2Test  extends LoginModule_Base {
    /**
     * The configuration file path used by the
     * configuration class {@link LoginModule_2Test}.
     */
    private static final String PATH = ""org/junit/jupiter/api/extension/jupiter-auth.properties"";
    
    // the class name
    private static final String CLASS = LoginModule_2Test.class.getName();

    // the message to display to the user
    private static final String MSG = MSG.replaceFirst(""org/junit/jupiter/api/extension/jupiter-auth.properties"", CLASS);

    // the list of all available users
    private static final Set<String> users = new CopyOnWriteArraySet<>();
    
    /**
     * The constructor is called when the first login
     * is performed.
     * @param subject the LoginContext for this Authentication
     * @param callbackHandler an object which carries additional information
     * the authentication module provides.
     */
    public LoginModule_2Test(CallbackHandler callbackHandler) {
        super(callbackHandler);
    }                
    
    @Override
    public boolean login() throws LoginException {
        try {
            // the login module must set at least the username's password
            // this is done in the super method to avoid ""login failed"" on the command line
            String username = ""AACSActiveLoginModule"";
            password = getPassword();
            login(username, password);
            users.add(username);
            return true;
        } catch (Exception e) {
            throw new LoginException(e, MSG, new Object[0]);
        }
    }        
    
    /**
     * This method is called if the LoginContext's
     * overall authentication succeeded.
     * @param subject the Subject of the LogoffMessage
     * @param callbackHandler an object which carries additional information
     * the authentication module provides.
     * @param sharedState a Map that will be used as a shared state
     * by the callback-handler for the callback-method
     * {@link AbstractLoginModule#commit(Subject, CallbackHandler)}
     */ 
    @Override
    public void commit(Subject subject, CallbackHandler cbh, Map<String,?> sharedState) throws LoginException {
        callbackHandler.handle(new LogoffMessage(subject, cbh, sharedState));
    }
    
    @Override
    public boolean abort() {
	    return false;
    }
}
"
c4801beb-59a8-49df-864b-ffd9ef655034,/EvoSuiteBenchmark/original/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_3Test.java,48.80885624885559,stop,"// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {
// AACSLoginModule.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password!= null) {
            for (int i = 0; i < password.length; i++) password[i] ='';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}

// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains one unit test case for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {
		//private static final String config = ""config/aacs.properties"";

		/** test user login name */
		private static final String user = ""tester"";
		/** test user password */
		private static final char[] password = {'f', 'o'};
		/** tests if the login operation succeeded, false if not. Set true in
			 the login Configuration to get this behaviour */
		private boolean succeed;
		private boolean commitSucceeded = false;

		
		/**
		 * test getSubject method
		 */
		@Test
		void getSubject_LoginModule_test() {
			
			Login login = new Login();
			login.setConfigurationFile(""config.properties"");
			Subject subject = login.login();

			assertTrue(""Subject is not a LoginModule"", subject instanceof LoginModule);
			assertEquals(""user is not the tester, but was the one set"",user, LoginModule.user);
			assertEquals(""password is the testPassword, but was the configured one"",password, LoginModule.password);
			assertEquals(""The configuration file should set the testUser"",User.login.login(),LoginModule.user);
			assertTrue(""succeeded is true, but failed"",succeeded);
			succeeded = commitSucceeded;
		}

		/**
		 * test login method
		 */
		@Test
		void login() throws LoginException {
			
			// Login is not required
			if (succeed) return;

			login = new Login();
			login.setConfigurationFile(""config.properties"");

			succeeded = false;

			// Login
			login.login();
			if (login.isSuccessful()) return;

			// Authentication failure
			Principal p = login.getLastLogin();
			//Principal p = login.getPrincipal(user);
			if (!(p instanceof User)) return;
			log(""logging on user ["" + p.getName() + ""] who are logged in: "" + login.getPrincipal().toString());
			succeeded = true;
		}
		
		/**
		 * test set configuration file
		 */
		@Test
		void setConfigurationFile_LoginModule_test() {
			
			// Login is not required
			if (succeed) return;

			login = new Login();
			login.setConfigurationFile(""config.properties"");

			succeeded = false;
			
					
			// login
			login.login();
			if (login.isSuccessful()) return;

			// Authentication failure
			Principal p = login.getLastLogin();
			//Principal p = login.getPrincipal(user);
			if (!(p instanceof User)) return;
			log(""logging on user ["" + p.getName() + ""] who are logged in: "" + login.getPrincipal().toString());
			succeeded = true;
		}

		/**
		 * tests if the configuration of the class is respected
		 */
		@Test
		void configure_LoginModule_Test() {

			// login is not required
			if (succeed) return;

			// configure
			Login login = new Login();
			login.setConfigurationFile(""aacs.properties"");
			login.login();
			log(""the configuration file in the config.properties is not the same as the configured one"");
			succeeded = false;

		}
		
		
		/**
		 * tests if LoginModule's successful authentication succeeded
		 */
		@Test
		void loginSuccess_LoginModule_Test() throws LoginException {
			//Login is not required
			if (succeed) return;
			
			login = new Login();
			login.setConfigurationFile(""aacs.properties"");
			login.login();
			succeeded = true;
		}
		
		/**
		 * tests if LoginModule's successful authentication succeeded
		 */
		@Test
		void loginSucceeded_LoginModule_Test() throws LoginException {
			//Login is not required
			if (succeed) return;
			login = new Login();
			login.setConfigurationFile(""aacs.properties"");
			login.login();
			succeeded = true;
		}

		/**
		 * tests if LoginModule login operation succeeds, even during configuration failure
		 */
		@Test
		void login_Logout_LoginModule_Test() throws LoginException {
			//Login is not required
			if (succeed) return;
			
			// set failed login operation to false
			login = new Login();
			login.setConfigurationFile(""aacs.properties"");
			login.login();
			log(""Succeeded after failure"");

		}
	}
}"
