[
{
    "choices": [
        {
            "text": "\n    /**\n     * Test class of {@link SBMLFilter}.\n     */\n    public SBMLFilter_0Test() {\n    }\n    \n    @Test\n    public void test1() {\n        String fileName = \"sbml.v2.12\";\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                if (firstPass) {\n                    firstPass = false;\n                } else {\n                    firstPass = true;\n                }\n            }\n        }\n        File file = new File(\"C:\\\\Documents and Settings\\\\joe\\\\Desktop\\\\sbml.xml\");\n        ImportHandler importHandler = CytoscapeSystem.getImportHandler();\n        importHandler.setCurrentFile(file.getName());\n        GraphReader graphReader = new GraphReader(\"C:\\\\Documents and Settings\\\\joe\\\\Document Folders\\\\cytoscape\\\\src\\\\io\\\\sbml\");\n        SBMLReaderModel sbmlReaderModel = new SBMLReaderModel();\n        sbmlReaderModel.setImportHandler(importHandler);\n        assertEquals(sbmlReaderModel.loadExternal(file), true);\n        assertEquals(sbmlReaderModel.loadExternal(file), false);\n    }\n    \n    public String getHeader(File file) {\n        String header = \"\";\n        String line;\n        try {\n            header = ImportHandler.getHeader(new FileInputStream(file));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return header;\n    }\n    \n}",
            "finish_reason": "stop"
        },
        {
            "text": "int fileHeaderLenth          := 0;\n\t\tImportHandler importHandler    := null;\n\t\t\n    static {\n        // This is the main class that all Unit Test classes extend\n        System.loadLibrary(\"cython\");\n    }\n        public SBMLFilter_0Test() { }\n\n        public SBMLFilter_0Test(int headerLenth, ImportHandler importHandler) {\n            fileHeaderLenth  = headerLenth;\n            this.importHandler = importHandler;\n        }\n\n        /**\n\t\t* Creates a new\n    */\n     public static SBMLFilter newInstance(int headerLenth, ImportHandler importHandler)\n     {\n        // Creates a new sbml filter\n        return new SBMLFilter_0Test(headerLenth, importHandler);\n     }\n\n    public void testCreateImportHandler_WithNullFiles() {\n        boolean result = false;\n        // no files\n        File file = null;\n        File[] newFiles = new File[2];\n        System.out.println(\"file header lenth: \"+fileHeaderLenth);\n        // Creates a new file\n        file = File.createTempFile(\"cython_test_\", \".gb\");\n        System.out.println(\"created temp file: \"+file.getName());\n        assertNotEquals(null, file);\n        newFiles[0] = file;\n        // Creates a new file but with the same name\n        file = File.createTempFile(\"cython_test_\", \".gb\");\n        System.out.println(\"created temp file: \"+file.getName());\n        assertEquals(null, file);\n        // Creates a new file but with different name\n        file = File.createTempFile(\"cython_test_\", \".gb\");\n        System.out.println(\"created temp file: \"+file.getName());\n        assertNotEquals(null, file);\n        newFiles[1] = file;\n        try {\n\t\t\t// creates a new SBML file\n           \tassertEquals(null, SBMLFilter.newInstance(fileHeaderLenth, importHandler));\n\t\t\t// Tests the accept() method\n\t\t\tfileHeaderLenth      = fileHeaderLenth == 0? 1 : fileHeaderLenth; // 1, if headerFileLength == 0 (in which case, 1)\n\t\t\tfile.delete();\n\t\t\t// Creates a new and initializes a new file.\n\t\t\tfile = File.createTempFile(\"cython_test_\", \".gb\");\n\t\t\tSystem.out.println(\"created temp file: \"+file.getName());\n\t\t\tassertNotEquals(null, file);\n\t\t\ttry {\n\t\t\tassertFalse(SBMLFilter.accept(file));\n\t\t\t\tassertEquals(0, fileHeaderLenth);\n\t\t\t\tresult           =  true;\n\t\t\t} catch (IOException e) {\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tassertEquals(\"Cannot read SBML header for file\", e.getMessage());\t// fileHeaderLenth == 0\n\t\t\t\tresult           =  true;\n\t\t\t}\n\t\t} catch (IOException e) {\n             e.printStackTrace();\n\t\t} catch (AssertionError e) {\n\t\t\t// assertEquals(\"Cannot read SBML header for file\", e.getMessage());\t// headerLenth == 1\n\t\t\tassertEquals(0, fileHeaderLenth);\n\t\t\tresult           =  true;\n\t\t}\n\t\tassertTrue(!result);\n        // test a new file\n        file = new File(\"/tmp/tmp/file.gb\");\n        System.out.println(\"file: \" + file.getAbsolutePath());\n        assertEquals(1, file.length());\n        assertEquals(0, fileHeaderLenth);\n        file.delete();\n        System.out.println(\"file deleted!\");\n        TestImporter.setUpTestingDir(); // sets the location of the temporary directory\n        file = File.createTempFile(\"cython_test_\", \".gb\");\n        System.out.println(\"file: \" + file.getAbsolutePath());\n        assertEquals(1, file.length());\n        assertEquals(0, fileHeaderLenth);\n        fileHeaders = new String[] { \"\" };\n        file.delete();\n        System.out.println(\"file deleted!\");\n        File.createTempFile(\"cython_test2\", \".gb\");\n        System.out.println(\"creating a temporary file for testing\");\n        file = File.createTempFile(\"cython_test2\", \".gb\");\n        System.out.println(\"file: \" + file.getAbsolutePath());\n        assertEquals(1, file.length());\n        assertEquals(10, fileHeaderLenth);\n        fileHeaders = new String[] { \"\" };\n    }\n\t\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    void accepts_a_directory() throws IOException {\n        //  Get a reader for a file inside a SBML repository directory\n        File f_input = new File(importDirectory + File.separator + \"firma.sbml\");\n\n        //  Get a reader for the graph in the repository directory\n        GraphReader f1 = GraphReader.createGraphReader(f_input);\n        //  Read the whole graph\n        ImportHandler.readGraphFromFile(f1, null);\n\n        //  Check whether the result is OK\n        assertTrue(\"Error while reading the file: \" + f_input.getName(),\n            ImportHandler.isErrorReportOK());\n    }\n\n    // Tests should be organized into the same file so that the filters are\n    // independent.\n    @Test\n    void accepts_and_return_ok() throws IOException {\n        //  Get a reader for a file inside a SBML repository directory\n        File f_input = new File(importDirectory + File.separator + \"firma.sbml\");\n\n        //  Get a reader for the graph in the repository directory\n        GraphReader f1 = GraphReader.createGraphReader(f_input);\n        //  Read the whole graph\n        ImportHandler.readGraphFromFile(f1, null);\n\n        //  Read the graph and check the results\n        assertTrue(\"ERROR: File not found: \" + fileName,\n            ImportHandler.isErrorReportOK());\n    }\n\n    /**\n    * Tests the SBML reader.\n    */\n    @Test\n    public void test_file_reading() throws IOException,\n        ImporterrorException {\n        //  Get a reader for the file inside a SBML repository dirctory\n//        File f = new File(sbmlDirectory  + File.separator + \"firma.sbml\");\n//        //  Read the whole graph if sbmlreader did the reading\n//        try {\n//            ImportHandler.readGraphFromFile(ImportHandler.createGraphReader(f), null);\n//        } catch (ImportResultException e) {\n//            e.printStackTrace();\n//        }\n//        //  The reading method should return ImportResultException\n//        assertTrue(\"Error while reading the file or graph: \" + fileName,\n//            ImportResultException.hasExpectedReport());\n    }\n\n}\n\n\n/**\n* SBML filter.\n*/\nclass SBMLFilter_1Test extends SBMLFilter_0Test {\n\t\n    public SBMLFilter_1Test() {\n        fileExtensions = \"xml\";\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n    public void testFilter_getFile_file2() throws IOException {\n        File pkgFile = new File(\"/cytoscape/modules/packages/sbml5/testFiles/sbml-3.2.0-SNAPSHOT.pkg\");\n        \n        import_file2(pkgFile, \"sbml\", \"2.0\");\n\t\t//import_file2(pkgFile, \"sbml\");\n\t\t\n\t\tImportHandler testHandler = new TestHandler();\n               assertTrue(\"Did not accept \" + pkgFile.getName() + \" as SBML Import. Did not import correctly\", testHandler.hasErrors());\n    }\n    \n    @Test\n    public void testFilter_getFile_file3() throws IOException {\n        File pkgFile = new File(\"/cytoscape/modules/packages/sbml5/testFiles/sbml-3.2.0-SNAPSHOT.pkg\");\n        \n        import_file2(pkgFile, \"sbml\", \"3.2\");\n        File sbmlPackageFile = new File(\"/cytoscape/modules/packages/sbml5/testFiles/sbml-3.2.0-SNAPSHOT/sbml-3.2.0.pkg\");\n        \n        assertTrue(\"Did not accept \"+pkgFile.getName()+\" as SBML Import. Did not import correctly\", sbmlPackageFile.exists());\n    }\n    \n\t/**\n     * Test class of {@link SBMLFilter}. It sets testFileExistance and testFileFilter to true if the test file doesn't have any extension. \n     * Then it is added testFileFilter. The same is not done if file cannot be found. \n     */\n    @Test\n    public void testImport_testFile() throws IOException {\n        String testFilePath = \"/cytoscape/modules/packages/sbml5/testFiles/sbml-3.2.0-SNAPSHOT.pkg\";\n        boolean testFileIsValid = TestFile.IsValid(testFilePath+\".sbml\");\n        File testFile = new File(testFilePath);\n        ImportHandler testHandler = new TestHandler();\n        \n        ImportHandler.addImport(testFilePath, testHandler );\n        \n        GraphReader sbmlGrapher = new SBMLGrapher();\n\n        boolean result = sbmlGrapher.importSBMLfromFile(sbmlGrapher.createGraphFromFiles(sbmlGrapher._graphCollection, testFile), testHandler);\n        assertTrue(\"Import should have failed with extension'sbml-3.2.0-SNAPSHOT.pkg'\", result);\n        assertTrue(\"Import should have failed with extension'sbml-3.2.0'\", testFileIsValid);\n    }\n    \n    private String getHeader(File file) throws IOException {\n    try {\n    \t//  First test:  \"sbml\" must not be in any of the SBMLFilters.\n        String header = getFileHeader(new FileReader(file));\n    } catch (IOException e) {\n    }\n\n    throw new RuntimeException(\"Failed to test SBML Header\");\n}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t// SBML file extension to be tested\n    private final static String[] fileExtensions = {\"sbml\", \"xml\", \"tsv\",\n        \"svg\"};\n\n\t/**\n\t * Test cases for {@link SBMLFilter#accept(File)} method.\n\t */\n\t@Test\n\tpublic void testAccept() {\n\t    try {\n\t        File sbmlFile = File.createTempFile(\"sbmlfilter\",\n\t\t            \"sbml\");\n\t        assertNotNull(\"Failed to create temporary file.\", sbmlFile);\n\t        sbmlFile.deleteOnExit();\n\t        sbmlFile.renameTo(new File(\"testTempFiles.sbml\"));\n\t        ImportHandler handler = new TestImportHandler(sbmlFile);\n\t        assertTrue(\"Failed to import SBML.\", sbmlFilter.accept(sbmlFile));\n\t        \n\t        File svgFile = File.createTempFile(\"svgfilter\",\n\t\t            \"svg\");\n\t        assertNotNull(\"Failed to create temporary file.\", svgFile);\n\t        svgFile.deleteOnExit();\n\t        svgFile.renameTo(new File(\"testTempFiles.svg\"));\n\t        \n\t        handler = new TestImportHandler(svgFile);\n\t        assertTrue(\"Failed import SBML.\", sbmlFilter.accept(svgFile));\n\t        \n\t        File testFile = new File(\"testTempFiles.cy\");\n\t        assertTrue(\"Failed to import SBML.\", sbmlFilter.accept(testFile));\n        } catch (IOException e) {\n            e.printStackTrace();\n            fail(\"Failed to import SBML \" + e);\n        }\n    }\n}\n\n// SBMLFilter.java\n\n/**\n * Imports an SBML object (i.e., Graph, Rule, Activity etc.) to a Cytoscape ImportHandler.\n * As soon as an ImportHandler has been imported, the resulting Cytoscape object is\n * written on disk using the Cytoscape ImportHandler file extension.\n */\nclass TestImportHandler extends ImportHandler {\n\n    /**\n     * Constructor for the SBML Import Handler.\n     * @throws IOException If failed to read file header.\n     * @throws IllegalStateException If graph has already been imported.\n     */\n    public TestImportHandler(File sbmlFile) throws IOException {\n        super(sbmlFile);\n        File newTempFile = new File(\"tmpTempFiles.cy\");\n        assertNotNull(\"Failed to create temporary files.\", newTempFile);\n        \n        String header = getHeader(sbmlFile);\n        this.setFilename(sbmlFile.getName());\n        this.setFilename(\"sbml_test\");\n        this.setFileType(sbmlFile.getName());\n        this.setFileExtension(\"cy\");\n\n        this.setFilenameHeader(header);\n        this.setFilename(newTempFile.getName());\n        this.setFilePath(newTempFile.getPath());\n    }\n    \n    //-----TestFileFilter------------------------------------------------------------------\n    \n    /**\n     * Sets the file type to be imported\n     * @param sbmlFile Name of the imported graph as generated by Cytoscape.\n    */\n    protected boolean setFileType (String sbmlFile) throws Exception {\n        return CycleFilter.setFileType(sbmlFile, \"test\");\n    }\n    \n    /**\n     * Gets the file type\n     * \n     * @param sbmlFile Name of the imported graph as generated by\n     *     Cytoscape.\n     * @return Returns the file type.\n     * @throws IOException If failed to read file header.\n     */\n    protected String getFileType (String sbmlFile) throws IOException {\n        return CycleFilter.getFileType(sbmlFile, \"test\");\n    }\n\n    /**\n     * Sets the file extension to be imported\n     * \n     * @param sbmlFile Name of the imported graph as generated by Cytoscape.\n    */\n    protected boolean setFileExtension (String sbmlFile) throws Exception {\n        return CycleFilter.setFileExtension(sbmlFile, \"test\");\n    }\n\n    /**\n     * Gets the file extension\n     * \n     * @param sbmlFile Name of the imported graph as generated by\n     *     Cytoscape.\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected String getFileExtension (String sbmlFile) throws IOException {\n        return CycleFilter.getFileExtension(sbmlFile, \"test\");\n    }\n\n    //-----CyFileFilter------------------------------------------------------------------\n    \n    /**\n     * Sets the file extension to be imported\n     * @param sbmlFile Name of the imported graph as generated by Cytoscape.\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected boolean setFileExtension (String sbmlFile) throws Exception {\n        return CycleFilter.setFileExtension(sbmlFile, \"test\");\n    }\n    \n    /**\n     * Gets the file extension\n     * \n     * @param sbmlFile Name of the imported graph as generated by\n     *     Cytoscape.\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected String getFileExtension (String sbmlFile) throws IOException {\n        return CycleFilter.getFileExtension(sbmlFile, \"test\");\n    }\n\n    /**\n     * Sets the file extension to be imported\n     * \n     * @param sbmlFile Name of the imported graph as generated by Cytoscape.\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected boolean setFileExtension (File sbmlFile) throws Exception {\n        return CycleFilter.setFileExtension(sbmlFile, \"test\");\n    }\n\n    /**\n     * Gets the file extension\n     * \n     * @param sbmlImportDir Name of the imported graph as generated by Cytoscape.\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected String getFileExtension (File sbmlImportDir) throws IOException {\n        return CycleFilter.getFileExtension(sbmlImportDir, \"test\");\n    }\n\n    /**\n     * Sets the file extension to be imported\n     * @param file\n     * @param dir\n     * @return Returns the file extension.\n     * @throws IOException If failed to read file header.\n     */\n    protected boolean setFileExtension (File file, File",
            "finish_reason": "length"
        },
        {
            "text": "\n    private File createInputFile(){\n        String resourceDir = ImportHandler.getApplicationResourceDir();\n        String modelDir = \"\";\n\n        String xmlPath = resourceDir + File.separator\n                    + \"test\"\n                    + File.separator + \"testxml\"\n                    + File.separator\n                    + \"sbml\"\n                    + File.separator + \"models\"; // sbml\n\n        return new File(xmlPath);\n    }\n\n    private SBMLFilter createFilter(){\n        try {\n            return new SBMLFilter(createInputFile());\n        } catch (InvalidImportFormatException e) {\n            e.printStackTrace();\n            assertTrue(\"\", e.getMessage().endsWith(\"file type wrong.xml should be.sbml or.sbml2\", e.getMessage()));\n\n            throw e;\n        } catch (IOException e){\n            e.printStackTrace();\n            assertTrue(\"\", e.getMessage().endsWith(\"could not read file path\", e.getMessage()));\n\n            throw e;\n        }\n    }\n    \n    @Test\n    public void test_0() {\n        assertNotNull(createFilter());\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid test() {\n\t\tFile file = new File(\"./src/main/java/soomla\");\n\t\tImportHandler handler = new ImportHandler(file.toURI().toURL());\n\t\tString str = handler.getTopLevelSBMLPackage();\n\t\tSystem.out.println(str);\n\t\tString str2 = null;\n\t\twhile (!str2.equals(\"\")) {\n\t\t\tFile file2 = new File(str2);\n\t\t\tstr2 = file2.getName();\n\t\t\tif (file2.getName().endsWith(\".sbml\")) {\n\t\t\t\tSystem.out.println(\"Found SBML package: \" + str);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void sbmlTest() {\n        GraphReader testData = null;\n        TestImportHandler instance = new TestImportHandler();\n\t\ttry {\n\t\t\ttestData = new GraphReader(\"test_file3.sbml\", TestImportHandler.class);\n\t\t\t// get SBML version as Integer\n\t\t\tObject[] result = instance.getNextVersion();\n\t\t\tassertTrue(!result[0]);\n\t\t\tString sbmlVersion = (String) result[1];\n\t\t\tInteger sbmlVersionInt = Integer.valueOf(sbmlVersion);\n\t\t\tassertEquals(int.class, result[2].getClass());\n\t\t\tassertEquals(Integer.valueOf(sbmlVersionInt.intValue()), result[2]);\n\n\t\t\tString packageName = (String) result[3];\n\n\t\t\t/*\n\t\t\t * Now get version as String\n\t\t\t */\n\t\t\tsbmlVersion = (String) instance.getNextVersion_sbmlVersion(10);\n\t\t\tsbmlVersionInt = Integer.valueOf(sbmlVersion);\n\t\t\tassertEquals(int.class, result[3].getClass());\n\t\t\tassertEquals(Integer.valueOf(sbmlVersionInt.intValue()), result[3]);\n\n\t\t\t/*\n\t\t\t * Now get package which depends on file name as prefix\n\t\t\t */\n\t\t\tsbmlVersion = (String) instance.getNextVersion_sbmlVersion(11);\n\t\t\tsbmlVersionInt = Integer.valueOf(sbmlVersion);\n\t\t\tassertEquals((Object[]) result[3], ((Object[]) result[3]).length);\n\t\t\tassertEquals(sbmlVersionInt.intValue() + \"\" + ((String) result[3]).length,\n\t\t\t\tsbmlVersionInt.intValue());\n\n\t\t\t/*\n\t\t\t * Now get sbml version using only the file name as prefix\n\t\t\t*/\n\t\t\tsbmlVersion = (String) instance.getNextVersion_sbmlVersion(12);\n\t\t\tsbmlVersionInt = Integer.valueOf(sbmlVersion);\n\t\t\tassertEquals(int.class, result[3].getClass());\n\t\t\tassertEquals(Integer.valueOf(sbmlVersionInt.intValue()), result[3]);\n\n\t\t\t/*\n\t\t\t * Now create import handler for sbml\n\t\t\t */\n\t\t\tFile sbmlFile = new File((String)result[4][0]);\n\t\t\tFile sbmlFile2 = new File((String)result[3][0]);\n\t\t\tassertTrue(sbmlFile.exists());\n\t\t\tassertTrue(sbmlFile2.exists());\n\t\t\tinstance.importFileFromPackage(sbmlFile, packageName);\n\t\t\tassertTrue(sbmlFile2.exists());\n\n\t\t\tassertTrue(sbmlFile.delete());\n\t\t\tassertFalse(sbmlFile2.exists());\n\n\t\t\t// Finally import multiple sbml\n\t\t\tsbmlFile = new File((String)result[4][0]);\n\t\t\tsbmlFile2 = new File((String)result[3][0]);\n\n\t\t\tinstance.importFileFromPackage(sbmlFile, packageName);\n\t\t\tassertTrue(sbmlFile2.exists());\n\n\t\t\tassertFalse(sbmlFile.delete());\n\t\t\tassertTrue(sbmlFile2.exists());\n\n\t\t\ttry {\n\t\t\t\tsbmlFile = new File((String)result[4][0]);\n\t\t\t\tsbmlFile2 = new File((String)result[3][0]);\n\t\t\t\tinstance.importFileFromPackage(sbmlFile, packageName);\n\t\t\t\tassertTrue(sbmlFile2.exists());\n\t\t\t} catch (IOException e) {\n\t\t\t\tfail(\"Should not throw any exception\");\n\t\t\t}\n\t\t} catch (IOException | InvalidVersionException e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Exception thrown!\");\n\t\t}\n\n\n\t}\n\t\n\tpublic static class TestImportHandler extends ImportHandler {\n\n\t\tpublic Object[] getNextVersion ()\n\t\t{\n\t\t\treturn super.getNextVersion();\n\t\t}\n\t\t\n\t\tpublic String getHeader (File pathToPath) {\n\t\t\tString header = super.getHeader_getFileType(pathToPath);\n\t\t\theader += \"    \" + super.getHeader_getLineNumber(pathToPath);\n\t\t\treturn header;\n\t\t}\n\t\t\n\t\tpublic String getLineNumber (File pathToTestPath) {\n\t\t\tString lineNumber = null;\n\t\t\tStringBuilder lineString = new StringBuilder();\n\t\t\ttry {\n\t\t\t\tlineString.append((String) (((Object[]) super.getNextVersion_getNextLine())[4])[1]);\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tlineNumber = lineString.toString();\n\t\t\treturn lineNumber;\n\t\t}\n\t\t\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\n\t\t/**\n\t\t * Unit test for the {@link SBMLFilter#accept(File)} method.\n\t\t */\n\t@Test\n    public void sbmlFile1() throws Exception {\n        TestData tdata = new TestData(\"sbmlFile1\");\n\n        assertTrue(tdata.test(new DmlTestNode(\"test\"))) &&\n               tdata.test(new DmlTestNode(\"test.txt\")) &&\n               tdata.test(new DmlTestNode(\"test2.txt\"));\n    }\n        // SBMLFilter_1Test.java\n        /**\n        * Unit test for the {@link SBMLFilter_1Test#accept(File)} method.\n        */\n    @Test\n    public void sbmlFile2() throws Exception {\n        TestData tdata = new TestData(\"sbmlFile2\");\n\n        assertTrue(tdata.test(new SvgTestNode(\"test\"))) &&\n               tdata.test(new SvgTestNode(\"test.svg\")) &&\n               tdata.test(new SvgTestNode(\"test2.svg\")) &&\n               tdata.test(new SvgTestNode(\"test.png\")) &&\n               tdata.test(new SvgTestNode(\"test2.png\")) &&\n               tdata.test(new SvgTestNode(\"test.svg.png\"+\".png\")) &&\n               tdata.test(new SvgTestNode(\"test2.svg.png\"+\".png\")) &&\n               tdata.test(new SvgTestNode(\"test.png\")) &&\n               tdata.test(new SvgTestNode(\"test.svg.png.png\"+\".png\")) &&\n               tdata.test(new SvgTestNode(\"test.png\")) &&\n               tdata.test(new SvgTestNode(\"test1.txt\")) &&\n               tdata.test(new SvgTestNode(\"test2.txt\")) &&\n               tdata.test(new SvgTestNode(\"test3.txt\")) &&\n               tdata.test(new SvgTestNode(\"test.svg2.png\")) && tdata.test(new File(\"test.png\")) &&\n               tdata.test(new File(\"test.svg2.svg\")) &&\n               tdata.test(new File(\"test2.svg\")) &&\n               tdata.test(new File(\"test.png\")) &&\n               tdata.test(new File(\"test2.png\")) &&\n               tdata.test(new File(\"test.svg.png\")) &&\n               tdata.test(new File(\"test2.svg.png\")) &&\n               tdata.test(new File(\"test.png\")) &&\n\t\t\t\ttdata.test(new File(\"test2.png\")) &&\n\t\t\t\ttdata.test(new File(\"test.png.png\")) &&\n\t\t\t\ttdata.test(new File(\"test2.png.png\"))\n\t\t\t\t       // TODO: we should test this with a different file extension, but need to test\n\t\t\t\t       //        that the extension is different\n\t\t\t\t       //       tdata.test(new File(\"test2.png.png2\"))\n        \t\t   );\n    }\n        // SBMLFilter_2Test.java\n    @Test\n    public void sbmlFile3() throws Exception {\n \t\t TestData tdata = new TestData(\"sbmlFile3\");\n\n        assertTrue(tdata.test(new DmlTestNode(\"test\"))) &&\n               tdata.test(new DmlTestNode(\"test.dml\")) &&\n               tdata.test(new DmlTestNode(\"test.dml.dml\")) &&\n               tdata.test(new SvgTestNode(\"test.svg\"))  && tdata.test(new SvgTestNode(\"test.svg2.png\"))\n                // TODO: we should test this with a different file extension, but need to test\n                //        that the extension is different\n                //tdata.test(new File(\"test.png.png2\"))\n           ;\n    }\n        // SBMLFilter_3Test.java\n    @Test\n    public void sbmlFile4() throws Exception {\n        TestData tdata = new TestData(\"sbmlFile4\");\n\n        assertTrue(tdata.test(new DmlTestNode(\"test\"))) &&\n               tdata.test(new DmlTestNode(\"test.dml.dml\")) &&\n               tdata.test(new DmlTestNode(\"test.dml.dml.dml\")) &&\n               tdata.test(new SvgTestNode(\"test.svg\"))  && tdata.test(new SvgTestNode(\"test.svg2.png\"))\n                // TODO: we should test this with a different file extension, but need to test\n                //        that the extension is different\n                //tdata.test(new File(\"test.png.png2\"))\n           ;\n    }\n\t\t// TestData.java\n//      @Test\n    public void test0() throws Exception {\n        //  Test data set for case 0 : only 1 file\n        TestData tdata = new TestData(\"test0\");\n        test(tdata, \"\");\n    }\n\n\t@Test\n    public void test1() throws Exception {\n        //  Test data set for case 1 : only 2 file\n        TestData tdata = new TestData(\"test1\");\n        test(tdata, \"\");\n    }\n\n\t@Test\n    public void test2() throws Exception {\n        //  Test data set for case 2 : 3 file names\n        TestData tdata = new TestData(\"test2\");\n        test( tdata, \"\");\n    }\n\t\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "@Test\n\t\tvoid accept_default() throws IOException, ImportHandler.ReadingException {\n\t\t\tFile temp = File.createTempFile();\n\t\t\ttemp.delete();\n            //   test case #1\n\n\t\t    System.setProperty(\"cytoscape.cyg\", \"test.cyg\");\n                ImportHandler.Factory importFactory = new ImportHandler.Factory();\n\t\t    importFactory.setCwd(temp);\n\t\t    importFactory.setImportDir(\"test\");\n\t\t    importFactory.setImportFormat(\"txt\");\n\t\t    importFactory.setImportFileName(\"test.cyg\");\n\t\t    importFactory.setImportName(\"test\");\n\t\t    importFactory.setShowModules(false);\n\t\t    importFactory.setShowProperties(false);\n\t\t    importFactory.setShowMetadata(false);\n\t\t    importFactory.setIgnoreImportError(false);\n\t\t    importFactory.setSuppressImportWarning(true);\n\t\t    try (ImportHandler importHandler = importFactory.newInstance()) {\n\n                assertNull( importHandler.getReader());\n        \t\tassertNotNull( importHandler.getReader());\n\n                GraphReader graphReader = importHandler.getReader();\n                assertNotNull( graphReader);\n\n                assertEquals( 0, graphReader.getModules().size());\n                assertEquals( 0, graphReader.getModules().size());\n                assertEquals( 0, importHandler.getData().size());\n                assertNull( importHandler.getData().getModificationTimestamp());\n                assertNull( importHandler.getData().getModificationTimestamp());\n                assertFalse( importHandler.getData().getHasModifications());\n\n\t\t    \t//  test case #2\n\n\t\t    \tGraphReader newGraphReader = null;\n\t\t    \tGraphReader newImportReader = null;\n\n                try {\n                    newGraphReader = importHandler.newGraphReader();\n                    newImportReader = importHandler.newImportReader( newGraphReader);\n            \n                    }\n\t\t\t\tcatch (Exception e) {\n                }\n        \t}\n        }\n\t}\n\n",
            "finish_reason": "stop"
        }
    ],
    "id": "eb735298-aaaa-40ef-9c2c-f8d40542f61d",
    "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n}\n",
    "test_prompt": "// SBMLFilter_0Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilter_0Test {",
    "time_taken": 60.43312454223633,
    "usage": {
        "prompt_tokens": 458
    }
},
{
    "choices": [
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\tprivate final SBMLGraphReader2 reader;\n\t\t/**\n\t\t * Creates a {@link SBMLFilter_1Test} object.\n\t\t * \n\t\t * @see testConstructor\n\t\t * @param fileName\tInput graph file to be examined.\n\t\t * @throws IOException\n\t\t */\n\t\tpublic SBMLFilter_1Test(String fileName) throws IOException {\n\t\t\tFile f = new File(fileName);\n\t\t\tassertTrue(f.isFile(), \"Input file not found: \" + fileName);\n\t\t\tGraphReader graphReader = getReader(fileName);\n\t\t\tassertNotNull(graphReader, \"No SBML reader configured\");\n\n            // create file handler\n\t\t\tImportHandler importHandler = new ImportHandler((f.getParentFile()!= null)?\n\t\t\t\t\tf.getParentFile().getAbsolutePath() : \"\");\n\t\t\timportHandler.loadData(f.getAbsolutePath());\n\t\t\tSystem.out.println(f.getAbsolutePath());\n\t\t\tgraphReader = new SBMLGraphReader( f.getAbsolutePath() );\n\t\t\t\n\t\t\t// create a new file parser\n\t\t\tImportHandler2.setDefaultFileHandlerFactory( new org.cytoscape.io.importer.CyImportHandlerFactoryImpl( importHandler ) );\n\t\t\tGraphReader baseReader = new SBMLGraphReader( f.getAbsolutePath() );\n            \n\t\t\t// add SBML library\n\t\t\timportHandler.addSBMLLibrary( baseReader );\n\t\t\treader = new SBMLGraphReader2( baseReader );\n\t\t}\n\t\t\n\t\t/**\n\t\t * Sets the number of iterations before the program\n        * stops (i.e. calls {@link #finish()}).\n        */\n\t\t@Test\n        public void testFinish() {\n            Thread th = new Thread(new Runnable() {\n                public void run() {\n                    try {\n                        Thread.sleep( 2000 );\n                    } catch (InterruptedException e) {}\n                    finish();\n                }\n            });\n            th.start();\n            \n        }\n\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n    /**\n    * Tests if the sbml filter was loaded successfully.\n    * @throws  IOException\n    *            if any error occurred while trying to open the file.\n     * @throws  SBMLParseException   if any error occurred when loading the sbml file.\n    */\n   @Test\n    public void testLoad() throws IOException, SBMLParseException {\n \n\n        // get file path for lib xml tests\n        File xmlFile = new File(\"D:\\\\cybots\\\\testlibs\\\\testlibxml.xml\", \"sbml_parser\");\n        if( xmlFile.exists() && xmlFile.canExecute()) {\n            System.out.println(\"Test lib XML loaded correctly.\");\n        }\n        else {\n            throw new IOException(\"Could not find lib xml test\");\n        }\n\n        // Load XML file (using generic reader) and check SBML files against the loaded one\n        GraphReader reader = getReader(\"sbml_parser\");\n        ImportHandler iHandler = (ImportHandler) (new ImportHandler(){};) ;\n    \ttry {\n    \t\tiHandler.open(xmlFile.getPath());\n    \t} catch (IOException e) {\n    \t\tthrow new IOException(\"Could not load SBML file from \" + xmlFile.getPath());\n        }\n    \tcatch(ParserException e) {\n    \t\tthrow new IOException(\"Could not load SBML file from \" + xmlFile.getPath());\n    \t}\n\n    \t// check we can open the file after each read\n        assertTrue(\"Test SBML parser file has errors\", (iHandler.hasError() == false ));\n\n        assertTrue(\"Test SBML graph file has errors\", (iHandler.getErrorMessage().length() == 0 ));\n\n    \t// check each SBML graph from the loaded SBML parser\n        String sbmlString = iHandler.nextSBML().getSBML();\n    \tSystem.out.println(sbmlString);\n        assertTrue(\"Test SBML graph has errors\", (sbmlString.length() == 0 ));\n\n        sbmlString = iHandler.nextSBML();\n    \tSystem.out.println(sbmlString);\n        assertTrue(\"Test SBML graph has errors\", (sbmlString.length() == 0 ));\n    }\n    \n    /**\n    * Tests SBML2 reader loading a SBML file into the Cytoscape ImportHandler framework.\n    * @throws  IOException\n    *            if any error occurred while trying to open the file.\n     * @throws  ParserException  if any error occurred when loading the sbml file.\n    */\n    @Test\n    public void testLoad2() throws IOException, ParserException {\n\n        // get file path for lib xml tests\n        File xmlFile = new File(\"D:\\\\cybots\\\\testlibs\\\\testlibxml2.xml\", \"sbml_parser\");\n        if(xmlFile.exists() && xmlFile.canExecute()) {\n            System.out.println(\"Test lib XML loaded correctly.\");\n        }\n        else {\n            throw new IOException(\"Could not find lib xml test\");\n        }\n\n        // Load SBML file (using generic reader) and check SBML files against the loaded one\n        GraphReader reader = getReader(\"sbml_parser\");\n        iHandler = (ImportHandler) (new ImportHandler(){};) ;\n        iHandler.open(xmlFile.getPath());\n        try{\n        \tString sbmlString = iHandler.nextSBML().getSBML();\n        \tSystem.out.println(sbmlString);\n            assertTrue(\"Test SBML graph load was successful\", reader.readSBML().getSBML().equals(sbmlString));\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            throw new IOException(\"Could not load SBML file from \" + xmlFile.getPath());\n        }\n\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t/**\n\t* Test main method of {@link SBMLFilter_1Test} class.\n\t*/\n\t@Test\n\tvoid test1_getReader()\n\t{\n\t\tString fileName = \"sbmlReader1_test.xml\";\n\t\tGraphReader reader = getReader(fileName);\n\t\tFile file = new File(fileName);\n\t\tImportHandler imp = new ImportHandler(\"SBMLGraphReader2_test\", file.toURI().toString(), new Object[]{}, new String[]{\"http://www.cytoscape.org/.*\" });\n\t\tSystem.setProperty(ImportHandler.BASE, SBMLReader.BASE);\n\t\tassertEquals(im, reader.getImportHandler(file));\n\t\tassertNotNull(reader);\n\t}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n    final String name = \"test_sbml\";\n\n    @Test\n        public void testGetReader() throws IOException {\n\tFile f = new File(name);\n\tSBMLGraphReader reader = getReader(f);\n\timportAndCheck(reader, name);\n    }  \n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t/**\n\t * Simple test to test the creation of the SBML graph reader.\n\t*/\n    @Test\n    public void testSBMLGraphReader() {\n        /* Check the initialization status of the XML graph reader class. */\n        try {\n            // Get the graph XML from file:\n            System.out.println(\"Getting SBML graph graph\");\n            File inFile = makeTestDataDir(\"TestData/sbml_1_graph.xml\");\n            String inFileString = inFile.getPath();\n            File outFile = new File(inFileString);\n            File expectedFile = new File(inFileString + \".expected.gz\");\n            ImportHandler.executeFile(expectedFile, outFile);\n\n            // Check if the graph was read correctly:\n            GraphReader mgr = SBMLGraphReader.getGraphReader();\n            if (!mgr.fileExists(\"graph_xml\")) {\n                // Error occurred: \"Missing file 'graph_xml'.\"\n                System.out.println(\"Graph XML File 'graph_xml' is missing.\");                \n            } else if (mgr.graphExists(\"test-vars\")!= 1) {\n                // Error occurred: \"Empty graph 'test-vars'.\"\n                System.out.println(\"Graph XML File 'graph_xml' is empty.\");                \n            } else {\n                // The graph was successfully imported and validated.\n                System.out.println(\"Graph XML File 'graph_xml', was successfully imported\");\n            }         \n        } catch (IOException ioe) {\n            // Check if any error occurred:\n            assertTrue(\"Unexpected exception in file testing\", false);\n        }\t\n    }\n\n\t/**\n\t * Test the import of the graph from the XML file.\n\t*/\n    @Test\n\tpublic void testSBMLGraphReader2() throws IOException {\n        /* Set up the test data: */\n        File inFile = makeTestDataDir(\"TestData/sbml_1_graph.xml\");\n        String inFileString = inFile.getPath();\n        File outFile = new File(inFileString);\n        GraphReader mgr = SBMLGraphReader.getGraphReader();\n        \n        /* Test creation of the SBML GraphReader class. */\n        mgr.prepare(inFile);\n        \n        /* Now use the standard SBML XML graph reader.\n        So, the test must read the xml from file: */\n        mgr.readSBMLV1();\n        System.out.println(mgr);\n        \n        // Test the output of the SBML GraphReader class:\n        assertEquals(\"Wrong number of objects added to list\", 3, mgr.getObjectsArrayList().size());\n        for(int i = 0; i < mgr.getObjectsArrayList().size()-1; i++){\n            GraphReader.testSubGraphClass(mgr.getObjectsArrayList().get(i), (sbmlj.SBMLDocument) mgr.getObjectsArrayList().get(i+1));\n        }\n\n        assertEquals(\"Wrong size of the subgraph class list\", 7, mgr.getObjectsArrayList().size());\n        for(int i = 0; i < mgr.getObjectsArrayList().size()-1; i++){\n            assertEquals(\"Wrong SubGraph objects types\", sbmlj.SBMLDatatype, \n                    mgr.getObjectsArrayList().get(i).getObject1().getType());\n            assertEquals(\"Wrong SBML XML node type\", sbmlj.SBMLVariable, \n                    mgr.getObjectsArrayList().get(i).getObject1().getVarUri());\n            assertEquals(\"Wrong SBML XML subgraph type\", sbmlj.SBMLGraph, \n                    mgr.getObjectsArrayList().get(i).getObject1().getVarValue());    \t\n        }\n\n        mgr.shutdown();\n\n        /* Test the creation of the XML reader class. */\n        assertTrue(\"Cannot create the XML reader class\",\n                mgr == SBMLGraphReader.getGraphReader());\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t// test class with one test method\n\tprivate SBMLFilter_1Test() {\n\t}\n\n    @Test\n    public void test_getReader() {\n        try (GraphReader rdr = getReader(\"graph_1.sbm\")) {\n            importData(rdr);\n\n            String name = \"graph_1.sbm\";\n            String expected = \"graph_5\";\n            assertEquals(expected, rdr.getName());\n            assertEquals(\"1SBML graph reader created\",1,rdr.nrOfReaders());\n        }\n    }\n\n\t/**\n\t*\n\t* Import data in a folder containing a GraphReader.\n\t* It checks that the folder contain one file in the same name as the SBML model file.\n\t* It creates the DataHandler using importFile().\n\t* The DataHandler contains one Data object as the data set.\n\t\t*/\n    private void importData(GraphReader reader) {\n        ImportHandler handler = new ImportHandler(\"test_1\", \"test\");\n\n        // test importFile() - no input file provided  \n\t\tFile inFile = createTestFile(\"test_1\");\n\t\tDataSet dset = getDataElements(inFile);\n\t\thandler.importData(dset);\n        \n        // test importFile() - input file provided and import error is OK\n\t\t// Test importing file - should not throw exception\n\t\tFile inFile2 = createTestFile(\"test_2\");\n\t\tif (new File(inFile2.getParent() + File.separator + \"test.sbm\").isFile()) {\n\t\t\tinFile2.delete();\n\t\t}\n\t\tthrows IOException {\n\t\t\t// Import file\n\t\t\tFile inFile3 = createTestFile(\"test_3\");\n\t\t\tFile inFile4 = createTestFile(\"test_4\");\n\t\t\tFile inFile5 = createTestFile(\"test_5\");\n\n\t\t\tassertNotNull(\"file with input provided\",inFile);\n\t\t\tassertTrue(\"file with input provided \"+inFile2.getAbsolutePath(),inFile2.getPath().equals(inFile4.getAbsolutePath()));\n\n\t\t\thandler.importFile(inFile2);\n\t\t\t// import file has been processed\n\n            ImportHandler handler_2 = new ImportHandler(\"test_2\", \"test\");\n            DataSet dset_2 = handler_2.getDataForFile(inFile2);\n\n\t\t\thandler_2.importData(dset_2);\n\n\t\t\tFile inFile6 = createTestFile(\"test_6\");\n\t\t\tassertNotNull(\"test 4 importfile error\",inFile6);\n            \n            File inFile7 = createTestFile(\"test_7\");\n            try {\n                    ImportHandler handler_3 = new ImportHandler(\"test_3\", \"test\");\n                    handler_3.importFile(inFile7);\n                    throws Exception{\n                }\n            }\n            catch (Exception e) {\n                    // Test the exception of the wrong name\n                    File inFile8 = createTestFile(\"test_8\");\n                    ImportHandler handler_4 = new ImportHandler(\"test_4\", \"test\");\n                    handler_4.importFile(inFile8);\n            }\n            \n            // check that import is successful\n            assertNotNull(\"test 2 import file error\",inFile6);\n\n            try {\n                ImportHandler handler_5 = new ImportHandler(\"test_5\", \"test\");\n               \thandler_5.importFile(inFile6);\n            }\n            catch (Exception e) {\n                assertTrue(\"error in import successful for file\" + inFile6.getAbsolutePath(),false); \n            }\n\n            DataSet dset = reader.getNextData();\n        }\n    }\n\n\t/**\n\t * create test files for SBML2 graph import.\n\t * \n\t * @throws IOException exception\n\t */\n\tprivate File createTestFile(String name) throws IOException {\n\t \n\t        File file = new File(\".\");\n\t\tFile file_2 = new File(\"/tmp/\"+name);\n\n\t\tassertTrue(\"File creation failed!\",file_2.createNewFile());\n\n\t\tFileInputStream fin =new FileInputStream(file);\n\t\tFileOutputStream fout = new FileOutputStream(file_2);\n\n\t\tbyte[] buff = new byte[3];\n\t\t\n\t\tbuff[0]=0;\n\t\tbuff[1]=0;\n\t\tbuff[2]=0;\t\t      \n\t\tfin.read(buff);\n\t\tfout.write(buff);\n\n\t\tfout.flush();\n\t\tfout.close();\n\n\t\tfin.close();\n\t\t\n\t\treturn file_2;\t\t\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n    /**\n     * Test if {@link SBMLFilter#getReader(String)} method of the SBMLFilter class can retrieve a SBML GraphReader instance from a given SBML file.\n     */\n    @Test\n    public void testGetReader_2() {\n        System.out.println(\"Testing method - 'getReader(String)'.\");\n\n        File fSBML = new File(\"test_input2_1_1b.sbml\");\n        System.out.println(\"SBML File: \" + fSBML);\n        \n        importHandler.importFile(fSBML);\n        System.out.println(\"Import Succeeded\");\n    }\n    \n    /**\n     * Test if {@link SBMLFilter#getReader(String)} method of the SBMLFilter class can retrieve an existing GraphReader instance from a given SBML file.\n     */\n    @Test\n\tpublic void testGetReader_3() {\n\t\tSystem.out.println(\"Testing method - 'getReader(String)'.\");\n\n\t\tFile fSBMLf = new File(\"test_input2_1_1b.sbml\");\n\t\tFile fInputFile = new File(\"test_input2_1_1.sbml\");\n\t\tSystem.out.println(\"SBML File: \" + fSBMLf);\n\t\tSystem.out.println(\"Input SBML File: \" + fInputFile);\n        \n        importHandler.importFile(fInputFile);\n        \n        ImportHandler importHandler2 = importHandler.importFile(fInputFile);\n\n        System.out.println(\"Import Succeeded\");\n\t\t\n\t\tGraphReader gR = importHandler2.getSBMLGraphReader();\n\t\tSystem.out.println(\"graphreader:\"+gR);\n\t}\n\t\n\t/**\n\t * Test if {@link SBMLFilter#getReader(String)} can only recognize SBML Graph Reader instances.\n     */\n    @Test()\n    public void testEmptyFile(){\n        assertTrue(!importHandler.hasSBMLGraphReader());\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t/**\n    * This constructor is for the purpose of the single line tests that verify that\n    * the {@link SBOLGraphReader} returns no data by default.\n    */\n\tpublic SBMLFilter_1Test() {\n\t\tSystem.out.println(\"SingleLineTest\");\n\t}\n\n\t/**\n     * Tests that calling {@link SBOLGraphReader#getData()} correctly returns no data by default. This\n     * results in an assertion being passed.\n\t */\n\t@Test\n\tpublic void sbmlTest() {\n\t\t// Calling SBMLGraphReader#getData method\n\t\tsbmlReader.getData();\n\n\t\t// Verify that the results array is empty.\n\t\tassertTrue(\"Empty SBOLGraphReader data array was returned. Assertion failed!\",\n                \t\tsbmlReader.getData().length == 0);\n    }\n\n\t/**\n\t * This method tests that calling {@link GraphReader#getData()} returns a valid\n\t * array. This results in no assertion being passed.\n\t */\n\t@Test\n\tpublic void graphTest() {\n\t\t// Calling GraphReader#getData method\n\t\tgraphReader.getData();\n\n\t\t// Verify that the results array is not empty\n\t\tassertTrue(\"Empty GraphData array was returned. Assertion failed!\",\n                \t\tgraphReader.getData().length > 0);\n\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t/**\n\t\t* Test case for {@link SBMLFilter#getReader(String)}.\n\t\t*/\n\t@Test\n\tpublic void readFile_1() throws IOException, InterruptedException {\n        String fileName = \"sbml_filter_readme1.txt\";\n        \n        assertNotNull(fileName);\n        \n\t\tsbmlreader2.SBMLFilter.getReader(fileName).load();\n\t\t\n//\t\tSystem.out.println(fileName);\n//\t\tSystem.out.println(\"---\");\n//\t\tGraphReader reader = d.openGraphReader(fileName, d.getCurrentModel(), d.getModel().getModelspace(), false);\n//\t\tString graph = d.getCurrentModel().readGraphs(reader);\n//\t\td.closeGraphReader(reader);\n//\t\tSystem.out.println(\"---\");\n//\t\tSystem.out.println(graph);\n//\t\tSystem.out.println(\"---\");\n\t\tassertNotNull(fileName);\n\t\tassertTrue(fileName.endsWith(\"_graph.sbml\"));\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n    /**\n     * Tests the {@link GraphReader#importGraph()} method\n     */\n    @Test\n    void testImportGraph2() {\n\ttry {\n\t    System.out.println(\"importGraph2 with filename\");\n\t    File libsbml = new File(Library.DATA_DIR,\"libsbml.jar\");\n\t    ImportHandler.importGraphFromJar(graphType, libsbml, \"/tmp/testImportGraph.sbml\");\n\t} catch (IOException ioe) {\n\t    System.err.println(\"IOException from the testImportGraph.sbml file: \" + ioe.getMessage());\n\t}\n    }\n\n    /**\n     * Tests the {@link GraphReader#importGraph()} method\n     */\n    @Test\n    void testImportGraph2Empty() {\n\ttry {\n\t    System.out.println(\"importGraph2 with empty graph file\");\n\t    File libsbml = new File(Library.DATA_DIR,\"libsbml.jar\");\n\t    ImportHandler.importGraphFromJar(graphType, libsbml, \"/tmp/testImportGraph.sbml\");\n\t} catch (IOException ioe) {\n\t    System.err.println(\"IOException from the testImportGraph.sbml file: \" + ioe.getMessage());\n\t}\n    }\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "0cb40980-8694-4093-bc5b-35236ed20e4e",
    "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
    "test_prompt": "// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {",
    "time_taken": 35.41863965988159,
    "usage": {
        "prompt_tokens": 438
    }
},
{
    "choices": [
        {
            "text": " \n    @Test\n    public void createVisualStyle() throws Exception {\n\t\t   \n\t\t   String label = \"SBMLReader\";\n        double x = 100;\n        double y = 200;\n        double w = 200;\n        double h = 200;\n        VisualStyle v = SBMLVisualStyleFactory.createVisualStyle(\n\t\t        getSimpleNetwork(),\n\t\t        x, y, w, h);\n        assertNotNull(v);\n        assertEquals(x, v.getX(), 0.1);\n        assertEquals(y, v.getY(), 0.1);\n        assertEquals(w, v.getWidth(), 0.1);\n        assertEquals(h, v.getHeight(), 0.1);\n        assertNull(v.getLabel());\n        assertFalse(v.contains(null));\n        assertFalse(v.contains(null, null));\n        v = SBMLVisualStyleFactory.createVisualStyle(\n                getSimpleNetwork(),\n                label,\n                x, y, w, h);\n        assertNotNull(v);\n        assertEquals(x, v.getX(), 0.1);\n        assertEquals(y, v.getY(), 0.1);\n        assertEquals(w, v.getWidth(), 0.1);\n        assertEquals(h, v.getHeight(), 0.1);\n        assertTrue(v.contains(label));\n        assertTrue(v.contains(label, null));\n        assertFalse(v.contains());\n        assertFalse(v.contains(null, label));        \n    }\t\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n        @Test\n        public final void testCreateVisualStyle() {\n                SBMLVisualStyleFactory sbmlVisualStyleFactory = new SBMLVisualStyleFactory();\n                assertNotNull(\"VisualManager is null\", sbmlVisualStyleFactory.getGlobalVisualMappingManager());\n                assertNotNull(\"Node mappings vector is null\", sbmlVisualStyleFactory.getNodeMappings());\n                assertNotNull(\"Edge mappings vector is null\", sbmlVisualStyleFactory.getEdgeMappings());\n                assertNotNull(\"Calculator vector is null\", sbmlVisualStyleFactory.getCalculatorVector());\n        }\n\n        @Test\n        public final void testConstructor() {\n                SBMLVisualStyleFactory sbmlVisualStyleFactory = new SBMLVisualStyleFactory();\n                // --------------------------------- Test constructors -----------------------------------//\n                assertNotNull(\"GlobalColour is null\", sbmlVisualStyleFactory.getGlobalAppearanceCalculator());\n                assertNotNull(\"GlobalColour is not null\", sbmlVisualStyleFactory.getGlobalVisiblityCalc());\n                assertNotNull(\"GlobalColor is null\", sbmlVisualStyleFactory.getGlobalVisiblityCalc());\n                assertNotNull(\"GlobalAppColour is null\", sbmlVisualStyleFactory.getGlobalAppearanceCalculator());\n                assertNotNull(\"GlobalAppColour is null\", sbmlVisualStyleFactory.getGlobalVisiblityCalc());\n                assertNotNull(\"GlobalAppColor is null\", sbmlVisualStyleFactory.getGlobalVisiblityCalc());\n                assertNull(\"GlobalAppearanceCalculator is null\", sbmlVisualStyleFactory.getGlobalAppearanceCalculator());\n                assertNull(\"GlobalVisibilityCalc is null\", sbmlVisualStyleFactory.getGlobalVisibilityCalc());\n                assertNull(\"GlobalVisibilityCalculator is null\", sbmlVisualStyleFactory.getGlobalVisitibilityCalc());\n                assertNotNull(\"GlobalNodes is null\", sbmlVisualStyleFactory.getGlobalVisualMappingManager());\n                assertNotNull(\"GlobalMappings vector is null\", sbmlVisualStyleFactory.getGlobalMappings());\n                assertNotNull(\"GeneralisedColorVector is null\", sbmlVisualStyleFactory.getGeneralisedColorVector());\n                assertNotNull(\"GeneralisedColor is null\", sbmlVisualStyleFactory.getGeneralisedVisibilityCalc());\n                assertNotNull(\"GeneralisedColor is null\", sbmlVisualStyleFactory.getGeneralisedVisibilityCalc());\n                assertNotNull(\"GeneralisedColor is null\", sbmlVisualStyleFactory.getGeneralisedNodesCalc());\n                assertNotNull(\"GeneralisedColor is null\", sbmlVisualStyleFactory.getGeneralisedNodeTypeCalc());\n                // --------------------------------- Test methods ------------------------------------------//\n                sbmlVisualStyleFactory.createVisualStyle(null);\n                sbmlVisualStyleFactory.createVisualStyle(null, null);\n                sbmlVisualStyleFactory.createVisualStyle(null, null, null);\n                // --------------------------------- Test case for method with no argument tests ---------------------------------//\n                sbmlVisualStyleFactory.createVisualStyle(",
            "finish_reason": "length"
        },
        {
            "text": "StaticApplicationState appState = new StaticApplicationState();\n\n\t\t@Test\n\t\tpublic void test_createVisualStyle() {\n\t\t\t\tStaticApplication app = appState.getApplication();\n\t\t\t\tCyNetwork network = app.getNetwork();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Set the visual style\n\t\t\t\t */\n                VisualStyle visualStyle = new VisualStyle(SBMLVisualStyleFactoryTest_Vs);\n                VisualModel vmod = network.createModel();\n                \n                // Set the nodes\n                Node n0 = app.addNode(0);\n                Node n1 = app.addNode(1);\n                Node n2 = app.addNode(2);\n                \n                AppendNodesVisitor visitor = new AppendNodesVisitor(n0);\n                AppendNodesVisitor visitor2 = new AppendNodesVisitor(n1);\n                AppendNodesVisitor visitor3 = new AppendNodesVisitor(n2);\n                \n                visitor.visit(visitor2);\n                visitor.visit(visitor3);\n                \n                /*\n                Append the visual elements to the model\n                */\n                n0.addElement(new VisualElement(0, n0.getElement(0)));\n                n1.addElement(new VisualElement(1, n1.getElement(0)));\n                n2.addElement(new VisualElement(2, n2.getElement(0)));\n                \n                /*\n                Set the node attributes on the visual style\n                */\n                n0.setNodeProperty(\"species\", n0.getNodeProperty(\"elementType\"), \"species\");\n                n0.setNodeProperty(\"name\", n0.getNodeProperty(\"name\"), \"name\");\n                n1.setNodeProperty(\"species\", n1.getNodeProperty(\"elementType\"), \"species\");\n                n1.setNodeProperty(\"name\", n1.getNodeProperty(\"name\"), \"name\");\n                n2.setNodeProperty(\"species\", n2.getNodeProperty(\"elementType\"), \"species\");\n                n2.setNodeProperty(\"name\", n2.getNodeProperty(\"name\"), \"name\");\n                \n\t\ttry {\n\t\t\t\tNetwork net = new Network(network, appState);\n\t\t\t\t// set the parameters\n\t\t\t\tvmod.setModel(net.getModel());\n\t\t\t\t\n\t\t\t\t// set the node\n\t\t\t\tvmod.createNode(\"n3\", Color.RED, 0.5);\n\t\t\t\tvmod.createNode(\"n4\", Color.GREEN, 3);\n\t\t\t\tvmod.createNode(\"n5\", Color.BLUE, 2.6);\n\t\t\t\tvmod.createNode(\"n6\", Color.RED, 1);\n\t\t\t\tvmod.createModelElement(n0);\n\t\t\t\tvmod.createModelElement(n1);\n\t\t\t\tvmod.createModelElement(n2);\n\t\t\t\tvmod.createModelElement(app.getCoreModel().getModelElement(\"n6\"));\n\n\t\t\t\t\n\t\t\t\t// visual styles\n\t\t\t\tapp.setVisualStyle(visualStyle);\n\t\t} catch (CyNetApplicationException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t* This method tests the creation of a {@link VisualStyle} instance based on the following input:\n\t* 1) A simple {@link VisualMappingManager} that maps a {@link CyNode} (reversible)\n\t* 2) A double double mapping {@link ObjectMapping} of {@link Object}, and\n\t*            an array mapping {@link VisualPropertyTypes} of type {@link VisualPropertyType}\n\t* 3) A double double mapping {@link StringMapping} of {@link String} from {@link\n\t*            VisualPropertyType} to {@link VisualShape}\n\t*\n\t* @see SBMLVisualStyleFactory#createVisualStyle(CyNetwork)\n\t*/\n\t@Test\n\tpublic void testCreateVisualStyle() {\n\t\tGlobalAppearanceCalculator globalCalc = new GlobalAppearanceCalculator();\n\t\tGlobalCalculator globalCalc2 = new GlobalCalculatorFactory().createGlobalCalculator(globalCalc);\n\t\tGlobalCalculator globalCalc3 = new GlobalCalculatorFactory().createGlobalCalculator(globalCalc);\n\t\tVisualPropertyManager<VisualShape, Vertex> propertyManager = new VertexPropertyManager<>();\n\t\tVisualProperty typeMapping = new DoubleMapping(VisualPropertyType.NUMERIC, VisualPropertyType.DOUBLE);\n\t\tGlobalCalculator globalCalc4 = new GlobalCalculatorFactory().createGlobalCalculator(globalCalc);\n\t\tVisualPropertyType propertyType = new VisualPropertyType(VisualPropertyType.NUMERIC, VisualShape.class, VisualPropertyType.DOUBLE);\n\t\tpropertyManager.setMapping(propertyType,\n        \t\tnew ObjectMapping<>(\n        \t\t\t\ttypeMapping, \n        \t\t\t\tnew ObjectMapping<>(\n        \t\t\t\t\tnew ObjectMapping<>(\n        \t\t\t\t\t\tpropertyType,\n        \t\t\t\t\t\tnew ObjectMapping<>(\n        /*       * VisualPropertyType.NAMESPACE, */ propertyType), \n        \t\t\t\t\t\tnew ObjectMapping<>(\n        /*       * VisualPropertyType.REACTION, */ propertyType,\n        /*       * VisualPropertyType.NAMESPACE\n        * \n        *) VisualPropertyType.NAMESPACE, VisualPropertyType.REACTION, VisualPropertyType.NAMESPACE,\n        \n        * VisualPropertyType.REACTANT, VisualPropertyType.NAMESPACE\n        * \n        *) VisualPropertyType.NAMESPACE, VisualPropertyType.REACTION, VisualPropertyType.NAMESPACE,\n        \n        * VisualPropertyType.REACTION, VisualPropertyType.NAMESPACE\n        * \n        )\n        \n        )\n        ));\n\n\t\tVisualVisualStyle<VisualMappingManager<VisualShape>, String> visualStyle = createVisualStyle(new GlobalCalculatorFactory().createGlobalCalculator(globalCalc));\n\t\t\n\t\tObjectMap<VisualPropertyType, VisualProperty<VisualShape>> properties = propertyManager.getProperties(propertyType);\n\t\tPropertyMap2D.MapToArray converter = new PropertyMapToArrayImpl<Object>(\n\t\tconvertProperty",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n\t  void testCreateVisualStyle() {\n\t\t\n        CyNetwork network = \n                CyNetwork.loadFromFile(Cytoscape.visual.Visual.getDefaultInstance(), \"/static/Data2/SBML_Network/Cytoscape_3.0_10.0_CySbmlTree.xml\", \n                        true, false);\n\n        SBMLVisualStyleFactory.createVisualStyle(network);\n        assertTrue(true);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t\tint nbrOfUnits; /* number of units */\n\t\t\n\t\tpublic SBMLVisualStyleFactoryTest() {\n\t\t\tnbrOfUnits = 2;\n\t\t\t}\n\n\t\t/**\n\t\t* Test method for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)}.\n\t\t*/\n\t\t@Test\n\t\tpublic final void testOneUnit() {\n\t\t\t\n\t\t\tCytoscapeGraph graph = new CytoscapeGraph();        \n\t\t\tCyNode sourceGraphNode = new CyNode(0);            \n\t\t\tCyNetwork sourceNetwork = new CyNetwork(sourceGraphNode);\n            //GraphToWorld\n        \tGraphToWorld convert = new GraphToWorld();              \n            //convert.convert(sourceNetwork);\n            \n            return;\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "static final String nn_ = \"network\";\n\t\tstatic final String sn_ = \"sbml_\";\n\t\tstatic final String network_ = \"cytoscape.network\";\n\t\tstatic final String sbmlNodeType_ = \"cytoscape.sbml.nodeType\";\n\t\tstatic final String sbmlReactronType_ = \"cytoscape.sbml.reactionType\";\n\t\tstatic final String sbmlSpeciesType_ = \"cytoscape.sbml.speciesType\";\n\t\tstatic final String sbmlModifierType_ = \"cytoscape.sbml.modifierType\";\n\t\tstatic final int tt_ = 3;\n\t\tstatic final String tt_ = \"t\";\n\t\tstatic final String tt_ = \"T\";\n\t\tpublic String testString;\n\t\t\n\t\tpublic SBMLVisualStyleFactoryTest() {\n\t\t\ttry {\n\t\t\t\ttestString = this.getClass().getName()+\"_test\";\n\t\t\t\ttest(\"SBMLVisualStyleFactory.createVisualStyle(CyNetwork)\", createVisualStyle(CyNetwork.getInstance(getSBNMLNetwork())));\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\tpublic static void createVisualStyle(CyNetwork network) {\n\t\t\tGlobalAppearanceCalculator gac = null;\n\t\t\tVisualStyle visualStyle = null;\n\t\t\tint numOfTests = 1;\n\t\t\tif (nn_.compareTo(\"cytoscape.network\") == 0) numOfTests = 2;\n\t\t\telse if (sn_.compareTo(\"cytoscape.network\") == 0) numOfTests = 5;\n\t\t\telse if (network_.compareTo(\"cytoscape.network\") == 0) numOfTests = 3;\n\t\t\tString networkName = network_.substring(0, 1);\n\t\t\tfor (int i = 0; i < numOfTests; i++) {\n\t\t\t\tSystem.out.println(\"\\n\\n***************************************Testing \"+networkName+\"*************************************************\");\n\t\t\t\tnetworkNumber = 0;\n\t\t\t\ttry {\n\t\t\t\t\tnetwork = network.getParent();\n\t\t\t\t} catch (CyNotFoundException e) {\n\t\t\t\t  System.out.println(\"Could not get parent of \"+network.getFullName());\n\t\t\t\t\tSystem.exit(101);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"\\n\\n****Testing \"+networkName+\"*************************************************\");\n\t\t\t\tswitch (networkNumber) {\n\t\t\t\tcase (int) sbmlNodeType_:\n\t\t\t\t\t{\n\t\t\t\t\t\t//Network network = CyNetworkFactory.createNetworkFromFile(\"C3S14\", Cytoscape.getCytoscape());\n\t\t\t\t\t\tNetwork network = network.getChildByName(nn_);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tgac = network.getGlobalAppearance();\n\t\t\t\t\t\t} catch (CyNotFoundException e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Could not get Global Appearance\");\n\t\t\t\t\t\t\tSystem.exit(101);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase (int) sbmlReactronType_",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n* Asserts that visual style is correctly created for the given SBML network and node.\n*/\n\t@Test \n\tpublic void test() {\n\t\t\n\t// TODO: implement for non-linear node ips\n\t}\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    public SBMLVisualStyleFactoryTest(){}\n\n    @Test\n    public void testFactory(){\n               //Create  visual style from class\n              SBMLVisualStyleFactory factory = new SBMLVisualStyleFactory(networkManager);\n              \n              //Check if a visual style is created for a given set of values\n              assertEquals(factory.createVisualStyle(networkManager), sbmlVisualStyle); \n    }    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate SBMLVisualStyleFactory sbmlVisualStyleFactory;\n\t\n\t/**\n\t* Constructor\n\t*/\n\tSBMLVisualStyleFactoryTest() {\n\tsbmlVisualStyleFactory = new SBMLVisualStyleFactory();\n\t\t}\n\n\t@Test\n\tvoid createVisualStyleForCyNetwork() {\n\t\tCyNetwork network = new CyNetwork(new HashMap<String, Integer>());\n\t\tSBMLVisualStyle visualStyle = sbmlVisualStyleFactory.createVisualStyle(network);\n\t\tassertNotNull(visualStyle);\n\t\tassertEquals(\"1\", Integer.valueOf(visualStyle.getID()));\n\t\tassertEquals(\"1\", String.valueOf(((SBMLVisualStyle)visualStyle).getSId()));\n\t}\n\n\t@Test\n\tvoid createVisualStyleForNetworkWithIDMap() {\n//\t\tNetwork pkgNetwork = new Network([(\"SBMLNetwork\", \"reactor\"     )], CyNetwork, null);\n//\t\tSBMLVisualStyle visualStyle = sbmlVisualStyleFactory.createVisualStyle(pkgNetwork);\n\t\t\n\t\t/*\n\t\t * SBMLVisualStyle visualStyle = sbmlVisualStyleFactory.createNetworkWithIDMap();\n\t\t * </pre>\n\t\t * @todo Need to review this and make it work correctly after the\n\t\t *        new SBMLVisualStyleFactory with just one network is made\n\t\t */\n\t\t\n\t\t\n\t}\n\t@Test\n\tvoid createVisualStyleForNetworkWithAttributeMap() {\n\t\tCyNetwork network = new CyNetwork(new HashMap<String, Integer>(), new AttributeMap(\"sbmlname\", String.class) );\n\t\tSBMLVisualStyle visualStyle = sbmlVisualStyleFactory.createVisualStyle(network);\n\t\t\n\t\tassertNotNull(visualStyle);\n\t\tassertEquals(network.getID(),Integer.valueOf(visualStyle.getID()));\n\t\tassertEquals(\"SBML name\", String.class.cast(visualStyle.getAttribute(\"sbmlname\")));\n\t\t\n\t}\n\t@Test\n\tvoid createVisualStyleForEmptyNetwork() {\n\t\tSBMLVisualStyle visualStyle = sbmlVisualStyleFactory.createVisualStyle();\n\t\t\n\t\tassertNotNull(visualStyle);\n\t\t\n\t}\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "1058aaa9-316b-46ee-b73f-0382c528f9e5",
    "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
    "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    public static VisualStyle createVisualStyle(CyNetwork network) {\n        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();\n        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();\n        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();\n        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();\n        // ------------------------------ Set node shapes ---------------------------//\n        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);\n        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        disMapping.putMapValue(\"species\", NodeShape.DIAMOND);\n        disMapping.putMapValue(\"reaction\", NodeShape.ELLIPSE);\n        Calculator shapeCalculator = new BasicCalculator(\"SBMLReader Shape Calculator\", disMapping, VisualPropertyType.NODE_SHAPE);\n        nodeAppCalc.setCalculator(shapeCalculator);\n        // ------------------------------ Set the label ------------------------------//\n        // Display the value for geneName as a label\n        String cName = \"sbml name\";\n        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);\n        if (nlc == null) {\n            PassThroughMapping m = new PassThroughMapping(new String(), cName);\n            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);\n        }\n        nodeAppCalc.setCalculator(nlc);\n        //--------------------- Set the size of the nodes --------------------------//\n        //Discrete mapping on nodeType\n        Double speciesNodeSize = new Double(30);\n        Double reactionNodeSize = new Double(30);\n        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);\n        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        sizeMapping.putMapValue(\"species\", speciesNodeSize);\n        sizeMapping.putMapValue(\"reaction\", reactionNodeSize);\n        Calculator sizeCalculator = new BasicCalculator(\"SBMLReader Size Calculator\", sizeMapping, VisualPropertyType.NODE_SIZE);\n        nodeAppCalc.setCalculator(sizeCalculator);\n        nodeAppCalc.setNodeSizeLocked(true);\n        // ------------------------------ Set edge arrow shape ---------------------------//\n        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);\n        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        arrowMapping.putMapValue(\"reaction-product\", ArrowShape.ARROW);\n        arrowMapping.putMapValue(\"reaction-reactant\", ArrowShape.NONE);\n        arrowMapping.putMapValue(\"reaction-modifier\", ArrowShape.CIRCLE);\n        Calculator edgeArrowCalculator = new BasicCalculator(\"SBMLReader Edge Arrow Calculator\", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);\n        edgeAppCalc.setCalculator(edgeArrowCalculator);\n        // ------------------------------ Set edge colour ---------------------------//\n        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);\n        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        edgeColorMapping.putMapValue(\"reaction-product\", Color.GREEN);\n        edgeColorMapping.putMapValue(\"reaction-reactant\", Color.RED);\n        edgeColorMapping.putMapValue(\"reaction-modifier\", Color.BLACK);\n        Calculator edgeColorCalculator = new BasicCalculator(\"SBMLReader Edge Color Calculator\", edgeColorMapping, VisualPropertyType.EDGE_COLOR);\n        edgeAppCalc.setCalculator(edgeColorCalculator);\n        //------------------------- Create a visual style -------------------------------//\n        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();\n        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);\n        return visualStyle;\n    }\n}\n",
    "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains one unit test case for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {",
    "time_taken": 30.73384666442871,
    "usage": {
        "prompt_tokens": 1347
    }
}
]