ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
8e38ccd5-55e4-42a5-8d74-fd00b8628542,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_0Test.java,55.416778564453125,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }
}
","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {

	@Test
	void jTailMainModel() {
	    
		// Check constructor in the bean definition
		assertNotNull(new ApplicationConfiguration<MyModel, MyModel>().jTailMainModel());
		
		// Check configuration in the bean definition
		NewJTailMainFrame testFrame = new NewJTailMainFrame(""MyTest"");
		assertNotNull(testFrame);
		assertNotNull(testFrame.getMainModel());
		assertTrue(testFrame.getMainModel() instanceof JTailMainModel);
	}
	
	@Test
	void jTailMainModelByFileDialogs() {
	    
		// Check constructor in the bean definition
		assertNotNull(new ApplicationConfiguration<MyModelByFiles, MyModelByFiles>().jTailMainModelByFileDialogs());
		
		// Check configuration in the bean definition
		NewJTailMainFrame testFrame = new NewJTailMainFrame(""MyTest"");
		assertNotNull(testFrame);
		SelectClass<MyModelByFiles, OpenFileModel<MyModelByFiles>> testMethod = testFrame;
		MyModelByFiles modelByFiles = testMethod.getMainModelByFileDialogs();
		assertNull(modelByFiles);
	}
	
	@Test
	void jTailMainModelByIndex() {
		
		// Check constructor in the bean definition
		assertNotNull(new ApplicationConfiguration<MyModelByIndex, MyModelByIndex>().jTailMainModelByIndex());
		
		// Check configuration in the bean definition
		NewJTailMainFrame testFrame = new NewJTailMainFrame(""MyTest"");
		SelectClass<MyModelByIndex, OpenFileModel<MyModelByIndex>> testMethod = testFrame;
		MyModelByIndex modelByIndex = testMethod.getMainModelByIndex();
		assertNotNull(modelByIndex.getIndexTypeListener());
		assertNotNull(modelByIndex.getIndexTypeListener().getIndex());
		{
			ResourceBundle rb = ResourceBundle.getBundle(""MyBeanBundle"");
			assertNotNull(rb.getString(""index""));
		}
		assertNull(modelByIndex.getIndexTypeListener().getIndex());
	}
	
}
"
af56aac4-f3e7-4a8c-807a-f61c44c0769e,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_1Test.java,51.781501054763794,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }
}
","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {

	/**
	 * Create an default instance of the ""open file"" model.
	 *
	 * @return the default instance
	*/
	public OpenFileModel openFileModel() {
		OpenFileModel model = new OpenFileModel();
		model.setMainModel(new JTailMainModel());
                model.addDataType(""JTail"");
				model.addColumn(""name"", ResourceBundle.getBundle(""Bundle"")
	                       .getString(""fileName""));
	            model.addColumn(""typeFile"", ResourceBundle.getBundle(""Bundle"")
	                       .getString(""fileType""));
	            model.addColumn(""lastDate"", ResourceBundle.getBundle(""Bundle"")
	                       .getString(""lastFileDate""));
	            model.addColumn(""nameLastDate"", ResourceBundle.getBundle(""Bundle"")
	                       .getString(""fileNameLastDate""));
                return model; 
        }
		
        /**
	 * @see ApplicationConfiguration_1Test#openFileModel()
         */
        @Test
        @SuppressWarnings(""unchecked"")
		public void openFileModel() {
                OpenFileObject openFileObject = new OpenFileObject();
        	JTailMainFrame mainFrame = new JTailMainFrame();

        	
        	assertEquals(OpenFileModel.class, openFileObject.getClass());
		}
		
		@Test
	public void selectFileType() {
		
		OpenFileModel model = new OpenFileModel();
		
		model.addSelectListener(new SelectIndexTypeListener(""fileType:Ceiling""));
		
		OpenFileDialog dialog = new OpenFileDialog();
		
		boolean result = dialog.execute(model, null);
		assertTrue(result);
		assertTrue(String.valueOf(model.getTableName()), model.getFileName().equals(""test""));
		assertTrue(String.valueOf(model.getTableType()), model.getTypeFile().equals(""ceiling""));
		assertEquals(String.valueOf(model.getFileNameLastDate()), model.getLastFileDate());
		assertEquals(String.valueOf(model.getFileName()), model.getFileName());
		assertEquals(String.valueOf(model.getNameLastDate()),  model.getNameLastDate());
		
		result = dialog.execute(model, null);
		assertFalse(result);
		
		dialog = new OpenFileDialog();
		dialog.setName(""Test"");
		result = dialog.execute(model,null);
		assertFalse(result);
	}
		
	@Test
	public void selectFileTypeAndName() {
		SelectIndexTypeListener indexTypeListener1 = new SelectIndexTypeListener(""fileType:Ceiling"");
		SelectIndexTypeListener indexTypeListener2 = new SelectIndexTypeListener(""FILETYPE:BAR"");
		
		SelectIndexTypeListener2 list = new SelectIndexTypeListener2();
		
		list.addListener(indexTypeListener1);
		list.addListener(indexTypeListener2);
		
		OpenFileModel model = new OpenFileModel();
		
		model.addSelectListener(indexTypeListener1);
		model.addSelectListener(list);
		model.addSelectListener(list);
		model.setFileName(""myfile"");
		model.addColumn(""fileType"", ResourceBundle.getBundle(""Bundle"")
               .getString(""fileType""));
		model.addColumn(""name"", ResourceBundle.getBundle(""Bundle"")
               .getString(""fileName""));
		model.addColumn(""lastDate"", ResourceBundle.getBundle(""Bundle"")
               .getString(""lastFileDate""));
		
		
		OpenFileDialog dialog = new OpenFileDialog();
		dialog.setName(""Tester"");
		dialog.setFileName(""MyFile"");
		dialog.setLastFileDate(""2005-12-07"");
		
		
		boolean result = dialog.execute(model,null);
		assertTrue(result);
		assertTrue(String.valueOf(model.getTableName()), model.getFileName().equals(""MyFile""));
		assertTrue(String.valueOf(model.getTableType()), model.getTypeFile().equals(""ceiling""));
		assertEquals(String.valueOf(model.getFileName()), ""myfile"");
		assertEquals(String.valueOf(model.getFileNameLastDate()), ""2005-12-07"");
		assertEquals(String.valueOf(model.getNameLastDate()), ""2005-12-07"");
		assertEquals(String.valueOf(model.getLastFileDate()), ""2005-12-07"");
	}

}
"
5501e731-a5f0-4450-be5b-a53e0f8bee26,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_2Test.java,52.64019703865051,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }
}
","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {

    @Test
    public void shouldUseBundle() {
        assertTrue(bundle!= null);
    }
    
    @Test
    public void shouldDefineConfigurationForJTail() {
        jTailServiceConfiguration = new ApplicationConfiguration.ApplicationConfiguration();
    }
    
    @Test
    public void shouldUseConfigurationBundle() throws Exception {
        ResourceBundle bundle = ResourceBundle.getBundle(ConfigurationManager.class.getName() + "".config"");
        assertNotNull(bundle);
    }
    
    /**
     * This test case is intended to create a fresh configuration at the beginning of the test.
     * It has to recreate all the model in case it is used in the beginning of the tests.
     */
    @Test
    @SuppressWarnings(""static-method"")
    public void shouldBeAbleToCreateNewConfiguration() throws Exception {
        FileController configuration = new JTailMainModel(""New model"").addDirectory(new Directory(""MyTestModel"")).getController();
        assertNotNull(configuration);
    }
    
    @Test
    @SuppressWarnings(""static-method"")
    public void shouldBeAbleToGetConfiguration() throws Exception {
        OpenFileDialog dialog = new OpenFileDialog();
        assertNotNull(dialog);
    }
    
    @Test
    @SuppressWarnings({
        ""static-method"",
        ""static-field-beans-syntax""
    })
    public void shouldCreateNewJTailModel() throws Exception {
        JTailMainFrame jTailMainFrame = new JTailMainFrame(""My new model"");
        assertNotNull(jTailMainFrame.getModelManager());
        assertNotNull(jTailMainFrame.getController());
    }
    
    @Test
    @SuppressWarnings(""static-method"")
	public void shouldBeAbleToCreateJTailModelOnController() throws Exception {
        OpenFileDialog dialog = new OpenFileDialog();
        FileManager fileManager = new FileManager() {
            @Override
            public void addActionToCurrentTab(String fileName) {
            }
            @Override
            public boolean hasFileMenuToOpen(String fileName) {
                return false;
            }
        };
        jTailServiceConfiguration = new ApplicationConfiguration.ApplicationConfiguration(fileManager);
        TestController.createJTailFile = true;
        assertNotNull(jTailServiceConfiguration.getController());
        jTailServiceConfiguration.init(null);
    }

    @Test
	@SuppressWarnings(""static-method"")
	public void shouldBeAbleToClose() throws Exception {
        jTailServiceConfiguration.close(true);
        assertNotNull(jTailServiceConfiguration.getController());
    }
    
    @Test
    public void shouldBeAbleToReplaceModelOnFileMenu() throws Exception {
        OpenFileDialog originalDialog = new OpenFileDialog();
        assertNotNull(originalDialog);
        assertNotNull(originalDialog.isOpen());
        originalDialog.removeAllActionsFromMenu();
        assertTrue(originalDialog.isOpen());
        assertTrue(originalDialog.isOpen(false, null));
    }
    
    @Test
    public void shouldBeAbleToOpenAndReplaceFileMenu() throws Exception {
        OpenFileDialog dialog = new OpenFileDialog();

        assertNotNull(dialog);
        assertTrue(dialog.isOpen(false, null));
    }

    @Test
    @SuppressWarnings({ ""static-field-beans-syntax"" })
    public void shouldBeAbleToStartApplicationByController() throws Exception {
        
		FileManager fileManager = new FileManager();
		TestController controller = new TestController();
		
		ApplicationConfiguration.ApplicationConfiguration configuration = new ApplicationConfiguration.ApplicationConfiguration(fileManager);
		jTailServiceConfiguration = configuration;
		jTailServiceConfiguration.setController(controller);		
		
		controller.init(null);				
		int port = controller.bindPort();
		TestController newController = new TestController(port);
		
		assertNotNull(newController.getModelManager());
		assertNotNull(controller);
        assertTrue(controller.isAvailable() == true);
    }

    @Test
    @SuppressWarnings({ ""static-field-beans-syntax"" })
    public void shouldBeAbleToUpdateModel() throws Exception {
        
    }

    protected BeanDefinition beanDefinition(String name) {
        BeanDefinition bd = new BeanDefinition();
        bd.setBeanClass(MyModel.class);
        ResourceBundle resourceBundle = ResourceBundle.getBundle(ConfigurationManager.class.getName() + "".config"");
        bd.setQualifier(resourceBundle);
        return bd;
    }
    
    final private ResourceBundle bundle;
    final private ApplicationConfiguration applicationConfiguration;
    final private JTailMainFrame jTailMainFrame;	

    public ApplicationConfiguration(FileManager fileManager) {

        bundle = new ResourceBundle(ConfigurationManager.class.getName() + "".config"");
        bundle = new ResourceBundle(bundle);
        JTailMainModel model = new JTailMainModel(bundle);
        model.addDirectory(new Directory(""FileManagement""));
        model.populateActionsForCurrentDirectory();
        model = new JTailMainModel(bundle);
        model.populateActionsForCurrentDirectory();
        model = new JTailMainModel(bundle);
        model.populateActionsForCurrentDirectory();

        jTailMainFrame = new JTailMainFrame(""Test"");
        jTailMainFrame.setModel(model);
        
        jTailMainFrame.addActionsToCurrentTab(bundle.getString(""file.menu.action.list""));
        jTailMainFrame.addActionsToCurrentTab(bundle.getString(""file.menu."
c83ce191-6969-4b6f-9472-14225289b614,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_3Test.java,52.61708426475525,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }
}
","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {
/**
		 * Test the {@link ApplicationConfiguration#toolsMenuAction()} method.
		 */
		@Test
		void testToolsMenuAction() {
    	  System.exit( 0 );
    	  // Test case 1: the first test case
    	  assertNotNull(toolsMenuAction());
    	  // Test case 2: one case for menus and buttons, and no button
    	  assertNotNull(toolsMenuAction().getMenuItem());
    	  // Test case 3: in the case of no menus, the action is not added by default
    	  // But when the action is added, the action is initialized with a property resourceBundle
    	  assertNotNull(toolsMenuAction().getMenuItem().getBundle());
    	}
				System.exit( 0 );
}
/**
 * Example of another bean definition in Spring context, in case a test case for configuration is needed.
 * The ""open"" method of the OpenFileDialog class is to test the {@link OpenFileDialog#open()}.
 * It returns the created OpenFileDialog via the ""createDialog()"" method.
 *
 * For the OpenFile dialog, the ""bundle"" can also be provided as a bean argument.
 */
@Configuration
public class ApplicationConfiguration_5 {

  @Bean
  @Scope(BeanDefinition.SCOPE_PROTOTYPE)
  public OpenFileDialog open() {
    OpenFileDialog openedFileDialog = new OpenFileDialog(null, new ResourceBundle(""test""));
    return openedFileDialog;
  }
}

/**
 * Example of another bean definition in Spring context, in case a test case for configuration is needed.
 * The ""main"" method of the JTailMainFrame class is to create a new Frame.
 *
 * For the JTailMainFrame, that frame has a frame-like view, it is used by the
 * {@link JTailMainFrame#show()} method. The ""bundle"" can also be provided as a bean argument.
 */
@Configuration
public class ApplicationConfiguration_6 {

  @Bean
  @Scope(BeanDefinition.SCOPE_PROTOTYPE)
  public JTailMainFrame mainFrame() {
    return new JTailMainFrame(null, new ResourceBundle(""test""));
  }
}
"
69e6d86d-aa6b-4b1e-8941-22f371370e2b,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_4Test.java,52.965492963790894,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }
}
","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {
private final JTailMainModel openFileModel();
		
	/**
	 * Test method for {@link ApplicationConfiguration#chooseFileAction()}.
	 * <ul>
	 * <li>When creating an Action, a static, no parameterized, reference for the Spring ApplicationContext</li>
	 * <ul>
	 * @see SpringApplicationConfiguration
	 */
	@Test
	void testCreateAction() {
        JTailMainFrame frame = new JTailMainFrame(ResourceBundle.getBundle( ""lang-lang"").getString(""test""), null, null, null);
        frame.setMainModel(new JTailMainModel());
		final ApplicationConfiguration app = new ApplicationConfiguration();
		Action action = app.createAction(frame, new SelectFileAction());
		assertTrue(action instanceof JTailMainAction);
	}
	
	/**
	 * Test method for {@link ApplicationConfiguration#chooseFileAction()}.
	 * <ul>
	 * <li>When creating an Action, a static, no parameterized, reference for the Spring ApplicationContext</li>
	 * <ul>
	 * @see SpringApplicationConfiguration
	 */
	@Test
	void testCreateActionWithJTail() {
        JTailMainModel openFileModel = new OpenFileModel();
		openFileModel.setOpenFileDirectory(""OpenFileDirectory"");
		openFileModel.setOpenFileTemplate(""OpenFileTemplate"");
		
		BeanDefinition beanDefinition = ResourceBundle.getBundle( ""lang-lang"").getBeanDefinitionByName(""test"");
		beanDefinition.setFactory(JTailMainFrame.class.getSimpleName());
	  	assertTrue(!BeanUtils.isActive(JTailMainPanelImpl.class));
		
		BeanDefinition beanDefinition2 = ResourceBundle.getBundle( ""lang-lang"").getBeanDefinitionByName(""test2"");
		beanDefinition2.setFactory(JTailMainFrame.class.getSimpleName());
	  	
		JTailMainPanelFactory factory = (JTailMainPanelFactory) BeanUtils.instantiateClass(beanDefinition2.getBeanDefinition().getBeanClassName(), JTailMainPanelFactory.class);
		javax.swing.JPanel pnl_o = (javax.swing.JPanel) factory.makePanel(frame, openFileModel, null);
		javax.swing.JSplitPane pane = (javax.swing.JSplitPane) pnl_o.getComponent(0);
	    assertTrue(pane instanceof javax.swing.JSplitPane);
	    
		CloseOperationPanel closeOpPan = ((javax.swing.JSplitPane) pane).getRightSplit();
        assertTrue(closeOpPan!= null);
        closeOpPan.setRightComponent(new javax.swing.JButton(""Close""));
	}

        
        
	@Bean
	public OpenFileDialog openFileDialog() {
	    return new OpenFileDialog();
	}

	@Bean
	public JTailMainModel openFileModel() {
	    return new OpenFileModel();
	}

	@Bean
	public JTailMainFrame frame() {
	    return new JTailMainFrame(ResourceBundle.getBundle( ""lang-lang""),null,null, null);
	}

	                                                                                                                                       
}
        
"
f1a48fc8-fc12-4dcd-b49f-6d2dba4abae8,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_5Test.java,45.77558469772339,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }
}
","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {

	/**
	* Create the ""select index type"" action that will be used by menus and buttons.
	*
	* @return a new ""select index type"" action
	*/
	 public SelectIndexTypeListener selectIndexTypeListener() {
		 return new SelectIndexTypeListener(openFileModel());
	 }

	 /**
	 * Test constructor.
	 */
	//@Test
	public void constructorsWorks() {
		 assertTrue(ApplicationConfiguration_5Test.class.getDeclaringClass().equals(ApplicationConfiguration_1.class));

		 assertNotNull(new ApplicationConfiguration_5());
	}

	 /**
	 * Test of {@link ApplicationConfiguration#selectIndexTypeListener()} method, of class {@link ApplicationConfiguration_5}.
	 */
	 @Test
	public void testSelectIndexTypeListenerConstructor() {
		 assertNotNull(new ApplicationConfiguration_5().selectIndexTypeListener());
	}

	 /**
	 * Test to {@link ApplicationConfiguration#selectIndexTypeListener()} method, of class {@link ApplicationConfiguration_5}.
	 */
	@Test
	public void testSelectIndexTypeListener() {
		assertNotNull(selectIndexTypeListener());
	}
}
"
6a9231eb-4f09-4fa3-9a88-90ee7e18eadc,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_6Test.java,52.88097286224365,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }
}
","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {
@Test
		void test_indexFileAction() {
			assertNotNull(""The index file action will be created by Spring when the application context is initialized.""
					, indexFileAction()
					);
		}
}

class IndexFileAction extends SelectIndexTypeListener {
    private static final ResourceBundle PATCH_RESOURCES = ResourceBundle.getBundle(""PatchResources"");
	private final JTailCommon jTailCommon;
	/**
	 * Creates the {@link IndexFileAction}
	 */
    @Bean
    public IndexFileAction indexFileAction() {
        DefaultActionDescription description = new DefaultActionDescription(""Open (index file)"", ""indexFile"");
        //create the action
        return new ChooseIndexTypeAction("""", description) {
            @Override
            protected OpenFileModel createOpenFileModel(JTailMainFrame frame) {
                return new OpenFileModel(frame);
            }
        };
    }

    /**
     * Creates the main controller by selecting the main model
     */
    @Bean
    public JTailMainFrame frameController(JTailMainModel mainModel, JTailCommon common) {
        return new JTailMainFrame(mainModel, common);
    }


	/**
	 * Creates the main controller by selecting the model
	 */
	@Configuration
	@Bean(name = ChooseIndexTypeListener.VIEW_ONLY_ONCE)
	public ChooseIndexTypeListener getViewListener() {
		ViewType type = ViewType.ViewTypeEnum.Main.toValue();
		return new ChooseIndexTypeListener(frameController(jTailCommon, null), type, null, null);
	}

	/**
	 * Creates the view of the app
	 */

    @Bean(name = SelectIndexTypeListener.VIEW_ONLY_ONCE)
    public ChooseIndexTypeListener getViewListenerWithoutViewType() {
        ViewType type = ViewType.ViewTypeEnum.MainWithoutView();
        return new ChooseIndexTypeListener(frameController(jTailCommon, null), type, null, null);
    }

}"
de17ffc6-faf8-4394-bff6-5aa047a36cdf,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_7Test.java,52.87536835670471,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }
}
","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {

	// Variables
	private static JTailMainModel jTailMainModel = new JTailMainModel();
	private final JTailMainFrame parent;

	/**
	* Constructor of ApplicationConfiguration_7Test.
	* It creates a {@link JTailMainFrame} that is a child of the given parent.
	*
	* @param parent the parent where the {@link JTailMainFrame} will be create
	* @param args the arguments for the {@link JTailMainFrame}'s creation (see the {@link JTailMainFrame} Javadoc for more details)
	*/
	public ApplicationConfiguration_7Test(JTailMainFrame parent, String[] args) {
		this.parent = parent;
	}

	/**
	* An test method to assert whether the {@link OpenFileModel} is in the initial state or not.
	*/
	@Test
	void openFileModelIsInInitialStateTest() {
		OpenFileModel openFileModel = this.parent.testOpenFileModel();
		assertNotNull(""openFileModel is null"", openFileModel);
		assertTrue(""openFileModel has not be initialized with "" + OpenFileDialog.class.getName(), this.parent.testOpenFileModelIsInInitialState());
	}

	/**
	* An test method to assert whether the {@link OpenFileDialog} is in the initial state or not.
	*/
	@Test
	void openFileDialogIsInInitialStateTest() {
		OpenFileDialog openFileDialog = this.parent.testOpenFileDialog();
		assertNotNull(""openFileDialog is null"", openFileDialog);
		assertTrue(""openFileDialog has not been added to "" + this.parent.testOpenFileDialog(), this.parent.testOpenFileDialogIsInInitialState());
	}

	/**
	* A test method to assert whether the {@link JTailMainFrame} is in the initial state or not.
	*/
	@Test
	void jTailMainFrameIsInInitialStateTest() {
		assertNotNull(this.parent.jTailMainFrame());
		assertTrue(""jTailMainFrame is null"", this.parent.jTailMainFrame().isPresent());
	}

	/**
	* An test method to assert whether the {@link JTailMainFrame} is in the initial state or not.
	*/
	@Test
	void jTailMainFrameIsInActiveStateTest() {
		assertTrue(this.parent.jTailMainFrame().get().isRunning());
	}

	/**
	* Asserts that the given bundle has the given key.
	*
	* <p></p>
	* See the {@link ApplicationConfiguration#ApplicationConfiguration(ResourceBundle, String[], JTailMainFrame)}
	* for how to use the {@link ApplicationConfiguration#getBundle()} method.
	*/
	@Test
	void assertBundleHasKeyTest() {
		String keyToCheck = ""Test"";
		this.parent.assertBundleHasKey(keyToCheck);
	}
	
	/**
	* Asserts that the given bundle has the given key.
	* @param keyToCheck the key used to return the bundle
	* @param args the arguments used to call the bundle
	*/
	@Test
	void assertBundleHasKeyTest(String keyToCheck, String[] args) {
		ResourceBundle bundle = ResourceBundle.getBundle(this.getClass().getName() + ""-"" + keyToCheck, LocaleController.getLocale());
		this.parent.assertBundleHasKey(bundle, keyToCheck, args);
	}
	
	/**
	 * A test method of {@link org.junit.jupiter.api.Test}
	*/
	@Test
	void assertBundleIsNotNullTest() {
		assertNotNull(""The given bundle is null"", ApplicationConfiguration_7Test.this.parent.parent.parent.parent.jTailMainFrame());
	}

	/**
	* Creates and initializes a new {@link OpenFileDialog}.
	*/
	@Test
	void createOpenFileDialogTest() {
		assertNotNull(""The the specified name was not provided"", ApplicationConfiguration_7Test.this.parent.parent.parent.parent.parent.jTailMainFrame().testCreateOpenFileDialog(null));
	}
}
"
9edcbde7-e150-4a73-a75d-a700f3131e8f,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_8Test.java,53.11856174468994,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }
}
","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {

	/**
	* Test
	* @throws Exception should not happen
	*/
	@Test
    public void test() throws Exception {
        ResourceBundle properties = ResourceBundle.getBundle(""application-configuration"");
        String testName = properties.getString(""test"");
        Class<? extends CloseAction> expected = closeAction();
        Class<? extends OpenFileAction> expectedAction = OpenFileAction.class;
        Object[] actions = {expectedAction, expected(testName)};

        CloseAction closeAction = (CloseAction) actions[0];
        // This should be OK in a UnitTest
        assertNotNull(""The CloseAction should not be null"", closeAction);

        ResourcesBundle resources = PropertiesFactory.create(testName, closeAction);
       

        assertNotNull(""The resources bundle should not be null, "" +
                      ""it should contain the close action: ""+closeAction,
                     resources);
        assertNotNull(""The resources bundle should contain the expected OpenFileAction (not null)"",
                      resources.get(""resource""));
	
	// This should create a view model
	assertNotNull(""The view model should not be null!"", resources.getModel(""resource""));
	
	OpenFileModel openFileModel = (OpenFileModel) resources.getModel(""resource"");
	
	assertNotNull(""The view model should not be null!"", openFileModel);
	
	// This should add a listener to be triggered at opening the file dialog
	JTailMainFrame frame = (JTailMainFrame) resources.getViewModel(""main"");
	assertNotNull(""The view model should not be null!"", frame);
	assertNotNull(""The listener is null!"", frame.addIndexTypeListener(new SelectIndexTypeListener()));
	
	// This should add a listener to be triggered at closing the file dialog
	OpenFileDialog dialog = (OpenFileDialog) resources.getViewModel(""file"");
	assertNotNull(""The view model should not be null!"", dialog);
        assertNotNull(""The listener is null!"", dialog.setListener(new CloseActionImplListener()));
        
        // This should just remove the listeners!!!
	assertNotNull(""The view model should not be null!"", frame.removeIndexTypeListener(new SelectIndexTypeListener()));
    }
	
	/**
	* Implementation of ""close"" action.
	*/
	public static class CloseAction extends org.springframework.context.annotation.Description.CloseAction {

		public CloseAction() {
			this(""Close Action"");
		}
		
		public CloseAction(String description) {
			super(description);
		}
		
		@Override
		public void close() {
			super.close();
			
			if (jTailMainModel!= null) {
				((SelectIndexTypeListener) jTailMainModel.getIndexTypeListener()).onSelectIndexType(null);
			}
		}
	}
	
	/**
	* Implementation of ""OpenFile"" action using OpenFileAction.
	*/
	abstract public class OpenFileAction
		extends org.springframework.context.annotation.Description.OpenFileAction {

		@Override
		public final void open(OpenFileDialog file) {
			
			if (jTailMainModel!= null) {
			
				// This should just close
				this.close();
				
				// Return
				return;
			}
			
			System.out.println(""Application configuration: starting up of "" +
                    file.getText());
			
			/*
			// Create the view model if none was provided
			if (file.getViewModel() == null) {
				System.out.println( ""Application configuration: view model is null. "" +
                        ""Creating an instance of viewModel"");
				viewModel = new JTailMainViewModel();
			}
			*/
			
			// Create a resource bundle
			final ResourceBundle resources = PropertiesFactory.create(file.getDescription(), this);
			
			// Create and initialize the view model
			viewModel = new JTailMainModel(resources);
			
			// Now that the viewModel is set, create and add the index type listener 
			if (file.getIndexTypeListener() == null) {
				jTailMainModel.addIndexTypeListener(new SelectIndexTypeListenerImpl());
			}
		}
	}
	
	/**
	* Implementation of ""OpenFile"" action using OpenFileAction.
	*/
	abstract public class OpenFileAction
		extends org.springframework.context.annotation.Description.OpenFileAction {

		public OpenFileAction() {
			this(""Open FileAction"");
		}

		public OpenFileAction(String description) {
			super(description);
		}
	}
	
}

"
7985ba83-f039-4e88-a9a6-3f5ee9153238,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_9Test.java,34.58948516845703,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }
}
","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {
public static final String TEST_CONFIG = ""testconfig.properties"";
@Test public void testCloseAll() throws Exception {
assertNotNull(jTailMainModel());
}
}// ApplicationConfiguration_9Test.java"
c5889512-54cf-49df-93b6-0a9ea382540a,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_10Test.java,53.301546573638916,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }
}
","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {
  @Test
//		  @Description(""ApplicationConfiguration#quitAction() - this will use the quit action in main"")
		  void main() {
		        try { 
		            //ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		            //applicationConfiguration.close();
		            assertFalse(""ApplicationConfiguration#quitAction() - applicationConfiguration is not null"", applicationConfiguration instanceof ApplicationConfiguration);		        } // end try 
		        catch (Exception e) { 
		            printException(""ApplicationConfiguration#quitAction() - catch Exception while running test case"", e);
		            fail(""The test case is not executed correctly."");
		        } // end catch
	      } // end test
}

/**
* Test class for {@link JTailConfiguration_10Test#TestAppConfiguration() }
*/
public enum AppConfiguration_10Test{

/**
* This test case is testing {@link JTailConfiguration_10Test#TestAppConfiguration() }.
*/
public final class JTailConfiguration_10Test_TestAppConfiguration implements JTailCoreConfigurationTest {

/*------------------- Static fields ------------------------------*/
	private static final ResourceBundle BUNDLE
	= ResourceBundle.getBundle(""jtail-configuration"", EBCLocale);

	/*------------------- Instance fields ------------------------------*/
	@Bean
	public JTailConfiguration_10Test_TestAppConfiguration() {
	} // end of constructor

        /**
* Method to create the main application configuration.
*/
@ControlMethod
        public static ApplicationConfiguration newAppConfiguration() {
        	try {
        		assertNotNull(""Bundler is null"", BUNDLE);
        		//return new ApplicationConfiguration();

        		JTailMainModel mainModel = new JTailMainModel();
        		//JTailMainFrame mainFrame =  new JTailMainFrame(mainModel);
				//assertNotNull(mainModel);
        		assertNotNull(""Creating model should be successful"", mainModel);

				assertNotNull(""Creating model should be successful"", mainModel);

        		//JTailMainFrame mainFrame =  new JTailMainFrame(mainModel);
        		/*assertNotNull(mainModel);
        		assertNotNull(""Creating model should be successful"", mainModel);

        		assertNotNull(""Creating model should be successful"", mainModel);*/

				assertNotNull(""Creating model should be successful"", mainModel);
				return new ApplicationConfiguration();
        	}
        	catch (Exception e) {
        		throw new RuntimeException(""Should not occur!!"");
        	}
        	//assertTrue (true);
        } // end of constructor	
	@Test
//		@Description (""ApplicationConfiguration#newAppConfiguration() - this will use the main application configuration"")
		public void main() throws Exception {
			close();
		} // end of method
}
}
"
1072dacb-86e9-4a55-a885-e162af5ef4cb,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_11Test.java,53.02867102622986,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }
}
","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {

    @Test
    public void testDefaultConfiguration() {
    	BeanDefinition beanDefinition = ResourceBundle
    	       .newInstance(ApplicationConfiguration.class.getPackage().getName() +
    	        		"".properties"")
    	       .getBeanDefinition();
    	assertNotNull(beanDefinition);
    	assertEquals(ApplicationConfiguration.class.getSimpleName(),
    	        beanDefinition.getBeanClassName());
}
	
    @Test
    public void testConfiguration_fromContext_withActionList() {
        ApplicationConfiguration.JTailMainModel jTailMainModel = new ApplicationConfiguration.JTailMainModel();
        for (BeanDefinition beanDefinition : beanDefinitionContext.getTypeDeclarations()) {
            if (beanDefinition.getConstructorArgumentTypes()[0].equals(OpenFileAction.class)) {
                    break;
            }
        }
        assertNotNull(jTailMainModel);
        // test from context
        OpenFileDialog openFileDialog = new OpenFileDialog(jTailMainModel);
        jTailMainModel.setOpenFileDialog(openFileDialog);
        openFileDialog.setMainIndexType(jTailMainModel.getIndexType());
        assertNotNull(openFileDialog);
        // test with selection type listener
        SelectIndexTypeListener openFileDialog_listener = new SelectIndexTypeListener();
        jTailMainModel.setSelectionTypeListener(openFileDialog_listener);
        OpenFileDialog openFileDialog_2 = new OpenFileDialog(jTailMainModel);
        jTailMainModel.setSelectionTypeListener(openFileDialog_listener);
        assertNotNull(openFileDialog_2);
        openFileDialog_2.onShow();
    }
	
}// Test from context to default context

class OpenFileDialog {
	static final String INDEX_TYPE = ""select-index-type"";

	private JTailMainModel jTailMainModel;
	private final ResourceBundle resources = ResourceBundle
	       .newInstance(ApplicationConfiguration_11Test.class
	        		.getPackage().getName() + "".properties"");
	private final OpenFileAction openFileAction;
	final private int indexType;

	public OpenFileDialog(JTailMainModel jTailMainModel) {
		this.jTailMainModel = jTailMainModel;
		indexType = (Integer) this.getBean(""index-type"");
		openFileAction = new OpenFileAction(jTailMainModel);
	}

	public ResourceBundle getResources() {
		return resources;
	}

	public void onShow() {
		final OpenFileDialog openFileDialog = new OpenFileDialog(jTailMainModel);
		openFileDialog.setMainIndexType(indexType);
		openFileDialog.setAction(openFileAction);
		new Thread() {

			public void run() {
				try {
					openFileDialog.open();
					// wait time and then cancel it
					Thread.sleep(4000);
				} catch (Exception e) {
					// continue in try
				}
			}
		}.start();
	}

	public JTailMainModel getJTailMainModel() {
		return jTailMainModel;
	}

	public int getIndexType() {
		return indexType;
	}
}
"
d907e87e-5d1f-4656-9706-ba4e3b9009fa,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_12Test.java,52.3497576713562,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }
}
","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {

	/**
	* Test {@link OpenFileModel#createOpenFileModel()}.
	*/
	@Test
	void createOpenFileModel() {
		
		// Instantiate the model and test
		OpenFileModel model = OpenFileModel.createOpenFileModel();

		// Invoke the method createOpenFileModel()
		OpenFileDialog openFileDialog = OpenFileDialog.createOpenFileDialog(model);

		// Create an indicator interface for the model and check that it
		// was successfully created.
		OpenFileModelIndicator openFileModelIndicator = (OpenFileModelIndicator)openFileDialog.createOpenProgressIndicator();

		assertNotNull(openFileModelIndicator);

	}
	
	
	/**
	* Test creation and initialization of the menus and items for the view.
	*/
	@Test
	void viewMenu() {
		
		// Instantiate an indiator for our model.
		OpenFileModelIndicator modelIndicator = (OpenFileModelIndicator) OpenFileModel.openFileModelIndicator();
		
		// An indicator for the view.
		OpenFileDialog openFileDialog = OpenFileDialog.createOpenProgressIndicator();
		
		// Create the frame for the view.
        JTailMainFrame frame = new JTailMainFrame(modelIndicator, openFileDialog, fileMenuAction(), toolsMenuAction(), highlightAction());
	
		// Display the view in a frame.
		JTailMainFrame viewFrame = frame.show();

		// Get the model for the view.
		OpenFileModel model = modelIndicator.getModel();

		assertNotNull(model);
		
		// Test that it was successfully created and added to the frame.
		JTailMainModel jTailMainModel = new JTailMainModel(model);
		assertNotNull(jTailMainModel);
		
		// Create a menu and test that it exists.
		SelectIndexTypeListener indexLink = new SelectIndexTypeListener();
		JTailMainFrame.getModelMenu(jTailMainModel).add(indexLink);
		JTailMainFrame menu = JTailMainFrame.getModelMenu(jTailMainModel).get(0);
		assertNotNull(menu);
		
		// Test that the menu for the view is enabled.
//		assertTrue(modelIndicator.getState().getEnabled());
//		assertTrue(modelIndicator.getEnabled());

		// Add another item which should be disabled.
		SelectIndexTypeListener anotherLink = new SelectIndexTypeListener();
		JTailMainFrame.getViewMenu(model).add(anotherLink);
		assertFalse(modelIndicator.getState().getEnabled());
		assertTrue(modelIndicator.getEnabled());
		
		// Create a model and use it.
		OpenFileModel tempModel = OpenFileModel.createOpenFileModel();
		modelIndicator.setModel(tempModel);
		assertNotNull(modelIndicator.getModel());
		
		// Test that the model was updated to allow switching between models and 
		// index menus.
//		assertNotNull(tempModel.getState().getModel());
//		assertNotNull(modelIndicator.getModel().getState().getModel());

//		assertEquals(modelIndicator.getModel(),
//					(OpenFileModel)modelIndicator.getModel(),
//					""Models are different"");
		
		// Save the model back to the model.
		
		OpenFileModel model2 = modelIndicator.getModel();

		assertNotNull(model2);

		assertEquals(modelIndicator.getModel(), model2);

	}
	
}

// ApplicationConfiguration_12Test.java"
d0ef455c-78b4-474d-8dab-ccc17f2182be,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_13Test.java,52.9631667137146,stop,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
}
","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains one unit test case for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {

////@Configuration
     @Bean
    BeanApplicationConfiguration openFileConfig() {
        return new ApplicationConfiguration_13();
    }
        
//@Bean
//public JTailMainFrame openFileFrame(final OpenFileModel model, final BeanApplicationConfiguration openFileConfig) {
//	OpenFileAction openFileAction = new OpenFileAction(model, new OpenFileModel(), openFileConfig);
//	return new JTailMainFrame(openFileAction, model, new JTailMainModel());
//}
    
//@Bean
//public JTailMainFrame openFileFrame() { return openFileModel(); }
  
	//@Bean
//public JTailMainFrame openFileFrame(final OpenFileModel model) { return openFileModel(model); }
//@Bean
//public JTailMainFrame openFileFrame(final JTailMainModel model) { return openFileModel(model); }

//    BeanApplicationConfiguration() {}
//
//	@Bean
//	public JTailMainModel openFileModel() {
//	    OpenFileModel openFileModel = new OpenFileModel();
//	    openFileModel.setInitialSelectedItem(""open"");
//	    return openFileModel;
//	}
//
//	@Bean
//	public OpenFileModel openFileModel() {
//		return new OpenFileModel();
//	}


//    @Bean
//    public SelectIndexTypeListener chooseFileAction() {
//	    return new SelectIndexTypeListener();
//	}

//	@Bean
//	public SelectIndexTypeListener selectIndexTypeListener() {
//	    return new SelectIndexTypeListener();
//	}

    @Bean
    public JTailMainModel openFileModel() {
	return new OpenFileModel();
    }

    @Bean
    public OpenFileDialog openFileDialog() {
	return new OpenFileDialog(openFileModel(), openFileAction(), indexFileAction());
    }

    @Bean
    public JTailMainFrame openFileFrame(BeanApplicationConfiguration openFileConfig) {
	ResourceBundle label = ResourceBundle.getBundle(""jTail"");
	return new JTailMainFrame(new OpenFileAction(openFileData(), openFileConfig),
				label, new JTailMainModel());
    }
    
    @Bean
    public OpenFileModel openFileData() {
	return  new OpenFileModel();
    }
    
    @Bean
    public ICreateFile file(BeanApplicationConfiguration openFileConfig) {

	return newICreateFile(openFileConfig);
    }

//    @Bean
//    public ICreateFile file(BeanApplicationConfiguration openFileConfig, OpenFileAction openFileAction) {

	return newICreateFile(openFileConfig);
    }

//    @Bean
//    public ICreateFile file(BeanApplicationConfiguration openFileConfig,
//	    ConstructorParameterAction openFileAction) {

	return newICreateFile(openFileConfig);
    }


    @Bean
    public ICreateFile beSetFile(BeanApplicationConfiguration openFileConfig) {
	return newISetFile(openFileConfig);
    }

//@Bean
//public ICreateFile beSetFile(BeanApplicationConfiguration openFileconfig
//#,OpenFileAction openFileAction #,constructorParameterAction 
//openFileAction) {
//    return newISetFile(openFileconfig);
//}
	
//    @Bean
//    public ConstructorParameterAction instanceConstructorParameterAction() {
//	return new ConstructorParameterAction();
//    }
    
    @Bean
    public ICreateFile instanceCreateFile(BeanApplicationConfiguration openFileConfig,
""OpenFileAction openFileAction) {
	return newICreateFile(openFileConfig);
    }
    
    @Bean
    public ISetFileParameterAction instanceSetFileParameterAction() {
	return new IIxFileParameterAction();
    }
	

    
    /*
    @Bean
    public ObjectInstance instance(@ScopedProxyMode ObjectInstanceScope objectInstance) {
        //return objectInstance;
	return null;
    }
    
    @Bean
    public ObjectInstance instance() {
	return (ObjectInstance)null;
    }*/
    


}
"
b2cba3b9-0ea4-4602-9520-7dbd03c11ea4,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_0Test.java,54.655956983566284,length,"// LineReader.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    /**
     * Lit la ligne dont le numéro est passé en paramètre.
     * Le numéro de la ligne doit être compris entre 0 et le nombre de lignes indexées.
     *
     * @param lineNumber le numéro de la ligne à lire. Doit être compris entre 0 et le nombre de lignes indexées.
     * @return la ligne correspondant au numéro passé en paramètre
     * @throws IOException si une erreur survient pendant la lecture
     */
    public String readLine(int lineNumber) throws IOException {
        this.randomAccess.seek(this.index.getOffsetOfLine(lineNumber));
        if (this.randomAccess.getFilePointer() == this.randomAccess.length()) {
            return """";
        } else {
            return this.randomAccess.readLine();
        }
    }
}
","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains one unit test case for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains one unit test case for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {

	/**
	 * Lit la ligne dont l'indice est passé en paramètre.
	 * L'indice est compris entre 0 et le numéro de lignes.
	 * Le tampon des {@link FileIndex} ont été créés pour une nouvelle ligne.
	 *
	 * @param index illeu du numéro de ligne à lire. L'indice est compris entre 0 et le nombre de lignes.
	 * @return le numéro de ligne à lire.
	 * @throws java.io.IOException si une erreur survient pendant la lecture
	 * @throws FileNotFoundException si l'adresse du fichier n'est pas déclarée
	*/
	@Test
	public void readLine_0_0_0() throws IOException{
		// Read line
		String line;
		// Line read
		line = new String(new byte[]{0});
		JTailLogger.info(""Ligne {}"", line);
		assertTrue(line.matches(File.separator));
		assertTrue(line.matches("":""));
		assertTrue(line.matches(File.separator));
		
		FileIndex index = new FileIndex();
		int lineNumber = line.indexOf(File.separator);
		assertEquals(0, lineNumber);
		assertFalse(line.contains(""a""));
		assertFalse(line.contains(""\""""));
		assertTrue(line.contains(""\""A""));
		assertTrue(line.contains(""\""a""));
		assertFalse(line.endsWith(""\""""));
    	assertFalse(line.endsWith(""\""A""));
    	assertTrue(line.endsWith(""A""));
	}
	@Test
	public void readLine_0_0_1() throws IOException{
		// Read line
		String line;
		// Line read
		line = new String(new byte[]{0});
		JTailLogger.info(""Ligne {}"", line);
		assertTrue(line.matches(File.separator));
		assertTrue(line.matches("":""));
		assertTrue(line.matches(File.separator));
		
		FileIndex index = new FileIndex();
		// read line
		line = new String(new byte[]{0});
		
		int lineNumber = line.indexOf(File.separator);
		assertEquals(-1, lineNumber);
		assertFalse(line.contains(""a""));
		assertFalse(line.contains(""\""""));
		assertTrue(line.contains(""\""A""));
		assertTrue(line.contains(""\""a""));
		assertTrue(line.contains(""\""ab""));
		assertTrue(line.contains(""\""abA""));
		assertFalse(line.endsWith(""\""""));
    	assertTrue(line.endsWith(""\""Ab""));
		assertTrue(line.endsWith(""\""A\""a""));
		assertTrue(line.endsWith(""\""a\""a""));
		// read line
		line = new String(new byte[]{0});
		lineNumber = line.indexOf(File.separator);
		assertEquals(-1, lineNumber);
		assertFalse(line.contains(""b""));
		assertFalse(line.contains(""\""""));
		assertTrue(line.contains(""\""b""));
		assertTrue(line.contains(""\""ba""));
		assertTrue(line.contains(""\""baA""));
		assertTrue(line.contains(""\""ab\""""));
		assertTrue(line.contains(""\""ababc\""""));
		assertTrue(line.contains(""\""abcab\""""));
		assertTrue(line.contains(""\""Abc\""a""));
		assertTrue(line.contains(""\""a\""b\""A""));
		assertTrue(line.contains(""\""a\""c\""""));
		assertTrue(line.contains(""Ca\""\""caAbc\""\""CaBbabcd""));
		assertTrue(line.contains(""Ca\""abc\""\""""));
		// read line
		String lineTwo = new String(new byte[]{0});
		lineNumber = line.indexOf(File.separator);
		
		assertTrue(lineNumber>-1);
		assertEquals(lineNumber, line.length());
		lineTwo = line;
		assertEquals(lineTwo, """");
		assertFalse(line.contains(""ab""));
		assertFalse(line.contains(""\""""));
		assertFalse(line.endsWith(""\""""));
	}
	@Test
	public void readLine_0_0_2() throws IOException{
		// Read line
		String line;
		// Line read
		line = new String(new byte[]{0});
		JTailLogger.info(""Ligne {}"", line);
		assertTrue(line.matches(File.separator));
		assertTrue(line.matches("":""));
		assertTrue(line.matches(File.separator));
		
		FileIndex index = new FileIndex();
		int lineNumber = line.indexOf(File.separator);
		assertEquals(-1, lineNumber);
		assertFalse(line.contains(""a""));
		assertFalse(line.contains(""\""""));
		assertFalse(line.endsWith(""\""""));
    	assertFalse(line.endsWith(""\""A""));
    	assertTrue(line.endsWith(""A""));
			System.out.println(""\t""+line);
    	String value = new File(""."").getCanonicalFile();
		assertEquals(index.getOffsetOfLine(0), value);
		assertEquals(index.getOffsetOfLine(1), index.getOffsetOfLine(2));
	}
		
	@Test
	public void readLine_0_0_3() throws IOException{
		// Read line
		String line;
		// Line read
		line = new String(new byte[]{0});
		JTailLogger.info(""Ligne {}"", line);
		"
ef62c021-9a76-4b87-a49d-a9ba2dcfaa12,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_1Test.java,51.616758584976196,stop,"// LineReader.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    /**
     * Lit les lignes comprise entre <code>fromLine</code> et <code>toLine</code> (exclus).
     *
     * @param fromLine Le numéro de la première ligne à lire
     * @param toLine Le numéro de la dernière ligne à lire (exclus)
     * @return Les lignes du fichier dont le numéro est compris entre les deux paramètres
     * @throws IOException si une erreur survient pendant la lecture
     */
    public List<String> readBlock(int fromLine, int toLine) throws IOException {
        final int nbLines = toLine - fromLine;
        final List<String> result = new ArrayList<String>();
        final long fileLength = this.randomAccess.length();
        this.randomAccess.seek(this.index.getOffsetOfLine(fromLine));
        for (int i = 0; i < nbLines; i++) {
            final String line;
            if (this.randomAccess.getFilePointer() == fileLength) {
                line = """";
                result.add(line);
                break;
            } else {
                line = this.randomAccess.readLine();
                result.add(line);
            }
        }
        return result;
    }
}
","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains one unit test case for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains one unit test case for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {

			private boolean testWrite = true;
			
	@Test
	void test_readBlock() throws IOException {
		final int nbLines = 2000;
		try (File f = new File(""/tmp/line"")) {
			f.deleteOnExit();
			List<String> data = new ArrayList<>();
			// Test that the line reader starts at the expected size of 2 : size + 1
			for (int i = 1; i < nbLines; i++) {
				data.add(this.randomAccess.readLine());
			}
			final FileIndex index = new FileIndex();
			f.deleteOnExit();

			final List<String> expected = new ArrayList<>();
			// Test that the line reader ends with the next line
			expected.add(data.remove(data.size() - 1));
			expected.add(data.remove(data.size() - 1));
			// Test that the line reader starts at the first line, while the expected line has a different start
			final List<String> currentLine = new ArrayList<>();
			f.deleteOnExit();
			for (int i = 1; i < this.randomAccess.length(); i++) {
				currentLine.add(this.randomAccess.readLine());
			}
			assertEquals(expected, currentLine, NbTests.DISTANCE);
			// Delete file if empty
			if (f.delete() == false) {
				JTailLogger.warning( ""Error during file deletion, unable to delete File: "" + f);
			}
			
			// Write line reader in the file
			final List<String> lines = this.readBlock(0, nbLines);
			assertEquals(lines, nbLines, nbLines);

			f.deleteOnExit();
			// Delete the writer in the file
			f.delete();
			f.delete();
			
			// Test that the line reader ends with the next line
			currentLine = new ArrayList<>();
			currentLine.add(data.remove(data.size() - 1));
			int actual = data.remove(data.size() - 1);

			assertEquals(data.size(), actual);
			assertEquals(lines, currentLine);

			expected = data;
			// Check that the LineReader has all the files as expected
			expected.toArray(new String[0]);
			List<String> read = this.readBlock(0, nbLines + 1);

			assertEquals(expected, read);

			read = this.readBlock(0, nbLines);

			for (String line : lines) {
				assertTrue(read.contains(line));
			}

			assertEquals(nbLines, lines.size());
			
		}			
	}
}"
