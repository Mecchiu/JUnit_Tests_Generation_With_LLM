ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
d76a94f6-fa75-4ff6-be42-719b64659f1b,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java,49.86266016960144,stop,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    /**
     * Abre o  armaz�m seguro (cacerts).
     *
     * @throws Exception
     */
    public KeyStore openTransportStore() throws Exception;
}
","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {

    private final static Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);
    
    /**
     * Test method for {@link br.com.jnfe.base.TransportKeyStoreBean#openTransportStore()}.
    */
    @Test
    public void testOpenTransportStore() throws Exception {
    	
		// Valida o sistema que ser�o utilizado por NFe
			KeyStore transstore = SecurityUtils.transStore;
			
		// Verifica o sistema que com o key manager esse
        KeyManagerFactory keyMf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        int defaultDepth = keyMf.getDefaultKeyManager().getKeyLoadPathname.charAt(0);
        if (defaultDepth!= 1) {
            LOG.error(""Sistema de transmiss�o se n�o acept�o o sistema de acertar. Depende da chave especifica"");
        }
			
        // Verifica o sistema de ssl.
        try {
        	LOG.debug(""Verifica esse sistema com SSL"");
        	keyMf.init(null, null, null);
        	
            LOG.debug(""Teste 1"");
			
            // Verifica o sistema de ""keyStore"".
            KeyStore ss = SecurityUtils.transStore;
			
            // Verifica o sistema de ssl.
            assertNotNull(ss);
            LOG.debug(""Passagem completa para associcao com sistema "");
            logKeyStore(ss);
            
            assertEquals(""Sistema de ssl é atualizado com 1 registro"", defaultDepth, keyMf.getKeyManagers().length);
            assertTrue(""Sistema de ssl é instalado"", ss.isKeyEntry(""keyStore.jceks""));
            
            LOG.debug(""Teste 2"");
            keyMf.init(null, null, null);
            
            assertNull(ss);
            
        } catch (Exception e) {
        	LOG.error(""Erro ao iniciar associa��o com sistema de ssl."",e);
			
			assertTrue(""Sistema de ssl é inacesso"", ss == null);
			assertTrue(""Sistema de ssl é inacesso"", keyMf == null);
		}
        
    }
	private void logKeyStore(KeyStore s) {
		
		LOG.debug(""Logdo todos os caracteres especificos para o keyStore"");
		
		for (String c : s.aliases()) {
        	LOG.debug(c + "" "" + s.getCertificate(c).getSubjectDN());
        }
		LOG.debug(""Logdos seu certificados e algos certifis�es de ou das chaves associados."");
		LOG.debug(""Este sistema foi associado ao sistema de "" + s.getCertificate(null).getSubjectDN());
		LOG.debug(""O sistema dará um certificado ao sistema de acertar"");
		LOG.debug(""O sistema de senhas fica removido"");
	}
}
"
0c23d2f6-a3ba-4d97-a568-b7d9f2d269f3,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java,29.955360651016235,stop,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    /**
     * Abre o gerenciador de chaves do armaz�m de transporte.
     *
     * @throws Exception
     */
    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;
}
","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {
/** Test method para cria o manager de chaves do armaz�m de transporte. */
    @Test
    public void testOpenTransportKeyManagerFactory() throws Exception {
        Logger log = LoggerFactory.getLogger(""test"");
        KeyManagerFactory kmf = SecurityUtils.buildKeyManagerFactory(log);
        KeyManagerFactory kmf2 = SecurityUtils.buildKeyManagerFactory(log);
        assertNotNull(kmf);
        assertNotNull(kmf2);
    }
		/** Test method para abri o gerenciador de chaves do armaz�m de transporte. */
    @Test
    public void testCloneKeyManagerFactory() throws Exception {
        Logger log = LoggerFactory.getLogger(""test.clone"");
        KeyManagerFactory kmf = SecurityUtils.buildKeyManagerFactory(log);
        KeyManagerFactory kmf2 = SecurityUtils.buildKeyManagerFactory(log);
        assertNotNull(kmf);
        assertNotNull(kmf2);
        KeyManagerFactory kmf3 = kmf.clone();
        assertNotNull(kmf3);
        assertNotNull(kmf3);
        assertEquals(kmf, kmf3);
        assertEquals(kmf2, kmf3);
        KeyManagerFactory kmf4 = null;
        KeyManagerFactory kmf5 = null;
    }
		/** Test method o construtor da classe {@link InitialingBean}.*/
    @Test
    public void testSetBean() throws Exception {
        Logger log = LoggerFactory.getLogger(""test"");
        KeyManagerFactory kmf = SecurityUtils.buildKeyManagerFactory(log);
        KeyManagerFactory kmf2 = SecurityUtils.buildKeyManagerFactory(log);
        kmf2.init(null);
        kmf = SecurityUtils.buildKeyManagerFactory(log);
        log.info(""Clone: {}"", kmf);
        kmf = SecurityUtils.buildKeyManagerFactory(log);
        kmf3 = SecurityUtils.buildKeyManagerFactory(log);
        kmf4 = SecurityUtils.buildKeyManagerFactory(log);
        kmf5 = SecurityUtils.buildKeyManagerFactory(log);
        kmf = kmf3.clone();
        kmf2 = kmf3.clone();
        assertTrue(!isEquals(kmf, kmf2));
        assertTrue(!isEquals(kmf, kmf4));
        assertTrue(!isEquals(kmf4, kmf2));
        kmf = kmf4.clone();
        kmf = kmf3.clone();
        kmf3 = kmf;
    }

}
"
