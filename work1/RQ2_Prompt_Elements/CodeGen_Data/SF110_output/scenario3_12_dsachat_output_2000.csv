ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
226eef96-6f55-4da8-90cb-63330c0aca19,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,49.94200277328491,length,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    /**
     * the game master should not use silent mode.
     * He has to know all results
     *
     * @return false
     */
    public boolean silent();
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
/**
		* Tests that no changes should be made after creation.
		* 
		* @throws java.lang.Exception
		*/
		@Test
    void nothingMade()
    {
        final InternalGmHeroFrame f = new InternalGmHeroFrame();
        assertTrue(f.getVisible());
    }
		/**
		* Tests that a changes made after creation should invalidate existing tests.
		*
		*/
		@Test
    void testCreationChange()
    {
        final InternalGmHeroFrame f = new InternalGmHeroFrame();
        f.creating(
            true,
            null, // we never pass a selectionModel as it will never be used
            null, // we DON'T pass a treeSelectionModel as it is used for testing.
            new Dimension(200,200)); // we DON'T pass a contentPanel to test.
    }
		/**
		* Tests that only one unit test for this test class should be run for each iteration of the ""for loop"".
		*
		* @throws java.lang.Exception
		*/
		@Test
    void singleUnitTest() {
        
        final InternalGmHeroFrame f = new InternalGmHeroFrame();
        final boolean[] done = new boolean[1];
        
        for(int i = 0; i < 100; i++)
        {
            done[0] = true;
            f.creating(true, null, null, new Dimension(300,300), new Vector<Hero>());
            assertTrue(done[0]);
            done[0] = true;
            try
            {
                f.creating(true, null, null, new Dimension(300,300), new Vector<Hero>());
                assertFalse(done[0]);
            }
            catch(Exception e)
            {
                done[0] = true;
            }            
        }
    }
		/**
		* Tests that the contentPane is updated with the changes
		* after creating a game and asking for some changes.
		*
		* @throws java.lang.Exception
		*/
	@Test
    void update()
	    throws Exception
    {
        final InternalGmHeroFrame f = new InternalGmHeroFrame();
        f.creating(true, null, null, new Dimension(300,300), new Vector<Hero>());
        final JPanel panel = f.getContentPane();
        final JPanel contentPanel = ((JPanel)panel.getContentPane());
        final JLabel label1 = new JLabel("">1.0"");
        final JLabel label2 = new JLabel("">=1.0"");
        final JLabel label3 = new JLabel("">0.4"");
        
        final GridBagLayout gridBagLayout = new GridBagLayout();
        final GridBagConstraints gridBagConstraints;
        
        
        contentPanel.setLayout(gridBagLayout);
        contentPanel.add(label1, null); 
        //contentPanel.add(label2, null);
        contentPanel.add(label3, null);
        contentPanel.add(new JLabel(""""), null);
        //contentPanel.add(new JLabel(""""), null);
        contentPanel.add(new JSpinner(new SpinnerNumberModel(1.0, 2.0, 10.0, 1.0)), null);
        contentPanel.add(new JCheckBox(), null);
        contentPanel.add(new JRadioButton(""""), null);
        contentPanel.add(new JTree(new MyJTree()), null);
        contentPanel.add(new JScrollPane(new MyJScrollPane()), null);
        contentPanel.add(new JPanel(new GridLayout(1, 2)), null);
        
        gridBagConstraints = new GridBagConstraints();
        contentPanel.add(panel, gridBagConstraints);
        f.contentPaneChanged();
        
        final JPanel panelChanged = f.getContentPane();
        
        panelChanged.add(new JButton(""Ok""), null);
        panelChanged.add(new JButton(""Next""), null);
        panelChanged.add(new JButton(""Previous""), null);
        
        assertEquals(3, panelChanged.getComponentCount());
        
        f.update(false);
        f.update(true);
        
        f.deleting(new TreePath(new Object[]{5}));
        assertEquals(12, panelChanged.getComponentCount());
        assertEquals(12, contentPanel.getComponentCount());
    }
	/**
	* This contains a combobox with buttons.
	* 
	* @author berns
	*/
	
	public class MyJComboBox extends JComboBox
    {
		/* (non-Javadoc)
         * @see javax.swing.JComboBox#addItem(java.lang.Object)
         */
        public void addItem( Hero p )
        {
            addItem( new Vector<Hero>(1, p));
        }

        /* (non-Javadoc)
         * @see javax.swing.JComboBox#removeItemAt(int)
         */         
        public boolean removeItemAt( int index )
        {
            return removeItem( new Vector<Hero"
64d7ba60-01ba-4f36-b520-b664c83d0c78,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java,61.9571647644043,length,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     *
     * @return the result as string
     */
    public String roll();
}
","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {

    /**
     * test first unit
     */
    @Test
    public void testFirstUnit() {
        assertEquals(Challenge.challenge, Challenge.roll());
    }
	
    /**
     * Unit test for the {@link Challenge#roll()} method.
     *
     * @param args test case parameters
     */
    @Test
    public void testRollClass(Object[] args) {
        System.out.println(""challenge.roll()"");

        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), new Hero(""Test""), new Talent(""Talent""));

        int result=challenge.roll();

        assertEquals(Challenge.results[0], result);
    }

        /*  Test for the roll() method of the {@link Challenge} class.
         *  This method should check a test object of Challenge for correctness.
         *  It should return the final value of the roll().
         *  There must be at least ONE {@link Hero} to execute this test.
         *
         *  @author bernshausen
         */
    @Test

    public void testRoll() {

        System.out.println(""test for roll()"");

        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), new Hero(""Test""), new Talent(""Talent""));

        Challenge result=challenge.getResult();

        System.out.println(""test for getResult()"");

        assertEquals(challenge.getResult(), result);

        System.out.println(""test for roll()"");
    }

        /*  Test for the roll() method of the {@link Challenge} class.
         *  This method should check a test object of Challenge for correctness.
         *  It should return the final value of the roll().
         *  There must be at least ONE {@link Hero} to execute this test.
         *
         *  @author bernshausen
         */

    @Test

    public void testRolleiStadt() {
        System.out.println(""test for roll()"");

        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), new Hero(""Test""), new Talent(""Talent""));

        int result=challenge.roll();

        System.out.println(""test for getResult()"");

        assertEquals(Challenge.results[0], result);

        System.out.println(""test for roll()"");
    }

        /*  Test for the roll() method of the {@link Challenge} class.
         *  This method is supposed to get the final result. For it to
         *  get the final result, the final result should be the result of the roll().
         *  It should return the result of the roll().
         *  There must be at least ONE {@link Hero} to execute this test.
         *
         *  @author bernshausen
         */
    @Test

    public void testRollIntoResult() {
        System.out.println(""test for roll()"");

        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), new Hero(""Test""), new Talent(""Talent""));

        int result=challenge.roldef();

        System.out.println(""test for getResult()"");

        assertEquals(result, challenge.getResult());

        System.out.println(""test for roll()"");
    }

    /**
     * Unit test for the {@link Player} class and its get/set methods.
     */
    @Test
    public void testGetSetPlayer() throws ClassNotFoundException {
        Challenge challenge=new Challenge(null, null, null);
        challenge.setPlayer(""Player"");

        assertEquals(""Player"", challenge.getPlayer());
        challenge.setPlayer(""Player2"");
        assertEquals(""Player2"", challenge.getPlayer());
    }

    /**
     * Unit test for the {@link Hero} class and its get/set methods.
     */
    @Test
    public void testGetSetHero() throws ClassNotFoundException {
        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), null, null);
        challenge.setHero(""hero"");

        assertEquals(""hero"", challenge.getHero());
        challenge.setHero(""hero2"");
        assertEquals(""hero2"", challenge.getHero());
    }

    /**
     * Unit test for the {@link Hero} class and its get/set methods.
     */
    @Test
    public void testGetSetTalent() throws ClassNotFoundException {
        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), null, new Hero(""Test2"", new Weapon(false), ""Talent2""));
        challenge.setTalent(""talent"");

        assertEquals(""talent"", challenge.getTalent());
        challenge.setTalent(""talent2"");
        assertEquals(""talent2"", challenge.getTalent());
    }

    /**
     * Unit test for the {@link Hero} class and its get/set methods.
     */
    @Test
    public void testGetSetWeapon() throws ClassNotFoundException {
        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), null, new Hero(""Test2"", new Weapon(false), ""Talent2""));
        challenge.setWeapon(""weapon"");

        assertEquals(""weapon"", challenge.getWeapon());
        challenge.setWeapon(""weapon2"");
        assertEquals(""weapon2"", challenge.getWeapon());
    }

    /**
     * Unit test for the {@link Hero} class and its get/set methods.
     */
    @Test
    public void testGetSetTalent2() throws ClassNotFoundException {
        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), null, null);
        challenge.setTalent2(""talent2"");

        assertEquals(""talent2"", challenge.getTalent2());
        challenge.setTalent2(""talent2r"");
        assertEquals(""talent2r"", challenge.getTalent2());
    }

    /**
     * Test the {@link Hero} class's get/set methods.
     */
    @Test
    public void testGetSetWeapon2() throws ClassNotFoundException {
        Challenge challenge=new Challenge(new Hero(""Test"", new Weapon(false), ""Talent""), null, null);
        challenge.setWeapon2(""weapon2"");

        assertEquals(""weapon2"", challenge.getWeapon2());
        challenge.setWeapon2(""weapon2r0"");
        assertEquals(""weapon2r0"", challenge.getWeapon2());
    }

    /**
     * Unit test for an empty {@link Hero} class, which is used for its unit tests.
     */
    @Test
    public void testEmptyHero() {
        Hero hero = new Hero("""", null);
        assertFalse(hero.hasWeapon());
        assertEquals(0, hero.getAttributesSet().size());
    }
	
    /**
     * Unit test for an empty class, which is used for its unit tests.
     */
    @"
7e91c7f3-cedb-41fe-bc37-8476d13677ab,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java,60.81904625892639,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    /**
     * roll a dice with variable sides
     *
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides);
}
","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains one unit test case for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {

	/**
	 * Create a challenge.
	 */
	public Challenge_1Test() {
		UnitUnit unit = new UnitUnit();
		unit.setX(), unit.getY(), unit.getZ();
		unit.setSide(1), unit.setHead(2), unit.setType(3), unit
				.setAttribution(4), unit.setMaxHealth(5), unit.setMaxLife(6), unit
				.setCombatSpeed(7), unit.setWeapon(8), unit.setTalent(9);
		hero1 = unit;
	}
	

	 /**
	  * The <b>Weapon</b> of unit ""unit1"" of course. A Unit has 5 weapon slots.
	  */
	@Test
	public void testDice() {
		Hero.testDice();
		
	}
	
	
	/**
	 * Create a new battle for the <b>T</b> object <b>t</b>.
	 * The <b>T</b> represents a talent.
	 *
	 * @param t is the <b>T</b> object to be created.
	 */
	@Test
	public void testCreateTalent(Talent t) { // create a ""talent"", not a weapon
		assertEquals(true, t.hasWeapon());
	}
	
	/**
	 * Test {@link Challenge#createNewTalent(talent)}.
	 *
	 * @param t is the unit object.
	 * @return the created talent.
	 */
	@Test
	public static void testCreateNewTalent(Talent t) {
		Weapon w = Hero.testCreateNewTalent(t);
		assertNotNull(w);
	}
	
	/**
	 * Test the effect of <b>t</b> when <b>w</b> has a skill.
	 */
	@Test
	public void testAddSkill() { // test the effect of <b>w</b> when <b>t</b> has a skill
		weaponSkill();
	}
	
		


	/**
	 * Unit unit.
	 */
	@Test
	public void testEquals() { // check the equals method
		Unit unit = new Unit();
		assertEquals(""=="", unit.equals(unit));
		unit.testEquals(unit);
		assertFalse(""!=="", unit.equals(new Unit()));
	}
	

	/**
	 * Test if <b>w</b> is assigned to the unit's head<br>
	 * Unit: <b>w</b> is assigned to the unit's head.
	 */
	@Test
	public void testHeadAssignment() { // test the head assignment after unit has been assigned
		Unit unit = Hero.testCreateNewElement();
		unit.setHead(2);
		// unit.testHeadAssignment(unit);

		hero1.testHeadAssignment(unit); // unit must have the Head set
		Unit head = unit.getHead(); // the Unit may then have the Head itself unchanged
		hero1.testHeadAssignment(head); // unit and head should have the same Head

		// test adding a new head, unit's head must be the same as Head
		head.addChild(unit);
		unit.testHeadAssignment(unit);	
	}

	/**
	 * Unit skill.
	 */
	@Test
	public void testSkill() { // test the effect of <b>t</b> when <b>w</b> has a skill
		skillSkill();
	}
	

		
}// Challenge_1Test.java"
4f7a38bc-c006-4b07-8ba0-289ae320d458,/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java,62.06286382675171,stop,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 *
 * @author bernshausen
 */
public class Hero implements Serializable {

    /**
     * return the value of the attribute described by the shortcut
     *
     * @param shortcut the shortcut of the attribute
     * @return the value
     */
    public int getAttrValue(String shortcut);
}
","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains one unit test case for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {
/**
		* Test of the getAttrValue method, of class Hero.
		*/
		@Test
		public void testGetAttrValue() {
	}
	
	/** 
	* Test of getAttributes method, of class Hero. 
	* and
	** @throws Exception
	*/
	@Test
	public void testGetAttributes() throws Exception {
        /*
        System.out.println(""getAttributes"");
        int i=1;
        String short_name = ""test"";
        String test_short_name = ""test"";
        int j=3;
        String test = ""test"";
        String test2=""test"";

        //System.out.println(test);
        //System.out.println(test);//this is error because a short_name should not be part of the short name:
        //System.out.println(""1. short_name(""+short_name+"")"");
        //System.out.println(""5. short_name(""+short_name+"")"");
	System.out.println(1. getAttrValue(short_name));
        String value = ""5.getAttrValue(short_name)"";//this does do the castings because it uses int
        System.out.println(5.getAttrValue(short_name));
        System.out.println(value);//-1.getAttrValue(short_name)//we have a short name, we should get it from short_name in value
        System.out.println(1+5.getAttrValue(short_name));
 */
        
        //System.out.println(""1. getAttrValue("" + short_name + "")"");
	Vector names=new Vector();
	Vector values=new Vector();
	    
	Iterator it = names.iterator();
	Element element;
	String name;
	String s=String.valueOf(i++);
	while(it.hasNext()){
		element = (Element) it.next();
		
		name = element.attributeValue(""short_name"");//this does do the castings because it uses int
		name = element.attributeValue(""name"");
		System.out.println(""test "" + name + "" is "" + element.attributeValue(""attrs_str""));
		
		if(element.attributeValue(""attrs_str"")==null){
			break;
		}else{
			System.out.println(name + "": <""+element.attributeValue(""attrs_str"")+"">"");	
		}
	 }

	//try to find all attributes of the short name 
	//System.out.println(""2. getAttrValue(""+short_name+"")"");		



	int value=0;
	
	values.addElement( s );
	names.addElement(Short.toString(short_name) + "": "" + s );
	names.addElement( ""test: "" + test );
	name =Short.toString(short_name);//this does do the castings because it uses int
//		names.addElement( name );//this does do the castings because it uses int
	while(names.size()>0){
        	
        	  value=0;
//        	  value = Integer.parseInt(names.elementAt(0).getLocalName());
		value = Integer.parseInt(values.elementAt(0).getLocalName() + "":"" + values.elementAt(0).getText());
        	if(Short.parseShort(names.elementAt(0).getSimpleValue())==short_name){
        		name = names.get( 0 ) ;
        		break;
			}
		}	
	}

	
	System.out.println(""3. getAttrValue(""+short_name+')');//this prints for the short name value
	System.out.println(""---"");	
		
		try{
			System.out.println(Integer.parseInt(value) );
		}catch(Exception e){
			//caught exception while geting value
		}



	}





	/**
	* Test of hasAttributes method, of class Hero.
	* test case 1 
	* and
	** @throws Exception
	*/
	@Test
	public void testIsAttributes() throws Exception {
	//test case 1
	
        System.out.println(""hasAttribute(short_name)"");
	
        Vector names=new Vector();
        names.addElement(Short.toString(short_name));

        Vector values;
	
		values=new Vector();
		
        Element element;
	
        Iterator it = names.iterator();
	Iterator it2 = values.iterator();

		while( it.hasNext()) {
			element = (Element) it.next();
			
			System.out.println(element.attributeValue(""short_name""));
			System.out.println(values.elementAt(1));
				
		}

	}



	}
	/** 
	* Test of setCharacteristicValue method, of class Hero. 
	*/
	/* 
	{ 
  	
 		System.out.println(""setCharacteristicValue(Characteristic, double)"");
 		System.out.println(""setCharacteristicValue(short_name, double)"");
 		System.out.println(""setCharacteristicValue(char, double)"");
 		System.out.println(""setCharacteristicValue(char[], double)"");
 		System.out.println(""setCharacteristicValue(double, double)"");

 		
 		Vector attributes=new Vector();
		
		System.out.println(""attributes"");
		attributes.addElement( Double.toString(Characteristic));//this does do the castings because it uses double
		attributes.addElement( Double.toString(Characteristics[0]));
		System.out.println(attributes.size());
		
		attributes.addElement(""char"");
		System.out.println(attributes.size());
		System.out.println(""setCharacteristicValue(Characteristic, double)"");
  		
		System.out.println(""setCharacteristicValue(char[], double)"");
  		
  		System.out.println(""attributes.size()"");
 		System.out.println(attributes.size());
 		System.out.println(""System.out.println(attributes[0])"");
	}
 */

"
