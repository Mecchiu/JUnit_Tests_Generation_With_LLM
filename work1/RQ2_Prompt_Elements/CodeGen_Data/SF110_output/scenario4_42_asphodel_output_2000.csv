ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
f18b842b-ab40-4748-93c1-e57679acef44,/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser.java,59.29348587989807,stop,"// HtmlContentParser.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;

/**
 * @author : sunwj
 * @since 0.1
 *        Date: Mar 31, 2007
 *        Time: 10:03:07 PM
 *        <p/>
 *        html content parser using Jericho
 * todo does it need to devided into 2 different implementation?
 */
public class HtmlContentParser implements StringContentParser, StreamContentParser {

    private static Log log = LogFactory.getLog(HtmlContentParser.class);

    /**
     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....
     * @return plain text without extra tags or elements
     */
    public String extractPlainText(String textContent) throws ContentParserException;

    /**
     */
    public String extractText(Reader reader) throws ContentParserException;

    public String extractText(InputStream inputStream) throws ContentParserException;

    public String extractText(URL url) throws ContentParserException;
}
","// HtmlContentParserTest.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParserTest {","// HtmlContentParserTest.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParserTest {
static final String contentFileName = ""/content/content.xml"";
		static final String contentFileLocation = ""content/content.xml"";

		@Test
		public void test1() throws Exception {
			Source src = new Source(getClass().getClassLoader().getResourceAsStream(contentFileLocation));
			assertNotNull(src);
			try {
				HttpParser parser = new HtmlContentParser(src);
				String extracted = parser.extractPlainText(""<html></html>"");
				assertEquals(""<html>"", extracted);
				assertFalse(parser.hasContentOfType(Source.Tag));
				assertFalse(parser.hasContentOfType(Source.Attributes));
				assertFalse(parser.hasContentOfType(Source.Text));

				src = new Source(getClass().getClassLoader().getResourceAsStream(contentFileLocation));
				parser = new HtmlContentParser(src);
				extracted = parser.extractPlainText(""<html><a href=\""http://www.asphodes.org\"">http://www.asphodes.org</a></html>"");
				assertEquals(""<html><a href=\""http://www.asphodes.org\"">http://www.asphodes.org</a></html>"", extracted);
				assertFalse(parser.hasContentOfType(Source.Tag));
				assertTrue(parser.hasContentOfType(Source.Attributes));
				assertFalse(parser.hasContentOfType(Source.Text));

				src = new Source(getClass().getClassLoader().getResourceAsStream(contentFileLocation));
				parser = new HtmlContentParser(src);
				extracted = parser.extractPlainText(""<html><a href=\""\"" type=\""text/html\"">text</a></html>"");
				assertEquals(""<html><a href=\""\"" type=\""text/html\"">text</a></html>"", extracted);
				assertTrue(parser.hasContentOfType(Source.Tag));
				assertFalse(parser.hasContentOfType(Source.Attributes));
				assertFalse(parser.hasContentOfType(Source.Text));

				src = new Source(getClass().getClassLoader().getResourceAsStream(contentFileLocation));
				parser = new HtmlContentParser(src);
				extracted = parser.extractPlainText(""<html><a data-type=\""text/html\"">text</a></html>"");
				assertEquals(""<html><a data-type=\""text/html\"">text</a></html>"", extracted);
				assertFalse(parser.hasContentOfType(Source.Tag));
				assertTrue(parser.hasContentOfType(Source.Attributes));
				assertFalse(parser.hasContentOfType(Source.Text));

				src = new Source(getClass().getClassLoader().getResourceAsStream(contentFileLocation));
				parser = new HtmlContentParser(src);
				extracted = parser.extractPlainText(""<html>text
<img src='"" 
		+ getClass().getClassLoader().getResourceAsStream(""img/jquery.min.png""))
		
				+ ""</img>
		
x</html>"");
				assertEquals(""<html>text
<img src='"" 
		+ getClass().getClassLoader().getResourceAsStream(""img/jquery.min.png""))
		
			+ ""</img>
		
x</html>"", extracted);
			}finally {
				parser.dispose();
			}


    }
		
}
"
