ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
507818c7-1e24-4b17-a4b3-dc7c9da93e99,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java,56.85740637779236,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the maximal health
     */
    public int _getMaxLP();
}
","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {
/**
		 * Test this class in JUnit framework (i.e. JUnit testng)
		 */

	@SuppressWarnings(""unused"")
		private static final Logger log = Logger.getLogger(SimpleCombatant_0Test.class.getName());

        @Test
        public final void test_0Constructor() {
            // we can't create a combatant using an empty area or side
            try {
                new SimpleCombatant();
                fail();
            }
            catch (IllegalStateException e) {
				// expected
            }
        }

        @Test
        public final void test_00GetMaxLP() {
            // the max value of HP, i.e. the maximal number of hits a character can hit
            assertEquals(36, new SimpleCombatant()._getMaxLP().intValue());
        }

        // this is the test case that is run inside the tests
        protected final SimpleCombatant() {}

        public @CombatantData final static String ID = ""ID"";
        public final void test_01GetMaxLP() {
        	Combatant s1 = new SimpleCombatant(ID, CharacterClass.getClassification(CombatantSide.RIGHT));
            assertEquals(CombatantSide.RIGHT.getMaxLp(), s1.getMaxLP().intValue());
        }
        
        public final void test_10IsInitialized() {
        	Combatant s1 = new SimpleCombatant(ID, CombatantSide.RIGHT);
            assertTrue(s1.isInitialized());
        }
    }
    
	public static Combatant toCombatantObj(final UnitFactory unitFactory) {
        return unitFactory.makeCombatant(new SimpleCombatant_0Test());
	}
	
	public static class Combatant_0Test implements Combatant.Observer<CombatantSide>, Comparable<Combatant_0Test> 
	{

		/**
		 * Default constructor
		 */
        public Combatant_0Test() {
			// empty default constructor
		}

		/**
		 * Default constructor for CombatantType
		 * @param side the side to initialize the unit from
		 * @throws IllegalArgumentException if the side is null or not supported
		 */
        public Combatant_0Test(final CombatantSide side) {
			assertNotNull(side);
			_combatantSide = side;
		}

		/** {@inheritDoc} */
		@Override
		public int compareTo(final Combatant_0Test otherValue) {
			if (_combatantSide == null) {
				throw new IllegalArgumentException(""CombatantSide is null, which should not happen"");
			}
			else if (<warning descr=""Condition 'otherValue._combatantSide == null'"">otherValue._combatantSide == null</warning>) {
				throw new IllegalArgumentException(""'otherValue' should not happen"");
			}
			else if (_combatantSide == otherValue._combatantSide) {
				return 0;
			}
			else {
				return -1;
			}
		}

		@Override
		public int hashCode() {
            // not necessary for now
			return 0;
		}

		@Override
		public boolean equals(final Object x) {
			return x instanceof Combatant_0Test && (_combatantSide == null? (x instanceof Combatant) : _combatantSide == null? (x instanceof CombatantSide) : getClass().equals(((Combatant_0Test)x).getClass()));
		}

		@Override
		public Set<CombatantSide> getSectors() {
			// we don't support sector objects
			return null;
		}

		protected final CombatantSide _combatantSide;

		protected final Combatant _combatant;

		protected static final Set<CombatantSide> COMBATANT_SIDES = new HashSet<>();
		static {
			COMBATANT_SIDES.add(CombatantSide.RIGHT);
		}

		static {
			Combatant_0Test[] unitToClass = Combatant_0Test.class.getEnumConstants();
			for (Combatant_0Test unit: unitToClass) {
				CombatantSide side = unitFactory().isInSector(unit)? CombatantSide.RIGHT : CombatantSide.LEFT;
				CombatantCombatant _combatantCombatant = new CombatantCombatant(side);
				Combatant_0TestImpl_0.COMBATANT_SIDES.add(_combatantCombatant.getCombatantSide());
			}
		}

		/**
		 * Sole constructor
		 * @param side the side to initialize the unit from, which should not be passed as null
		 */
		public Combatant_0Test(final CombatantSide side) {
			assertNotNull(side);
			_combatantSide = side;
			_combatant = Combatant_0TestImpl.toCombatantObj(this);
		}

	    @Override
		public void combatantInitialized(final CombatantState _combatantState) {
			// if the state was changed on the side it is no longer valid.
			if (CombatantSide.RIGHT == _combatant.getCombatantSide()) {
				return; // do nothing
			}

			// this test should not be called after the side that was locked was created
			for (CombatantSide side: Combatant_0TestImpl.COMBATANT_SIDES ) {
				if (CombatantSide.RIGHT == side) {
					_combatantState.setResolveMode();
					break; // break; we'll create a new side and continue
				}
			}
		}
        
        private static final String ID = ""ID"";
        public final void test_01GetMaxLP() {
        	Combatant s1 = new Combatant_0Test(CombatantSide.RIGHT);
            assertEquals(CombatantSide.RIGHT.getMaxLp(), s1.getMaxLP().intValue());
        }
        
        public final void test_10IsInitialized() {
        	Combatant s1 = new Combatant_0Test(CombatantSide.RIGHT);
        	assertTrue(s1.isInitialized());
        }
        
        public @CombatantData final static String ID = ""ID"";
		public final void test_11IsInitialized() {
			"
8ca5749d-99a2-45f0-a878-15e532de5922,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java,55.23904609680176,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP();
}
","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains one unit test case for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {
/**
		 * Test of getCurrentLP method, of class SimpleCombatant.
		 * @throws Exception if something goes wrong within the method, including any exception of
		 * its own.
		 */
        @Test
		public void test_getCurrentLP_getCurrentLP() throws Exception {
				SimpleCombatant instance = new SimpleCombatant();
				this.check(instance, _getCurrentLP());
		}

		/**
		 * Test of getCurrentLP method, of class SimpleCombatant.
		 * @throws Exception if something goes wrong within the method, including any exception of
		 * its own.
		 */
        @Test
		public void test_getCurrentLP_nonComparable() throws Exception {
				SimpleCombatant instance = new SimpleCombatant();
				instance.setSectorBonus(SectorBonus.SECTOR_BONUS_ONE);
				assertThrows(() -> instance.getCurrentLP(), IllegalArgumentException.class);
		}

		/**
		 * Test of getCurrentLP method, of class SimpleCombatant.
		 * @throws Exception if something goes wrong within the method, including any exception of
		 * its own.
		 */
        @Test
		public void test_getCurrentLP_null() throws Exception {
				SimpleCombatant instance = new SimpleCombatant();
				this.check(instance, null);
		}

		/**
		 * Test of getCurrentLP method, of class SimpleCombatant.
		 * @throws Exception if something goes wrong within the method, including any exception of
		 * its own.
		 */
	    @Test
		public void test_getCurrentLP_isComparable() throws Exception {
		SimpleCombatant instance = new SimpleCombatant();
		assertEquals(0, instance._getCurrentLP(), 0.0);
		instance.setSectorBonus(SectorBonus.SECTOR_BONUS_ONE);
		assertEquals(1, instance._getCurrentLP(), 0.0);
		setSectorBonusToNull(instance);
		assertEquals(1, instance._getCurrentLP(), 0.0);
		assertEquals(_getCurrentLP(), 0);
	}

	/**
	 * Test of setSectorBonus method, of class SimpleCombatant.
	 * @throws Exception if something goes wrong within the method, including any exception of
	 * its own.
	 */
	@Test
	public void test_setSectorBonus() throws Exception {
		SimpleCombatant instance = new SimpleCombatant();
		assertEquals(0, instance.getSectorBonus(), 0.0);
		assertTrue(instance.getSectorBonus() == null);
		instance.setSectorBonus(SectorBonus.SECTOR_BONUS_ONE);
		assertEquals(1, instance.getSectorBonus(), 0.0);
		assertFalse(instance.getSectorBonus() == null);
		assertTrue(instance.getSectorBonus()!= SectorBonus.SECTOR_BONUS_NONE);
	}

	/**
	 * Test of getObserver method, of class SimpleCombatant.
	 * @throws Exception if something goes wrong within the method, including any exception of
	 * its own.
	 */
	@Test
	public void test_getObserver() throws Exception {
		SimpleCombatant instance = new SimpleCombatant();
		instance.addObserver(new SimpleCombatantObserver(true));
		CombatantObserver instanceExpected = new SimpleCombatantObserver(true);
		CombatantObserver instanceActual = instance.getObserver();
		assertEquals(true, instanceActual.isEnabled());
		assertEquals(instanceExpected, instanceActual);
	}

			/**
		 * Test of isAttackable method, of class SimpleCombatant.
		 * @throws Exception if something goes wrong within the method, including any exception of
		 * its own.
		 */
		@Test
		public void test_isAttackable() throws Exception {
				SimpleCombatant instance = new SimpleCombatant();
				assertEquals(false, instance.isAttackable());
				instance.setAttackable(true);
				assertEquals(true, instance.isAttackable());
				assertEquals(true, instance.isAttackable());
				assertEquals(true, instance.isAttackable());
				instance.setAttackable(false);
				assertEquals(false, instance.isAttackable());
		}

    private static void check(SimpleCombatant instance, Integer expected) {
        Set<Combatant> result = instance.getCombatants();
        assertEquals(true, result.contains(instance));

        if (expected == null) {
			assertFalse(result.contains(instance));
		}
        else {
			assertTrue(result.contains(instance));
		}
    }

    private static void setSectorBonusToNull(SimpleCombatant instance) {
        Set<Combatant> result = instance.getCombatants();
        InstanceMap.put(instance, result);
    }

    private static void assertThrows(Runnable r, Class c) {
        try {
            r.run();
        }
        catch (Exception e) {}
    }

	/**
	 * Test of clearObserver method, of class SimpleCombatant.
	 * @throws Exception if something goes wrong within the method, including any exception of
	 * its own.
	 */
	@Test
	public void test_clearObserver() throws Exception {
	        SimpleCombatant instance = new SimpleCombatant();
		CombatantObserver instanceExpected = new SimpleCombatantObserver(true);
		CombatantObserver instanceActual = instance.getObserver();
		assertEquals(true, instanceActual.isEnabled());
		assertEquals(instanceExpected, instanceActual);
		instance.clearObserver();
		assertEquals(false, instanceActual.isEnabled());
	}

    private static Logger _log = Logger.getLogger(SimpleCombatant_1Test.class.getName());
	private static String[] _getSectors();
	private static SectorBonus[] _getSectorBonuses();
	private static Set<Combatant> _getCombatants();
	private static Set<Combatant> _getObservers();
	private static void setSectorBonusesToNull(SimpleCombat"
f70f1540-199f-4f2e-905d-fc4baf603e52,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java,61.58960294723511,stop,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException;
}
","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {
private final Set<String> TEST_CALLS = new HashSet<>();
	 
	/**
	* Test {@link Configuration#hasValue(Integer)} method for a
	* {@link PlayerConfiguration_0Test#TEST_CALLS} with a number equal to
	* <code>1</code>
	*/	
	@Test
	public void testTestsWithOneTestAndOneCalc() {

		assertEquals(this.TEST_CALLS.size(), 0);

		int value = 1;
		PlayerConfiguration_0 other = new PlayerConfiguration_0();

		other.addCalc(value);
		assertEquals(
				this.TEST_CALLS,
				new Set<>(values()
		)); // Set is not modified

		other = this.copy();

		other.addCalc(value);

		assertEquals(
				this.TEST_CALLS,
				new HashSet<>(values())); // Set is modified
	}

		/**
	* Test {@link Configuration#containsIndex(Integer)} for a
	* {@link PlayerConfiguration_0Test#TEST_CALLS} with a number in
	* the {@link PlayerConfiguration_0Test#TEST_CALLS} that is equal to
	* <code>2</code>
	*/	
	@Test
	public void testTestsWithOneThenTheOtherContains() {

		int value = 1;
		PlayerConfiguration_0 other = new PlayerConfiguration_0();

		other.addCalc(value);
		assertTrue(
				other.containsIndex(value));

		other.addCalc(value+1);

		assertFalse(other.containsIndex(value+1));

		other = this.copy();

		other.addCalc(value);

		other.addCalc(value);

		assertTrue(other.containsIndex(value));

		other = this.copy();

		other.addCalc(value+1);
		assertFalse(other.containsIndex(value+1));

		other = this.copy();

		other.addCalc(value);

		assertTrue(other.containsIndex(value));

		other = this.copy();

		other.addCalc(value+1);
		assertFalse(other.containsIndex(value+1));

		other = this.copy();

		other.addCalc(value);
		assertTrue(other.containsIndex(value+1));
	}

	/**
	* Test {@link PlayerConfiguration#getCalls()} for a {@link PlayerConfiguration_0Test#TEST_CALLS} with a string value.
	* The value should be copied into the array before being sent to the server.
	*/	
	@Test
	public void testTestsWithOneThenGetCalls() {

		// Test with one string -> test with string's copy.
	    int value = 1;
		PlayerConfiguration_0 other = new PlayerConfiguration_0();

		other.addCalc(value);

		assertEquals(1, this.getCalls().size());

		other.addString(value+2);

		assertEquals(2, values().size());

		other.setDefault();

		other.addString(value+1);

		assertEquals(3, values().size());
	}
}"
9f10269e-4280-423f-8556-d278d3bbc07c,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java,61.32568621635437,stop,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets();
}
","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {
final static Set<String> NO_LINES = new HashSet<>();
		static {
			NO_LINES.add("""");
		}
		
	/**
	 * Unit test cases.
	 */
	@Test
	void test() {
		final Lock lock = new ReentrantLock(true);
		final Lock lock2 = new ReentrantLock();
		// Check lock.
		assertNotNull(lock);
		assertSame(lock, lock2);
		lock.lock();
		assertNotNull(lock2);
		assertSame(lock, lock2);
		// Do locking.
		lock.lock();
		lock.lock();
		lock2.unlock();
		lock.unlock();
        // Check no locks.
		assertNull(lock);
		assertEquals(NO_LINES, NO_LINES);
	}
}
"
bdaecc1c-8565-43f2-ac16-b4351935a633,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java,61.56133460998535,stop,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline();
}
","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains one unit test case for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {

    /**
     * This method throws an error.
	  */
    @Test
    void throwError_ThrowsErrorException_AndSetsShootlineStatusError(){

    	setShootlineStatusError();
		
    	try {

            new PlayerConfiguration().showShootline();
        } catch (Configuration.PlayerConfigurationError e){
        	
            assertEquals(e.getMessage(), ""Shootline mode not enabled."");

        }

    }

    private void setShootlineStatusError() {

        Configuration.shootlineEnabled = Configuration.ShootlineStatus.Enabled
        		== Configuration.ShootlineStatus.Disabled;
    }
}

// PlayerConfiguration_3Test.java
"
ff013b4b-7bc6-4f82-a0cf-eaf00e499088,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java,62.81120252609253,stop,"// Battleplan.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A plan which determines each step of the battle. A battle is divided into
 * {@link Round}s.
 *
 * @author daniel
 */
public class Battleplan {

    /**
     * @return the number of rounds this plan has
     */
    public int numberOfRounds();
}
","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains one unit test case for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains one unit test case for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {

	/**
	 * Logger for test cases.
	 */
    private final Logger LOG = Logger.getLogger(BattleplanTest.class.getName());																											//	 .create();	//
	
	private final SortedMap<String, SortedMap<Integer, String>> battles;

	// ---------------------------------------------
	// Constructor
	// ---------------------------------------------
	public BattleplanTest() {
		this.battles = new TreeMap();
	}
	
	// ----------------------------------------------
	// Getters and setters
	// ----------------------------------------------
	/**
	 * @return number of the planned scenarios
	 */
	public int numberOfRounds() {
		return this.numberOfRounds;
	}
		
	/**
	 * @param n number of the planned scenarios
	 */
	public void setNumberOfRounds(int n) {
		this.numberOfRounds = n;
	}
		
	// ---------------------------------------------
	// Main functions
	// ---------------------------------------------
	/**
	 * @param scenario scenario
	 */
	public void build(Battle scenario) {
		
		for(String s : scenario.getParameters().keySet()) {
			for(int i = 0; i < scenario.getParameters().get(s).values().size(); i++) {
				SortedMap<Integer, String> m = this.battles.get(s);
				if(m == null) {
					m = new TreeMap();
					m.put(Integer.valueOf(i), scenario.getParameters().get(s).get(i));
					this.battles.put(s, m);
				}
				m.put(Integer.valueOf(i), scenario.getParameters().get(s).get(i));
			}
		}
		
		LOG.severe(""battles done. Number of rounds = "" + this.numberOfRounds());
	}
	
	// -----------------------------------------------------------
	// Tests
	// -----------------------------------------------------------
	/**
	 * Tests that a battles is build for a single scenario
	 */
	@Test
	public void test() {
		Battle scenario = new Battle(""my first scenario"");
		Battle scenario1 = new Battle(""my second scenario"");
		Battle plan = new Battleplan(scenario);
		
		plan.build(scenario);
		
		assertEquals(0, plan.numberOfRounds());
		
		scenario1.setName(""my first plan"");
		scenario.setName(""my second scenario"");
		plan.build(scenario1);
		
		assertEquals(scenario1.numberOfRounds(), plan.numberOfRounds());
		
		Collection<Battle> battles = plan.getBattles();
		assertEquals(plan.numberOfRounds(), battles.size());
	}
}
"
fdaaf09e-d030-4fb5-aee2-493ea75e07df,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java,51.058369159698486,stop,"// Battleplayer.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Battleplayer} controls the battle. It is a puppet player controlling
 * the behavior of the {@link Combatant}s.
 *
 * @author daniel
 */
public class Battleplayer implements Player {

    /**
     * @return the number of rounds this player shows
     */
    public int numberOfRounds();
}
","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains one unit test case for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains one unit test case for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {

    private static final Logger logger = new Logger(""Battleplayer"");
	
	private final Battleplayer player;

	private final String description;

	/**
	 * @param numberOfRounds rounds this player shows
	 * 					 
	 * @param description description of the battleplayer. 
	 */
	public BattleplayerTest (int numberOfRounds, String description) {
		player = new Battleplayer();
		player.numberOfRounds = numberOfRounds;
		player.description = description;
	}
	
	/**
	 * Method for checking results of the battleplayer from the {@link Battleplayer#numberOfRounds()} method.
	 * 
	 * @param object the battle player
	 */
	public void testNumberOfRoundsResults (Battleplayer object) {
		assertEquals (object.numberOfRounds(), numberOfRounds());
	}
			
	/**
	 * Method for checking all values of the battleplayer from the {@link Battleplayer#numberOfRounds()} method.
	 * 
	 * @param object the battle player
	 */
	public void testBattleplayer (Battleplayer object) {
		logger.info(String.format(""%s is battleplayer with numberOfRound: %d and description: %s"", description, object.numberOfRounds(), description));
		assertTrue (object.numberOfRounds() > 0);
		assertTrue (object.description.equals (description));
		Set<Combatant> combatants = new HashSet<Combatant>();
		combatants.addAll (object.getCombatants());
		Combatant combatantTest = new Combatant();
		combatantTest.combatant = null;
		for (Combatant battleControllor : combatants) {
			this.testCombatant (combatantTest, battleControllor);
		}
		String battleResult = player.battle(combatantTest);
		assertFalse (battleResult.equals (""battle result: \""\""""));
		logger.info(battleResult);
		assertTrue (battleResult.endsWith(""battle result: \""1\""""));
	}
	
	/**
	 * Method for testing if a battle is done on battleresult=""1"".
	 * 
	 * @param battleControllor the battlecontrollor
	 * @param battleResult the battleresult
	 */
	private void testCombatant (Combatant battleControllor, Combatant battleResult) {
		List<Combatant> combatants = battleControllor.getCombatants();
		Set<Combatant> result = new HashSet<Combatant>();
		for (Combatant battleControllor1 : combatants) {
			this.testCombatant(result, battleControllor1);
		}
		assertTrue (battleResult.equals(result));
	}
	
	/**
	 * Test method for {@link Battleplayer#battle(Combatant)}
	 * 
	 * @param currentBattleControllors
	 * @param battleControllor the battlecontrollor
	 */
	private void testCombatant (Set<Combatant> currentBattleControllors, Combatant battleControllor) {
		assertTrue (""Number of combatants must be greater than 0"", currentBattleControllors.size() > 0);
		int battleresult = player.battle(battleControllor);
		if (battleresult!= -1) {
			logger.info(""Battleresult : "" + battleresult);
			Set<Combatant> battleresultSet = new HashSet<Combatant>();
			for (Combatant defender : currentBattleControllors) {
				this.testCombatant(battleresultSet, defender);
			}
			//System.out.printf(""Combatants with battle result: %d "", battleresultSet.size());
			//for (Combatant defender : battleresultSet) {
				//System.out.printf(""Combatant with battle result: \""%s\"" "", defender);
			//}
			if (!battleresultSet.equals(currentBattleControllors)) {
				logger.info(""BattleResult : "" + player.battleResult());
				logger.info(""Results set: "");
				logger.info(currentBattleControllors);
				logger.info(player.battleResult());
				boolean battleResultIsEquivalent = false;
				for (Combatant defender : currentBattleControllors) {
					if (currentBattleControllors.equals(defender)) {
						continue;
					}
					for (Combatant battleControllor : currentBattleControllors) {
						if (currentBattleControllors.equals(battleControllor.combatant)) {
							//System.out.println(""Battle result : "" + battleResult);
							battleResultIsEquivalent |= this.checkEqualsBattleResult(defender, battleControllor);
							break;
						}
					}
					if (battleResultIsEquivalent) {
						logger.info(""Battleresult : "" + battleResult);
						logger.info(""Results set: "");
						logger.info(currentBattleControllors);
						logger.info(player.battleResult());
						return;
					}
				}
				//We don't have a battle result of the battleControllor!
			}
		}
		logger.info(""BattleControllors missing."");
		logger.info(""Results set: "");
		logger.info(currentBattleControllors);
	}



	private boolean checkEqualsBattleResult (Combatant defender, Combatant battleControllor) {
		if (defender.getBattleResult()!= battleControllor.getBattleResult()) {
			logger.info(""Battle result "" + battleControllor.getBattleResult() + "" is different ["" + defender.getBattleResult() + ""] from ["" + battleControllor.getBattleResult() + ""]"");
			return false;
		}
		return true;
	}

}
"
