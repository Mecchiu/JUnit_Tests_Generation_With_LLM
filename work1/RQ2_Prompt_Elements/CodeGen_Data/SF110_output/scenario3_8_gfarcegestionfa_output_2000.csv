ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
33866ce9-9c39-4dda-85d6-b6f8bf9c102b,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,42.085678577423096,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de la formation
     *
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm();
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {

    /**
     * Test for {@link FenetrePrincipale#FenetrePrincipale(String, String)}.
     */
    @Test
	public void test_FenetrePrincipale_0() throws Throwable {

	/*
	 * @Fix: We want to test with different dates
	 */
        	// System.out.println(""---------------------------------------------------------------------------"");
	Calendar cal = Calendar.getInstance(); 
	cal.clear();
        	
        	cal.setTimeZone(java.util.TimeZone.getDefault());
        	cal.set(2009, 1, 25, 3, 2, 3);
      	   	cal.set(Calendar.SECOND, 0);
      	   	cal.set(Calendar.MILLISECOND, 0);
      	   	cal.set(Calendar.MINUTE,0);
      	   	cal.set(Calendar.HOUR_OF_DAY, 0);
      	   	cal.set(Calendar.MINUTE, 0);
       		cal.set(Calendar.SECOND, 0);
       		cal.set(Calendar.MILLISECOND, 0);
        	
        	String date1 = cal.getDisplayName(""dd/MM/yyyy"", Calendar.FULL);
        	String date2 = cal.getDisplayName(""dd/MM/yyyy"", Calendar.NO_IGNORE_PARSing);
        	String date3 = cal.getDisplayName(""dd.MM.yyyy"", Calendar.FULL);
        	String date4 = cal.getDisplayName(""DD.MM.yyyy"", Calendar.NO_IGNORE_Parsing);
        	
        	assertEquals(date1,""DATE_LIMITED  2009-01-25 03:02:03"",date2);
        	assertEquals(date1,""DATE_LIMITED  2009-01-25 03,02:03"",date3);
          	assertEquals(date1,""DATE_LIMITED  2009-01-25 02:46:04"",date4);
        	
        	String date = cal.getFormattedDate();
        	
        	assertEquals(date,""DATE_LIMITED  2009-01-25 03:02:03"");
        	
    	/* 
           *  Test for an existing date
           */
           

        	// Calculate a limit date
    	    	Calendar limit = Calendar.getInstance();
    	    	limit.clear();
    	    	limit.setTimeZone(java.util.TimeZone.getDefault());
    	    	limit.set(2009, 1, 25, 3, 2, 3);
    	    	limit.set(Calendar.SECOND, 0);
    	    	limit.set(Calendar.MILLISECOND, 0);
    	    	limit.set(Calendar.MINUTE,0);
    	    	limit.set(Calendar.HOUR_OF_DAY, 0);
    	    	limit.set(Calendar.MINUTE, 0);
    	    	limit.set(Calendar.SECOND, 0);
    	    	limit.set(Calendar.MILLISECOND,0);
    	    	
    	    	cal.setTime(limit.getTime());
    	    	cal.set(Calendar.HOUR, 0);
    	    	cal.set(Calendar.MINUTE, 0);
    	    	cal.set(Calendar.SECOND, 0);
    	    	cal.setTime(limit.getTime());
    	        
        	
        	
        	// Test with an impossible date
        	String wrongDate
        		= DateLimit.generateRandomDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH)+1,cal.get(Calendar.DATE),cal.get(Calendar.HOUR_OF_DAY)+1,cal.get(Calendar.MINUTE)+1);

        	check(wrongDate, date);
        	
        	// Test with an impossible date format
        	wrongDate = dateLimit.replace(""%D"", ""%m"");
        	check(wrongDate, date);
        	
        	// Test with an impossible date format
        	wrongDate = dateLimit.replace(""%H"", ""%m"");
        	"
e5f2ecd3-c425-4eeb-a330-0fb9c40999a9,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,42.02794647216797,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de naissance
     *
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss();
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {
public FenetrePrincipale_1Test () {
			super (""FenetrePrincipale_1Test"");
			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setBounds(250, 200, 726, 652);
			getContentPane().setLayout(new BorderLayout());
			JPanel panel1 = new JPanel();
			getContentPane().add(panel1, BorderLayout.NORTH);
			JLabel lable = new JLabel(""Date de naissance"");
			lable.setForeground(Color.GREEN);
			panel1.add(lable);
			JTextField txt = new JTextField();
			txt.setText(""01/01/2016"");
			panel1.add(txt);
                        
                        
                        
			JPanel panel2 = new  JPanel();
			getContentPane().add(panel2, BorderLayout.CENTER);
			JTextArea txta = new  JTextArea();
			txta.setLineWrap(true);
			txta.setWrapStyleWord(true);
			txta.setFont(new Font(""DejaVu Sans"", Font.BOLD, 12));
			txta.setLineWrap(true);
			txta.setWrapStyleWord(true);
                        
			JScrollPane listPane  = new  JScrollPane();
                        listPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                        listPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

			JTable table = new  JTable();
			listPane.setViewportView(table);

			panel2.add(listPane);
                        
			txt.setFont(new Font(""DejaVu Sans"", Font.BOLD, 18));
                         JLabel lbl = new JLabel("""");
			lbl.setForeground(Color.BLUE);
			lbl.setFont(new Font(""DejaVu Sans"", Font.BOLD, 18));
			panel2.add(lbl);
                        
                        
			JButton backButton = new JButton("""");
//			backButton.setFont(new Font(""DejaVu Sans"", Font.BOLD, 17));

			{
			backButton.addActionListener(new ActionListener()
			{
					
				public void actionPerformed(ActionEvent e)
				{
					Controler.setFocus();
					setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				}
			});
			}
			JPanel panel = new JPanel();
			panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
			grid = new GridLayout(1, 1, 5, 5);
                        
			panel.add(panel1);
                        
			panel.add(txt);
                        
			panel.add(backButton);
			panel.add(panel2);
			JPanel panel4 = new JPanel();
                        panel4.setLayout(new BoxLayout(panel4, BoxLayout.Y_AXIS));
                        {
                                    panel4.add(panelScrollPane);
                        }
                        JPanel panel5 = new JPanel();
                        grid = new GridLayout(1, 1,5, 5);
                        panel5.setLayout(grid);
			JPanel panel6 = new JPanel();
                        panel5.add(panel6);
                        {
                            panel6.setFocusable(false);
                        }
                        panel5.add(panelScrollPane4);
                        backButton.setEnabled(false);
                        panelContainer.add(panel);
                        panelContainer.add(panel4);
                        panelContainer.add(panel5);
                        panelContainer.add(panel6);
                        panel6.add(panelScrollPane4);
			{      
                        }
			
                        panelScrollPane.setViewportView(panelContainer);
                        panelContainer.add(panelScrollPane2);
						
                        panel6.add(panelScrollPane2);
                        panel6.add(panel6);

			panelContainer.add(panel6);
			
			{
                    final JPanel panel7 = new JPanel();
                    final JPanel panel8 = new JPanel();
                        panel7"
ce6cd0fd-b245-493b-9b5c-c523bd2454ec,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java,63.964810371398926,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne();
}
","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {
final static ListSelectionModel lsModif = null;
		
		/**
		 *
		 *
		 * @throws Exception
		 */
		@Test
		public void test() throws Exception {
			
			// ModifTableStockage_0.java --> ModifTableStockage
	        final ModifTableStockage modifTableStockage = new ModifTableStockage();
			assertEquals(""ajouterLigne()"", new String(modifTableStockage.ajouterLigne().getAux(), ""UTF-8""), ""La premiere lettre de la liste a été retournée"");
			JOptionPane pane = JOptionPane.showConfirmDialog(null,""Ajout de la lettre "",""Question de retournement"", JOptionPane.YES_NO_OPTION);
			assertEquals(""La valeur du champ \""Liste de lettres\"" est:\"""" + pane.getValue()+""\"""",0,JOptionPane.showConfirmDialog(null,""Vérification de la valeur du champ \""Liste de lettres\"""", ""Question"", JOptionPane.YES_NO_OPTION));
		}
}
// ModifTableStockage_0.java"
4571dfaa-58e8-4b48-ad42-5259e0b9a1a8,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,24.141079425811768,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail();
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {
boolean ajouterMess = false;
		boolean verifierMess = false;
        /**
         * Generates a test for {@link ModifTableStockage#colonneMail()}.
         */
        ModifTableStockage_1Test (){
            ajouterMess = true;
            verifierMess = true;
        }

        /**
         * Generates a test for {@link ModifTableStockage#colonneMail()} with a new message to be added a
         * table with a String column named ""E-Mail"" and the TableStockage with a column named ""Name"".
         * @throws Exception Exception is thrown if an error occurs.
         */
        @Test void test_colonneTableStockageString_eMail_no_nouvelle_nom_eMail() throws Exception{

            JOptionPane.showMessageDialog(null, ""Initialisation du TableStockage qui initialise l'origination de l'E-Mail à 0"",""L'ajout du TableStockage"", JOptionPane.INFORMATION_MESSAGE);
            TableStockage tableStockage = new TableStockage(new String[][]{new String[]{""E-Mail""}});
            ModifTableStockage modifTableStockage = new ModifTableStockage(new String[][]{new String[]{""Nom""}});

            assertNotNull(modifTableStockage.colonneMail());
            assertNotNull(tableStockage);
            assertFalse(ajouterMess);
            assertFalse(verifierMess);
             
            assertEquals(new String(tableStockage.getRows()[0][1]), ""E-Mail"");
            assertEquals(new String(tableStockage.getSelectedRows()[0][1]), ""0"");

        }
        /**
         * Generates a test for {@link ModifTableStockage#colonneMail()} with a new message to be added a
         * table with a String column named ""E-Mail"" and the TableStockage with a ColumnModel with a List of
         * columns named ""Nom"" and ""Date"".
         * @throws Exception Exception is thrown if an error occurs.
         */
        @Test void test_colonneTableStockageString_eMail_date_no_nouvelle_nom_eMail() throws Exception{

            JOptionPane.showMessageDialog(null, ""Initialisation du TableStockage qui initialise l'origination de l'E-Mail à 07-01-2015,"",""Confirme le table Stockage par défaut"", JOptionPane.INFORMATION_MESSAGE);
            TableStockage tableStockage = new TableStockage(new String[][]{new String[]{""E-Mail""}});
            ModifTableStockage modifTableStockage = new ModifTableStockage(new String[][]{new String[]{""Nom""}, new String[]{""Date"",""dummy""}});
            assertNotNull(modifTableStockage.colonneMail());
            assertNotNull(tableStockage);
            assertFalse(ajouterMess);
            assertFalse(verifierMess);
             
            assertEquals(new String(tableStockage.getRows()[0][1]), ""E-Mail (1)"");
            assertEquals(new String(tableStockage.getSelectedRows()[0][1]), ""07-01-2015"");

        }
    }


"
2beb41f3-7ff4-4ec8-af1e-769948b5abe0,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java,41.797096967697144,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {

	/**
	* Tests the {@link ModifTableStockage#selectMail()} method.
	*/
	@Test
	public void testSelectMail() {
        // Création du fichier de données de test.
        TestFiles dir = new TestFiles();
		
		// Création de la variable tableStockage
        TableStockage tableStockage = new TableStockage(); 
        tableStockage.insertTable(dir.getTableFile(0));
        
		// Création de la variable tableStockage si cté 0 est déjà pris et c'est du table en cours
		boolean isFirstTable = tableStockage.isFirstTable();
		
		// Création de la variable tableStockage si cté 1 est déjà pris et c'est du table en cours
		boolean isSecondTable = tableStockage.isSecondTable();
		
		JOptionPane.showConfirmDialog(null, ""Vous confirches que vous voulez r&omeacute;s vous une table au bon temps?"", 
				 ""Question des créées"", JOptionPane.YES_NO_OPTION);
		
		// Attributs à créer
		String message = tableStockage.checkTable(isFirstTable);
		
		assertTrue(isFirstTable);
		assertTrue(isSecondTable);
		
		// Le test est terminé
		assertFalse(isFirstTable);
		assertFalse(isSecondTable);
		
		// Tester d'autres tests
		
	}

}
/** END OF CLASS */
"
33dd1b26-73d9-4d29-9850-55cccac38477,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,47.68537425994873,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation();
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	 * Unit test case for {@link Controler#findAllFormation()}
	 * Creates a file containing the following tables
	 *
		   Fichier_a  : Fichier de l'entree de liste de formation a partir de liste de
	 * formation et un identité à partir de liste entre les bètes formées
	 * Fichier_b  : Fichier de l'entree d'action de la liste de formation
	 *  Fichier_c  : Fichier de l'entree d'action d'formation
	 *  Fichier_d  : Fichier de tentative de publication d'un identité
	 *  Fichier_r  : Fichier de tentative de publication d'un identité entre les
	 *  identites avec définition sur les émission de l'identité
	 */
	@Test
	void findAllFormationS() throws IOException, ParseException {
		// create a new instance of the factory
		
		DaoFactory<Formation> df = new FormationFactory();
		
		writeToFile(""Fichier_a"", df.findAllFormation());
		writeToFile(""Fichier_b"", df.findAllFormation());
		
		try {
			writeToFile(""Fichier_c"", df.findAllFormation());
			fail(""There should not be any result for c"");
		} catch (DaoFactoryException e) {
			assertNotNull(e);
		}
		
		try {
			writeToFile(""Fichier_d"", df.findAllFormation());
			fail(""There should not be any result for d"");
		} catch (DaoFactoryException e) {
			assertNotNull(e);
		}
		
		writeToFile(""Fichier_r"", df.findAllFormation());
		
		try {
			writeToFile(""Fichier_a"", df.findAllFormation());
			fail(""There should not be any result for a"");
		} catch (DaoFactoryException e) {
			assertNotNull(e);
		}
	}
	
	/**
	 * Unit test case for {@link Controler#update(Identite)}
	 * Retourne tous les fonctionnalités de l'identité, mais l'identité a plus longue
	 * puis s'homme effecte un résultat déchoue
	 *
	 * @throws IOException
	 * @throws WriteException
	 * @throws ParseException
	 * @throws DaoFactoryException
	 */
	@Test
	void update() throws IOException, WriteException, ParseException {
		
		DaoFactory<Formation> df = new FormationFactory();
		
		// define a new entity
		Formation f = new Formation();
		
		// define an identifier for this formation
		Identite i = df.create(new Identification(TypeIdentite.Formation, ""fusion"").setName(""fusion""));
		
		// define a tentative de publication de l'identité
		i = df.create(new Identification(TypeIdentite.Identite).setTitle(""title publication"").setType(""taux de publication a""));
		
		f = df.create(new Formation(i));

		// define a tentative de publication a l'identité
		i.setTaux(new Calendar().add(Calendar.DAY_OF_MONTH, 6)).setTaux(12).setTanta(6);
		
		// update the formation
		f.setTotoL(5);
		f.setTotoA(12);
		
		// update the identification, i must not be null
		i = df.create(new Identification(TypeIdentite.Identite).setEtiquette(12));

		// fail the update on nonexistant identique
		try {
			f.setTotoL(5);
			df.update(i);
			assertNull(i);
		} catch (UnsupportedOperationException | DaoFactoryException e) {
			assertNotNull(e);
		}
	}
	
	private void writeToFile(String table, Collection<? extends Identification> id) throws IOException, WriteException, ParseException {
		FenetreChoix f = new FenetreChoix();
		f.setTitle(""Tous les identités dans le moteur de l'application"");
		f.setContent(""Répertoil: Fichier F\u00B2tres et les identites dans le moteur de l'application."");
		f.add(0, id);
		
		try (WritingXLS wr = new WritingXLS(table = table, f)) {
			wr.open();
			wr.write(0);
			
			WritingXLS wr1 = new WritingXLS(table = ""Fichier"", f);
			
			wr.write('T');
			
			// TODO this test is a no-op
			// wr.write(0);
			// wr1.write(0);
			
			f.setFormat(""txt"");
			f."
