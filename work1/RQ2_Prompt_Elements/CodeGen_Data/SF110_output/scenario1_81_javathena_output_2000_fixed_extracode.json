[
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\t@Test\n\tpublic void testLoadCharactere() throws IOException, MalformedDataException {\n        try {\n                // read\n            CharacterConfig conf = new CharacterConfig(\"character_config.txt\");           \n            conf.setDb(new File(fileTest));                 \n            Confirmer obj = TXTCharacter.load(conf);\n            // assert not null            \n            assertNotNull(\"Unable to load character.\", obj);\n            \n            // assert that character was read\n            assertEquals(\"Unable to read character.\",\n                         obj.getDef(),          \n                         ROCharacter.getDef(obj.getDef()));         \n        } catch(MalformedDataException ex) {\n            assertTrue(\"ex.toString(): \" + ex.toString(),\n                    ex.getMessage().indexOf(\"character_config.txt\") > 0);\n        }\n\t}\n\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\t@Test\n\tpublic void testLoadCharactere() throws IOException, MalformedDataException {\n        try {\n                // read\n            CharacterConfig conf = new CharacterConfig(\"character_config.txt\");           \n            conf.setDb(new File(fileTest));                 \n            Confirmer obj = TXTCharacter.load(conf);\n            // assert not null            \n            assertNotNull(\"Unable to load character.\", obj);\n            \n            // assert that character was read\n            assertEquals(\"Unable to read character.\",\n                         obj.getDef(),          \n                         ROCharacter.getDef(obj.getDef()));         \n        } catch(MalformedDataException ex) {\n            assertTrue(\"ex.toString(): \" + ex.toString(),\n                    ex.getMessage().indexOf(\"character_config.txt\") > 0);\n        }\n\t}\n\n\n}\n",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate static final int char_id = 82492;\n\t\n\t/**\n\t * Loads character from charFile.txt.\n\t * @throws MalformedDataException if characters cannot be loaded\n\t * @throws IOException             if characters cannot be loaded\n\t*/\n\t@Test\n\tpublic void loadCharacter() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(fileChar);\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertTrue(currChar!= null);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(1, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Loads characters from character file in given directory.\n\t * @throws IOException             if characters cannot be loaded\n\t * @throws MalformedDataException if characters cannot be loaded\n\t*/\n\t@Test\n\tpublic void fileCharacter() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(fileChar);\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertNotNull(currChar);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(1, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Loads characters from character file where characters can be\n\t * loaded even if characters cannot be loaded.\n\t * @throws IOException             if characters cannot be loaded\n\t * @throws MalformedDataException if characters cannot be loaded\n\t */\n\t@Test\n\tpublic void loadNonCharFile() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(new File(fileNonChar, \"NonCharFile\"));\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertNotNull(currChar);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(0, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Reads character from its id in charDict and returns it.\n\t * @return ROCharacter contains character\n\t* @throws IOException if characters cannot be loaded\n\t*/\n\tprivate ROCharacter readCharactere(String ligne) throws IOException {\n\t\tROCharacter currChar;\n\t\tchar c = 0;\n\t\tbyte[] buf = new byte[3];\n\t\twhile ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\tbuf[1] = (byte) c;\n\t\t\tbuf[2] = (byte) c;\n\t\t\tint currCharId = Functions.hexStringToDigit(new String(buf, 0, 2));\n\t\t\tcurrChar = (ROCharacter) indexDict.get(currCharId);\n\t\t\tassertNotNull(currChar);\n\t\t\tif ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\t\tc = (byte) c;\n\t\t\t\tcurrChar.setChar_id(currCharId);\n\t\t\t}\n\t\t\tindexDict.put(currCharId, currChar);\n\t\t}\n\t\tassertTrue(c <= 0x7F);\n\t\treturn currChar;\n\t}\n\n\t/**\n\t * Reads character from its ID in charDict and returns it.\n\t * @return ROCharacter contains character\n\t* @throws IOException if characters cannot be loaded\n\t*/\n\tprivate ROCharacter readCharactere(int char_id) throws IOException {\n\t\tROCharacter currChar;\n\t\tchar c = 0;\n\t\tbyte[] buf = new byte[3];\n\t\twhile ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\tbuf[1] = (byte) c;\n\t\t\tbuf[2] = (byte) c;\n\t\t\tint currCharId = Functions.hexStringToDigit(new String(buf, 0, 2));\n\t\t\tcurrChar = (ROCharacter) indexDict.get(currCharId);\n\t\t\tassertNotNull(currChar);\n\t\t\tif ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\t\tc = (byte) c;\n\t\t\t\tcurrChar.setChar_id(char_id);\n\t\t\t}\n\t\t\tindexDict.put(currCharId, currChar);\n\t\t}\n\t\tassertTrue(c <= 0x7F);\n\t\treturn currChar;\n\t}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate static final int char_id = 82492;\n\t\n\t/**\n\t * Loads character from charFile.txt.\n\t * @throws MalformedDataException if characters cannot be loaded\n\t * @throws IOException             if characters cannot be loaded\n\t*/\n\t@Test\n\tpublic void loadCharacter() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(fileChar);\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertTrue(currChar!= null);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(1, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Loads characters from character file in given directory.\n\t * @throws IOException             if characters cannot be loaded\n\t * @throws MalformedDataException if characters cannot be loaded\n\t*/\n\t@Test\n\tpublic void fileCharacter() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(fileChar);\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertNotNull(currChar);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(1, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Loads characters from character file where characters can be\n\t * loaded even if characters cannot be loaded.\n\t * @throws IOException             if characters cannot be loaded\n\t * @throws MalformedDataException if characters cannot be loaded\n\t */\n\t@Test\n\tpublic void loadNonCharFile() throws IOException, MalformedDataException {\n\t\tCharConfig config = new CharConfig();\n\t\tconfig.setCharactersDB(fileDB);\n\t\tconfig.setChar_id(char_id);\n\t\tconfig.setCharFile(new File(fileNonChar, \"NonCharFile\"));\n\t\tconfig.load();\n\t\tROCharacter currChar = new TXTCharacter();\n\t\tcurrChar = config.getCharDict().get(char_id);\n\t\tassertNotNull(currChar);\n\t\tROCharacter.JOB currJob = currChar.getJOB();\n\t\tassertNotNull(currJob);\n\t\tassertEquals(0, currJob.getItems());\n\t}\n\t\n\t/**\n\t * Reads character from its id in charDict and returns it.\n\t * @return ROCharacter contains character\n\t* @throws IOException if characters cannot be loaded\n\t*/\n\tprivate ROCharacter readCharactere(String ligne) throws IOException {\n\t\tROCharacter currChar;\n\t\tchar c = 0;\n\t\tbyte[] buf = new byte[3];\n\t\twhile ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\tbuf[1] = (byte) c;\n\t\t\tbuf[2] = (byte) c;\n\t\t\tint currCharId = Functions.hexStringToDigit(new String(buf, 0, 2));\n\t\t\tcurrChar = (ROCharacter) indexDict.get(currCharId);\n\t\t\tassertNotNull(currChar);\n\t\t\tif ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\t\tc = (byte) c;\n\t\t\t\tcurrChar.setChar_id(currCharId);\n\t\t\t}\n\t\t\tindexDict.put(currCharId, currChar);\n\t\t}\n\t\tassertTrue(c <= 0x7F);\n\t\treturn currChar;\n\t}\n\n\t/**\n\t * Reads character from its ID in charDict and returns it.\n\t * @return ROCharacter contains character\n\t* @throws IOException if characters cannot be loaded\n\t*/\n\tprivate ROCharacter readCharactere(int char_id) throws IOException {\n\t\tROCharacter currChar;\n\t\tchar c = 0;\n\t\tbyte[] buf = new byte[3];\n\t\twhile ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\tbuf[1] = (byte) c;\n\t\t\tbuf[2] = (byte) c;\n\t\t\tint currCharId = Functions.hexStringToDigit(new String(buf, 0, 2));\n\t\t\tcurrChar = (ROCharacter) indexDict.get(currCharId);\n\t\t\tassertNotNull(currChar);\n\t\t\tif ((c = (byte) ((c << 8) | (c = in.readByte())))!= 0) {\n\t\t\t\tc = (byte) c;\n\t\t\t\tcurrChar.setChar_id(char_id);\n\t\t\t}\n\t\t\tindexDict.put(currCharId, currChar);\n\t\t}\n\t\tassertTrue(c <= 0x7F);\n\t\treturn currChar;\n\t}\n\t",
        "choice_no": 2
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    @Test\n    public void getCharAtTest() {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = initializeData();\n        ROCharacter charAtPos = indexedChar.get(2);\n        ROCharacter charAtPos2 = indexedChar.get(5);\n        assertEquals(charAtPos, charAtPos2);\n        assertEquals(charAtPos, indexedChar.get(7));\n    }\n        \n    private IndexedFastMap<Integer, ROCharacter> initializeData() {\n        File fileDB = new File(fileDBFile);\n        if (!fileDB.exists()) {\n            File file = new File(fileDBFile + \"character\");\n            file.mkdir();\n        }\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        indexedChar.put(1, new ROCharacter());\n        indexedChar.put(2, new ROCharacter());\n        indexedChar.put(3, new ROCharacter());\n        indexedChar.put(4, new ROCharacter());\n        indexedChar.put(5, new ROCharacter());\n        indexedChar.put(6, new ROCharacter());\n        indexedChar.put(7, new ROCharacter());\n        try {\n            String line = null;\n            while ((line = in.readLine())!= null) {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        in.close();\n        return indexedChar;\n    }\n    \n    private RHombus readHotkeys() {\n        BufferedReader in = new BufferedReader(new FileReader(fileDB));\n        List<String> rawHotkeys = new ArrayList<String>();\n        try {\n            while ((line = in.readLine())!= null) {\n                hotkeysAddItem(rawHotkeys, line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        in.close();\n        return new RoomHot(rawHotkeys, true);\n    }\n    \n    private void hotkeysAddItem(List<String> items, String line) {\n        if (!(line.contains(\",\"))) {\n            items.add(line.replace(\"\\n\", \"\"));\n            return;\n        }\n        String[] temp = line.split(\",\");\n        if (items.size()!= 2) {\n            for (int i = 0; i < items.size(); i++) {\n                Hotkey hotkey = new Hotkey();\n                hotkey.setHotkey_id(Integer.valueOf(temp[i]) - 1);\n                hotkey.setRoom(Integer.valueOf(temp[i + 1]));\n                hotkey.setNick(temp[i + 2]);\n                items.add(hotkey.getHotkey_id() + \"-\" + hotkey.getRoom().toString());\n            }\n            return;\n        }\n        RoHotro room = new RoHotro();\n        hotkeyAddItem(room, hotkey, false, \"\");\n    }\n    \n    private void hotkeyAddItem(RoHotro key, Room hotkey, boolean addToRoom, String nickName) {\n        roHotkey.getRo_id().add(hotkey.getRo_id());\n        KeyEvent keyEvent = new KeyEvent();\n        keyEvent.setKey(hotkey.getKey_id());\n        keyEvent.setHotkey(hotkey.getHotkey_id());\n        keyEvent.setRoom(key.getRo_id());\n        keyEvent.setNick(addToRoom? nickName : \"\");\n        keyEvent.getHotkey().getRo_id().add(hotkey.getRo_id());\n        keyEvent.setIsCancelled(!addToRoom);\n        keyEvent.getHotkey().setRoom(hotkey.getRoom());\n        ArrayList<KeyEvent> keyEvents = keyEventPool.get(keyEvent.getRo_id());\n        keyEvents.add(keyEvent);\n        keyEventPool.update(keyEvent);\n    }\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    @Test\n    public void getCharAtTest() {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = initializeData();\n        ROCharacter charAtPos = indexedChar.get(2);\n        ROCharacter charAtPos2 = indexedChar.get(5);\n        assertEquals(charAtPos, charAtPos2);\n        assertEquals(charAtPos, indexedChar.get(7));\n    }\n        \n    private IndexedFastMap<Integer, ROCharacter> initializeData() {\n        File fileDB = new File(fileDBFile);\n        if (!fileDB.exists()) {\n            File file = new File(fileDBFile + \"character\");\n            file.mkdir();\n        }\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        indexedChar.put(1, new ROCharacter());\n        indexedChar.put(2, new ROCharacter());\n        indexedChar.put(3, new ROCharacter());\n        indexedChar.put(4, new ROCharacter());\n        indexedChar.put(5, new ROCharacter());\n        indexedChar.put(6, new ROCharacter());\n        indexedChar.put(7, new ROCharacter());\n        try {\n            String line = null;\n            while ((line = in.readLine())!= null) {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        in.close();\n        return indexedChar;\n    }\n    \n    private RHombus readHotkeys() {\n        BufferedReader in = new BufferedReader(new FileReader(fileDB));\n        List<String> rawHotkeys = new ArrayList<String>();\n        try {\n            while ((line = in.readLine())!= null) {\n                hotkeysAddItem(rawHotkeys, line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        in.close();\n        return new RoomHot(rawHotkeys, true);\n    }\n    \n    private void hotkeysAddItem(List<String> items, String line) {\n        if (!(line.contains(\",\"))) {\n            items.add(line.replace(\"\\n\", \"\"));\n            return;\n        }\n        String[] temp = line.split(\",\");\n        if (items.size()!= 2) {\n            for (int i = 0; i < items.size(); i++) {\n                Hotkey hotkey = new Hotkey();\n                hotkey.setHotkey_id(Integer.valueOf(temp[i]) - 1);\n                hotkey.setRoom(Integer.valueOf(temp[i + 1]));\n                hotkey.setNick(temp[i + 2]);\n                items.add(hotkey.getHotkey_id() + \"-\" + hotkey.getRoom().toString());\n            }\n            return;\n        }\n        RoHotro room = new RoHotro();\n        hotkeyAddItem(room, hotkey, false, \"\");\n    }\n    \n    private void hotkeyAddItem(RoHotro key, Room hotkey, boolean addToRoom, String nickName) {\n        roHotkey.getRo_id().add(hotkey.getRo_id());\n        KeyEvent keyEvent = new KeyEvent();\n        keyEvent.setKey(hotkey.getKey_id());\n        keyEvent.setHotkey(hotkey.getHotkey_id());\n        keyEvent.setRoom(key.getRo_id());\n        keyEvent.setNick(addToRoom? nickName : \"\");\n        keyEvent.getHotkey().getRo_id().add(hotkey.getRo_id());\n        keyEvent.setIsCancelled(!addToRoom);\n        keyEvent.getHotkey().setRoom(hotkey.getRoom());\n        ArrayList<KeyEvent> keyEvents = keyEventPool.get(keyEvent.getRo_id());\n        keyEvents.add(keyEvent);\n        keyEventPool.update(keyEvent);\n    }\n}\n",
        "choice_no": 3
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate int char_id, jobID;\n\tprivate TXTCharacter character=null;\n\t\n\t@javax.inject.Inject\n\tprivate CharConfig charConfig;\n\t\n\t@Test\n\tvoid character_test_1() throws IOException {\n\t\tchar_id=5;\n\t\tjobID=6;\n        character=new TXTCharacter();\n        character.setChar_id(char_id);\n        character.setFileChar(\"characterTest2.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));   \n\n\t}\n\t\n\t@Test\n\tvoid character_test_2() throws MalformedDataException, IOException {\n\t\tchar_id=6;\n        character=new TXTCharacter();\n        character.setChar_id(char_id);\n        character.setFileChar(\"characterTest2.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n    @Test\n\tvoid character_test_3() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest2.txt\");\n                character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n\t@Test\n    void character_test_4_1() throws Exception {\n        char_id=9;\n\t\t\t\tcharacter=new TXTCharacter();\n\t\t\t\tcharacter.setChar_id(char_id);\n\t\t\t\tcharacter.setFileChar(\"characterTest3.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n    }\n\n\t@Test\n    void character_test_4_2() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest3.txt\");\n                character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n\t@Test\n\tvoid character_test_5_1() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest4.txt\");\n\t}\n\t\n\t@Test\n\tvoid character_test_5_2() throws MalformedDataException, IOException {\n        char_id=3;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest4.txt\");\n\t}\n\t\n\t@Test\n\tvoid character_test_6() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest3.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n    }\n\t\n\t@Test\n    public void test_load(){\n        assertNotNull(character);\n        assertFalse(character.isBanned());\n        assertFalse(character.isLocked());\n        assertNotNull(character.getCharacter());\n        assertNotNull(character.getFileChar());\n        assertTrue(character.isFavourite());\n        assertNotNull(character.getFriend());\n        assertNotNull(character.getHotkeys());\n        assertNotNull(character.getJob());\n        Character tmp = connection.newCharacter();\n        tmp.read(character.getCharacter());\n    }\n\t\n\t@Test\n\tvoid find_byCharId_test() {\n        assertNotNull(character.find_byChar_id(char_id));\n    }\n\t\n\tprivate void readCharactere(String input) throws IOException{\n        BufferedReader inputReader = new BufferedReader(new FileReader(input));\n        String line = null;\n        while((line = inputReader.readLine())!= null) {\n            try {\n                ROCharacter roChar = readCharactere(line);\n                assertNotNull(roChar.getChar_id());\n                assertNotNull(roChar.getFileChar());   \n                assertNotNull(roChar.getLine());\n            } catch (Exception e) {\n                throw new IOException(e.getMessage());\n            }\n        }\n        String message= null;\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate int char_id, jobID;\n\tprivate TXTCharacter character=null;\n\t\n\t@javax.inject.Inject\n\tprivate CharConfig charConfig;\n\t\n\t@Test\n\tvoid character_test_1() throws IOException {\n\t\tchar_id=5;\n\t\tjobID=6;\n        character=new TXTCharacter();\n        character.setChar_id(char_id);\n        character.setFileChar(\"characterTest2.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));   \n\n\t}\n\t\n\t@Test\n\tvoid character_test_2() throws MalformedDataException, IOException {\n\t\tchar_id=6;\n        character=new TXTCharacter();\n        character.setChar_id(char_id);\n        character.setFileChar(\"characterTest2.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n    @Test\n\tvoid character_test_3() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest2.txt\");\n                character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n\t@Test\n    void character_test_4_1() throws Exception {\n        char_id=9;\n\t\t\t\tcharacter=new TXTCharacter();\n\t\t\t\tcharacter.setChar_id(char_id);\n\t\t\t\tcharacter.setFileChar(\"characterTest3.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n    }\n\n\t@Test\n    void character_test_4_2() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest3.txt\");\n                character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n\t}\n\t\n\t@Test\n\tvoid character_test_5_1() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest4.txt\");\n\t}\n\t\n\t@Test\n\tvoid character_test_5_2() throws MalformedDataException, IOException {\n        char_id=3;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest4.txt\");\n\t}\n\t\n\t@Test\n\tvoid character_test_6() throws MalformedDataException, IOException {\n        char_id=6;\n                character=new TXTCharacter();\n                character.setChar_id(char_id);\n                character.setFileChar(\"characterTest3.txt\");\n        character.getCharacter().read(new BufferedReader(new FileReader(characterDB)));\n    }\n\t\n\t@Test\n    public void test_load(){\n        assertNotNull(character);\n        assertFalse(character.isBanned());\n        assertFalse(character.isLocked());\n        assertNotNull(character.getCharacter());\n        assertNotNull(character.getFileChar());\n        assertTrue(character.isFavourite());\n        assertNotNull(character.getFriend());\n        assertNotNull(character.getHotkeys());\n        assertNotNull(character.getJob());\n        Character tmp = connection.newCharacter();\n        tmp.read(character.getCharacter());\n    }\n\t\n\t@Test\n\tvoid find_byCharId_test() {\n        assertNotNull(character.find_byChar_id(char_id));\n    }\n\t\n\tprivate void readCharactere(String input) throws IOException{\n        BufferedReader inputReader = new BufferedReader(new FileReader(input));\n        String line = null;\n        while((line = inputReader.readLine())!= null) {\n            try {\n                ROCharacter roChar = readCharactere(line);\n                assertNotNull(roChar.getChar_id());\n                assertNotNull(roChar.getFileChar());   \n                assertNotNull(roChar.getLine());\n            } catch (Exception e) {\n                throw new IOException(e.getMessage());\n            }\n        }\n        String message= null;\n        while((message = inputReader.readLine())!= null){\n            try {\n                if (((message = message.trim()).equals(\"CHARACTERE_ID: 0\")) && message.length() == 40) {\n                        break;\n                }\n                if (((message = message.trim()).equals(\"FILE CHARACTEER: 0\")) && message.length() == 25) {\n                        break;\n                }\n                if (((message = message.trim()).equals(\"TYPE: 0\")) && message.length() == 23) {\n                        break;\n                }\n                if (((message = message.trim()).equals(\"FONTSIZE: 0\")) && message.length() == 5) {\n                        break;\n                }\n                if (((message = message.trim()).equ",
        "choice_no": 4
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    /** {@inheritDoc} */\n    @Override\n    @Test\n   public void testLoad() throws MalformedDataException {\n    \tassertNotNull(CHAR_DB);\n    }\n    \n    /** {@inheritDoc} */\n    @Override\n   public void testPersist() throws MalformedDataException {\n    \t\n    \t //create a DB\n    \twriteFile();\n    \t\n    \t//create the TXTCharacter\n    \tCHAR_DB.insert(CHAR_DB.load());\n    }\n    \n    /** \n     * Returns the character, which is used for the character (and all of the character's\n     * skills and his characters' abilities), from the file.\n     * @return\n     * @throws Exception\n\t */\n    private TXTCharacter readCharactere(String line) throws MalformedDataException {\n    \tTXTCharacter txtChar= null;\n    \t\n        TXTCharacter txtCharNom = null;\n        if (STRNG.equals(line)) {\n            txtCharNom = TXTCharacter.createTxtCharacter(CharConfig.load());\n        }\n        if (WORD.equals(line)) {\n            txtCharNom = TXTCharacter.createTxtCharacter(CharConfig.load(), JOB.RACE);\n        }\n        \n    \tif (txtCharNom!= null) {\n    \t\ttxtChar = txtCharNom;\n    \t\ttxtChar.load();\n    \t\ttxtChar.save();\n    \t}\n        \n        return txtChar;\n    }\n    \n    /**\n     * This method returns character stored in the database\n     * @param c\n     * @return character\n     */\n    private RoomCharacter createTxtCharacter(CharConfig c) {\n    \tRoomCharacter vchr = RoomCharacter.createRoomCharacter(JOB.RACE, JOB.HIDDEN, JOB.MOVIE,c, ROCharacter.RACE.value());\n    \tvchr.setRoom_area(ROCharacter.RO_AREA_MOVING.value());\n    \tvchr.setRoom_name(c.getName());\n    \t\n    \treturn vchr;\n    }\n    \n    /**\n     * This method saves the characters to the database.\n     * @param characters\n     */\n    private void saveCharacters(ROCharacter[] characters) {\n        for(ROCharacter r:chrArray) {\n        \tROCharacter.write(r);\n        }\n    }\n    \n    /**\n     * This method is expected to be called in the test method\n     * @param chrarray\n     */\n    private void setRandomCharacter(ROCharacter[] chrArray) {\n    \tROCharacter.RandomizeRand(chrArray, ROCharacter.getRoomArea(ROCharacter.RO_AREA_MOVING.value()).getChar_id());\n    }\n    \n    /**\n     * To create a character from an internal string\n     * @param name\n     * @return\n     */\n     private TXTCharacter createTxtCharacter(String name) {\n     \treturn TXTCharacter.createTxtCharacter(name, JOB.RACE);\n     }\n    \n    private void writeFile(){\n    \t\n         File file = new File(FileDB);\n         \n         try {\n             System.out.println(\"Creating file...\");\n             BufferedWriter out = new BufferedWriter(new FileWriter(\"temp\", true));\n             out.write(\"Welcome to Room 1.\\r\\n\");\n             out.write(\"You have 2 enemies in room 1.\\r\\n\");\n             out.write(\"You have 6 skill levels.\\r\\n\");\n             out.write(\"Welcome to Room 2.\\r\\n\");\n             out.write(\"You have 7 emotions.\\r\\n\");\n             out.write(\"Here is your character\\r\\n\");\n             out.write(CHAR_DB.load());\n             out.write(\"Do you know what I'm doing? \" + (charAt(CHAR_DB.load(), 1) < 'W'? Character.WO : Character.WROUGLE + \" \") + \"Do you know everything?\\r\\n\");\n             out.write(\"I am a room charcter;\\r\\n\");\n             out.flush();\n             out.close();\n\n             Character cnf = Character.readChar(CHAR_DB, null, null, ROCharacter.WO.class.getEnumConstants()[0][0]);\n             ROCharacter.write(cnf);\n             Character.write(CHAR_DB, null, null);\n         } catch (MalformedDataException e) {\n             e.printStackTrace();\n         }\n    }\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    /** {@inheritDoc} */\n    @Override\n    @Test\n   public void testLoad() throws MalformedDataException {\n    \tassertNotNull(CHAR_DB);\n    }\n    \n    /** {@inheritDoc} */\n    @Override\n   public void testPersist() throws MalformedDataException {\n    \t\n    \t //create a DB\n    \twriteFile();\n    \t\n    \t//create the TXTCharacter\n    \tCHAR_DB.insert(CHAR_DB.load());\n    }\n    \n    /** \n     * Returns the character, which is used for the character (and all of the character's\n     * skills and his characters' abilities), from the file.\n     * @return\n     * @throws Exception\n\t */\n    private TXTCharacter readCharactere(String line) throws MalformedDataException {\n    \tTXTCharacter txtChar= null;\n    \t\n        TXTCharacter txtCharNom = null;\n        if (STRNG.equals(line)) {\n            txtCharNom = TXTCharacter.createTxtCharacter(CharConfig.load());\n        }\n        if (WORD.equals(line)) {\n            txtCharNom = TXTCharacter.createTxtCharacter(CharConfig.load(), JOB.RACE);\n        }\n        \n    \tif (txtCharNom!= null) {\n    \t\ttxtChar = txtCharNom;\n    \t\ttxtChar.load();\n    \t\ttxtChar.save();\n    \t}\n        \n        return txtChar;\n    }\n    \n    /**\n     * This method returns character stored in the database\n     * @param c\n     * @return character\n     */\n    private RoomCharacter createTxtCharacter(CharConfig c) {\n    \tRoomCharacter vchr = RoomCharacter.createRoomCharacter(JOB.RACE, JOB.HIDDEN, JOB.MOVIE,c, ROCharacter.RACE.value());\n    \tvchr.setRoom_area(ROCharacter.RO_AREA_MOVING.value());\n    \tvchr.setRoom_name(c.getName());\n    \t\n    \treturn vchr;\n    }\n    \n    /**\n     * This method saves the characters to the database.\n     * @param characters\n     */\n    private void saveCharacters(ROCharacter[] characters) {\n        for(ROCharacter r:chrArray) {\n        \tROCharacter.write(r);\n        }\n    }\n    \n    /**\n     * This method is expected to be called in the test method\n     * @param chrarray\n     */\n    private void setRandomCharacter(ROCharacter[] chrArray) {\n    \tROCharacter.RandomizeRand(chrArray, ROCharacter.getRoomArea(ROCharacter.RO_AREA_MOVING.value()).getChar_id());\n    }\n    \n    /**\n     * To create a character from an internal string\n     * @param name\n     * @return\n     */\n     private TXTCharacter createTxtCharacter(String name) {\n     \treturn TXTCharacter.createTxtCharacter(name, JOB.RACE);\n     }\n    \n    private void writeFile(){\n    \t\n         File file = new File(FileDB);\n         \n         try {\n             System.out.println(\"Creating file...\");\n             BufferedWriter out = new BufferedWriter(new FileWriter(\"temp\", true));\n             out.write(\"Welcome to Room 1.\\r\\n\");\n             out.write(\"You have 2 enemies in room 1.\\r\\n\");\n             out.write(\"You have 6 skill levels.\\r\\n\");\n             out.write(\"Welcome to Room 2.\\r\\n\");\n             out.write(\"You have 7 emotions.\\r\\n\");\n             out.write(\"Here is your character\\r\\n\");\n             out.write(CHAR_DB.load());\n             out.write(\"Do you know what I'm doing? \" + (charAt(CHAR_DB.load(), 1) < 'W'? Character.WO : Character.WROUGLE + \" \") + \"Do you know everything?\\r\\n\");\n             out.write(\"I am a room charcter;\\r\\n\");\n             out.flush();\n             out.close();\n\n             Character cnf = Character.readChar(CHAR_DB, null, null, ROCharacter.WO.class.getEnumConstants()[0][0]);\n             ROCharacter.write(cnf);\n             Character.write(CHAR_DB, null, null);\n         } catch (MalformedDataException e) {\n             e.printStackTrace();\n         }\n    }\n}\n",
        "choice_no": 5
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n   @Test\n    public void testLoad(){\n      //1.1. load(String charMapFile)\n        String charMapFile = file;\n        TXTCharacter txtChar = TXTCharacter.load(charMapFile);\n        //1.2 TXTCharacterTest.testGetAll()\n        ROCharacter[] charArray = null;\n\n        try {\n            charArray = txtChar.getAll().values().toArray(new ROCharacter[0]);\n        } catch(final IOException e) {\n            e.printStackTrace();\n        }\n \n      //1.3 testSetAll()\n        List<ROCharacter> charList = null;\n\n        try {\n            charList = txtChar.getAll();\n        } catch(final IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            //1.4 readCharacts()\n            T.execute(\"print('test read characts')\");\n            ROCharacter currChar = null;\n            txtChar.readCharacts(charList);\n            // 1.5 checkCharacter()\n            assertNotNull(txtChar.get(currChar.getChar_id()) == null);\n            // 1.6 checkAll()\n            assertTrue(t.checkAll(charArray));\n        } catch(final IOException e) {\n            e.printStackTrace();\n        } catch(final Throwable t) {\n            e.printStackTrace();\n        } \n    }\n    \n   //2.1 TXTCharacterTest.testGetRandomCharacter()\n    @Test\n    public void testGetRandomCharacter(){\n        T.execute(\"print('test get random character')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n            currChar = iqr.getRandomCharacter();\n            retryChar = TXTCharacter.getRandomCharacter(currChar.getChar_id()) ;\n                        }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()));\n\n    }\n    \n   //2.2 TXTCharacterTest.testGetRandomEnvelope()\n    @Test\n    public void testGetRandomEnvelope(){\n        T.execute(\"print('test get random envelope')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n          currChar = iqr.getRandomEnvelope();\n          retryChar = TXTCharacter.getRandomEnvelope(currChar.getChar_id()) ;\n          }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()));\n\n    }\n    \n    @Test\n    public void testGetRandomEnvelope2(){\n        T.execute(\"print('test get random envelope2')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n          currChar = iqr.getRandomEnvelope(null);\n          retryChar = TXTCharacter.getRandomEnvelope(currChar.getChar_id(), null);\n          }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()) );\n\n    }\n\n    /**\n     * get All envs.\n     * 1.1 checkAll()\n     * 1.2 search(ROCharacter)\n     * 1.3 checkAll()\n     * 1.4 readCharacts()\n     * 1.5 checkEnvelope()\n     * 1.6 checkEnvelope()\n     *1.7 readData(ROCharacter)\n     *1.8 checkData ()\n     *1.9 search(ROCharacter)\n     *1.10 readCharacts()\n     *1.11 search(ROCharacter)\n     * 1.12 readData(ROCharacter)\n     *1.13 checkAll()\n     *1.14 checkAll()\n     *1.15 writeData(Point, Point, ROCharacter, int, int)\n     */\n\n\t\t@Test\n\t      public void testEnvelope2(){\n\t\t\t  ROCharacter currChar = null;\n\t\t  T.execute(\"print('test get all envelop')\");\n\t      //1.1 search(ROCharacter)\n\t\t  currChar = iqr.search(null);\n\t\t  T.execute(\"print(currChar.toString())\");\n\t      //1.2 readData(currChar)\n\t      ROCharacter retryChar = null;\n\t\t  i = 0;\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n   @Test\n    public void testLoad(){\n      //1.1. load(String charMapFile)\n        String charMapFile = file;\n        TXTCharacter txtChar = TXTCharacter.load(charMapFile);\n        //1.2 TXTCharacterTest.testGetAll()\n        ROCharacter[] charArray = null;\n\n        try {\n            charArray = txtChar.getAll().values().toArray(new ROCharacter[0]);\n        } catch(final IOException e) {\n            e.printStackTrace();\n        }\n \n      //1.3 testSetAll()\n        List<ROCharacter> charList = null;\n\n        try {\n            charList = txtChar.getAll();\n        } catch(final IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            //1.4 readCharacts()\n            T.execute(\"print('test read characts')\");\n            ROCharacter currChar = null;\n            txtChar.readCharacts(charList);\n            // 1.5 checkCharacter()\n            assertNotNull(txtChar.get(currChar.getChar_id()) == null);\n            // 1.6 checkAll()\n            assertTrue(t.checkAll(charArray));\n        } catch(final IOException e) {\n            e.printStackTrace();\n        } catch(final Throwable t) {\n            e.printStackTrace();\n        } \n    }\n    \n   //2.1 TXTCharacterTest.testGetRandomCharacter()\n    @Test\n    public void testGetRandomCharacter(){\n        T.execute(\"print('test get random character')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n            currChar = iqr.getRandomCharacter();\n            retryChar = TXTCharacter.getRandomCharacter(currChar.getChar_id()) ;\n                        }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()));\n\n    }\n    \n   //2.2 TXTCharacterTest.testGetRandomEnvelope()\n    @Test\n    public void testGetRandomEnvelope(){\n        T.execute(\"print('test get random envelope')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n          currChar = iqr.getRandomEnvelope();\n          retryChar = TXTCharacter.getRandomEnvelope(currChar.getChar_id()) ;\n          }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()));\n\n    }\n    \n    @Test\n    public void testGetRandomEnvelope2(){\n        T.execute(\"print('test get random envelope2')\");\n       //1.1 checkAll()\n        ROCharacter currChar = null;\n        T.execute(\"print(currChar.getChar_id())\");\n        ROCharacter retryChar = null;\n        while (retryChar == null) {\n          currChar = iqr.getRandomEnvelope(null);\n          retryChar = TXTCharacter.getRandomEnvelope(currChar.getChar_id(), null);\n          }\n        // 1.2 checkCharacter()\n        assertNotNull(retryChar);\n        //1.3 checkAll()\n        assertTrue(t.checkAll(currChar.getChar_id()) );\n\n    }\n\n    /**\n     * get All envs.\n     * 1.1 checkAll()\n     * 1.2 search(ROCharacter)\n     * 1.3 checkAll()\n     * 1.4 readCharacts()\n     * 1.5 checkEnvelope()\n     * 1.6 checkEnvelope()\n     *1.7 readData(ROCharacter)\n     *1.8 checkData ()\n     *1.9 search(ROCharacter)\n     *1.10 readCharacts()\n     *1.11 search(ROCharacter)\n     * 1.12 readData(ROCharacter)\n     *1.13 checkAll()\n     *1.14 checkAll()\n     *1.15 writeData(Point, Point, ROCharacter, int, int)\n     */\n\n\t\t@Test\n\t      public void testEnvelope2(){\n\t\t\t  ROCharacter currChar = null;\n\t\t  T.execute(\"print('test get all envelop')\");\n\t      //1.1 search(ROCharacter)\n\t\t  currChar = iqr.search(null);\n\t\t  T.execute(\"print(currChar.toString())\");\n\t      //1.2 readData(currChar)\n\t      ROCharacter retryChar = null;\n\t\t  i = 0;\n\t\t  while (retryChar == null) {\n\t\t\t  i++;\n\t\t\t  currChar = iqr.readData(currChar);\n\t\t\t  ",
        "choice_no": 6
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t// TXTCharacter.java\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    void readFriend(IndexedFastMap<Integer, ROCharacter> indexedChar) {\n    \tRobot robot = new Robot();\n\t\tROCharacter currRobot = robot.findCharacterByIndex(0);\n    \t\n\t\t/* READ FRIEND */\n\t\t\n\t\trobot.sendAll(new Friend(0));\n\t\tassertNotNull(currRobot.getFriend(0));\n\t\tassertEquals(0, currRobot.getFriend(0).getFriend_id());\n\n\t\trobot.sendAll(new Friend(0));\n\t\tassertNotNull(currRobot.getFriend(1));\n\t\tassertEquals(1, currRobot.getFriend(1).getFriend_id());\n\n\t\trobot.sendAll(new Friend(0));\n\t\tassertNotNull(currRobot.getFriend(2));\n\t\tassertEquals(2, currRobot.getFriend(2).getFriend_id());\n\t\t\t\t\n\t\tcurrRobot.setFriend(1, new Friend(1));\n\t\tassertEquals(1, currRobot.getFriend(2).getFriend_id());\n\t\tassertEquals(2, currRobot.getFriend(1).getFriend_id());\n\t\t\t\t\n\t\trobot.send(new Friend(2));\n\t\tassertEquals(2, currRobot.getFriend(1).getFriend_id());\n\t\tassertEquals(1, currRobot.getFriend(2).getFriend_id());\n\t\t\n\t}\n\n\t/**\n\t\tREAD HOTKEYS\n\t*/\n\tpublic void readHotkeys(IndexedFastMap mapRo) {\n\t\tRobot robot = new Robot();\n\t\tROCharacter currRobot = robot.findCharacterByIndex(0);\n\t\t\n\t\trobot.sendAll(new Hotkey());\n\n   \t\tmapRo.put(0, new Hotkey(0));\n   \t\tmapRo.put(1, new Hotkey(1));\n   \t\tmapRo.put(2, new Hotkey(2));\n\n   \t\t\n   \t\trobot.sendAll(new Hotkey());\n   \t\trobot.send(new Hotkey());\n\n\n\t\tfor (Integer keyRo : mapRo.keys()) {\n   \t\t\tROCharacter keyRo2 = robot.findCharacterByIndex(keyRo);\n   \t\t   \tassertEquals(keyRo, keyRo2.getHotkey_id());\n   \t\t}\n\t}\n    \n    /**\n    Get indexed data for one character in database\n     */\n\tprivate ROCharacter readCharactere(String line) {\n   \t\tROCharacter currChar = new ROCharacter();\n   \t\t\n   \t\t\n\t   \t\tcurrChar.setDefinirSkill(0);\n            currChar.setDefinirJOB(0);\n      \t\tcurrChar.setDefinirJob(0);\n  \t\t\tcurrChar.setDefinirClass(0);\n  \t\t\tcurrChar.setDefinirHero(0);\n\n  \t\t\tcurrChar.setDefinirPoint(0);\n  \t\t\tcurrChar.setDefinirROChar(0);\n  \t\t\tcurrChar.setDefinirFriendRo(0);\n  \t\t\tcurrChar.setDefinirFriendClass(0);\n  \t\t\tcurrChar.setDefinirClassRo(0);\n  \t\t\tcurrChar.setDefinirHeroRo(0);\n  \t\t\tcurrChar.setDefinirPointRo(0);\n  \t\t\tcurrChar.setDefinirRoChar(0);\n  \t\t\tcurrChar.setDefinirClassClassRo(0);\n  \t\t\tcurrChar.setDefinirClassHeroRo(0);\n  \t\t\tcurrChar.setDefinirRole(0);\n  \t\t\tcurrChar.setDefinirRoleRo(0);\n\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\tcurrChar.putDefinirSkill(new Skill(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n\n  \t\t\tcurrChar.putDefinirJOB(new JOB(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\tcurrChar.putDefinirJob(new JOB(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n\n  \t\t\tcurrChar.putDefinirClass(new JOB(1337));\n  \t\t\tcurrChar.putDefinirClassClass(new JOB(1337));\n  \t\t\tcurrChar.putDefinirClassRo(new JOB(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\tcurrChar.putDefinirFriendRo(new JOB(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n  \t\t\trospy.oneway(new Hotkey(1337));\n   \t\treturn currChar;\n   \t}\n//   \n//\n//public void readHotkeys() {\n//\n// }\n}",
        "choice_no": 7
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate File DB = new File(\"/root\", \"db\");\n    private File DBTest = new File(\"/root\", \"dbTest\");\n    private File DBTestP = new File(\"/root\", \"dbTestP\");\n    /**\n     * This method is called before each test is executed.\n     */\n    @Test\n    void defaultInitDatabase() {\n        new Func(DB, DBTest, DBTestP, DBTest);\n    }\n\n    \n    @Test \n    void defaultLoadFile() {\n        assertTrue(new Func(FileDB, DB, FileDBTest, FileDBPT).call() == 0);\n    }\n\n    @Test \n    void loadFileTest() {\n        assertTrue(new Func(FileDB, DB, FileDBTest, FileDBPT).call() == 0);\n    }\n\n    @Test\n    void testConstructorFile() {\n        File characterFile;\n        characterFile = new File(\"/root/character\");\n        assertEquals(characterFile, FileDB);\n        characterFile = new File(\"/root/data/character\");\n        assertEquals(characterFile, DB);\n        characterFile = new File(\"/root/data/character.txt\");\n        assertEquals(characterFile, DBTest);\n    }\n\n    @Test\n    void testConstructorFileP() {\n        File characterFile;\n        characterFile = new File(\"/root/character\");\n        assertEquals(characterFile, FileDBPT);\n        characterFile = new File(\"/root/data/character\");\n        assertEquals(characterFile, DBTestP);\n        characterFile = new File(\"/root/data/character.txt\");\n        assertEquals(characterFile, DBTest);\n    }\n    \n    @Test\n    void testReadCharacter1() {\n        File characterFile;\n        assertTrue(new Func(characterFile, \"character\", DBTest) == 0);\n        assertTrue(characterFile.canRead());\n    }\n\n    @Test\n    void testReadCharacter2() {\n        File characterFile;\n        assertTrue(new Func(characterFile, \"character\", DB) == 0);\n        assertTrue(characterFile.canRead());\n    }\n\n\n    @Test\n    void testLoadPersistenteCharacter1() {\n        IndexedFastMap<Integer, ROCharacter> map = FileDB.listDirectory().iterator().next().getDirectory().getIndexedFastMap(\"characters.map\");\n        ROCharacter currChar = map.iterator().next();\n        assertTrue(new Func(currChar, \"name\", \"first\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrName));\n        assertTrue(new Func(currChar, \"name\", \"second\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(\"test\"));\n        assertTrue(new Func(currChar, \"name\", \"third\") == 0);\n    }\n\n    @Test\n    void testLoadPersistenteCharacter12() {\n        IndexedFastMap<Integer, ROCharacter> map = FileDB.listDirectory().iterator().next().getDirectory().getIndexedFastMap(\"characters.map\");\n        ROCharacter currChar = map.iterator().next();\n        assertTrue(new Func(currChar, \"name\", \"first\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrNameWithFirstSecond));\n        assertTrue(new Func(currChar, \"name\", \"second\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(\"test\"));\n        assertTrue(new Func(currChar, \"name\", \"third\") == 0);\n    }\n\n    @Test\n    void testLoadHotkey1() throws IOException {\n        File characterFile;\n        Hotkey key;\n        Character currChar;\n        ROCharacter rcurrChar;\n        \n        assertTrue(CharacterDB.get().canRead());\n        characterFile = FileDB.listDirectory().iterator().next().getDirectory().getFile(\"character\");\n        key        = new Hotkey.CharacterFile(characterFile);\n        currChar    = new Character(characterFile);\n        assertTrue(new Func((ROCharacter)currChar, \"name\", \"first@first\", DBTest) == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrName));\n        assertTrue(new Func((ROCharacter)currChar, \"name\", \"second@second\", DBPT) == 0);\n        testLoadHotkey();\n        \n        key.register(currChar);\n        TestHelper.assertTrue(fileDBTests() == 0, \"Should return 0 for DBTests.\");\n        \n        key.unregister(currChar);\n    }\n \n    private void testLoadHotkey()  {\n        File characterFile;\n        assertTrue(new Func((ROCharacter) new UserFile(\"character.txt\"), \"name\", \"first@first\", DBTest) == 0);\n        assertTrue(new Func((ROCharacter)new UserFile(\"character.txt\"), \"name\", \"second@second\", DBPT) == 0);\n    }\n}\n// TXTCharacterTest.java",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H1;H7",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tprivate File DB = new File(\"/root\", \"db\");\n    private File DBTest = new File(\"/root\", \"dbTest\");\n    private File DBTestP = new File(\"/root\", \"dbTestP\");\n    /**\n     * This method is called before each test is executed.\n     */\n    @Test\n    void defaultInitDatabase() {\n        new Func(DB, DBTest, DBTestP, DBTest);\n    }\n\n    \n    @Test \n    void defaultLoadFile() {\n        assertTrue(new Func(FileDB, DB, FileDBTest, FileDBPT).call() == 0);\n    }\n\n    @Test \n    void loadFileTest() {\n        assertTrue(new Func(FileDB, DB, FileDBTest, FileDBPT).call() == 0);\n    }\n\n    @Test\n    void testConstructorFile() {\n        File characterFile;\n        characterFile = new File(\"/root/character\");\n        assertEquals(characterFile, FileDB);\n        characterFile = new File(\"/root/data/character\");\n        assertEquals(characterFile, DB);\n        characterFile = new File(\"/root/data/character.txt\");\n        assertEquals(characterFile, DBTest);\n    }\n\n    @Test\n    void testConstructorFileP() {\n        File characterFile;\n        characterFile = new File(\"/root/character\");\n        assertEquals(characterFile, FileDBPT);\n        characterFile = new File(\"/root/data/character\");\n        assertEquals(characterFile, DBTestP);\n        characterFile = new File(\"/root/data/character.txt\");\n        assertEquals(characterFile, DBTest);\n    }\n    \n    @Test\n    void testReadCharacter1() {\n        File characterFile;\n        assertTrue(new Func(characterFile, \"character\", DBTest) == 0);\n        assertTrue(characterFile.canRead());\n    }\n\n    @Test\n    void testReadCharacter2() {\n        File characterFile;\n        assertTrue(new Func(characterFile, \"character\", DB) == 0);\n        assertTrue(characterFile.canRead());\n    }\n\n\n    @Test\n    void testLoadPersistenteCharacter1() {\n        IndexedFastMap<Integer, ROCharacter> map = FileDB.listDirectory().iterator().next().getDirectory().getIndexedFastMap(\"characters.map\");\n        ROCharacter currChar = map.iterator().next();\n        assertTrue(new Func(currChar, \"name\", \"first\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrName));\n        assertTrue(new Func(currChar, \"name\", \"second\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(\"test\"));\n        assertTrue(new Func(currChar, \"name\", \"third\") == 0);\n    }\n\n    @Test\n    void testLoadPersistenteCharacter12() {\n        IndexedFastMap<Integer, ROCharacter> map = FileDB.listDirectory().iterator().next().getDirectory().getIndexedFastMap(\"characters.map\");\n        ROCharacter currChar = map.iterator().next();\n        assertTrue(new Func(currChar, \"name\", \"first\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrNameWithFirstSecond));\n        assertTrue(new Func(currChar, \"name\", \"second\") == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(\"test\"));\n        assertTrue(new Func(currChar, \"name\", \"third\") == 0);\n    }\n\n    @Test\n    void testLoadHotkey1() throws IOException {\n        File characterFile;\n        Hotkey key;\n        Character currChar;\n        ROCharacter rcurrChar;\n        \n        assertTrue(CharacterDB.get().canRead());\n        characterFile = FileDB.listDirectory().iterator().next().getDirectory().getFile(\"character\");\n        key        = new Hotkey.CharacterFile(characterFile);\n        currChar    = new Character(characterFile);\n        assertTrue(new Func((ROCharacter)currChar, \"name\", \"first@first\", DBTest) == 0);\n        assertTrue(currChar.name().equalsIgnoreCase(CurrName));\n        assertTrue(new Func((ROCharacter)currChar, \"name\", \"second@second\", DBPT) == 0);\n        testLoadHotkey();\n        \n        key.register(currChar);\n        TestHelper.assertTrue(fileDBTests() == 0, \"Should return 0 for DBTests.\");\n        \n        key.unregister(currChar);\n    }\n \n    private void testLoadHotkey()  {\n        File characterFile;\n        assertTrue(new Func((ROCharacter) new UserFile(\"character.txt\"), \"name\", \"first@first\", DBTest) == 0);\n        assertTrue(new Func((ROCharacter)new UserFile(\"character.txt\"), \"name\", \"second@second\", DBPT) == 0);\n    }\n}\n// TXTCharacterTest.java",
        "choice_no": 8
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tpublic abstract TXTCharacter readCharactere(String line) throws IOException, MalformedDataException;\n\t\t\n\tpublic void readFriend(final IndexedFastMap<Integer, ROCharacter> indexedChar) throws MalformedDataException {\n\t\t\n\t\tfor (int i = 0; i < CharConfig.FRIEND_NAME.size(); i++) {\n\t\t\ttry {\n\t\t\t\tindexedChar.get(i).setFriendName(CharConfig.FRIEND_NAME.get(i));\n\t\t\t} catch (MalformedDataException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < CharConfig.FRIEND_SYNONYM.size(); i++) {\n\t\t\tindexedChar.get(i).setFriendSynonym(CharConfig.FRIEND_SYNONYM.get(i));\n\t\t}\n\t\tfor (int i = 0; i < CharConfig.WEAR.size(); i++) {\n\t\t\ttry {\n\t\t\t\tindexedChar.get(CharConfig.WEAR.get(i)).setWear(CharConfig.WEAR_TYPE.get(i));\n\t\t\t} catch (MalformedDataException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tindexedChar.put(CharConfig.MEMBER, new Friend(2, \"M\", \"M\"));\n\t\tindexedChar.put(CharConfig.MEMBER2, new Friend(2, \"M\", \"M\"));\n\t\tindexedChar.put(CharConfig.WITHIN_HOTKEY.get(2), new Hotkey(\"WITHIN\", false, false));\n\t\t\t\n\t}\n\t\n\tpublic void readHotkeys(final IndexedFastMap<Integer, ROCharacter> indexedChar) throws MalformedDataException {\n\t\tindexedChar.get(0).setHotkey(new Hotkey(2, false, \"WITHIN\"));\n\t\tindexedChar.get(1).setHotkey(new Hotkey(3, false, \"WITHIN\"));\n\t\tindexedChar.get(2).setHotkey(new Hotkey(5, false, \"WITHIN\"));\n\t\tindexedChar.get(3).setHotkey(new Hotkey(0, false, \"WITHIN\"));\n\t}\n\n\t@Test\n\tpublic void test(final File fileDB) throws MalformedDataException, IOException {\n\t\tTXTCharacter t = TXTCharacter.load();\n\t\tTXTCharacter t2 = t.load();\n\t\tassertNotNull(t2);\n\t\tfor (int i = 0; i < t2.indexesChar.size(); i++) {\n\t\t\tSystem.out.println(t2.characters.get(i));\n\t\t}\n\t}\n\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\tpublic abstract TXTCharacter readCharactere(String line) throws IOException, MalformedDataException;\n\t\t\n\tpublic void readFriend(final IndexedFastMap<Integer, ROCharacter> indexedChar) throws MalformedDataException {\n\t\t\n\t\tfor (int i = 0; i < CharConfig.FRIEND_NAME.size(); i++) {\n\t\t\ttry {\n\t\t\t\tindexedChar.get(i).setFriendName(CharConfig.FRIEND_NAME.get(i));\n\t\t\t} catch (MalformedDataException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < CharConfig.FRIEND_SYNONYM.size(); i++) {\n\t\t\tindexedChar.get(i).setFriendSynonym(CharConfig.FRIEND_SYNONYM.get(i));\n\t\t}\n\t\tfor (int i = 0; i < CharConfig.WEAR.size(); i++) {\n\t\t\ttry {\n\t\t\t\tindexedChar.get(CharConfig.WEAR.get(i)).setWear(CharConfig.WEAR_TYPE.get(i));\n\t\t\t} catch (MalformedDataException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tindexedChar.put(CharConfig.MEMBER, new Friend(2, \"M\", \"M\"));\n\t\tindexedChar.put(CharConfig.MEMBER2, new Friend(2, \"M\", \"M\"));\n\t\tindexedChar.put(CharConfig.WITHIN_HOTKEY.get(2), new Hotkey(\"WITHIN\", false, false));\n\t\t\t\n\t}\n\t\n\tpublic void readHotkeys(final IndexedFastMap<Integer, ROCharacter> indexedChar) throws MalformedDataException {\n\t\tindexedChar.get(0).setHotkey(new Hotkey(2, false, \"WITHIN\"));\n\t\tindexedChar.get(1).setHotkey(new Hotkey(3, false, \"WITHIN\"));\n\t\tindexedChar.get(2).setHotkey(new Hotkey(5, false, \"WITHIN\"));\n\t\tindexedChar.get(3).setHotkey(new Hotkey(0, false, \"WITHIN\"));\n\t}\n\n\t@Test\n\tpublic void test(final File fileDB) throws MalformedDataException, IOException {\n\t\tTXTCharacter t = TXTCharacter.load();\n\t\tTXTCharacter t2 = t.load();\n\t\tassertNotNull(t2);\n\t\tfor (int i = 0; i < t2.indexesChar.size(); i++) {\n\t\t\tSystem.out.println(t2.characters.get(i));\n\t\t}\n\t}\n\t\n}\n",
        "choice_no": 9
    },
    {
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t// TXTCharacter.java\n}",
                "finish_reason": "length"
            }
        ],
        "id": "b34cb87c-86cc-4e34-81e2-d5a62d0c10e4",
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "time_taken": 50.156688928604126,
        "usage": {
            "prompt_tokens": 785
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine())!= null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n\n// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains one unit test case for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n    /**\n\t\t * Function to read a character from the input.txt file\n\t\t */\n    public static ROCharacter readCharactere(String line) {\n        String firstChar = null;\n        String secondChar = null;\n        boolean firstFlag = false;\n        boolean secondFlag = false;\n        int i = 0;\n        boolean foundCharacter = false;\n        do {\n            String readChar = line.substring(i, i + 1);\n            \n            if (Character.isLowerCaseOrUpperCase(readChar.charAt(0))) {\n                firstChar = readChar;\n                firstFlag = true;\n                secondChar = Character.toLowerCase(readChar.charAt(0));\n                secondFlag = true;\n            }else if (Character.isLowerCaseOrUpperCase(readChar.charAt(0))) {\n                firstChar = Character.toUpperCase(readChar.charAt(0));\n                firstFlag = true;\n                secondChar = Character.toLowerCase(readChar.charAt(0));\n                secondFlag = true;\n            }else{\n                firstChar = readChar;\n                firstFlag = true;\n                secondChar = Character.toLowerCase(readChar.charAt(0));\n                secondFlag = true;\n            }\n            \n            if (!firstFlag &&!secondFlag) {\n                return null;\n            }\n            \n            foundCharacter = true;\n            continue;\n           \n        } while (!firstFlag||!secondFlag);\n        \n        return new ROCharacter(firstChar, i + 1, i);\n           \n    }\n    \n\t/**\n\t * Function to read several characters from the input.txt file\n\t */\n    public static void readFriend(IndexedFastMap<Integer, ROCharacter> indexedChar) {\n        /*\n        * First step: reads the name of one character from.txt file\n        */\n        String line =null;\n        String name = null;\n        boolean foundFirst = false;\n        boolean foundSecond = false;\n        \n        File inFile = new File(fileDB);\n        \n        FileReader fileReader = new FileReader(inFile);\n        BufferedReader bufferedReader = new BufferedReader(fileReader);\n        \n        try{\n            while((line = bufferedReader.readLine())!= null) {\n                if(!foundFirst) {\n                    \n                    foundFirst = true;\n                    if(line.matches(\"^[\\\\d]$\")) {\n                        /*\n                        * Here is the code to define this character\n                        */\n                        char_name = line.substring(1);\n                        name = char_name;\n                    }\n                }else{\n                    /*\n                     * If previous step finds character name, this is the first of the name, the second of the character, then, we have a value\n                     * (the character has a name)  \n                     */\n                    if(line.equalsIgnoreCase(CharacterData.LATIN_LETTER)){\n                        i = i + 1;\n                        ROCharacter currChar = null;\n                        if (name.equalsIgnoreCase(CharacterData.LATIN_LETTER)) {\n                            currChar = indexedChar.get(new Integer(i));\n                            if (currChar!=null) {\n                                currChar.writeString(\"LATIN LETTER \" + CharacterData.LATIN_LETTER, 1);\n\n                                foundFirst = false;\n                            }\n                            else {\n                                System.out.println(\"No data found for LATIN LETTER!\");\n                            }\n                        } else {\n                        \n                            currChar = indexedChar.get(new Integer(i));\n                            if (currChar!=null) {\n                                currChar.writeString(\"LATIN LETTER \" + CharacterData.LATIN_LETTER, 1);\n                                foundFirst = false;\n                            }else {\n                                System.out.println(\"No data found for LATIN LETTER!\");\n                            }\n                        }\n                    }else {\n                        /*\n                         * Here is a general character, read it, write it to indexedChar\n                         */\n                        currChar = indexedChar.get(new Integer(i));\n                        if (currChar!=null) {\n                            \n                            currChar.writeString(CharacterData.LATIN_LETTER + \" \" + line, 2);\n                        }else {\n                            System.out.println(\"No data found for LATIN LETTER!\");\n                        }\n                    }\n                    /*\n                     * In case that this character does not exist, search next character\n                     * (this would be the first step), if possible find first character, if not, keep searching next character\n                     * (for example if name is LATIN LETTER but character to read is LATIN LETTER, then name is LATIN LETTER)\n                     */\n                             \n                }\n            }       \n            \n            /*\n             * First step: reads the name of two characters from.txt file\n             */\n             name = null;\n             foundSecond = false;\n        \n             fileReader = new FileReader(inFile);\n             bufferedReader = new BufferedReader(fileReader);\n             line = null;\n             \n             try{\n                 while((line = bufferedReader.readLine())!= null) {\n                   if (!foundFirst) {\n                           \n                           foundFirst = true;\n                           if(line.matches(\"^[\\\\d]$\")) {\n                                 name = line.substring(1);\n                                 foundSecond",
        "choice_no": 10
    }
]