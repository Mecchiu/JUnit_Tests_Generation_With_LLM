ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
ec9b7699-0906-4f47-9a54-31758c693252,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_0Test.java,26.225972414016724,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default lower bounds for
     *  this axis scale.  Returns -1.0.
     */
    public double lowerBounds() {
        return -1.0;
    }
}
","// LinearAxisScale_0Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScale_0Test {","// LinearAxisScale_0Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScale_0Test {

    /**
     *  Test method for {@link LinearAxisScale#getLowerBounds()}.
     *  Here we are testing if that method returns -1.0
     *  for valid input, which corresponds to the defaults for the default
     *  {@link LinearAxisScale#setBounds(double, double)} (below the
     *  one-argument constructor).
     */
    @Test
    public void testGetLowerBounds() {
        LinearAxisScale a = new LinearAxisScale(15,-15);

		assertEquals(100.0, a.getLowerBounds(), 1E-3);
    }
    
    /**
     *  Here we are testing if setBounds returns
     * -1.0 if lowerBounds() returns -1.0 for invalid input.
     * -1.0 if lowerBounds returns valid values.
     */
    @Test
    public void testSetBounds() {
        LinearAxisScale a = new LinearAxisScale(15,15);

        assertEquals(15,  a.getLowerBounds(), 1E-3);
        a.setBounds(20,-20);

        assertEquals(20,a.getLowerBounds(), 1E-3);

    }
}"
2aa23fe7-d303-40b6-b084-7db0f1d07613,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_1Test.java,21.40438961982727,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default upper bounds for
     *  this axis scale.  Returns 1.0.
     */
    public double upperBounds() {
        return 1.0;
    }
}
","// LinearAxisScale_1Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScale_1Test {","// LinearAxisScale_1Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScale_1Test {

	/**
	 *  It tests the getUpperBounds method of {@link LinearAxisScale}.
	 */
	@Test
	public void testGetUpperBounds() {
		//
		final LinearAxisScale lo = new LinearAxisScale();
		
		//
		double resultHi = (Double) lo.upperBounds();
		
		//
		assertTrue(resultHi > 0);
		//
		double resultLo = (Double) lo.lowerBounds();
		
		assertTrue(resultLo < 0);
	}
		
	/**
	* Test constructor of {@link LinearAxisScale}.
	* It first sets up the test object.
	*/
    @Test
    void testCreate() {
        //
        LinearAxisScale lo = new LinearAxisScale();
        
        //
        assertNotNull(""new LinearAxisScale cannot be null"", lo);
    }

}
"
2a7845be-f294-43b3-ad4a-0da089a30191,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_2Test.java,43.33849763870239,stop,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns an AxisLimitData object that contains
     *  the preferred axis limits and tick mark spacing for the
     *  specified range of data values for this linear axis scale.
     *
     * @param aLB The lower bounds of the data plotted on this axis.
     * @param aUB The upper bounds of the data plotted on this axis.
     */
    public AxisLimitData findGoodLimits(double aLB, double aUB) {
        //	The lower limit and tick mark spacing being calculated.
        double s = 0., r = 0.;
        //	Make sure we don't have a degenerate case.
        if (Math.abs(aUB - aLB) <= 0.000001) {
            if (aUB > 0.) {
                aUB = 2. * aUB;
                aLB = 0.;
            } else if (aLB < 0) {
                aLB = 2. * aLB;
                aUB = 0.;
            }
            if (Math.abs(aUB - aLB) <= 0.000001) {
                aLB = lowerBounds();
                aUB = upperBounds();
            }
        }
        if (DEBUG) {
            System.out.println(""In findGoodLimits()..."");
            System.out.println(""   aLB = "" + aLB + "", aUB = "" + aUB);
        }
        //	Object used to return results.
        AxisLimitData limData = new AxisLimitData();
        boolean done = false;
        while (!done) {
            done = true;
            double ub = aUB;
            double lb = aLB;
            double delta = ub - lb;
            //	Scale up by s, a power of 10, so range (delta) exceeds 1.
            s = 1.;
            while (delta * s < 10.) s *= 10.;
            //	Find power of 10 quantum, r, such that delta/10 <= r < delta.
            r = 1. / s;
            while (10. * r < delta) r *= 10.;
            //	Set r=(1,2,5)*10**n so that 3-5 quanta cover range.
            if (r >= delta / 2.)
                r /= 2.;
            else if (r < delta / 5.)
                r *= 2.;
            limData.ub = modceil(ub, r);
            limData.lb = modfloor(lb, r);
            //	If lower bound is <= r and > 0, then repeat.
            if (limData.lb <= r && limData.lb > 0.) {
                aLB = 0.;
                done = false;
                //	If upper bound >= -r and < 0, then repeat.
            } else if (limData.ub >= -r && limData.ub < 0.) {
                aUB = 0.;
                done = false;
            }
        }
        //	Save off tick mark spacing.
        limData.quantum = r;
        if (DEBUG) {
            System.out.println(""    limData.lb = "" + limData.lb + "", limData.ub = "" + limData.ub + "", limData.quantum = "" + limData.quantum);
        }
        return limData;
    }
}
","// LinearAxisScale_2Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScale_2Test {","// LinearAxisScale_2Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScale_2Test {
public static final double NN = 1.0e-6;
				/**
	*  Method to setup the test.
	*/
	@Test
	public void test() {
	}
}

"
f4e593fe-1d51-4a12-a563-3d618b8fa929,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_3Test.java,39.43063187599182,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Find the position and size (in screen coordinates) of tick
     *  marks for a given axis scale.
     *
     * @param quantum Tick mark step size for the axis using this scale.
     * @param aLB Lower bounds of axis using this scale.
     * @param aUB Upper bounds of axis using this scale.
     * @param xA Scaling coefficient for this axis.
     * @param xB Scaling coefficient for this axis.
     * @return An TickMarkData object containing the tick mark positions, lengths,
     *          and data values at each tick mark.
     */
    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB) {
        double xl = 0;
        double xu = 0;
        double q = quantum;
        if (q > 0.) {
            xl = modfloor(aLB, q);
            xu = modfloor(aUB - q / 10., q / 5.) + q / 10.;
        } else {
            xl = modfloor(aUB, q);
            xu = modfloor(aLB + q / 10., q / 5.) - q / 10.;
        }
        //	Determine the number of tick marks.
        int xn = (int) ((xu - xl) / (Math.abs(quantum) / 5.));
        if (DEBUG) {
            System.out.println(""In calcTickMarks()..."");
            System.out.println(""    quantum = "" + quantum + "", aLB = "" + aLB + "", aUB = "" + aUB);
            System.out.println(""    xA = "" + xA + "", xB = "" + xB);
            System.out.println(""    xl = "" + xl + "", xu = "" + xu);
            System.out.println(""    xn = "" + xn);
        }
        //	Allocate memory for tick mark arrays.
        int[] mark = new int[xn];
        int[] lmark = new int[xn];
        float[] markValue = new float[xn];
        xn = 0;
        int i = 0;
        for (double x = xl; x <= xu; x += Math.abs(quantum) / 5., ++i) {
            //	Bounds check.
            if (q > 0.)
                if (x <= aLB || x >= aUB)
                    continue;
            if (q < 0.)
                if (x >= aLB || x <= aUB)
                    continue;
            //	Store tick mark.
            mark[xn] = (int) (func(x) * xA + xB);
            markValue[xn] = (float) x;
            if (i % 5 != 0)
                //	Minor tick mark.
                lmark[xn++] = PlotAxis.kTick;
            else
                //	Major tick mark.
                lmark[xn++] = 3 * PlotAxis.kTick;
        }
        if (DEBUG) {
            System.out.println(""Tick mark values:"");
            int length = markValue.length;
            for (i = 0; i < length; ++i) System.out.print(""   "" + markValue[i]);
            System.out.println();
        }
        //	Create a tick mark data object and pass it out.
        TickMarkData data = new TickMarkData();
        data.mark = mark;
        data.lmark = lmark;
        data.markValue = markValue;
        return data;
    }
}
","// LinearAxisScale_3Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScale_3Test {","// LinearAxisScale_3Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScale_3Test {
// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Find the position and size (in screen coordinates) of tick
     *  marks for a given axis scale.
     *
     * @param quantum Tick mark step size for the axis using this scale.
     * @param aLB Lower bounds of axis using this scale.
     * @param aUB Upper bounds of axis using this scale.
     * @param xA Scaling coefficient for this axis.
     * @param xB Scaling coefficient for this axis.
     * @return An TickMarkData object containing the tick mark positions, lengths,
     *          and data values at each tick mark.
     */
    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB) {
        double xl = 0;
        double xu = 0;
        double q = quantum;
        if (q > 0.) {
            xl = modfloor(aLB, q);
            xu = modfloor(aUB - q / 10., q / 5.) + q / 10.;
        } else {
            xl = modfloor(aUB, q);
            xu = modfloor(aLB + q / 10., q / 5.) - q / 10.;
        }
        //	Determine the number of tick marks.
        int xn = (int) ((xu - xl) / (Math.abs(quantum) / 5.));
        if (DEBUG) {
            System.out.println(""In calcTickMarks()..."");
            System.out.println(""    quantum = "" + quantum + "", aLB = "" + aLB + "", aUB = "" + aUB);
            System.out.println(""    xA = "" + xA + "", xB = "" + xB);
            System.out.println(""    xl = "" + xl + "", xu = "" + xu);
            System.out.println(""    xn = "" + xn);
        }
        //	Allocate memory for tick mark arrays.
        int[] mark = new int[xn];
        int[] lmark = new int[xn];
        float[] markValue = new float[xn];
        xn = 0;
        int i = 0;
        for (double x = xl; x <= xu; x += Math.abs(quantum) / 5., ++i) {
            //	Bounds check.
            if (q > 0.)
                if (x <= aLB || x >= aUB)
                    continue;
            if (q < 0.)
                if (x >= aLB || x <= aUB)
                    continue;
            //	Store tick mark.
            mark[xn] = (int) (func(x) * xA + xB);
            markValue[xn] = (float) x;
            if (i % 5!= 0)
                //	Minor tick mark.
                lmark[xn++] = PlotAxis.kTick;
            else
                //	Major tick mark.
                lmark[xn++] = 3 * PlotAxis.kTick;
        }
        if (DEBUG) {
            System.out.println(""Tick mark values:"");
            int length = markValue.length;
            for (i = 0; i < length; ++i) System.out.print(""   "" + markValue[i]);
            System.out.println();
        }
        //	Create a tick mark data object and pass it out.
        TickMarkData data = new TickMarkData();
        data.mark = mark;
        data.lmark = lmark;
        data.markValue = markValue;
        return data;
    }
}

// LinearAxisScale_3Test.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains one unit test case for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScale_3Test {
		@Test
		void calcTickMarks() {
			try {
				//	Create a tick marker data object and passing it to the
				//	{@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
				//	This method runs in linear quadrant units.
				LinearAxisScale instance = new LinearAxisScale();
				assertEquals(0, instance.calcTickMarks(-.1d, 0, -.1d, 0, 0));
				assertEquals(0, instance.calcTickMarks(-.1d, 0, 0, 0, 0));
				assertEquals(0, instance.calcTickMarks(-0.01d, 0, -0.1d, 0, 0));
				assertEquals(0, instance.calcTickMarks(-0.1d, 0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks((double) Math.PI / 2, 0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks((double) Math.PI / 2, -2.0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks((double) Math.PI, -2.0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks(0.1d, 0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks(0.1d, 0, -2.0, 0, 0));
				assertEquals(1, instance.calcTickMarks(0.1d, 0, -2.0, -1.0, 0));
				assertEquals(1, instance.calcTickMarks(0.1d, 0, -0.1d, 0, 0));
				assertEquals(1, instance.calcTickMarks(0.1d, 0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks(.1d, 0, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks(.1d, 0, -0.1d, 0, 0));
				assertEquals(1, instance.calcTickMarks(.1d, 0, -0.1d, -1.0, 0));
				assertEquals(1, instance.calcTickMarks(.1d, 0, -0.1d, -1.0, -.1d));
				assertEquals(1, instance.calcTickMarks(.1d, -.1d, 0, 0, 0));
				assertEquals(1, instance.calcTickMarks(.1d, -.1d, 0, 0,.1d));
				assertEquals(1, instance.calcTickMarks(.1d, -.1d, -.1d, 0, 0));
				assertEquals(2, instance.calcTickMarks(.5d, -0.1d, -.1d, 0, 0));
				assertEquals(2, instance.calcTickMarks(.5d, -0.1d, 0, 0,.5d));
				assertEquals(3, instance.calcTickMarks(.5d, 0, 0, 0, 0));
				assertEquals(3, instance.calcTickMarks(.5d, -0.1d, 0, 0, 1));
				assertEquals(3, instance.calcTickMarks(.5d, -0.1d, 0,.5d,.5d));
				assertEquals(3, instance.calcTickMarks(.5d, 0, 0, 0, 0));
				assertEquals(0, instance.calcTickMarks(.2d, 0, 0, 0, 0));
				assertEquals"
28223dab-b7af-42c4-b8d3-af8e76e9d203,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_0Test.java,62.348249435424805,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotDatum objects in this run.
     *
     * @return The number of plot data objects in this run.
     */
    public int size() {
        return data.size();
    }
}
","// PlotRun_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#size()} method.
*/
class PlotRun_0Test {","// PlotRun_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#size()} method.
*/
class PlotRun_0Test {
int runs[];
	/**
	 *  This method creates the tests for the Run object
	 *
	 *  <p>  Modified by:  Joseph A. Huwaldt  Date:  September 12, 2000
	 */
    public void run() {
        List list = new ArrayList();
        for (int i = 0; i < runs.length; i++) {
            list.add(
                    new PlotDatum(
                            new Color(
                                    0,
                                    runs[i]
                                )
                    )
            );
        }
		run(list);
    }

	/**
	*  Method to run the test
	*
	*  <p>  Modified by:  Joseph A. Huwaldt  Date:  November 21, 2000
	*/
    public void run(Collection listOfCollection) {
        Collections.sort(listOfCollection);
        int size = listOfCollection.size();
        assertEquals(size, runs.length);
        for (int i = 0; i < runs.length; i++) {
            assertEquals((Integer)i, runs[i].getNumber());
            if (i < size - 1) {
				for (int j = i + 1; j < size; j++)
					assertEquals(listOfCollection.get(j), ListUtil.lastOrNull((Collection)listOfCollection.get(j)));
            }
            else {
				assertEquals(listOfCollection.get(size - 1), listOfCollection.get(j-1));
            }
        }
    }
	/**
	*  Creates a new {@link PlotRun} object
	*
	*  <p>  Modified by:  Joseph A. Huwaldt  Date:  September 12, 2000
	*/
	private void init(int dataSize) {
		for (int i = 0; i < dataSize; i++) {
			add(new PlotDatum(
							new Color(
									0,
									dataSize
							)
                    ),
                    i
            );
		}
	}
}
"
2d432211-5d45-4eb2-a8b5-2f314490ec99,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_1Test.java,61.38771915435791,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot data object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index) {
        return data.get(index);
    }
}
","// PlotRun_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#get(int)} method.
*/
class PlotRun_1Test {","// PlotRun_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#get(int)} method.
*/
class PlotRun_1Test {

		//
		// Private fields
		//
        private static final Color WHITE = new Color(255,255,255);
        private static final int[] BOTTOM = new int[]{0,0,200,200};
        private static final int HEIGHT = 200;
        private static final int WIDTH = 200 - HEIGHT;
        
        
    // Constructors
    public PlotRun_1Test() {
        clearBox();
    }
        
    // Set up
    public void clearBox() {
        super.clearBox();
       data = new Hashtable();
        super.add(data);
    }
        
    // Clear screen
    public void clear() {
        super.clear();
    }
        
    /**
     * Tests the constructor of a PlotRun object.
     */
    @Test
    public void testConstructor() {
        // test default values
        assertTrue(""wrong size"" + data.size(), data.size() == 0);
        
        // test construction of a PlotRun with a null array
        try {
            new PlotRun(null);
            fail(""nonexistent class"");
            }
                catch(IllegalArgumentException ihe) {
                // this is good
            }
        
        // test construction of a PlotRun with a null list
        try {
            new PlotRun(null);
            fail(""nonexistent class"");
            }
                catch(IllegalArgumentException ihe) {
                // this is good
            }
        
        // test construction of a PlotRun with a non-existent plot
        PlotDatum dataTest = new PlotDatum(WIDTH * HEIGHT);
        try {
            new PlotRun(dataTest);
            fail(""plot not in array"");
            }
                catch(IllegalArgumentException ihe) {
                // this is good
            }
    }
        
    /**
     * Tests the addition of a PlotDatum object to this run.
     * The method is used to add objects which are arrays,
     * or a collection of objects.
     */
    @Test
    public void testAdd() {
        // test adding a PlotDatum object to this run
        PlotRun run = new PlotRun_1Test();
        run.data.add(new PlotDatum(WIDTH * HEIGHT));
        run.add(new PlotDatum(WIDTH * HEIGHT));
        clearBox();
        assertFalse(""wrong size"" + super.size() + "" for PlotRun object"", 
                     super.size() == 1);
    }
    
    /**
     * Tests the insertion of new objects into a PlotRun object which
     * are arrays, or a collection of objects.
     */
    @Test
    public void testAppend() {
        // test appending new objects into the set
        PlotRun run = new PlotRun_1Test();
        run.data.add(new PlotDatum(WIDTH * HEIGHT));    // put a new object into this set
        run.add(new PlotDatum(WIDTH * HEIGHT));
        clearBox();
        assertFalse(""wrong size"" + super.size() + "" for PlotRun object"", 
                     super.size() == 1);
    }
    
    /**
     * Test the equals test for a PlotRun object.
     */
    @Test
    public void testEquals() {
        // test object equality for a PlotRun object
        PlotRun run1 = new PlotRun_1Test();
        PlotRun run2 = new PlotRun_1Test();
        assertTrue(""wrong size"" + super.size() + "" for PlotRun object"", 
                   super.size() == 1);
        assertTrue(""wrong equality value for an empty object"", run1.equals(run1) && run1.equals(run2));
        
        // test an object which is not a PlotRun object 
        PlotDatum data2 = new PlotDatum(WIDTH * HEIGHT);
        PlotRun run3 = new PlotRun_1Test();
        assertFalse(""wrong size"" + super.size() + "" for PlotRun object"", 
                    super.size() == 1);
        assertFalse(""wrong equality value for an PlotRun object object"", run1.equals(run3) && run1.equals(run2));
        
        // test an object which has been added
        run3.data.add(data3);
        // add a new object
        plot3 = new PlotDatum(WIDTH * HEIGHT);
        run3.data.add(plot3);
        assertSame(""wrong value for PlotRun object before adding new object"", 
                    run2.data, run3.data);
    }
    
    /**
     * Returns a hashcode for a PlotRun object.
     */   
    @Override
    public int hashCode() {
             return super.hashCode();
    }  
    
    /**
     * Returns a clone for a PlotRun object.
     */   
    @Override
    public Object clone() {
             return super.clone();
    }
    
    /**
     * An auxiliary object for this object test
     */   
    private PlotDatum plot3;
}
"
5a879077-1cc3-4727-903d-cfa26957f003,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_2Test.java,60.22630739212036,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot data object at the specified position in
     *  this run.  Shifts any subsequent data elements
     *  to the left (subtracts one from their indices).  Returns the
     *  data element that was removed from this run.
     *
     * @param index The index of the plot data element to remove.
     * @return The PlotDatum object previously at the specified position.
     */
    public Object remove(int index) {
        return data.remove(index);
    }
}
","// PlotRun_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#remove(int)} method.
*/
class PlotRun_2Test {","// PlotRun_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#remove(int)} method.
*/
class PlotRun_2Test {

    @Test
    void testRemove(){
/**         Integer index1 = 0;
 *         Integer index2 = 1;
    */
        int count1 = 10;
        int count2 = 20;
        
        List<PlotDatum> data1 = new ArrayList<PlotDatum>();
        List<PlotDatum> data2 = new ArrayList<PlotDatum>();
        
        for (int i=0; i < 10; ++i) {
            data1.add(new PlotDatum(i, 0));
            data2.add(new PlotDatum(i, 2));
        }
        
        // Remove the first element.
        data1.remove(count1);
        assertEquals(count1, data1.size());
        
        // Remove the last element.
        data1.remove(count2);
        assertEquals(count2, data1.size());
        
        // Remove the element at index 0.
        data1.remove(count1);
        assertEquals(count1, data1.size());
    }
}

"
2ffcdd83-0af7-4cb7-836c-777031afb368,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_3Test.java,61.24973201751709,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot data elements in
     *  this run.
     *
     * @return An interation of all the PlotDatum objects in this run.
     */
    public Iterator iterator() {
        return data.iterator();
    }
}
","// PlotRun_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#iterator()} method.
*/
class PlotRun_3Test {","// PlotRun_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains one unit test case for the {@link PlotRun#iterator()} method.
*/
class PlotRun_3Test {

    // Variables
    private Iterator i;
    private String key;
    private float[] expected = {
      1.0f, 1.0f, 1.0f,
      1.0f, 2.0f, 2.0f
    };

    // Initialization
    /** 
    *  Create a TestRun object for testing.
    *
    * @param i An Iterator object to go through each test run.
    * @param key The key of the data to be plotted.  It is ignored.
    * @param expected The expected output of this run.  It is ignored.
    */
    private PlotRun_3Test(String key, Iterator i, float[] expected) {
			this.key = key;
			this.i=i;
			this.i.next();
			this.expected = expected;			
    }

    // Run
    /** 
    *  Start the iteration to test.
    *
    *  @throws Exception
    *  It is not safe to call this method.
    *  It is only useful as a temporary test to see what
    *  has taken place and it can be interrupted in its
    *  way.   */           
    @Test
    public void test() throws Exception {
		
    }

	// Clone
    /** 
    *  Clone an object of this class.
    *
    * @return A reference to this object.
    */
    @Override
    public Object clone() {
		
       return new PlotRun_3Test(key, new Iterator(), expected);
    }	
}
"
399777ab-b0dc-4295-aec2-42c4cced1912,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_0Test.java,60.859833002090454,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotRun objects in this run list.
     *
     * @return The number of plot run objects in this run list.
     */
    public int size() {
        return data.size();
    }
}
","// PlotRunList_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#size()} method.
*/
class PlotRunList_0Test {","// PlotRunList_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#size()} method.
*/
class PlotRunList_0Test {
private static final double DELTA_BETWEEN_POINTS = 0.005;

	/**
   *  Tests if the {@link PlotRunList#size()} method returns the expected
   *  value.
   */


	@Test
	void test_size() {
		assertEquals(data.size(), size(), ""+/-"");
	}

	/**
   *  Test if the {@link PlotRunList#getRun(int)} returns the expected
   *  PlotRun object.
   */


	@Test
	void test_getRun() {

		assertNotNull(data.getRun(0).color);
		assertEquals(new Color(0, 255, 255), data.getRun(0).color);
	}

	/**
   *  Test if the {@link PlotRunList#appendRun(PlotRun)} inserts the
   *  {@link PlotRun} in this run list to the end of the list.
   */


	@Test
	void appendRun_insert() {

		PlotRun run_3 = new SimplePlotRun();
		data.setRun(0, run_3);
		assertEquals(data.getRun(0), run_3);
		assertTrue(data.size() > 0);
		data.appendRun(run_3);
		assertEquals(data.getRun(0), run_3);
		assertEquals(data.size(), 1);
	}

	/**
   *  Test if the {@link PlotRunList#removeRun(int)} deletes the
   *  {@link PlotRun} the specified run.
   */


	@Test
	void removeRun_deletion() {

		assertNull(data.removeRun(0));
		assertTrue(data.size() == 0);
		assertEquals(data.getRun(1), null);
	}

	/**
   *  Tests if the size() method changes the state of the objects in the
   *  run list.
   */


	@Test
	public void test_ensures() {

		Vector old_data = new Vector(data);

		data.setRun(0, null);
		Vector newval = new Vector(data);
		ListIterator it = newval.listIterator();
		while (it.hasNext()) {
			it.next();
			it.set(null);
		}
		assertEquals(old_data.size(), newval.size());
		assertFalse(newval.contains(old_data.firstElement()));
	}

	/**
   *  Create a copy of the run list and adds itself to it.
   */

	@Test
    public void test_add() {

		Vector old_data = new Vector(data);

        plot_1.setData(data);
        plot_1.addRun(data);
        Vector newval = new Vector(plot_1);


        ListIterator it = newval.listIterator();
        while (it.hasNext()) {
            it.next();
            it.set(null);
        }
		assertEquals(old_data.size(), newval.size());
		assertFalse(newval.contains(old_data.firstElement()));

	}

	private final static void show_run(Object object) {
		((PlotRun)object).show();
	}

	/**
   *  Create and show a simple plot using random data and adds it to the end of
   *  the run list.
   */

	@Test
	public void test_add_rnd_plot() {

		for(int i=0;i<100;i++) {
			Vector old_data = new Vector(data);
			for (int j = 0; j < 3; j++) {
				show_run(plot.addPlotRun((PlotRun)new SimplePlotRun()));
				PlotRun run_2 = plot.getPlotRun(1);
				assertNotNull(run_2);
			}
			for (int j = 0; j < 10; j++) {
				show_run(plot_1.addRun(new SimpleRun()));
			}
			Vector newval = new Vector(plot_1);
			ListIterator it = newval.listIterator();
			while (it.hasNext()) {
			it.next();
			it.set(null);
			}
			assertEquals(newval.size(), old_data.size());
			assertFalse(old_data.contains(newval.firstElement()));
		}
	}
}
"
1ea30b2c-c759-4351-a521-293843a532e0,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_1Test.java,59.99420666694641,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotRun object at the specified position
     *  in this run list.
     *
     * @param index The index of the plot run object to return.
     * @return The PlotRun object at the specified position
     *           in this run.
     */
    public Object get(int index) {
        return data.get(index);
    }
}
","// PlotRunList_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#get(int)} method.
*/
class PlotRunList_1Test {","// PlotRunList_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#get(int)} method.
*/
class PlotRunList_1Test {
/**
		 *  Initializes a {@Link PlotRunList_1Test} object.
		 */
	@Test
    public void initialize_() {
        Object[] data1 = new Object [] { PlotDate.get(8,2), null, new Color(255, 0, 0), 7.5, ""Data 0""};

    }

	/**
	 *  Calls {@link PlotRunList#get(int)} and compares the retrieved
	 *  object with the expected object.
	 */
	@Test
	public void get_with_index_test() {
		//Arrays to copy with reference
		List<PlotRun_1> runList = new ArrayList<>();
		PlotRun_1 newRunList = PlotRun_1.get(runList);

	}

	/**
	 *  Calls {@link PlotRunList#add(PlotRun)} and compares the result with the
	 *  expected object, which cannot be inserted using an {@link Object#hashCode()}
	 *  method.
	 */
	@Test
    public void add_with_result_test() {
        PlotRun_1 newRunList = new PlotRunList (runList);
        List<PlotRun_1> resultList = newRunList.add (new PlotRun_1(new Date(2), new Data(new Color(0,255,0), new Double(7.5)), new PlotDate(10,9.)));


	}

	/**
	 *  Calls {@link PlotRunList#add(PlotRun)} with the results that the new
	 *  run should take as parameters.
	 */
	@Test(expected = IndexOutOfBoundsException.class)
    public void add_with_add_run_error_test() {
        PlotRun_1 newRunList = new PlotRunList (runList);
        newRunList.add (new PlotRun_1(new Date(2), new Data(new Color(0,255,0), new Double(7.5)), new PlotDate(10,9.)));


	}


	/**
	 *  Calls {@link PlotRunList#set(int, PlotRun)} and compares the retrieved
	 *  set-with-expected object.
	 */
	@Test
    public void set_with_set_element_test() {
        List<PlotRun_1> runList = new ArrayList<>();
        runList.add (PlotRun_1.get(new Date(1), new Data(new Color(0,0,255), new Double(100*7.5)))) ;
        runList.add (PlotRun_1.get(new Date(1), new Data(new Color(0,255,0), new Double(100*7.5)))) ;

        List<PlotRun_1> newRunList = new PlotRunList(runList);

		assertNull(newRunList.remove(new PlotRun_1 (new Date(2), new Data(new Color(0,0,255), new Double(100*7.5)))) );


	}



	



}
"
395fcd1e-ffb4-4d2d-90ff-8f14bc47eb4f,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_2Test.java,59.09930229187012,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot run object at the specified position in
     *  this run list.  Shifts any subsequent run elements
     *  to the left (subtracts one from their indices).  Returns the
     *  run element that was removed from this run list.
     *
     * @param index The index of the plot run element to remove.
     * @return The PlotRun object previously at the specified position.
     */
    public Object remove(int index) {
        return data.remove(index);
    }
}
","// PlotRunList_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunList_2Test {","// PlotRunList_2Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunList_2Test {
@Test
		void removeRun_ShouldReturnLastItemAsRemoveResultOfRemove() {
			PlotRunList runList = new PlotRunList();

			assertEquals(runList.remove(0), null);
		}
}"
d7e5814a-22c3-4a8e-a654-e82292a22376,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_3Test.java,60.5273642539978,stop,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot run elements in
     *  this run list.
     *
     * @return An interation of all the PlotRun objects in this list.
     */
    public Iterator iterator() {
        return data.iterator();
    }
}
","// PlotRunList_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#iterator()} method.
*/
class PlotRunList_3Test {","// PlotRunList_3Test.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains one unit test case for the {@link PlotRunList#iterator()} method.
*/
class PlotRunList_3Test {
/**
		 * Test the iterator method for a run list. Check the
		 * following conditions:
		 * <ul>
		   <li>a run has fewer plots in it than it should have.</li>
		              <li>an runs list has fewer plots than it should have.</li></ul>
		   <p>
		   The test case is executed by <code>$ java -cp /Users/t.a.ciao/Projects/Plot/tests/src/jahuwaldt</code>
		</p>
		*/
	@Test
        public <T extends Run> void test0() {

        List runs = new ArrayList();
        T start = new T(0f, 0, 0);
        for (int i = 0f; i < 5; i++) {
            runs.add(new PlotRun(start, new PlotDatum((long) 5)));
            start.setZ((long) 5);
            start.setX((long) 10);
        }

        int last = ((PlotData) runs.get(runs.size()-1)).getNumber();
        int size = runs.size();

        assertEquals(size, runs.size());
        // now make sure that everything is the same

        for (int count=size-1; count >= 0; count--) {
            int run_number = ((PlotRun) runs.get(count)).getNumber();
            int run_start, run_end, step, length;
            
            run_start = ((PlotRun) runs.get(count)).getStart();
            if (count < last) {
                // The start position is at this point
                run_end = start.getNumber();
            } else {
                // The start position is now at the last position we expect.
                run_end = last;
            }

            step = run_start - run_end;
            length = step / size;

            //System.out.println(run_start + "" --> "" + run_end + "" -- "" + length);
            
            // Check that things are consistent
            assertEquals(""Plots are different in run ["" + count + ""] ("" + run_start + "", ""+run_end+""), ""+run_number + "":""
                    + "" runs, run_start=""+run_start+"", run_length=""+length, runs.size(), count);

            start = ((PlotRun) runs.get(count)).getStart();
            if (count >= last) {
                // the last position is at the end, so we assert this
                assertEquals(""Plots are different in run ["" + count + ""] (run_end, ""+run_end+"")""), count+1, runs.size());
            }
            if (count < last) {
                // The end position is now at the last position we expect.
                assertEquals(""Plots are different in run ["" + count + ""] ("" + run_start + "", ""+run_end+"")""), count+1, runs.size());
            }
            //System.out.println(size+"" run numbers are the same"")
        }
		}
}
"
0b314b1b-958b-4303-ac3f-d271289cadc7,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java,58.05953288078308,stop,"// ContourGenerator.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> An object used to generate a list of contour lines
 *      or paths from a set of gridded three dimensional data.
 *  </p>
 *
 *  <p> Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,
 *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,
 *      Moffett Field, CA 94035.
 *      I don't know how the original Fortran code looked like or where it came from,
 *      other than that NeXTcontour1.4 is based on Pieter Bunings' PLOT3D package
 *      for Computational Fluid Dynamics.
 *  </p>
 *
 *  <p> Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourGenerator {

    /**
     *  Returns true if the contour generation process is done.  False if it is not.
     */
    public boolean done() {
        return cCalculated;
    }
}
","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains one unit test case for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains one unit test case for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {
List<Point> points;
}
"
044047de-af7e-4b59-8155-630364a998bf,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_0Test.java,31.90531635284424,stop,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return errBarFlg;
    }
}
","// PlotDatum_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatum_0Test {","// PlotDatum_0Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatum_0Test {
static PlotDatum_0Test INSTANCE = new PlotDatum_0Test();
		boolean errBarFlg;

public Boolean hasErrorBar() {
        return errBarFlg;
}

} // Test_2

// PlotDatum_1_2Test.java
"
583394dc-1823-4815-95a3-e93bebd8a5ee,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_1Test.java,45.120426416397095,stop,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Return true if this datum is connected to the previous one by a line
     *  and false if it is not.
     */
    public boolean connected() {
        return conFlg;
    }
}
","// PlotDatum_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#connected()} method.
*/
class PlotDatum_1Test {","// PlotDatum_1Test.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains one unit test case for the {@link PlotDatum#connected()} method.
*/
class PlotDatum_1Test {
private int conflg;


	/**
	 *  Return true if this datum is connected by another datum by a line
	 *  and false if it is not.
	 */
	@Test
	public  void datumIsConnected() {
		int oldVal;
		int newVal;
		PlotDatum testPnt;

		newVal = 0;
		oldVal = 1;

		oldPnt = new PlotDatum_1_1(2,newVal);
		newPnts = new PlotDatum[2];
		newPnts[0] = oldPnt;
		newPnts[1] = new PlotDatum_1_2(1,newVal);

		conflg = 0;
		oldPnt.connected();
		assertEquals(oldPnt,newPnts[0]);
		assertEquals(oldPnt,newPnts[1]);
		testPnt = oldPnt;
		for(int i = 0; i < 10; i++ ) {
			conflg = 0;
			testPnt = oldPnt;
			oldPnt.connected();
			assertEquals(oldPnt,testPnt);
			testPnt = new PntDatum_1_1();
			conflg = 0;
			testPnt = oldPnt;
			oldPnt.connected();
			assertNotEquals(oldPnt, testPnt);
			conflg = 0;
			oldPnt.connected();

			testPnt = new PntDatum_1_2();
			conflg = 0;
			testPnt = oldPnt;
			oldPnt.connected();
			assertNotEquals(oldPnt, testPnt);
		}

	}

	@Test
	public void datumHasValue() {
		try {
			int val = 1;
			PlotPntDatum_1 pnt;
			newPnts[0].connected();
			newPnts[1].connected();
			pnt = new PNTDatum(newPnts)[0];

            assertEquals(val,pnt.value());
	        int val2 = pnt.value();
	        pnt.value(50);
	        assertNotEquals(val,val2);
	    }
		catch(NumberFormatException e) {
            fail();
        }
	}

	@Test
	public void getName() {
		String name = new PlotDatum_1().getName();
		try {
			assertEquals(""Datum-1"",name);

		}
		catch(NullPointerException e) {
            fail();
        }
	}

	@Test(expected=NullPointerException.class)
	public void makeFromNull() {
		new PlotDatum();
	}


	/**
	* Create the object.
	*
	* @return the object.
	*/
	@Test
	public void clone() {

    new PNTDatum_1(1);

		new PNTDatum_1();

	}

	@Test
	public void getType() {
		assertEquals(""PlotDatum"",new PNTDatum_1().getType());
	}


}
// PlotDatum_3Test.java
"
f3ad1634-e07a-4814-a611-b5f7ef4b738d,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_0Test.java,47.86131191253662,stop,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract energy from the final APBS output file.
     *
     * @param filename Path to APBS output file.
     * @return String array of total energies in kilojoules, kilocalories and k_BT
     */
    public String[] getEnergy(String filename) {
        //returns [0] energy in kJ/mol, then [1] is in kcal/mol
        File temp = new File(filename);
        String[] energies = new String[3];
        if (!temp.exists())
            return null;
        else {
            NumberFormat formatter = new DecimalFormat(""0.####E0"");
            double finalenergy = 0;
            try {
                Scanner fScan = new Scanner(new FileInputStream(filename));
                String nextline;
                //tells whether solvated or reference
                boolean solvated = true;
                while (fScan.hasNextLine()) {
                    nextline = fScan.nextLine();
                    if (nextline.contains(""elec name solvated"")) {
                        solvated = true;
                    } else if (nextline.contains(""elec name reference"")) {
                        solvated = false;
                    } else if (nextline.contains(""Global net ELEC energy "") && solvated) {
                        //if found energy and its in solvated
                        System.out.println(nextline);
                        if (nextline.contains(""+"")) {
                            //if its time 10^positive int
                            finalenergy = toDoublePos(nextline);
                        } else {
                            //if its time 10^negative int
                            finalenergy = toDoubleNeg(nextline);
                        }
                    }
                }
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            energies[0] = formatter.format(finalenergy) + "" kJ/mol"";
            energies[1] = formatter.format(finalenergy * 0.239) + "" kcal/mol"";
            energies[2] = formatter.format(finalenergy * 0.4035) + "" kT"";
            return energies;
        }
    }
}
","// FileEditor_0Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditor_0Test {","// FileEditor_0Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditor_0Test {

	/**
	 * Get energy from the input file, and return the result in kcal/mol.
	* @throws FileNotFoundException throws an {@link FileNotFoundException} if file is not found.
	* @throws IOException throws if there is I/O error.
	* @throws ParsingException throws if parsing error occurs.
	*/
	@Test
	public void getEnergy() throws FileNotFoundException, IOException, ParsingException {
		//returns [0] energy in kJ/mol, then [1] is in kcal/mol
		File filename = new File(""src/test/resources/FileEditor_Test/Energy/final_filename.txt"");
		
        String[] energies1 = getEnergy(filename);
        System.out.println(energies1);
		if (energies1[1]!= ""final_filename.txt"")
			System.err.println(""Wrong value in final_filename.txt"");
        assertNotNull(energies1);
	}
	
	// FileEditor_1DTest.java
	/**
	* Test of getFinalIndex method, of class FileEditor.
	* It contains all the method that are tested in other class FileEditor_0Test.
	*/
	@Test
	public void getFinalIndex() {
		
	}
	
	// FileEditor_2DTest.java
	/**
	* Test of getFinalIndex and getMaxInt method, of class FileEditor.
	* It contains all the method that are tested in other class FileEditor_0Test.
	*/
	@Test
	public void getFinalIndexAndMaxInt() {
		File out = new File(""dest/result"");
		//File out = new File(""result.txt"");
		//File out = new File(""result.txt"");
		//File out = new File(""result.txt"");

		File fOut = testOutputOutput(out, false);
		assertTrue(fOut.exists());

		int iMax = FileEditor.getMaxInt(fOut);
		//assertEquals(iMax, Integer.parseInt(out.getName()));
		//assertEquals(iMax, FileEditor.getMaxInt(out));
	}


	// FileEditor_3DTest.java
	/**
	* Test of getMaxInt and getFinalIndex method, of class FileEditor.
	* It contains all the method that are tested in other class FileEditor_0Test.
	*/
	@Test
	public void getMaxIntAndFinalIndex() {
		File out = new File(""dest/result"");
		//File out = new File(""result.txt"");
		//File out = new File(""result.txt"");

		File fOut = testOutputOutput(out, false);
		assertTrue(fOut.exists());

		int iMax = FileEditor.getMaxInt(fOut);
		//assertEquals(iMax, Integer.parseInt(out.getName()));
		//assertEquals(iMax, FileEditor.getMaxInt(out));
	}
	

	// FileEditor_4DTest.java
	/**
	* Test of getMaxInt method, of class FileEditor.
	* It contains all the method that are tested in other class FileEditor_0Test.
	*/
	@Test
	public void getMaxInt() {
		File out = new File(""dest/result.txt"");
		//File out = new File(""result.txt"");

		File fOut = testOutputOutput(out, false);
		//assertFalse(fOut.exists());
		//assertFalse(""no test set"", fOut.exists());
	}



	// FileEditor_5DTest.java
	/**
	* Test of getFinalIndex, of class FileEditor.
	* It contains all the method that are tested in other class FileEditor_0Test.
	*/
	@Test
	public void getFinalIndex() {
		File out = new File(""dest/result"");
		//File out = new File(""result.txt"");

		File fOut = testOutputOutput(out, true);
		
		String[] energies1 = getEnergy(fOut);
		
		assertNotNull(energies1);
		Integer iMax = FileEditor.getMaxInt(fOut);
		assertNotNull(iMax);
		assertEquals(iMax, Integer.parseInt(energies1[1] ));
	}
	
	private String toDoubleNeg(String val) {
		return val.substring(0,val.length()-2);
	}
	
	private String toDoublePos(String val) {
		return val.substring(2,val.length()-1);
	}

	private String testOutputOutput(File out, boolean showText) {
		if (showText) {
			FileOutputStream outFile = null;
			try {
				outFile = new FileOutputStream(out);
				outFile.write(""final_filename.txt"".getBytes( ""UTF-8"" ));
				outFile.close();
			} catch (FileNotFoundException err) {
				System.err.println(err);
				assertFalse(""no test set"", out.exists());
			}

			String out_string = new Scanner(outFile).useDelimiter(""\n"").next();
			return out_string;
		} else {
			return out.getName();
		}
	}
}
"
56941522-a93e-462f-92ce-01478ed33bcc,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_1Test.java,40.84574508666992,stop,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract the energy from a calculation that has summed the component atom energies
     * rather than simply taking the total. (pull_comps.c)
     *
     * @param filename Path to the file written by pull_comps with the energy sum.
     * @return a double array of the total energy of each calculation (up to 6 calculations if there are 3 focus levels).
     */
    public double[] getCompEnergy(String filename) {
        File temp = new File(filename);
        if (!temp.exists())
            return null;
        else {
            double[] finalenergy = new double[6];
            int i = 0;
            try {
                Scanner fScan = new Scanner(new FileInputStream(filename));
                String nextline;
                double D;
                while (fScan.hasNextLine()) {
                    nextline = fScan.nextLine();
                    System.out.println(nextline);
                    if (!nextline.equals("""")) {
                        if (nextline.contains(""+"")) {
                            //if its time 10^positive int
                            D = Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(""+"") - 1)));
                            D *= Math.pow(10, Double.parseDouble(nextline.substring(nextline.indexOf(""+"") + 1)));
                            //  /(temperature*0.008314472); // convert to kT
                            finalenergy[i] = D;
                        } else {
                            //if its time 10^negative int
                            D = Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(""-"") - 1)));
                            D *= Math.pow(10, Double.parseDouble(nextline.substring(nextline.lastIndexOf(""-""))));
                            //  /(temperature*0.008314472);
                            finalenergy[i] = D;
                        }
                        i++;
                    }
                }
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            return finalenergy;
        }
    }
}
","// FileEditor_1Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditor_1Test {","// FileEditor_1Test.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains one unit test case for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditor_1Test {
FileManager filemanager;
		public FileEditor_1Test() {
			filemanager = new FileManager();
		}
		public void testGetCompEnergy(String inputFileName) {
			File[] files = filemanager.listFiles();
			//System.out.print(files.length);
			if (files.length > 0 && files.length == 1)
				filemanager.readFile(files[0], filename);
			System.out.println(filemanager.getCompEnergy(filename));
		}
}

/**
* Unit test class for {@link FileEditor}.
*/
class FileEditor_1 {
	public static final String filename = """";	// the name of the file
	public static final double[] energyFile = Double.NaN;// the arrays with the energy
	public static final FileManager filemanager;
	public static final String fileExt = "".txt"";
	public static final String newname = """";	// the new name
}"
adbc1828-e13d-461c-bd6b-e7aea388b0f8,/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/Main.java,7.00364089012146,length,"// Main.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;

/**
 * @author Keith Callenberg, Gabriel de Forest
 */
public class Main {

    /**
     * Store the current GUI text field values in the inFile object.
     *
     * @return True if the operation was succesful, false otherwise.
     */
    public boolean SaveData() {
        if (pqrFile1.getText().equals("""") || pqrFile1.getText() == null || gridDimx.getText().equals("""") || gridDimx.getText() == null || gridDimy.getText().equals("""") || gridDimy.getText() == null || gridDimz.getText().equals("""") || gridDimz.getText() == null || gridLen1a.getText().equals("""") || gridLen1a.getText() == null || gridLen2a.getText().equals("""") || gridLen2a.getText() == null || gridLen3a.getText().equals("""") || gridLen3a.getText() == null || countIon1Charge.getText().equals("""") || countIon1Charge.getText() == null || countIon1Con.getText().equals("""") || countIon1Con.getText() == null || countIon1Sz.getText().equals("""") || countIon1Sz.getText() == null || countIon2Charge.getText().equals("""") || countIon2Charge.getText() == null || countIon2Con.getText().equals("""") || countIon2Con.getText() == null || countIon2Sz.getText().equals("""") || countIon2Sz.getText() == null || proteinDi.getText().equals("""") || proteinDi.getText() == null || solventDi.getText().equals("""") || solventDi.getText() == null || srad.getText().equals("""") || srad.getText() == null || sdens.getText().equals("""") || sdens.getText() == null || temp.getText().equals("""") || temp.getText() == null) {
            if (maxfocus > 0 && (gridLen1b.getText().equals("""") || gridLen1b.getText() == null || gridLen2b.getText().equals("""") || gridLen2b.getText() == null || gridLen3b.getText().equals("""") || gridLen3b.getText() == null)) {
                if (maxfocus > 1 && (gridLen1c.getText().equals("""") || gridLen1c.getText() == null || gridLen2c.getText().equals("""") || gridLen2c.getText() == null || gridLen3c.getText().equals("""") || gridLen3c.getText() == null)) {
                    if (file_loaded) {
                        //if you arent opening it and it fails then fail
                        JOptionPane.showMessageDialog(null, ""Fill in all values first"", """", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
        }
        //otherwise save data
        inFile.setMol1(pqrFile1.getText());
        inFile.setMol2(pqrFile2.getText());
        inFile.setDime(new String(gridDimx.getText() + "" "" + gridDimy.getText() + "" "" + gridDimz.getText()));
        inFile.setGlen(new String(gridLen1a.getText() + "" "" + gridLen2a.getText() + "" "" + gridLen3a.getText()), 0);
        if (maxfocus > 0) {
            inFile.setGlen(new String(gridLen1b.getText() + "" "" + gridLen2b.getText() + "" "" + gridLen3b.getText()), 1);
        }
        if (maxfocus == 2) {
            inFile.setGlen(new String(gridLen1c.getText() + "" "" + gridLen2c.getText() + "" "" + gridLen3c.getText()), 2);
        }
        inFile.setIon1Charge(countIon1Charge.getText());
        inFile.setIon1Conc(countIon1Con.getText());
        inFile.setIon1Radius(countIon1Sz.getText());
        inFile.setIon2Charge(countIon2Charge.getText());
        inFile.setIon2Conc(countIon2Con.getText());
        inFile.setIon2Radius(countIon2Sz.getText());
        inFile.setProteinDi(new String(proteinDi.getText()));
        inFile.setSolventDi(new String(solventDi.getText()));
        inFile.setSrad(srad.getText());
        inFile.setSdens(sdens.getText());
        inFile.setTemp(temp.getText());
        inFile.setType(calcTypeCombo.getSelectedIndex());
        inFile.setPotential(potential.getText());
        inFile.setLmem(Lmem.getText());
        inFile.setZmem(zmem.getText());
        inFile.setMdie(membraneDi.getText());
        inFile.setIdie(idie.getText());
        inFile.setGeo1(geoFactor1.getText());
        inFile.setGeo2(geoFactor2.getText());
        inFile.setGeo3(geoFactor3.getText());
        inFile.setDrawPot(drawPot.isSelected());
        if (boundaryCondCombo.getSelectedIndex() == 2) {
            inFile.setBoundCond(new String(""mdh""));
        } else if (boundaryCondCombo.getSelectedIndex() == 1) {
            inFile.setBoundCond(new String(""sdh""));
        } else if (boundaryCondCombo.getSelectedIndex() == 0) {
            inFile.setBoundCond(new String(""zero""));
        }
        if (solMethodCombo.getSelectedIndex() == 1) {
            inFile.setSolMethod(new String(""npbe""));
        } else if (solMethodCombo.getSelectedIndex() == 0) {
            inFile.setSolMethod(new String(""lpbe""));
        }
        if (centerCombo.getSelectedIndex() == 0) {
            inFile.setCenter(new String(""0 0 0""));
        } else if (centerCombo.getSelectedIndex() == 1) {
            inFile.setCenter(new String(""mol 1""));
        }
        return true;
    }
}
","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#SaveData()} method.
*/
class MainTest {","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#SaveData()} method.
*/
class MainTest {
class Test {
                        public final JmolPopup popup;
                        String file;
                        JmolPopup jmol;
			public String popupMol1 = """";
			String popupMol2 = """";
			String jmolMol1 = """";
			String jmolMol2 = """";
			public Test(String mol,JmolPopup jmol,String mol1,String mol"
