[
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /** Constructor. */\n    public TransportKeyStoreBean_0Test() {\n    }\n\n    /**\n     * Teste ao efetuar a execu\ufffd\ufffdo de uma transporta uma chave que ser\ufffd\n     * salvo com uma senha no senha.\n     */\n    @Test\n    public void testUnaSala() throws Exception {\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "original_generated_code": "\n    /** Constructor. */\n    public TransportKeyStoreBean_0Test() {\n    }\n\n    /**\n     * Teste ao efetuar a execu\ufffd\ufffdo de uma transporta uma chave que ser\ufffd\n     * salvo com uma senha no senha.\n     */\n    @Test\n    public void testUnaSala() throws Exception {\n        try {\n            // Setar os par\u00e2metros do transporte (op\u00e7\ufffdo da sessao) para o arquivo de sala\n            System.setProperty(\"file.separator\", \"/\");\n            String uri = SecurityUtils.getServerContext().getRealm()\n               .getKeyStoreFile()\n               .toString()\n               .substring(0,\n                    SecurityUtils.getServerContext().getRealm()\n                       .getKeyStoreFile().toString()\n                       .length());\n            SecurityUtils.setServerContext(\n                    new KeyStore.Builder().setKeyStoreType(keyStoreType)\n                       .setKeyStoreResource(uri)\n                       .setKeyStore(SecurityUtils.getTransportSecurityInfo()\n                    ).build());\n            // Executa uma chave na sess\ufffdo que o envio ao ser de caminho\n            KeyManagerFactory kmf = SecurityUtils.getTransportSecurityInfo()\n                   .getKeyManagerFactory();\n            \n            // Setar \"keyStoreUri\" para ser usado como \"keyStoreType\"\n            uri = String.format(\"file:%s\",\n                    keyStoreUri);\n            KeyStore keyStore = SecurityUtils.getServerContext()\n                   .getRealm()\n                   .getKeyStore(keyStoreType);\n            assertNotNull(\"Failed to add key\", keyStore);\n            \n            // Executa o comando \"TrustStore\", mas aparece que verificar se\n            // uma chave de senha n\ufffdo se pode gerar uma chave.\n            KeyManagerFactory kmfTrustStore = keyManagerFactory(\n                        trustStoreType, trustStorePassword);\n            \n            Object keyStorePass = SecurityUtils.getTransportSecurityInfo()\n                   .getTransportKeyStorePassword();\n            assertTrue(\"Secretar keyStorePassword \u00e9 n\ufffdo igual ao que a password ser encontrado no envio\",\n                    keyStorePassword.equals(keyStorePass));\n            \n            TrustManagerFactory tmfTrustStore = trustManagerFactory(\n                    keyManagerFactories, \"\");\n            \n            KeyManager[] keyManagers = KeyManagerFactory.getInstance(\n                    kmf.getDefaultAlgorithm())\n                   .getKeyManagers();\n            ArrayList<TrustManagerFactory> all = new ArrayList<>();\n            all.addAll(Arrays.asList(keyManagers));\n            \n            // Executa o comando \"TrustAll\", que inexcluir a lista de gera\ufffd\ufffdors.\n            Boolean val = keyManagerFactory(\n                    trustStoreType, trustStorePassword)\n                    .hasTrustManager(\"\"/* all */);\n            assertFalse(\"Failed to have a manager for trustStore type\",\n                    val);\n            \n            // Executa a execu\ufffd\ufffdo da chave no cliente tudo\n            Object keyStoreUri = SecurityUtils.getTransportSecurityInfo().getKeyStoreFile();\n            keyStoreUri = SecurityUtils.getServerContext().getAuthenticationUri()\n                   .resolve(uri, keyStoreUri);\n            TrustManagerFactory tmfKeyManager = trustManagerFactory(\n                    keyStoreType, trustStorePassword);\n            keyManagerFactory(kmfStore, keyStoreUri).deleteKeyManager(keyStoreUri);\n            kmfTrustStore.deleteTrustManager(\"\"/* keyManagers */);\n            \n            // Executa a execu\ufffd\ufffdo da chave no cliente tudo.\n            Object keyStoreUri2 =\n                    SecurityUtils.getServerContext().getAuthenticationUri()\n                           .resolve(uri, keyStoreUri);\n            KeyManagerFactory kmfTrustManager = trustManagerFactory(\n                    keyStoreType, trustStorePassword);\n            kmfTrustManager.getTrustManager(\"\"/* keyManagers */)\n            \t\t.loadTrustMaterial(kmfKeyManager, true)\n            \t\t.checkServerTrusted(kmfTrustManager, kmfCertificateFile);\n            \n            // Executa a execu\ufffd\ufffdo da chave no cliente tudo com \"keyStorePassword :\"\n            keyStoreUri = SecurityUtils.getServerContext().getAuthenticationUri()\n                   .resolve(uri, keyStoreUri);\n            keyManagerFactory(kmfStore, keyStoreUri)\n                   .loadKeyMan",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\tprivate final KeyStore keyStore = new JNFEKeyStore();\n\t\tprivate final KeyManagerFactory keyManagerFactory = new JNFEKeyManagerFactory();\n\t\tprivate final KeyStore trustedKeyStore = new JNFEKeyStore();\n\t\tprivate final KeyManagerFactory trustedKeyManagerFactory = new JNFEKeyManagerFactory();\n\n        private JNFEKeyStore_0 testKeyStore;\n        private JNFEKeyManager_0 testKeyManagerFactory;\n\n        /**\n         * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         *\n         */\n        @Test\n        public void testOpenTransportStore() throws Exception {\n\n        \ttrustedKeyManagerFactory = new JNFEKeyManagerFactory();\n        \ttrustedKeyManagerFactory.init(SecurityUtils.getPass(SecurityUtils.PASS));\n\n        \tkeyManagerFactory.init(SecurityUtils.DEFAULT_KEYMANAGER_PASS);\n        \tTrustedTrustManager trustManager = new TrustedTrustManager();\n        \ttrustManager.init(trustedKeyManagerFactory);\n        \t\n        \t/**\n         \t * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         \t *\n         \t * @throws Exception\n         \t */\n\n        \ttestKeyStore.init(testKeyManagerFactory, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASS);\n        \tassertTrue(\"keyStore is not open yet\",!TestTrustManager.isOpen(trustManager));\n        \tassertTrue(\"keyManager factory is not open yet\",!TestTrustManager.isOpen(trustManagerFactory));\n        \tassertEquals(\"trust manager instance is not of type \" + JNFEKeyManagerFactory.TYPE + \" \" + trustManager.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustManager.getClass().getName());\n        \tassertEquals(\"keyManager factory instance is not of type \" + JNFEKeyManagerFactory.TYPE + \" \" + trustManagerFactory.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustedKeyManagerFactory.getClass().getName());\n        \t\n        \ttestKeyManagerFactory.deInit();\n        \ttestKeyManagerFactory.deInit();\n\n        \t/**\n         \t * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         \t *\n         \t */\n        \tkeyManagerFactory.deInit();\n        \tkeyManagerFactory.deInit();\n        \tkeyManagerFactory.deInit();\n\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "H7",
        "original_generated_code": "private final KeyStore keyStore = new JNFEKeyStore();\n\t\tprivate final KeyManagerFactory keyManagerFactory = new JNFEKeyManagerFactory();\n\t\tprivate final KeyStore trustedKeyStore = new JNFEKeyStore();\n\t\tprivate final KeyManagerFactory trustedKeyManagerFactory = new JNFEKeyManagerFactory();\n\n        private JNFEKeyStore_0 testKeyStore;\n        private JNFEKeyManager_0 testKeyManagerFactory;\n\n        /**\n         * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         *\n         */\n        @Test\n        public void testOpenTransportStore() throws Exception {\n\n        \ttrustedKeyManagerFactory = new JNFEKeyManagerFactory();\n        \ttrustedKeyManagerFactory.init(SecurityUtils.getPass(SecurityUtils.PASS));\n\n        \tkeyManagerFactory.init(SecurityUtils.DEFAULT_KEYMANAGER_PASS);\n        \tTrustedTrustManager trustManager = new TrustedTrustManager();\n        \ttrustManager.init(trustedKeyManagerFactory);\n        \t\n        \t/**\n         \t * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         \t *\n         \t * @throws Exception\n         \t */\n\n        \ttestKeyStore.init(testKeyManagerFactory, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASS);\n        \tassertTrue(\"keyStore is not open yet\",!TestTrustManager.isOpen(trustManager));\n        \tassertTrue(\"keyManager factory is not open yet\",!TestTrustManager.isOpen(trustManagerFactory));\n        \tassertEquals(\"trust manager instance is not of type \" + JNFEKeyManagerFactory.TYPE + \" \" + trustManager.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustManager.getClass().getName());\n        \tassertEquals(\"keyManager factory instance is not of type \" + JNFEKeyManagerFactory.TYPE + \" \" + trustManagerFactory.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustedKeyManagerFactory.getClass().getName());\n        \t\n        \ttestKeyManagerFactory.deInit();\n        \ttestKeyManagerFactory.deInit();\n\n        \t/**\n         \t * Test of openTransportStore method, of class javax.net.ssl.TrustManagerFactoryImpl.\n         \t *\n         \t */\n        \tkeyManagerFactory.deInit();\n        \tkeyManagerFactory.deInit();\n        \tkeyManagerFactory.deInit();\n\n        \tSecurityUtils.deinitSecurity(keyManagerFactory){\n        \t\t   testKeyManagerFactory.deInit();\n        \t\t   testKeyManagerFactory.deInit();\n        \t\t   testKeyManagerFactory = null;\n        \t\t   testKeyManagerFactory = keyManagerFactory;\n        \t\t   testKeyManagerFactory.init(SecurityUtils.getPass(SecurityUtils.PASS));\n        \t\t   assertTrue(\"keyStore is not open yet\",!TestTrustManager.isOpen(trustManager));\n        \t\t   assertTrue(\"keyManager factory is not open yet\",!TestTrustManager.isOpen(trustManagerFactory));\n        \t\t   assertEquals(\"trust manager instance is not of type \" + JNFE_TYPE + \" \" + trustManager.toString(),\n        \t\t\t\t\t  JNFEKeyManagerFactory.TYPE, trustManager.getClass().getName());\n            }\n\n        \ttestKeyStore.init(testKeyManagerFactory, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASS);\n        \tassertTrue(\"keyManager factory is not open yet\",!TestTrustManager.isOpen(trustManager));\n        \tassertTrue(\"keyManager factory not opens yet\",!TestTrustManager.isOpen(trustManagerFactory));\n        \tassertEquals(\"trust manager instance is not of type \" + JNFE_TYPE + \" \" + trustManager.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustManager.getClass().getName());\n        \tassertEquals(\"keyManager factory instance is not of type \" + JNFE_TYPE + \" \" + trustManagerFactory.toString(),\n        \t\t\t  TestTrustManager.JNFE_TYPE, trustedKeyManagerFactory.getClass().getName());\n        \t\n        \tkeyManagerFactory.deInit();\n        \tKeyStore loadedKeyStore = testKeyStore.openTransportStore();\n        \tassertNotNull(\"KeyStore is null\", loadedKeyStore);\n        \tKeyManagerFactory loadedKeyManagerFactory = loadedKeyStore.getKeyManagerFactory();\n        \tassertNotNull(\"KeyManagerFactory not null\", loadedKeyManagerFactory);\n        \tassertTrue(\"keyManagerFactory is not of type \" + JNFEKeyManagerFactory.TYPE + \" \"",
        "choice_no": 2
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\tpublic static final String TYPE = \"test.type\";\n\t\t\nvoid testOpenTransportStore(){\n\t\t\n\t}\n\t\n\t@Test\n    public void shouldOpenKeyStore() throws Exception {\n    \t\n\t\tKeyStore keyStore = openTransportStore();\n\t\tassertNotNull(keyStore);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void shouldNotOpenKeyStoreUsingType(\"test.type\") {\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tLoggerFactory.getLogger(TransportKeyStoreBean_0Test.class).info(TransportKeyStoreBean_0Test.class+\"::testNotOpenKeyStoreUsingType(\\\"test.type\\\")\");\n\t\t\t\n\t\t\topenTransportStore();\n\t\t\t\n\t\t    fail(\"Exception not thrown\");\n\t\t\t\n\t\t} catch (Exception e){\n\t\t\t\n\t\t\tassertTrue(\"Exception thrown\", e instanceof SecurityException);\n\t\t}\n\t\n\t}\n\t\n\t@Test\n\tpublic void shouldNotOpenKeyStoreUsingTypeNull() {\n\t\t\n\t\ttry {\n\t\t\n\t\t\tLoggerFactory.getLogger(TransportKeyStoreBean_0Test.class).info(TransportKeyStoreBean_0Test.class+\"::testNotOpenKeyStoreUsingTypeNull\");\n\t\t\t\n\t\t\topenTransportStore();\n\t\t\t\n\t\t    fail(\"Exception not thrown\");\n\t\t\t\n\t\t} catch (Exception e){\n\t\t\t\n\t\t\tassertTrue(\"Exception thrown\", e instanceof NullPointerException);\n\t\t}\n\t\n\t}\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "H7",
        "original_generated_code": "public static final String TYPE = \"test.type\";\n\t\t\nvoid testOpenTransportStore(){\n\t\t\n\t}\n\t\n\t@Test\n    public void shouldOpenKeyStore() throws Exception {\n    \t\n\t\tKeyStore keyStore = openTransportStore();\n\t\tassertNotNull(keyStore);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void shouldNotOpenKeyStoreUsingType(\"test.type\") {\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tLoggerFactory.getLogger(TransportKeyStoreBean_0Test.class).info(TransportKeyStoreBean_0Test.class+\"::testNotOpenKeyStoreUsingType(\\\"test.type\\\")\");\n\t\t\t\n\t\t\topenTransportStore();\n\t\t\t\n\t\t    fail(\"Exception not thrown\");\n\t\t\t\n\t\t} catch (Exception e){\n\t\t\t\n\t\t\tassertTrue(\"Exception thrown\", e instanceof SecurityException);\n\t\t}\n\t\n\t}\n\t\n\t@Test\n\tpublic void shouldNotOpenKeyStoreUsingTypeNull() {\n\t\t\n\t\ttry {\n\t\t\n\t\t\tLoggerFactory.getLogger(TransportKeyStoreBean_0Test.class).info(TransportKeyStoreBean_0Test.class+\"::testNotOpenKeyStoreUsingTypeNull\");\n\t\t\t\n\t\t\topenTransportStore();\n\t\t\t\n\t\t    fail(\"Exception not thrown\");\n\t\t\t\n\t\t} catch (Exception e){\n\t\t\t\n\t\t\tassertTrue(\"Exception thrown\", e instanceof NullPointerException);\n\t\t}\n\t\n\t}\n}",
        "choice_no": 3
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t/**\n\t\t * A default keystore.\n\t\t */\n\t\tprivate final KeyStore defaultKeyStore = SecurityUtils.getDefaultKeyStore();\n\n\t\t/**\n        * Test of openTransportStore() method, of class TransportKeyStoreBean.\n        */\n        @Test\n        public void openTransportStore() {\n            assertNull(SecurityUtils.getTransportKeyStore());\n\n            System.setProperty(\"user.home\", null);\n            System.setProperty(\"user.dir\", null);\n            System.setProperty(\"java.security.policy\", null);\n            System.setProperty(\"jnfe.pfx\", null);\n            System.setProperty(\"keystore.password\", null);\n            System.setProperty(\"keystore.type\", null);\n            System.setProperty(\"keystore.password.pfx\", null);\n            System.setProperty(\"keystore.uri\", null);\n            System.setProperty(\"SSL_CLIENT_AUTH_SERVER_NEGOTIATION\", null);\n\n            try (KeyStore keyStore = openTransportStore()) {\n            }\n        }\n\n        /**\n        * @throws Exception\n        * @see\n        */\n        private void assertExpected(String description) throws Exception {\n            assertNotNull(\"Transport key store must be not null\", defaultKeyStore);\n            //logger.info(\"Default Keystore: {}\", defaultKeyStore);\n\n            if (description == null) {\n                throw new AssertionError(\"Description must not be null.\");\n            }\n            Iterator<String> iterator = SecurityUtils.getTransportKeyStore().getKeys().iterator();\n            iterator.next();\n            iterator.iterator();\n            assertEquals(description, iterator.next());\n            assertEquals(description, SecurityUtils.getTransportKeyStore().getCertificate(iterator.next()).\n            getSubjectDN().toString());\n        }\n    }",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "/**\n\t\t * A default keystore.\n\t\t */\n\t\tprivate final KeyStore defaultKeyStore = SecurityUtils.getDefaultKeyStore();\n\n\t\t/**\n        * Test of openTransportStore() method, of class TransportKeyStoreBean.\n        */\n        @Test\n        public void openTransportStore() {\n            assertNull(SecurityUtils.getTransportKeyStore());\n\n            System.setProperty(\"user.home\", null);\n            System.setProperty(\"user.dir\", null);\n            System.setProperty(\"java.security.policy\", null);\n            System.setProperty(\"jnfe.pfx\", null);\n            System.setProperty(\"keystore.password\", null);\n            System.setProperty(\"keystore.type\", null);\n            System.setProperty(\"keystore.password.pfx\", null);\n            System.setProperty(\"keystore.uri\", null);\n            System.setProperty(\"SSL_CLIENT_AUTH_SERVER_NEGOTIATION\", null);\n\n            try (KeyStore keyStore = openTransportStore()) {\n            }\n        }\n\n        /**\n        * @throws Exception\n        * @see\n        */\n        private void assertExpected(String description) throws Exception {\n            assertNotNull(\"Transport key store must be not null\", defaultKeyStore);\n            //logger.info(\"Default Keystore: {}\", defaultKeyStore);\n\n            if (description == null) {\n                throw new AssertionError(\"Description must not be null.\");\n            }\n            Iterator<String> iterator = SecurityUtils.getTransportKeyStore().getKeys().iterator();\n            iterator.next();\n            iterator.iterator();\n            assertEquals(description, iterator.next());\n            assertEquals(description, SecurityUtils.getTransportKeyStore().getCertificate(iterator.next()).\n            getSubjectDN().toString());\n        }\n    }",
        "choice_no": 4
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t/**\n\t * A URI para a keystore usada para autenticar o transporte.\n\t */\n\tString keyStoreUri;\n\t\n\t/**\n\t * O tipo de keystore empregado para o transporte.\n        */                        \n\tString keyStoreType;\n    \n\t/**\n\t * A senha para acesso ao keystore empregado para o transporte.\n\t */\n\tString keyStorePassword;\n\t\n\t/**\n\t * Localiza\ufffd\ufffdo do aramz\ufffdm seguro (cacerts).\n\t */\n\tKeyStore keyStore;\n\t\n\t/**\n\t * Uma chave para ser armazenada na localizacao do Armaz\ufffdm da nfe\n\t *\n\t */\n\tString keyStorePassword;\n\t\n\t@Test\n\tpublic void getKeyStore() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStore = TransportKeyStoreBean.openTransportStore();\n\t\t\n\t\tassertNotNull(keyStore);\n\t\tkeyStorePassword = (String) keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t\tkeyStorePassword = keyStorePassword.toLowerCase();\n\t\tassertTrue(\"keyStorePassword do Servi\ufffdo n\ufffdo aleyado\", keyStorePassword.length()>3);\n\t}\n\n\t@Test\n\tpublic void getKeyStoreType() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStoreType = TransportKeyStoreBean.openTransportStoreType();\n\t\t\n\t\tassertNotNull(keyStoreType);\n\t\tkeyStoreType = keyStoreType.toLowerCase();\n\t\tassertTrue(\"keyStoreType do Servi\ufffdo n\ufffdo aleyado\", keyStoreType.length()>2);\n\t}\n\t\n\t@Test\n\tpublic void trustStore() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStore = TransportKeyStoreBean.openTransportStore();\n\t\t\n\t\tassertNotNull(keyStore);\n\t\t\n\t\tlogger.info(\"Retornado KeyStore UMA CHE LO QUE FOI REMOVIDO: \" + SecurityUtils.toByteArray(keyStore));\n\t\t\n\t\tkeyStorePassword = keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t}\n\n\t@Test\n\tpublic void trustStoreType() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStoreType = TransportKeyStoreBean.openTransportStoreType();\n\t\t\n\t\tassertNotNull(keyStoreType);\n\t\tkeyStoreType = keyStoreType.toLowerCase();\n\t\tassertTrue(\"keyStoreType do Servi\ufffdo n\ufffdo aleyado\", keyStoreType.length()>3);\n\t}\n\t\n\t@Test\n\tpublic void trustStorePassword() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStorePassword = keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t\t\n\t\tsecurityUtil = new SecurityUtils();\n\t\tlogger.info(\"Usuario foi: \" + keyStorePassword);\n\t\tassertEquals(keyStorePassword,securityUtil.obtWidwPwd(keyStorePassword));\n\t}\n\n\tprivate Logger logger;\n\tprivate KeyManagerFactory keyManagerFactory;\n\tprivate KeyManagerFactory badKeyManagerFactory;\n\tprivate KeyManagerFactory badKeyManagerFactory2;\n\n\tprivate SecurityUtils securityUtil;\n\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\t/**\n\t * A URI para a keystore usada para autenticar o transporte.\n\t */\n\tString keyStoreUri;\n\t\n\t/**\n\t * O tipo de keystore empregado para o transporte.\n        */                        \n\tString keyStoreType;\n    \n\t/**\n\t * A senha para acesso ao keystore empregado para o transporte.\n\t */\n\tString keyStorePassword;\n\t\n\t/**\n\t * Localiza\ufffd\ufffdo do aramz\ufffdm seguro (cacerts).\n\t */\n\tKeyStore keyStore;\n\t\n\t/**\n\t * Uma chave para ser armazenada na localizacao do Armaz\ufffdm da nfe\n\t *\n\t */\n\tString keyStorePassword;\n\t\n\t@Test\n\tpublic void getKeyStore() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStore = TransportKeyStoreBean.openTransportStore();\n\t\t\n\t\tassertNotNull(keyStore);\n\t\tkeyStorePassword = (String) keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t\tkeyStorePassword = keyStorePassword.toLowerCase();\n\t\tassertTrue(\"keyStorePassword do Servi\ufffdo n\ufffdo aleyado\", keyStorePassword.length()>3);\n\t}\n\n\t@Test\n\tpublic void getKeyStoreType() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStoreType = TransportKeyStoreBean.openTransportStoreType();\n\t\t\n\t\tassertNotNull(keyStoreType);\n\t\tkeyStoreType = keyStoreType.toLowerCase();\n\t\tassertTrue(\"keyStoreType do Servi\ufffdo n\ufffdo aleyado\", keyStoreType.length()>2);\n\t}\n\t\n\t@Test\n\tpublic void trustStore() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStore = TransportKeyStoreBean.openTransportStore();\n\t\t\n\t\tassertNotNull(keyStore);\n\t\t\n\t\tlogger.info(\"Retornado KeyStore UMA CHE LO QUE FOI REMOVIDO: \" + SecurityUtils.toByteArray(keyStore));\n\t\t\n\t\tkeyStorePassword = keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t}\n\n\t@Test\n\tpublic void trustStoreType() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStoreType = TransportKeyStoreBean.openTransportStoreType();\n\t\t\n\t\tassertNotNull(keyStoreType);\n\t\tkeyStoreType = keyStoreType.toLowerCase();\n\t\tassertTrue(\"keyStoreType do Servi\ufffdo n\ufffdo aleyado\", keyStoreType.length()>3);\n\t}\n\t\n\t@Test\n\tpublic void trustStorePassword() throws Exception {\n\t\tSecurityUtils.testKeyStoreCreation();\n\t\t\n\t\tkeyStorePassword = keyStore.getProperty(\"COPY\");\n\t\tassertNotNull(keyStorePassword);\n\t\t\n\t\tsecurityUtil = new SecurityUtils();\n\t\tlogger.info(\"Usuario foi: \" + keyStorePassword);\n\t\tassertEquals(keyStorePassword,securityUtil.obtWidwPwd(keyStorePassword));\n\t}\n\n\tprivate Logger logger;\n\tprivate KeyManagerFactory keyManagerFactory;\n\tprivate KeyManagerFactory badKeyManagerFactory;\n\tprivate KeyManagerFactory badKeyManagerFactory2;\n\n\tprivate SecurityUtils securityUtil;\n\n\n} \n",
        "choice_no": 5
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    @Test\n    public void testTransportStore() throws Exception {\n        KeyStore keyStore = openTransportStore();\n        try {\n            String storeUri = System.setProperty(\"user.home\", \"C:/Users/Paulo\");\n            logger.info(\"keyStoreURI: \"+ storeUri);\n            assertNotNull(storeUri);\n            assertEquals(5, keyStore.size());\n        } finally {\n            SecurityUtils.cleanse(keyStore);\n        }\n    }\n    @BeforeClass\n    public static void setUpClass() {\n    }\n    @AfterClass\n    public static void tearDownClass() {\n    }\n}\n/**\n* Test of createTransportSecurity.\n*/\npublic class TransportKeyStoreBean_1Test {\n\n    @Test\n    public void transportKeyStoreTest() {\n        KeyStore keyStore = openTransportStore();\n        try {\n            SecurityUtils.cleanse(keyStore);\n            System.out.println(\"transportKeyStoreTest\");\n            logger.info(\"transportKeyStoreTest\");\n        } finally {\n            SecurityUtils.cleanse(keyStore);\n        }\n    }\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "\n    @Test\n    public void testTransportStore() throws Exception {\n        KeyStore keyStore = openTransportStore();\n        try {\n            String storeUri = System.setProperty(\"user.home\", \"C:/Users/Paulo\");\n            logger.info(\"keyStoreURI: \"+ storeUri);\n            assertNotNull(storeUri);\n            assertEquals(5, keyStore.size());\n        } finally {\n            SecurityUtils.cleanse(keyStore);\n        }\n    }\n    @BeforeClass\n    public static void setUpClass() {\n    }\n    @AfterClass\n    public static void tearDownClass() {\n    }\n}\n/**\n* Test of createTransportSecurity.\n*/\npublic class TransportKeyStoreBean_1Test {\n\n    @Test\n    public void transportKeyStoreTest() {\n        KeyStore keyStore = openTransportStore();\n        try {\n            SecurityUtils.cleanse(keyStore);\n            System.out.println(\"transportKeyStoreTest\");\n            logger.info(\"transportKeyStoreTest\");\n        } finally {\n            SecurityUtils.cleanse(keyStore);\n        }\n    }\n}\n",
        "choice_no": 6
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\tprivate final static String PASSWORD1_ENCODE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    /**\n     * @throws java.lang.Exception\n     */\n    @Test\n    void initTransportKeyStore() throws Exception {\n        KeyStore keyStore = SecurityUtils.setPassPassword(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_PASSWORD);\n        KeyManagerFactory keyManagerFactory = SecurityUtils.setKeyPassword(DEFAULT_KEYSTORE_TYPE, PASSWORD1_ENCODE);\n\n        // open transport store\n        KeyStore openedStore = SecurityUtils.openTransportStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_PASSWORD, keyManagerFactory);\n\n        assertNotNull(openedStore);\n        logger.debug( openedStore.toString() );\n\n        // ensure security info is preserved\n        assertEquals(keyStore.getCertificateEntry(SecurityUtils.CRYPTO_CERT_NAME).getSubjectDN().toString(),\n                    keyManagerFactory.getKeyManagers().iterator().next().getTrustedCertificates().iterator()\n                           .next().getSubjectDN().toString());\n    }\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\tprivate final static String PASSWORD1_ENCODE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    /**\n     * @throws java.lang.Exception\n     */\n    @Test\n    void initTransportKeyStore() throws Exception {\n        KeyStore keyStore = SecurityUtils.setPassPassword(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_PASSWORD);\n        KeyManagerFactory keyManagerFactory = SecurityUtils.setKeyPassword(DEFAULT_KEYSTORE_TYPE, PASSWORD1_ENCODE);\n\n        // open transport store\n        KeyStore openedStore = SecurityUtils.openTransportStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_PASSWORD, keyManagerFactory);\n\n        assertNotNull(openedStore);\n        logger.debug( openedStore.toString() );\n\n        // ensure security info is preserved\n        assertEquals(keyStore.getCertificateEntry(SecurityUtils.CRYPTO_CERT_NAME).getSubjectDN().toString(),\n                    keyManagerFactory.getKeyManagers().iterator().next().getTrustedCertificates().iterator()\n                           .next().getSubjectDN().toString());\n    }\n}",
        "choice_no": 7
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /**\n     * To string.\n     */\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\n    /**\n     * Unit test of abstract class {@link TransportKeyStoreBean}.\n     */\n    @Test\n    public void testAbstractClass1() {\n        \n        // A ssl utl.\n        String keyStoreUri = SecurityUtils.buildKeyStoreUrl(SecurityUtils.buildUrl(SecurityUtils.buildKeyStoreUri(\"127.0.0.1\")), \"MYPKI\", \"myPKI\", DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_SIGALG);\n                \n        assertNotNull(keyStoreUri);\n        assertTrue(SecurityUtils.isKeyStoreUriPermitted(keyStoreUri));\n                \n        // Abre a localizacao do ssl\n        KeyStore keyStore = SecurityUtils.buildKeyStore(SecurityUtils.buildUrl(SecurityUtils.buildUrl(SecurityUtils.buildUrl(SecurityUtils.buildKeyStoreUri(\"127.0.0.1\")), \"MYPKI\", \"myPKI\"), keyStoreUri, DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_SIGALG));\n        KeyManagerFactory kmFactory = SecurityUtils.buildKeyManFactory(\"MYPKI\", \"myPKI\", \"MYPKI\");\n        KeyManagerFactory.getInstance(kmFactory);\n        SecurityUtils.removeKeyStore(keyStore, keyStoreUri);\n    }\n        \n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "\n    /**\n     * To string.\n     */\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\n    /**\n     * Unit test of abstract class {@link TransportKeyStoreBean}.\n     */\n    @Test\n    public void testAbstractClass1() {\n        \n        // A ssl utl.\n        String keyStoreUri = SecurityUtils.buildKeyStoreUrl(SecurityUtils.buildUrl(SecurityUtils.buildKeyStoreUri(\"127.0.0.1\")), \"MYPKI\", \"myPKI\", DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_SIGALG);\n                \n        assertNotNull(keyStoreUri);\n        assertTrue(SecurityUtils.isKeyStoreUriPermitted(keyStoreUri));\n                \n        // Abre a localizacao do ssl\n        KeyStore keyStore = SecurityUtils.buildKeyStore(SecurityUtils.buildUrl(SecurityUtils.buildUrl(SecurityUtils.buildUrl(SecurityUtils.buildKeyStoreUri(\"127.0.0.1\")), \"MYPKI\", \"myPKI\"), keyStoreUri, DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_SIGALG));\n        KeyManagerFactory kmFactory = SecurityUtils.buildKeyManFactory(\"MYPKI\", \"myPKI\", \"MYPKI\");\n        KeyManagerFactory.getInstance(kmFactory);\n        SecurityUtils.removeKeyStore(keyStore, keyStoreUri);\n    }\n        \n}\n",
        "choice_no": 8
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n        /**\n         * Localiza\ufffd\ufffd o arquivo deste test.\n         *\n         * @throws Exception\n         */\n        @Test\n        public void setUp() throws Exception {\n                KeyManagerFactory kmf = null;\n                KeyStore ks = null;\n                KeyManager[] km = null;\n                try {\n                        kmf = KeyManagerFactory.getInstance(\"SunX509\");\n                        km = kmf.getKeyManagers();\n                        logger.info(\"key store type = {}\", System.getProperty(\"keyStore.type\"));\n                        KeyStoreManager manager = (KeyStoreManager)km[0];\n                        KeyStore ks2 = manager.getKeyStore();\n                        KeyStore ks3 = SecurityUtils.getKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASSWORD, DEFAULT_X509_TRUSTSTORE_TYPE, DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        KeyStore ks4 = SecurityUtils.getKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n                } finally {\n                        if (ksc!=null) {\n                                ks.close();\n                                ks = null;\n                        }\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASSWORD, DEFAULT_X509_TRUSTSTORE_TYPE, DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        if (kmf==null) {\n                                ks2 = ks3;\n                                ks3 = null;\n                        }\n                }\n        }\n        \n        /**\n         * Test of close method, of type default in the {@link TransportKeyStoreBean}.\n         */\n        @Test\n        public void testClose_1() {\n                TransportKeyStoreBean b = null;\n\n                try {\n                        if (logger.isDebugEnabled()) logger.debug(\"close\");\n                        KeyStore ks = null;\n                                  ks = ((KeyStoreManager)ks3).getKeyStore();\n                        b = new TransportKeyStoreBean();\n                        b.setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n                        b.setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n                        b.setKeyStorePassword(DEFAULT_KEYSTORE_PASSWORD);\n                        b.setTrustStoreType(DEFAULT_X509_TRUSTSTORE_TYPE);\n                        b.setTrustStorePassword(DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        b.openTransportStore();\n                        assertNotNull(\"KeyStore instance\", ks);\n                        assertEquals(\"getCertificate\", 2, SecurityUtils.getCertificateCount(ks));\n                } finally {\n                        b.close();\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, keyStoreType, keyStorePassword, keyStoreUri,trustStore, trustStorePassword); //,trustStorePassword);\n                }\n        }\n        \n        /**\n         * Test of initialize method, of type default in the {@link TransportKeyStoreBean}.\n         */\n        @Test\n        public void testInitialized() {\n                TransportKeyStoreBean b = null;\n\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "",
        "original_generated_code": "\n        /**\n         * Localiza\ufffd\ufffd o arquivo deste test.\n         *\n         * @throws Exception\n         */\n        @Test\n        public void setUp() throws Exception {\n                KeyManagerFactory kmf = null;\n                KeyStore ks = null;\n                KeyManager[] km = null;\n                try {\n                        kmf = KeyManagerFactory.getInstance(\"SunX509\");\n                        km = kmf.getKeyManagers();\n                        logger.info(\"key store type = {}\", System.getProperty(\"keyStore.type\"));\n                        KeyStoreManager manager = (KeyStoreManager)km[0];\n                        KeyStore ks2 = manager.getKeyStore();\n                        KeyStore ks3 = SecurityUtils.getKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASSWORD, DEFAULT_X509_TRUSTSTORE_TYPE, DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        KeyStore ks4 = SecurityUtils.getKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n                } finally {\n                        if (ksc!=null) {\n                                ks.close();\n                                ks = null;\n                        }\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI, DEFAULT_KEYSTORE_PASSWORD, DEFAULT_X509_TRUSTSTORE_TYPE, DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        if (kmf==null) {\n                                ks2 = ks3;\n                                ks3 = null;\n                        }\n                }\n        }\n        \n        /**\n         * Test of close method, of type default in the {@link TransportKeyStoreBean}.\n         */\n        @Test\n        public void testClose_1() {\n                TransportKeyStoreBean b = null;\n\n                try {\n                        if (logger.isDebugEnabled()) logger.debug(\"close\");\n                        KeyStore ks = null;\n                                  ks = ((KeyStoreManager)ks3).getKeyStore();\n                        b = new TransportKeyStoreBean();\n                        b.setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n                        b.setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n                        b.setKeyStorePassword(DEFAULT_KEYSTORE_PASSWORD);\n                        b.setTrustStoreType(DEFAULT_X509_TRUSTSTORE_TYPE);\n                        b.setTrustStorePassword(DEFAULT_X509_TRUSTSTORE_PASSWORD);\n                        b.openTransportStore();\n                        assertNotNull(\"KeyStore instance\", ks);\n                        assertEquals(\"getCertificate\", 2, SecurityUtils.getCertificateCount(ks));\n                } finally {\n                        b.close();\n                        SecurityUtils.setKeyStore(DEFAULT_KEYSTORE_TYPE, keyStoreType, keyStorePassword, keyStoreUri,trustStore, trustStorePassword); //,trustStorePassword);\n                }\n        }\n        \n        /**\n         * Test of initialize method, of type default in the {@link TransportKeyStoreBean}.\n         */\n        @Test\n        public void testInitialized() {\n                TransportKeyStoreBean b = null;\n\n                try {\n                        if (logger.isDebugEnabled()) logger.debug(\"initial\");\n                        KeyStore ks = null;\n                        KeyStore ks2 = null;\n                        if (logger.isDebugEnabled()) logger.debug(\"  KeyStore type = {}\", keyStoreType);\n                        //KeyStoreManager manager = new KeyStoreManager(deploymentRoot, keyStore.getKeyManagers(null)[0]);\n                        //manager.setKeyStoreType(keyStoreType);\n                        KeyStoreManager manager = new KeyStoreManager(deploymentRoot, keyStore.getKeyManagers(null)[0]); //this manager should not be created\n                        ksc.delete(deploymentRoot);\n                        ksc.delete(deploymentRoot+\"/WEB-INF\", true);\n                        //manager=null;\n                        KeyStore ks3 = SecurityUtils.getKeyStore(keyStoreType, keyStore.getTrustStore(null),keyStorePassword);\n                        KeyManagerFactory kmf = null;\n                        KeyManagerManager km = null;\n                        kmf = KeyManagerFactory.getInstance(keyManagerFactoryType);\n                        km = kmf.getKeyManagers();\n                        if (kmf == null ) {\n                                k",
        "choice_no": 9
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\tprivate static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n    private final String keyStoreFileUri = \"file:src/test/resources/jnfe.pki-keys.jceks\";\n    private final String keyStoreType = \"jceks\";\n    private final String keyStorePassword = \"password\";\n    private final String trustStoreUri = \"file:src/test/resources/jnfe.pki-trust-caveats.jceks\";\n    private final String trustStoreType = \"jceks\";\n    private final String trustStorePassword = \"password\";\n    private KeyStore keystore;\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testConstructor() throws Exception {\n        assertNotNull(SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, trustStoreUri, trustStoreType, trustStorePassword));\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testReadDefaultKeyStore() throws Exception {\n        keystore = SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, keyStoreUri, trustStoreType, trustStorePassword);\n        keystore.load(null, null);\n        SecurityUtils.getKeyStore(SecurityUtils.getDefaultUri(), keyStoreType, keyStorePassword, securityProperties);\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testReadTrustStore() throws Exception {\n        SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, trustStoreUri, trustStoreType, trustStorePassword);\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test()'.\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testOpenTransportStore() throws Exception {\n        keystore = SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, keyStoreUri, trustStoreType, trustStorePassword);\n    }\n\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1e1aa1ba-4f5e-4e9d-b4c7-b90a7a2a5321",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 44.52104306221008,
        "usage": {
            "prompt_tokens": 958
        },
        "applied_heuristics": "H7",
        "original_generated_code": "private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n    private final String keyStoreFileUri = \"file:src/test/resources/jnfe.pki-keys.jceks\";\n    private final String keyStoreType = \"jceks\";\n    private final String keyStorePassword = \"password\";\n    private final String trustStoreUri = \"file:src/test/resources/jnfe.pki-trust-caveats.jceks\";\n    private final String trustStoreType = \"jceks\";\n    private final String trustStorePassword = \"password\";\n    private KeyStore keystore;\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testConstructor() throws Exception {\n        assertNotNull(SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, trustStoreUri, trustStoreType, trustStorePassword));\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testReadDefaultKeyStore() throws Exception {\n        keystore = SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, keyStoreUri, trustStoreType, trustStorePassword);\n        keystore.load(null, null);\n        SecurityUtils.getKeyStore(SecurityUtils.getDefaultUri(), keyStoreType, keyStorePassword, securityProperties);\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test().openTransportStore()'\n     */\n    @Test (expected = Exception.class)\n    public void testReadTrustStore() throws Exception {\n        SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, trustStoreUri, trustStoreType, trustStorePassword);\n    }\n\n    /**\n     * Test method for 'TransportKeyStoreBean_0Test()'.\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testOpenTransportStore() throws Exception {\n        keystore = SecurityUtils.getKeyStore(keyStoreFileUri, keyStoreType, keyStorePassword, keyStoreUri, trustStoreType, trustStorePassword);\n    }\n\t\n}",
        "choice_no": 10
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate static final String USER_HOME = \"user.home\";\n\n\t/**\n\t* Teste ao abrir o armaz\ufffdm do armaz\ufffdm (cacerts) de transporte.\n\t*\n\t* @throws Exception\n\t*/\n\t@Test\n\tpublic void test() throws Exception{\n\t\t\t\n\t\tKeyStore ks = this.delegate.openTransportStore();\n\t\tKeyManagerFactory kmf = this.delegate.openTransportKeyManagerFactory();\n\t\t\n\t\tassertNotNull(\"Keystore empregado\",ks);\n\t}\n\t\n\tprivate static final X509TrustManager nullTrustManager = \n\t\t\tSecurityUtils.nullTrustManager;\n\t\n\t/**\n\t* Testa ao abrir o armaz\ufffdm de transporte s/o de mensagens do web services e\n\t* @throws Exception \n\t*/\n\t@Test\n\tpublic void testNullWebServices() throws Exception{\n\t\t\n\t\tif (nullTrustManager instanceof X509TrustManager) {\n\t\t\tSystem.err.println(\n\t\t\t\t\t\"The null manager does not implement the interface X509TrustManager, a test failed\");\n\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tKeyStore ks = null;\n\t\tKeyManagerFactory kmf = null;\n\t\ttry {\n\t\t\tks = this.delegate.openTransportStore();\n\t\t\tkmf = this.delegate.openTransportKeyManagerFactory();\n\t\t} catch (Exception e) {\n\t\t\tassertTrue(e instanceof NullPointerException);\n\t\t}\n\t\t\n\t\tassertNotNull(\"Keymanager empregado\", kmf);\n\t}\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "original_generated_code": "\n\tprivate static final String USER_HOME = \"user.home\";\n\n\t/**\n\t* Teste ao abrir o armaz\ufffdm do armaz\ufffdm (cacerts) de transporte.\n\t*\n\t* @throws Exception\n\t*/\n\t@Test\n\tpublic void test() throws Exception{\n\t\t\t\n\t\tKeyStore ks = this.delegate.openTransportStore();\n\t\tKeyManagerFactory kmf = this.delegate.openTransportKeyManagerFactory();\n\t\t\n\t\tassertNotNull(\"Keystore empregado\",ks);\n\t}\n\t\n\tprivate static final X509TrustManager nullTrustManager = \n\t\t\tSecurityUtils.nullTrustManager;\n\t\n\t/**\n\t* Testa ao abrir o armaz\ufffdm de transporte s/o de mensagens do web services e\n\t* @throws Exception \n\t*/\n\t@Test\n\tpublic void testNullWebServices() throws Exception{\n\t\t\n\t\tif (nullTrustManager instanceof X509TrustManager) {\n\t\t\tSystem.err.println(\n\t\t\t\t\t\"The null manager does not implement the interface X509TrustManager, a test failed\");\n\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tKeyStore ks = null;\n\t\tKeyManagerFactory kmf = null;\n\t\ttry {\n\t\t\tks = this.delegate.openTransportStore();\n\t\t\tkmf = this.delegate.openTransportKeyManagerFactory();\n\t\t} catch (Exception e) {\n\t\t\tassertTrue(e instanceof NullPointerException);\n\t\t}\n\t\t\n\t\tassertNotNull(\"Keymanager empregado\", kmf);\n\t}\n\n}\n\n",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n    private static final String KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n    \n    protected static final String KEYSTORE_TYPE = \"pkcs12\";       \n    \n    /**\n    * test_openTransportKeyManagerFactory_1.\n    *\n    @Test\n    public void test_openTransportKeyManagerFactory_1() throws Exception {\n        \n\t\t// Instantiate KeyManagerFactory instance and initialize key store\n\t\tKeyManagerFactory kmfab = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n\t\tKeyStore s = KeyStore.getInstance(KEYSTORE_TYPE);\n        \n        // Obtem URI atual de acesso de o arquivo\n\t\tString keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER);\n\t\t\n        // Configura a URI para o local de cada um de qual\n        s.load(new java.io.FileInputStream(keyStoreUri), null);\n        \n        // Configura a URI para o uso de o arquivo\n\t\tkeyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n\t\t\n        // Cria-no key store em torna a kmfab\n\t\tKeyManagerFactory kmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhuma kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_URI + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE + \" but was \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n        // Configura a URI para o local de cada um de qual\n         s.load(new java.io.FileInputStream(keyStoreUri), \n          \t\tkeyStorePassword.toCharArray());\n         \n        // Configura a URI para o uso de o arquivo\n        keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n        \n        // Cria-no key store em torna a kmf\n\t\tkmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhum kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_TYPE + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE + \" but was \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n        // Configura a URI para o local de cada um de qual\n        s.load(new java.io.FileInputStream(keyStoreUri),\n        \t\tkeyStorePassword.toCharArray());\n        \n        // Configura a URI para o uso de o arquivo\n        keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n        \n\t\tkmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhum kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_TYPE + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n\t}\n\n\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n    private static final String KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n    \n    protected static final String KEYSTORE_TYPE = \"pkcs12\";       \n    \n    /**\n    * test_openTransportKeyManagerFactory_1.\n    *\n    @Test\n    public void test_openTransportKeyManagerFactory_1() throws Exception {\n        \n\t\t// Instantiate KeyManagerFactory instance and initialize key store\n\t\tKeyManagerFactory kmfab = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n\t\tKeyStore s = KeyStore.getInstance(KEYSTORE_TYPE);\n        \n        // Obtem URI atual de acesso de o arquivo\n\t\tString keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER);\n\t\t\n        // Configura a URI para o local de cada um de qual\n        s.load(new java.io.FileInputStream(keyStoreUri), null);\n        \n        // Configura a URI para o uso de o arquivo\n\t\tkeyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n\t\t\n        // Cria-no key store em torna a kmfab\n\t\tKeyManagerFactory kmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhuma kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_URI + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE + \" but was \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n        // Configura a URI para o local de cada um de qual\n         s.load(new java.io.FileInputStream(keyStoreUri), \n          \t\tkeyStorePassword.toCharArray());\n         \n        // Configura a URI para o uso de o arquivo\n        keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n        \n        // Cria-no key store em torna a kmf\n\t\tkmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhum kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_TYPE + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE + \" but was \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n        // Configura a URI para o local de cada um de qual\n        s.load(new java.io.FileInputStream(keyStoreUri),\n        \t\tkeyStorePassword.toCharArray());\n        \n        // Configura a URI para o uso de o arquivo\n        keyStoreUri = KeyStoreUtil.getProperty(SecurityUtils.CONF_KEYSTORE_SERVER_WITHDRAWN);\n        \n\t\tkmf = kmfab;\n        \n        // Se existir um key store em torna ou nenhum kmf\n        try {\n        \tkmf = KeyManagerFactory.getInstance(KEYSTORE_TYPE, SecurityUtils.KEYMANAGER_FACTORY_PROVIDER);\n        } catch (Exception e) {\n        \tlogger.warn(e.getMessage(), e);\n        \tassertNull(\"Expecting a key store to be initialized with default \"\n                + DEFAULT_KEYSTORE_TYPE + \" and provider to be \"\n                + DEFAULT_KEYSTORE_TYPE, e);\n        }\n        \n\t}\n\n\t\n}",
        "choice_no": 2
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\tprivate KeyManagerFactory openTransportKeyManagerFactory;\n\n\t\tprivate KeyStore openTransportStore;\n\n\t\t/**\n\t\t * To initialize the unit test.\n\t\t */\n\t\tpublic TransportKeyStoreBean_1Test() throws Exception {\n\n\t\t\tKeyStore keyStore = openTransportStore = new KeyStore(getClass().getResourceAsStream(DEFAULT_KEYSTORE_TYPE + \".crt\"));\n\t\t\tkeyStorePassword = SecurityUtils.loadPassword(getClass().getResourceAsStream(DEFAULT_KEYSTORE_TYPE + \".pass\"));\n\t\t\ttrustStore = getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile();\n\n\t\t}\n\n\t\t@Test\n\t\tpublic void test() throws Exception {\n\n\t\t\tassertNotNull(openTransportKeyManagerFactory);\n\n\t\t\tKeyManagerFactory keyManagerFactory = openTransportKeyManagerFactory;\n\t\t\tlogger.info(\"keyManagerFactory=\"+keyManagerFactory);\n\n\t\t}\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "private KeyManagerFactory openTransportKeyManagerFactory;\n\n\t\tprivate KeyStore openTransportStore;\n\n\t\t/**\n\t\t * To initialize the unit test.\n\t\t */\n\t\tpublic TransportKeyStoreBean_1Test() throws Exception {\n\n\t\t\tKeyStore keyStore = openTransportStore = new KeyStore(getClass().getResourceAsStream(DEFAULT_KEYSTORE_TYPE + \".crt\"));\n\t\t\tkeyStorePassword = SecurityUtils.loadPassword(getClass().getResourceAsStream(DEFAULT_KEYSTORE_TYPE + \".pass\"));\n\t\t\ttrustStore = getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile();\n\n\t\t}\n\n\t\t@Test\n\t\tpublic void test() throws Exception {\n\n\t\t\tassertNotNull(openTransportKeyManagerFactory);\n\n\t\t\tKeyManagerFactory keyManagerFactory = openTransportKeyManagerFactory;\n\t\t\tlogger.info(\"keyManagerFactory=\"+keyManagerFactory);\n\n\t\t}\n}",
        "choice_no": 3
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/test.pfx\";\n\n\tprivate final static String DEFAULT_KEYSTORE_TYPE = \"jks\";\n\n\tprivate final static String DEFAULT_KEYSTORE_PASSWORD = \"jnfe\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_TYPE = \"jnfe\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_ALIAS = \"test1\";\n\n    private final static String DEFAULT_TRUSTSTORE_PASSWORD = \"jnfe\";\n\n    private final static String DEFAULT_SECURITY_ALGORITHM = \"PKCS12\";\n\n\tprivate final static String[] DEFAULT_TRUSTSTORE_PASSWORD_FILELISTS = { \"test.pem\",\n\t\t\t\"another.pem\" };\n\n\t\n\tprivate String keyStoreUri;\n\n\tprivate String keyStoreType;\n\n\tprivate String keyStorePassword;\n\n\tprivate String trustStoreType;\n\t\n\tprivate String trustStore;\n\n\tprivate String trustStorePassword;\n\n\t\n    \n    public TransportKeyStoreBean_1Test() throws Exception {\n\n\t\tinitialize(DEFAULT_TRUSTSTORE_PASSWORD_FILELISTS);\n    }\n\n    /**\n    * Exemplar de teste.\n    */\n    @Test\n    public void testExemplante() throws Exception {\n\t\t\t\n\t\tlogger.trace(\"testExemplante\");\n\t\tKeyManagerFactory kfm = SecurityUtils.createKeyManagerFactory(\n\t\t\t\tSecurityUtils.ALGORITHM_NONE,\n\t\t\t\tSecurityUtils.ALGORITHM_ALIAS_DIGEST);\n\t\tlogger.trace(kfm.getProvider().getName());\n\t\tKeyStore keyStore = kfm.getKeyStore(this.getClass().getClassLoader(),  this.getKeyStoreType());\n\t\t\t\n\t\tkeyStoreUri = this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile();\n\t\t\t\n\t\tlogger.trace(\"keyStoreUri: \" + keyStoreUri);\n\t\tlogger.trace(\"keyStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_TYPE).getFile());\n\t\tlogger.trace(\"keyStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_PASSWORD).getFile());\n\t\tlogger.trace(\"trustStoreType: \" + trustStoreType);\n\t\tlogger.trace(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t\tlogger.trace(\"trustStore: \" + trustStore);\n\t\tlogger.trace(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t}\n\t\n\tprivate void initialize(String[] passwods) throws Exception {\n\t\t\t\n\t\tlogger.debug(\"keyStoreUri: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile());\n\t\tlogger.debug(\"keyStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_TYPE).getFile());\n\t\tlogger.debug(\"keyStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_PASSWORD).getFile());\n\t\tlogger.debug(\"trustStoreUri: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_URI).getFile());\n\t\tlogger.debug(\"trustStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_TYPE).getFile());\n\t\tlogger.debug(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t\tlogger.debug(\"trustStorePasswordFileList: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD_FILELIST).getFile());\n\n\t\t\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\tprivate final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/test.pfx\";\n\n\tprivate final static String DEFAULT_KEYSTORE_TYPE = \"jks\";\n\n\tprivate final static String DEFAULT_KEYSTORE_PASSWORD = \"jnfe\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_TYPE = \"jnfe\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_ALIAS = \"test1\";\n\n    private final static String DEFAULT_TRUSTSTORE_PASSWORD = \"jnfe\";\n\n    private final static String DEFAULT_SECURITY_ALGORITHM = \"PKCS12\";\n\n\tprivate final static String[] DEFAULT_TRUSTSTORE_PASSWORD_FILELISTS = { \"test.pem\",\n\t\t\t\"another.pem\" };\n\n\t\n\tprivate String keyStoreUri;\n\n\tprivate String keyStoreType;\n\n\tprivate String keyStorePassword;\n\n\tprivate String trustStoreType;\n\t\n\tprivate String trustStore;\n\n\tprivate String trustStorePassword;\n\n\t\n    \n    public TransportKeyStoreBean_1Test() throws Exception {\n\n\t\tinitialize(DEFAULT_TRUSTSTORE_PASSWORD_FILELISTS);\n    }\n\n    /**\n    * Exemplar de teste.\n    */\n    @Test\n    public void testExemplante() throws Exception {\n\t\t\t\n\t\tlogger.trace(\"testExemplante\");\n\t\tKeyManagerFactory kfm = SecurityUtils.createKeyManagerFactory(\n\t\t\t\tSecurityUtils.ALGORITHM_NONE,\n\t\t\t\tSecurityUtils.ALGORITHM_ALIAS_DIGEST);\n\t\tlogger.trace(kfm.getProvider().getName());\n\t\tKeyStore keyStore = kfm.getKeyStore(this.getClass().getClassLoader(),  this.getKeyStoreType());\n\t\t\t\n\t\tkeyStoreUri = this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile();\n\t\t\t\n\t\tlogger.trace(\"keyStoreUri: \" + keyStoreUri);\n\t\tlogger.trace(\"keyStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_TYPE).getFile());\n\t\tlogger.trace(\"keyStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_PASSWORD).getFile());\n\t\tlogger.trace(\"trustStoreType: \" + trustStoreType);\n\t\tlogger.trace(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t\tlogger.trace(\"trustStore: \" + trustStore);\n\t\tlogger.trace(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t}\n\t\n\tprivate void initialize(String[] passwods) throws Exception {\n\t\t\t\n\t\tlogger.debug(\"keyStoreUri: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_URI).getFile());\n\t\tlogger.debug(\"keyStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_TYPE).getFile());\n\t\tlogger.debug(\"keyStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_KEYSTORE_PASSWORD).getFile());\n\t\tlogger.debug(\"trustStoreUri: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_URI).getFile());\n\t\tlogger.debug(\"trustStoreType: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_TYPE).getFile());\n\t\tlogger.debug(\"trustStorePassword: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD).getFile());\n\t\tlogger.debug(\"trustStorePasswordFileList: \" + this.getClass().getClassLoader().getResource(DEFAULT_TRUSTSTORE_PASSWORD_FILELIST).getFile());\n\n\t\t\n\t\ttry {\n\t\t\tKeyStore keyStore = resolveKeyStore(SecurityUtils.KEYSTORE_URI.replace(\"file:\", \"\"), SecurityUtils.KEYSTORE_TYPE, SecurityUtils.KEYSTORE_PASSWORD, passwods, \"test1\");\n\t\t\tlogger.debug(\"keyStoreUri: \" + SecurityUtils.KEYSTORE_URI);\n\t\t\tlogger.debug(\"keyStoreType: \" + SecurityUtils",
        "choice_no": 4
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "H7",
        "original_generated_code": "\n}\t\n",
        "choice_no": 5
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate KeyStore keyStore = null;\n\tprivate int port = 0;\n\tprivate String keyStoreURI = DEFAULT_KEYSTORE_URI;\n\tprivate String trustStoreURI = DEFAULT_TRUSTSTORE_URI;\n\n\t/**\n\t* @param\n\t*/\n\tpublic TransportKeyStoreBean_1Test() {\n\t}\n\t \n\t/**\n\t * {@link TransportKeyStoreBean#openTransportStore}\n\t */\n\t@Test\n\tpublic final void openTransportStore() throws Exception {\n\t\ttry {\n\t\t\topenTransportStore();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tlogger.error(\"Erro no TransportKeyStoreBean_1 Test:\");\n\t\t\tlogger.error(\"Excecao: \");\n\t\t\tlogger.error(e);\n\t\t\tassertNotNull(e);\n\t\t}\n\t}\n\n\t/**\n\t* Valida o openTransportStore() a partir dos valores de opcao de sessao\n\t * @throws Exception\n\t*/\n\tpublic void openTransportStore() throws Exception {\n\t\t\t\n\t\tkeyStoreUri = SecurityUtils.getKeyStoreUri();\n\t\t\n\t\tKeyManagerFactory keyManagerFactory = SecurityUtils.getKeyManagerFactory();\n\n\t\tlogger.info(\"valores do openTransportStore:\");\n\t\tlogger.info(SecurityUtils.getPort());\n\t\tlogger.info(SecurityUtils.getKeyStoreUrl());\n\t\tlogger.info(SecurityUtils.getProtectedPath());\n\t\tlogger.info(keyStoreUri);\n\t\tlogger.info(keyManagerFactory.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory.getKeyStoreType());\n\t\tlogger.info(keyStoreType);\n\t\tlogger.info(keyManagerFactory.getKeyStorePassword());\n\t\tlogger.info(keyStorePassword);\n\t\t\n\t\t\n\t\t// Valida o keyStoreURI\n\t\tif (SecurityUtils.isKeyStorePassword(keyStoreName())) {\n\t\t\tport = SecurityUtils.getPort();\n\t\t\tif (SecurityUtils.getPort().equals(\"-1\")) {\n\t\t\t\tport = DEFAULT_PORT;\n\t\t\t}\n\t\t\tkeyStoreUri = keyStoreURI.concat(port).concat(keyStoreURISep());\n\t\t}\n\t\t\n\t\t// Valida o keyManagerFactory\n\t\tKeyManagerFactory keyManagerFactory2 = SecurityUtils.getKeyManagerFactory();\n\n\t\tlogger.info(\"valores do keyManagerFactory:\");\n\t\tlogger.info(SecurityUtils.getPort());\n\t\tlogger.info(keyManagerFactory.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory.getKeyStoreType());\n\t\tlogger.info(keyManagerFactory.getKeyStorePassword());\n\t\tlogger.info(keyStoreType);\n\t\tlogger.info(keyManagerFactory2.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory2.getKeyStoreType());\n\t\t\n\t}\t\n\n\t/**\n\t * Exemplo do test do openTransportStore()\n\t */\n\t@Test\n\tpublic void openTransportStoreWithPort() throws Exception {\n\t\ttry {\n\t\t\topenTransportStore(port);\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tlogger.error(\"Erro no TransportKeyStoreBean_1 Test:\");\n\t\t\tlogger.error(\"Excecao: \");\n\t\t\tlogger.error(e);\n\t\t\tassertNotNull(e);\n\t\t}\n\t}\n\t\n\tpublic void openTransportStore(int port) throws Exception {\n\t\tlogger.info(\"Entrou com port: \" + port);\n\t\tkeyStore = SecurityUtils.openTransportStore(SecurityUtils.getKeyStoreUrl(),\n\t\t\t\tSecurityUtils.getKeyStorePassword(), port);\n\t}\n\t\n\t/**\n\t * Entra no argumento do {@link TransportKeyStoreBean}\n\t * @return KeyStore\n\t */\n\tpublic KeyStore openTransportStore() {\n\t\treturn keyStore;\n\t}\n\t\t */\n\n\t/**\n\t* Valida os valores de o port de sessao.\n\t* Entrou a execu\ufffd\ufffdo do test.\n\t* @param\n\t*/\n\tpublic void assertPort(int value) {\n\t\t\tassertEquals(SecurityUtils.getPort(), value);\t\t\n\t}\n\t\t\n\t\n\t}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\tprivate KeyStore keyStore = null;\n\tprivate int port = 0;\n\tprivate String keyStoreURI = DEFAULT_KEYSTORE_URI;\n\tprivate String trustStoreURI = DEFAULT_TRUSTSTORE_URI;\n\n\t/**\n\t* @param\n\t*/\n\tpublic TransportKeyStoreBean_1Test() {\n\t}\n\t \n\t/**\n\t * {@link TransportKeyStoreBean#openTransportStore}\n\t */\n\t@Test\n\tpublic final void openTransportStore() throws Exception {\n\t\ttry {\n\t\t\topenTransportStore();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tlogger.error(\"Erro no TransportKeyStoreBean_1 Test:\");\n\t\t\tlogger.error(\"Excecao: \");\n\t\t\tlogger.error(e);\n\t\t\tassertNotNull(e);\n\t\t}\n\t}\n\n\t/**\n\t* Valida o openTransportStore() a partir dos valores de opcao de sessao\n\t * @throws Exception\n\t*/\n\tpublic void openTransportStore() throws Exception {\n\t\t\t\n\t\tkeyStoreUri = SecurityUtils.getKeyStoreUri();\n\t\t\n\t\tKeyManagerFactory keyManagerFactory = SecurityUtils.getKeyManagerFactory();\n\n\t\tlogger.info(\"valores do openTransportStore:\");\n\t\tlogger.info(SecurityUtils.getPort());\n\t\tlogger.info(SecurityUtils.getKeyStoreUrl());\n\t\tlogger.info(SecurityUtils.getProtectedPath());\n\t\tlogger.info(keyStoreUri);\n\t\tlogger.info(keyManagerFactory.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory.getKeyStoreType());\n\t\tlogger.info(keyStoreType);\n\t\tlogger.info(keyManagerFactory.getKeyStorePassword());\n\t\tlogger.info(keyStorePassword);\n\t\t\n\t\t\n\t\t// Valida o keyStoreURI\n\t\tif (SecurityUtils.isKeyStorePassword(keyStoreName())) {\n\t\t\tport = SecurityUtils.getPort();\n\t\t\tif (SecurityUtils.getPort().equals(\"-1\")) {\n\t\t\t\tport = DEFAULT_PORT;\n\t\t\t}\n\t\t\tkeyStoreUri = keyStoreURI.concat(port).concat(keyStoreURISep());\n\t\t}\n\t\t\n\t\t// Valida o keyManagerFactory\n\t\tKeyManagerFactory keyManagerFactory2 = SecurityUtils.getKeyManagerFactory();\n\n\t\tlogger.info(\"valores do keyManagerFactory:\");\n\t\tlogger.info(SecurityUtils.getPort());\n\t\tlogger.info(keyManagerFactory.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory.getKeyStoreType());\n\t\tlogger.info(keyManagerFactory.getKeyStorePassword());\n\t\tlogger.info(keyStoreType);\n\t\tlogger.info(keyManagerFactory2.getProtectionParameter());\n\t\tlogger.info(keyManagerFactory2.getKeyStoreType());\n\t\t\n\t}\t\n\n\t/**\n\t * Exemplo do test do openTransportStore()\n\t */\n\t@Test\n\tpublic void openTransportStoreWithPort() throws Exception {\n\t\ttry {\n\t\t\topenTransportStore(port);\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tlogger.error(\"Erro no TransportKeyStoreBean_1 Test:\");\n\t\t\tlogger.error(\"Excecao: \");\n\t\t\tlogger.error(e);\n\t\t\tassertNotNull(e);\n\t\t}\n\t}\n\t\n\tpublic void openTransportStore(int port) throws Exception {\n\t\tlogger.info(\"Entrou com port: \" + port);\n\t\tkeyStore = SecurityUtils.openTransportStore(SecurityUtils.getKeyStoreUrl(),\n\t\t\t\tSecurityUtils.getKeyStorePassword(), port);\n\t}\n\t\n\t/**\n\t * Entra no argumento do {@link TransportKeyStoreBean}\n\t * @return KeyStore\n\t */\n\tpublic KeyStore openTransportStore() {\n\t\treturn keyStore;\n\t}\n\t\t */\n\n\t/**\n\t* Valida os valores de o port de sessao.\n\t* Entrou a execu\ufffd\ufffdo do test.\n\t* @param\n\t*/\n\tpublic void assertPort(int value) {\n\t\t\tassertEquals(SecurityUtils.getPort(), value);\t\t\n\t}\n\t\t\n\t\n\t}\n",
        "choice_no": 6
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n  //\n  // Tests\n\n  @Test\n  public void testClone() throws Exception {\n    KeyStore s = createTestStore(\"/trustedkey.jks\");\n    TransportKeyStoreBean tb = new TransportKeyStoreBean();\n    tb.setKeyStoreUri(\"file:/trustedkey.jks\");\n    tb.setKeyStoreType(TrustStoreType.JKS);\n    tb.setTrustStore(s);\n    tb.setTrustStorePassword(\"abcd\");\n    tb.setKeyStorePassword(SecurityUtils.PW);\n    tb.setTrustStoreType(KeyStoreType.JKS);\n    tb.setTrustStoreType(TrustStoreType.TRUSTSTORE_PASSWORD);\n    tb.setTrustStorePassword(\"abcd\");\n    tb.setProperty(SecurityUtils.USER_PROPERTY, \"value\");\n    tb.setProperty(SecurityUtils.KEY_PROPERTY, \"pass\");\n    assertNotNull(tb.getCopy());\n  }\n\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n  //\n  // Tests\n\n  @Test\n  public void testClone() throws Exception {\n    KeyStore s = createTestStore(\"/trustedkey.jks\");\n    TransportKeyStoreBean tb = new TransportKeyStoreBean();\n    tb.setKeyStoreUri(\"file:/trustedkey.jks\");\n    tb.setKeyStoreType(TrustStoreType.JKS);\n    tb.setTrustStore(s);\n    tb.setTrustStorePassword(\"abcd\");\n    tb.setKeyStorePassword(SecurityUtils.PW);\n    tb.setTrustStoreType(KeyStoreType.JKS);\n    tb.setTrustStoreType(TrustStoreType.TRUSTSTORE_PASSWORD);\n    tb.setTrustStorePassword(\"abcd\");\n    tb.setProperty(SecurityUtils.USER_PROPERTY, \"value\");\n    tb.setProperty(SecurityUtils.KEY_PROPERTY, \"pass\");\n    assertNotNull(tb.getCopy());\n  }\n\t\n}\n",
        "choice_no": 7
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n    /**\n     * Simple tests for {@link TransportKeyStoreBean#openTransportStore()}.\n     */\n    @Test\n    void openTransportStoreSimple () {\n        final String keyStoreUri = \"file:/tmp/pass.jnfe.pfx\";\n        final String keyStorePassword = \"file:pass.jnfe.pfx\";\n        final KeyStore.TrustedCertificateEntry trustStoreEntry = new KeyStore.TrustedCertificateEntry(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n        final KeyManagerFactory kmf = SecurityUtils.getKeyManagerFactory(keyStorePassword, keyStoreUri);\n        \n        final KeyStore keyStore = SecurityUtils.openKeyStore(kmf, \"0\", false);\n        keyStore.setTrustedCertificateEntry(trustStoreEntry);\n        assertNotNull(\"keystore\", keyStore);\n        \n        final KeyManagerFactory ckmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, keyStoreUri);\n        assertNotNull(\"keyManager.factory\", ckmf);\n        \n        final KeyStore keyStore2 = SecurityUtils.openKeyStore(kmf, \"2\", false);\n        assertNotNull(\"keystore2\", keyStore2);\n        \n        final KeyManagerFactory cmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, NULL_STRING);\n        assertNotNull(\"kmf.factory\", cmf);\n    }\n    \n    /**\n     * Simple tests for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n     */\n    @Test\n    void openTransportKeyManagerFactorySimple () {\n        final String keyStoreType = \"pkcs12\";\n        final String keyStoreUri = \"file:/tmp/pass.jnfe.pfx\";\n        final String keyStorePassword = \"file:pass.jnfe.pfx\";\n        final KeyStore.TrustedCertificateEntry trustStoreEntry = new KeyStore.TrustedCertificateEntry(keyStoreType, DEFAULT_KEYSTORE_TYPE);\n        final KeyManagerFactory kmf = SecurityUtils.getKeyManagerFactory(keyStorePassword, keyStoreUri);\n        \n        final KeyManagerFactory ckmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, keyStoreUri);\n        assertNotNull(\"keyManager.factory\", ckmf);\n    }\n    \n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n    /**\n     * Simple tests for {@link TransportKeyStoreBean#openTransportStore()}.\n     */\n    @Test\n    void openTransportStoreSimple () {\n        final String keyStoreUri = \"file:/tmp/pass.jnfe.pfx\";\n        final String keyStorePassword = \"file:pass.jnfe.pfx\";\n        final KeyStore.TrustedCertificateEntry trustStoreEntry = new KeyStore.TrustedCertificateEntry(DEFAULT_KEYSTORE_TYPE, DEFAULT_KEYSTORE_URI);\n        final KeyManagerFactory kmf = SecurityUtils.getKeyManagerFactory(keyStorePassword, keyStoreUri);\n        \n        final KeyStore keyStore = SecurityUtils.openKeyStore(kmf, \"0\", false);\n        keyStore.setTrustedCertificateEntry(trustStoreEntry);\n        assertNotNull(\"keystore\", keyStore);\n        \n        final KeyManagerFactory ckmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, keyStoreUri);\n        assertNotNull(\"keyManager.factory\", ckmf);\n        \n        final KeyStore keyStore2 = SecurityUtils.openKeyStore(kmf, \"2\", false);\n        assertNotNull(\"keystore2\", keyStore2);\n        \n        final KeyManagerFactory cmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, NULL_STRING);\n        assertNotNull(\"kmf.factory\", cmf);\n    }\n    \n    /**\n     * Simple tests for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n     */\n    @Test\n    void openTransportKeyManagerFactorySimple () {\n        final String keyStoreType = \"pkcs12\";\n        final String keyStoreUri = \"file:/tmp/pass.jnfe.pfx\";\n        final String keyStorePassword = \"file:pass.jnfe.pfx\";\n        final KeyStore.TrustedCertificateEntry trustStoreEntry = new KeyStore.TrustedCertificateEntry(keyStoreType, DEFAULT_KEYSTORE_TYPE);\n        final KeyManagerFactory kmf = SecurityUtils.getKeyManagerFactory(keyStorePassword, keyStoreUri);\n        \n        final KeyManagerFactory ckmf = SecurityUtils.getKeyManagerFactory(NULL_STRING, keyStoreUri);\n        assertNotNull(\"keyManager.factory\", ckmf);\n    }\n    \n}",
        "choice_no": 8
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t/**\n\t* Test of init().\n\t*\n\t* @throws Exception\n\t*/\n\t@Test\n\tpublic void testInit() throws Exception {\n\t\tlogger.debug(\"# init()\");\n        TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tassertNotNull(instance);\n\t\tassertNotNull(instance.trustStore);\n\t\tassertNotNull(instance.trustStorePassword);\n\t\tassertNotNull(instance.keyStore);\n\t}\n\t\n\t@Test\n\tpublic void testCloseTransportStore() throws Exception {\n\t\tlogger.debug(\"# testCloseTransportStore\");\n        SecurityUtils.SecurityUtils = null;\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tinstance.trustStoreUri = DEFAULT_KEYSTORE_URI;\n\t\tinstance.trustStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.trustStorePassword = null;\n\t\tinstance.keyStoreUri = System.getProperty(\"user.home\") + \"/.jnfe\";\n\t\tinstance.keyStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.keyStorePassword = null;\n\t\tinstance.trustStoreUri = \"file:#{ System.getProperty('user.home') }/jnfe.pfx\";\n\t\tinstance.trustStoreType = \"pkcs12\";\n\t\tinstance.trustStorePassword = null;\n\n\t\tinstance.trustStore = SecurityUtils.SecurityUtils.unwrap(instance.trustStore);\n\t\tSystem.setProperty(\"user.home\", \"file:\");\n\t\tinstance.trustStore = SecurityUtils.SecurityUtils.unwrap(instance.trustStore);\n\t\tassertEquals(instance.trustStoreUri,DEFAULT_KEYSTORE_URI);\n\t\tlogger.debug(\"# closeTransportStore #\");\n\t\tinstance.trustStore = null;\n\t}\n\n\t@Test\n\tpublic void testGetKeyStore() throws Exception {\n\t\tlogger.debug(\"# testGetKeyStore\");\n        TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tinstance.trustStoreUri = DEFAULT_KEYSTORE_URI;\n\t\tinstance.trustStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.trustStorePassword = null;\n\t\tinstance.keyStoreUri = System.getProperty(\"user.home\") + \"/.jnfe\";\n\t\tinstance.keyStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.keyStorePassword = null;\n\n\t\tinstance.keyStore = SecurityUtils.SecurityUtils.unwrap(instance.keyStore);\n\t\tSystem.setProperty(\"user.home\", \"file:\");\n\t\tinstance.keyStore = SecurityUtils.SecurityUtils.unwrap(instance.keyStore);\n\t\tassertEquals(instance.keyStoreUri,DEFAULT_KEYSTORE_URI);\n\t\tlogger.debug(\"# closeTransportStore #\");\n\t\tinstance.trustStore = null;\n\t}\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\t/**\n\t* Test of init().\n\t*\n\t* @throws Exception\n\t*/\n\t@Test\n\tpublic void testInit() throws Exception {\n\t\tlogger.debug(\"# init()\");\n        TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tassertNotNull(instance);\n\t\tassertNotNull(instance.trustStore);\n\t\tassertNotNull(instance.trustStorePassword);\n\t\tassertNotNull(instance.keyStore);\n\t}\n\t\n\t@Test\n\tpublic void testCloseTransportStore() throws Exception {\n\t\tlogger.debug(\"# testCloseTransportStore\");\n        SecurityUtils.SecurityUtils = null;\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tinstance.trustStoreUri = DEFAULT_KEYSTORE_URI;\n\t\tinstance.trustStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.trustStorePassword = null;\n\t\tinstance.keyStoreUri = System.getProperty(\"user.home\") + \"/.jnfe\";\n\t\tinstance.keyStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.keyStorePassword = null;\n\t\tinstance.trustStoreUri = \"file:#{ System.getProperty('user.home') }/jnfe.pfx\";\n\t\tinstance.trustStoreType = \"pkcs12\";\n\t\tinstance.trustStorePassword = null;\n\n\t\tinstance.trustStore = SecurityUtils.SecurityUtils.unwrap(instance.trustStore);\n\t\tSystem.setProperty(\"user.home\", \"file:\");\n\t\tinstance.trustStore = SecurityUtils.SecurityUtils.unwrap(instance.trustStore);\n\t\tassertEquals(instance.trustStoreUri,DEFAULT_KEYSTORE_URI);\n\t\tlogger.debug(\"# closeTransportStore #\");\n\t\tinstance.trustStore = null;\n\t}\n\n\t@Test\n\tpublic void testGetKeyStore() throws Exception {\n\t\tlogger.debug(\"# testGetKeyStore\");\n        TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tinstance.init();\n\t\tinstance.trustStoreUri = DEFAULT_KEYSTORE_URI;\n\t\tinstance.trustStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.trustStorePassword = null;\n\t\tinstance.keyStoreUri = System.getProperty(\"user.home\") + \"/.jnfe\";\n\t\tinstance.keyStoreType = DEFAULT_KEYSTORE_TYPE;\n\t\tinstance.keyStorePassword = null;\n\n\t\tinstance.keyStore = SecurityUtils.SecurityUtils.unwrap(instance.keyStore);\n\t\tSystem.setProperty(\"user.home\", \"file:\");\n\t\tinstance.keyStore = SecurityUtils.SecurityUtils.unwrap(instance.keyStore);\n\t\tassertEquals(instance.keyStoreUri,DEFAULT_KEYSTORE_URI);\n\t\tlogger.debug(\"# closeTransportStore #\");\n\t\tinstance.trustStore = null;\n\t}\n\n}",
        "choice_no": 9
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate final static String DEFAULT_TRUSTSTORE_URI = \"file:#{ systemProperties['user.home'] }/jce.p12\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_TYPE = \"PKCS12\";\n\n\tprivate String trustStoreUri;\n\n\tprivate String trustStoreType;\n\n\tprivate String trustStorePassword;\n\n\n//\t@BeforeMethod\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tSecurityUtils.reset();\n\t}\n\n\t/**\n\t* Test method for {@link TransportKeyStoreBean#openTransportStore()}.\n\t*/\n\t@Test\n\tvoid openTransportStore_ShouldOpenTheKeyStoreFromFile() throws Exception {\n        KeyStore keyStore = openTransportStore();\n\t\t\n        assertGetKeyStore(\"file#{ systemProperties['keyStore'] }\").isEqualTo(keyStoreUri);\n\t}\n\n\t/**\n\t* Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n\t*/\n\t@Test\n\tvoid openTransportKeyManagerFactory_ShouldOpenTheKeyManagerFactoryForTrustedKeyStore() throws Exception {\n\t\tKeyManagerFactory keyManagerFactory = openTransportKeyManagerFactory();\n\t\tassertGetKeyManager(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyManagerFactory.getKeyManagers()[0]);\n\t}\n\t\n\t@Test\n\tvoid init_ShouldCreateKeyStore() throws Exception {\n\t\tKeyStore keyStore = KeyStore.getInstance(\"PKS128\", \"SC\");\n\t\topenTransportStore();\n\t\tKeyStore keyStore2 = KeyStore.getInstance(\"PKS128\", DEFAULT_KEYSTORE_TYPE);\n\t\tkeyStore.init(null, new String[] { getKeyStorePassword().toCharArray() }, null);\n\t\tassertGetKeyStore(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyStoreUri);\n\t\tassertGetKeyManager(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyManagerFactory.getKeyManagers()[0]);\n\t\tassertGetKeyStore(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyStore2.getKey(DEFAULT_KEYSTORE_URI, new char[0]).getEncoded());\n\t}\n}\n\n// class\n// {\n//     private static final String DEFAULT_TRUSTSTORE_TYPE = \"PKCS12\";\n//     \n//     private static final String DEFAULT_KEYSTORE_TYPE = \"file\";\n//     private static final String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jce.p12\";\n//     \n//     private KeyStore keyStore = null;\n//     \n//     private KeyManagerFactory keyManagerFactory;\n// }",
                "finish_reason": "stop"
            }
        ],
        "id": "1ee7a368-4eb7-40c9-a429-0cbbdd46f6b2",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri);\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType);\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword);\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore);\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType);\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword);\n\n    public void afterPropertiesSet() throws Exception;\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString();\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception;\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception;\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 44.04436659812927,
        "usage": {
            "prompt_tokens": 960
        },
        "applied_heuristics": "",
        "original_generated_code": "\n\tprivate final static String DEFAULT_TRUSTSTORE_URI = \"file:#{ systemProperties['user.home'] }/jce.p12\";\n\n\tprivate final static String DEFAULT_TRUSTSTORE_TYPE = \"PKCS12\";\n\n\tprivate String trustStoreUri;\n\n\tprivate String trustStoreType;\n\n\tprivate String trustStorePassword;\n\n\n//\t@BeforeMethod\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tSecurityUtils.reset();\n\t}\n\n\t/**\n\t* Test method for {@link TransportKeyStoreBean#openTransportStore()}.\n\t*/\n\t@Test\n\tvoid openTransportStore_ShouldOpenTheKeyStoreFromFile() throws Exception {\n        KeyStore keyStore = openTransportStore();\n\t\t\n        assertGetKeyStore(\"file#{ systemProperties['keyStore'] }\").isEqualTo(keyStoreUri);\n\t}\n\n\t/**\n\t* Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n\t*/\n\t@Test\n\tvoid openTransportKeyManagerFactory_ShouldOpenTheKeyManagerFactoryForTrustedKeyStore() throws Exception {\n\t\tKeyManagerFactory keyManagerFactory = openTransportKeyManagerFactory();\n\t\tassertGetKeyManager(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyManagerFactory.getKeyManagers()[0]);\n\t}\n\t\n\t@Test\n\tvoid init_ShouldCreateKeyStore() throws Exception {\n\t\tKeyStore keyStore = KeyStore.getInstance(\"PKS128\", \"SC\");\n\t\topenTransportStore();\n\t\tKeyStore keyStore2 = KeyStore.getInstance(\"PKS128\", DEFAULT_KEYSTORE_TYPE);\n\t\tkeyStore.init(null, new String[] { getKeyStorePassword().toCharArray() }, null);\n\t\tassertGetKeyStore(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyStoreUri);\n\t\tassertGetKeyManager(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyManagerFactory.getKeyManagers()[0]);\n\t\tassertGetKeyStore(DEFAULT_TRUSTSTORE_TYPE).isEqualTo(keyStore2.getKey(DEFAULT_KEYSTORE_URI, new char[0]).getEncoded());\n\t}\n}\n\n// class\n// {\n//     private static final String DEFAULT_TRUSTSTORE_TYPE = \"PKCS12\";\n//     \n//     private static final String DEFAULT_KEYSTORE_TYPE = \"file\";\n//     private static final String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jce.p12\";\n//     \n//     private KeyStore keyStore = null;\n//     \n//     private KeyManagerFactory keyManagerFactory;\n// }\n",
        "choice_no": 10
    }
]