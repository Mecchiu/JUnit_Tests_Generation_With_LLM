ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
18957332-f65d-4f96-916c-002be667a6e6,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_0Test.java,61.952844858169556,stop,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    public static boolean getWakeupSelectorAfterRegisterWrite() {
        return wakeupSelectorAfterRegisterWrite;
    }
}
","// NonBlockingClientHandler_0Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.
*/
class NonBlockingClientHandler_0Test {","// NonBlockingClientHandler_0Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.
*/
class NonBlockingClientHandler_0Test {
private final Log log = LogFactory.getLog(this.getClass());

		// Constructors


		public NonBlockingClientHandler_0Test() {
			super();
		}

		private NonBlockingClientHandler_0Test(ByteBuffer buffer) {

			this.buffer = buffer;
		}

		// Instance Creation Methods

		public NonBlockingClientHandler_0Test(ByteBuffer buffer) {
			super();
			this.buffer = buffer;
		}


		// Methods

		public ByteBuffer getBuffer() {
			return this.buffer;
		}


		@Override
		public String getName() {
			return ""Test NonBlockingClientHandler_0"";
		}


		@Override
		public void handle(Connection c, byte level) throws IOException {

			try {
				System.out.println(""Handle to Connection: "" + c + "" level: "" + level);
				while(level > 0) {
					level--;
					System.out.println(""Level not processed, sleeping for some time."");
					Thread.sleep(100);
					c.close();
				}
				c.write(getBuffer());
			} catch (InterruptedIOException e) {
				e.printStackTrace();
			} catch (IOException e) {
				System.out.println(""IOException"");
				e.printStackTrace();
			}

		}


		private ByteBuffer getBuffer() {
			return this.buffer;
		}

	}

// NonBlockingClientHandler_1Test.java

class NonBlockingClientHandler_1Test extends ServerTest {
		private final Log log = LogFactory.getLog(getClass());
		private final String name = ""NonBlockingClientHandler_1Test"";

		private final ByteBuffer data = ByteBuffer.allocate(100000);

		private Throwable exception;

		private NonBlockingClientHandler_1Test(Server s, NonBlockingServerProxy proxy) {

			super(s, proxy);
		}

		public NonBlockingClientHandler_1Test(Server s) {

			super(s);
		}

		public void run() {

			Log log = LogFactory.getLog(getClass());
			try {

				List<Server> servers = getServers();
				if(!servers.isEmpty()) {
					for (Server server : servers) {
						server.initialize(null, null);
						for (SocketChannel sc : server.getInputs()) {

							try {
								//Send data to the server.
								OutputStream os = sc.getOutputStream();
								sc.write(data);
								sc.close();
							} catch (IOException e) {
								e.printStackTrace();
								System.err.println(""Failure when sending data to the server. ""
									+ e.getMessage());
							}
						}
					}

					/*
					 * Send data to the server.
					 */
					List<Server> serversOutput = getServersOutput();
					for (Server server : serversOutput) {
						server.initialize(null, null);
						try {

							//Send data to the server.
							OutputStream os = server.getOutputStream();
							server.write(data);
							os.write(data);
							os.flush();
						} catch (IOException e) {
							e.printStackTrace();
							System.err.println(""Failure when sending data to the output stream. ""
								+ e.getMessage());
						}
					}

				}

            } catch (Exception e) {
                throw new IllegalStateException(e.getClass().getName() + ""["" + e.getMessage()+ ""]"");
            }
		}

		public void testData() throws InterruptedException, IOException {

			Log log = LogFactory.getLog(getClass());
				log.info(getName() + "" started"");
				log.info(""Running the "" + name);

				run();
				log.info(getName() + "" finished"");

			}

}

// Main.
public static void main(String[] args) {

	Server server = null;
	
	/*
	 * Test cases.
	 */
	server = new ServerTest(Integer.getInteger(""tests""));
	server.run();
	
}
"
6d1dc01d-8607-42b1-9062-cecf7b415508,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_1Test.java,60.0230450630188,length,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    public static boolean getWakeupSelectorAfterRegisterRead() {
        return wakeupSelectorAfterRegisterRead;
    }
}
","// NonBlockingClientHandler_1Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.
*/
class NonBlockingClientHandler_1Test {","// NonBlockingClientHandler_1Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.
*/
class NonBlockingClientHandler_1Test {
/**
* Prints in-formated output:
*/
final Logging logging = Logger.getLogger(""org.quickserver.net.server.impl.NonBlockingClientHandler_1Test"");

	// NonBlackingClientHandler.java
	public NonBlockingClientHandler_1Test() {
		System.out.println(""NonBlockingClientHandler_1Test"");
	}

//
// public void testNonBlockingClientHandler_1() {}
//
//
public Object checkSelectorAfterRegisterRead(ClientSessionChannel clientChannel,
    ClientSession clientSession, int expectedWakeupId) throws IOException, java.io.UnsupportedEncodingException {
    return checkSelectorAfterRegisterRead(clientChannel, clientSession, true);

}
public Object checkSelectorAfterRegisterRead(ClientSessionChannel clientChannel,
    ClientSession clientSession, boolean expectedWakeupId) throws IOException, java.io.UnsupportedEncodingException {
  byte[] buf;
  ClientChannelInfo clientChannelInfo = clientChannel.getInfo();
  int selectorsSize = (buf = clientChannelInfo.getSelectorsSizeData())[0];
  //System.out.println(""selectorsSize =""+selectorsSize);
  
int wakeupId = clientSession.getSelector().getAfterRegisterReadSelector().getNextAfterRegisterReadSelector().getNextSelector()+1;

logging.finest(""selectorsSize = ""+(selectorsSize));

//System.out.println(""selectorsSize = ""+selectorsSize+"" "");
  if(selectorsSize > 0)  {
        selectorsSize--;
    }

logging.finest(""selectorsSize = ""+selectorsSize+"" "");
    
  if(selectorsSize == 0) {
    if(expectedWakeupId) {
      logging.fine(""expectedWakeupId = true"");
    }
    logging.fine(""selectorsSize = 0 "");
    int selectorNo = getSelectorNo(clientSession.getSelector());
    int wakeupIdNo = getWakeupId(clientSession, clientChannel, selectorNo);
    if(wakeupIdNo > 0) {
      return wakeupIdNo;
    } else {
      return wakeupId; // default value
    }
  } else {
    return 0; // else default value
  }
}

// NonBlockingClientHandler_2.java

public class NonBlockingClientHandler_2Test {
		/**
* Prints in-formated output:
*/
 final Logging logging = Logger.getLogger(""org.quickserver.net.server.impl.NonBlockingClientHandler_2Test"");
			
	// NonBlindingClientHandler.java
	public NonBlockingClientHandler_2Test() {
		System.out.println(""NonBlockingClientHandler_2Test"");
	}

//
// public void testSelectorAfterRegisterReadWakingup() throws IOException {
    logging.fine(""Testing NonBlockingClientHandler_2.selectorsWakeup()"");
   ClientSession clientSession = ServerImpl.testAllocateClientSession(getSocket());
    logging.fine(""clientSession.getInfo().getSelectorsSizeData() = ""+clientSession.getInfo().getSelectorsSizeData());
    logging.finest(""connecting to server"");
    try {

      NonBlockingClientHandler nbh = new NonBlockingClientHandler(InetAddress.getByName(""0.0.0.0""));
      assertNotNull(nbh);

      // connect to server
      ServerSessionChannel serverSessionChannel = nbh.connect(clientSession, getSocket());
      assertNotNull(serverSessionChannel);

      final ClientSession clientSession2 = ServerImpl.testAllocateClientSession(getSocket());
      logging.fine(""clientSession2.getInfo().getSelectorsSizeData() = ""+clientSession2.getInfo().getSelectorsSizeData());
      logging.finest(""connecting to server"");
      final NonBlockingClientHandler nbh2 = new NonBlockingClientHandler(InetAddress.getByName(""0.0.0.0""));
      assertNotNull(nbh2);

      // connect to server
      serverSessionChannel.send(nbh2);

      logging.fine(""selectorsWakeup = true"");
      ServerMessage message = serverSessionChannel.receive(5).castTo(ServerMessage.class);
      logging.finest(""selectorsWakeup = ""+message);

      // receive all message
      int numMessage = message.getSelectorsNumber();
      for(int i = 0; i < numMessage; ++i) {
        ServerMessage m = ServerImpl.testAllocateServerMessage(getSocket());
        assertNotNull(m);

        m.setSelectorsNumber(i);
        ClientSession clientSession3 = ServerImpl.testAllocateClientSession(getSocket());

        ServerSessionChannel serverSessionChannel3 = nbh2.connect(clientSession3, getSocket());
        assertNotNull(serverSessionChannel3);
        logging.finest(""clientSession3.getInfo().getSelectorsSizeData() = ""+clientSession3.getInfo().getSelectorsSizeData());

        serverSessionChannel3.send(m);
      }

      // we should receive messages from the server 3 times once
      numMessage = message.getSelectorsNumber();
      for(int i = 0; i < numMessage; ++i) {
        ServerMessage m = ServerImpl.testAllocateServerMessage(getSocket());
        assertNotNull(m);

        ServerMessage message2 = ServerImpl.testAllocateServerMessage(getSocket());
        assertNotNull(message2);

        m.setSelectorsNumber(i);
        ServerSession channelServerSession = ServerImpl.testAllocateServerSession(getSocket());

        ServerSessionChannel channelServerSessionChannel = ServerImpl.testAllocateServerSession(getSocket());
        assertNotNull(channelServerSessionChannel);

        for(int s=0; s <2 ; s++) {
          ClientChannel clientChannel = channelServerSessionChannel.getInfo().getSelectorsByChannel(s).getNext();
          clientChannel.send(nbh2);

          ServerMessage messageServer = message.castTo(ServerMessage.class);
          ServerMessage message2Server = message2.castTo(ServerMessage.class);

          logging.println(""server.send: ""+ServerImpl.printMessage(m));

          logging.println(""server.send(message)"");

          logging.println(""server.send(message2)"");

          assertSame(ServerImpl.printMessage(message2Server), ServerImpl.printMessage(m));

          logging.println(""server.send(messageServer)"");
          logging.println(""server.send(message2Server)"");
          assertSame(ServerImpl.printMessage(messageServer), ServerImpl.printMessage(m));

          ServerSessionChannel clientSessionChannelServer = ServerImpl.testAllocateClientSession(getSocket());
          logging.finest"
0a585c9f-19d9-45f8-9626-81107592ee68,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_2Test.java,60.05399680137634,stop,"// NonBlockingClientHandler.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;

public class NonBlockingClientHandler extends BasicClientHandler {

    public static int getMaxThreadAccessCount() {
        return maxThreadAccessCount;
    }
}
","// NonBlockingClientHandler_2Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.
*/
class NonBlockingClientHandler_2Test {","// NonBlockingClientHandler_2Test.java
package org.quickserver.net.server.impl;

import org.quickserver.net.server.*;
import org.quickserver.net.*;
import org.quickserver.util.*;
import org.quickserver.util.io.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.*;
import java.nio.*;
import java.nio.channels.*;
import javax.net.ssl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NonBlockingClientHandler}.
* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.
*/
class NonBlockingClientHandler_2Test {
private final Set<Integer> stopThreadAccess;
		private final List<SocketInfo> closeSockets;
        private final SocketManager socketManager;
		private final Server server;
        private final NonBlockingServerHandler serverHandler;

		/**
				* Constructs a new instance of
				* {@link NonBlockingClientHandler_2Test}.
				*
				* @param stopThreadAccess is the set of threads and sockets that have been passed to {@link NonBlockingClientHandler#stopThreadAccess}
				* @param closeSockets is the list of sockets
				* @param socketManager is the {@link Server}
				* @param serverHandler is the {@link ServerHandler} (from the {@link Server})
                */
        NonBlockingClientHandler_2Test(Set<Integer> stopThreadAccess, List<SocketInfo> closeSockets, SocketManager socketManager, Server server, ServerHandler serverHandler) {
            this.stopThreadAccess = stopThreadAccess;
            this.closeSockets 	= closeSockets;
            this.socketManager = socketManager;
            this.server = server;
            this.serverHandler = serverHandler;
            
			this.startThreadAcessCount = this.stopThreadAccess.size();   //the number of connections requested so far for the Server while the ServerHandler is running
        	this.serverHandler.startUp(server);
        	this.startThreadAcessCount = this.stopThreadAccess.size(); 	//the number of connections requested so far for the Server while the ServerHandler is running
        }

		/**
		* Tests getMaxThreadAccessCount method.
                */
        @Test
        public void testGetMaxThreadAccessCount() throws Exception {
            ServerHandler currentServerHandler = new ServerHandler(this.server, socketManager, this.serverHandler);
            
            int maxThreadAccessCount = this.getMaxThreadAccessCount(currentServerHandler);

            assertEquals(this.stopThreadAccess.size(), maxThreadAccessCount);
        }

        /**
		 * Tests the end of the server up after getting and end of a thread up,
                * and without end of all channels being processed until
		 * the closeSockets method has been called.
                *
                * @throws IOException exception.
		 */
        @Test
        public void testEndOfServerWhenChannelClosingIsDoneAfterClosingNioChannels() throws IOException {
            ServerHandler currentServerHandler = new ServerHandler(this.server, socketManager, this.serverHandler);
            currentServerHandler.setMaxThreadAccessCount(startThreadAcessCount);

            this.serverHandler.endOfProcessing(currentServerHandler);

            Set<Integer> closeThreadAccess = currentServerHandler.stopThreadAccess();

            assertTrue(closeThreadAccess.isEmpty());

            Map<Integer, ServerSocketChannel> currentServerSockets = new HashMap<>();
            Collection<SocketInfo> closeSockets = new HashSet<>(this.closeSockets);

            while(!closeSockets.isEmpty()) {
                closeSockets.remove(closeSockets.iterator().next());

                int socketNumber = closeSockets.iterator().next().number;
                
                ServerSocketChannel serverSocketChannel = currentServerSockets.get(socketNumber);
                System.out.println(""socketNumber: "" + socketNumber + "" serverSocketChannel: "" + serverSocketChannel);
                Collection<ServerConnection> serverConnections = serverSocketChannel.getValidAcceptableConnections();
                if (!serverConnections.isEmpty()) {
                    ServerConnection serverConnection = serverConnections.iterator().next();
                    ServerSocketChannel serverSvcChannel = serverConnection.getServerSocketChannel();
                    System.out.println(""serverSvcChannel: "" + serverSvcChannel);

                    while (!serverSvcChannel.isConnectionPending()) {

                        boolean isClient = serverSvcChannel.getInputStream() instanceof SocketInputStream;
                        SocketInputStream clientInputStream = (SocketInputStream) serverSvcChannel.getInputStream();
                        ByteBuffer bbClientInput = clientInputStream.getDataBuffer();

                        SocketAddress remoteAddress = serverSvcChannel.getRemoteAddress();
                        if (remoteAddress == null) {
                            remoteAddress = (SocketAddress) null;
                        }

                        ServerConnection clientConnection = new ServerConnection(serverSvcChannel, isClient, remoteAddress, bbClientInput.remaining());
                        server.addServerConnection(clientConnection);
                        
                        ServerConnectionManager serverConnectionManager = serverSvcChannel.getServerConnectionManager();
                        if(serverConnectionManager!=null) {
                            serverConnectionManager.shutdownAll(null);
                        }
                    }
                }
                
                currentServerSockets.put(socketNumber, serverSocketChannel);

                closeSockets.remove(closeSockets.iterator().next());
            }
        }

        /**
                * Creates a socket.
                * The input and output streams are null (so no matter if the socket is TCP or UDP).
                *
                * @return a Socket object
                */		
        private Socket newSocket() throws UnsupportedEncodingException {
            InetSocketAddress remoteAddress = new InetSocketAddress(NonBlockingClientHandler_2Test.HOST,NonBlockingClientHandler_2Test.PORT);
            byte[] buffer = new byte[100];
            
            BufferedInputStream bis = new BufferedInputStream( new ByteArrayInputStream(buffer));
            
            return new Socket(InetAddress.getByName(NonBlockingClientHandler_2Test.HOST),
                                  NonBlockingClientHandler_2Test.PORT, remoteAddress.getHostName(), remoteAddress.getPort(), bis);
        }

    }
}
"
59579048-b8d7-46c0-aa81-75cf7b765b6f,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_0Test.java,26.21426033973694,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public static final String getVersion() {
        return VER;
    }
}
","// QuickServer_0Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersion()} method.
*/
class QuickServer_0Test {","// QuickServer_0Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersion()} method.
*/
class QuickServer_0Test {

    public static void main(String[] args) {
        boolean autoInit = false;
        try {
            quickServerClass = Class.forName(""org.quickserver.net.server.QuickServer"")
                   .getDeclaredConstructor().newInstance();
            quickServerClass.getMethod(""init"").invoke(null);
            System.out.format(""Version:%s  %8s%n"",
                    quickServerClass.getMethod(""getVersion"").invoke(quickServerClass).toString(),
                    smartName(quickServerClass.getMethod(""getVersion"").invoke(quickServerClass)));
            assertTrue(""The QuickServer is not initialized properly"",
                    System.getSecurityManager()!= null);
            quickServer.getVersion();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                System.getSecurityManager().checkPermission(
                        SecurityConstants.PROPERTY_INIT_QUICKSERVER_ONLY);
            } catch (SecurityException se) {
                warn(""Permission is not granted."");
            }
        }
    }
    
    private static String smartName(Method m) {
        return m.getName()
           .replace(""/"", ""."")
           .replace("":"", ""_"")
           .replace("" "", ""_"");
    }

    public static Object clone(Object o) {
        return o;
    }
    
    public void run() {
        // Create a service object
        Object serviceObject = null;
        try {
            final ServiceReference ref = quickServerClass.getMethod(
                  ""getComponent"").invoke(quickServerClass);
            serviceObject = ref.createService();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Service svc = (Service)serviceObject;

        // Create the instance of the Service
        quickServer = (quickServer)svc.getProperty(
                ""quickserver.quickserver.xmlreader.serviceinstance"");
        quickServer.setName(""Echo Server"");
        quickServer.setAutoInit(autoInit);

        // Call the start() method of the singleton service
        try {
            quickServer.start();
        } catch(AppException ae) {
            System.out.println(""The program exited with an error."");
            if(ae.getCause() instanceof IOException) {
                System.out.println(""The error was because an I/O error occurred in the socket socket used"");
                System."
8d8fd52d-ef21-4f74-b14f-0374b751f790,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_1Test.java,26.020612001419067,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public static final float getVersionNo() {
        return getVersionNo(VER);
    }
}
","// QuickServer_1Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.
*/
class QuickServer_1Test {","// QuickServer_1Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.
*/
class QuickServer_1Test {
@Test
		public void test1(){
//		for(Method m : QuickServer.class.getDeclaredMethods()){
//			System.out.println(""\t""+""\tMethod : ""+m);
//		}

//		ClientEventHandler e1 = new ClientEventHandler(this);
//		new PingSms(""ping"", e1);

//		ClientCommandHandler h1 = new ClientCommandHandler();
//		new echoEcho(""echo"");

//		ClientObjectHandler m1 = new ClientObjectHandler(h1);
//		m1.addObject(""pong"");

//		ClientBinaryHandler h2 = new ClientBinaryHandler();
//		h1.addBinary(""pong"");

		}
}
"
dbe0c788-7578-4a3d-8115-20f3b1f89a76,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_2Test.java,26.127583742141724,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public static String getNewLine() {
        return NEW_LINE;
    }
}
","// QuickServer_2Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getNewLine()} method.
*/
class QuickServer_2Test {","// QuickServer_2Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getNewLine()} method.
*/
class QuickServer_2Test {

    /**
     * The constructor takes a String[], which is what the server is supposed
     * to build. The String[1] is the data.
     */
    public QuickServer_2Test(String argv[]) {
        this.argv = argv;
    }

    private static String[] argv = {};

    String getNewLine() {
        return NEW_LINE;
    }

}
"
5d51a073-396f-4aaa-9dcc-dce77067583a,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_3Test.java,24.419487714767456,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public synchronized boolean initService(Object[] param) {
        serviceError = null;
        try {
            initServer(param);
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_3Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.
*/
class QuickServer_3Test {","// QuickServer_3Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.
*/
class QuickServer_3Test {
private final int PORT = 12345;
		private final String PORT_STR = ""12345"";
	public QuickServer() throws IOException {
		// Get a String that represents the given port number.
		String PORT_NUMBR = """" + PORT;
		String[] PORT_NUMBR_ARRAY = PORT_NUMBR.split("","");
		PORT = Integer.parseInt(PORT_NUMBR_ARRAY[0]);

//		File file = new File(""/home/anker/Dropbox/Quick Server/QuickServer.jar"");

        if (!(file.exists() && file.isFile()) ) {
            throw new FileNotFoundException(""/home/anker/Dropbox/Quick""
            		+ ""Server/QuickServer.jar file does not exist!"");
        }

		URL url = this.getClass().getResource(""QuickServer.jar"");
    
        ServerSocketChannel channel = null;
        try {
        	channel = ServerSocketChannel.open();
        	ServerSocket serverSocket = channel.socket();
        	serverSocket.bind(new InetSocketAddress(PORT));

//        	for (SocketConnection conn : Poolable.getInstance().getPool(url, 1000)) {
//        		SocketChannel client = conn.channel();
//        		while (! conn.expirationManager.expired(client)) {
//        			// client = client.accept();
//                                
//        		}
//        	}
        } catch (SocketException se) {
            throw se;
        } catch (IOException ioe) {
            throw ioe;
        }

        try {
    		PortNumberNumberFactoryPair portNumFp = new PortNumberNumberFactoryPair(
 			new Integer(PORT));

    		this.clientNumFp = new ClientNumNumberFactoryPair(portNumFp);

    		this.clientChNumFp = new ClientChNumFactoryPair(portNumFp);
    		
    		this.clientKeyPair = new ClientKeyPairPair(null);

        } catch (NumberFormatException nfe) {
        	  throw nfe;
        } catch (Exception e) {
        	  throw new IOException(e);
        }  
    }

        public String getName() {
            "
a525131b-97c7-4c10-9131-844a060f69b2,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_4Test.java,24.59442114830017,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public synchronized boolean initService(QuickServerConfig qsConfig) {
        serviceError = null;
        try {
            initServer(qsConfig);
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_4Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.
*/
class QuickServer_4Test {","// QuickServer_4Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.
*/
class QuickServer_4Test {

    public volatile static Service instance = null;
    public static QuickServer serverInstance = null;
	Service error = null;
	
	/**
	 * Check if the server has initialized correctly
	 * @throws AppException if any errors are encountered. Throws a {@link AppException}
	 * (as is, most commonly, if there is no server.xml configured)
	 */
	@Test
	void testService() throws AppException {
		try {
			serviceError = null;
			instance = null;
			error = null;
			log(""Initialization successfuly"");
			serverInstance = QuickServer.initService(QuickServer.getDefaultQuickServerConfig().getConfig());
			if(instance.getState() == null) {
				// Assertion failed : 
				assert (error.getCause()!= null);
				throw (error.getCause());
			}
			assert ((QuickServer)instance).getService().getLogger().isTraceEnabled();
			assert(!(( (QuickServer) instance ).getName().equals(""QuickServer.server.Echo"") ));	// Server name is ""QuickServer""
			assert(!(( (QuickServer) instance ).getName().equals(""QuickServer.Echo""))); 					// Server is not Echo
			assert(!(( (QuickServer) instance ).getName().equals(""QuickServer.Echo.Echo Server"")) );	// Server name is not ""QuickServer.server.Echo.Echo Server""
			return;
		}
		catch(Exception e) {
			Throwable t = (Throwable) e.getCause();
			while(t!= null) {
				if(t.getMessage().equals(""Could not connect to server"")) {
					return;
				}
				t = t.getCause();
			}
			throw e;
		}
	}
	
	private int count = 0;

	private String random_address() 
	{
		if(count == 0)
			return ""127.0.0.1:4111"";
		return ""127.0.0.1:"" + new Random().nextInt(2);
	}

	private void serviceError(Throwable e) 
	{
		e.printStackTrace();
		if(e.toString().cont"
f26eeaf4-d647-43c2-b31b-b6edb66f341d,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_5Test.java,24.033658504486084,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public boolean startService() {
        serviceError = null;
        if (getServiceState() == Service.RUNNING)
            return false;
        try {
            startServer();
        } catch (AppException e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_5Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#startService()} method.
*/
class QuickServer_5Test {","// QuickServer_5Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#startService()} method.
*/
class QuickServer_5Test {

    public volatile boolean serviceError = false;
	public void serviceError(AppException e) {serviceError = true;}
    
    public volatile boolean serviceState = Service.STOPPED;
    
    public volatile boolean isRunning = false;

    
    public QuickServer() {
    }
    
    
    public int getPort() {return port;}
    public String getName() {return name;}
    public int getTimeout() {return defaultTimeout;}
    public int getTimeout(int defaultTimeout) {return defaultTimeout;}
    public int getMaxConnections() {return maxConnections;}
    public int getMaxConnections(int maxConnections) {return maxConnections;}
    public int getPort(int defaultPort) {return port;}
    public String getPassword(String defaultPassword) {return password;}
    public String getPassword(InputStream defaultPasswordStream) {return password;}
    public String getURL(String defaultPort, String defaultVersion, String defaultVendor, SocketAddress defaultRemote0) {return url;}
    public int getVendor() {return vendor;}
    public InputStream getPasswordStream(InputStream defaultInputStream) {return passwordInputStream;}
    public SocketAddress getRemote0(String defaultPort, String defaultVendor, InputStream defaultInputStream) {return remote0;}
     
    
    
    public synchronized void startServer() throws AppException	{
		ServerSocket serverSocket = null;
		boolean bindSuccessful = false;
		try {
			
			port = Util.getPortFrom(getName(), this) + 1; // v1.2
			serverSocket = new ServerSocket(port);
			serverSocket.bind(new InetSocketAddress(port));
			isRunning = true;			
		} catch (OutOfMemoryError e) {
			serviceError(e);
		} catch (BindException e) {
			serviceError(e);
		} catch (IOException e) {
			serviceError(e);
		} catch (Exception e) {
			serviceError(e);
		}
		
		if (!bindSuccessful)
			throw new AppException(""Server port is occupied"");
		else {
			this.vendor = serverSocket.getLocalAddress().getAddress().getClass().getName();
			this.url ="
fcae4020-79e4-45b3-ba3e-8b219a839f3f,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_6Test.java,22.939069032669067,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public boolean stopService() {
        serviceError = null;
        if (getServiceState() == Service.STOPPED)
            return false;
        try {
            stopServer();
            clearAllPools();
        } catch (AppException e) {
            serviceError = e;
            return false;
        } catch (Exception e) {
            serviceError = e;
            return false;
        }
        return true;
    }
}
","// QuickServer_6Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#stopService()} method.
*/
class QuickServer_6Test {","// QuickServer_6Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#stopService()} method.
*/
class QuickServer_6Test {
private final static String USER_DATA_PASS = ""quickserver.data.password"";
		private final static String USER_DATA_RSAKEY = ""quickserver.data.rsakey"";
		private final static String USER_DATA_RSAKEYPASSWORD = ""quickserver.data.rsakecryption.password"";
		private final static String USER_DATA_USERNAME = ""quickserver.data.username"";
		private final static String USER_DATA_HOST = ""quickserver.data.server.ip"";
		private final static String USER_DATA_PORT = ""quickserver.data.server.port"";
		private final static String USER_DATA_SOCKET = ""quickserver.data.client.socket"";
		private final static String USER_DATA_PASSWORD = ""quickserver.data.password"";
		private final static String USER_PATH = ""quickserver.user.dir"";
		private final static String USER_DATA_SECURITY_PASSWORD = ""quickserver.data.security.password"";
		private final static String QUICKSERVER_HOST = ""quickserver.server.ip"";
		private final static String QUICKSERVER_PORT = ""quickserver.server.port"";

	
	private Queue client;
   private ClientPool  clientPool;        // singleton
   /**
     * If true, we call stopServer() which is done in a separate thread
     */
   private volatile boolean stopServer = false;
   /**
     * ClientHandler object that is used for client interaction and
     * binary data
     */
   private ClientHandler clientHandler = null;
   /**
     * If true, this thread can create connections that are NOT shared
     */
   private volatile boolean useSharedAddresses = true;
   private final static int MAX_CONNECTIONS = 3;

   public QuickServer_6Test() throws AppException {
     // clear the pools

     clearAllPools();
    
    clearClientPool();

   }

   private void clearAllPools() throws AppException {
   	clientPool = null;
		//clearClient"
d65e8f2f-9d10-40f2-92df-66d227799a76,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_7Test.java,22.290610551834106,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public boolean suspendService() {
        serviceError = null;
        if (getServiceState() == Service.RUNNING) {
            suspendMaxConnection = maxConnection;
            suspendMaxConnectionMsg = maxConnectionMsg;
            maxConnection = 0;
            maxConnectionMsg = ""Service is suspended."";
            setServiceState(Service.SUSPENDED);
            logger.log(Level.INFO, ""Service {0} is suspended."", getName());
            return true;
        }
        return false;
    }
}
","// QuickServer_7Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#suspendService()} method.
*/
class QuickServer_7Test {","// QuickServer_7Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#suspendService()} method.
*/
class QuickServer_7Test {

   private static final short MAX_CONNECTION = 32;
    private static final String CHARSET_ENCODING = ""ISO-8859-1"";

    private static ClientHandler client;
    private static String clientLogin = null;
    private static String clientLoginMsg = null;
    private static int clientSuspendedCount = 0;
    private static int timeOut;
    protected volatile boolean suspendServer = false;
    protected Object suspendContextObj = null;
    protected Object suspendContext = null;

	 /**
     * Test case where {@link #clientSuspendedCount} is incremented with each suspend.
     */
    //@Test
    public void testSuspendClientSuspendedCount() {
        for (int id=0; suspendServer && (!id % 10 == 0); id++) {
            clientSuspendedCount++;
        }
    }

    public static void main(String args[]) {
        new QuickServer_7Test();
    }

    public synchronized void setSuspendClientSuspendedCount(int cnt) {
        clientSuspendedCount = cnt;
    }

    public synchronized void setSuspendContext(Object a) {
        suspendContext = a;
    }

    public synchronized void addSuspendContext(Object a) {
        suspendContextObj = a;
    }

	/**
     * {@inheritDoc}
     */
    @Override
    public void run() {
        // Create client handler and send the command string for the connection.
        try { 
            client = new ClientHandler();
            client.run(clientLoginMsg.getBytes(CHARSET_ENCODING),
                    SystemProxyConstant.MAX_CONNECTION);
            // Time out by the server. The time out is reset when the connection is made.
            timeOut = 9999;

            while ((timeOut == 0) || ((suspendServer && (!clientSuspendedCount % 10 == 0))) && (!client.isClosed())) {
                client.send(clientLoginMsg.getBytes());
"
3d3968e0-8665-409d-8b48-4973cc24fec9,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_8Test.java,23.10921621322632,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public boolean resumeService() {
        serviceError = null;
        if (getServiceState() == Service.SUSPENDED) {
            maxConnection = suspendMaxConnection;
            maxConnectionMsg = suspendMaxConnectionMsg;
            setServiceState(Service.RUNNING);
            logger.log(Level.INFO, ""Service {0} resumed."", getName());
            return true;
        }
        return false;
    }
}
","// QuickServer_8Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#resumeService()} method.
*/
class QuickServer_8Test {","// QuickServer_8Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#resumeService()} method.
*/
class QuickServer_8Test {
String version = ""@version = $major.major.minor\n@buildDate = $d.date.modified\n"";
		/**
		* Creates a new object of {@link QuickServer} and starts the process.
		*
		* @see QuickServer
		*/
		public static void main(String args[]) {}
		public QuickServer(Configuration configuration, int max_connection,
				String name, int port, boolean blocking) {
		configuration.setProperty(""max_connections"", String.valueOf(max_connection));
		if (name!= null) {
			System.setProperty(""name"", name);
		}
		if (port > 0) {
			System.setProperty(""port"", String.valueOf(port));
		}
		if (blocking) {
			setBlocking(true);
		}
		start();
		}
		private volatile int serviceError;
		synchronized private void start() {
			if (serviceError!= 0) {
				return;
			}
			setName(getDefaultHostName());
			serviceError = 0;
			setServerState(
				Server.SOUTCOMING,
				Server.SERVER_ACTIVE,
				Server.SERVER_RUNNING,
				null);
			int status = ManagementFactory.getOperatingSystemMXBean()
				.getProcessCpuTime(Runtime.getRuntime().getId());

			try {
				Thread.sleep(ThreadLocalRandom.current().nextLong(500, Long.MAX_VALUE));
				Thread.sleep(3000);
				} catch(InterruptedException ie){
				}
			shutdown();
			Thread.sleep(2000);
			// This should work since quick server runs on classpath.
			if (port > 0) {
				startServer(port);
				}
		}
		private void stop() {
			serviceError = ServiceState.STOPPED;
			setServerState(
				Server.SOUTCOMING,
				Server.SERVER_STOPPED,
				Server.SERVER_RUNNING,
				null);
			serviceError = ServiceState.INACTIVE;
			"
b94ca6ed-b01b-49c0-9d30-1115a3d87882,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_9Test.java,23.77554225921631,length,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public String info() {
        serviceError = null;
        StringBuilder buf = new StringBuilder();
        buf.append(getName()).append(""\n"");
        buf.append(getBindAddr().getHostAddress()).append("" "");
        buf.append(getPort()).append(""\n"");
        return buf.toString();
    }
}
","// QuickServer_9Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#info()} method.
*/
class QuickServer_9Test {","// QuickServer_9Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#info()} method.
*/
class QuickServer_9Test {

	private int port = 534;
	private String bindAddress = ""localhost""; //default to localhost
	private String bindHost = ""127.0.0.1""; //localhost
	private String portString = """" + port;
	private SSLContext sslContext;
	private ServerSocket sslServerSocket;
	private ServerSocket sslServerSocket2;

	private String bindPassword = ""guest"";
	private String sslPassword = ""joe"";

	private int port2 = 3333;
	
	private boolean useSsl = false;
	private boolean useProxy = true;
	private boolean useSslOnly = false;
	

	private boolean quiet = true;
	boolean ssl = true;

//	public QuickServer(){
//	    ssl = true;
//	 	 useSsl = true;
//	 	 useSslOnly = false;
//	}

	public QuickServer_9Test(Service service, int port, int bindAdress, String bindpassword, String sslpassword) {
		try {
	        String contextRoot, sslContextroot = null;
	        FileSystemManager fsm = FileSystemManager.getFileSystemManager();
	        if (fsm.exists(FileStore.SSL_ROOT_FOLDER)!= null) {
		        FileStore root = fsm.lookup(FileStore.SSL_ROOT_FOLDER);
		        contextRoot = sslContextroot = root.getPath() + File.separator;
	        }
            serverClass = new ServerClass(sslContextroot + sslContext, port);
	    } catch (Exception e) {
	        throw new RuntimeException(e);
	    }
	 	this.port = port;
		this.bindAddress = bindAdress;
		this.bindPassword = bindpassword;
		this.sslPassword = sslpassword;
	}

	public static String sslPassword = null;
	
	public void setSslPassword(String sslPassword){
		this.sslPassword = sslPassword;
	}
	
	class ServerClass implements Runnable {
	   	private static final int DEFAULT_POOL_SIZE = 2000;
		private Server"
0a48f81c-5f77-4c07-b6ac-2a011cbb61a6,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_10Test.java,25.949753522872925,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public Iterator findAllClient() {
        return clientIdentifier.findAllClient();
    }
}
","// QuickServer_10Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#findAllClient()} method.
*/
class QuickServer_10Test {","// QuickServer_10Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#findAllClient()} method.
*/
class QuickServer_10Test {
private int port = 4104;

        public int getPort() {
            return port;
        }

        public void setPort(int p) {
            port = p;
        }

        public String getName() {
            return  ""QuickServer_10Test"";
        }

		public TestableClientIdentifier getClientIdentifier() {
			TestableClientIdentifier ret = new TestableClientIdentifier();
			ret.setId(new String(new UUID().toString().getBytes()).replaceAll(""[-]"", """"));
			ret.setType(TestableClientIdentifier.PING);
			return ret;
		}

		public ClientConfigBuilder getAppConfig() {
			System.setProperty(""quickserver.port"", """"+port);
			return null;
		}

		public void setUp() throws Exception {
			
		}

		public void tearDown() throws Exception {
			
		}

		public static void main(String args[]) {
			quickServer_10Test test = new quickServer_10Test();
			System.out.println(""TEST ""+test.getClass().getName());
			test.main();
		}
}
"
d7974761-2822-41e3-b0ca-13fd98391047,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_11Test.java,22.699947357177734,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        if (protocol != null && secureStoreManager != null) {
            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);
            _sslc.init(km, tm, null);
            return _sslc;
        }
        return sslc;
    }
}
","// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {","// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {
// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        if (protocol!= null && secureStoreManager!= null) {
            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);
            _sslc.init(km, tm, null);
            return _sslc;
        }
        return sslc;
    }
}

// QuickServer_11Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.
*/
class QuickServer_11Test {
		public static void main(String args[]) {
			Security.addProvider(new BouncyCastleProvider());
			System.setSecurityManager(new QuickserverSecurityManager());
             System.out.println(""Initializing"");
		}
    }
"
b140362a-ce4f-4bcb-9f0a-4aae9044e980,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_12Test.java,24.295426607131958,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        if (sslc == null)
            loadSSLContext();
        return secureStoreManager.getSocketFactory(getSSLContext(protocol));
    }
}
","// QuickServer_12Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.
*/
class QuickServer_12Test {","// QuickServer_12Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.
*/
class QuickServer_12Test {
// This class is an integration test and run when QuickServer is started.
        public static void main(String argv[]) {
            if (true) {
                return;
            }
            quickServer = new QuickServer();
            java.util.logging.Logger.getLogger(""net.ssl"").setLevel(java.util.logging.Level.ALL);
        }
        private static QuickServer quickServer;
}
/*********************************************************************************************/

"
5fd99516-1fbd-49c7-b70c-9cee9383297e,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_13Test.java,26.177956581115723,stop,"// QuickServer.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;

/**
 * Main class of QuickServer library. This class is used to create
 * multi client servers quickly.
 * <p>
 * Ones a client is connected, it creates {@link ClientHandler} object,
 * which is run using any thread available from the pool of threads
 * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which
 * handles the client. <br/>
 * QuickServer divides the application logic of its developer over eight
 * class, <br>
 * 	<ul>
 * 	<li>ClientEventHandler<br>
 * 		   &nbsp;Handles client events [Optional Class].
 * 		<li>ClientCommandHandler [#]<br>
 * 		   &nbsp;Handles client character/string commands.
 * 		<li>ClientObjectHandler [#]<br>
 * 		   &nbsp;Handles client interaction - Object commands.
 * 	<li>ClientBinaryHandler [#]<br>
 * 		   &nbsp;Handles client interaction - binary data.
 * 	<li>ClientWriteHandler [Optional Class]<br>
 * 		   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).
 * 		<li>ClientAuthenticationHandler [Optional Class]<br>
 * 			&nbsp;Used to Authencatet a client.
 * 		<li>ClientData [Optional Class]<br>
 * 			&nbsp;Client data carrier (support class)
 * 	<li>ClientExtendedEventHandler [Optional Class]<br>
 * 		   &nbsp;Handles extended client events.
 * 	</ul>
 *
 * [#] = Any one of these have to be set based on default DataMode for input.
 * The default DataMode for input is String so if not changes you will
 * have to set ClientCommandHandler.
 * </p>
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * package echoserver;
 *
 * import org.quickserver.net.*;
 * import org.quickserver.net.server.*;
 *
 * import java.io.*;
 *
 * public class EchoServer {
 * 	public static void main(String args[])	{
 * 		String cmdHandle = ""echoserver.EchoCommandHandler"";
 *
 * 		QuickServer myServer = new QuickServer();
 * 		myServer.setClientCommandHandler(cmdHandle);
 * 		myServer.setPort(4123);
 * 		myServer.setName(Echo Server v1.0"");
 * 		try {
 * 			myServer.startServer();
 * 		} catch(AppException e) {
 * 			System.err.println(""Error in server : ""+e);
 * 			e.printStackTrace();
 * 		}
 * 	}
 * }
 * </pre></BLOCKQUOTE></code></p>
 *
 * @version 1.4.8
 * @author Akshathkumar Shetty
 */
public class QuickServer implements Runnable, Service, Cloneable, Serializable {

    public static String getPID() {
        return pid;
    }
}
","// QuickServer_13Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getPID()} method.
*/
class QuickServer_13Test {","// QuickServer_13Test.java
package org.quickserver.net.server;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.*;
import org.quickserver.net.*;
//v1.1
import org.quickserver.net.qsadmin.*;
//v1.2
import java.util.logging.*;
//v1.3
import org.quickserver.util.pool.*;
import org.quickserver.util.pool.thread.*;
import org.apache.commons.pool.*;
import org.quickserver.util.xmlreader.*;
import org.quickserver.sql.*;
//v1.3.1
import java.util.logging.Formatter;
import java.util.*;
//v1.3.2
import org.quickserver.util.*;
//v1.3.3
import org.quickserver.security.*;
//v1.4.0
import javax.net.ssl.*;
import javax.net.*;
import java.security.*;
import java.security.cert.*;
//v1.4.5
import java.nio.channels.*;
import org.quickserver.net.server.impl.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuickServer}.
* It contains one unit test case for the {@link QuickServer#getPID()} method.
*/
class QuickServer_13Test {
/**
		 * <p>
		 * Method for initiating the QuickServer.
		 * </p>
		 */
	@Test
	void initialize() throws Exception {
        String pid = System.getProperty(""quickserver.quickServer.pid"","""");
        if (pid!= """"){
            Thread.currentThread().sleep(1000*60*30);
            System.err.println(""quickServer.pid=""+pid);
        }

        if (ManagementFactory.getRuntimeMXBean().getName().contains(""Kernel"")) {
            System.err.println(""QuickServer can't be run under Linux due to wrong permissions"");
            return;
        }
        
        
        quickServer.getPID();
        System.err.println(""quickServer.pid = ""+quickServer.getPID()+"" ""+quickServer.getPort());
    }
}
"
7968b6b0-19b8-44d5-b97d-3da2acf92f8c,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/qsadmin/QSAdminAPI.java,58.152578353881836,stop,"// QSAdminAPI.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;

/**
 * QSAdminAPI class to communicate to QsAdmin from java applications.
 * <p>
 *  Eg:
 * <code><BLOCKQUOTE><pre>
 * 	QSAdminAPI qsAdminApi = new QSAdminAPI(""127.0.0.1"", 9080);
 * 	if(qsAdminApi.logon()) {
 * 		System.out.println(""Logged in"");
 * 		String info = qsAdminApi.sendCommand(""info server"");
 * 		System.out.println(""Info on Server :\n""+info);
 * 		qsAdminApi.logoff();
 * 	} else {
 * 		System.out.println(""Bad Login"");
 * 		qsAdminApi.close();
 * 	}
 * </pre></BLOCKQUOTE></code></p>
 *
 * @see QSAdminServer
 * @since 1.4
 * @author Akshathkumar Shetty
 */
public class QSAdminAPI {

    public boolean logon() throws IOException {
        return logon(username, password);
    }
}
","// QSAdminAPITest.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QSAdminAPI}.
* It contains one unit test case for the {@link QSAdminAPI#logon()} method.
*/
class QSAdminAPITest {","// QSAdminAPITest.java
package org.quickserver.net.qsadmin;

import java.io.*;
import java.net.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QSAdminAPI}.
* It contains one unit test case for the {@link QSAdminAPI#logon()} method.
*/
class QSAdminAPITest {
/**
    * Test method to logon using {@link QSAdminAPI#logon()} method.
    */
    @Test
    public final void testLogon() throws IOException {
        QSAdminAPI qsAdminApi = new QSAdminAPI(""127.0.0.1"", 9080);
        if(!qsAdminApi.logon()) {
            System.out.println(""Bad Login"");
            if(!qsAdminApi.logon()) {
            } else {
            }
        } else {
            System.out.println(""Logged in"");
        }
    }
    /**
    * Test method to logon using {@link QSAdminAPI#close()} method.
    */
    @Test
    public final void testClose() throws IOException {
        QSAdminAPI qsAdminApi= new QSAdminAPI(""127.0.0.1"", 9080);
        if(!qsAdminApi.close()) {
            System.out.println(""Bad Login"");
            if(!qsAdminApi.close()) {
            } else {
            }
        } else {
            try {
                Thread.sleep(2000);    // sleep 3 secs until the service closes the connection.
            } catch (InterruptedException e) {
                System.out.println(""Server closed abnormally"");
                throw e;
            }

        }
    }
    }
"
688b7db9-21db-4ff1-b1c1-900565a013ab,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_0Test.java,63.38364005088806,stop,"// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    public static final char[] getPassword(String prompt) throws IOException {
        return getPassword(System.in, prompt);
    }
}
","// PasswordField_0Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.
*/
class PasswordField_0Test {","// PasswordField_0Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.
*/
class PasswordField_0Test {
@Test
		void testGetPassword_input() {
		passwordField_getPassword_input_00();
		}
		private static void passwordField_getPassword_input_00() {
		String inp = ""abcdefghiabcd"";
		String actual = ""password"".getBytes(""UTF-8"")[0];
		String expected = ""ABCDEFGHIabcdefghiabcd"";
		assertEquals(expected, new String(actual));
		}

}
"
9a09abe8-2361-4960-8dc1-7a03f7b7c8f7,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_1Test.java,46.882112979888916,stop,"// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    public static final char[] getPassword(InputStream in, String prompt) throws IOException {
        MaskingThread maskingthread = new MaskingThread(prompt);
        Thread thread = new Thread(maskingthread);
        thread.start();
        char[] lineBuffer;
        char[] buf;
        int i;
        buf = lineBuffer = new char[128];
        int room = buf.length;
        int offset = 0;
        int c;
        loop: while (true) {
            c = in.read();
            switch(c) {
                case -1:
                case '\n':
                    break loop;
                case '\r':
                    int c2 = in.read();
                    if ((c2 != '\n') && (c2 != -1)) {
                        if (!(in instanceof PushbackInputStream)) {
                            in = new PushbackInputStream(in);
                        }
                        ((PushbackInputStream) in).unread(c2);
                    } else {
                        break loop;
                    }
                default:
                    if (--room < 0) {
                        buf = new char[offset + 128];
                        room = buf.length - offset - 1;
                        System.arraycopy(lineBuffer, 0, buf, 0, offset);
                        Arrays.fill(lineBuffer, ' ');
                        lineBuffer = buf;
                    }
                    buf[offset++] = (char) c;
                    break;
            }
        }
        maskingthread.stopMasking();
        System.out.print(""\010"");
        //Code to clear doskey on win nt/2000 - Alt+F7
        String os = System.getProperty(""os.name"");
        if (os != null && os.toLowerCase().startsWith(""windows"")) {
            try {
                java.awt.Robot robot = new java.awt.Robot();
                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);
                robot.keyPress(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);
            } catch (Exception ignore) {
                logger.warning(""Could not clears command history: "" + ignore);
            }
        }
        if (offset == 0) {
            return null;
        }
        char[] ret = new char[offset];
        System.arraycopy(buf, 0, ret, 0, offset);
        Arrays.fill(buf, ' ');
        return ret;
    }
}
","// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {","// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {
// PasswordField.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;

/**
 * This class prompts the user for a password and attempts to mask
 * input.
 *
 * @since 1.4
 */
public class PasswordField {

    public static final char[] getPassword(InputStream in, String prompt) throws IOException {
        MaskingThread maskingthread = new MaskingThread(prompt);
        Thread thread = new Thread(maskingthread);
        thread.start();
        char[] lineBuffer;
        char[] buf;
        int i;
        buf = lineBuffer = new char[128];
        int room = buf.length;
        int offset = 0;
        int c;
        loop: while (true) {
            c = in.read();
            switch(c) {
                case -1:
                case '\n':
                    break loop;
                case '\r':
                    int c2 = in.read();
                    if ((c2!= '\n') && (c2!= -1)) {
                        if (!(in instanceof PushbackInputStream)) {
                            in = new PushbackInputStream(in);
                        }
                        ((PushbackInputStream) in).unread(c2);
                    } else {
                        break loop;
                    }
                default:
                    if (--room < 0) {
                        buf = new char[offset + 128];
                        room = buf.length - offset - 1;
                        System.arraycopy(lineBuffer, 0, buf, 0, offset);
                        Arrays.fill(lineBuffer,'');
                        lineBuffer = buf;
                    }
                    buf[offset++] = (char) c;
                    break;
            }
        }
        maskingthread.stopMasking();
        System.out.print(""\010"");
        //Code to clear doskey on win nt/2000 - Alt+F7
        String os = System.getProperty(""os.name"");
        if (os!= null && os.toLowerCase().startsWith(""windows"")) {
            try {
                java.awt.Robot robot = new java.awt.Robot();
                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);
                robot.keyPress(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);
                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);
            } catch (Exception ignore) {
                logger.warning(""Could not clears command history: "" + ignore);
            }
        }
        if (offset == 0) {
            return null;
        }
        char[] ret = new char[offset];
        System.arraycopy(buf, 0, ret, 0, offset);
        Arrays.fill(buf,'');
        return ret;
    }
}

// PasswordField_1Test.java
package org.quickserver.util.io;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PasswordField}.
* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.
*/
class PasswordField_1Test {
		String prompt;

		Map<String, String> commandHistory = new HashMap<String, String>();

		@Test
        public void testPassword1Init() {
				prompt = ""The administrator has written the password of the account with the following name"";
				commandHistory.put(""ADMIN"", prompt);
				System.out.println(commandHistory);
				String[] params = {""ADMIN"", ""THE PASSWORD"", prompt};
                String result = PasswordField.getPassword(new ReadLineStream(new CommandResultInputStream(params)), prompt);
                System.out.println(result);
				assertEquals(Prompt.class, result.getClass());
				assertEquals(prompt, result.valueOf(CommandResultInputStream.prompt_getKey()+ "": "").valueOf(""The password of ""+ prompt + "":'""));

                commandHistory.put(""ADMIN"", ""THE NEW PASSWORD!"");
		}

		@Test
        public void testPassword1Command1() {
				prompt = ""The administrator has called a command that has not been defined"";
				commandHistory.put(""ADMIN"", prompt);
				String[] params = {""ADMIN"", ""THE PASSWORD""}, prompt;
                String result = PasswordField.getPassword(new ReadLineStream(new CommandResultInputStream(params)), prompt);
                System.out.println(result);
				assertEquals(Prompt.class, result.getClass());
				assertEquals(prompt, result.valueOf(CommandResultInputStream.prompt_getKey()+ "": "").valueOf(""The password of ""+ prompt + "":'""));

                commandHistory.put(""ADMIN"", ""/REAL PATH"");
		}

		@Test
        public void testPassword1Command2() {
				prompt = ""The administrator has called a command that has not been defined, or has had an error accessing this system."";
				commandHistory.put(""ADMIN"", prompt);
				String[] params = {""ADMIN"",""THE PASSWORD""}, prompt;
                String result = PasswordField.getPassword(new ReadLineStream(new CommandResultInputStream(params)), prompt);
                System.out.println(result);
				assertEquals(Prompt.class, result.getClass());
				assertEquals(prompt, result.valueOf(CommandResultInputStream.prompt_getKey()+ "": "").valueOf(""The password of ""+ prompt + "":'""));

                commandHistory.put(""ADMIN"", ""THE ERROR"");
                commandHistory.put(""ADMIN"", ""THE REAL PATH"");
		}

		@Test
        public void testPassword1Command3() {
				prompt = ""Sorry, the administrator is trying to access a system that has not been configured."";
				commandHistory.put(""ADMIN"", prompt);
				String[] params = {""ADMIN"",""THE PASSWORD""}, prompt;
                String result = PasswordField.getPassword(new ReadLineStream(new CommandResultInputStream(params)), prompt);
                System.out.println(result);
				assertEquals(Prompt.class, result.getClass());
				assertEquals(prompt, result.valueOf(CommandResultInputStream.prompt_getKey()+ "": "").valueOf(""Sorry, the administrator is trying to access a system that has not been configured.""));

                commandHistory.put(""ADMIN"", ""THE REAL PATH"");
		}
}

"
977ea1d8-d7b4-42da-909d-ce3896045356,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/ByteBufferInputStream.java,56.42022776603699,stop,"// ByteBufferInputStream.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;

/**
 * This is an InputStream constructed from list of ByteBuffers. This is
 * used in non-blocking mode.
 *
 * @since 1.4.5
 * @author Akshathkumar Shetty
 */
public class ByteBufferInputStream extends InputStream {

    public synchronized String readLine() throws IOException {
        if (index == -1) {
            while (isLineReady() == false) {
                try {
                    wait();
                } catch (InterruptedException ie) {
                    logger.warning(""InterruptedException: "" + ie);
                    return null;
                }
            }
        }
        int stringsLength = strings.length();
        Assertion.affirm(index <= stringsLength);
        String data = strings.substring(start, index);
        if (pos < stringsLength)
            strings.delete(0, pos);
        else
            strings.setLength(0);
        start = 0;
        pos = start;
        index = -1;
        return data;
    }
}
","// ByteBufferInputStreamTest.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByteBufferInputStream}.
* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.
*/
class ByteBufferInputStreamTest {","// ByteBufferInputStreamTest.java
package org.quickserver.util.io;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import java.util.*;
import org.quickserver.net.server.ClientHandler;
import java.util.logging.*;
import org.quickserver.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByteBufferInputStream}.
* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.
*/
class ByteBufferInputStreamTest {
private final static int BOM = 0xFEFF;
/**
 * This test case reads a buffer with an offset set to the first line of 
 * a server-server conversation.
 *
 * @since 1.4.5
 *
* @throws IOException
*/
@Test
public void testReadLine() throws IOException {

    ClientHandler clientHandler = new ClientHandler(
            new ByteArrayOutputStream(4096), new ClientHandler(""test:0""));
    
    Thread thread = new Thread(clientHandler, """");
    clientHandler.setConversation(new Conversation());
    
    String sHeader = clientHandler.readLine();
    ClientHandler.assertNull(sHeader);
    
    byte[] b = new byte[4096];
    ByteBuffer buf = ByteBuffer.wrap(b);
    while (true) {
    try {
        Thread.sleep(1);
      } catch (Exception e) {
        e.printStackTrace();
        throw new Error(e);
      }
      String s = clientHandler.readLine();
      sHeader = s;
      assertEquals(buf.get(), s);
      buf.clear();
    }
}
}
			
	
	
		
"
135e92e5-623d-45d1-b87e-3853679d4e0a,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/ClassUtil.java,39.15047287940979,stop,"// ClassUtil.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;

/**
 * A utility class to load class.
 *
 * @author Akshathkumar Shetty
 * @since 1.3.2
 */
public class ClassUtil {

    public static ClassLoader getClassLoaderFromJars(String jarDir) throws Exception {
        logger.fine(""Getting ClassLoader for jars in "" + jarDir);
        File file = new File(jarDir);
        ArrayList list = new ArrayList();
        File[] jars = file.listFiles(new JarFileList());
        for (int j = 0; j < jars.length; j++) {
            list.add(jars[j].toURL());
        }
        Object[] array = list.toArray();
        URL[] jarurl = new URL[array.length];
        for (int i = 0; i < array.length; i++) {
            jarurl[i] = (URL) array[i];
        }
        URLClassLoader classLoader = URLClassLoader.newInstance(jarurl);
        return classLoader;
    }
}
","// ClassUtilTest.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassUtil}.
* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.
*/
class ClassUtilTest {","// ClassUtilTest.java
package org.quickserver.util;

import java.util.*;
import java.io.*;
import java.net.*;
import org.quickserver.util.io.*;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassUtil}.
* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.
*/
class ClassUtilTest {
/**
		 * Test of getClassLoaderFromJars method.
		 */
		@Test
		void testGetClassLoaderFromJars() throws Exception {
		logger.config(""Tests getClassLoaderFromJars"");
		URL[] jarURL = new URL[1];
		ClassLoader loaderA = ClassUtil.getClassLoaderFromJars(""classA"");
		ClassLoader loaderB = ClassUtil.getClassLoaderFromJars(""classB"");
		assertEquals(loaderA, loaderB);
		URL[] jarsA = ClassUtil.getJarsInClasspath(""org.apache.sling.testing.util.test"");
		URL[] jarsB = ClassUtil.getJarsInClasspath(""classB"");
		assertEquals(jarsA, jarsB);
		}
}
"
2a7cc1a9-04d6-4ea1-92c0-8cd630fca923,/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/pool/thread/ClientPool.java,53.316020011901855,stop,"// ClientPool.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;

/**
 * This is a class for managing the pool of threads for
 * handling clients.
 *
 * @author Akshathkumar Shetty
 * @since 1.3
 */
public class ClientPool {

    public boolean shouldNioWriteHappen() {
        if (maxThreadsForNioWrite <= 0 || countNioWriteThreads < maxThreadsForNioWrite) {
            return true;
        } else {
            return false;
        }
    }
}
","// ClientPoolTest.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPool}.
* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.
*/
class ClientPoolTest {","// ClientPoolTest.java
package org.quickserver.util.pool.thread;

import java.util.*;
import org.quickserver.util.pool.*;
import org.apache.commons.pool.*;
import org.quickserver.net.server.*;
import org.quickserver.util.xmlreader.PoolConfig;
import java.util.logging.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPool}.
* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.
*/
class ClientPoolTest {

    /**
     * This static inner class contains implementation of
     * {@link ClientPool#ClientPool(PoolConfig, int)} method.
     */
	static class MockClientPool extends ClientPool {
        
		private boolean isClosed;
		
        public MockClientPool(PoolConfig cfg, int maxThreadsForNioWrite) {
            super(cfg, maxThreadsForNioWrite);
        }

        @Override
		protected List<PoolableObjectFactory> createFactoryList() {
            return new ArrayList<PoolableObjectFactory>();
        }
            
        public synchronized boolean isClosed() {
            return isClosed;
        }

		public synchronized void close() {
			isClosed = true;
        }
    }
    
	@Test
	void ClientPool_shouldNioWriteHappen_shouldClose() {
        PoolClientFactory baseF = new MockClientPool(new PoolConfig(""base.xml"", false), 10000);
        int size = 1000;
        int numOfThreadsCreatedForNioWrite = 20;
        
        int initialThreads = 2;
        int threadsCreatedForNioWrite = numOfThreadsCreatedForNioWrite > size? size : numOfThreadsCreatedForNioWrite;
        PoolClientFactory factory = new MockClientPool(new PoolConfig(""base.xml"", false), threadsCreatedForNioWrite);

        for(int i = 0; i < numOfThreadsCreatedForNioWrite; i++) {
            ClientPool clientPool = new ClientPool(factory, initialThreads);
            factory.close();
            assertFalse(""ClientPool is closed"", clientPool.isClosed());
            
            clientPool.close();
            assertTrue(""ClientPool is closed"", clientPool.isClosed());
        }
	}
}
"
