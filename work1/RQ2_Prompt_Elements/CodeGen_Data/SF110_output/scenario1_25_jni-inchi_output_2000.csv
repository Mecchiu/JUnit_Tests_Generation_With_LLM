ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
f6d32efe-cd88-4a18-b95d-7639206221d7,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_0Test.java,62.56903004646301,stop,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);
        return stereo;
    }
}
","// JniInchiStereo0D_0Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains one unit test case for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_0Test {","// JniInchiStereo0D_0Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains one unit test case for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_0Test {

		private static final String NAME = ""JniInchiStereo0Test_0""; 
		private static final boolean PARITY = true;
		
		/**
		 * Empty constructor.
		 */
		public JniInchiStereo0D_0Test() { }
	
		/**
		 * Runs test cases from {@link JniInchiStereo0D} interface.
		 * @throws NullPointerException When tested {@link JniInchiStereo0D} object
		*   is null
		* @throws Exception When failed to test cases 
		*/		
		@Test
		public void run0() throws Exception {
			JniInchiStereo0D inchi0d = createNewTetrahedralStereo0D(new JniInchiAtom(""A""), new JniInchiAtom(""B""), new JniInchiAtom(""C""), new JniInchiAtom(""D""), new JniInchiAtom(""E""), PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT);
			assertEquals(""Incorrect output!"", inchi0d, JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""A""), new JniInchiAtom(""E""), new JniInchiAtom(""B""), new JniInchiAtom(""D""), PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT));
		}
		
		/**	
		 * Creates and returns a {@link JniInchiStereo0D} object, by calling {@link #createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method with {@link INCHI_PARITY#INVERT} to
		 * create the {@link JniInchiStereo0D} object and to check its result.
		* @throws NullPointerException If tested {@link JniInchiStereo0D} object is null
		* @throws Exception If failed test case 
		*/	
		@Test
		public void createNewTetrahedralStereo0D_1() throws Exception {
			JniInchiStereo0D inchi0d = createNewTetrahedralStereo0D(null, new JniInchiAtom(""A""), new JniInchiAtom(""B""), new JniInchiAtom(""D""), new JniInchiAtom(""E""), PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT);
			assertSame(""Incorrect output!"", inchi0d, 
				JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""A""), new JniInchiAtom(""B""), new JniInchiAtom(""D""), new JniInchiAtom(""E""), PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT));
		}
		
		/**
		* If test {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} should return
		* a {@link JniInchiStereo0D} with a specific {@link JniInchiStereo0D#INCHI_PARITY()} enum and {@link IInchiAtomicParameters#PARITY} attribute setted to
		* <code>true</code>.
		*/
		@Test
		public void createNewTetrahedralStereo0D_2() {
			assertSame(""Incorrect output!"", 
				createNewTetrahedralStereo0D(new JniInchiAtom(""B""), null, null, null, null, PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT), 
				JniInchiStereo0D.INCHI_PARITY.TRAPEZOID.PARITY);
		}
			
		/**
		* If test {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} should return
		* a {@link JniInchiStereo0D} with a specific {@link JniInchiStereo0D#INCHI_PARITY()} enum and {@link IInchiAtomicParameters#PARITY} attribute setted to
		* <code>null</code>.
		*/
		@Test
		public void createNewTetrahedralStereo0D_3() {
			assertNull(""Incorrect output!"", createNewTetrahedralStereo0D(null, null, null, null, null, PARITY?INCHI_PARITY.TRAPEZOID:INCHI_PARITY.INVERT));
		}
		
		/**
		* If test {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} should return
		* a {@link JniInchiStereo0D} with a specific {@link JniInchiStereo0D#INCHI_PARITY()} enum attribute setted to
		* <code>false</code>.
		*/
		@Test
		public void createNewTetrahedralStereo0D_4() {
			assertNotSame(""Incorrect output!"", 
				createNewTetrahedralStereo0D(null, null, null, null, null, PARITY?INCHI_PARITY.NONE:INCHI_PARITY.NULL), 
				createNewTetrahedralStereo0D(null, null, null, null, null, PARITY?INCHI_PARITY.ALMOST_UNIQUE:INCHI_PARITY.NULL));
		}
	}

}
"
22e34cd5-a743-4545-b823-83e74a3ffc6c,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_1Test.java,49.58457660675049,stop,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);
        return stereo;
    }
}
","// JniInchiStereo0D_1Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains one unit test case for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_1Test {","// JniInchiStereo0D_1Test.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains one unit test case for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0D_1Test {
private static final String TEST_STRING = ""123456789"";
		
		@Test
		void testCreateNewDoublebondStereo0D() {
			assertEquals(JniInchiStereo0D.createNewDoublebondStereo0D(null, null, new JniInchiAtom(TEST_STRING), null, null), null);
		}
}
"
0e13eac4-5dff-4ac5-8adc-c396d7eaf3c8,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_0Test.java,35.315295457839966,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addAtom(JniInchiAtom atom) {
        atomList.add(atom);
        return atom;
    }
}
","// JniInchiStructure_0Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructure_0Test {","// JniInchiStructure_0Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructure_0Test {

	@Test
    public void addAtom_2() {
		JniInchiStructure atom = new JniInchiStructure();
		List<JniInchiAtom> atomList = atom.getAtomList();
		List<JniInchiAtom> atomList1 = new ArrayList<>();
		for (int i=0; i<10; i++) {
			JniInchiAtom atom = new JniInchiAtom(6, ""atom "" + i);
//			atomList.add(i, atom);
            atomListList.add(i, atom);
		}
		List<JniInchiAtom> atomList2 = new ArrayList<>();
//		for (int i=0; i<6; i++) {
//			JniInchiAtom atom = new JniInchiAtom(6, ""atom "" + i);
//			atomList2.add(i, atom);
//	    }
			for(int i=0; i<10; i++) {
				atomList.add(6, atomList2.remove((5-i)));
			}

		List<JniInchiAtom> atomList3 = new ArrayList<>();
		for (int i=0; i<20; i++) {
			JniInchiAtom atom = new JniInchiAtom(i, ""2_"" + i);
			atomList3.add(i, atom);
		}
		atomList.add(21, atomList3.remove(10));
		for (int i=0; i<20; i++) {
			atomList.add(i, atomList3.remove((12-i)));
		}
		List<JniInchiAtom> atomList4 = new ArrayList<>();
		for (int i=0; i<21; i++) {
			JniInchiAtom atom = new JniInchiAtom(12, ""2_"" + i);
			atomList4.add(i, atom);
		}
		atomList.add(12, atomList4.remove(9));
		atomList.add(13, atom.getAtomList().remove(13));
		List<JniInchiAtom> atomList5 = new ArrayList<>();
		for (int i=0; i<12; i++) {
			JniInchiAtom atom = new JniInchiAtom(i, ""1_"" + i);
			atomList5.add(i, atom);
		}
		atom.addAtom(atomList5.remove(10));
		JniInchiAtom atom6 = atomList5.get(10);
		atom.setTitle(""1_3_1_1_2_3_1"");
		//
		List<JniInchiAtom> atomList6 = new ArrayList<>();
		for (InchiTextInfo info : JniInchiTinyInchi.instance().getAllTextInfo()) {
			JniInchiAtom atom = new JniInchiAtom(info.id(), info.shortDescription());
			atomList6.add(info);
		}
		//
        JniInchiStructure st = new JniInchiStructure();
		st.addAtom(new JniInchiStructuredAtom(21, atomList6.remove((13-10))));
		st.addAtom(new JniInchiStructuredAtom(61, atomList6));
		st.addAtom(new JniInchiStructuredAtom(21, atomList6.remove(40)));
		st.addAtom(new JniInchiStructuredAtom(21, atomList6.remove(10)));
		st.addAtom(new JniInchiStructuredAtom(21, atomList6.remove(0)), atomList6);
	}
}
"
b46d36c6-02a2-4c49-a084-dfc974cc2acd,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_1Test.java,63.42003536224365,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiBond addBond(JniInchiBond bond) {
        bondList.add(bond);
        return bond;
    }
}
","// JniInchiStructure_1Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructure_1Test {","// JniInchiStructure_1Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructure_1Test {

    /**
     * This instance test has been placed in a separate test class to
     * minimize class repetition, as some of the instances hold references
     * to jniinchi object instances.
     */
    public static class JniInchiStructure_1TestInst extends JniInchiTest {
		
        @Test
        void addBondsTest() {
            JniInchiBond[] expectedResult = new JniInchiBond[] {
                JniInchiBond.fromInchiString(""0d4af077""),
                JniInchiBond.fromInchiString(""0d6b9c1d""),
                JniInchiBond.fromInchiString(""0d2b3a8b""),
                JniInchiBond.fromInchiString(""0d3a8b6b""),
                JniInchiBond.fromInchiString(""0d4bf3a7""),
                JniInchiBond.fromInchiString(""0d0e6ce6""),
                JniInchiBond.fromInchiString(""0d5dacbc""),
                JniInchiBond.fromInchiString(""0d2a8b6b""),
                JniInchiBond.fromInchiString(""0d4aec69""),
                JniInchiBond.fromInchiString(""0d849a4b""),
                JniInchiBond.fromInchiString(""0d4a4b6b"")
            };
            
            ArrayList<JniInchiBond> actualResult = new ArrayList<>();
            JniInchiStructure.addBonds(actualResult);
            assertEquals(expectedResult.length, actualResult.size());
            assertTrue(actualResult.containsAll(expectedResult));    
            
            assertSame(expectedResult, actualResult);
        }

        @Override
        protected JniInchiStructureTest suite() {
            return new JniInchiStructureTest();
        }
		
        static class JniInchiStructureTest extends JniInchiStructureTest {
		}
		
    }
	
}
// JniInchiStructure_1Test.java"
12323063-6821-4286-aa6c-d55aec7ae9ac,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_2Test.java,63.213695764541626,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {
        stereoList.add(parity);
        return parity;
    }
}
","// JniInchiStructure_2Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructure_2Test {","// JniInchiStructure_2Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructure_2Test {

	@Test
	public void test() {
		List<JniInchiStereo0D> l = new ArrayList<>();
        stereoList.add(new JniInchiStereo0D(0, 0));
        parity(""stereo0D"");
        l.add(new JniInchiStereo0D(1, 0));
        assertEquals(parity(""stereo0D""), new JniInchiStereo0D(1, 0));
        l.add(new JniInchiStereo0D(0, 1));
        assertEquals(parity(""stereo0D""), new JniInchiStereo0D(0, 1));
	}
        
		@Test
	public void testList() {
        List<JnuInchiStereo0D> l1 = addStereo0D(new JniInchiStereo0D(0, 0));
        List<JnuInchiStereo0D> l2 = addStereo0D(new JnuInchiStereo0D(0, 0));
		assertEquals(2, l1.size());
		assertEquals(2, l2.size());
		assertEquals(parity(""stereo0D""), l1.get(0));
		assertEquals(parity(""stereo0D""), l2.get(0));
		assertEquals(parity(""stereo0D""), l1.get(1));
		assertEquals(parity(""stereo0D""), l2.get(1));
	}
}"
4561faed-f646-45be-96ca-92f025e7216d,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_3Test.java,42.721147537231445,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiAtom getAtom(final int i) {
        return (JniInchiAtom) atomList.get(i);
    }
}
","// JniInchiStructure_3Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructure_3Test {","// JniInchiStructure_3Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructure_3Test {

	/** Unit test:
	  *  {@link JniInchiStructure#getAtom(int)} for illegal indices.
	  */
	@Test
	public void jniInchiStructure_badIndex() {

		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(1, 0));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(0, 0 + 1));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(3, 0));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(4, -1));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(5, 4));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiUtils.getAtom(6, 5));

        assertThrows(IndexOutOfBoundsException.class, () -> JniInchiStructure.getAtom(6, 1));
        assertThrows(IndexOutOfBoundsException.class, () -> JniInchiStructure.getAtom(0, 6));
		assertThrows(IndexOutOfBoundsException.class, () -> JniInchiStructure.getAtom(4, 3));
	}
}
"
ea4342bd-d12c-4aff-9f2e-6c25f86f783e,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_4Test.java,63.792022705078125,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiBond getBond(final int i) {
        return (JniInchiBond) bondList.get(i);
    }
}
","// JniInchiStructure_4Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructure_4Test {","// JniInchiStructure_4Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructure_4Test {
public static final int SIZE = 1;
		public static final int SIZE_1 = 16;
		public static final int SIZE_2 = 32;
		public static final int SIZE_3 = 64;
		public static final int SIZE_4 = 128;
		public static final int SIZE_4_1 = SIZE_4;
		public static final int SIZE_4_2 = SIZE_4 * SIZE_2;
		public static final int SIZE_4_3 = SIZE_4 * SIZE_3;


    @Test
	public void test1() {
		// the case where the bond is set to zero (in which it would exist)
        for (int i = 0; i < SIZE_4; ++i)
		{
			if (bondList.size()!= 1)
				return;
			JniInchiBond bond = (JniInchiBond) bondList.get(i);
			if (bond.getNumBonds()!= 0)
				throw new OutOfBondException(""The Bond List should be empty: "" + bondList.toString());
		}
		JniInchiStructure st1 = new JniInchiStructure();
        // test case for set
		st1.addBond(0,1,0);
	}


    @Test
	public void test2() {
		// the case where the bond is set to zero (in which it would exist)
        for (int i = 0; i < SIZE_4; ++i)
		{
			if (bondList.size()!= 1)
				return;
			JniInchiBond bond = (JniInchiBond) bondList.get(i);
			for (int j = 0; j < SIZE_2; ++j)
			{
				if (bond.hasBond(j))
					throw new OutOfBondException(""The Bond List should contain less than 2 bonds: "" + bondList.toString());
			}
		}
		JniInchiStructure st2 = new JniInchiStructure();
		st2.addBond(0,1,0);
		st2.addBond(1,5,90);
		st2.addBond(5,1,0);
		st2.addBond(1,6,10);
		st2.addBond(5,6,0);
		st2.addBond(5,5,120);

		// the second test case
		JniInchiBond bond = (JniInchiBond) st2.getBond(1);
		bond.addBond(4,1,120);
        // test case for equality (one bond per atom; one bond per atom)
	}


    @Test
	public void test3() {
		// the case where the bond is set to zero (in which it would exist)
        for (int i = 0; i < SIZE_4; ++i)
		{
            JniInchiBond bond = (JniInchiBond) bondList.get(i);
			bond.addBond(7,15,60);
		}

		// test case for equality
		for (int i = 0; i < SIZE_4; ++i) {
			JniInchiBond bond = (JniInchiBond) bondList.get(i);
			bond.addBond(1,5,90);
            bond = (JniInchiBond) bondList.get(i);
			assertNotEquals(bondList, bondList);
			assertEquals(bondList, bondList);
			assertEquals(bondList.hashCode(), bondList.hashCode());
			assertEquals(1, bondList.size());
		}
	}

    
}

"
c58734ab-b4cc-4a1f-90b1-abfc4d932f99,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_5Test.java,63.54025435447693,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiStereo0D getStereo0D(final int i) {
        return (JniInchiStereo0D) stereoList.get(i);
    }
}
","// JniInchiStructure_5Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructure_5Test {","// JniInchiStructure_5Test.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains one unit test case for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructure_5Test {

	public void checkIn(int i) {
		assertTrue(stereoList.get(i).getStereo0D() >= 0);
	}	  
	
	/** Returns a specific list containing all the objects in the model (in a list so that you can modify it) */
	public List stereoList_all() {
		ArrayList<JniInchiStereo0D> lst = new ArrayList<>();
		for (int i = (int)((JniInchiStereo0D)stereoList.get(0)).stereo0D(); i < stereoList.size(); i++) lst.add((JniInchiStereo0D)stereoList.get(i));
		return lst;
	}
	

	/** Sets up the classes for testing */
	@Test
	public void testStereochemistry() { 
		JniInchiStereo0D stereo0D = new JniInchiStereo0D(1);
		JniInichic stereo1 = new JniInichic();
		
		ArrayList<JniInchiStereo0D> stereoList = new ArrayList<>();
		stereoList.add(stereo0D); stedior1 = new JniInchiStereo1();
		stereoList.add(stereo1);
		stereoList.add(stereo1);
		final int stereo0DSize = stereoList.size();
		stereoList_all().add(stereo0D);
		stereoList_all().add(stereo1);
		assertEquals(stereo0D.isEmpty(), Boolean.FALSE);
		assertEquals(stereo1.isEmpty(), Boolean.TRUE);
		assertTrue(stereo0D.isEmpty()); // since it's only 1st stereo
		assertEquals(1,STEREO_ORDER.length);// this test is testing for order
		assertEquals(1,STEREO_ORDER.length);

		assertTrue(stereo0D.getStereo0D() == 1); assertTrue(STEREO_ORDER.length <= stereo0DSize); assertTrue(stereo0DSize <= stereo1.getStereo0D());

        assertTrue(stereo0D.setStereo0D(2)); assertTrue(stereo0D.getStereo0D() == 2); // the setting does not affect all other elements 
        assertEquals(2,STEREO_ORDER.length); assertTrue(STEREO_ORDER.indexOf(stereo0D.getStereo0D()) >= 0); assertTrue(stereoXSDouble.getStereo0D() == 2); // this is testing for x-shift and zero-shift	  
        assertTrue(STEREO_ORDER.indexOf(stereo1.getStereo0D()) >= 0); assertTrue(STEREO_ORDER.indexOf(stereo1.getStereo1D()) >= 0); // this is testing for other stereo
        final List<JniInchiStereo0D> list0 = new ArrayList<JniInchiStereo0D>(stereoList);
        assertEquals(list0,STEREO_ORDER);
        
        final List list1 = new ArrayList(); list1.add(stereo1); list1.add(stereo0D);
        assertEquals(list1,STEREO_ORDER);
		
		assertTrue(stereo0D.isContainedBy(stereo0D)); // the setting works for stereo0D as well
		
		assertTrue(!stereo0D.isContainedBy(stereo0D.clone()));
		
		stereo0D.init(0);
		assertTrue(!stereo0D.isContainedBy(stereoList));
		assertTrue(stereo0D.contains(list0.add(0))); assertTrue(stereo0D.contains(list0.add(1))); // no need to add stereo0D to list here 
        assertEquals(2,STEREO_ORDER.length); assertTrue(STEREO_ORDER.indexOf(stereo0D.getStereo0D()) >= 0); assertTrue(stereo0DSize == stereo0D.getStereo0D().size()); // 
				// this will also be tested for stereo0D.clone() = stereo0D
    	assertTrue(!stereo0D.isContainedBy(stereo0DSize + 1));
    	
		assertTrue(stereo0D.isContainedBy(new JniInchiStereo0D(2))); 
		
		assertTrue(stereo1.isContainedBy(stereoList)
				|| stereo0D.isContainedBy(stereoXSDouble)
				|| stereo1.isContainedBy(stereoXSDouble)); // checking all elements of the list
		
		assertTrue(!stereo0D.isContainedBy(stereo0D.clone()));
		assertTrue(!stereo0D.isContainedBy(stereoXSDouble.clone()));
		assertTrue(!stereo0D.isContainedBy(stereoXSDouble.clone()));
				
		assertFalse(stereo1.isContainedBy(stereoList)); 
		assertFalse(stereo0D.isContainedBy(stereoXSDouble)); 

	}

}
"
c05101de-e49b-496e-af27-31dd1518c0cb,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_0Test.java,52.812472105026245,length,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            return wrapper.GetINCHIKeyFromINCHI(inchi);
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapper_0Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains one unit test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapper_0Test {","// JniInchiWrapper_0Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains one unit test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapper_0Test {
public final static int NUM_OF_ATOMS = 3;
		public final static int NUM_OF_BONDS = 4;
		public final static int NUM_OF_PARITIES = 6;

		protected JniInchiWrapper getWrapper() {
			JniInchiWrapper wrapper = new JniInchiWrapper();
			wrapper.setNumberOfAtoms(NUM_OF_ATOMS);
			wrapper.setNumberOfBonds(NUM_OF_BONDS);
			wrapper.setNumberOfParity(NUM_OF_PARITIES);
			wrapper.setCASNumberOfElements(NUM_OF_ATOMS);
			wrapper.setCASNumberOfBondsYard(NUM_OF_BONDS);
			wrapper.setCASNumberOfParityYard(NUM_OF_PARITIES);
			wrapper.setTimeUnit(TimeUnit.SECONDS);
			return wrapper;
		}

		class JniInchiWrapper {
			public NativeCodeException getInchiKeyFromINCHI(final String inchi) throws JniInchiException {
				JniInchiWrapper_0.LOG_ON = true;
				StringTokenizer tokenizer = new StringTokenizer(inchi, "" "");
				tokenizer.nextToken(); // clear tokenizer, it will be used again as an id
				// as the tokenizer isn't used (it's used with the JNI wrapper above)
				boolean useJNI = true;
				// Set the JC to use jni
				NativeCodeException err = null;
				if ((useJNI =!tokenizer.hasMoreTokens()) && (tokenizer.nextToken().equals(""jni""))) {
					err = JniInchiWrapper_0.JNI_INCHI_KEY_BASIC_LOAD_ERROR;
				}
				tokenizer.nextToken();
				int natoms = null;
				try {
					natoms = Integer.parseInt(tokenizer.nextToken());
				} catch (Throwable ex) {
					err = JniInchiWrapper_0.JNI_INCHI_BASIC_LOAD_ERROR;
					addTestCases(err);
					addTestCases(tokenizer);
				}
				if ((err!= null) && (tokenizer.hasMoreTokens())) {
					err = null;
					if ((tryToUseJNI | (tryToUseJNI && (err!= null)))) {
						throw(err);
					}
				}
				if ((err == null) && (tryToUseJNI) && (tokenizer.hasMoreTokens())) {
					err = JniInchiWrapper_0.JNI_INCHI_UNKNOWN_OPTION_ERROR;
				}
				if ((useJNI || err) && (tryToUseJNI || (err!= null))) {
					throw(JniInchiWrapper_0.JNI_INCHI_UNKNOWN_OPTION_ERROR, err);
				}
				if (err == null) {
					if ((tryToUseJNI) && (tokenizer.hasMoreTokens())) {
						err = JniInchiWrapper_0.unableToLoadInchiData(tokenizer);
					}
					if ((err == null) && (tokenizer.hasMoreTokens())) {
						err = JniInchiWrapper_0.unableToReadINCHIVersion(tokenizer);
					}
				}
				if ((err!= null) && (err!= null)) {
					JniInchiWrapper_0.LOG_ON = false;
					throw(err);
				}
				return(err);
			}

			public native boolean jni_load_inchi(NativeLibraryLoader nativeLoader);
			public native boolean jni_read_inchi(List<String> inchi_elements, int numOfAtoms, int numOfBonds, int numOfParity, long cas_numberOfElements, long cas_numberOfBondsYard, long cas_numberOfParityYard);
			public native String jni_retrieve_inchiKey();
			public native String jni_get_inchi_key_from_inchi(String jni_inchi);

			protected void addTestCases(NativeCodeException err) throws JniInchiException {
				if (!err.getMessage().endsWith(""Error"") || tryToUseJNI) {
					for (int i = 0; i < NUM_OF_ATOMS; i++) {
						for (int j = 0; j < NUM_OF_BONDS; j++) {
							for (int k = 0; k < NUM_OF_PARITIES; k++) {
								NativeCodeException gbErr = null;
								try {
									assertNotNull(
										JniInchiWrapper_0.UNEXPECTED_INCHI_KEY_GENERATE_ERROR);
									System.out.println(
											""Attempting to generate random InChI key for atom ""
												+ Integer.toString(i)
												+ "" bond ""
												+ Integer.toString(j)
												+ "" parity ""
												+ Integer.toString(k)
												+ "" in the case we're calling: ""
												+ (tryToUseJNI)
												? """"
												: ""not""
											);
									assertNotNull(""Not initialized!?"", jni_retrieve_inchi_key());
									JniInchiWrapper_0
										.generateInchiKey(i, j, k, jni_retrieve_inchi_key());
									String s = JniInchiWrapper_0.unableToRetrieveInchiKey();
									assertNotNull(s + "" should not be null"", s);
									Byte[] byte_data = s.getBytes();
									byte[][] byte_data_split = JniInchiWrapper_0.getByteArraysFromINCHIVersion(nativeLoader"
d51a8f54-9d8c-4d00-84cf-93a18f8fef9a,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_1Test.java,51.01185917854309,length,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            int ret = wrapper.CheckINCHI(inchi, strict);
            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);
            if (retStatus == null) {
                throw new JniInchiException(""Unknown return status: "" + ret);
            }
            return retStatus;
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapper_1Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains one unit test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapper_1Test {","// JniInchiWrapper_1Test.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains one unit test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapper_1Test {
static final String INCHI_FILE = ""../src/test/resources/file.inchi"";
	public static TestSuite suite() {
		TestSuite ts = new TestSuite();
		assertNotNull(INCHI_FILE);
		List<JniInchiWrapper> wrappers = NativeLibraryLoader.load(""JniInchiWrapper"");
		for (JniInchiWrapper wrapper : wrappers) {
            wrappers.remove(wrapper);
        }

        // Create the default wrapper
        JniInchiWrapper w = new JniInchiWrapper();
        w.setParams(INCHI_FILE);
        ts.addTest(createTestGroup(w));

		return ts;
	}
	
	/**
	 * @see TestGroup
	 */
	private static TestSuite createTestGroup(JniInchiWrapper wrapper) {
		TestSuite ts = new TestSuite();
        java.util.List<String> params = new java.util.ArrayList<>();
        {
            java.util.StringTokenizer st = new java.util.StringTokenizer(wrapper.getParams(), "","");
            params.addAll(st.nextToken().split("",""));
            params.addAll(st.nextToken().split("",""));
        }

        ts.addTest(runTest(wrapper, params));
        return ts;
	}
	/**
	 * @see TestCase
	 */
	private static TestGroup createTestGroup(JniInchiWrapper wrapper, java.util.List<String> params) {
        return createTestGroup(wrapper);
	}
	private Test(TestGroup group) {
		this.group = group;
	}

	private final TestGroup group;

	private final JniInchiWrapper wrapper;


	/**
	 * Test the {@link JniInchiWrapper#CheckINCHI} method.
	 * @throws JniInchiException
	 * @throws NativeCodeException
	 * @throws TimeoutException
	 */
	private Test(final JniInchiWrapper wrapper) throws NativeCodeException, NativeCodeException, TimeoutException {

        try {
			checkInchi(INCHI_FILE, true);
			System.out.println(INCHI_FILE);
			INCHI_STATUS retStatus = checkInchi(INCHI_FILE, false);
			checkSuccess(retStatus);
		} catch (NativeCodeException e) {
			System.out.println(e);
			assertNull(wrapper.getParams());
		} catch (TimeoutException e) {
			assertNull(wrapper.getParams());
		}

        this.wrapper = new JniInchiWrapper(InchiUtil.getInchiFile(wrapper.getParams()));
	}
	/**
	 * @return the group object
	 */
	private final TestGroup getGroup() {
		return group;
	}
	/**
	 * @return the wrapper object
	 */
	protected final JniInchiWrapper getWrapper() {
		return wrapper;
	}
	/**
	 * Runs the test
	 */
	protected void run() {
		wrapper.getLock();
		try {
			// TODO: do we need one?
			INCHI_STATUS retStatus = checkInchi;
			
			INCHI_STATUS retStatus0;
			INCHI_STATUS retStatus1;
			INCHI_STATUS retStatus2;
			INCHI_STATUS retStatus3;
			INCHI_STATUS retStatus4;
			INCHI_STATUS retStatus5;
			INCHI_STATUS retStatus6;
			INCHI_STATUS retStatus7;
			INCHI_STATUS retStatus8;
			REENTRANT_LOCK retLock;
			boolean ret1, ret2, ret3, ret4, ret5;
			
			retLock = new ReentrantLock();
			Thread t = new Thread(new Runnable() {

				public void run() {
					retLock.lock();
					try {
						retStatus1 = checkInchi;
					} finally {
						retLock.unlock();
					}
				}
			});
			
			t.start();
			try (Thread.sleep(750L)) {
				retLock.lock();
				try {
					retStatus0 = checkInchi;
				} finally {
					retLock.unlock();
				}
			}
			Thread.sleep(20000L);
			
			if (retStatus0!= retStatus1) {
				throw new NativeCodeException(""Failed checkInchi. Expected: "" + retStatus1 
						+ "" Actual: "" + retStatus0);
			}
			
			if (retStatus0 == INCHI_STATUS.CHECK_FILE_EXIST) {
				throw new NativeCodeException(""Check file exists: "" + INCHI_FILE);
			}
			if (retStatus0 == INCHI_STATUS.CHECK_INCHI_FILE_EXISTS) {
				throw new NativeCodeException(""Check InChI exists: "" + INCHI_FILE);
			}
			
			t.join();
			
			ret1 = (retStatus1 == INCHI_STATUS.SUCCESS);
			ret2 = (retStatus2 == INCHI_STATUS.SUCCESS);
			ret3 = (retStatus3 == INCHI_STATUS.SUCCESS);
			ret4 = (retStatus4 == INCHI_STATUS.SUCCESS);
			ret5 = (retStatus5 == INCHI_STATUS"
5d041a7b-b8c6-4406-aea5-ed16a13dde9f,/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java,39.68829655647278,stop,"// Main.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 * Simple test class, for debugging purposes.
 *
 * @author sea36
 */
public class Main {

    public static JniInchiStructure getTestMolecule() {
        JniInchiStructure struct = new JniInchiStructure();
        JniInchiAtom a1 = struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, ""C""));
        JniInchiAtom a2 = struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, ""C""));
        JniInchiAtom a3 = struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, ""N""));
        JniInchiAtom a4 = struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, ""C""));
        JniInchiAtom a5 = struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, ""O""));
        JniInchiAtom a6 = struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, ""O""));
        a1.setImplicitH(1);
        a3.setImplicitH(2);
        a4.setImplicitH(3);
        a5.setImplicitH(1);
        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);
        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));
        return struct;
    }
}
","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#getTestMolecule()} method.
*/
class MainTest {","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains one unit test case for the {@link Main#getTestMolecule()} method.
*/
class MainTest {

    @Test
    void testMain() {
        System.out.println(""=== MainTest ======="");
        
        Main struct = new Main();
        
		assertEquals(0, struct.validate());
	}
}"
