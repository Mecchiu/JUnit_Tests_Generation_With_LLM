ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
b109af0d-08fc-4ab9-ab29-9c7dd5124583,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java,60.679346561431885,stop,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    /**
     * Abre o  armaz�m seguro (cacerts).
     *
     * @throws Exception
     */
    public KeyStore openTransportStore() throws Exception {
        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());
    }
}
","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {","// TransportKeyStoreBean_0Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.
*/
class TransportKeyStoreBean_0Test {

	/** The Constant LOG. */
	private final static transient Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);
	
	/**
	* Test null keystoreType.
	*/
	@Test
	public void testJNFE_01NullKeystoreType() {
		
		assertNull(SecurityUtils.getKeyStoreType(null));
	}
	
	/**
	* Test null keystoreUri.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_02NullKeystoreUri() {
		
		SecurityUtils.buildKeyStore(null, null);
	}
	
	/**
	* Test null keystorePassword.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_03NullKeystorePassword() {
		
		SecurityUtils.buildKeyStore(null, null);
	}
	
	/**
	* Test keystoreUri.
	*/
	@Test
	public void testJNFE_04KeystoreUri() {
		
		String keystoreUri = ""jndi"";
		String keystorePassword = ""password"";
		KeyStore keyStore;

		
		try {
			keyStore = SecurityUtils.buildKeyStore(keystoreType, keystoreUri, keystorePassword.toCharArray());
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		assertEquals(""The type of keystore is not correct"", keystoreType, keyStore.getType());
		assertEquals(""The uri of keystore is not correct"", keystoreUri, keyStore.getKeyManagers().get(0).getKeyAlias());
		assertEquals(""The password of keystore is not correct"", keystorePassword, SecurityUtils.getKeyStorePassword(keyStore));
		
	}
	
	/**
	* Test keystorePassword.
	*/
	@Test
	public void testJNFE_05KeystorePassword() {
		
		String keystorePassword = ""password"";
		KeyStore keyStore;
		try {
			keyStore = SecurityUtils.buildKeyStore(keyStoreType, ""jndiname"", keystorePassword.toCharArray());
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		assertEquals(""The type of keystore is not correct"", keyStoreType, keyStore.getType());
		assertEquals(""The password of keystore is not correct"", keystorePassword, SecurityUtils.getKeyStorePassword(keyStore));

	}
	/**
	* Test keyStore.
	*/
	@Test
	public void testJNFE_06KeyStore() {
		
		KeyStore keyStore;
		String keyStoreUri;
		
		try {
			keyStore = SecurityUtils.buildKeyStore(""JNFE"", null, null);
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		try {
			keyStoreUri = SecurityUtils.buildKeyStore(keyStoreType, """", keyStorePassword.toCharArray());
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		assertEquals(""The type of keystore is not correct"", keyStoreType, keyStore.getType());
		assertNull(""The uri of the keystore is not valid"", keyStoreUri);

	}
	
	/**
	* Test keyStorePassword.
	*/
	@Test
	public void testJNFE_07KeyStorePassword() {
		KeyStore keyStore;
		String keyStoreUri;
		
		try {
			keyStore = SecurityUtils.buildKeyStore(null, null, null);
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		try {
			keyStoreUri = SecurityUtils.buildKeyStore(null, null, null);
		} catch (Exception e) {
			LOG.error(""Invalid keystore"", e);
			fail();
		}
		assertEquals(""The type of keystore is not correct"", keyStoreType, keyStore.getType());
		assertNull(""Keystore password is null"", SecurityUtils.getKeyStorePassword(keyStore));
		
	}
	/**
	* Test keyStoreType.
	*/
	@Test
	public void testJNFE_08KeystoreType() {
		
		SecurityUtils.buildKeyStore(""JNFE"", keyStoreType, keyStorePassword.toCharArray());
	}
	/**
	* Test null keystoreUri.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_09NullKeystoreUri() {
		
		SecurityUtils.buildKeyStore(null, keyStoreType, keyStorePassword.toCharArray());
	}
	/**
	* Test null keystorePassword.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_10NullKeystorePassword() {
		
		SecurityUtils.buildKeyStore(null, null, null);
	}
	/**
	* Test null keystoreUri.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_11NullKeystoreUri() {
		
		SecurityUtils.buildKeyStore(null, null);
	}
	/**
	* Test null keystorePassword.
	*/
	@Test(expected=IllegalArgumentException.class)
	public void testJNFE_12NullKeystorePassword() {
		
		SecurityUtils.buildKeyStore(null, keyStoreType, ""password"");
	}
}
"
bd7fa95e-5f41-46df-9fa4-c4813c002789,/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java,43.966179847717285,stop,"// TransportKeyStoreBean.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;

/**
 * Atualiza as propriedades do sistema para establecer a ""keyStore""
 * usada para o transmiss�o das mensagens dos web services NFe.
 *
 * @author Mauricio Fernandes de Castro
 */
public class TransportKeyStoreBean implements InitializingBean {

    /**
     * Abre o gerenciador de chaves do armaz�m de transporte.
     *
     * @throws Exception
     */
    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");
        kmf.init(openTransportStore(), keyStorePassword.toCharArray());
        return kmf;
    }
}
","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {","// TransportKeyStoreBean_1Test.java
package br.com.jnfe.base;

import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import br.com.jnfe.base.util.SecurityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransportKeyStoreBean}.
* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.
*/
class TransportKeyStoreBean_1Test {

    private long time = System.currentTimeMillis();
    
private  Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class.getName());
    
    /**
     * @throws Exception
     */
    @Test
    public final void testOpenTransportKeyManagerFactory() throws Exception {
        assertNotNull(KeyStore.getInstance(""keystore""));
        assertTrue(KeyStore.getInstance(""keyStore"") instanceof KeyManagerFactory);    
    }
    
    /**
     * @throws Exception
     */
    public void testOpenTransportKeyManagerFactoryExceptions() throws Exception {
        SecurityUtils.setKeyStorePassword(this.logger, ""12345"");
        logger.error(""Open keyManagerFactory exceptions at testOpenTransportKeyManagerFactory()"");
        assertNull(KeyStore.getInstance(""keystore""));
        assertFalse(KeyStore.getInstance(""keyStore"") instanceof KeyManagerFactory);    
    }
   /**
     * @throws Exception
     */
    @Test
    public final void testGetKeyStorePassword() throws Exception {
        assertSame(keyStorePassword, (String) SecurityUtils.getKeyManagerFactory().getDefaultKeyManager().getPassword());
    }
    
    /**
     * @throws Exception
     */
    @Test
    public final void testGetKeyStorePwdExceptions() throws Exception {
      SecurityUtils.setKeyStorePassword(logger, ""12345"");
      logger.error(""Open keystore password exceptions at testGetKeyStorePassword()"");
      assertNull(keyStorePassword);
    }
}"
