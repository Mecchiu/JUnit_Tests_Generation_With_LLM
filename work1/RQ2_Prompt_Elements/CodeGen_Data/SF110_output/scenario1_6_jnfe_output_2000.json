[
{
    "choices": [
        {
            "text": "\n    /** Logger. */\n    private final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n    \n    private final String keyStoreUri = \"test.jks\";\n    private final String keyStoreType = \"JKS\";\n    private final String keyStorePassword = \"kms\";\n    \n    /**\n     * Inits the static fields to initialize.\n     * @throws Exception\n     */\n\t@Test\n    public void initialiseDefault() throws Exception {\n    \tLOG.info(\"default constructor\");\n        TransportKeyStoreBean transport = new TransportKeyStoreBean();\n        assertNotNull(transport.getKeyStore());\n        assertNotNull(transport.getKeyStoreUri());\n        assertNotNull(transport.getKeyStoreType());\n        assertNotNull(transport.getKeyStorePassword());\n        assertNotNull(transport.openTransportStore());\n\n        LOG.info(\"Initializing SSL context with new key store.\");\n\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(keyStore, keyStorePassword.toCharArray());\n\t\tKeyStore keyStore2 = kmf.getKeyManagers().get(0).getKeyStore();\n        assertNotNull(keyStore2);\n        //assertNotNull(\"Keystore is null.\",keyStore);\n\n        LOG.info(\"Keystore is: {}\", keyStore);\n        LOG.info(\"Keystore type is: {}\", keyStore.getType());\n        LOG.info(\"Keystore password is: {}\", keyStore.getPassword());\n\n        // assertEquals(\"Keystore has not the same type\", \"JKS\", keyStore.getType());\n        // assertEquals(\"Keystore has not the same password\", \"kms\", keyStore.getPassword());\n\n        assertNotNull(keyStore2);\n        assertEquals(\"Keystore is wrong type\", \"JKS\", keyStore2.getType()); \n        assertEquals(\"Password is wrong\", keyStorePassword, keyStore2.getPassword());\n\n\n    }\n\n    /**\n     * Tear down.\n     */\n    @Test\n    public void tearDown() {\n        TransportKeyStoreBean transport = new TransportKeyStoreBean();\n        transport.closeTransportStore();\n        \n    }\n    \n    /**\n     * Test of save and setProperty method, of class TransportKeyStore.\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testSaveAndSetProperty() throws Exception {\n        LOG.info(\"test save and set property\");\n        try{\n            TransportKeyStoreBean instance = new TransportKeyStoreBean();\n            instance.setKeyStorePassword(\"kms\");\n            instance.setKeyStorePassword(\"kms\");\n            instance.openTransportStore();\n            Object[] values = { instance.getKeyStorePassword().toCharArray() };\n            instance.setProperty(\"keystorepassword\",values);\n            \n            assertNull(\"Unable to store the property\",instance.getProperty(\"somekey\"));\n            instance.setProperty(\"keystorepassword\",values);\n            \n            assertNotNull(\"Unable to find the property\",instance.getPropertie(\"somekey\"));\n            assertNotNull(\"Property not set\",instance.getProperty(\"keystorepassword\"));\n\n        }\n        catch (Exception ex) {\n            LOG.error(\"Unexpected exception.\", ex);\n            fail(\"Exception in testSaveAndSetProperty\");\n        }\n    }\n\n})\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private KeyStore keyStore = null;\n\n\tpublic void setUp() throws Exception {\n\t\t\n\t}\n    \n    @Test\n    public void testExecuteOpenTransportStore() throws Exception {\n\t\t\n        keyStore = SecurityUtils.openTransportStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n        assertNotNull(keyStore);\n    }\n\t\n    public void tearDown() throws Exception {\n        keyStore = null;\n    }\n    public static final String ks =  \"\";\n    static final String keySto = \"\";\n    static final String keyUri  = \"\";\n    static final String keyStoreType = \"\";\n    static final String keyStoreUri = \"\";\n    static final String keyStorePassword = \"\";\n}\n\n// TransportKeyStoreBean_0.java\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n    \n    /**\n     * Test of openTransportStore().\n     */\n    @Test\n    public void testOpenTransportStore() {\n        TRANSPORT_STORE.setKeystorePath(KEYSTORE_PATH);\n        TRANSPORT_STORE.setKeystorePass(keyStorePassword.toCharArray());\n        TRANSPORT_STORE.setKeystoreType(keyStoreType);\n        TRANSPORT_STORE.setTruststoreUri(keyStoreUri);\n        TRANSPORT_STORE.setTruststorePassword(keyStorePassword.toCharArray());\n        TRANSPORT_STORE.setTrustAll()\n               .setKeypass(keyStorePassword.toCharArray()).build().apply();\n\n        assertNotNull(TRANSPORT_STORE);\n\n        try {\n            TRANSPORT_STORE.setKeystoreURI(TRANSPORT_STORE.getKeystoreURI().toString());\n        } catch (Exception ignored) {\n        }\n\n        assertNotNull(TRANSPORT_STORE);\n    }\n\n    /**\n     * Builds a test suite.\n     * @return the test suite.\n     */\n    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.addTest(TestSerializable.suite());\n        suite.addTest(new TestTransportKeyStoreBuilder(TRANSPORT_STORE));\n        suite.addTest(new TestTransportKeyStoreType(TRANSPORT_STORE.getKeystoreType(), TRANSPORT_STORE));\n        suite.addTest(new TestTransportKeyStorePassword(TRANSPORT_STORE.getKeystorePassword()));\n        return suite;\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n        \n    /**\n* @throws Exception\n*/\n    @Test\n    public final void test() throws Exception {\n        \n        try {\n        \tKeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n        \tKeyManager km = kmf.getKeyManagers()[0];\n        \tkmf.init(null, keyStorePassword.toCharArray());\n        \t\n        \tKeyStore ks = SecurityUtils.openStore();\n        \t\n        \t// KEYSTORE-1 - No need for X509 - Just a simple keystore.\n        \t\n        \tkmf.init(null, null);\n        \tKeyStore ks1 = kmf.getKeyManagers()[0].getKeyStore();\n        \tassertNotNull(ks1.getCertificate(Certificate.JNAF_KEY_PASSWORD_LOCATION));\n        \tassertNotNull(ks1.getCertificate(Certificate.JNAF_PRIMARY_CERT_V2_LOCATION));\n        \tassertNotNull(ks1.getCertificate(Certificate.JNAF_SECOND_CERT_V1_LOCATION));\n        \tassertNotNull(ks1.getPrivateKey(Privkey.JNAF_PRIMARY_KEY_LOCATION));\n        \t// assertNotNull(ks1.getPrivateKey(Privkey.JNAF_SECOND_KEY_LOCATION));\n            // assertNotNull(ks1.getCertificate(Certificate.JNAF_SECOND_CERT_V2_LOCATION));\n        \t\n        \t// assertTrue(ks1.containsAlias(String.valueOf(jnaf.PRIMARY_ALIAS)));\n        \t// assertTrue(ks1.containsAlias(String.valueOf(jnaf.SECOND_ALIAS)));\n        \t\n        \t// assertFalse(ks1.containsAlias(\"bad\"));\n        \tassertFalse(ks1.containsAlias(String.valueOf(jnaf.SECOND_ALIAS)));\n        \tassertFalse(ks1.containsAlias(String.valueOf(jnaf.PRIMARY_ALIAS)));\n        \t\n        \t// assertFalse(ks1.containsAlias(\"bad:bad\"));\n        \tassertFalse(ks1.containsAlias(String.valueOf(jnaf.PRIMARY_ALIAS)));\n        \t// \tassertFalse(jnaf.JNAF_SECOND_ENCRYPTION_ALGO.equals(\"BC\"));\n        \t// \tassertFalse(jnaf.JNAF_SECOND_ENCRYPTION_ALGO.equals(\"a\"));\n        \t\n        \tassertFalse(kf.equals(kmf));\n        \t\n        \tassertTrue(kf.equals(kmf));\n    \t\t\n    \t} catch (Exception e) {\n    \t\tLOG.error(\"Exception!\", e);\n    \t\tfail(\"JNFA - test \");\n    \t}\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "private static final Logger log = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\t/**\n\t * Open for both SSL and JavaNet based transports.\n\t *\n\t * @throws Exception\n\t *             Exceptions\n\t */\n\t@Test\n\tpublic void testOpenTransportStore_Ssl_JavaNet() throws Exception {\n        // Open for JavaNet\n        KeyStore keyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n            assertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n        // Open for SSL\n\t\tkeyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n\t\tassertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n\t}\n\n        /**\n\t * Open for JavaNet based transports.\n\t *\n\t * @throws Exception\n\t *             Exceptions\n\t */\n\t@Test\n\tpublic void testOpenTransportStore_Ssl() throws Exception {\n        // Open for JavaNet\n        KeyStore keyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n            assertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n        // Open for JavaNet\n\t\tkeyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n\t\tassertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n    }\n\n        /**\n\t * Open for HTTP based transports.\n\t *\n\t * @throws Exception\n\t *             Exceptions\n\t */\n\t@Test\n\tpublic void testOpenTransportStore_Http() throws Exception {\n        // Open for HTTP\n        KeyStore keyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n            assertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n        // Open for HTTP\n\t\tkeyStore = SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n\t\tassertTrue(SecurityUtils.isPasswordMatched(keyStore, keyStoreUri, keyStorePassword.toCharArray()));\n\n\n\t}\n\t/**\n\t * <pre>\n\t * java.security.KeyStore is required.\n\t * A keystore must contain an implementation of a java.util.CertificateFactory, and it must\n\t * include the keystore type, keystore uri and keystore password.\n\t * A keystore must contain a truststore, truststore password\n\t * </pre>\n\t *\n\t */\n\t@Test\n\tpublic void testGetInstance_UsingJavaSecurity() throws Exception {\n        log.debug(\"\\n\\nJava Security (java.security.KeyStore.getInstance\\n\");\n\n        // Open keystore for SSL\n        KeyStore keyStore = SecurityUtils.getInstance(keyStoreType, keyStoreUri, keyStorePassword);\n\n        /**\n\t * The KeyStore must have a KeyFactory used to create an instance of a trusted\n\t * certificate factory. This MUST be a trusted certificate factory.\n\t */\n        assertNotNull(keyStore);\n        log.debug(\"\\tKeyFactory: \" + keyStore.getKeyFactory());\n        log.debug(\"\\tTrustManagerFactory: \" + keyStore.getTrustManagerFactory());\n        log.debug(\"\\tTrustManagerFactory returned: \" + trustManagerFactory);\n\n        // Open for SSL\n\t\tkeyStore = SecurityUtils.getInstance(keyStoreType, keyStoreUri, keyStorePassword);\n\n        // The KeyStore must contain a TrustManagerFactory\n        assertNotNull(keyStore.getKeyManagers());\n        log.debug(\"\\tTrustManagerFactory returned: \" + trustManagerFactory);\n\n        // The TrustManagerFactory must have a KeyManagerFactory\n        assertNotNull(keyStore.getTrustManagers());\n        log.debug(\"\\tKeyManagerFactory returned: \" + keyManagerFactory);\n\t}\n\t/**\n\t * <pre>\n     * java.util.KeyManagerFactory is required.\n     * A keymanager factory MUST contain the keymanager type, keyManager\n     * uri, keyManager password.\n     * A keymanager factory MUST return at least one factory.\n     * </pre>\n     *\n     */\n    @Test\n    public void testGetKeyManagerFactory() throws Exception {\n        log.debug(\"\\n\\njava.security.KeyManagerFactory is required.\\n\");\n\t\tKeyManagerFactory keyManagerFactory\n\t\t\t\t= SecurityUtils.getKeyManagerFactory(keyStoreType, keyStoreUri, keyStorePassword);\n\t\t// Assert the keymanager (which will be more secure) is an instance of KeyManagerFactory\n\t\tassertNotNull(keyManagerFactory);\n\n    }\n\n    /**\n     * <pre>\n     * java.security.TrustManagerFactory is required.\n     * A trust manager factory MUST contain the trust manager type, trustManager\n     * uri, trustManager password.\n     * A trust manager factory MUST return at least one factory.\n     * </pre>\n     *\n     */\n    @Test\n    public void testGetTrustManagerFactory() throws Exception {\n        log.debug(\"\\n\\njava.security.TrustManagerFactory is required.\\n\");\n\t\tTrustManagerFactory trustManagerFactory\n\t\t\t\t= SecurityUtils.getTrustManagerFactory(keyStoreType, keyStoreUri, keyStorePassword);\n\t\t// Assert the trust manager (which will be more secure) is a instance of TrustManagerFactory\n\t\tassertNotNull(trustManagerFactory);\n    }\n\n    /**\n     * <pre>\n     * KeyStore.getKeyManagers(keyStoreType, keyStoreUri, keyStorePassword) is required.\n     * A trusted key manager (t) MUST return at least one instance\n     * of KeyManagerFactory\n     * </pre>\n     *\n\t * @throws  Exception\n\t */\n\t@Test\n\tpublic void testGetKeyManagers_UsingJavaSecurity() throws Exception {\n\t\tlog.debug(\"\\n\\nJava Security (java.security.KeyStore.getKeyManagers\\n\");\n\n        // Open key manager for TLS\n        KeyManagerFactory keyManagerFactory \n        \t= SecurityUtils.getKeyManagerFactory(keyStoreType, keyStoreUri, keyStorePassword);\n\n\t\t// Assert the key manager (which is more secure) is an instance of KeyManagerFactory\n\t\tKeyManagerFactory keyManagerFactory_1\n\t\t\t\t= SecurityUtils.getKeyManagerFactory(keyStoreType, keyStoreUri, keyStorePassword);\n\n\t\t// Assert the key manager (which is more secure) is a instance of TrustManagerFactory\n\t\tassertNotNull(keyManagerFactory",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\t\n\t@Test\n\tpublic final void test1() {\n\t\t\t\n\t\tLOG.debug(\"test1\");\n\t\t\n\t\tassertTrue((SecurityUtils.isOpenStore(KeyStore.getDefaultType()) == true););\n\t\t\n\t\tassertFalse((SecurityUtils.isOpenStore(KeyStore.getDefaultAlgorithm()) == true););\n\t\t\n\t\ttry {\n\t\t\tSecurityUtils.openStore(\"\", \"\", \"\", \"\");\n\t\t\tfail(\"Not support keyStore type null\");\n\t\t} catch (Exception ex) {\n\t\t\tLOG.debug(\"\", ex);\n\t\t\tassertTrue(\"Not support keyStore type null\", true);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tSecurityUtils.openStore(null, \"\", \"\", \"\");\n\t\t\t\tfail(\"Not support keyStore uri null\");\n\t\t\t} catch (Exception ex1) {\n\t\t\t\tLOG.debug(\"\", ex1);\n\t\t\t\tassertTrue(\"Not support keyStore uri null\", true);\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tSecurityUtils.openStore(\"\", \"file:///some/path/file.jnfe\", null);\n\t\t\t\tfail(\"Not support keyStore password null\");\n\t\t\t} catch (SecureValueException ex) {\n\t\t\t\tLOG.debug(\"\", ex);\n\t\t\t\tassertTrue(\"Not support keyStore password null\", true);\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tSecurityUtils.openStore(\"file.*.jnfe\", \"\", \"\", null);\n\t\t\t\tfail(\"Not support keyStore password empty\");\n\t\t\t} catch (SecureValueException ex) {\n\t\t\t\tLOG.debug(\"\", ex);\n\t\t\t\tassertTrue(\"Not support keyStore password empty\", true);\n\t\t\t}\n\t\t\t\t\t\n\t\t}\n\t\t\n\t\t// KEYManagerFactoryBeanBean_1Test.java\n\t\tKeyManagerFactoryBeanTest keyManagerFactoryBean = new KeyManagerFactoryBeanTest();\n\t\tkeyManagerFactoryBean.init();\n\t\tKeyManagerFactoryBeanKeyStore kfKeyManagerFactoryBean = keyManagerFactoryBean.getKeyManagerFactoryBean();\n\t\tassertTrue(SecurityUtils.isOpenStore(kfKeyManagerFactoryBean.getKeyStoreType()));\n\t\tassertTrue(SecurityUtils.isOpenStore(kfKeyManagerFactoryBean.getKeyStorePasswd()));\n\t\tassertTrue(SecurityUtils.isOpenStore(kfKeyManagerFactoryBean.getKeyStoreAlgorithm()));\n\t\tassertTrue(SecurityUtils.isOpenStore(kfKeyManagerFactoryBean.getKeyStoreAliases()));\n\t\tassertTrue(SecurityUtils.isOpenStore(kfKeyManagerFactoryBean.getKeyStoreLocation()));\n\t\tLOG.debug(\"keyManagerFactoryBean test end\");\n\t\t\t\n\t}\n\t\n\t// KEYManagerFactoryBeanBean_1Test.java\n\tclass KeyManagerFactoryBeanTest implements InitializingBean {\n\n\t\tpublic void init() {\n\t\t\ttry {\n\t\t\t\tKeyManagerFactory keyManagerFactoryBean = SecurityUtils.getKeyManagerFactoryBean();\n\t\t\t\t\tLOG.debug(\"keyManagerFactoryBean init\");\n\t\t\t\t\tkeyManagerFactoryBean.loadKeyManagers(false);\n\t\t\t\tLOG.debug(\"keyManagerFactoryBean init end\");\n\t\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.error(\"\", ex);\n\t\t\t\tfail(\"Test failed: \");\n\t\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final Logger LOGGER = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n\t \n\t /**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void openTransportStore_Test() throws Exception {\n\t\tassertNotNull(SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray(),KeyStore.Location.PROPRIETARY,false,true));\n    }\n    \n    public String keyStoreType;\n    public String keyStoreUri;\n    public char[] keyStorePassword;\n    public String keyStoreUriEncoded;\n    public static String keyStorePasswordEncoded;\n\t\n\t/**\n\t * KeyManagerFactory bean for ssl\n\t * @throws Exception Exception.\n\t */\n\tprivate KeyManagerFactory factory = null;\n\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyStoreTypeConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyStoreType(KeyStore.PrivateKeyEntry.PrivateKeyPassword.toCharArray()));\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyStoreUriConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyStoreUri(keyStoreType));\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyStorePasswordConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyStorePassword(keyStorePassword));\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyStoreUriBaseConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyStoreUriBase(keyStoreType));\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyStoreUriEncodedConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyStoreUriEncoded());\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void factoryConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyManagerFactory());\n    }\n\t\n\t/**\n\t * Test constructor.\n\t */\n\t@Test\n\tpublic void getKeyNameConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyManagerFactory());\n\t\tassertNotNull(SecurityUtils.getKeyNameEncoded(\"\"));\n    }\n\t\n\t/**\n\t * Test constructor.\n\t * @throws Exception Exception.\n\t */\n\t@Test\n\tpublic void keyPasswordConstructor() throws Exception {\n\t\tassertNotNull(SecurityUtils.initKeyManagerFactory());\n        KeyManagerFactory kmf = SecurityUtils.getKeyManagerFactory(factory, keyStoreType, keyStoreUri, keyStorePassword, keyManagerFactoryKey, true, true);\n\t\tassertTrue(kmf instanceof KeyManagerFactoryBean);\n\n    }\t\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\tprivate static final String PASSWORD_TYPE = TransportKeyStoreBean.PASSWORD_TYPE;\n\tprivate static final String URI_STORE = \"JNDI\";\n\n\tpublic static final String PASSWORD_TYPE = \"org.apache.felix.service.TransportKeyManagerFactory\";\n\n\t@Test\n\tpublic void testOpenTransportStore() throws Exception {\n\t\ttry {\n\t\t\tTransportKeyStoreBean.openTransportStore();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tLOG.error(e.getMessage(), e);\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testOpenTransportStoreUri() throws Exception {\n\t\ttry {\n\t\t\tTransportKeyStoreBean.openTransportStore(URI_STORE);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tLOG.error(e.getMessage(), e);\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testOpenTransportStorePassword() throws Exception {\n\t\ttry {\n\t\t\tTransportKeyStoreBean.openTransportStore(\"\", PASSWORD_TYPE, \"JG4UZrQ\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tLOG.error(e.getMessage(), e);\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n    \n}\n// TransportKeyStoreBean.java",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private final static KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"keyManagers\",\n\"org.springframework.jndi.JndiObjectFactory\");\n\t\t\n    private Logger logger = LoggerFactory.getLogger();\n\t\t\t\n    /**\n     * Test of {@link TransportKeyStoreBean#openTransportStore()} method, of class \n     * {@link TransportKeyStoreBean} using {@link KeyStoreType#PKCS8} and\n     * {@link KeyStoreUri#https://passport.jnfe.com/public/private/keyStore/pkcs12.s3p.pkl}\n     */\n    @Test\n    public void testOpenTransportStore() throws Exception {\n        System.setProperty(\"trustStorePassword\", \"secret\");\n        KeyStore keyStore = SecurityUtils.openStore(KeyStoreType.PKCS8, KeyStoreUri.httpsUri(\"https://passport.jnfe.com/public/private/keyStore/pkcs12.s3p.pkl\"),\n\"secret\".toCharArray());\n        assertNotNull(keyStore);\n        logger.debug(\"keyStore instance is : \" + keyStore);\n    }\n\t\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n    * Logging instance.\n    */\n    private final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_0Test.class);\n\t\t\t\n    public static final String keyStoreType = \"JNFE_KEYSTORE\";\n    public static final String keyStoreUri = \"KWSTRO:CAJABA.jnfe.com.br\";\n    public static final String keyStorePassword = \"jnfgadcs\";\n\n    @Test()\n    public void test() {\n    }\n\n    /**\n     * Utilizes the JNDI lookup of \"key-store\" system property.\n     */\n    @SuppressWarnings(\"rawtypes\")\n    private static KeyStore loadKeyStore() {\n        \n        try {\n            return KeyManagerFactory.getInstance(new String[0])\n                   .getKeyManagers()[0]\n                   .getInstance(SecurityUtils.JNDI_PROPERTY_NAME);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Nao funciona ao criar KeyStore\", e);\n        }\n    }\n\n}",
            "finish_reason": "stop"
        }
    ],
    "id": "7a820595-8650-40a0-a255-de98c36b792f",
    "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
    "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n}\n",
    "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
    "time_taken": 61.609267711639404,
    "usage": {
        "prompt_tokens": 424
    }
},
{
    "choices": [
        {
            "text": "/**\n\t\t * Initialize.\n\t\t */\n\t\t@Test \n\t\tvoid init() {\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/** Logger */\n\tprivate static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n    \t\n/*    \t// Test 1\n        KeyStore x = new X509v3TrustManager().engineGetKeyStore(null);\n        Assert.assertNotNull(x);\n        Assert.assertNotNull(x.getCertificateChain(0));\n\n        if(!(SecurityUtils.getPrincipalUsername().equals(\"administrador\"))) {\n            // Test 2\n            KeyKeyManagerFactory kmf = KeyKeyManagerFactory.getInstance(KeyPasswdKeyManagerFactory.TYPE);\n\n            // Test 3\n            KeyStore x = kmf.engineGetKeyStore(null);\n            x.setKeyEntry(0, \"testing_key\", \"Testing_passwd_test_key\");\n            LOG.fatal(\"x=\" + x);\n        }\n*/\n    \n/*    \t// Test 2\n            KeyStore x = new X509v3TrustManager().engineGetKeyStore(null);\n            Assert.assertNotNull(x);\n            Assert.assertNotNull(x.getCertificateChain(0));\n\n            if(!(SecurityUtils.getPrincipalName().equals(\"administrador\"))) {\n                // Test 3\n                KeyKeyManagerFactory kmf = KeyKeyManagerFactory.getInstance(KeyPasswdKeyManagerFactory.TYPE);\n\n                // Test 4\n                KeyStore x = kmf.engineGetKeyStore(null);\n                x.setKeyEntry(0, \"testing_key\", \"Testing_passwd_test_key\");\n                LOG.fatal(\"x=\" + x);\n            }\n*/\n    \n/*    \t// Test 3\n            KeyStore x = new X509v3TrustManager().engineGetKeyStore(null);\n            try {\n                x.setKeyEntry(0, \"testing_key\", \"Testing_passwd_test_key\");\n                Assert.fail(\"Expected exception occured when trying to read the key entry if it doesn't exist\");\n            } catch(KeyStoreException expectedException) {\n                assertEquals(TransportKeyStoreException.KEY_ENTRY_NOT_FOUND, expectedException.getErrorCode());\n            }\n*/\n    \n/*    \t// Test 4\n            KeyStore x = new KeyStoreBuilder().setKeyStoreType(KeyStore.getDefaultType()).setCertificateChain(new Certificate[]{certificate1}).build(null);\n            Assert.assertNotNull(x);\n            x.setKeyEntry(\"testing_key\", \"Testing_passwd_test_value\", \"Testing_passwd_test_key_password\");\n            LOG.fatal(\"x=\" + x);\n*/\n    \n// Test 1 - KeyStore\n// KeyStoreBeanTest1.java\n\n    /** KeyStores for tests. */\n    KeyStore keyStore = null;\n\n    /** Key. */\n    private String key = null;\n\n    /** KeyPassword. */\n    private final String keyPassword = \"Testing_passwd_test_password\";\n\n    /**\n     * Run the <code>test</code> method test when all properties are set.\n     *\n     */\n    @Test\n    public void test() {\n        this.keyStore = this.openTransportKeyManagerFactory().engineGetKeyStore(null);\n        LOG.fatal(this.keyStore);\n    }\n    \n    /**\n     * @return KeyStore.\n     */\n    private KeyStore getKeyStore() {\n        return this.keyStore;\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate final Logger log = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\tprivate static final String KEYSTORE_LOCATION_TEXTO = \"testKeyStoreLocation.jceks\";\n\tprivate static final String PASSWORD_TEXTO = \"password\";\n\n    \n    private KeyStore openTransportKeyStore() throws Exception {\n        return openTransportKeyStore(KEYSTORE_LOCATION_TEXTO, \n            SecurityUtils.getPropertyFileForTests(PASSWORD_TEXTO, \"\"));\n    }\n\n    /**\n     * Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n     */\n    @Test\n    void testOpenTransportKeyManagerFactory() {\n        log.debug(\"keyStoreLocation=\" + KEYSTORE_LOCATION);\n        log.debug(\"keyManager=\\\"\"+openTransportKeyManagerFactory().getKeyManagers().toString()+\"\\\"\");\n    }\n\n    @Test\t\n    public void test() throws Exception{\n        KeyStore keyStore = openTransportKeyStore();\n        assertNotNull(keyStore);\n        boolean loadedKeyManager = false;\n        try {\n            loadedKeyManager = openTransportKeyManagerFactory().load(keyStore, null);\n            assertTrue(loadedKeyManager);\n        } finally {\n            if (loadedKeyManager) { keyStore.delete(); }\n        }\n    }\n    \n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final static String NEW_TRANSPORT_SERVICE = \"new_transport_service\";\n\t\tprivate final static String CL_AUTHENTICATION_METHODS = \"CL-AUTHENTICATION-METHODS\";\n\t\tprivate final static String A_KEY = \"cl_a_key\";\n\t\tprivate final static String A_NAME = \"cl_a_name\";\n\t\tprivate final static String A_PASSWORD = \"cl_a_password\";\n\t\tprivate final static String A_TYPE = \"cl_a_type\";\n\t\tprivate final static String P_AUTHN_METHOD = \"password\";\n\t\tprivate final static String P_AUTHN_METHODS = \"password:${password}\";\n\t\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\n\t@Test\n\tpublic void test1() throws Exception {\n\t\tsetupSsl();\n\t\tassertTrue(\"Open transport keymanager\", openTransportKeyManagerFactory().engineIsAvailable(), \"Should be available (not null)\");\n\t\tassertEquals(\"getKeystoreType()\", KeyStore.getDefaultType(), openTransportKeyManagerFactory().getKeyStoreType().toString(), \"Should have return type\");\n\t\tassertTrue(\"getKeyManagerFactories()\", openTransportKeyManagerFactory().getKeyManagerFactories().size()==1, \"Should have one factory\");\n\t\t//LOGGER.debug(openTransportKeyManagerFactory().getKeyManagerFactories().toString());\n\t\tassertEquals(\"getKeyManager(name)\", KeyManagerFactory.getInstance(P_AUTHN_METHODS).getKeyManagers().toArray()[0].getName(), A_NAME, \"Should have name returned\");\n\t\tassertEquals(\"getKeyManager(type)\", KeyManagerFactory.getInstance(P_AUTHN_METHODS).getKeyManagers().toArray()[0].getType(), A_TYPE, \"Should have type returned\");\n\t\tassertEquals(\"getKeyManager(password)\", KeyManagerFactory.getInstance(P_AUTHN_METHODS).getKeyManagers().toArray()[0].getPasswords().get1(), A_PASSWORD, \"Should have passwords returned\");\n\t\t\n\t\tSecurityUtils.openSecureJwtTransportKeyManager();\n\t}\n\t\n\tpublic KeyManagerFactory openTransportStore() throws Exception {\n\t\tKeyManagerFactory kmf = null;\n\t\tkeyStorePassword.clear();\n\t\tkeyStorePassword.append(A_NAME, A_PASSWORD, \"Claro\", \"Kolobombi\");\n\t\tkeyStorePassword.append(P_AUTHN_METHOD, A_PASSWORD, \"password\", \"\");\n\t\tkeyStorePassword.append(CL_AUTHENTICATION_METHODS, \"password\", \"\");\n\t\tassertTrue(\"Open key manager factory\", \n\t\t    kmf == null || \n\t\t\tkmf.engineIsAvailable() || \n\t\t    //kmf.getKeyStore()==null\n\t\t    //kmf.getKeyManagers()==null);\n\t\t \n\t\tassertTrue(\"Open key store\", \n\t\t    kmf == null || \n\t\t\tkmf.engineIsAvailable() || \n\t\t    //kmf.getKeyStore()!=null)\n\t\t \n\t\t\t);\n\t\t\n\t\t//kmf=KeyManagerFactory.getInstance(\"password\");\n\t\t//assertTrue(\"Open key store factory\", kmf!=null);\n\t\t\n\t\treturn kmf;\n    }\n\tpublic void assertEquals(KeyManagerFactory kmf, KeyManagerFactory otherKMF) throws Exception {\n\t\tif (!SecurityUtils.keyManagerEquals(kmf, otherKMF)) {\n\t\t\tLOGGER.debug(\"Not equal\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tstatic {\n\t\tSecurityUtils.loadTrustStore();\n\t}\t\n     KeyStore ks;\n     String keyStorePassword = \"\";\n     String storePasswd;\n    /**\n     * Constructor.\n     */\n\t static {\n\t\ttry {\n\t\t\t// Open keystore with password.\n\t\t\tKeyStore ks = KeyStore.getInstance(\"jks\");\n\t\t\t\n\t\t\t// Load a store password.\n\t\t\t// TODO : this password should be loaded using the\n\t\t\t// key manager factory to force loading the\n\t\t\t// password.\n\t\t\tif (keyStorePassword.length() > 0) {\n\t\t\t\tks.load(null);\n\t\t\t\tks.getKeySpec(storePasswd, \"\".toCharArray());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLogger.getLogger(\"SecurityUtils\").error(e.getMessage(), e);\n\t\t\tthrow new AssertionError(\"An exception occured!\");\n\t\t}\n\t}\n     \t\n     /// initialize test class\n     public TransportKeyStoreBean_1Test() {\n\t\ttry {\n\t\t\t// Open an empty keystore\n\t\t\t\n\t\t\t// Create the keystore\n\t\t\tKeyStore ks = KeyStore.getInstance(\"jks\");\n\t\t\tks.load(null, keyStorePassword.toCharArray());\n\t\t\tkf = KeyManagerFactory.getInstance(\"SunX509\");\n            // The password is the name of the keystore.\n\t\t\tpasswd = ks.getKeySpec(storePasswd, \"\".toCharArray()).getEncoded();\n\t\t}\n        catch (Exception e) {\n\t\t\tLogger.getLogger(\"SecurityUtils\").error(e.getMessage(), e);\n\t\t\tthrow new AssertionError(\"An exception occured!\");\n        }\n    }\n    \n     /**\n      * {@inheritDoc}\n     */\n    @Override\n    public void afterPropertiesSet() throws Exception {\n    \tLogger.getLogger(\"SecurityUtils\").debug(this.getClass().getName() + \" ends\");\n    }\n    \n    /**\n     * Checks that the specified public key can be used with the specified\n     * store to communicate with the ENABLE_JNFE service.\n     */\n    @Test\n    public void publicKeyEqualsKeyPass() throws Exception {\n    \tLogger.getLogger(\"SecurityUtils\").debug(this.getClass().getName() + \" starts\");\n        try {\n\n            // Open an empty keystore\n            \n            // Create the keystore\n            KeyStore ks = KeyStore.getInstance(\"jks\");\n            ks.load(null, keyStorePassword.toCharArray());\n            kf = KeyManagerFactory.getInstance(\"SunX509\");\n            // The password is the name of the keystore.\n            passwd = ks.getKeySpec(passwd, \"\".toCharArray()).getEncoded();\n            kf.init(ks,passwd.toCharArray());\n        }\n        catch (Exception e) {\n            Logger.getLogger(\"SecurityUtils\").error(e.getMessage(), e);\n            throw new AssertionError(\"An exception occured!\");\n        }\n        assertNotNull(\"key\", kf.getKeyManagers().iterator().next());\n        \n        TransportKeyStoreBeanTransportKeyManagerFactory kmf = new TransportKeyStoreBeanTransportKeyManagerFactory();\n        // Check the keyManagerFactory property.\n        assertEquals(\"expected public key\", \"key\", kmf.publicKey((java.security.KeyStore) ks).getEncoded());\n        \n        TransportKeyStoreBeanTransportKeyManager km = kmf.publicKey((java.security.KeyStore) ks);\n        assertNotNull(\"public key\", km.publicKey());\n        \n        try {\n            int rc = kmf.transportKeyManager(kmf, \"junit-keystore\");\n            assertTrue(\"Return value not 0!!\", rc==0);\n        }\n        catch (Exception e) {\n            assertTrue(\"Exception not the expected!\", e instanceof IllegalArgumentException);\n        }\n        kmf.close();\n        try {\n            if (km.publicKey() instanceof String) {\n                assertTrue(\"Expected public key instance of String\", km.publicKey().substring(0,5).equalsIgnoreCase(passwd));\n            }\n        }\n        catch (Exception e) {\n            assertTrue(\"Exception not the expected!\", e instanceof UnsupportedOperationException);\n        }\n        \n        try {\n            kmf.transportKeyManager((java.security.KeyStore) null);\n            assertTrue(\"expecting exception\", false);\n        }\n        catch (Exception e) {\n            assertTrue(\"Unsupported operation exception expected\", e instanceof IllegalArgumentException);\n        }\n        kmf.close();\n        try {\n            if (km.publicKey() instanceof String) {\n                assertTrue(\"Expected public key instance of String\", km.publicKey().substring(5).equalsIgnoreCase(passwd));\n            }\n        }\n        catch (Exception e) {\n            assertTrue(\"Exception not the expected!\", e instanceof UnsupportedOperationException);\n        }\n        \n        try {\n            kmf.transportKeyManager((java.security.KeyStore) null, \"jnfe\");\n            assertTrue(\"expecting exception\", false);\n        }\n        catch (Exception e) {\n            assertTrue(\"Unsupported operation exception expected\", e instanceof IllegalArgumentException);\n        }       \n        \n       kmf.close();\n        assertFalse(\"A public key is required\", kf.getKeyManagers().isEmpty());\n        \n        try {\n            kmf.transportKeyManager(null, passwd);\n            assertTrue(\"expecting exception\", false);\n        }\n        catch (Exception e) {\n            assertTrue(\"unexpected e not\", e instanceof NullPointerException);\n        }\n        // FIXME:\n        // KeyManagerFactory.getInstance(\"SunX509\");\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t// ObjectNameServiceBean.java\n\t\tpublic static final String OBJECTNAME = \"\";\n\n        private static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n        \n        KeyStore keyStore = SecurityUtils.getSecurityStore();\n        \n    /**\n     * Test of init method, of class br.com.jnfe.base.TransportKeyStoreBean.\n     * @throws Exception\n     */\n    @Test\n    public void testInit() throws Exception {\n            \n        if(KEYSTORE==null) {\n            ObjectNameServiceBean.resetException();\n        }\n        \n        KeyManagerFactory kmf = SecurityUtils.getSecurityTrustManagerFactory();\n    \tLOG.debug(\"kmf = \" + kmf.getName());\n    \t\n    \tassertNotNull(kmf);\n        assertNotNull(OBJECTNAME);\n        assertFalse(\"kmf equals null\", SecurityUtils.equal(kmf, null));\n        assertFalse(\"kmf equals NaN\", SecurityUtils.equal(kmf, Double.NaN));\n    }\n    \n    /**\n     * Test of get objectName method, of class br.com.jnfe.base.TransportKeyStoreBean.\n     * @throws Exception\n     */\n    @Test\n    public void testGetObjectName() throws Exception {\n        \n        if(KEYSTORE==null) {\n            ObjectNameServiceBean.resetException();\n        }\n\n        assertNotNull(OBJECTNAME);\n        assertNull(TransportKeyStoreBean.getObjectName());\n       \n    }\n    \n    /**\n     * Test of getTrustManagerType method, of class br.com.jnfe.base.TransportKeyStoreBean.\n     * @throws Exception\n     */\n    @Test\n    public void testGetTrustManagerType() throws Exception {\n            \n        if(KEYSTORE==null) {\n            ObjectNameServiceBean.resetException();\n        }\n\n        assertEquals(TransportKeyStoreBean.getTrustManagerType(), TRANSPORT_TRUST_MANAGER_FACTORY_TYPE);\n    }\n    \n    /**\n     * Test of getKeyManager methods, of class br.com.jnfe.base.TransportKeyStoreBean.\n     * @throws Exception\n     */\n    @Test\n    public void testGetKeyManager() throws Exception {\n        \n        if(KEYSTORE==null) {\n            ObjectNameServiceBean.resetException();\n        }\n        \n        assertNotNull(\"kmf == null\", SecurityUtils.getTrustManagerFactory().getKeyManager(\"NFE\"));\n        \n    }\n\n    \n    /**\n     * Test of getTrustStore methods, of class br.com.jnfe.base.TransportKeyStoreBean.\n     * @throws Exception\n     */\n    @Test\n    public void testGetTrustStore() throws Exception {\n            \n        if(KEYSTORE==null) {\n            ObjectNameServiceBean.resetException();\n        }\n        \n        // No keyStore can be returned\n        assertNotNull(\"No key store can be returned\", SecurityUtils.getTrustManagerFactory().getTrustStore(\"NFE\"));\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\n    private TransportKeyStoreBean transport;\n    \n    /**\n     * Initialization of the class for JUnit.\n     */\n    @Test\n    public void transport_1Test() {\n        String keyStorePassword = SecurityUtils.readFile(\"resources/keyStorePassword.txt\").trim();\n        assertEquals(keyStorePassword, \"secret\");\n        KeyStore keyStore = openTransportStore();\n        assertNotNull(keyStore);\n        assertEquals(10, keyStore.numKeys());\n    }\n\n    /**\n     * Initialization operation of the class for JUnit.\n     */\n    @Override\n    public void afterPropertiesSet() {\n        LOG.info(\"\");\n        assertNotNull(transport);\n        assertNotNull(transport.getKeyStore());\n        assertNotNull(transport.getTrustStore());\n    }\n    \n    private KeyStore openTransportStore() throws Exception {\n        KeyStore keyStore = KeyStore.getInstance(\"KeyStore\", \"SunX509\");\n        keyStore.load(null, null);\n        return keyStore;\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n        transient private final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n        private final String keyStore = \"MyStore\";\n        private final String keyStorePassword = \"MyStorePassword\";\n        private final KeyStore openTransportStore;\n        \n\t/**\n\t * Creates OpenSSL key store with password.\n\t */\n\tpublic TransportKeyStoreBean_1Test() {\n\t\t\t\n\t}\n\t\n\t/**\n\t * Creates OpenSSL key store password.\n\t */\n\tpublic TransportKeyStoreBean_1Test(String keyStorePassword) {\n\t\n\t\tSecurityUtils.clearPassword(keyStorePassword);\n\t\t\n\t\tthis.keyStore = keyStorePassword;\n\t\t\n\t}\n\t\n\t/**\n\t * Run this test.\n\t * @throws Exception\n\t */\n\t@Test\n    public void transportKeyStore() throws Exception {\n\t\t\n        KeyStore.Builder keyStoreBuilder = KeyStore.getInstance(\"JceKS\");  \n\t\ttry {\n\t\t\n\t\t\tkeyStoreBuilder.load(openTransportStore.getInputStream(), keyStorePassword.toCharArray());\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error while loading the keyStore {}\", e);\n\t\t}\n\t\n        LOG.info(\"keyStore {} encrypted\", keyStore);        \n\t\tassertTrue(keyStore, SecurityUtils.isEncrypted(keyStore));\n\t\t\n\t\tLOG.info(\"keyStore {} opened\", keyStore);\n\t}\n\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate static final Logger LOG = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\tprivate org.apache.log4j.Logger log = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t\n    /**\n     * Test of openTransportKeyMangerFactory method, of class TransportKeyStoreBean.\n     */\n    @Test\n    public void testOpenTransportKeyManagerFactory() {\n        TransportKeyStoreBean testee = null;\n        try {\n            testee = new TransportKeyStoreBean();\n        } catch (Exception e) {\n            e.printStackTrace();\n            fail(\"Unexpected exception\");\n        }\n        try {\n            KeyManagerFactory kmf = testee.openTransportKeyManagerFactory();\n            assertTrue(true);\n        } catch (Exception e) {\n            e.printStackTrace();\n            fail(\"Unexpected exception\");\n        }\n    }\n    \n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/** Logger. */\n\tprivate static final Logger LOG = LoggerFactory\n\t\t\t.getLogger(TransportKeyStoreBean_1Test.class.getName());\n\t\n\t/** Keystore. */\n\tprivate KeyStore keyStore = null;\n\n\t/** Open transport storage. */\n    @Test\n    void openTransportTransport() {\n        SecurityUtils.startThreadedThreads();\n        System.err.println(\"Open keyStore\");\n        keyStore.load(null, keyStorePassword.toCharArray());\n        break;\n    }\n    \n    /**\n    * Test of getKeyStore method, of class TransportKeyStoreBean.\n    */\n    @Test\n    void getKeyStoreMethod_1_1() {\n        System.err.println(\"getKeyStore\");\n        \n\t\t//System.err.println(keyStore.toString());\n        \n        assertNotNull(keyStore);\n        assertTrue(keyStore.toString().startsWith(\"Store \"));\n        \n        if (!SecurityUtils.isLocal()) {\n            // Not running in remote VM\n            return;\n        }\n\n        LOG.debug(\"Getting keyStore from the local VM\");\n        assertEquals(keyStore.toString(), getKeyStore());\n\n        LOG.debug(\"Getting keyStore from remote VM\");\n\t\t//keyStore = new File(\"d:memory:NFe\" + \"/keystore.p12\");\n\t\t\n    }\n    \n    /**\n    * Test of getKeyManagerFactory method, of class TransportKeyStoreBean.\n    */\n    @Test\n    void getKeyManagerFactoryMethod_1_1() {\n        System.err.println(\"getKeyManagerFactory\");\n        \n\t\t//System.err.println(keyManagerFactory);\n        \n        assertNotNull(keyManagerFactory);\n        assertTrue(keyManagerFactory instanceof KeyManagerFactory);\n        \n    }\n    \n    /**\n    * Test of getKeyStore method, of class TransportKeyStoreBean.\n    */\n    @Test\n    void getKeyStoreMethod_1_2() {\n        System.err.println(\"getKeyStore (false)\");\n\n        keyStore = null;\n        assertNull(keyStore);\n        \n        SecurityUtils.startThreadedThreads();\n        System.err.println(\"keyStore = new \" + KeyStore.class);\n        \n        keyStore = keyStore.getKeyStore();\n        \n        if (!SecurityUtils.isLocal()) {\n            // Not running in remote VM\n            return;\n        }\n        \n        assertClashes(keyStore);\n\n        keyStore = null;\n        LOG.debug(\"Successfully closed keyStore\");\n        \n    }\n    \n    /**\n    * Test of getPBEObjectPEM method, of class TransportKeyStoreBean.\n    */\n    @Test\n    void getPBEObjectPEMMethod_1() {\n        System.err.println(\"keyStore = \" + keyStore);\n        \n        assertNotNull(keyStore);\n        \n        PBEProperties properties = keyStore.getKeyStorePBE().getPBEProperties();\n        \n        if (!SecurityUtils.isLocal()) {\n            // Not running in remote VM\n            return;\n        }\n\n        if (properties == null) {\n            // Not running from PBE\n            return;\n        }\n        \n        assertNotNull(properties.getPBEPassword());\n        \n        assertNotNull(properties.getPassword());\n    }\n\n\t@Test\n\tvoid getKey() {\n\t\tSystem.err.println(\"Get key\");\n\t\t\n        OpenTransportKeyManagerFactory kmf = openTransportKeyManagerFactory();\n\t\t\n\t\t// keyStore = new File(\"d:memory:NFe\" + \"/key.p12\");\n\t\tKeyStore keyStore = keyStore.getKeyStore();\n\t\tassertTrue(keyStore instanceof OpenKeyStore);\n\t\tString password = keyStore.getCertificateChain((KeyStore.KeyStoreParameters) null).getCertificatePem();\n\t\tString key = kmf.engine();\n\t\tassertNotNull(key);\n\t\tassertTrue(key.length() > 0);\n\t\tassertTrue(key.startsWith(\"#1! \"));\n\t\t\n\t\t// Check encryption method\n\t\tOpenPSSPasswordBasedCryptoService cryptorService = (OpenPSSPasswordBasedCryptoService)kmf.createService();\n\t\tassertNotNull(cryptorService);\n\t\t\n\t\t// FIXME: Need to test encryption method and the password\n\t\t//assertTrue(cryptorService.getEncryptionMethod().isEncrypt());\n\t\tassertTrue(password.startsWith(\"#1! \"));\n\t}\n\t\n\t/**\n\t * Check the clovers.\n\t */\n    private static void assertClashes(KeyStore keyStore) {\n        // check that no duplicate password is found and that password is not generated\n        String keyStorePassword = keyStore.getCertificateChain((KeyStore.KeyStoreParameters) null).getCertificatePem();\n        String keyStorePassword1 = keyStore.getCertificateChain((KeyStore.KeyStoreParameters) null).getCertificatePem();\n        \n        LOG.debug(\"No duplicate password, but password is not generated\");\n        assertEquals(keyStore, keyStorePassword);\n        assertNull(keyStorePassword1);\n        \n        LOG.debug(\"Password generated\");\n        assertNotNull(keyStorePassword);\n        //assertTrue(keyStore.getKeyStorePBE() == null);\n        assertTrue(keyStore.toString().startsWith(\"Store \"));\n        assertTrue(!keyStorePassword1.startsWith(keyStorePassword));\n        //keyStorePassword = keyStorePassword1.toCharArray()\n    }\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "6dcc3c8d-e9f3-43fc-b5f6-49db9ee66a94",
    "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
    "original_code": "// TransportKeyStoreBean.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n}\n",
    "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
    "time_taken": 49.98838448524475,
    "usage": {
        "prompt_tokens": 447
    }
}
]