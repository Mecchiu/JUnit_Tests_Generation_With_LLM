ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
5c7d7cb7-c40f-49c8-8e05-7211f5ba1085,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java,64.92970061302185,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int capacity() {
        return delegate.capacity();
    }
}
","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {

	/**
	 * Unit test for {@link DefaultNoteListModel#capacity()} method.
	 * Initially implemented unit test case.
	 *
	 * @throws Exception 
	 */
	@Test
	public void capacityTest() throws Exception {
		NoteListModel delegate = buildDelegate();
		delegate.addData(new AbstractNote(""Note1""));
		delegate.addData(new Note(""Note2""));
		Integer result = delegate.capacity();
		assertEquals(delegate.count() + 1, result);
	}
	
	private static DefaultNoteListModel buildDelegate() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.delegate = buildDelegate1();
		return model;
	}
	
	
	private static DefaultNoteListModel buildDelegate1() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.delegate = buildNoteListModel();
		return model;
	}
	
	
	private static DefaultNoteListModel buildNoteListModel() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.delegate = buildDelegate2();
		return model;
	}
	
	private static DefaultNoteListModel buildDelegate2() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.delegate = buildNoteListModel2();
		return model;
	}
	
	private static DefaultNoteListModel buildNoteListModel2() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.delegate = buildDelegate3();
		return model;
	}
	
}"
c291af81-d0cb-49b5-9129-420618dd91cb,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java,62.03948640823364,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int size() {
        return delegate.size();
    }
}
","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {

	/**
	* Tests the default method of {@link DefaultNoteListModel}.
	*
	*/
	@Test
    public void test() {
		// Default test implementation of the {@link DefaultNoteListModel} class
		System.out.println(""DefaultNoteListModel.size() = "" + DefaultNoteListModel.size());
	}
}
"
a17e6bd2-17ca-472e-98fb-2fe547da0c30,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java,57.659793853759766,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }
}
","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {

	@Test
	void defaultNoteListModel_2() {
			
		assertNotNull(elements());
		}

	}"
f28598c4-fe10-4d88-958a-acd510c1a403,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java,49.24163031578064,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }
}
","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {

    test_3 mainTest
    {
        setUp();

        try {
            for (int i = 0; i < 30; i++)
                new Test2().test();
            System.out.println(""Passed!"");
        } finally {
            tearDown();
        }
        
    }

    static interface Test2 {
        static void test() {
            String test;
            test = ""Hello"";
            System.out.println(test);
            String test2;
            test = ""Hello, I am the first test"";
            System.out.println(test2);
            }
    }
			
}

// DefaultNoteListModel_4Test.java
"
b469d4f5-85a3-4e93-87df-4817387f7ffc,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java,40.910895586013794,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }
}
","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {
// Class under test

    /**
    * Test method for {@link DefaultNoteListModel#indexOf(AbstractNote)}.
    */
    @Test
    public void testIndexOf() {
        boolean bTrue = true;
        assertTrue(bTrue);
        AbstractNote aNote = null;
        assertEquals(-1, DefaultNoteListModel.indexOf(aNote));
        Object bNoteObject = aNote;
        assertEquals(-1, DefaultNoteListModel.indexOf(bNoteObject));
        bNoteObject = new AbstractNote();
        assertEquals(0, DefaultNoteListModel.indexOf(bNoteObject));
        assertEquals(1, DefaultNoteListModel.indexOf(bNoteObject));
        bNoteObject = null;
        assertTrue(DefaultNoteListModel.indexOf(bNoteObject) >= 0);
        bNoteObject = aNote;
        assertTrue(DefaultNoteListModel.indexOf(bNoteObject) >= 0);
        bNoteObject = aNote;
        assertTrue(DefaultNoteListModel.indexOf(bNoteObject) >= 0);
    }
    
}
// DefaultNoteListModel_4Test.java"
e4451239-40f2-4c94-b963-2da31463547b,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java,61.15035533905029,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }
}
","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {

	/**
	 * Test method for {@link DefaultNoteListModel#indexOf(AbstractNote)}.
	 * @throws Exception 
	 */
	@Test
	void testIndexOf() throws Exception {
		Map<String, List<AbstractNote>> notes = new HashMap<>();
		
		
		// DefaultNoteModel_1_5.java (unused)
		AbstractNote noteUnused = new DefaultNoteModel_1_5(DEFAULT_NOTE).makeDefaultNote();
		
		noteUnused.setData(""0123456789""); // Default ""0123456789""
		notes.put(DEFAULT_NOTE_DATA, new ArrayList<>());// new ArrayList<>()); // Used in tests
		
		// DefaultNoteModel_2.java (unused)
		noteUnused.setData(""3456789""); // Default ""3456789""
		List<AbstractNote> notesUnused = notes.get(DEFAULT_NOTE);
		notesUnused.add(DEFAULT_NOTE);
		
		assertEquals(DEFAULT_LEN, notes.size());
		assertEquals(DEFAULT_LEN, notesUnused.size());
		
		// DefaultNoteModel_2.java
		noteUnused.setData(""34567"");
		List<AbstractNote> notesUnused2 = notes.get(DEFAULT_NOTE);
		
		assertEquals(0, notes.size());
		assertEquals(0, notesUnused.size());
		
		
		// DefaultNoteModel_4.java
		noteUnused.setData(""0123456789"");
		List<AbstractNote> notesUnused4 = notes.get(DEFAULT_NOTE);
		
		assertEquals(DEFAULT_LEN, notes.size());
		assertEquals(DEFAULT_LEN, notesUnused4.size());
		
		// DefaultNoteModel_4.java
		noteUnused2.add(noteUnused); // Unused notes have an index 0
		
		assertEquals(0, notes.size());
		assertEquals(DEFAULT_LEN, notesUnused4.size());
		
		// DefaultNoteModel_4.java
		noteUnused2.add(noteUnused); // Unused notes have an index 1
		
		assertEquals(DEFAULT_LEN + 1, notes.size());
		
		for (Map.Entry<String, List<AbstractNote>> entry : notes.entrySet()) {
			assertEquals(DEFAULT_LEN, entry.getKey().length());
			assertFalse(entry.getValue().isEmpty()); // Default note ""0123456789"" should be empty
			List<AbstractNote> notesInModel = entry.getValue();
			assertEquals(2, notesInModel.size());
			assertTrue(notesInModel.contains(DEFAULT_NOTE));
			assertTrue(notesInModel.contains(DEFAULT_WORD));
		}
		
	}
	
	/**
	 * Test class of {@link DefaultNoteListModel#get(String)}.
	 * @author AllenChue
	 */
	public static class DefaultNoteModel_5_8 extends DefaultNoteModel_7 implements NoteListDataListener {
		
		public DefaultNoteModel_5_8() {
		}
		
		
		/* (non-Javadoc)
		 * @see com.allenstudio.ir.core.plugins.NotelistDataListener#notificationOfNoteListDataEvent(javax.swing.event.Notification)
		 */
		@Override
		public void notificationOfNoteListDataEvent(NoteListDataEvent ne) {
			if (ne.type == NoteListDataEvent.Type.EVENT_CALLED_BY_PROPERTY || ne.type == NoteListDataEvent.Type.EVENT_CALLED_BY_PROPERTY_2) {
				throw new IllegalArgumentException(""Called by the property list"");
			}
			
			// Note that the default NoteListModel will not invoke a
			// notification of a new or changed NoteListDataEvent based on
			// this parameter.
		}
	}
}"
6bd26e4a-3968-494b-8c50-77006c9b6341,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java,61.27248430252075,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }
}
","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {

    @Test
    public void test() {
    	AbstractNote a = new AbstractNote();
    	a.setTitle(""This is the test"");
    	assertEquals(0, DefaultNoteListModel.lastIndexOf(a));
    }
    
}

// DefaultNoteListModel$Test$a1_6Test.java
"
c1b00686-edf7-4c4b-905f-042d2a0a9c68,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java,61.080920696258545,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }
}
","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {
/**
		 * @since 2017-02-09
		 */
        static private Set<Integer> lastIndexSet = new HashSet<>(5);

    /**
     *
     * @since 2017-02-09
     */
	@Test
    void testLastIndexOf_0_1() {
        lastIndexSet.clear();
        AbstractNote item = new BasicNote(false,false,null,0);
        assertEquals(0,
                     delegate.lastIndexOf(item, 1)
                           );
        assertEquals(1,
                     delegate.lastIndexOf(item, 1));
        assertEquals(2,
                     delegate.lastIndexOf(item, 1));
        item.setIsEnabled(false);
        assertEquals(-1,
                     delegate.lastIndexOf(item, 1));
        assertEquals(-1,
                     delegate.lastIndexOf(item, -1));
        
    }
    
	/**
	 * @throws InterruptedException
	 *
	 * @since 2017-02-09
	 */
    @Test
    void testLastIndexOf_3() throws InterruptedException {
        AbstractNote item = new BasicNote(false,false,null,1);
        Set<Integer> expectedSet = new HashSet<>(5);
        Set<Integer> set = new HashSet<>(6);
        set.add(1);
        set.add(1);
        lastIndexSet.clear();
        assertEquals(expectedSet, set);
        assertEquals(0, lastIndexSet.size() );
        
    }

}
"
7f25570e-657d-43f8-b328-b074c7f93a56,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java,53.05766248703003,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }
}
","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {

    private final AbstractNoteListModel<Object> delegate = new DefaultNoteListModel();
    private HashMap<Object, List<AbstractNote>> elementAt = new HashMap<Object, List<AbstractNote>>();
    private HashMap<Object, AbstractNote> element = new HashMap<Object, AbstractNote>();
    
    
    @Test
    void singleElement() {
        assertEquals(new LinkedList<Object>(), elementAt.keySet());
    }
    
    @Test
    void singleItem() {
        AbstractNote note = element.get(new Object());
        assertEquals(note, elementAt.get(new Object()));
    }
    
    @Test
    void multipleObjects() {
        List<Object> notes = new LinkedList<Object>();
        notes.addAll(2, Arrays.asList(new Object[]{new Object(), new Object()}));
        assertTrue(delegate.put(new Object(), notes));
        assertEquals(2, elementAt.size());
        assertTrue(elementAt.get(new Object()).equals(notes.get(0)));
        assertTrue(elementAt.get(new Object()).equals(notes.get(1)));
    }
    
    @Test
    void multipleItems() {
        List<AbstractNote> notes = new ArrayList<AbstractNote>();
        notes.addAll(new Object[]{new Object(), new Object()} );
        assertEquals(1, elementAt.size());
        assertEquals(new AbstractNote(1), elementAt.get(new Object()));
        
        assertFalse(delegate.put(new Object(), notes));
        assertEquals(1, elementAt.size());
        assertEquals(new AbstractNote(2), elementAt.get(new Object()));
        
        assertFalse(delegate.put(new Object(), Arrays.asList(new Object[]{new Object()})));
        assertEquals(1, elementAt.size());
        assertEquals(new AbstractNote(Arrays.asList(2).size()), elementAt.get(new Object()));
        
    }
    
    @Test
    void removeAll() {
        List<Object> notes = new LinkedList<Object>();
        notes.addAll(new Object[]{new Object(), new Object()});
        assertEquals(2, elementAt.size());
        assertTrue(elementAt.remove(new Object()));
        assertTrue(delegate.put(new Object(), notes));
        assertEquals(1, elementAt.size());
    }
    
    @Test
    void removeOne() {
        List<Object> notes = new LinkedList<Object>();
        notes.addAll(new Object[]{new Object(), new Object()});
        assertEquals(2, elementAt.size());
        assertTrue(elementAt.remove(new Object()));
        assertEquals(1, elementAt.size());
        assertFalse(elementAt.remove(new Object()));
        assertEquals(1, elementAt.size());
    }
    
    @Test
    void setElementAt() {
        assertEquals(new LinkedList<Object>(), elementAt.keySet());
        Map<Object, AbstractNote> newMap = new HashMap<Object, AbstractNote>();
        for (AbstractNote n: elementAt.values()) {
            newMap.put(n.getIdentifier(), n);
        }
        assertEquals(newMap, elementAt);
    }
}"
5df06e8d-e369-4a21-81ac-19d9b15c5926,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java,61.55151844024658,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote firstElement() {
        return delegate.firstElement();
    }
}
","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {

	/**
	 * This test case creates and executes a simple {@link AbstractNote} and then checks its
	 * presence in the list of note data.
	 */
	@Test
	void testModelBehaviour() {
		final AbstractNote firstElement_a = delegate.firstElement();
		assertNotNull(firstElement_a);
		
		assertTrue(firstElement_a.isComplete());
		assertTrue(firstElement_a.isCompleteText());
		
		assertTrue(firstElement_a.isCompleteText()); // If text is not complete then the node should've been removed
	}
	
	
	/**
	 * This test case creates and executes the following two simple {@link AbstractNote} instances:
	 *
	 * {@link DefaultNoteListModel_9Test#createNote(String)}
	 * 
	 * First Note will contain the complete text ""text"". This note will be empty if the complete text is invalid.
	 * 
	 * Second Note contains the incomplete text ""incorrect"" if the complete text is invalid.
	 */
	public Iterable<AbstractNote> testCreation() {
		// Create first element
		final AbstractNote firstElement_1 = new DefaultNote(null, ""text"").addTo(this.delegate.firstElement());
		assertNotNull(firstElement_1);
				
		// Create second element
		final String incorrect = ""incorrect"";
		final AbstractNote secondElement_1 = new DefaultNote(firstElement_1, incorrect).addTo(this.delegate.firstElement());
		assertNotNull(secondElement_1);

		// Insert second element into list of note data
		assertTrue(this.delegate.insert(secondElement_1, this.firstElement()););
		
		return new AbstractNote[] { lastElement(), secondElement_1 };
	}
}
"
25c5a44b-fb7e-4842-bd78-9747f5b9a6f5,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java,50.15648174285889,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote lastElement() {
        return delegate.lastElement();
    }
}
","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {
/**
		* Unit test cases for the static lastElement() method.
		*/
/*
	public static final class LastNoteListModelUnitTestCase {
			private DefaultNoteListModel m_model = new DefaultNoteListModel();


		/**
		* Get the default note from the model.
		* @return the default note
		*/

		public AbstractNote lastElement() {
			return m_model.lastElement();
		}

		/**
		* Override the lastElement method.
		* @param lastElement The last element
		*/
		public void overrideLastElement(AbstractNote lastElement) {
			m_model.lastElement(lastElement);
		}
	}
*/

	@Test
    public void testLastElement() {
		assertNotNull(""The DefaultNoteListModel.lastElement() must return  non null"", m_delegate.lastElement());
		{
			assertNull(""The DefaultNoteListModel.get() must return  null"", m_delegate.get());
			{
				assertNull(""The DefaultNoteListModel.clear() must return  null"", m_delegate.clear());
				m_model.clear();
				assertNull(""The DefaultNoteListModel.get() must return  null"", m_delegate.get());
				List<AbstractNote> list = new LinkedList<AbstractNote>();
				List<AbstractNote> result = m_delegate.get();
				List<AbstractNote> list2 = result.toArray(new AbstractNote[]{});
				assertNotNull(""The ArrayList returned from get should not be null"", list2);
				assertEquals(""get length not equal to get size"", list.size(), list2.size());
			}
        assertFalse(""Non-empty list is not empty"", m_delegate.get().isEmpty());
		}


		m_delegate.clear();
        assertFalse(""Empty list is empty"", m_delegate.get().isEmpty());

        assertNotNull( ""The DefaultNoteListModel.get() must return  non null"", m_delegate.get() );



	}

	@Test
    public void testCopy() {
		List<AbstractNote> src = new LinkedList<AbstractNote>();
		List<AbstractNote> dst = m_delegate.copy(src, ""dest"");
		assertEquals(""the copy should be a new object"", m_delegate.get().size(), dst.size());

        assertEquals(""the list does not have the same elements as the original"", src.size(), dst.size());
    }

}"
96a53602-d056-420b-93a1-84eec4bc9e1b,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java,60.31628775596619,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }
}
","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {

    @Test
    public void testDefaultNoteListModel_removeElement() {
		// Test case:
		// 1.
		// The delegate is set up properly.
		// 2.
		// The listener is added.
		// This list of objects will be deleted by {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
	
    }
    
}"
a63a2d95-ae4e-4aad-9394-878cb413051f,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java,43.099854469299316,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }
}
","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {

    @Test
    void itShouldNotConstructWhenModelIsEmpty() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        AbstractNote[] anArray = null;
        model.addAll(new AbstractNote[]{
            new AbstractNote(""id"", ""1_2_3_4""),
            new AbstractNote(""id"", ""5_6_7_8""),
        });
        assertEquals(anArray, model.toArray());
        assertNull(model.getAll());
        assertNull(model.get(new Integer(0)));
        assertTrue(model.delete(new Integer(0)));
        assertFalse(model.contains(new Integer(0)));
        assertFalse(model.remove(new Integer(0)));
    }
    
    @Test
    void itShouldNotAddNullToIt() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        AbstractNote[] anArray = null;
        model.addAll(anArray.clone());
        assertEquals(anArray, model.toArray());
    }
    
    @Test
    void itShouldNotAddEmptyToIt() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        AbstractNote[] anArray = new AbstractNote[]{
            new AbstractNote(""id"", ""1_2_3_4""),
        };
        assertEquals(8, model.size());        
        model.addAll(anArray);
        assertEquals(8, model.size());
        assertTrue(model.delete(9));
        assertFalse(model.contains(9));
        assertTrue(model.add(""id"", ""1_2_3_5""));
        assertEquals(7, model.size());
        assertEquals(anArray.length + 1, model.size());
    }
    
    @Test
    void itShouldNotAddOtherModelException() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        model.addAll(new AbstractNote[]{new AbstractNote(""id"", ""1_2_3_4"")});
        
		// the error has been detected by calling add().
        Exception e = null;
        try {
            model.addAll(new AbstractNote[]{new AbstractNote(""id2"", ""4_1_2_3"")});
        } catch (Exception ee) {
            e = ee;
        }
        assertNotNull(e);
		// add also throws exception if the other model has been modified concurrently.
        model = new DefaultNoteListModel();
        try {
            model.addAll(new AbstractNote[]{new AbstractNote(""id2"", ""4_1_2_3"")});
        } catch (Exception ee) {
            e = ee;
        }
        assertNull(e);
        assertFalse(model.delete(new Integer(0)));
        assertTrue(model.delete(model.get(new Integer(1))));
        assertTrue(model.delete(model.get(new Integer(0))));
    }
    
    @Test
    void itShouldNotCreateNullObjectsWhenInitialize() {
        DefaultNoteListModel model = new DefaultNoteListModel();
        AbstractNote anArray[] = null;
        model.addAll(new MyArrayArray<>());
        assertEquals(anArray, model.toArray());
    }
    
    private final class MyArrayArray<T extends AbstractNote> extends AbstractNoteArray<T> {
        private boolean deleted = false;
        MyArrayArray(Collection<T> collection, List<T> items) {
            super(collection, items);
            assertFalse(deleted);
        }
        @Override
        public boolean remove(NoteListDataEvent e) {
            deleted = true;
            return super.remove(e);
        }
    }

    private final class MyNoteListDataListener implements NoteListDataListener<T> {
    
        public boolean isNoteListDataChanged() {
            return!deleted;
        }
        
        /**
         * It should be called when the event is about to be fired at {@link NoteListDataModel}
         * listener.
         * @param e An object representing a event that it is about to be fired.
         */
        @Override
        public void fireNoteListData(NoteListDataEvent e) {
            if (!isNoteListDataChanged()) {
                System.err.println(""An incorrect case occured!"");
            }
        }
    }
    
}
"
637751d1-b9f5-4fae-921f-fd51aeec83f6,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java,61.436262369155884,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }
}
","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {

    private DefaultNoteListModel _model;
	private DefaultNote _first;
	private DefaultNote _second;
	private int _index;

	/**
	 * DefaultNoteListModel_13Test constructor.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public DefaultNoteListModel_13Test() {
    }

	/**
	 * Creates new DefaultNoteListModel with the element for the test.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param index integer test index.
	 * <!-- assert index >=0 -->
	 * @param element defaultNote element to add.
	 * <!-- assert element!= null -->
	 * <!-- assert element instanceof Note -->
	 */
    public DefaultNoteListModel_13Test(int index, Object element) {
        _index = index;
        _model = new DefaultNoteListModel();
		_model.add(element);
		_model.add(null);
		_first = get(index);
		assertNull(null);
		_second = get(index);
		assertNull(_first);
		assertNull(_second);
	}

	///////////////////////////////////////////////////////
	// Interface <NoteListModel>
	///////////////////////////////////////////////////////

    /**
	 * @see JUnit4TestAdapter for test logic
	 */
	public static junit.framework.Test suite() {
        return new DefaultNoteListModel_13Test.Class1TestSuite();
	}

	/**
	 * Executes all preparations.
    @Test
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void testPreparation() {
    }

    // Implementation details
    private static class Class1TestSuite extends BaseTestCase {
        // Test of constructor.
		public Class1TestSuite() {
			super(""Test of class DefaultNoteListModel.<""+getFullClassName()+"">"");
		}
		// Implementation of abstract <String, NoteListModel>.
		protected void setUp() throws Exception{
			super.setUp();
        }

        // Implementation of setElement.
		public TestElement setElement(Object o) {
		    return _model = 	((DefaultNoteListModel)o);
		}
		public String getElementName() {
		    return TestElement.class.getName();
		}
        public String getClassName() {
            return getElementName();
        }
        protected Object getDefaultObject() {
            return _model;
        }
        protected Object[] createDefaultArray() {
            return new Object[] {};
        }
    }

}"
d465adaa-63e9-4e1a-a0f7-0c21bb0e4897,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java,60.664634704589844,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }
}
","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {

	

	/**
	 * Test method for {@link java.util.Collection#iterator()}.
	 */
	@Test
	public void testRemoveCollection() {
		DefaultNoteListModel _test = new DefaultNoteListModel();
		AbstractNote a1 = new AbstractNote(""a1"");
		_test.addItem(a1);
		_test.remove(itemIndex(a1));
		assertFalse(""remove(0) failed"", _test.remove(0));
		assertEmpty(""Removes empty collection"", _test.dataModel.getItems());
		assertEquals(""removed element does not match first item"", 0, _test.dataModel.indexOf(a1));
		Iterator _test1 = _test.dataModel.iterator();
		DefaultNote a2 = new DefaultNote(""a2"");
		_test1.next();
		_test1.remove(a1);
		assertTrue(""Removed invalid element after removal of first item"", a1!= _test1.next() && a2!= null);
//		assertContentElements(""Remove removed elements"", a2.get(), a1.get(), _test1);
		assertTrue(""Removed element does not match element before removal"", a1.equals(a2));
		assertEquals(""remove method does not work"", a1, _test.dataModel.get(1));
		Iterator _test12 = _test.dataModel.iterator();
		_test12.next();
		_test1.next();
		_test.remove(2);
		assertFalse(""Remove element failed after removal of previous element"", a1.equals(a2));
		assertEquals(""remove method does not work"", a1, _test.dataModel.get(2));
		assertEquals(""remove method works correctly"", a1, _test.dataModel.get(3));
		assertEquals(""remove method does not work"", a1, a2);
		assertEquals(""remove method works correctly"", a1, _test.dataModel.get(4));
		assertEquals(""remove method works correctly"", a1, a2);
		assertTrue(""Removed invalid but no item"", _test.remove(2) instanceof NoteListModel.Incompatible);

		Iterator _test2 = _test.dataModel.iterator();
		assertNotNull(""Removing a valid element"", _test2.next());
		_test2.next();
		_test2.remove(3);
		assertTrue(""Removed invalid element after removal of last item"", _test2.hasNext());
		assertEquals(""Removed element does not match last item"", 1, _test2.nextIndex());
		assertTrue(""Remove valid but no item after last element"", _test.remove(itemIndex(new DefaultAbstractNote(""a1"", 0))));

	}

     @Test
    public void testRemoveInvalid() {
    }

       @Test
    public void testRemoveInvalid1() {
    }

    @Test
    public void testRemoveInvalid2() {
    }

	/**
	 * Test method for {@link java.util.Collection#iterator()}.
	 */
	@Test
	public void testRemovleCollection() {
		DefaultNoteListModel _test = new DefaultNoteListModel();
		AbstractNote a1 = abc(new DefaultAbstractNote(""a1"", 0));
//		AbstractNote a1 = (AbstractNote)deletion.deletionCalls.get(1);
		_test.addItem(a1);
		_test.remove(itemIndex(a1));
		assertEquals(""collection length"", 2, _test.getSize());
		Collection _test1 = _test.dataModel.iterator();
		DefaultNote a2 = a1.getNext();
		assertSame(""Removed invalid element after removal"", a1, a2);
//		assertContentElements(""Removed elements"", a2.get(), a1.get(), _test1);
		assertEquals(""removed first element"", ab_test, _test1.next());
        assertEquals(""removed first element"", a2, _test1.next());
		assertEquals(""removed first element"", ab_test, _test1.next());
		assertTrue(""Removed invalid element after removal"", a1.equals(a2));
		assertEquals(""removed first element"", ab_test, _test1.next());
		_test.remove(a2);
		assertFalse(""Removed invalid element after removal"", a1.equals(a2));
		assertEquals(""removed first element"", a1, b_test);
		assertTrue(""Removed invalid element after removal"", a2.equals(a1));
		assertSame(""Remove first element"", a1, a2);
		assertTrue(""Remove first element"", a2.equals(a1));
		assertEquals(""remove method does not work"", 0, _test.remove(8));
		assertTrue(""Removed invalid element for removal"", a1.equals(a2));
		assertSame(""Removed invalid element"", a2, a1);
		assertEquals(""remove second element"", a1, b_test);
		assertEquals(""remove second element"", a2, b_test);
		assertTrue(""Removed invalid element after removal"", a1.equals(a2));
		assertEquals(""remove method does not work"", 0, _test.remove(9));
		assertTrue(""Removed invalid element for removal"", a1.equals(a2));
		
		
	}
}
"
3387f8df-7e73-4c92-bc5d-62b6e8eb174b,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager.java,56.20572638511658,stop,"// ConfigurationManager.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;

/**
 * Manages the configuration for Inspirento.<br>
 * This manager uses XML format to store information.
 * The configuration file is, by default, saved in the
 * ""config"" directory and named ""config.xml"". Clearly,
 * this class should be a singleton, so we use
 * {@link #getInstance()} to get an instance and call
 * other instance methods to get the settings needed
 * by Inspirento, such as ""window.size"", ""window.location"",
 * and etc.<br>
 * The program first tries to get the configuration from
 * this <code>ConfigurationManager</code>. If it fails to
 * get any key, it uses the default settings presetted in
 * the protected <code>default</code> field.
 *
 * @author Allen Chue
 */
public class ConfigurationManager extends Properties {

    @Override
    public synchronized String getProperty(String key) {
        String value = xmlIO.getRoot().getElement(Constants.PROJECT_NAME + ""."" + getPath(key)[0]).getAttribute(getPath(key)[1]);
        if (value == null) {
            //Perhaps some element is lost in the file
            value = defaults.getProperty(key);
            //null value has no side effect
            setProperty(key, value);
            new Thread() {

                @Override
                public void run() {
                    writeBack();
                }
            }.start();
        }
        return value;
    }
}
","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {
private ConfigurationManager manager;
		private String newPath;
		private String newPath2;
		private String fileName = ""config.json"";
		private String configPath = ""config/"";

		/**
		* Creates an instance of {@link ConfigurationManagerTest}.
		* This constructor is static, so this class implements the test cases of
		* this test class.<br>
		* To be used by the unit tests.<br><br>
		* @see org.jmock.common.Mock#someMethod()
		*/
		public ConfigurationManagerTest() {
			try {
				InputStream in = this.getClass().getResourceAsStream(""/"" + fileName);
				this.manager = new ConfigurationManager(in);
			} catch (IOException e) {
				fail(""ConfigurationManagerTest.noTestCaseException"");
			}
		}

		@Test
		public void testCreation() {
			//Test the properties that can be set to any key
			assertEquals(File.separator, File.pathSeparator);
			assertEquals(this.configPath, this.manager.getPath(ConfigurationManager.PROP_CONFIG_PATH));
			String path = this.configPath + ConfigurationManager.PROP_CONFIG_PATH;

			assertEquals(String.valueOf(this.manager.getProperty(ConfigurationManager.PROP_SRC)), path);
			//This will assert that the properties that will be saved to the file
			assertEquals(String.valueOf(this.newPath), path);
			//The final test
			assertNotSame(String.valueOf(this.newPath), this.manager.getProperty(ConfigurationManager.PROP_FILEPATH));
			assertNotSame(this.newPath, path);
		}

		public String getFileName() {
			return this.fileName;
		}

		public String getPath() {
			return this.newPath;
		}

		public String getNewPath() {
			return this.newPath2;
		}

		public void setNewPath(String newPath) {
			this.newPath2 = newPath;
		}

		public File getFile() {
			return this.file;
		}

		public void setFile(File file) throws IOException {
			this.file = file;
		}

		public File getFile2() {
			return this.file2;
		}

		public void setFile2(File file2) {
			this.file2 = file2;
		}

	}
"
e32d1847-99a2-4620-81c1-5ef28fc3dbb6,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java,54.37682914733887,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }
}
","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public Object addAttribute(String name, String value) {
        if ((value!= null) && (name!= null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }
}

// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {
		
    @java.lang.SuppressWarnings(""all"")
    private static final org.junit.jupiter.api.Assertions ON =  //
            new org.junit.jupiter.api.Assertions();
	
    @Test
    public void addAttribute()
        throws Exception
    {
        // TODO write a test that will check for an uninitialized element
        // in a case other than an Attribute has been added to the
        // Observable (probably the same Attribute).
        // TODO write a test that will create multiple new
        // Attributers (but only one)
    }

    /**
    * Test method for {@link com.allen.xml.XmlElement#createXml()}.
    * Check that an XML document can be created and loaded correctly.
    */
    @Test
    public void getXml() throws Exception
    {
/*
        // TODO write a test that will create and load a new
        // Document.
*/
        System.out.println(""Test Document: "" +
            this.getXml(""XmlDocument""));
    }

    /**
    * Test method for {@link com.allen.xml.XmlElement#createXmlFragments()}.
    * Check that an XML document can be created and loaded correctly.
    */
    @Test
    public void getXmlFragments() throws Exception
    {
        System.out.println(""Testing an XML fragment: "" + this.getXml(""XML fragment""));
    }

    @Test
    public void testGetAttribute()
        throws Exception { /*
        try {
            XmlElement xmlElement = XML.newXmlElement(""XmlElement"");
            assertNotNull(xmlElement);
        }
        catch (XmlCreationException ex
/*
            ex.addAction(""foo"")
        */
        ;
    }

}

"
a458f658-813d-42ef-9acc-a3c0e86f84af,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_1Test.java,48.90973949432373,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }
}
","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName!= null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }
}

// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {
		public XmlElement_1Test() {
		}
	public XmlElement getElement() {
		return (XmlElement) this;
	}
	public static final XmlElement_1Test INSTANCE = new XmlElement_1Test();
	}

"
db39b407-80a5-4fa2-a0ce-6b77041b1def,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_2Test.java,50.28230166435242,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }
}
","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.')!= -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name)!= null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }
}

// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {
		// @Test (expected = IllegalArgumentException.class)
		// This is not supposed to happen in the future.
	public void whenAddingSubElementThanXmlElementExisits() {
	}

	}
"
5e4a01c5-5405-4a80-8120-ec6e1303bc4b,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_3Test.java,54.13096237182617,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }
}
","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {
private XmlElement_1Test testCase1;
		private Hashtable table;

		public void initTarekPasap() throws Exception {
			// create table for storing attribute values:
			table = new Hashtable();
			// attributes:
			table.put(""id"",""test1"");
			table.put(""data"",""data1"");
			// elements:
			testCase1 = new XmlElement_1Test();
			testCase1.setData(""data1"");
			testCase1.addSubElement(""a"", ""a"" );
			testCase1.addSubElement(""b"", ""b"" );
		}

		@Test
		public void testXmlElementElementReflection() throws Exception {
				testCase1.run();
		}

		protected class XmlElement_1Test extends Observable {
				public void run() throws Exception {
					this.unsubscribe();

					new Vector().removeAllElements();
                    // Create new XmlElement object.
                    String id = ""id"";
                    String data = ""data"";

					// Subscription to new events.
					testCase1.subscribe(this);

                    System.out.print( ""Unsubscribe on ID: "" + id);
					testCase1.unsubscribe(id);

					// Check the content.
					if(table.get(id) instanceof XmlElement) {
						new XmlElement(id, data).toString();
					} else {
						System.out.println(""XmlElement not found"");
					}
				}

		}
}

// ======================================================================================
"
80fedb3d-b3c4-4733-beb7-6e8bbb369bc9,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_0Test.java,42.25523090362549,length,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    public boolean load(InputStream input) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(input, this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }
}
","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {

	@Test
	void test() {
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream(new File( ""/test.xml"") );
			XmlIO.load(null);
			// InputStream inputStream2 = new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml""))).readLine();
		} catch (IOException ex) {
			LOG.severe( ""Test failed: "" + ex.getMessage() );
			ex.printStackTrace();
            return;
        }
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load("""");
			// InputStream inputStream2 = new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" ))).readLine();
        } catch (IOException ex) {
            LOG.severe(""Test failed: "" + ex.getMessage());
            return;
        }
        
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load( (String)null );
			// InputStream inputStream2 = new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" )))
				
		} catch (IOException ex) {
			LOG.severe(""Test failed: "" + ex.getMessage());
			ex.printStackTrace();
            return;
        }
		try {
			// XML file loading...
            // InputStream inputStream=new FileInputStream( ""/test.xml"" );
            XmlIO.load( ""/test.xml"" );
			//InputStream inputStream2=new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" ))).readLine();
        } catch (IOException ex) {
            LOG.severe(""Test failed: "" + ex.getMessage());
            return;
        }
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load(""/test.xml"" );
			// InputStream inputStream2=new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" )))
				
        } catch (IOException ex) {
            LOG.severe(""Test failed: "" + ex.getMessage());
            return;
        }
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load(""/test.xml"" );
			// InputStream inputStream2=new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" )))
				
        } catch (IOException ex) {
            LOG.severe(""Test failed: "" + ex.getMessage());
            return;
        }
		
		
		try {
			// XML file loading...
            // InputStream inputStream = new StAXInputStream( new FileInputStream( ""/test.xml"" ) );
			XmlIO.load(null, (String)null);
			//InputStream inputStream2 = new BufferedReader(new InputStreamReader( new StAXInputStream( new FileInputStream( ""/test.xml"" ) ) )).readLine();
        } catch (IOException ex) {
            LOG.severe( ""Test failed: "" + ex.getMessage() );
            return;
        }
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load(null);
			//InputStream inputStream2 = new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" ))).readLine();
        } catch (IOException ex) {
            LOG.severe(""Test failed: "" + ex.getMessage());
            return;
        }
        
		try {
			// XML file loading...
            // InputStream inputStream = new FileInputStream( ""/test.xml"" );
            XmlIO.load( null, ""/test.xml"" );
			//InputStream inputStream2 = new BufferedReader(new InputStreamReader( new FileInputStream( ""/test.xml"" ))).readLine();
        } catch (IOException ex) {
            LOG.severe( ""Test failed: "" + ex.getMessage() );
            return;
        }
		try {
			// XML file loading...
            "
9ee52ea5-cd8a-41fd-92dd-65ec2dac2b37,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java,42.248300075531006,stop,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    public boolean load(URL inputURL) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(inputURL.toString(), this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }
}
","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {
private static final Logger LOG = Logger.getLogger(""com.allenstudio.ir.util.XmlIO_1"");
		
		/**
		* Constructor.
		*/
		public XmlIO_1Test() {
		}
	
		/**
		* Test loading with an input stream to test {@link XmlIO#load(URL)} behaviour.
		*/
        @Test
     void testLoadingWithURL() throws IOException {
     	   load( new URL( ""Test"" ) );
     }
   	   
        /**
		* Test loading a file.
		*/
        @Test
     void testLoading() throws IOException {
     	   load( new File(""Test"" ) );
     }
   	   
        /**
		* Test parsing XML with an input stream to test {@link XmlReader#read(InputStream)}.
		*/
        @Test
     void testReading() throws IOException {
         FileInputStream fis = new FileInputStream( ""Test"" );
         InputStreamReader isr = new InputStreamReader(fis);
         XMLReader xr = XMLReaderFactory.createXMLReader();
         StreamPusher s = new StreamPusher(sink(xr.getXMLReader())).execute();
         s.addPusher(isr);
         try {
     	    xr.parse(new InputSource( isr));
     	} catch (SAXException e) {
     	    System.out.println(""SAXException"");
     	    e.printStackTrace();
     	} catch (ParserConfigurationException pce) {
     	    Logger.getLogger(XmlIO_1Test.class.getName()).log(pce.getMessage());
     	} catch (IOException ioe) {
     	    Logger.getLogger(XmlIO_1Test.class.getName()).log(ioe.getMessage());
     	}
     }
   	   
		/**
		* Test parsing XML with a string.
		*/
        @Test
     void testXMLString() throws IOException {
         load( ""Test"" );
     }
   	   
        /**
		* Test parsing XML with a string.
		*/
        @Test
     void testXMLStringWithEncoding() throws IOException {
         load( ""Test"", ""UTF-8"" );
     }
   	   
        /**
		* Test parsing XML with input stream to test {@link XmlReader#readAll(InputStream)}.
		*/
        @Test
     void testReadingAll() throws IOException {
         FileInputStream fis = new FileInputStream( ""Test"" );
         InputStreamReader isr = new InputStreamReader(fis);
         XMLReader xr = XMLReaderFactory.createXMLReader();
         StreamPusher s = new StreamPusher(sink(xr.getXMLReader())).execute();
         s.addPusher(isr);
         try {
     	    xr.parse(new InputSource( isr));
     	} catch (SAXException e) {
     	    System.out.println(""SAXException"");
     	    e.printStackTrace();
     	} catch (ParserConfigurationException pce) {
     	    Logger.getLogger(XmlIO_1Test.class.getName()).log(pce.getMessage());
     	} catch (IOException ioe) {
     	    Logger.getLogger(XmlIO_1Test.class.getName()).log(ioe.getMessage());
     	}
     }
   	   
        /**
		* Test reading a XML tree.
		*/
        @Test
     void xmltree() throws IOException {
         load( ""Test"" );
     }
   	   
        /**
		* Test saving a XML tree.
		*/
        @Test
     void xmltreeSave() throws IOException {
         save( new XmlElement( ""Test"" ));
     }
   	   
        /**
		* Test reading a new XML tree.
		*/
        @Test
     void treeCreate() throws IOException {
         save( new XmlElement( ""Test"" ));
     }
}
"
f4811672-53b4-4c21-857e-015be3312c2a,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java,37.225048303604126,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    public static String[] tokenize(String input) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }
}
","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {
/* Test String tokenize */
	@Test
	void tokenizeTest(){
		System.out.println(""tokenizeTest"");

		String[] cmds = InspirentoUtilities.tokenize(""A-B-C-D-E-F-G-H!"");
		assertArrayEquals(cmds,""A B C D E F G H!"");

		cmds = InspirentoUtilities.tokenize(""A--B--C--D--E--F--G--H!"");
		assertArrayEquals(cmds,""A--B--C--D--E--F--G--H!"");
	}
}
"
e8b58e32-472d-445c-a09b-e3769ad398ce,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_1Test.java,60.771751165390015,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    public static String escapeText(String str) {
        StringBuffer buffer = new StringBuffer(str);
        stringReplaceAll(buffer, '&', ""&amp;"");
        stringReplaceAll(buffer, '<', ""&lt;"");
        stringReplaceAll(buffer, '>', ""&gt;"");
        stringReplaceAll(buffer, '""', ""&quot;"");
        stringReplaceAll(buffer, '\'', ""&apos;"");
        return buffer.toString();
    }
}
","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {

	
    /* Test for {@link InspirentoUtilities#escapeText(String)}.
     * 
     * @see InspirentoUtilities#escapeText(String)
    */

    @Test
    public void testHexEncode() {
       assertEquals("""",InsightUtilities.hexEncode(""""));
       assertEquals("""",InsightUtilities.hexEncode(""a""));
       assertEquals(""a"",InsightUtilities.hexEncode(""AB""));
       assertEquals("""",InsightUtilities.hexEncode(""Ab""));
       assertEquals(""AAAAaAb"",InsightUtilities.hexEncode(""AAABAAAb""));
        
        assertEquals(""CAABC"",InsightUtilities.hexEncode(""CAABC""));
        
        assertEquals(""AABCCAABC"",InsightUtilities.hexEncode(""AABCCAABC""));
               
       assertEquals(""AaBcC"",InsightUtilities.hexEncode(""AaBcC""));
           
       assertEquals(""AaBcC"",InsightUtilities.hexEncode(""aBc""));
            
       assertEquals(""BAAABIABI"",InsightUtilities.hexEncode(""BAAABIABI""));
            
       assertEquals(""BAAABIABI"",InsightUtilities.hexEncode(""aBBBAAaAB""));
            
       assertEquals(""ABAAACAAACAAA"",InsightUtilities.hexEncode(""ABAAACAAACAAA""));

    
    }

    private static void stringReplaceAll(StringBuffer buffer, 
        Object startChar, String replacementChar) {
        Character startCharChar = new Character((Char)startChar);
        buffer.replace(buffer.length()-1, buffer.length(), 
            replacementChar+replacementCharChars(startCharChar,
                startChar));
    }

    private static char replacementCharChars(Character startChar,
        Character endChar) {
        char res = null;
        if (startChar!= null ) {
            res = startChar.getValue();
        }
        if (endChar!= null ) {
            res = endChar.getValue();
        }
        return res;
    }
    
    @Test
    public void testChar() {
        Vector<Character> charVector = new Vector<Character>(2);
        charVector.setElementAt(""abcd"", 13);
        charVector.setElementAt(""AB"", 13);
        Vector<Character> charVector2 = new Vector<Character>(2);
        charVector2.setElementAt(""d"", 13);
        charVector2.setElementAt(""F"", 13);
        charVector.addAll(charVector2);
        charVector.replace(""d"", ""e"");
        assertEquals(5, charVector.size());
        assertEquals(""ce"",charVector.getElementAt(0));
        assertEquals(""f"",charVector.getElementAt(1));
        
        charVector2.setElementAt(""de"", 13);
        assertEquals(13,charVector2.getElementAt(0));
        assertEquals(13,  charVector2.getElementAt(1));
        
        charVector2.replace(""de"", ""d"");
        assertEquals(13,charVector2.getElementAt(0));
        assertEquals(13,  charVector2.getElementAt(1));
        //System.out.println(charVector.toString()+"" ""+charVector2.toString());
    }
}"
4181f1c1-1344-4d8e-8960-8df79102f9ee,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java,61.43334722518921,length,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {
        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == token) {
                //++i?
                source = source.replace(i, ++i, replacement);
            }
        }
        return source;
    }
}
","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {

	/**
	* It converts a string {@link String}.
	* Tested in StringUtils.java with string.
	* @param input the test {@link String} to convert.
	* @param delim the delimiter character.
	* @return the converted {@link String}.
	*/
        private static String toString(String input, char delim) {
        return stringReplaceAll(input, delim, ""\"""")
           .replaceAll(""\"""", delim);
    }
	
	/**
	* Test constructor for {@link InspirentoUtilities_2Test}.
	* 1) It takes a string of text to be converted and returns a vector holding it.
	* 2) It retrieves the first index of a character in the string that matches {@link String#count(String)} and returns the index.
	* 3) It retrieves the index of a character in the string that matches {@link String#indexOf(String)} and returns the index.
	* 4) It has to convert the string to an array of characters.
	* It returns a {@link ArrayUtilTest}.
	*/
    @Test 
    public void text_to_vector() {
                Vector<Character> test_String = new Vector<Character>();
        test_String.add((Character)toString(""text"", '\""'));
        test_String.add((Character)toString(""test"", '\\')); 
        test_String.add((Character)toString(""test2"", '\\'));

        Vector<Integer> test_int = new Vector<Integer>();
        int index_int = test_String.indexOf(toString(""test"", '\\'));
        if (index_int!= -1) {
            test_int.add(index_int);
        }
        index_int = test_String.indexOf(toString(""test2"", '\\'));
        if (index_int!= -1) {
            test_int.add(index_int);
        }

        ArrayUtilTest test = new ArrayUtilTest(test_String, test_int);

        /* If the test input is a string, then this test was successful */
        assertEquals(1, test.compareTo(new StringBuilder(toString(""text"", '\""'))));

        /* If the test input is not a string, assert that this test failed */
        assertFalse(toString(""text"", '""').equals(toString(""text"", '""', '\""')));

    }
}

/**
* Unit test class for the {@link InspirentoUtilities_2Test} class which performs the test {@link #text_to_vector()} and {@link #int_to_string()} separately.
* We need the second unit test test after the second one {@link ArrayUtilTest} which performs the test {@link #text_to_vector()} and {@link #int_to_string()}.
*/
class ArrayUtilTest {
    private Vector<Character> input;
    private StringBuilder stringBuilder;
    private Vector<Integer> intVector;
    private int count = 0;
    private int index = 0;

    /**
     * It creates a {@link ArrayUtilTest} and initializes it.
     */
    public ArrayUtilTest(Vector<Character> input, Vector<Integer> intVector) {
    this.input = input;
    this.intVector = intVector; // The test vector is not a vector object!
    }

    /**
     * It converts the test vector to string and stores it in the test class.
     * Tested in {@link InspirentoUtilities_2Test#text_to_vector()}.
	*/
    @Test
    public void toString() {
    for (int i = 0; i < count; i++) {
        stringBuilder.append((Character)input.get(i).charAt(0));
    }
    
    for (int i = 0; i < count; i++) {
    stringBuilder.append(input.get(i).charAt(stringBuilder.length()));
    }

    String to_String = stringBuilder.toString();
    count = to_String.length();    
    index = 0;
    for (int i = 0; i < count; i++) {
    if (input.get(i).charAt(index)!= stringBuilder.charAt(i)) {
    return;
    }
    }
    intVector.add(index);
    StringBuilder stringBuilder_add = new StringBuilder(stringBuilder);
    for (int i = 0; i < count; i++) {
    stringBuilder_add.append((Character)input.get(i).charAt(stringBuilder.length() - 1));
    }
    stringBuilder = stringBuilder_add;
    
    count = stringBuilder.length();
        
    }

    /**
     * It checks if it is good to perform the test afterwards.
     * The count of the test vector is set as a variable.
     * The output is tested in {@link #int_to_string()}.
     */
    @Test
    public void compareTo() {
    count = 0;
    StringBuilder stringBuilder_add = new StringBuilder(stringBuilder);

    for (int i=0; i < count; i++) {
    if (stringBuilder_add.charAt(i)!= input.get(i).charAt(stringBuilder.length())) {
        return;
    }

    }
    boolean ok = true;
    StringBuilder stringBuilder = new StringBuilder();

    for (int i=0; i < count-1; i++) {
    if (input.get(i).charAt(stringBuilder.length())!= stringBuilder.charAt(stringBuilder.length() - 1)) {
        ok = false;
    }
    }
    
    if (ok) {
                ok = count!= 0;
    }
    
    if (ok) {
                   System.err.println(count);
                   ok = true;
    }
    stringBuilder_add.append(""\"""");
    stringBuilder = new StringBuilder();
    for (int i = 0; i < count - 1; i++) {
    stringBuilder_add.append((Character)input.get(i).charAt(stringBuilder.length()));
    stringBuilder = new StringBuilder();
    }
    while(!stringBuilder_add.toString().endsWith(""\"""")) {
        if (count - input.get(count).charAt(stringBuilder.length()) > 0) {
            break;
        }
        stringBuilder.append((Character)input.get(count).charAt(stringBuilder.length() - 1));
    }
    stringBuilder_add.append(stringBuilder.toString());
    
    assertEquals(intVector.get(index), stringBuilder.length());
    
    if (ok) {
           ok = intVector.get(count-1) == stringBuilder.length();
           assertEquals(ok, true);
    }
    
    stringBuilder.replace(0, stringBuffer.length(), stringBuilder.toString());
    count=0;
    for (int i = 0; i < count; i++) {
            if (stringBuilder.charAt(i)!= input.get(i).charAt(stringBuilder.length())) {
            return;
            }
"
