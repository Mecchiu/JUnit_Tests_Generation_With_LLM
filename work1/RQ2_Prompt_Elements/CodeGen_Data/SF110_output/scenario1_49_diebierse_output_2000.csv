ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
14278bbf-b8b2-43cf-a7e9-af9dba16f011,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_0Test.java,39.78580403327942,stop,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public int recalculate() {
        //Calculate new average values
        totalSold += lastSold;
        averageAmount = (float) totalSold / model.getIteration();
        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();
        if (totalSold > 0) {
            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;
        }
        int newPrice;
        if (directPrice != 0) {
            // If a direct price was set, use it
            newPrice = directPrice;
            directPrice = 0;
        } else if (keepPrice) {
            // Keep the price
            newPrice = currentPrice;
        } else {
            // Calculate the new price
            double diffSold = lastSold - targetAmount;
            double factor = diffSold / deltaAmount;
            double change = factor * maxStep;
            int priceSteps = model.getSettings().getPriceSteps();
            double rest = Math.floor(Math.abs(change % priceSteps));
            double full = Math.floor(Math.abs(change / priceSteps));
            int priceChange = 0;
            if (rest >= priceSteps / 2) {
                priceChange = priceSteps;
            }
            priceChange += full * priceSteps;
            // Check that the change of the price is not more than the max step
            if (priceChange > maxStep) {
                priceChange = maxStep;
            }
            if (model.getSettings().isStandardLogic()) {
                if (factor >= 0) {
                    newPrice = currentPrice + priceChange;
                } else {
                    newPrice = currentPrice - priceChange;
                }
            } else {
                // Inverse logic
                if (factor >= 0) {
                    newPrice = currentPrice - priceChange;
                } else {
                    newPrice = currentPrice + priceChange;
                }
            }
        }
        // Check that the new price is not above the max price or below the min price
        if (newPrice > maxPrice) {
            newPrice = maxPrice;
        } else if (newPrice < minPrice) {
            newPrice = minPrice;
        }
        // Calculate the trend
        if (newPrice > currentPrice) {
            trend = 1;
        } else if (newPrice < currentPrice) {
            trend = -1;
        } else {
            trend = 0;
        }
        currentPrice = newPrice;
        //Debug output
        model.getLog().debug(""Recalculating drink: "" + name + "" for iteration: "" + model.getIteration());
        model.getLog().debug(""Last sold: "" + lastSold);
        model.getLog().debug(""Total sold:"" + totalSold);
        model.getLog().debug(""Average sold: "" + averageAmount);
        model.getLog().debug(""Average price: "" + averagePrice);
        model.getLog().debug(""Average sold price: "" + averageSoldPrice);
        model.getLog().debug(""New price: "" + currentPrice);
        // Reset values for the next iteration
        lastSold = 0;
        return currentPrice;
    }
}
","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {","// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {
// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public int recalculate() {
        //Calculate new average values
        totalSold += lastSold;
        averageAmount = (float) totalSold / model.getIteration();
        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();
        if (totalSold > 0) {
            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;
        }
        int newPrice;
        if (directPrice!= 0) {
            // If a direct price was set, use it
            newPrice = directPrice;
            directPrice = 0;
        } else if (keepPrice) {
            // Keep the price
            newPrice = currentPrice;
        } else {
            // Calculate the new price
            double diffSold = lastSold - targetAmount;
            double factor = diffSold / deltaAmount;
            double change = factor * maxStep;
            int priceSteps = model.getSettings().getPriceSteps();
            double rest = Math.floor(Math.abs(change % priceSteps));
            double full = Math.floor(Math.abs(change / priceSteps));
            int priceChange = 0;
            if (rest >= priceSteps / 2) {
                priceChange = priceSteps;
            }
            priceChange += full * priceSteps;
            // Check that the change of the price is not more than the max step
            if (priceChange > maxStep) {
                priceChange = maxStep;
            }
            if (model.getSettings().isStandardLogic()) {
                if (factor >= 0) {
                    newPrice = currentPrice + priceChange;
                } else {
                    newPrice = currentPrice - priceChange;
                }
            } else {
                // Inverse logic
                if (factor >= 0) {
                    newPrice = currentPrice - priceChange;
                } else {
                    newPrice = currentPrice + priceChange;
                }
            }
        }
        // Check that the new price is not above the max price or below the min price
        if (newPrice > maxPrice) {
            newPrice = maxPrice;
        } else if (newPrice < minPrice) {
            newPrice = minPrice;
        }
        // Calculate the trend
        if (newPrice > currentPrice) {
            trend = 1;
        } else if (newPrice < currentPrice) {
            trend = -1;
        } else {
            trend = 0;
        }
        currentPrice = newPrice;
        //Debug output
        model.getLog().debug(""Recalculating drink: "" + name + "" for iteration: "" + model.getIteration());
        model.getLog().debug(""Last sold: "" + lastSold);
        model.getLog().debug(""Total sold:"" + totalSold);
        model.getLog().debug(""Average sold: "" + averageAmount);
        model.getLog().debug(""Average price: "" + averagePrice);
        model.getLog().debug(""Average sold price: "" + averageSoldPrice);
        model.getLog().debug(""New price: "" + currentPrice);
        // Reset values for the next iteration
        lastSold = 0;
        return currentPrice;
    }
}

// Drink_0Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#recalculate()} method.
*/
class Drink_0Test {
		public static void main(String[] argsA) {
//			myRunWrapMain(Args.class);
			System.exit(0);
	}

		public void myRunWrapMain(Class cl) {
                try {
                        new Drink();
                } catch (Exception e) {
                        e.printStackTrace();
                        assertTrue(""Expected no exceptions, but got: ""+e.getMessage(), false) ;
                        //fail (""Expected no exceptions, but got: ""+e.getMessage());
                    }
		}
}

class Args {
  	public static void main(String[] args) {
        new Drink_0Test().myRunWrapMain(new Class[] { Drink.class });
  	}
}"
6cf5ddc3-e7b7-4432-a445-78959f362882,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_1Test.java,44.190497159957886,length,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public File save() {
        if (!NEW_DRINK_NAME.equals(name)) {
            model.getLog().debug(""Save drink: "" + name);
            // Build JDOM document representing the settings
            Element root = new Element(""drink"");
            Element minPriceElem = new Element(""minPrice"");
            minPriceElem.setText(String.valueOf(minPrice));
            root.addContent(minPriceElem);
            Element maxPriceElem = new Element(""maxPrice"");
            maxPriceElem.setText(String.valueOf(maxPrice));
            root.addContent(maxPriceElem);
            Element startPriceElem = new Element(""startPrice"");
            startPriceElem.setText(String.valueOf(startPrice));
            root.addContent(startPriceElem);
            Element targetAmountElem = new Element(""targetAmount"");
            targetAmountElem.setText(String.valueOf(targetAmount));
            root.addContent(targetAmountElem);
            Element deltaAmountElem = new Element(""deltaAmount"");
            deltaAmountElem.setText(String.valueOf(deltaAmount));
            root.addContent(deltaAmountElem);
            Element maxStepElem = new Element(""maxStep"");
            maxStepElem.setText(String.valueOf(maxStep));
            root.addContent(maxStepElem);
            Element usedElem = new Element(""used"");
            usedElem.setText(String.valueOf(used));
            root.addContent(usedElem);
            Element keyElem = new Element(""key"");
            keyElem.setText(String.valueOf(key));
            root.addContent(keyElem);
            Document settingsDoc = new Document(root);
            // Save JDOM document to file system
            File folder = new File(DRINKS_FOLDER);
            File file = new File(DRINKS_FOLDER + name + "".xml"");
            try {
                if (!folder.exists()) {
                    folder.mkdirs();
                }
                model.getLog().debug(""File for Drink: "" + file.getAbsolutePath());
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                FileOutputStream fos = new FileOutputStream(file);
                XMLOutputter serializer = new XMLOutputter();
                serializer.output(settingsDoc, fos);
                fos.flush();
                fos.close();
            } catch (Exception e) {
                model.getLog().error(this, e);
            }
            return file;
        }
        return null;
    }
}
","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {","// Drink_1Test.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains one unit test case for the {@link Drink#save()} method.
*/
class Drink_1Test {

	/**
	* Test of save() method, of class Drink.
	*/
	@Test
    public void testSave() {
    	model.getLog().debug(""testSave()"");
        // Build JDOM document representing the settings
        Element root = new Element(""drink"");
        Element minPriceElem = new Element(""minPrice"");
        minPriceElem.setText(""0"");
        root.addContent(minPriceElem);
        Element maxPriceElem = new Element(""maxPrice"");
        maxPriceElem.setText(""0"");
        root.addContent(maxPriceElem);
        Element startPriceElem = new Element(""startPrice"");
        startPriceElem.setText(""0"");
        root.addContent(startPriceElem);
        Element targetAmountElem = new Element(""targetAmount"");
        targetAmountElem.setText(""0"");
        root.addContent(targetAmountElem);
        Element deltaAmountElem = new Element(""deltaAmount"");
        deltaAmountElem.setText(""0"");
        root.addContent(deltaAmountElem);
        Element maxStepElem = new Element(""maxStep"");
        maxStepElem.setText(""0"");
        root.addContent(maxStepElem);
        Element usedElem = new Element(""used"");
        usedElem.setText(""0"");
        root.addContent(usedElem);
        Element keyElem = new Element(""key"");
        keyElem.setText(""0"");
        root.addContent(keyElem);
        
        // Create folder
        File folder = new File(""Drinks/"" + name);
        if (!folder.exists()) {
            folder.mkdirs();
        }
	
        // Save JDOM document to file system
        File file = new File(Drinky.DRINKS_FOLDER + name + "".xml"");
        Document settingsDoc = new Document(root);
        try {
            FileWriter fos = new FileWriter(file);
            XMLOutputter serializer = new XMLOutputter();
            serializer.output(settingsDoc, fos);
            fos.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            fos.close();
            fos = null;
        } catch (Exception e) {
            model.getLog().error(this, e);
        }
		
  		/* Save drink to file: 
			 * drink.xml<br/><br/>Drinks.xml	*#>##	    <![CDATA[
		 * 
		 * 
	 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * ]]>##</br>

		 * New drink.xml:	
		 * 
		 * 		&lt;Drink id=""1"" name=""Tester"" startPrice=""0.01""&gt;
		 * 		&lt;MinPrice value=""0""/&gt;
		 * 		&lt;MaxPrice value=""0""/&gt;
		 * 		&lt;StartPrice value=""0""&gt;
		 * 			&lt;DeltaValue value=""0""/&gt;
		 * 			&lt;MaxStep&gt;0&lt;/DeltaValue&gt;
		 * 			&lt;TargetAmount value=""0""/&gt;
		 * 		&lt;/MinPrice&gt;
		 * 		&lt;/MaxPrice&gt;
		 * 		&lt;MaxStep value=""0""/&gt;
		 * 		&lt;StartPrice value=""0""/&gt;
		 * 		&lt;DeltaAmount value=""0""/&gt;
		 * 		&lt;TargetAmount value=""0""/&gt;
    		* </br>
  		 * 
		 * 
		 * 
		 * 
	 * 	  </br>
	 * </br>
	 * 
	 */
    		
        // Get the file
        File drinkXML = new File(""Drinks.xml"");
        File fileDrinkXML = new File(""Drinks.xml"");
        if (drinkXML.exists()) {
	        assertFalse(fileDrinkXML.delete());
        }
        
        Document docDrinkXML = null;
        try {
	        document = new Document(root);
            docDrinkXML = new SAXBuilder().build(new File(Drinks.DRINK_XML_SRC));
	        if (docDrinkXML.getRootElement().get"
465833eb-f803-4042-961b-ad5e842f3bad,/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Settings.java,46.867021799087524,length,"// Settings.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class Settings {

    public File save() {
        // Build JDOM document representing the settings
        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
        timeIntervalElem.setText(String.valueOf(timeInterval));
        settingsRoot.addContent(timeIntervalElem);
        Element priceStepsElem = new Element(DOM_PRICE_STEPS);
        priceStepsElem.setText(String.valueOf(priceSteps));
        settingsRoot.addContent(priceStepsElem);
        Element currencyElem = new Element(DOM_CURRENCY);
        currencyElem.setText(currency);
        settingsRoot.addContent(currencyElem);
        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
        backgroundElem.addContent(backgroundImagePath);
        settingsRoot.addContent(backgroundElem);
        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
        if (standardLogic) {
            standardLogicElem.addContent(DOM_YES);
        } else {
            standardLogicElem.addContent(DOM_NO);
        }
        settingsRoot.addContent(standardLogicElem);
        Element messageElem = new Element(DOM_MESSAGE);
        messageElem.addContent(message);
        settingsRoot.addContent(messageElem);
        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);
        messageSpeedElem.addContent(new Integer(messageSpeed).toString());
        settingsRoot.addContent(messageSpeedElem);
        Document settingsDoc = new Document(settingsRoot);
        // Save JDOM document to file system
        File file = new File(SETTINGS_FOLDER + ""settings.xml"");
        try {
            File folder = new File(SETTINGS_FOLDER);
            if (!folder.exists()) {
                folder.mkdirs();
            }
            if (file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileOutputStream fos = new FileOutputStream(file);
            XMLOutputter serializer = new XMLOutputter();
            serializer.output(settingsDoc, fos);
            fos.flush();
            fos.close();
        } catch (Exception e) {
            model.getLog().error(this, e);
        }
        return file;
    }
}
","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains one unit test case for the {@link Settings#save()} method.
*/
class SettingsTest {

	/**
	 * Creates a JDOM document representing the settings.
	 * @return Document representing the settings
	 */
    public Document setup() {
        final Element settings = new Element(DOM_SETTINGS);
        final Element msg = new Element(DOM_MESSAGE);
        final Element speed = new Element(DOM_MESSAGE_SPEED);
        final Element type = new Element(DOM_MODEL);	
        final Element value = new Element(DOM_VALUE);
        final Element valueType = new Element(DOM_VALUE_TYPE);
        final Element valueSize = new Element(DOM_VALUE_SIZE);
        final Element valueStr = new Element(DOM_VALUE_STR);
        final Element valueStrType = new Element(DOM_VALUE_STR_TYPE);
        final Element keyValue = new Element(DOM_KEY_VALUE);
        
        type.setText(DOM_VALUE_STR);
        value.setText(""My value is "" + DOM_VALUE_SIZES.get(DOM_VALUE_SIZE.getText()));
        value.addContent(DOM_VALUE_SIZES.get(DOM_VALUE_SIZE.getText()));
        valueStr.setText(DOM_VALUE_STR);
        valueStrType.setText(""Numberer"");
        keyValue.setText(""Numberer"");
        
        if (isYes(DOM_YES)) {
        	keyValue.addContent(DOM_KEY_VALUE_YES);
        } else if (isNo(DOM_YES)) {
        	keyValue.addContent(DOM_KEY_VALUE_NO);
        }        
        
        final Element root = new Element(DOM_EVENT_ROUTE);
        
        final Element eventRoot = new Element(DOM_EVENT_META_ROUTE);
        final Element eventRoot2 = new Element(DOM_EVENT_META_ROUTE2);
        final Element eventRoot3 = new Element(DOM_EVENT_META_ROUTE3);
        
        eventRoot2.setText(DOM_EVENT_META_ROUTE_PATH);
        eventRoot.addContent(eventRoot2);
        eventRoot3.setText(""Event root event"");
        
        final Element action = new Element(DOM_EVENT_TARGET);
        final Element action2 = new Element(DOM_EVENT_TARGET2);
        final Element action3 = new Element(DOM_EVENT_TARGET3);
        
        final Element msg2 = new Element(DOM_EVENT_TEXT);
        final Element msg3 = new Element(DOM_EVENT_TEXT);
        msg2.setText(""This is a message"");
        
        action2.setText(""Button action 2"");
        action2.addContent(DOM_EVENT_PATH_MESSAGE);
        action3.setText(""Button action"");
        action3.addContent(""It is a action"");

        final Element text1 = new Element(DOM_EVENT_TEXT);
        final Element text2 = new Element(DOM_EVENT_TEXT);
        final Element text3 = new Element(DOM_EVENT_TEXT);
        text1.setText(""The message text"");
        text2.setText(""This is the reply to the message"");
        text3.setText(""It is the reply message"");
        
        final Element root2 = new Element(DOM_EVENT_HAS_MESSAGE);
        final Element root3 = new Element(DOM_EVENT_HAS_MESSAGE2);
        final Element root4 = new Element(DOM_EVENT_HAS_MESSAGE3);
        
        final Element rootAction = new Element(DOM_EVENT_ROUTE_ACTION);
        final Element rootAction1 = new Element(DOM_EVENT_ROUTE_ACTION1);
        final Element rootAction2 = new Element(DOM_EVENT_ROUTE_ACTION2);
        final Element rootAction3 = new Element(DOM_EVENT_ROUTE_ACTION3);
        final Element rootAction4 = new Element(DOM_EVENT_ROUTE_ACTION4);
        
        final Element eventRootAction = new Element(DOM_EVENT_ROUTE_ACTION_SUBMITTED);
        final Element eventRootAction1 = new Element(DOM_EVENT_ROUTE_ACTION_PRE_SUBMITTED);
        final Element eventRootAction2 = new Element(DOM_EVENT_ROUTE_ACTION_SUBMITTED);
        final Element eventRootAction3 = new Element(DOM_EVENT_ROUTE_ACTION_SUBMITTED);
        final Element eventRootAction4 = new Element(DOM_EVENT_ROUTE_ACTION_RECEIVED);
        
        eventRootAction2.setText(DOM_ROUTE_ACTION_CANCEL);
        eventRootAction1.setText(DOM_ROUTE_ACTION_CANCEL);
        eventRootAction3.setText(DOM_ROUTE_ACTION_CANCEL);
            
        final Element elementList = new Element(DOM_DATA_TABLE"
