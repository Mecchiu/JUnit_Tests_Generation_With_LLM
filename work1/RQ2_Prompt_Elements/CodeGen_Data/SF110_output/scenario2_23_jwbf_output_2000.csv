ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
f32133a7-28f4-4785-b900-8bc8e507b278,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_0Test.java,60.56598401069641,length,"// JWBF.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    /**
     * @param clazz a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }
}
","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {

	static File getFile(String fileName) {
		return getFile(fileName, ""."");
	}

	static File getFile(String fileName, String ext) {
		File f = new File(getClass().getResource(fileName).toString());
		if (!f.isAbsolute()) {
			f = new File(ClassLoader.getSystemClassLoader().getResource(fileName).toString() + ext);
		}
		return f;
	}
	
	// JWBF_1Test.java
	private final static HashMap<String, String> manifestMap = new HashMap();
	
	@Test
	void testGetVersion() {
		
		Class<?> clazz = GetClass.class;
		String libName = ""libJwbf/1.1.1"";
		int majorNum = 1; 
		int minorNum = 1;
		String version = getVersion(clazz);
		
		assertNotNull(version);
		assertEquals(""1.1.1.2"", version);
		if (version.endsWith(""-1.0"")) { // Version is ""1.0.1.2-4""
			System.out.println(version);
		} else {
			System.out.println(version+"" is not current version"");
			assertFalse(""current version"", version.endsWith(""-1.0""));
		}
		
	}
	
	@Test
	void testGetFile() {
		
		assertNull(getFile(""file_does_not_exist""));
		assertEquals(""Test file."", getFile(""file""));
		assertEquals(""Test file.ext"", getFile(""file.ext""));
		assertNotNull(getFile(""JWBF.jar""));
		assertNotNull(getFile(""libJwbf/JWBF.jar""));
	}

	@Test
	/**
	 * Test getFiles(String) method.
	 */
	public void testGetFiles() {
		
		final File parentDir = new File(""/abc"");
		assertEquals(1, parentDir.listFiles(new TestFileFilter(""*.txt"")).length);
		assertEquals(0, parentDir.listFiles(new TestFileFilter(""*/*.txt"")).length);
		assertEquals(2, parentDir.listFiles(new TestFileFilter(""test/*.txt"")).length);
		assertEquals(1, parentDir.listFiles(new TestFileFilter(""test/test.txt"")).length);
		
    }
	
	/**
	 * Test reading Manifest File.
	 */
	@Test
	public void testManifestFile() {
		
		String fileName;
		try {
			fileName = getFile(""/abc.txt"");
		} catch (IOException ignore) {
			fileName = ""test.txt"";
		}
		Manifest m = null;
		try {
			m = getManifest(fileName);
		} catch (IOException ignore) {
			m = null;
		}
		assertNotNull(""Test ManifestFile not null"", m);
		assertNotNull(m.getValue(""Manifest-Version""));
		assertNotNull(m.getValue(""Manifest-Title""));
		assertNotNull(m.getValue(""Manifest-Name""));
		try {
			m.getValue(""Manifest-Version"");
			fail(""Test error - Manifest should have a 'Version' attribute in manifest-mf file"");
		} catch (IllegalArgumentException ignore) {}
		
	}
	
	final static FileFilter testFileFilter = new TestFileFilter(""test*.txt"");
	
	final static FileFilter testFileFilter2 = new TestFileFilter(""test/*.txt"");
	private final static FileFilter testFileFilter3 = new TestFileFilter(""test/test.txt"");
	private final static FileFilter testFileFilter4 = new TestFileFilter(""test/test2.txt"");
	private final static FileFilter testFileFilter5 = new TestFileFilter(""test/Test1.txt"");
	
	static File getFile(String fileName, String ext) {
		URL url = JWBF_0Test.class.getResource(fileName);
		return getFile(url, fileName, ext);
	}
	
	static File getFile(URL url, String fileName, String ext) {
			
		String path;
		try {
			path = url.toURI().toASCIIString();
		} catch (URISyntaxException ignore) {
			path = url.toString();
		}
		
		File subDir = null;
		try {
			subDir = File.createTempFile(""/abc"", ext);
		} catch (IOException ignore) {
			fail(""Test error - File.createTempFile(...) is not supported by JBTM"");
		}

		try {
			File out = File.createTempFile(""/"", ""_""+path.replace('\\','/')+""."" + (ext));
			out.deleteOnExit();
			
			JarOutputStream jarOutput = new JarOutputStream(out);
			JarEntry entry = new JarEntry(path+"".""+ext);
			jarOutput.putNextEntry(entry);
			
			jarOutput.closeEntry();
			final Enumeration<JarEntry> classes = new Manifest().getEntries(path);
			if (classes.hasMoreElements()) {
				classes.nextElement().openProperties();
			} else {
				while (!classes.hasMoreElements()) {
					classes = getManifest().getEntries(path);
				}
			}
			while (classes.hasMoreElements()) {
				classes.nextElement();
				jarOutput.putNextEntry(classes.nextElement());
				jarOutput.closeEntry();
			}

			JarFile jarFile = new JarFile(subDir);
			Manifest manifest = jarFile.getManifest();
			File classFile = getClassFile(manifest);
			String name1 = fileName;
			String name2 = fileName;
			String name3 = fileName;
			Map<String,String> map2 = new HashMap<String,String>();
			map2.put(""filename"", name1);
			map2.put(""mf"", name1);
			map2.put(""filename"", name2);
			map2.put(""mf"", name2);
			map2.put(""filename"", name3);
			map2.put(""mf"", name3);
			manifest.putEntries(""Manifest-Version"", map2);
			jarFile.close();
			
		} catch (IOException e) {
			fail(""failed to read "" + fileName + "":\n"" + e);
		}
		return subDir;
	}"
b460c99f-dc05-4d19-aed0-42d03a383c99,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_1Test.java,58.706414461135864,length,"// JWBF.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    /**
     * @param clazz a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }
}
","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {
/**
		* Main method.
		* It runs the tests at {@link #run()} and checks if the execution of all tests is successful.<br>
		* It prints the test result to Stderr and also the class and the actual version.
		* @throws java.io.IOException thrown if something goes wrong with the JWBF
		*/
		@Test
		public void run() throws Exception {
			ClassLoader classPathClassLoader = new ClassPathClassLoader(classpath);
			JWBF.runJar(classPathClassLoader, ""net.sourceforge.jwbf"", getClass().getName(), ""net.sourceforge.jwbf.JWBF.java"");
		}

//	@Test
	public void runJar(ClassLoader classPathClassLoader, String moduleName, String moduleVersion, String jarName) throws Exception {
		Map<String, Object> parameters = new HashMap<String, Object>();
		// Get the module Manifest
		Manifest manifest = getManifest(moduleName);
		// Get the module Version
		String moduleVersionString = manifest.getMainAttributes().getValue(""Module-Version"");
		assertNotNull(""Could not get Module-Version for Module "" + moduleName, moduleVersionString);
		// Find the Module jar name
		String jarFileName = null;
		File manifestFile = newFile(manifest, jarName);
		try {
			jarFileName = manifestFile.getName();
			JarFile jarFile = new JarFile(manifestFile);
			for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) {
				JarEntry jarEntry = entries.nextElement();
				String entryName = jarEntry.getName();
				if (entryName.equals(jarName)) {
					File jarEntryFile = newFile(jarFile,
							jarEntryName = jarEntry.getName());
					JarEntry jarEntryJar = new JarEntry(jarEntryName);
					manifestFile.copy(jarEntryFile, jarEntryJar);
					while (jarEntryJar.getName().startsWith(""META-INF"")) {
						jarEntryJar = jarEntryJar.next;
					}
					if (jarEntryJar.getName().endsWith(MANIFEST_EXTENSION)) {
						File jarEntryFile2 = newFile(
								jarFile,
								jarEntryJar.getName()
								+ VERSION_JAR_SUFFIX);
						manifestFile.copy(jarEntryFile2, jarEntryFile);
						jarFile = new JarFile(jarEntryFile2);
						JarEntry jarEntryJarFile = jarEntryJar.getNextJarEntry();
						entries = jarEntryJar.entries();
						while (entries.hasMoreElements()) {
							JarEntry jarEntry = entries.nextElement();
							if (jarEntryJar.getName().endsWith(jarEntry.getName())) {
								File jarEntryFile2 = newFile(jarFile,
										jarEntryName = jarEntry.getName());
								jarFile.getInputStream(jarEntryFile2);
								jarEntryJarFile = jarEntry;
								entries = jarEntry.entries();
							} else {
								entries = null;
							}
						}
					} else {
						entries = null;
					}
					// Create the new JarEntry with the correct name and file
					jarFile.addJarEntry(jarEntry);
				}
			}
		} finally {
			jarFile = null;
			manifestFile.delete();
		}
		// check part id
		assertNotNull(""Couldn't get the part-id"", getPartId(moduleName));
		assertNotNull(""Couldn't find the manifest"", manifest);
		assertTrue(""could not get the jar files"", jarFile!= null);
		// Find the part jar and read all the information from it
		JarEntry manifestEntry = manifest.getEntries().nextElement();
		File manifestFile2 = newFile(jarFile, manifestEntry.getName());
		JarFile jarFile2 = null;
		try {
			jarFile2 = new JarFile(manifestFile2, false);
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			Manifest manifest2 = new Manifest(baos);
			if (manifest2!= null) {
				manifest = manifest2;
				JarEntry jarEntryEntry = manifestEntry.getNextEntry();
				jarFile2 = jarFile2.getJarEntry(jarEntryName = jarEntryEntry.getName());
				assertNotNull(""Couldn't get the manifest"", manifest2);
				assertNotNull(""Couldn't get the jar files"", jarFile2);
				Manifest manifest2Manifest = jarFile2.getManifest();
				manifest = manifest2Manifest;
			}
		} catch (IOException e) {
			Assertions.fail(e.getMessage(), Enumeration.class, ""getManifest"", Manifest.class);
		}
		while (jarFile2.entries().hasMoreElements()) {
			JarEntry jarEntry = jarFile2.getEntry(jarEntryName = jarEntry.getName());
			if (jarFile2.getName().endsWith(manifestEntry.getName() + VERSION_JAR_SUFFIX)) {
				File jarEntryFile = newFile(jarFile, ""jarEntry.jar"");
				zipFile(jarEntryFile, jarEntryFile2);
			}
		}
		// The part id, test class and the actual version
		parameters.put(""Part-Id"", getPartId(moduleName));
		parameters.put(""Class"", manifest.getMainAttributes().getValue(""Manifest-Version""));
		parameters.put(""Actual-Version"", moduleVersion);
		parameters.put(""Test-Class"", moduleName.replace(""."", ""/""));
		parameters.put(""Test-Version"", ""Test class"");

		// Test with the jar and the manifest.
		Parameters parametersJar = new Parameters(System.getProperty(""test.dir"", null), manifest);
		parametersJar.putAll(parameters);
		if (jarFile!= null) {
			parameters.put(""Jar-File"", jarFileName);
			parameters.put(""Manifest"", manifestJarName);
		}
		parameters.put(""Parameters"", parametersJar);
		parameters.putAll(parametersUrl);
		System.setProperty(""test.dir"", ""/tmp/jwbf"");
		// Test with jar and the manifest without url parameters
		parameters.put(""Manifest"", jarFile2Name);
		parametersJar.putAll(parameters);
		parameters.put(""Parameters"", parametersJar);
		JWBF.run(classPathClassLoader, params, jarFile2, manifestFile2, manifest.getMain"
b957a6e8-9d22-4bc5-90de-e64fb9875a48,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_2Test.java,59.316551208496094,stop,"// JWBF.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }
}
","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains one unit test case for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {
/**
		* Get the JWBF Version. This method must return non-null.
		*/
		@Test
		public void getVersion_null() {
				//TODO
				fail(""Implement me!"");
				
		}}


"
575ef415-4304-463e-b917-4812ab0c158e,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_0Test.java,55.381555795669556,stop,"// HttpBot.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

public class HttpBot {

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }
}
","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {

// Methods to be tested

	@Test
	public void getPage() throws IOException, MalformedURLException {
		final String page = this.getPage(this.getClass().getResource(""/examplePage.html"").toString());
		assertEqual(""expecting to get the test page"", page, this.getPage(page).toString());

		// test error
		try {
			this.getPage(""http://localhost/foo/bar/"");
			assertEquals(""getPage should throw an exception"", ActionException.ACTION_ERROR, 1);
		} catch (ContentProcessable_0_2TestUtil.ContentProcessable_0_2Exception ex) {
			assertEquals(""error code"", 1, ex.getErrorCode());
		}
	}

// Tests

	private static final String PAGE = ""http://localhost/"";

	private URL getPage(String page) throws MalformedURLException, IOException {
		return new GetPage(this.PAGE + page, """");
	}

	private URL getPage(String urlString) throws MalformedURLException, IOException {
		return new GetPage(urlString, """");
	}

	private Get get(String urlString) throws Exception {
		Get get = new Get(this.PAGE + urlString, """");
		return get;
	}
	/**
	 * This method is executed before the test. It checks whether
	 * {@link HttpBot#isPageLoaded(String)} is correctly called.
	 */
	@Test
	public void isPageLoaded() throws IOException, ContentProcessable_0_2Exception {
//		System.out.println(""isPageLoaded"");

		assertTrue(""this is not a page"",!this.isPageLoaded(""http://localhost/foo/bar/bar.html""));
		assertTrue(""this is not a page"",!this.isPageLoaded(""http://localhost/foo/bar""));
		assertTrue(""this is not a page"",!this.isPageLoaded(""http://localhost/""));

		//check default constructor
		assertTrue(""default constructor"", this.isPageLoaded(this.getClass().getResource(""/examplePage.html"").toString()));
	}

	/**
	 * This method is executed after the test. It checks whether
	 * {@link HttpBot#getPage(String,String)} is correctly called.
	 */
	@Test
	public void getPage_withNull_withPage_fromOther() throws Exception {
		//check empty path
		this.getPage(this.PAGE + ""/"");
		assertFalse(""wrong page"", this.isPageLoaded(this.PAGE + ""/""));
		assertTrue(""unknown page"", this.getPage(this.PAGE + ""foo"").isProcessable());
		assertTrue(""isProcessable"", this.getPage(this.PAGE + this.PAGE + ""/"").isProcessable());

		// check with different arguments
		final String path2 = this.PAGE + ""/"";
		final String pathAndPage = this.PAGE + ""/foo/"" + path2 + this.PAGE + ""bar.html"";
		assertFalse(""same uri"", this.getPage(this.PAGE + ""foo/"").isProcessable());

		final Get getPageFromOther = new Get(this.PAGE, this.PAGE + this.PAGE + ""/"");
		final Get getPageFromOtherString = new Get(this.PAGE + this.PAGE, this.PAGE + ""/"" + pathAndPage);
		assertTrue(""isProcessable"", getPageFromOther.isProcessable());
		assertFalse(""getPageFromOther_String"", getPageFromOtherString.isProcessable());
		final Get getPageFromOtherWithPage = new Get(this.PAGE, this.PAGE + this.PAGE + ""/"");
		getPageFromOtherWithPage.setPage(pathAndPage);
		assertTrue(""isProcessable"", getPageFromOtherWithPage.isProcessable());
		assertTrue(""isProcessable"", getPageFromOtherWithPage.isProcessable());
		final Get getPageFromOthersString = new Get(this.PAGE, this.PAGE + this.PAGE + ""/"");
		getPageFromOthersString.setPage(pathAndPage);
		assertTrue(""isProcessable"", getPageFromOthersString.isProcessable());
		assertFalse(""getPageFromOthers_String"", getPageFromOthersString.isProcessable());
	}

	/**
	 * This method is executed before the test. It checks whether
	 * {@link ContentProcessable#isReadableFrom(String)} is correctly called.
	 */
	@Test
	public void isReadableFrom() throws ContentProcessable_0_2Exception {
		assertFalse(""default isReadableFrom"", this.isReadableFrom(this.getClass().getResource(""/examplePage.html"").toString()));
		assertFalse(""unknown isReadableFrom"", this.isReadableFrom(this.getClass().getResource(""/foo/bar.html"").toString()));

		//check default constructor
		assertTrue(""empty path"", this.isReadableFrom(this.getClass().getResource(""/"").toString()));
	}

	/**
	 * This method is executed after the test. It checks whether
	 * {@link ContentProcessable#readFrom(String,String)} is correctly called.
	 */
	@Test
	public void readFrom() throws ContentProcessable_0_2Exception, IOException, ActionException, ProcessException, MalformedURLException {
		final String fromString = this.getPage(this.getClass().getResource(""/examplePage.html"").toString()).getMetadata().getFrom().asString();
		final String expected = ""http://localhost/"";
		assertEquals(""fromString"", expected, fromString);
		assertEquals(""isReadableFrom"", true, this.isReadableFrom(expected));
		assertEquals(""readFrom"", expected, this.readFrom(expected));
		assertEquals(""readFrom_String"", (String) expected, this.readFrom(expected).asString());
		assertEquals(""error"", 1, this.readFrom(""http://localhost/"").getResult().getStatusCode());
	}
}"
4abe30da-f127-46c7-af4c-39bbeff2eca9,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_1Test.java,57.46004390716553,stop,"// HttpBot.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

public class HttpBot {

    /**
     * @param a a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }
}
","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {
private final HttpBot bot = new HttpBot();
		
		@Test
		public void test() throws MalformedURLException, IOException, ActionException, ProcessException {
			bot.performAction(new Get(""http://www.example.org/""));
			assertNotNull(""content has to be not null"", bot.getPage().getContent());
			// the second element should be a text document
			assertNotNull(""there should be a text document"", bot.getPage().getContent().getText().getBody());
			assertTrue(""document body is really an HTML document"", bot.getPage().getContent().getText().getBody().getContentType().toLowerCase().contains(""text/html""));
		}

		public URL getUrl() {
			return new URL(""http://www.example.org/"");
		}
}
"
e1289c72-0e99-4cc0-aedf-f6c9d2b4a76c,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_2Test.java,55.21480584144592,stop,"// HttpBot.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

public class HttpBot {

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }
}
","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {
private final String PAGE_URL = ""index.php?title=Main_Page"";
		/**
		 * @throws MalformedURLException
		 * @throws IOException
		 * @throws ActionException
		 */
		@Test
		public void test() throws MalformedURLException, IOException, ActionException, Exception {
			HttpActionClient httpClient = new HttpActionClient();
			//
			httpClient.login(CUSTOMER_USERNAME, CUSTOMER_PASSWORD);
			//
            //
            String url = PAGE_URL;
        	// http get URL
            // TODO: Make use of JWBLog to print exceptions?
            System.out.println(""test: "");
   		//
            //
            url = ""http://"" + url;
            // the action client should give 500 error and redirect
            // httpActionClient.setContentType(""text/html"", ""UTF-8"");
            // ActionClient should be able to handle page with unknown protocol
            // https://sourceforge.net/action/actionclient/bugs/253938/
            String statusCode = httpClient.getStatus();
            //
			//
            //
            GetPage gp = new GetPage(url);
            //
            ProcessException e = null;
            try {
	            performAction(gp);
            } catch (Exception e1) {
                e = e1;
            }
            assertNotNull(""Expected exception was not set"",e);
	        System.out.println(""gp"");
	        System.out.println(gp.asString());
            
        	// try to get content via another action client that supports this feature
        	httpClient.setContentType(""text/html"", ""UTF-8"");                	
        	e = null;
            try {
	            httpClient.getPage(url);
	            // this should fail as content type isn't set properly
	            assertNull(""Response did not fail"",e);
            } catch (Exception e1) {
                e = e1;
            }

	        //
            try {
	            httpClient.getAllPages();
		        Exception ex = null;
	            // this should fail as Content-Type is not yet set
		        httpClient.setContentType(""text/html"", ""UTF-8"");
	            try{
	            performAction(httpClient);
	            } catch(Exception e1){
	            	ex = e1;
	            }
	            assertNull(""Response did not fail"",ex);
	            // can do getPage
	            // but still fails
	            assertFalse(""Response got content for page that doesn't have one"",httpClient.getAllPages().isEmpty());
            } catch (Exception e1) {
                System.out.println(""*** Exception:"");
                e1.printStackTrace();
            }
        }
        
        // test for custom page URL
        // it will return content for specified url.
        // It will return content for specified url
        // it will return content for specified url
        
        public ContentProcessable performAction(GetPage pg) throws ActionException, MalformedURLException {
    		
            System.out.println(""performAction: "");
            
            return pg;
        }
    }
"
2aab2c52-3e8e-4ae0-9e08-14c239f0a2a3,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_3Test.java,47.40602374076843,stop,"// HttpBot.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

public class HttpBot {

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }
}
","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains one unit test case for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {
static final String BASE_URL = ""https://jwbf-users-api.herokuapp.com/users-api?user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/56.0.2950.127 Safari/537.31"";

    @Test void getBytesSuccess() throws Exception {
        assertTrue(!getBytes(""/"").isEmpty());
    }

    @Test void getBytesSuccess1() throws Exception {
        final byte[] bytes = getBytes(""/news?title=Main"");
        assertArrayEquals(new byte[] {'I','s', 'a', 't','s', 'a', 'v', 'e',''}, bytes);
    }

    @Test void getBytesSuccess2() throws Exception {
        final byte[] bytes = getBytes(""/news?title=Main_Page"");
        assertArrayEquals(new byte[] {'I','s', 'a', 't','s', 'a', 'v', 'e',''}, bytes);
    }

    @Test void getBytesSuccess3() throws Exception {
        final byte[] bytes = getBytes(""/custom/custom_page"");
        assertArrayEquals(new byte[] {'I','s', 'a', 't','s', 'a', 'v', 'e',''}, bytes);
    }
}
"
656c3a59-ba3b-40f0-9fdd-78ffe7c1cd2b,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_0Test.java,25.92110848426819,length,"// HttpActionClient.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    /**
     * @param contentProcessable a
     * @return message, never null
     * @throws ActionException on problems with http, cookies and io
     * @throws ProcessException on inner problems
     */
    public synchronized String performAction(ContentProcessable contentProcessable) throws ActionException, ProcessException {
        String out = """";
        while (contentProcessable.hasMoreMessages()) {
            HttpRequestBase httpRequest = null;
            try {
                HttpAction httpAction = contentProcessable.getNextMessage();
                final String request;
                if (path.length() > 1) {
                    request = path + httpAction.getRequest();
                } else {
                    request = httpAction.getRequest();
                }
                log.debug(request);
                if (httpAction instanceof Get) {
                    httpRequest = new HttpGet(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do get
                    out = get(httpRequest, contentProcessable, httpAction);
                } else if (httpAction instanceof Post) {
                    httpRequest = new HttpPost(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do post
                    out = post(httpRequest, contentProcessable, httpAction);
                }
            } catch (IOException e1) {
                throw new ActionException(e1);
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                throw new ActionException(e2);
            }
        }
        return out;
    }
}
","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains one unit test case for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains one unit test case for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {

}

// HttpActionClient_1.java
// This test was generated from a file../httpactionclient/test.xml


@SuppressWarnings(""javadoc"")
public final class HttpActionClient_1 implements HttpActionClient {

    @Override
    public Map<String, String> getDefaultHeaderValues() {
        return null;
    }

    @Override
    public Class<ContentProcessable> getProcessable() {
        return ContentProcessable.class;
    }

    @Override
    public String performServiceContent() throws ActionException {
        return performAction(processable);
    }

    @Override
    public Map<String, String> additionalHeaderValues() {
        return null;
    }

    @Override
	public Map<String, String> getAllHeaderValues() {
	    return null;
	}

    @Override
    public String getContentType() {
        return null;
    }

    @Override
    public Map<String, String> getHeaderValues(String header) {
        return null;
    }

    @Override
    public Map<String, String> getHeaderValues(char header) {
        return null;
    }

    @Override
    public String getHeaderValue(String header) {
        return null;
    }

    @Override
    public String getHeaderValue(char header) {
        return null;
    }

    @Override
    public String getHeaderValue(String key, String value) {
        return null;
    }

    @Override
    public List<Cookie> getCookies(String header) {
        return null;
    }

    @Override
    public List<Cookie> getCookies() {
        return null;
    }

    @Override
    public String getQueryParams() {
        return null;
    }

    @Override
    public List<String> getQueryParamsAsList() {
        return null;
    }

    @Override
    public List<String> getQueryParamsAsMap() {
        return null;
    }

    @Override
    public List<Character> getParameterValues(String parameter) {
        return null;
    }

    @Override
    public List<Character> getParameterValues(char parameter) {
        return null;
    }

    @Override
    public Map<String, String> getParameterHeaders(String parameter) {
        return null;
    }

    @Override
    public Map<"
92aa8586-791e-4d7c-a7e8-67f725600284,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_1Test.java,34.72096848487854,stop,"// HttpActionClient.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    /**
     * Process a GET Message.
     *
     * @param get a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    public byte[] get(Get get) throws IOException, CookieException, ProcessException {
        showCookies();
        HttpGet authgets = new HttpGet(get.getRequest());
        return get(authgets, null, get).getBytes();
    }
}
","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains one unit test case for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains one unit test case for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {
/**
		 * This method is called by our unit test framework in the
		 * {@link net.sourceforge.jwbf.core.actions.ExecutorTestcaseTest#test} method in the
		 * unit testing framework.
		 *
		 * @param aTestBase a base class for the unit test.
		 * @throws ActionException  on problems
		 */
    @Test
	public void test() throws ActionException, ProcessException {
		final String getStr = ""this is a GET message"";

		// Set our Cookie stuff
		Cookie cookie = null; // Cookie doesn't support null
		HttpUriRequest request = new HttpRequestBase(getStr);
        request.setParams(new HttpParams());

    	if ( cookie!= null)
        {
			// Save a Cookie
			HttpResponse response = new DefaultHttpClient(new DefaultHttpClient(new HttpHost(""localhost"", 559))).execute(request);
			assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
			
			if(response.getEntity() instanceof MultipartEntity) response.getEntity().getContent();
			int contentLength = ((MultipartEntity) response.getEntity()).getContentLength();
			response = new DefaultHttpClient(new DefaultHttpClient(new HttpHost(""localhost"", 559))).execute(request);
			assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
			response.getEntity();
		}
	}
}
"
b1520526-370e-44b8-8145-8d5005d3091c,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_0Test.java,54.696396350860596,stop,"// GetPage.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    /**
     * @return true if
     */
    public boolean hasMoreMessages() {
        final boolean b = hasMore;
        hasMore = false;
        return b;
    }
}
","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains one unit test case for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains one unit test case for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {
@Test
		public void hasMoreMessages() throws ProcessException {
			final boolean b = hasMoreMessages();
			assertTrue(b);
			assertTrue(hasMoreMessages());
			// No more messages, so cannot assert on this unit test
		}

}
"
84661468-c7f8-4bd9-85f0-fbe776e44089,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_1Test.java,30.00699806213379,stop,"// GetPage.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    /**
     * @see ContentProcessable#processReturningText(String, HttpAction)
     * @param s the returning text
     * @param hm the
     * @throws ProcessException on any problems with inner browser
     * @return the returning text
     */
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        text = s;
        return s;
    }
}
","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains one unit test case for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains one unit test case for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {

	static final String URL = ""http://www.test.net/page/test.xml"";

	static final String USER_AGENT = ""testagent"";
	static final String AUTH_COOKIE = ""testCookie"";
	
	static final String GET_HTML = ""Get html"";
	
	static {
		assertNotNull(USER_AGENT);
		assertNotNull(AUTH_COOKIE);
		
		System.out.println(""============="");
		System.out.println(USER_AGENT);
		System.out.println(AUTH_COOKIE);
	}

	//@Test
	public void testGetFromCustomPage() throws ProcessException, ProcessException {
		// Check the return value and the body.
		String xml = getTextAndCookies(""GetPage.java"", ""http://www.test.net/page/test.xml"");
		System.out.println(xml);
		String expected = ""<html><head></head><body><div>"";
		String actual = xml.replaceAll(""&"", ""&amp;"");
		if (expected.equals(actual)) {
			System.out.println(""OK (normal case)"");
			expected = ""<html><head></head><body>Get html<br><br>"";
		} else
			System.out.println(""Inner error. Expected: ""+ expected +"" but got: ""+actual);
		
		// The XML data is returned, extract the HTML and see.		
		String html = getXmlFromPage(""GetPage.java"", URL, USER_AGENT, AUTH_COOKIE);
		expected = ""<html><body>Get xml from page <b>http://www.test.net/page/test.xml</b><br>&lt;br></body>"";
		if (expected.equals(html)) {
			System.out.println(""OK (normal test)"");
		} else
			System.out.println(""Inner error. Expected: ""+ expected +"" but got: ""+html);
	}

	//@Test
	public void testGetFromCustomPage2() throws ProcessException, ProcessException {
		try {
			getContent(""GetPage.java"", null, ""Get Page XML"", USER_AGENT, ""GET_HTML"");
		} catch (ProcessException ex) {
			assertEquals(1, ex.getErrorIndex());
			return;
		}
		throw new AssertionError(""Failed to throw ProcessException"");
	}

	private void assertEquals(int expected, String actual) {
		assertEquals(expected, actual);
		//System.out.println(actual);
	}

	private String getXmlFromPage(String action, String url, String userAgent, String authHeader)
			throws ProcessException, ProcessException {
		try {
			ProcessRequestImpl req = new ProcessRequestImpl(action, url, null, userAgent);
			RequestResponseImpl rep = ((HttpAction)req.getAction()).createReply();
			rep.setXmlContent();
			rep.setAuthCookie(authHeader);
			return rep.callAndReturn(req.getHeaders());
		} catch (ProcessException ex) {
			assertNotNull(ex);
			System.out.println(""Got a Process Exception"");
			System.out.println(ex);
			return null;
		}
	}

	private String getTextAndCookies(String action, String url) {
		try {
			ProcessRequestImpl req = new ProcessRequestImpl(action, url, null, USER_AGENT);
			RequestResponseImpl rep = ((HttpAction)req.getAction()).createReply();
			rep.setUserAgent();
			rep.setCookies(AUTH_COOKIE, """");
			return rep.callAndReturn(req.getHeaders());
		} catch (ProcessException ex) {
			System.out.println(""Got a Process Exception"");
			System.out.println(ex);
			return null;
		}
	}
}
"
3a16f08e-cd8d-4745-884c-f551f04f2b4e,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/trac/bots/TracWikiBot.java,50.32745170593262,stop,"// TracWikiBot.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;

/**
 * /**
 *
 * This class helps you to interact with each wiki as part of <a
 * href=""http://trac.edgewall.org/"" target=""_blank"">Trac</a>. This class offers
 * a set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.trac.*
 *
 * @author Thomas Stock
 */
public class TracWikiBot extends HttpBot implements WikiBot {

    /**
     * @param name of article in a tracwiki like ""TracWiki"" , the main page is
     *          ""WikiStart""
     * @return a content representation of requested article, never null
     * @throws ActionException on problems with http, cookies and io
     * @throws ProcessException on access problems
     * @see GetRevision
     */
    public synchronized Article readContent(final String name) throws ActionException, ProcessException {
        return readContent(name, 0);
    }
}
","// TracWikiBotTest.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains one unit test case for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBotTest {","// TracWikiBotTest.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains one unit test case for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBotTest {
// TracWikiBot.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;

/**
 * /**
 *
 * This class helps you to interact with each wiki as part of <a
 * href=""http://trac.edgewall.org/"" target=""_blank"">Trac</a>. This class offers
 * a set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.trac.*
 *
 * @author Thomas Stock
 */
public class TracWikiBot extends HttpBot implements WikiBot {

    /**
     * @param name of article in a tracwiki like ""TracWiki"", the main page is
     *          ""WikiStart""
     * @return a content representation of requested article, never null
     * @throws ActionException on problems with http, cookies and io
     * @throws ProcessException on access problems
     * @see GetRevision
     */
    public synchronized Article readContent(final String name) throws ActionException, ProcessException {
        return readContent(name, 0);
    }
}

// TracWikiBotTest.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains one unit test case for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBotTest {
		
	@Test
	public void readContent_should_setUserinfo() throws MalformedURLException, ProcessException, ActionException, ActionException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		wikibot.setUsername(""user"");
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertEquals(""user"", ret.getUserinfo().getUsername());
	}

	@Test
	public void readContent_should_not_do_anything_when_noArticleFound() throws MalformedURLException, ProcessException, ActionException, ProcessException {
		String expected = ""This is the main page"";
		GetRevision getRevision = new GetRevision();
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		WikiBot ret = wikibot.callAjaxAction(""trac.wikipedia.getRevision"", ActionException.INVALID_REVISION, null, null);
		assertNull(ret);
	}

	@Test
	public void readContent_repositories() throws MalformedURLException, ProcessException, ActionException, ActionException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertTrue(ret instanceof TracWikiBot);
		assertEquals(""TracWiki"", ((TracWikiBot)ret).getUrl());
		assertEquals(WikiBot.class, ret.getClass());
	}

	@Test
	public void readContent_without_access() throws MalformedURLException, ProcessException, ActionException, ActionException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertNull(ret);
		assertEquals(""TracWiki"", ((TracWikiBot)ret).getUrl());
	}

	@Test
	public void readContent_with_access() throws MalformedURLException, ProcessException, ActionException, ProcessException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		wikibot.setAccessAuthorized(true);
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertEquals(""TracWiki"", ((TracWikiBot)ret).getUrl());
		assertTrue(ret instanceof TracWikiBot);
		assertEquals(WikiBot.class, ret.getClass());
	}

	@Test
	public void readContent_without_access_on_file_which_is_in_parent() throws MalformedURLException, ProcessException, ActionException, ProcessException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		wikibot.setAccessAuthorized(true);
		wikibot.setFilename(""tracWiki.txt"");
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertNull(ret);
		assertEquals(""TracWiki"", ((TracWikiBot)ret).getUrl());
		assertTrue(ret instanceof TracWikiBot);
		assertEquals(WikiBot.class, ret.getClass());
	}

	@Test
	public void readContent_with_access() throws MalformedURLException, ProcessException, ActionException, ProcessException {
		WikiBot wikibot = new WikiBot();
		wikibot.setCredentials(getTokenCredentials());
		wikibot.setAccessAuthorized(true);
		wikibot.setFilename(""tracWiki.txt"");
		WikiBot ret = wikibot.readContent(""TracWiki"");
		assertEquals(""TracWiki"", ((TracWikiBot)ret).getUrl());
		assertTrue(ret instanceof TracWikiBot);
		assertEquals(WikiBot.class, ret.getClass());
	}

	@Test
	public void readContent_contentAccessable_should_be_ignored() throws ProcessException, MalformedURLException, ActionException, ActionException {
		WikiBot wikibot = new WikiBot();
		WikiBot wikiTest = new WikiBot();
		wikibot.setContentAccessable(new ContentAccessable() {
			@Override
			public ContentAccessible getContent() throws MalformedURLException {
				return wikiTest;
			}

			@Override
			public ContentAccessable getContent(String contentUrl) throws MalformedURLException {
				return wikiTest;
			}
		});
		wikibot.setCredentials(getTokenCredentials());
		WikiBot ret = wikibot.readContent(""TracWiki"");
		fail(""It is not allowed to read content on Wiki"");
	}

	private ContentAccessor getContentAcrutalByName(String name, String contentUrl) throws MalformedURLException {
		return new ContentAccessor() {
			@Override
			public String getContent(ContentAccessable content) throws MalformedURLException {
				return content.getContent(contentUrl);
			}

			@Override
			public String getContent(String content) throws MalformedURLException {
				return content;
			}
		};
	}

}"
22a77ce3-3405-43a4-8892-768056202442,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/inyoka/bots/InyokaWikiBot.java,51.32298755645752,stop,"// InyokaWikiBot.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;

/**
 * This class helps you to interact with each wiki as part of <a
 * href=""http://ubuntuusers.de"" target=""_blank"">Inyoka</a>. This class offers a
 * set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.inyoka.*
 *
 * @author Thomas Stock
 */
public class InyokaWikiBot extends HttpBot implements WikiBot {

    /**
     * @param name of article
     * @return a content representation of requested article, never null
     * @throws ActionException on problems with http, cookies and io
     * @throws ProcessException on access problems
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) throws ActionException, ProcessException {
        return getArticle(name, 0);
    }
}
","// InyokaWikiBotTest.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains one unit test case for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBotTest {","// InyokaWikiBotTest.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains one unit test case for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBotTest {

    @Test
    public void testGetArticle() throws ActionException, ProcessException {
        String name = ""Inyoka"";
        Userinfo userinfo = new Userinfo(name, ""Inyoka"", System.currentTimeMillis());

        Article a = new SimpleArticle(name);
        Set<Userinfo> users = new UserinfoSet(a);
        GetRevision action = new GetRevision();
        action.setUser(userinfo);
        assertFalse(a.hasContent(action));

        process(a, ""Inyoka"", 1, action);
        assertTrue(a.hasContent(action));

        articleContents(a, a);
        articleAttributes(a, a);
    }

    @Test
    public void testGetArticle2() throws ActionException, ProcessException {
        String name = ""Inyoka"";
        Userinfo userinfo = new Userinfo(name, ""Inyoka"", System.currentTimeMillis());

        Article a = new SimpleArticle(name);
        Set<Userinfo> users = new UserinfoSet(a);
        GetRevision action = new GetRevision();
        action.setUser(userinfo);
        assertFalse(a.hasContent(action));

        articleContents(a, a);
        articleAttributes(a, a);
    }


    private void articleContents(Article a, Article ai) throws ActionException {
        String content = ai.getContent();
        Set<String> contentTags = a.getContentTags();

        for (String s : contentTags) {
            articleContents(new SimpleArticle(s), a);
        }
    }

    private void articleAttributes(Article a, Article ai) throws ActionException {
        String content = ai.getContent().toLowerCase();
        Map<String, String> attributes = a.getAttributes();
        Set<String> tags = a.getTags();

        for (String s : contentTags) {
            String h = tags.contains(s)? ""<"" + s + "">"" : """";
            attributes.put(s, h);
//            content = content.replaceAll(s, h);
//            content = content.replaceAll(""(?i):"" + s, ""<"" + s + "">"");
//            content = content.replaceAll(""(?i):"" + s, ""<"" + s + "">"");
            content = content.replaceAll(""(?i):"" + s, ""<"" + s + "">"");
            content = content.replaceAll(""(?i):"" + s, ""<"" + s + "">"" + h);
            content = content.replaceAll(""(?i):"" + s + "":"", ""=\"""" + s + "":"");
            content = content.replaceAll(""(?i)[^\""*+<|>\"""", ""\\\"""");
            content = content.replaceAll(""(?i)<(?![^>]).+>"", ""</"");
            assertEquals(content, attributes.get(s));
        }
    }

    @Test
    public void testGetUserid() throws ActionException {
        String name = ""Inyoka"";
        Userinfo userinfo = new Userinfo(name, ""Inyoka"", System.currentTimeMillis());

        wiki.add(userinfo);
        Article a = new SimpleArticle(name);
        Set<Userinfo> users = new UserinfoSet(a);
        assertFalse(Userinfo.isValid(a));
        Action.getUser(userinfo);
        assertFalse(Userinfo.isValid(a));

        articleContents(a, a);
        articleAttributes(a, a);
        articleContents(a, ai);
        articleAttributes(a, ai);
        articleContents(a, a);
    }
}
"
67f18df7-75ed-4bdc-9bb9-c84963a60a0f,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_0Test.java,17.349869966506958,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    /**
     * @param name of article in a mediawiki like ""Main Page""
     * @param properties {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }
}
","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains one unit test case for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains one unit test case for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {

  private static final Set<Version> VERSIONS = Collections.emptySet();
  private static final Set<Version> VERSIONS_UNKNOWN = Collections.emptySet();

  private static final int PRIVMSG_VERSION = 1;
  private final Set<ActionException> exceptions = Collections.synchronizedSet(new HashSet<>());
    
  private final MediaWiki mwapi = new MediaWiki();
  private final MediaWiki.Version latest_version=""1"";

  @Inject
  @HttpActionClient
  protected HttpBot httpBot;


  @Test(expected=ActionException.class)  
  public void readMissingVersionError() throws JwbfException, ContentProcessable {
    SimpleArticle art = new SimpleArticle(""Version 1"");
    postAct(PostModifyContent.class, 
           new PostModifyContent().setArticles(Collections.singletonList(art)),
           new LoginData(),
           new Version());
  }

  @Test(expected=ActionException.class)  
  public void readMissingVersionErrorOldWiki() throws JwbfException, ContentProcessable {
    SimpleArticle art = new SimpleArticle(""Version 1"");
    postAct(PostModifyContent.class, 
           new PostModifyContent().setArticles(Collections.singletonList(art)),
           new LoginData(),
           latest_version,
           PRIVMSG_VERSION);
  }
  
  @Test
  public void readOneVersion() throws JwbfException, Content"
e1a670ef-5ae8-40ce-89bc-b5a57637b81d,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_1Test.java,17.832363843917847,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    /**
     * @param name of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }
}
","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains one unit test case for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_1Test {","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains one unit test case for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_1Test {

	@Inject
	MediaWiki mediawiki;
    @Inject
    HttpActionClient httpaction;

    @Test
    void basicGet() throws ContentProcessable, ActionException {
        assertEquals(getTitle(), ""MediaWiki"", null);
        assertEquals(getContentUrl(), null);
        assertEquals(getContentTitle(), null);
        assertEquals(getContentContentType(), null);
        assertEquals(getAuthor(), null);
        assertEquals(getModifiedArticle(), null);
        assertEquals(getPublishedArticle(), null);
        assertEquals(getContentAccessInfo(), null);
    }
    
	@Test
    void basicGetByName() throws ContentProcessable, ActionException, ContentException {
        assertEquals(getTitle(), ""MediaWiki"", null);
        assertEquals(getContentURL(), null);
        assertEquals(getContentTitle(), null);
        assertEquals(getContentContentType(), null);
        assertEquals(getAuthor(), null);
        assertEquals(getModifiedArticle(), null);
        assertEquals(getPublishedArticle(), null);
        // check if the article was found by the name
        assertEquals(""Main Page"", getContentAccessInfo());
    }
    
	@Test
    void basicPostLoginOld() throws ContentProcessable, ActionException {
        // post on version 1.0: no post link in the content
        Userinfo u = new Userinfo("""", """", """");
        Version v = new Version(1, 0, 0);
        LoginData ld"
311f6380-081c-41bf-8204-cd067990f69b,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/TemplateUserTitles.java,33.00206112861633,length,"// TemplateUserTitles.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * action class using the MediaWiki-api's ""list=embeddedin"" that is used to find
 * all articles which use a template.
 *
 * @author Tobias Knerr
 * @author Thomas Stock
 * @since MediaWiki 1.9.0
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16, MW1_17 })
public class TemplateUserTitles extends TitleQuery<String> {

    /**
     * deals with the MediaWiki api's response by parsing the provided text.
     *
     * @param s the answer to the most recently generated MediaWiki-request
     * @return empty string
     */
    public String processAllReturningText(final String s) {
        // System.out.println(s);
        parseArticleTitles(s);
        parseHasMore(s);
        titleIterator = titleCollection.iterator();
        return """";
    }
}
","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains one unit test case for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains one unit test case for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {

    private final static String ARTICLE_WITH_PARENTHESES = ""http://example.com/""+
        ""?wsp=p[0|1|2|3|4|5|6|7|8|9|0]&text=""+
        ""http://example.com/1/2/3/5/7/8/9/0"";

    private static final Pattern SPACE_CONTAINING_TEXT_PATTERN = Pattern.compile(""(?<!\\[|\\]|\\.)"");

    private final static int EXPECTED_PATTERN_NUMBER_OF_MATCHING_LETTERS = 6;

    @Test
    void test1() throws VersionException {
        final MediaWiki mediawiki = MediaWikiBot.instance();

        final String expectedP = ""https://example.com"";

        final Pattern pattern = getPattern();
                
        final boolean matchCount = MediaWiki.matchTitle(mediawiki, expectedP, pattern.matcher(""{1}""));
        assertTrue(
            ""This pattern did not match the expected wikitext, this is different that the test"",
            matchCount
        );

        final boolean matchCount2 = MediaWiki.matchTitle(mediawiki, EXPECTED_PATTERN_NUMBER_OF_MATCHING_LETTERS + 1, pattern.matcher(""{1}""));
        assertTrue(
            ""This pattern did not match the expected wikitext, this is different that the test"",
            matchCount2
        );
    }

    /* This method matches several different cases in order to use the expected wikitext pattern.
     * The result of this test is that the number of matches returned depends on the test cases which are
     * defined in the test above, so please try to match a case which should take 1 test case.
     */
    private static boolean matchTitle(final MediaWiki mediawiki, final String wikitext, final Matcher matcher) throws VersionException {
        final Matcher nn = new Matcher();

        log.info(""Testing pattern "" + matcher.pattern() + "" in string "" + wikitext);
        return nn.matches(wikitext);
    }
	
	private Pattern getPattern() {
        final Pattern pattern = Pattern.compile(
            ""https?://example.com"" +
            (supportedForUses? "" [&@0-9A-Za-z]+?"" : """") +
            (supportedForUses? (""://"" + supportedHost + ""?/article[0-9.]*"") : ("":article[0-9.]*"") ),
            Pattern.CASE_INSENSITIVE
        );
		return pattern;
	}
   
    private void parseArticleTitles(String wikitext) throws VersionException {
        final Matcher patternMatcher = getPattern().matcher(wikitext);

        /* Check for ""{"" and ""|""[ ] */
        final boolean matchCase = MediaWiki.matchTitle(mediawiki, patternMatcher.group(1), pattern.matcher(""[0-9-]+""));
        final boolean matchParenthesis = MediaWiki.matchTitle(mediawiki, patternMatcher.group(2), pattern.matcher(""\\b"" + Pattern.quote(patternMatcher.group(2)) + ""\\b""));

        assertTrue(
            ""Match for the"
34cb78b0-5a69-4b28-9850-546a44f6515b,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_0Test.java,29.876315593719482,stop,"// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }
}
","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_0Test {","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_0Test {
// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }
}

// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_0Test {
		@Test
		@Slf4j
		public void unitTest() throws Exception {
			prepareCollection();
			Iterator<LogItem> it = logIterator;
			while (it.hasNext()) {
				LogItem l = it.next();

				int lidx = l.getLogIndex();

				//logindex = (lidx-1)*(mwp -1) + wp;
				if (l.getUserName()!= null) {
					//logindex=wp*(mwp -1) + wp;
				}

				if (l.getCategory()!= null) {
					logindex = wp*(l.getCategory().length() + 1);
				}
				if (l.getMessage()!= null) {
					logindex++;
				}
				logindex++;
				if (l.getUserName() == null) {
					logindex = wp*(1 + 2 + 3);
					logindex++;
				}
				logindex++;
				if (l.isLogged() == null)
					logindex++;
			}
		}

		@Test
		@Slf4j
		/**
		 * @throws IOException
		 * @throws JDOMException
		 * @throws VersionException
		 */
		public void test() throws JDOMException, IOException, VersionException, ActionException {
			prepareCollection();
			iterator = logIterator;
			while (iterator.hasNext()) {
				LogItem item = iterator.next();
				logindex = (item.getLogIndex() + 1) * (item.getMwp() - 1);
			}
		}
}

// LogEvents_1Test.java
"
8074396f-b69f-4973-b367-d37bef508ebb,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_1Test.java,29.94444179534912,stop,"// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }
}
","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#next()} method.
*/
class LogEvents_1Test {","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#next()} method.
*/
class LogEvents_1Test {
// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }
}

// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#next()} method.
*/
class LogEvents_1Test {
		public static class TestConfig extends MediaWikiBot.TestConfig {			
			//
		}					

	@Test
	public void shouldReturnTheResultOfLogEvent() throws VersionException,IOException{
		final Collection<LogItem> expected=new Vector<>();
		
		final XMLWikiBot xmlWikiBot=new XMLWikiBot(TestConfig.class);

		try (final MediaWikiBot bot=xmlWikiBot.launch(TestConfig.class)) {
			final Iterator<LogItem> it=bot.iterate(LogEvents.class, ""logevents"");			
			it.forEachRemaining(System.out::println);
		} 
		
		assertEquals(expected.size(),expected.size());
		//logIterator.close();

	}		
}
"
f677986c-d1c6-44c1-b12e-9271c53b681b,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_2Test.java,28.240325212478638,length,"// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }
}
","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#iterator()} method.
*/
class LogEvents_2Test {","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#iterator()} method.
*/
class LogEvents_2Test {
// LogEvents.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }
}

// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains one unit test case for the {@link LogEvents#iterator()} method.
*/
class LogEvents_2Test {
		
    public final static Integer LETYPESPEC = new Integer(0);
    public final static String USERBOTNAME = """";
    public static final String USER = """";
	public final static String PAGENAME = """";
    public final static String WLITEMTYPE = """";

    String logItem = """";
    Collection<LogItem> logItems = new Vector<LogItem>();

    public void setUp() {
    	logItem="""";
    	logItems = new Vector<LogItem>();
	}

	/**
	 * @param action
	 *
	 * @return the action
	 */
    Collection<?> executeLogAction(Object action) {
    	Collection<?> collection = (Collection<?>) getExecutionContext(action,new String[]{""""});
		return collection;	
    }
    
    /**
     * Test get last ten events of an mw action instance
     * @throws ProcessException 
     * @throws VersionException 
     * @throws IOException 
     * @throws JDOMException 
     */
    @Test
    void testGetLastOne() throws IOException, JDOMException, VersionException, ProcessException,
            Exception {
		logItems.add(new LogItem(PAGENAME, USERBOTNAME, """", """", """", """", """", """", """", """",
				"""", """", """", """", """", """", """", """", """", """", """", 
    			PAGENAME + ""1"", new String[]{""*"" + USERBOTNAME + ""*""}, null, null, null));
		// try with a null name & no user
		logItems.add(new LogItem(PAGENAME, USERBOTNAME, """", USER, """", """", """", """", """", """",
				"""", """", """", """", """", """", """", """", """", """", """", """", """", """"));
		// no log item
		Collection<?> collection =  getExecutionContext(logItems.get(0),new String[]{""""});
		Collection<?> collection1 = getExecutionContext(logItems.get(1),new String[]{""""});
		assertEquals(""Mismatch of list and collection: log items are not correctly added"",1,collection.size());
		assertEquals(""Mismatch of list and collection:  log items are not correctly added"",collection.size(),collection1.size());
		// get the last ten events
		logItems = getExecutionContext(logItems.get(2),new String[]{""""});
		collection =  getExecutionContext(logItems.get(0),new String[]{""""});
		collection1 =  getExecutionContext"
12d5da7d-2350-4941-ae89-98eb37adb8f6,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_0Test.java,41.83242583274841,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }
}
","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {
private MediaWikiBot wikiBot;
		private MediaWikiBot wiki2Bot;
		private ArrayList<CategoryItem> items;
		private String pageName;
		
		/**
		 * Constructor for {@link CategoryMembersFull_0Test}.
		 *
		 * @throws ProcessException If some problem occurs
		 */
		@Test
		public void runSimpleConstructor() throws ProcessException {
			wikiBot = new MediaWikiBot(""wikiBot"", ""Bot"", supportedBy(SupportedBy.ALL));
			wiki2Bot = new MediaWikiBot(""wiki2Bot"", ""Bot"", supportedBy(supportedBy(SupportedBy.ALL)));
			items = new ArrayList<CategoryItem>();
			pageName = ""testPage"";
			
			// Set up the items
			CategoryItem categoryItem1 = new CategoryItem(pageName, ""-"", ""Title"");
			CategoryItem categoryItem2 = new CategoryItem(pageName, ""-"", ""Subtitle"");
			CategoryItem categoryItem3 = new CategoryItem(pageName, ""foo"", ""/foo"");
			CategoryItem categoryItem4 = new CategoryItem(pageName, ""bar"", ""/bar"");
			CategoryItem categoryItem5 = new CategoryItem(pageName, ""baz"", ""/baz"");
			
			// Set up the content
			CategoryItem contentItem1 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.com/wiki/Title]"");
			CategoryItem contentItem2 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.com/Title/Title]"");
			CategoryItem contentItem3 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.w3catalog.org/Title]"");
			CategoryItem contentItem4 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.org/]"");
			CategoryItem contentItem5 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.org/]"");
			CategoryItem contentItem6 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.org/]"");
			CategoryItem contentItem7 = new CategoryItem(""Content"", pageName, ""[wiki.wikis.wikipedia.org/]"");
			CategoryItem contentItem8 = new CategoryItem(""Content"", pageName,
					""[wiki.wikis.wikipedia.org/]"");
			
			// Set up the wiki
			wikiBot.preprocessPage(contentItem1, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem2, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem3, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem4, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem5, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem6, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem7, wikiBot.getWikiContent());
			wiki2Bot.preprocessPage(contentItem8, wikiBot.getWikiContent());
			
			// Create the mock objects for the content.
			CategoryItem mockContentItem1 = wikiBot.getWikiContent();
			CategoryItem mockContentItem2 = wiki2Bot.getWikiContent();
			
			// First make sure we have the needed data
			assertNotNull(mockContentItem1);
			assertNotNull(mockContentItem2);
			
			// Make sure there is some text in it
			assertTrue(mockContentItem1.hasText());
			assertTrue(mockContentItem2.hasText());
			
			// Make sure the content items were generated correctly
			assertEquals(contentItem1.getName(), mockContentItem1.getName());
			assertUtfEquals(contentItem2.getName(), mockContentItem2.getName());
			
			// Create the category items.
			CategoryItemCategory category1 = new CategoryItemCategory(mockContentItem1, wikiBot.getWikiContent());
			CategoryItemCategory category2 = new CategoryItemCategory(mockContentItem2, wiki2Bot.getWikiContent());
			
			// Create a new category.
			CategoryItemCategory category = new CategoryItemCategory(contentItem1, contentItem2, wikiBot.getWikiContent());
			
			// Make sure they are both created
			assertTrue(category1.equals(category));
			assertTrue(category2.equals(category));
			assertTrue(category.equals(category"
54d2ea66-d744-4add-927c-225a57f632f3,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_1Test.java,41.57290983200073,stop,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }
}
","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_1Test {","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_1Test {
@Test
		boolean hasNext(){
			return getCollection().hasNext();
		}
		<T extends MediaWikiBot> CategoryFull<T> getCollection(){
			return new CategoryFull<>();
		}
		@Test
		void get_one_item(){
			CategoryFull<MediaWikiBot> collection = getCollection();
			CategoryItem item = collection.get(1);
			assertThat(collection, is(notNullValue()));
			assertThat(collection, is(Not.notNullValue()));
			assertThat(item, instanceOf(CategoryItem.class));
		}
		@Test
		void get_collection(){
			Collection<ActionException> exceptions = getCollection().get().getActionsByFailures();
			assertTrue(exceptions.isEmpty());
		}
}

/**
* Test class of {@link CategoryMembersFull}.
*/
class CategoryMembersFull_2Test extends CategoryMembersFull_1Test {

		@Override
		public void prepareCollection() {
			super.prepareCollection();
			collection.get(0);
		}

	protected CategoryFull<MediaWikiBot> getCollection(){
			return new CategoryFull<>();
		}

}

/**
* Test class of {@link CategoryMembersFull}. It adds {@link CategoryItem}s and {@link Collection}s for each
* {@link CategoryItem} of the {@link Collection}.
*/
class CategoryMembersFull_3Test extends CategoryMembersFull_2Test {

		@Test
		@Slf4j
		public boolean hasNext(){
			return false;
		}
		@Test
		@Slf4j
		public void get_collection(){
			Collection<ActionException> exceptions = getCollection().get().getActionsByFailures();
			assertTrue(exceptions.isEmpty());
		}
		@Test
		public void get_collection(){
			collection.get(5);
			CategoryItem item = getCollection().get(1);
			assertThat(collection, is(notNullValue()));
			assertThat(collection, is(Not.notNullValue()));
			assertThat(item, instanceOf(CategoryItem.class));
			collection.get(4);
			Collection<ActionException> exceptions = getCollection().get().getActionsByFailures();
			assertTrue(exceptions.isEmpty());
		}
}

/**
* Test class of {@link CategoryMembersFull}. A special case happens here in case the {@link ContentItems} are the same
* for all {@link CategoryItem}s (same content) at the same level.
* This special case is tested here because we allow accesses to the {@link ContentItems} from different level.
* Since the {@link ContentItems} are the same for all categories, we need to differentiate a special case from that happening.
* It is also the case that this special case has been tested in case above,
* but under different cases (e.g. CategoryMembersFull.hasNext() was not being tested correctly)
*/
	class CategoryFull extends CategoryMembersFull_1Test {
		
			@Test
			boolean hasNext(){
				return getCollection().hasNext();
			}
		
		
		protected Collection<ActionException> getActionsByFailures(){
			Collection<ActionException> exceptions = new ArrayList<>();
			return exceptions;
		}
}
			
if(log.isDebugEnabled()){
log.debug(""Finished tests"");
}
"
3bd62316-e665-4a2c-992e-c3d5fc220cb4,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_2Test.java,41.68111491203308,stop,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }
}
","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_2Test {","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains one unit test case for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_2Test {
private final MediaWikiBot bot = new MediaWikiBot();
        
    /**
     * This single test case will prepare the CategoryMembersFull
     * object and test if all the
     * {@link CategoryItem}s are properly prepared.
     *
     * @throws ProcessException a problem is found inside
     * the code.
     */
    @Test
    public void test_1_prepareCollection() throws ProcessException, JwbfException {
        // prepare CategoryMembersCollection
        
        CategoryItemsCollection collection = new CategoryItemsCollection(bot, (short)1);
        
        // add CategoryItem with 0 parent id
        collection.add(new CategoryItem(""t"",0, false, true));
        
        // add CategoryItem 1 and 4 again, with 5 parents
        collection.add(new CategoryItem(""t4"", 5, false, true));
        collection.add(new CategoryItem(""t4"", 5, false, true));
        collection.add(new CategoryItem(""t4"", 5, false, true));
        collection.add(new CategoryItem(""t4"", 5, false, true));
        
        // test if Collection is correctly prepared
        assertEquals(5, collection.getCardinality());
    }
        
    private static class CategoryItemsCollection extends CategoryItems {
            private ArrayList<CategoryItem> items = new ArrayList<CategoryItem>();

            public CategoryItemsCollection(MediaWikiBot bot, short count) {
                super(bot, count);
            }

            /**
             * Adds several CategoryItems
             *
             * @param item The {@link CategoryItem}
             */
            @Override
            public void add(CategoryItem item) {
                items.add(item);
            }

            /**
             * @inheritDoc
             */
            @Override
            public void add(Collection<CategoryItem> collection) {
                items.addAll(collection);
                Collections.sort(items);
            }
        }
        
        private final Short count = new Short((short)2);
        private MediaWikiBot bot;

            public CategoryItemsCollection(MediaWikiBot bot, short count) {
                this.bot = bot;
                init(count);
            }

            /**
             * Initializes this categories iterator to a clean Collection.
             */
            public void init(short count) {
                setCardinality(count);
                items.clear();
                log.debug(""count={}"", count);
            }

            /**
             * Returns all the {@link CategoryItem}s.
             *
             * @return The {@link CategoryItem} collection
             */
            @Override
            public CategoryItemsCollection getCollection() {
                return new CategoryItemsCollection(bot, count);
            }
        }
}
"
180b3fd7-27ec-4432-8b15-dfd99622486c,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetApiToken.java,37.99577617645264,length,"// GetApiToken.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-<a
 * href=""http://www.mediawiki.org/wiki/API:Changing_wiki_content""
 * >Editing-API</a>. <br />
 * Its job is to get the token for some actions like delete or edit.
 *
 * @author Max Gensthaler
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public final class GetApiToken extends MWAction {

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first;
    }
}
","// GetApiTokenTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains one unit test case for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiTokenTest {","// GetApiTokenTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains one unit test case for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiTokenTest {
GetApiTokenTest() throws JDOMException, IOException, VersionException {

			// Get the tokens for the test
			final String apiKey = ""mytoken"";
			final String user = ""john"";
			final String page = ""page"";
			final String wiki = """";
			final String apiDocUrl = ""content.php?f=0&api.mode=edit&f=0&api.key="" + apiKey + ""&f=0&p="" + user + """" + ""&format=xml&t="" + wiki;

			assertNotNull(apiDocUrl);
			assertEquals(apiDocUrl, ""content.php?f=0&api.mode=edit&f=0&api.key=""+apiKey+""&f=0&amp;p=""+user+""&t=""+wiki+""&t=&format=xml&t="");

			// get tokens for the test
			try (final HttpAction action = new HttpAction<Void>(){
				@Override
				protected Void call() throws Exception {
					return GetApiToken.GetApiToken.call(
							new Version[] {
                                Version.M1,
                                Version.M2,
                                Version.M3,
                                Version.M4,
							}, apiKey, page);
				}
			}) {

			}

			assertNotNull(action);
			final Integer firstItem = (Integer)action.getData();
			assertEquals(1, firstItem.intValue());

			try {
			} catch (final VersionException ve) {
				assertFalse(ve.hasMoreMessages());
			}
		}

		/**
		 * Call the given action, and print the token result. <br />
		 * An API token is retrieved and sent back using {@link Version#MW1_15}
		 * and this test is supposed to pass every time this is a call.
		 * @throws IOException Exception from the server
		 * @throws VersionException Exception from the server
		 * @throws ProcessException Exception from the server
		 *
		 * @return the status of the call
		 */
		private int call(final Version[] expectedVersion, final String expectedUrl) throws JDOMException, IOException, VersionException, ProcessException {
			assertNotNull(expectedUrl);
			final Version[] expected = new Version[expectedUrl.toLowerCase().split(""\\?"").length];
			int result = 0;
			final StringReader reader = new StringReader(expectedUrl);
			final Document doc;
			try (final InputSource input = new InputSource(reader)) {
				final SAXBuilder builder = new SAXBuilder();
				builder.setValidating(false);
				doc = builder.build(input);
			}
			assertNotNull(""No XML content"", doc);

			try (final HttpAction<Void> access = new HttpAction<Void>() {
				@Override
				protected Void call() throws Exception {
					try (final Version version = Version.M1) {
						assertEquals(expected[0], version);
						assertEquals(expected[1], version);
						assertEquals(expected[2], version);
						assertEquals(expected[3], version);
					}
					return null;
				}
			});
			assertNotNull(""No call"", access);

			try (final Version version = expected.length!=null? expected[expected.length-1] : null) {
				try (final Userinfo user = new Userinfo(""john"","""");) {

					access.setData(user);
					while (access.hasMoreMessages()) {
						final Version result = access.call();
						if (expectedVersion.length>0){
							assertEquals(""call should not fail due to non-existing Wiki page"", expectedVersion[expectedVersion.length-1], result);
						} else {
							assertTrue(""call should have returned a non-null result but was ""+result+"" on call ""+access.toString(), result!"
24b38592-30d1-41c1-9af5-5170b5d4eebd,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_0Test.java,31.840598106384277,length,"// PostModifyContent.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }
}
","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains one unit test case for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains one unit test case for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {
/**
		* Test-Case-Description: Test method getMoreMessages(...) of the {@link
		* net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent} class.
		* @throws net.sourceforge.jwbf.core.bots.util.JwbfException
		*/
		@Test
		public void test_getMoreMessages() throws PostModifyContent_Exception {
			// Given/When

			// pre-condition - actions were initialized
			assertNotNull(""getMoreMessages() precondition must be checked"", actions);

			// action invocation (pre-condition - actions were initialized)
			PostModifyContent_0Test.this.actions.getMoreMessages(0);

			// post-condition - number of messages must be 1 in this context
			Set<Integer> expected = new HashSet<>();
			expected.add(1);
			assertTrue(""getMoreMessages() post-condition (0) must be 1 in context"", expected.equals(this.first.getMoreMessages(0)));
			expected = new HashSet<>();
			expected.add(1);
			assertTrue(""getMoreMessages() post-condition (1) must be 1 in context"", expected.equals(this.second.getMoreMessages(0)));

			// post-conditions (post-condition)

			// normal action execution
			assertFalse(""getMoreMessages() post-condition (0) didn't expected"", (this.first.getMoreMessages(0) == 1));
			assertFalse(""getMoreMessages() post-condition (1) didn't expected"", (this.second.getMoreMessages(0) == 1));

			// check if mediaWiki bot execution result
			Set<Integer> actual = getExpectedResponse(first.getMoreMessages(0));
			assertEquals(""getMoreMessages() post-condition (0) mediaWiki bot didn't execute"", expected, actual);

			// check if mediaWiki bot execution result
			actual = getExpectedResponse(second.getMoreMessages(0));
			assertEquals(""getMoreMessages() post-condition (1) mediaWiki bot didn't execute"", expected, actual);

			// check if mediaWiki action result
			actual = new HashSet<>();
			assertTrue(""getMoreMessages() post-condition (0) mediaWiki bot did execute"", getExpected().containsAll(actual));
			try {
				first.getMoreMessages(0);
				first = null;
				assertTrue(""getMoreMessages() post-condition (0) post-condition didn't execute"", false);

				// there is still an exception thrown if the mediaWikiBot execution does not fail
				assertTrue(""getMoreMessages() post-condition (0) action failed on second execution"", getExpected().isEmpty());
				expected.clear();
				first = new SimpleArticle();
				expected.add(1);
				actual = getExpectedResponse(first.getMoreMessages(0));
				assertFalse(""getMoreMessages() post-condition (1) post-condition didn't expect"", actual.equals(expected));
			} catch (ActionException e) {
				fail(""getMoreMess"
cdc60b98-d4e5-4ba2-a7e3-18d4eb6ba5ed,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_1Test.java,26.843220710754395,length,"// PostModifyContent.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains one unit test case for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_1Test {","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains one unit test case for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_1Test {
// PostModifyContent.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a!= null && b!= null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return!(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}

// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains one unit test case for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_1Test {
		
@Test
    void basicTest() throws ActionException, ProcessException, ContentAccessException, VersionException, JwbfException {

//		log.info(""starting basic test..."");
		
		MutationAction a = new MutationAction(""testAction"");
		NewsArticle article = new NewsArticle();
		article.setText(""testAction article text"");
		article.setTitle(""testAction article title"");
		article.setSummary(""testAction article summary"");
		article.setSlug(""testAction article slug"");
		article.setImage(""testAction article image"");
		article.setPubdate(""testAction article pubdate"");
		article.setCreated(""testAction article created"");
		article.setUpdated(""testAction article updated"");
		article.setHashtags(""testAction article hashtags"");
		article.setLinkto(""testAction article linkto"");
		article.setDescription(""testAction article descrption"");

		// Create
		a.addPost(article);
		// Create
		Set<Post> s = new HashSet<Post>(1);
		s.add(a.createPost(article));
		// Post to
		s.add(a);
		// Post to
		article.setLinks(s);
		article.setContent(""testAction article text"");
		
//		log.info(""testing basic test..."");
		
//		a.publish();
//		a.publish(article);
//		a.unpublish();

			Version version = (Version)a.getWikiContext().get(""version"");
//			assertTrue(isIntersectionEmpty(a, version));
		
//		assertEquals(2, version.getVersion().compareTo(new Version(1, 0, 1, 0, 0)));
//			assertEquals(1, version.getVersion().compareTo(new Version(2, 0, 1, 0, 0)));
	}
	
	@Test
    void test_no_existing_article() throws ContentAccessException, ProcessException, VersionException, JwbfException {

			Version version = (Version)a.getWikiContext().get(""version"");

			Set<Post> s = new HashSet<Post>(1);
//			s.add(a.createPost(new NewsArticle()));
//			assertNull(a.createPost(new NewsArticle()));
			
//			assertEquals(0, version.getVersion().compareTo(new Version(1, 0, 1, 0, 0)));
			
//			assertEquals(1, version.getVersion().compareTo(new Version(2, 0, 1"
7dbaed05-8bc8-43f7-aa39-03b34810717d,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/FileUpload.java,35.11608672142029,length,"// FileUpload.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;

/**
 * <p>
 * To allow your bot to upload media in your MediaWiki. Add at least the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableUploads = true;
 * </pre>
 *
 * For more details see also
 * <a href=""http://www.mediawiki.org/wiki/Help:Configuration_settings#Uploads"">Upload Config</a>
 *
 * @author Justus Bisser
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class FileUpload extends MWAction {

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }
}
","// FileUploadTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains one unit test case for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUploadTest {","// FileUploadTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains one unit test case for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUploadTest {

	private static final Pattern pattern;
	private static final Matcher matcher;
	private static final SimpleFile file;

	static {
		// we create a single Pattern instance to be used by the
		// FileUpload constructor. A specific regex pattern
		// for Pattern instances is defined in {@link Pattern})
		pattern = Pattern.compile(""(\\d+)"");
		matcher = pattern.matcher("""");
		file = new SimpleFile(""file"", """");
	}



	/**
	* Test method for {@link FileUpload#getFilesToUpload()}
	* @throws ProcessException exception thrown when error occur during execution
	* @throws FileNotFoundException exception thrown when there is some problem during file retrieval
	*/
	@Test
	public void testGetFilesToUpload() throws ProcessException, FileNotFoundException {
	String response = """";
	final FileUpload fileupload = new FileUpload();
	fileupload.setFile(file);
		try {
			response = fileupload.getFilesToUpload();
		} catch (ActionException e) {
            throw new ProcessException(""Error during execution"", e);
		}
		log.info(""Expected result: ""+response);
		log.info(""Actual result: ""+response);
		assertEquals(response, """");
	}
	/**
 	 * This test checks that MediaWiki's Configuration file contains the values that
 	 * have been exported to MediaWiki1.11+ (with some additional entries in it),
 	 * MediaWiki's Configuration file containing versions MediaWiki1.12+, MediaWiki's Configuration file containing versions MediaWiki1.13+, MediaWiki's Configuration contains MediaWiki1.14+, MediaWiki's Configuration has MediaWiki1.15+, MediaWiki's Configuration contains MediaWiki1.15+ and MediaWiki1.16+ extra keys.
	 * @throws VersionException version exception when the Configuration file was not correctly formatted
	 */
	@Test
	public void testGetFilesToUploadWithConfiguration() throws VersionException {
		final Version v = Version.getVersion(""1.15"");
		log.info(""Version: ""+v);
		final String content = ""Content-Disposition: form-data; name=\""fileName\""\r\n\r\nfile.txt"";
		final String filename = ""file.txt"";
		String response = """";
		log.debug(""Content length is: ""+content.length());
		response = String.format(""name=%s&file=%s&content=%s"",filename,filename,content);
		
        try {
			final HttpAction action = new HttpAction() {
				@Override
				protected HttpAction execute() throws ActionException {
					setRequestMethod(""POST"");
					setRequestBody(filename.length()+"""");
					return postRequest();
				}
			};

			assertEquals(content,v.formatString());
			assertEquals(response,mw1_11 + "","" + v.formatString());
			FileUpload fileupload = new FileUpload();
			fileupload.setRequestMethod(""POST"");
			fileupload.setRequestBody(""test"");
			response = action.doAction(fileupload);
			log.debug(""getFilesToUpload() -> ""+response);
			
			log.debug(""Content length is: ""+content.length());
			log.debug(""File uploaded successfully"");
			assertEquals(response,MW1_11 + "","" + v.formatString());
			
		} catch (VersionException ve) {
			log.debug(""getFilesToUpload() -> ""+ve.getMessage());
			throw ve;
		}
	/**
 	"
569ba86c-104c-4f12-b669-b8ee0014cb8c,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_0Test.java,36.9264349937439,stop,"// MediaWiki.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }
}
","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {

	@Test
	void testGetCharset() throws UnsupportedEncodingException {
        final String charSet = MediaWiki.getCharset();
        Set<Character> supportedChars = new HashSet<>();
        supportedChars.add('q');
        assertTrue(
                charSet +"".UTF-8"".equals(charset)
                || charSet +"".UTF-16"".equals(charset)
                );
		
		assertEquals(MediaWiki.charset, charSet);
	}

	
	/**

	 * The following test method contains an empty set by
	 * setting the 'charset' attribute with the current value of
	 * the static constant 'MediaWiki.CHARSET'.
	 * 
	 */
	@Test
	void testGetCharsetAfterSetCharset() {
		final String charSet = MediaWiki.getCharset();
		
		Set<Character> supportedChars = new HashSet<>();
		assertEquals(MediaWiki.charset, charSet);
		
		// Set 'charset' value to 'UTF-8'.
		final MediaWiki wiki = new MediaWiki();
		wiki.setLanguage(""en"");
		wiki.setCharset(MediaWiki.CHARSET);
		
		mediaWikiAction(wiki).setParams(""language=en&charset=UTF-8"")
			.run();
			
		String result = mediaWikiAction(wiki).getParams();
		
		assertEquals(""UTF-8"", result);
		
		Set<Character> resultCharset = new HashSet<>();
		result = mediaWikiAction(wiki).getParams();
		
		assertTrue(result!=null);
		
		if (!result.contains(""UTF-8"")) {
			resultCharset.clear();
		}
		
		// Test the character set.
		// Check the charSet name is not supported in the media wiki.
		result = mediaWikiAction(wiki).getParams();
		assertTrue(result.contains(MediaWiki.getCharset()));
		
		// Set new value of charSet constant MediaWiki.CHARSET.
		mediaWikiAction(wiki).setParams(""language=en&charset="" + MediaWiki.getCharset());
		
		assertEquals(MediaWiki.CHARSET, wiki.getCharset());
		
		result = mediaWikiAction(wiki).getParams();
		assertTrue(result!=null);
		
		assertEquals(MediaWiki.getCharset(), result);

	}
		
	
	@Test
    public void testGetCharsetWithInvalidInput() {
	    // String input which contains an invalid char-set.

	    // Should fail because the ""character-set"" attribute is not supported.
		mediaWikiAction(new MediaWiki()).setParams(""language=en&charset=this-is-not-a-valid-charset"").run();
		
		final MediaWiki wiki = new MediaWiki();
		
		Set<Character> result = new HashSet<>();
		mediaWikiAction(wiki).getParams().forEach(
                (charset) -> {
                	if (charset == MediaWiki.getCharset()) {
                		result.add(charset);
                	}
                }
                
        );
		
    	assertFalse(result.isEmpty());
    	
        String resultCharset = result.iterator().next().toString();
        assertEquals(MediaWiki.getCharset(), resultCharset);
        
    }
	
}"
4fbb97bd-98ac-48fa-9185-3bbf13212bc1,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_1Test.java,32.11457014083862,stop,"// MediaWiki.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @param s a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
}
","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {

	@Test
	public void test() throws UnsupportedEncodingException {
        Set<String> set = new HashSet<>();
        set.add("""");
        set.add(""a"");
        set.add(""/"");
        set.add(""a"");
        set.add(""\\"");
        set.add(""a"");
        set.add(""c"");
        set.add(""\\"");
        set.add(""c"");
        set.add(""a/c"");
        set.add(""a//"");
        set.add(""a\\"");
        set.add(""a\\a"");
        set.add(""a\\\\c"");
        set.add(""a\\\\c\\c"");
        
        assertEquals("""", MediaWiki.encode(""""));
        assertEquals(""\\"", MediaWiki.encode(""\\""));
        assertEquals(""\\a"", MediaWiki.encode(""a""));
        assertEquals(""\\\\"", MediaWiki.encode(""\\""));
        assertEquals(""\\\\a"", MediaWiki.encode(""a""));
        assertEquals(""\\\\\\"", MediaWiki.encode(""\\""));
        assertEquals(""\\\\a\\"", MediaWiki.encode(""a""));
        assertEquals(""\\b"", MediaWiki.encode(""b""));
        assertEquals(""\\"", MediaWiki.encode(""~""));
        assertEquals(""\\a/b"", MediaWiki.encode(""a/b""));
        assertEquals(""a\\c"", MediaWiki.encode(""a / c""));
        assertEquals(""a\\b c"", MediaWiki.encode(""a\""b c""));
        assertEquals(""a\\b c"", MediaWiki.encode(""\""a\\ b c""));
        assertEquals(""a\\b c"", MediaWiki.encode(""\""a b c""));
        assertEquals(""a\\b c"", MediaWiki.encode(""\""a\""b \""c\""\""""));
        assertEquals(""a\\b c"", MediaWiki.encode(""a"" + MediaWiki.CHARSET + ""\""b c\""\"""")); // UTF-8 --> GB18030 --> GB18032
        assertEquals(""a\\b c"", MediaWiki.encode(""a\xe9\xc3\xa9\xc3\xa9\xc3\xa9 c\""\""""));
        assertEquals(""a\\b c"", MediaWiki.encode(""aA\xc9\xc3\xa9\xc3\xa9\xc3b\xc3\xa9\xc3\xa9 \""c\""\""""));
        
        assertEquals(""ABCDEFGH"", MediaWiki.encode(""ABCDEFGH""));

        assertEquals(""<b>"", MediaWiki.encode(""<b>""));
        assertEquals(""<b>"", MediaWiki.encode(""<b></b>""));
        
        assertEquals(""<b>abc<b>  <b> def  <b>  ghi<b>"", MediaWiki.encode(""<b>abc<b>  <b> def  <b>  ghi<b>""));

        assertEquals(
            ""<b>a<b/>   c<b/></b>  h   g<b/></b>"",
            MediaWiki.encode(""<b>a <b/>   c</b>  h   g<b/>""));
    }
}
"
e5a1e98a-1e98-4cad-aff9-8bd446c2232f,/EvoSuiteBenchmark/original/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_2Test.java,57.15159773826599,stop,"// MediaWiki.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @param s a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains one unit test case for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {

    static final String BASE_URL = ""http://www.jwbf.org/mediawiki"";
    static final String TARGET = ""/index.php?title=MediaWiki"";

    @Test
    public void run_1Get_should_encode_url() {
        String decoded = decode(TARGET);
        assertEquals(""MediaWiki_TARGET"", decoded);
    }
    
    @Test
    public void run_2GetAllArticles_should_encode_url() {
        Set<String> articles = new MediaWiki().getAllArticles(); 
        assertEquals(""MediaWiki_GetAllArticles"", articles);
    }
    
    @Test
    public void run_3Decode_should_encode_url() {
        String decoded = decode(TARGET);
        assertEquals(""&amp;wv=1&amp;wv=2&amp;wv=3&amp;wv=4&amp;wv=5&amp;wv=6&amp;wv=7&amp;wv=8&amp;wv=9&amp;wv=0"", decoded);
    }
    
    static final class HTMLEntities {
        private static final int WHTMLEntities =
                    URLEncoder.MAX_CODED_CHARS;
        
        static final int HTML_ENCODED_SPACE = 32;
        static final int CUSTOM_UTF8_BOM = 0xFEFF;
        static final int CUSTOM_UTF8_CHARS_A_TO_C = 0xFFFEFFFE;
        static final int HTTP_BEGIN_URL = 5;
        static final int HTTP_END_URL = 11;
        static final int HTTP_STATUS_CODE = 13;
    };

    @Test
    public void run_4HtmlEntities_should_encode_only_the_bom() {
        Set<String> entities = new MediaWiki().htmlEntities();
        for (int i = 0; i < WHTMLEntities; i++) {
            boolean found = false;
            for (String entity: entities) {
                if (entity.startsWith(CUSTOM_UTF8_CHARS_A_TO_C)) {
                    entities.clear();
                    found = true;
                } else if (entity.startsWith(CUSTOM_UTF8_BOM)) { 
                    found = true;
                }
            }
            assertTrue(found);
        }
    }
    
    @Test
    public void run_5HtmlEntities_should_unify_the_bom() {
        Set<String> entities = new MediaWiki().htmlEntities();
        for (int i = 0; i < 5; i++) {
            boolean found = false;
            for (String entity: entities) {
                if (entity.startsWith(CUSTOM_UTF8_BOM)) {
                    found = true;
                } else if (entity.startsWith(CUSTOM_UTF8_CHARS_A_TO_C)) {
                    entities.clear();
                    found = true;
                }
            }
            assertFalse(found);
        }
    }

    @Test
    public void run_6HtmlEntities_should_unify_the_bom() {
        Set<String> entities = new MediaWiki().htmlEntities();
        for (int i = 0; i < 5; i++) {
            Set<String> testSet = new HashSet<>();
            for (String entity: entities) {
                if (entity.startsWith(CUSTOM_UTF8_BOM)) {
                    for (String testEntity: testSet) {
                        if (testEntity == entity) {
                            testSet.add(entity);
                        }
                    }
                }
            }
            entities = testSet;
        }
    }

    @Test
    public void run_7Bom_should_return_charset_in_the_url() {
        String testContent = 
                ""<html>\n""+ 
                ""<body>\n""+
                ""<p><a href=\""http://d.d.d.d\"">\n""+
                ""<a href=\""http://d.d.d\"">\n""+
                ""<a href=\""http://l.l\"">\n""+
                ""</a></a>\n""+
                ""</p>\n""+
                ""</body></html>\n""; 
        Set<String> entities = new MediaWiki().htmlEntities();
        assertEquals(""encoded-with-custom-charset"", entities.iterator().next());
        for (int i = 0; i < testContent.length(); i++) {
            String entity = testContent.substring(i, i+1);
            entity = HTMLEntities.unhtmlQuotes(entity);
            String testEntity = HTMLEntities.unhtmlents(entity);
            assertEquals(entity, testEntity);
        }
    }

    @Test
    public void check_1Check_with_custom_charset_for_https() {
        String testContent = ""<html>\n""+
                ""<body>\n""+
                ""<p><a href=\""https://www.facebook.com\"">\n""+
                ""<a href=\""https://www.facebook.com\"">\n""+
                ""<a href=\""https://www.facebook.com\"">\n""+
                ""</a></a>\n""+
                ""</p>\n""+
                ""</body></html>\n""; 
        Set<String> entities = new MediaWiki().htmlEntities();
        
        assertEquals(""encoded-with-custom-charset"", entities.iterator().next());
    }

    @Test
    public void check_2Decode_url() {
        String testContent = ""<html>\n""+ 
                ""<body>\n""+
                ""<p><a href=\""https://www.facebook.com\"">\n""+
                ""</a></p>\n""+
                ""</body></html>\n""; 
        assertEquals(""encoded-with-custom-charset"", new MediaWiki().decode(testContent).trim());
    }

    @Test
    public void check_3Decode_url_encoded_string() {
        String expectedEncodedString = ""a=b"";
        String testContent = ""<html>""+expectedEncodedString+""</html>"";
        Set<String> entities = new MediaWiki().htmlEntities();
        assertEquals(""encoded-with-custom-charset"", entities.iterator().next());
        assertEquals(expectedEncodedString, 
                new MediaWiki().decode(testContent).trim());
    }
}
"
