ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
4f7928be-2fbe-436d-b3ce-8359236171f7,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_0Test.java,61.51053071022034,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }
}
","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {
/*
	     * @see junit.framework.TestCase#setUp()
	     */
	    @Test
	    public void testSetup() throws JspTagException {
	
	        //System.out.println(""set-up"");
	    }
	/*
	    @see junit.framework.TestCase#tearDown()
	*/
	    @Test
	    public void testTearDown() throws JspTagException {
            
	        //System.out.println(""clean-up"");
	    }

	}

// Functions_0Test_0Test_0Init.java
package net.sourceforge.ext4j.taglib.tag.test;

import java.util.Date;
import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.*;






import org.apache.avalon.framework.configuration.Configuration;
import org.apache.avalon.framework.configuration.ConfigurationException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.BeforeEach;


public class Functions_0Test_0Init  implements Functions_0Test {
    static int i;

    public Functions_0Test_0Init() {
    }

    public Functions_0Test_0Init(int pNum) {
        i = pNum;
    }

    @Override
    public void setUp() throws JspTagException {
        //System.out.println(""set-up"");
    }

    @Override
    public void tearDown() throws JspTagException {
        //System.out.println(""clean-up"");
    }

    public int testTag(){
         return i;
    }

    /**
     * <p>setParameter</p>
     *
     * @param pParam a {@link java.lang.String} object.
     */
    @Override
    public void setParameter(Map<String,String> pParam) {
        //System.out.println(""setparam"");
        Map<String,String> myParameters  = new HashMap<String,String>();
        myParameters.put("":index"", ""1-1"");
        myParameters.put("":max"", ""10"");
        param = myParameters;
    }

    /**
     * <p>getRequest</p>
     *
     * @return a {@link javax.servlet.jsp.IRequest} object.
     */
    @Override
    public IRequest getRequest(){

       return new Request();
    }

public String execute(){
        String s = ""okay"";

    String s1=null;
    int i = 1;
    final int a = 1;
    final int d = 10;
    final boolean b = true;




    return s;
   }

    public void checkReturn(){


    }

    public void checkReturn(boolean pFlag){

    }

    public void checkReturn(boolean pFlag, boolean pFlag1, int pValue){

    }

    public void checkReturn(boolean pFlag, boolean pFlag1, int pValue, String pPattern){

    }

    public void checkReturn(String pFlag, boolean pFlag1, int pValue){

    }

    public void checkReturn(String pFlag, boolean pFlag1, int pValue, String pPattern){

    }

    @Override
    public void checkOutput(String pMsg) {
       System.out.println(""check=""+pMsg);
    }

}

class Request  extends TagSupport  {
    public Request(){

    }

    public void body(IRequest pR){

        String s = ""okay"";
        request = s;
    }

    public void endRequest(){

        body += "" okay "";
        try {


            String s = ""okay"";
            request = s;
            context.put(""request"", ""okay"");
        } catch ( JspTagException e ) {
            e.printStackTrace();
        }

    }
    public String getURL(){

        return ""/myurl"";
    }

    public String getContext(){

        return null;
    }

    public String getRequest(){

        return request;
    }

    public void pageContextStart(String pRequest, Map<String,?> pParams){

        request = pRequest;

    }

    public void pageContextEnd(){

        request = null;
    }

    @Override
    public void release() {



    }

    private String request;
    private String request1;
    private String request2;
    private Map<String, String> param;
    private Map<String, Map<String, String>> param2;
    /**
     * @param pRequest
     * @param pParams
     */
    public void test(IRequest pRequest, Map<String,String> pParams) {

        request = pRequest.getRequest();
        param = pParams;


    }



    @Override
    public Configuration constructConfiguration(JspTagException pException) {

        String cString = this.getClass().getName();
        throw new IllegalArgumentException(""pException:"" + cString);

    }

    @Override
    public void clearAttributes() {

        param = null;



    }
}

class Request  extends TagSupport  {
    private int num;

    public Request(){

        setPageContext();
    }

    public void test(IRequest p){


    }

    protected void addParam(Map<String, String> p){

    }

    public Map<String, String> getParam(){
        return null;
    }

    public List<String> getParamList(){
        return null;
    }

    protected void setParameter(Map<String, String> pParam){

    }

    protected void setParameter(Map<String,String> pParam1, Map<String,String> pParam2){

    }

    protected void setPageContext(){
        Context context = null;
        if(param == null){
            param = new HashMap<String, String>();
            param2 = new HashMap<String, Map<String,String>>();
        }
    }

    public Map<String, String> getParameters(){
        if(param == null){
            param = new HashMap<String,String>();
            param2 = new HashMap<String, Map<String, String>>();
        }
        return param;
    }


    public List<String> getParamList(){
        if(param2 == null){
            param2 = new HashMap<String,Map<String,String>>();
        }
        return param2.get("":params"");
    }

    public String"
dcc29627-260b-4528-8f2c-cf69ddb2862a,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_1Test.java,59.27440071105957,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}
","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) =='s')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}

// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {
		
	public static String addS(String pText) {
		return pText.replaceAll(""\"""", ""''"");
	}
	
	/**
	 * Add a unit test to the String.
	 * @param pText the String to be added to its own context.
	 */
	public static void addTests1(String pText) {
		
		StringTokenizer sT = new StringTokenizer(pText, ""_"");
		
		if (sT.countTokens() > 0) {
			
			assertEquals(""Add a unit test that removes unit test from the String."",
	        		addS(sT.nextToken()),
	        		System.out.println(addS(pText.trim())));
	
		} else {
			
			// Add a simple unit test.
			String sTmp = addS(todo.addS(pText));
			assertEquals(""Add a simple unit test."", sTmp, 
	        		System.out.println(addS(pText.replaceAll(""\"""", ""''""))));
	
		}
	}
}"
72a64792-6ff4-488b-9da6-ce5fb673ec3c,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_2Test.java,59.56889343261719,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }
}
","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains one unit test case for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {


    @Test
    public void test_constructor_withOneParameter_whenConstruct() {
        Date date = new Date();
        Date date1 = new Date();
        date.setTime(date1.getTime());
        String stringParameter = ""12345678"";
        int minutes = 12345678;
        int hours = 12345678;
        long days = 345678L;
        long minutesSeconds = 1234578L;
        long milliseconds = 12345678L;
        long millisecondsSeconds = 12345678L;
        long millisecondsMilliseconds = 12345678L;

        Functions functions = new Functions();
        assertNotNull(functions);
//        assertEquals(FunctionType.INVALID, functions.getType(""invalid""));
        assertNotNull(functions.getType(""now""));
        assertNotNull(functions.getType(""dateToMilliseconds""));
        assertNotNull(functions.getType(""dateToMilliseconds(""));
        assertNotNull(functions.getType(""(""));
        assertNotNull(functions.getType(""(Date""));
        assertNotNull(functions.getType(""()""));
        assertNotNull(functions.getType(""() Date""));
//        assertNotNull(functions.getType(""$""));
//        assertNotNull(functions.getType(""(""));
//        assertNotNull(functions.getType(""(Date""));
        assertNotNull(functions.getType(""{""));
        assertNotNull(functions.getType(""{}""));
        assertNotNull(functions.getType(""}""));
        assertNotNull(functions.getType(""(""));
        assertNotNull(functions.getType(""(String)""));
        assertNotNull(functions.getType(""+""));
        assertNotNull(functions.getType(""-""));
        assertNotNull(functions.getType(""*""));
        assertNotNull(functions.getType(""/""));
        assertNotNull(functions.getType(""|""));
        assertNotNull(functions.getType(""=""));
        assertNotNull(functions.getType(""<""));
        assertNotNull(functions.getType("">""));
        assertNotNull(functions.getType(""(""));
        assertNotNull(functions.getType(""+ (""));
        assertNotNull(functions.getType(""- (""));
        assertNotNull(functions.getType(""| (""));
        assertNotNull(functions.getType("")""));
        assertNotNull(functions.getType(""(""));
        assertNotNull(functions.getType("")""));
        assertNotNull(functions.getType(""$ ""));
        assertNotNull(functions.getType(""$ (""));
        assertNotNull(functions.getType(""$ (""));
        assertNotNull(functions.getType(""$ $""));
        assertNotNull(functions.getType(""$ $""));
        assertNotNull(functions.getType(""$ #""));
        assertNotNull(functions.getType(""$ # (""));
        assertNotNull(functions.getType(""$ # (""));
        assertNotNull(functions.getType(""$ +""));
        assertNotNull(functions.getType(""$ + (""));
        assertNotNull(functions.getType(""$ + ($""));
        assertNotNull(functions.getType(""+ #""));
        assertNotNull(functions.getType(""+ # (""));
        assertNotNull(functions.getType(""+ # (""));
        assertNotNull(functions.getType(""+ # $""));
        assertNotNull(functions.getType(""+ # $ (""));
        assertNotNull(functions.getType(""+ $ +""));
        assertNotNull(functions.getType(""+ $ + (""));
        assertNotNull(functions.getType(""+ $ + (""));
        assertNotNull(functions.getType(""+ $ + $""));
        assertNotNull(functions.getType(""+ $ + $ (""));
        assertNotNull(functions.getType(""+ $ + $""));
        assertNotNull(functions.getType(""+ $ + #""));
        assertNotNull(functions.getType(""+ $ + # (""));
        assertNotNull(functions.getType(""+ $ + # (""));
        assertNotNull(functions.getType(""+ $ + $""));
        assertNotNull(functions.getType(""+ $ + $ (""));
        assertNotNull(functions.getType(""$ + + #""));
        assertNotNull(functions.getType(""$ + + # (""));
        assertNotNull(functions.getType(""\u00A9 + + ""));
//        assertNotNull(functions.getType(""{@""));
//        assertNotNull(functions.getType(""()""));
//        assertNotNull(functions.getType(""\n""));
//        assertNotNull(functions.getType(""\n + ""));

        assertEquals(functions.getType(""\""test\""""),null); // It must not equal ""<""
        assertEquals(functions.getType(""[\""test\""]""),null); // It must not equal <[[

        assertEquals(functions.getType(""\""test\""[0]""),null);
        assertEquals(functions.getType(""\""test\""[1]""),null);
        assertEquals(functions.getType(""""),""test"");
//        assertEquals(functions.getType(""\""test\"".replace('\\\\','\\')""), null);
//        assertEquals(functions.getType(""\""test\"".replaceRight('\\\\', '\\')""), null);
//        assertEquals(functions.getType(""\""test\"".replaceFirst('\\\\','\\')""), null);
//        assertEquals(functions.getType(""\""test\"".replaceUntil('\\\\', '\\')""), null);
//        assertEquals(functions.getType(""\""test\"".replaceUntilLeft('\\\\', '\\')""), null);
//        assertEquals(functions.getType(""\""test\"".replace(null,'')""), null);
//        assertEquals(functions.getType(""\""test\"".count()""), 3L);
//        assertEquals(functions.getType(""\""test\"".indexOf('a')""),  2);
    }

	@Test
	public void test_constructor_withOneParameter_whenEquationWithNotEquals() {
		Functions functions = new Functions();
		assertNotNull(functions);
//        assertEquals(FunctionType.INVALID, functions.get"
b4518325-87c1-4b90-9534-8b911d68ce9b,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_0Test.java,16.01962924003601,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Page createPage() {
        return new Page();
    }
}
","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {

	private final static String ELEMENT = ""page"";
	private final static String ATTRIBUTE = ""_page"";
	private final static String VALUE = ""pagina"";

	/**
	 * This is the table of test cases.
	 */
	static final String SCHEMA1 = ""urn:com:tripfilms:os:pagination:2009-09-02T13:06:00.020Z"";
	static final String SCHEMA2 = SchemaFactory.ANNOTATION_SCHEMA$;
	static final String SCHEMA3 = ""urn:com:tripfilms:os:pagination:2009-09-02T13:06:00.020Z"";
	static final String SCHEMA4 = ""urn:exttaglib:pagination-2"";
	
	private Class<?> classe;
	private String name;
	@Test
	public void test() {
		classe = ObjectFactory.createPage().getClass();
		name = classe.getSimpleName();
		assertEquals(""com.tripfilms.os.exttaglib.pagination.datatype.ObjectFactory_0Test"", name);
		assertSame(ObjectFactory.createPage().getClass(), classe);
	}
	
	/**
	 * This is the {@link ObjectFactory#createPage()} method.
	 */
	@Test
	public void testPage() {
		classe = ObjectFactory.createPage().getClass();
		name = classe.getSimpleName();
		assertEquals(""com.tripfilms.os.exttaglib.pagination.datatype.ObjectFactory_0Test$1"", name);
		assertSame(ObjectFactory.createPage().getClass(), classe);
		try {
			ObjectFactory.createPage();
			fail(""ObjectFactory.createPage() cannot create this type of instance."");
		} catch (Exception exception) {
	}
//		assertSame(ObjectFactory.createPage().createPage(), classe.newInstance());

		assertSame(classe, classe.getSuperclass());
	}
	private static class Page extends TypeAdapter<ObjectFactory.Page> {
		public ObjectFactory.Page create(Class<?> type) {
			return type.newInstance();
		}
	}
}"
f86731aa-04a1-4823-976e-e8217a335f2f,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_1Test.java,6.061677932739258,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public StaticPage createStaticPage() {
        return new StaticPage();
    }
}
","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {

    @Test
    public void test1() {
        StaticPage staticPage = createStaticPage();

        assertNotNull(staticPage);
    }
}
"
e3fa3c0a-934e-4295-9e0c-a8d63779dba2,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_2Test.java,19.718263864517212,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Pagination createPagination() {
        return new Pagination();
    }
}
","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {

    @Test
    public void testCreatePagination() {
        assertNotNull(ObjectFactory.createPagination());
    }
}"
41ad3d1a-5b62-438a-ab38-c5c7e32cef8e,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_3Test.java,45.11755657196045,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains one unit test case for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {

    @Test
    public void newPages() throws Exception {
        ObjectFactory factory = new ObjectFactory();
        Object obj = factory.createPages();
        assertTrue(obj instanceof Pages);
    }
}

"
