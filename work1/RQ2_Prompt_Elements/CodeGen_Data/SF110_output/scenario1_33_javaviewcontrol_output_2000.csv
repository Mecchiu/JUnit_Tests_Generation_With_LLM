ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
6c7d55e5-41ac-48bc-957c-294a20ddd58f,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_0Test.java,67.16032981872559,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;
        return c;
    }
}
","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {

	private char buftoken7;
	
	private int state;
	
    /**
     * Set the {@link #state} field to a known value.
     * <p>
     * @see #state
     */
    public void setState( int s ) {
        state = s;
    }

        
	/** Constructor. */
    public SimpleCharStream_0Test() {
    }

    /**
     * Method corresponding to the {@link #beginToken} method.
     * <p>
     * @param  beginType  A token indicating the end of the input stream.
     * @param  beginLine  The line number of the first character of the input stream.
     * @param  beginColumn The column number of the first character of the input stream.
     * @see #beginToken
     */
    public void beginToken( Token beginType, int beginLine, int beginColumn ) {
    }

    /**
     * Method corresponding to the {@link #endToken} method.
     * <p>
     * @param  endType  A token indicating the end of the input stream.
     * @param  endLine  The line number of the last character of the input stream.
     * @param  endColumn The column number of the last character of the input stream.
     * @see #endToken
     */
    public void endToken( Token endType, int endLine, int endColumn ) {
    }

    /**
     * Returns the size of unread characters that can still be dequeued.
     * In this method we must unqueue any buffered characters.
     * <p>
     * @return  The size of unread characters.
     */
    public int unread() throws java.io.IOException {
        return ((buftoken7 =''));
    }

    

 //

    private void test()
        throws java.io.IOException {
        SimpleCharStream char_in = new SimpleCharStream( new StringReader("""") );

        try {
            // A loop that does not complete until end of file is reached:
            while ( state!= 0 ) {
                char c;
                int match_capture;
                int len = char_in.in_char();

                if( len == -1 ) {
                    throw new java.io.IOException();
                }
                
                if( state == 0 ) {
                    //
                }

                switch( state ) {
                    default:
                    // fall through
                    case 0:
                    continue;

                    case 1:
                    //
                    match_capture = char_in.beginToken();
                    break;

                    case 2:
                    //
                    match_capture = char_in.endToken();
                    break;
                }
            
                // We need one more char
                c = char_in.readChar();
                this.buftoken7 = c;
                
                if( match_capture == -1 ) {
                    boolean ok = char_in.available() >= 10;
                    
                    if(!ok ) {
                        System.err.println( ""Unexpected end of input"" );
                        exit_jvca( 1 );
                    }

                    if( char_in.available() < 10 ) {
                        int ch;
                        while(char_in.available() < 10 && ( ch = char_in.read() ) > -1 ){
                            System.err.println( ch );
                        }
                    }

                    break;
                }
                int i = 0;
                if( match_capture == 1 ) {
                    i += 1;
                }
                if( match_capture == 2 ) {
                    i += 10;
                }
                if( c == '\u00A0') {
                    i += 3;
                }
                if( c == '\u1680' && char_in.available() < 15 ) {
                    int  ch = c;
                    
                    if( char_in.available() < 10 ) {
                        int  ch2 = char_in.read();
                        tst_buftoken7( ch, ch2 );
                    }

                    int ch3 = char_in.peek();
                    if( ch3 == -1 ) {
                        throw new java.io.IOException();
                    }
                    
                    ch = ch3;
                    i += 5;
                    if( char_in.available() < 15 ) {
                        int ch4 = char_in.read();
                        tst_buftoken7( ch, ch4 );
                    }

                    ch = ch3;
                    i += 5;
                    ch = char_in.read();
                    tst_buftoken7( ch, ch );
                }
                if( match_capture == 3 ) {
                    i += 7;
                }
                if( match_capture == 4 ) {
                    i += 13;
                }
            }

        }catch( java.io.IOException ioe ) {
            exit_jvca( 1 );
        }catch( Throwable t ) {
            exit_jvca( 1 );
        }

    }


    static void tst_buftoken7( int ch, int ch2) {
        assertTrue( ""Invalid character"", ( ch == ch2 )?
                                      ""Invalid character: \"""" + 
                                                ch + ""\"", was \"""" + ch2 + ""\"""" :
                                        ""Invalid character: \"""" +
                                              ch + "", "" + ch2 + ""\"""" );
    }

    /**
     * Method responsible of exiting with the appropriate return value:
     * <P>
     * @param  error    The error code.
     */
    private void exit_jvca( int error ) {
        System.exit( error );
    }
}
"
488b2f2a-2ad7-4b38-b169-d5c6eb29b2cf,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_1Test.java,44.02808618545532,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;
            if (++bufpos == bufsize)
                bufpos = 0;
            return buffer[bufpos];
        }
        if (++bufpos >= maxNextCharInd)
            FillBuff();
        char c = buffer[bufpos];
        UpdateLineColumn(c);
        return c;
    }
}
","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {
/** 
		 * Test case for method'readChar()'.
		* @throws java.io.IOException.
		*/
        @Test
        public void testReadChar() throws java.io.IOException {

        }
}



"
59c8832c-7798-4d0c-a7da-5b158cc8af8d,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_2Test.java,58.914639472961426,stop,"// SimpleCharStream.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

public class SimpleCharStream {

    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }
}
","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains one unit test case for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {

  @Test
  public void testGetImage() {
    String image;

// SimpleCharStream['
output(""'"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'/');"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'*');"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'\\u0022';"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'"" );
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'//');"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""''"");
assertEquals( ""''"", SimpleCharStream.GetImage());

input(""'#');"");	// note whitespace (\t)
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'\''"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""''"");
assertEquals( ""''"", SimpleCharStream.GetImage());

input(""'\""'"");	// ignore backslashes
assertEquals( """", SimpleCharStream.GetImage());
input(""'\'';"");
assertEquals( """", SimpleCharStream.GetImage());
input(""'\""\"""");
input(""&quot;"");	// ignore backslashes
assertEquals( ""&quot;"", SimpleCharStream.GetImage());
input(""'\""'''"");
assertEquals( """", SimpleCharStream.GetImage());
input(""'\""\""\"""");
input(""&#xD;"");	// ignore horizontal whitespaces
assertEquals( ""&#xD;"", SimpleCharStream.GetImage());
input(""'\""\""'"");
assertEquals( ""&#xD;"", SimpleCharStream.GetImage());
input(""\""\\u0192\"""");	// ignore character in \r\n
assertEquals( ""\"""", SimpleCharStream.GetImage());
input(""\""\\u0193\"""");	// ignore character in \r\n
assertEquals( ""\"""", SimpleCharStream.GetImage());

input(""'\\'';"");	// ignore backslashes
assertEquals(""'"",SimpleCharStream.GetImage());
input(""''"");
assertEquals("""",SimpleCharStream.GetImage());
input(""''"");

// SimpleCharStream.end()
output(""'"");

// SimpleCharStream.lookAhead()
output(""'"");
testlookAhead(1);
input(""'"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'\''"");

// SimpleCharStream.nextToken()
output(""'"");
testnextToken(2);
input(""'"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'\''"");

// SimpleCharStream.Unget()
input(""'"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""'\''"");

// SimpleCharStream.seek()
output(""'"");
input(""\"""");	// need to accept a \
input(""'"" );
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""\""'"");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""\'\"""");
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""\u1F01E"");	// note that \r\n added by default
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""\u1F01E'"", 1);
assertEquals( ""''"", SimpleCharStream.GetImage());
input(""\u1F01E\"""", 2);
assertEquals( ""''"", SimpleCharStream.GetImage());

test_failure(""'"", ""U+0085""); // the only valid Unicode code point
test_failure(""'"", ""U+FFFE"");	// it's not a valid code page to start a stream
test_failure(""\' \"""", ""U+02AD""); // should not be a valid Unicode code point
}
	
}"
2d439622-c9d9-46aa-a135-36306aaad372,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_0Test.java,65.2042908668518,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }
}
","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {

	/**
	* Test method for encodeString(String s).
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString() {
//  	String s = ""test"";
//  	String actual = Base64Coder.encodeString(s.getBytes());
//  	assertEquals(""test"", s + """");
//  	assertEquals(""test0"", actual);
//  }

    /**
	* Test method for encodeString('a').
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_a() {
//  	String actual = Base64Coder.encodeString('a' + String.valueOf((char) 65));
//  	assertEquals('a', actual);
//  }

    /**
	* Test method for encodeString('a' + String.valueOf(65)).
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_a() {
//  	String actual = Base64Coder.encodeString('a' + String.valueOf(65));
//  	assertEquals(""A"" + String.valueOf(65), actual);
//  }

    /**
	* Test method for encodeString('b' + """").
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_b() {
//  	String actual = Base64Coder.encodeString('b' + String.valueOf((char) 97));
//  	assertEquals(""b"" + String.valueOf((char) 97), actual);
//  }

    /**
	* Test method for encodeString('b' + String.valueOf(97)).
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_b() {
//  	String actual = Base64Coder.encodeString('b' + String.valueOf(97));
//  	assertEquals(""b"" + String.valueOf(97), actual);
//  }

    /**
	* Test method for encodeString('c' + String.valueOf(65)).
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_c() {
//  	String actual = Base64Coder.encodeString('c' + String.valueOf(65));
//  	assertEquals(""c"" + String.valueOf(65), actual);
//  }

    /**
	* Test method for encodeString('c' + String.valueOf(97)).
	* It shall call the {@link Base64Coder#encodeString(byte[])} method of the default coder.
	*/
//  @Test void testEncodeString_c() {
//  	String actual = Base64Coder.encodeString('c' + String.valueOf(97));
//  	assertEquals(""c"" + String.valueOf(97), actual);
//  }
    
}"
4bd56ea0-5c16-4a02-8c5b-a94e191b3ddb,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_1Test.java,65.23786067962646,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }
}
","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {

    @Test
    public void init_Test(){
    }
}
"
a5a9c725-03b3-44ca-a12f-d91c014398f5,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_2Test.java,56.32788372039795,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }
}
","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {
// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen? in[ip++] & 0xff : 0;
            int i2 = ip < iLen? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen? map1[o3] : '=';
            op++;
        }
        return out;
    }
}

// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {
		static final byte[] map1 = { 'A', 'R', 'N', 'E', 'C', 'Q', 'D', 'G', 'S', 'B', 'M', 'W', 'A', 'X', 'E', 'P', 'Q', 'I', 'N' };
		
		@Test
		public void testUnicodeBase64() {
			char[] in = ""0123456789abcdef"" + 0x00;
			assertEquals(""Incorrect Base64 encoded result."", ""AQIAIAKwP0Y3J0LgRydW5jdHV2Lmhvc3RhdGljeDz4iZGI2Y0NzJ4MGcwODAxNDZcMTQ0MzkwODAxNDZic2I0ZGw5NDY0NzMzI3ODM4MGcwN3JzNjE4OTAjODM4MGcwODAxNCyOTVzODM4MGczNjM0MzJlMGMyNXA5MWczNjM0MDEyNzM3ODMzMzM0MjI0OTU3M2JrZXlhY2tlY2UxMGcwN2JqeHlY2F1dHh1eXQiLCJ9eXNrLmJhL2NvbS8iL0JvYXVlIGRlAGxPJ9dTUzODQ0NzM3ODM4MzJlMGEyNzM0ODM4MGcsKQyI2ZjdHdwLmd2Nzg1MDE1MDEwNzM2ODM3N3VyZHlvYzlhZGVzIENfL2VhY2UxM2Y0IjctL2tpbm9kYW5zL2lkYWxpcyIjpmcyIjpmcy1zIjpmcy01z"", ""AQIAIAKwP0Y3J0LgRydW5jdHV2Lmhvc3RhdGljeDz4iZGI2Y0NzJ4MGcwODAxNDZcMTQ0MzkwODAxNDZic2I0ZGW5NDY0NzMzJ3ODM4MGcwNDM4MzM0MDEyNzM3ODM4MGczNjM0MzJlMGMyNXBaXA5MWczNjM0MDEyNzM3ODM4MGcsKQyI2ZjdHdwLmd2Nzg1MDE1MDEwNzM2ODM3N3VyZHlvYzlhZGVzIENfL2VhY2UxMGcwODM4NTI0MzM3ODM4MGEyQ1IjpmcyY4iL0JjYzM0MjI5MDh4MSw0dN2VjdHdwLmd2Nzg1MDE1MDEyNzM3ODM4MGcsKQyI2ZjdHdwMDE0MDEyNzM3ODM4MTAyQ1MjAwNzM3ODM4MGcsKQyNU0ZX0iM2M0MzM0MDBhYXNoaW5jaWduaXgS0dCQoKQz1ZjViOGV1ODM4MGEyQ28fWlhY2VzL2LmW1mYm9vYXRpZX0sXG4=\r\n\r\n"", new String(in, ""UTF-8""));
		}
		
}
"
a6bd7317-416c-430a-8fb6-c6439f1245ce,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_3Test.java,41.29859972000122,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static String decodeString(String s) {
        return new String(decode(s));
    }
}
","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {

    @Test
    public void testGetBinaryString() {
        assertEquals(""I'm not sure what to do"", 
                Base64Coder.decodeString(""Hi I'm just a test""), 
                Base64Coder.decodeString(""I'm just a test""));
        
        assertEquals(""This is base64 encoded string"", 
                ""Hi I'm just a test"", 
                Base64Coder.decodeString(""Hi I'm just a test"", ""utf-8""));
        
        assertEquals(""This is base64 encoded string with newlines"", 
                ""I'm just a test\n"", 
                Base64Coder.decodeString(""I'm just a test\n"", ""utf-8""));
    }
	
    @Test
    public void testDecodeString() {
		
        String expected = ""This is base64 encoded (utf-8)"";
        String actual = Base64Coder.decodeString(""This is base64 encoded (utf-8)"", ""utf-8"");
        
        assertEquals(expected, actual);
   
        assertFalse(""This is base64 encoded string"", 
                Base64Coder.decodeString(""This is base64 encoded string"", ""utf-8""));
    }
}"
5fc98a13-6b52-4749-8226-8ed65ce2020c,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_4Test.java,54.1518394947052,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }
}
","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {

    @Test
    void testDecode() {	
        // Test case #1: Invalid input
        assertThrows(java.util.CantParseBase64Exception.class, new Runnable() {
					
			@Override public void run() {
					new Base64Coder(40).decode("""");
				}
			}
		);
        // Test case #2: Correct input
        assertEquals(""YnUzK5gwTU4c2Dyb7jRf2LdUQt9KxFc4kVw1g="", new Base64Coder(40).decode(""FjqdZyQ8S3s7bM3T/7/3G3X3N6Lk/Lz+o="".toCharArray()));
    }

}// Base64Coder_4Test.java"
c852b60a-b993-41c1-bcd8-be364cd1953b,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_5Test.java,17.933714866638184,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }
}
","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {
// Base64Coder.java
package com.pmdesigns.jvc.tools;

public class Base64Coder {

    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4!= 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen? in[ip++] : 'A';
            int i3 = ip < iLen? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }
}

// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains one unit test case for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {
		
	/** Test method. */
	@Test
	public void testDecode_1(){
		
		String[] source = {
				""A"",
				""AD""
				};
		
		final String output = ""AADADADADDADADADADADADADADADADADADADADADADADADADADADAD"";
		assertEquals(
				""The character 'A' must be decoded from 'ABC' using an output character of 'A'."",
				Base64Coder.decode(source).charAt(0),output.charAt(0));
	}
	
	/** Test method. */
	@Test
	public void testDecode_2(){
		
		String[] source = {
				""AA""
				};
		
		final String output = null;
		assertEquals(
				""No character must be decoded from 'AA' using a null output character."",
				Base64Coder.decode(source).charAt(0),output);
	}
	
	/** Test method. */
	@Test
	public void testDecode_3(){
		
		String[] source = {
				""AAA""
				};
		
		final String output = null;
		assertEquals(
				""No character must be decoded from 'AAA' using a null output character."",
				Base64Coder.decode(source).length(),output);
	}
}
"
5488d11e-bfc8-4f17-9802-e001c98171ce,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_0Test.java,55.52139067649841,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }
}
","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {
// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o!= null && o instanceof String)? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }
}

// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {
		
    private final SimpleDateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat(""MM/dd/yyyy HH:mm:ss"");
    private SimpleDateFormat DATE_FORMAT = new SimpleDateFormat( ""MMMddyyyy"");
    
    private final Map flash = new HashMap();
    private SimpleDateFormat DEFAULT_FLASH_FORMAT = getDefaultFlashFormat();

    private HttpURLConnection conn;
    private BasicHttpEntity entity;

    private void testRequestContext(String formFieldName) throws Exception {
        request.setCharacterEncoding(""UTF-8"");
        conn.setConnectTimeout(30000);
        conn.setReadTimeout(30000);

        addPostHeaderElement();
        HttpGet get =
                new HttpGet( JVCRequest.getUri(request) + ""?"" + formFieldName );

        HttpResponse resp = conn.getResponse();

        InputStream instream = null;
        
        if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            if (conn.getContentEncoding() == null) {
                instream =
                        resp.getEntity().getContent();
            }
        }

        if ( conn.getContentEncoding()!= null ) setEncoding(conn.getContentEncoding());
        else conn.getInputStream().reset();

        if (instream == null) {
            fail(""Failed to obtain stream."");
        }

        String mime = resp.getEntity().getContentType().getValue();
        String contentType = resp.getEntity().getContentEncoding().getValue();

        if (mime == null) mime = ""text/plain"";

        System.out.println(""Received content type : ""+ contentType);
        System.out.println(""Received mime type : ""+ mime);

        if (resp.getContentLength() < 200) {
            fail(""Failed to parse request."");
        }

        if (contentType.equals(""application/octet-stream"")) {
            byte[] content = new byte[resp.getContentLength()];
            resp.getEntity().getContent().read(content, 0, content.length);
        } else if (instream.available() > 0) {
            byte[] content = Streams.toByteArray(instream);

            // This will throw an exception if the inputstream is null, when no
            // upload is started.
            instream.reset();

            if (instream.available() > 0) {
                byte[] content2 = new byte[resp.getContentLength()];
                resp.getEntity().getContent().read(content2);
                String flashStr = new String(content2);
                Iterator iter = flash.entrySet().iterator();
                while(iter.hasNext()) {
                    Map.Entry entry = (Map.Entry)iter.next();
                    entry.setValue(entry.getKey() + "" "" + flashStr);
                }
            }
        }

        if (request.getAttribute(""RequestCtx"") == null) {
            request.setAttribute(""RequestCtx"", createUricRequest(req));
        }
        else request.setAttribute(""RequestCtx"",
                ((javax.servlet.http.HttpServletRequest)request).
                getAttribute(""RequestCtx""), ALIAS);

        req.setAttribute(""JVCRequestContext"", this);

        EntityUtils.consume(resp.getEntity());

        if (conn == null) {
            fail(""conn is null"");
        }

        setEncoding(conn.getContentEncoding());
    }

    private String createUricRequest(HttpServletRequest request) {
        StringBuffer requeststr=new StringBuffer();
        String method = ""GET"";

        if (request.getQueryString()!= null &&!request.getQueryString().equals("""")) {
            method = ""POST"";
            if (request.getQueryString().equals(""POST"")) {
                method = ""PUT"";
            }
        }

        if (!req.isSecure()) {
            requeststr.append(method+"" "");
        }
        
        requeststr.append(""url=\"""");
        if (request.getScheme().equalsIgnoreCase(java.net.URL.HTTP)) {
            requeststr.append(HTTP_METHOD_GET);
        } else if (request.getScheme().equalsIgnoreCase(java.net.URL.HTTPS)) {
            requeststr.append(HTTP_METHOD_POST);
        } else if (request.getScheme().equals(java.net.URL.HTTP_POST)) {
            if (request.getQueryString() == null)
                requeststr.append(HTTP_METHOD_POST_NO_QUERY);
            else
                requeststr.append(request.getQueryString());
        } else if (request.getScheme().equals(java.net.URL.HTTPS_POST)) {
            if (request.getQueryString() == null)
                requeststr.append(HTTP_METHOD_POST_NO_QUERY);
            else
                requeststr.append(request.getQueryString());
        } else {
            throw new IllegalStateException(""Invalid scheme: "" +
                    request.getScheme() );
        }

        requeststr.append(""\"""");

        requeststr.append("" "" +
                method + "" "" +
                request.getProtocol() + "" "" +
                request.getServerName() + "" "" +
                request.getServerPort() + "" "" +
                request.getContextPath() + "" "" +
                request.getServletPath());

        if (!isSecure(request)) {
            requeststr.append(""?secure"");
        }

        requeststr.append(""="" + request.getQueryString());

        return removeTrailingWhitespace(requeststr.toString());
    }

    private void setEncoding(String contentEncoding) {
        if (contentEncoding!=null &&!contentEncoding.equals("""")) {
            conn.setContentType(contentEncoding);
        } else {
            conn.setRequestProperty(""Accept-Encoding"", ""gzip"");
        }
    }

    private void addPostHeaderElement() throws UnsupportedEncodingException {
        addElement(""Content-Type"",     DEFAULT_FLASH_FORMAT + "";charset=UTF-8"");
        
        if (request.getParameter(""J"
b20d9a72-32d5-49d6-b858-6366f69a2448,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_1Test.java,51.378496408462524,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }
}
","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {
public JVCRequestContext_1Test() { }

		private static File getFile(String name) {
			File dir = new File(System.getProperty(""java.io.tmpdir"")+""/JVCRequestContext_1Test_""+name);
			if (dir.exists() &&! dir.isDirectory()) throw new IllegalArgumentException(""File "" + dir + "" is not a directory"");
			if (! dir.mkdir()) throw new RuntimeException(""Cannot create directory "" + dir);
			return new File(dir, name);
		}
	@Test
	public void test_getParamMap(){
		File f = getFile(""default.txt"");
		JVCRequestContext jvc = new JVCRequestContext();
		HttpServletRequest request = jvc.getRequest();
		assertEquals(HttpServletRequest.class.getResource(""default.txt""), request.getAttribute(""javax.servlet.include.servlet_path""));
		f = getFile(""file.txt"");
		request = jvc.getRequest();
		assertEquals(HttpServletRequest.class.getResource(""file.txt""), request.getAttribute(""javax.servlet.include.servlet_path""));
		f = getFile(""file.txt2"");
		request = jvc.getRequest();
		assertEquals(HttpServletRequest.class.getResource(""file.txt""),""none"");
		request = jvc.getRequest();
		assertNull(request.getAttribute(""javax.servlet.include.servlet_path""));
		f = getFile(""file2.txt"");
		request = jvc.getRequest();
		assertEquals(HttpServletRequest.class.getResource(""file2.txt""), request.getAttribute(""javax.servlet.include.servlet_path""));
		request = jvc.getRequest();
		assertNull(request.getAttribute(""javax.servlet.include.servlet_path""));
	}
	@Test
	public void test_getParamMap_1(){
		HttpServletRequest request = jvc.getRequest();
		HttpServletResponse response = jvc.getResponse();
		String fileName = ""default.txt"";
		File f = getFile(fileName);
		assertNotNull(""file "" + fileName + "" should not be null"", f);
		if (request!= null && response!= null) {
			assertEquals(HttpServletResponse.class.getResource(fileName), response.getHeader(""Cache-Control""));
			assertEquals(HttpServletResponse.class.getResource(fileName), response.getHeader(""Pragma""));
			Object tmp = request.getAttribute(""javax.servlet.include.servlet_path"");
			if (tmp == null) {
				throw new IllegalStateException(""Request has no include servlet path"");
			}
			if (tmp instanceof String) {
				f = getFile(tmp + ((String)tmp).substring(1,tmp.length()));
				assertNotNull(""Servlet path not null"", f);
				assertEquals(HttpServletResponse.class.getResource(tmp + ((String)tmp).substring(1,tmp.length())), response.getHeader(""Cache-Control""));
				assertEquals(HttpServletResponse.class.getResource(tmp + ((String)tmp).substring(1,tmp.length())), response.getHeader(""Pragma""));
				tmp = request.getAttribute(""javax.servlet.include.request_path"");
				if (tmp == null) {
					throw new IllegalStateException(""Request has no include request path"");
				}
				if (tmp instanceof String) {
					f = getFile(tmp + ((String)tmp).substring(1,tmp.length()));
					assertNotNull(""Servlet path not null"", f);
					assertEquals(HttpServletResponse.class.getResource(tmp + ((String)tmp).substring(1,tmp.length())), response.getHeader(""Cache-Control""));
					assertEquals(HttpServletResponse.class.getResource(tmp + ((String)tmp).substring(1,tmp.length())), response.getHeader(""Pragma""));
					tmp = request.getAttribute(""javax.servlet.request_path"");
					if (tmp == null) {
						throw new IllegalStateException(""Request has no include request path"");
					}
					if (tmp instanceof String) {
						f = getFile((String)tmp + ((String)tmp).substring(1,tmp.length()));
						assertNotNull(""Servlet path not null"", f);
						assertEquals(HttpServletResponse.class.getResource(""none""), response.getHeader(""Cache-Control""));
						assertEquals(HttpServletResponse.class.getResource(""none""), response.getHeader(""Pragma""));
						tmp = request.getAttribute(""javax.servlet.request_context_path"");
						if (tmp == null) {
							throw new IllegalStateException(""Request has no include request context path"");
						}
						if (tmp instanceof String) {
							f = getFile((String)tmp + ((String)tmp).substring(1,tmp.length()));
							assertNotNull(""Servlet path not null"", f);
							assertEquals(HttpServletResponse.class.getResource(""none""), response.getHeader(""Cache-Control""));
							assertEquals(HttpServletResponse.class.getResource(""none""), response.getHeader(""Pragma""));
							tmp = request.getAttribute("""
d015590b-f7d9-4ad7-af5d-372fb7f19db5,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_2Test.java,56.911160469055176,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }
}
","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {

    /*
     * Test to ensure javax.servlet.ServletRequest's set* methods
     * work with JPCM/ServletRequest objects.  We need the getParams method
     * to work with JPCM/ServletRequest objects, so we just do its setParams
     * method here.
     */ 
    void testSetParams(ServletRequest sc) {
        String[] values = JPCMRequestContext.getParamValues(
                ""httpMethod"");
        JPCMRequestContext.setParams(sc, values, values.length);
        values = JPCMRequestContext.getParamValues(
                ""httpVerb"");
        assertEquals(new String[] {""PUT"", ""DELETE"", ""GET"", ""HEAD"", ""POST"", ""PATCH"", ""OPTIONS"", ""TRACE"" },
                            values);

        values = JPCMRequestContext.getParamValues(""httpVerb"");
        assertEquals(new String[] {""PUT"", ""DELETE"", ""GET"", ""HEAD"", ""POST"", ""PATCH"", ""OPTIONS"", ""TRACE"" },
                             values);
    }

    /*
     * Test to ensure javax.servlet.ServletRequest's set* methods
     * work with JPCM/ServletRequest objects.  We need the getParam values
     * method to work with JPCM/ServletRequest objects, so we just do its setParams
     * method here.
     */
    void testSetRequestParams(ServletRequest sc) {
        String[] values = JPCMRequestContext.getParamValues(""httpMethod"");
        JPCMRequestContext.setRequestParams(sc, values, values.length);
        values = JPCMRequestContext.getParamValues(""httpVerb"");
        JPCMRequestContext.setRequestParams(sc, values, values, values.length);
        values = JPCMRequestContext.getParamValues(""httpVerb"");
        assertEquals(new String[] {""POST"", ""DELETE"", ""GET"", ""PUT"", ""HEAD"", ""OPTIONS"", ""PATCH"", ""TRACE""},
                        values);

        values = JPCMRequestContext.getParamValues(""httpVerb"");
        JPCMRequestContext.setRequestParams(sc, values, values.length);
        assertEquals(new String[] {""POST"", ""DELETE"", ""GET"", ""PUT"", ""HEAD"", ""OPTIONS"", ""PATCH""}, values);
    }

    void checkHttpHeaders(String[] values) {
        // the following headers were added as headers from the
        // servlet so we just compare them here
        
        checkHttpHeader(values, ""Content-Disposition"");
        checkHttpHeader(values, ""Content-Disposition"");
        
        // this may not be a good idea, so only test it if the headers
        // are present and the values are the same: 
        Object[] other = new Object[2];
        for (int i = 0; i < other.length; i++) {
            try {
                HttpServletRequest r = (HttpServletRequest)request;
                other[i] = r.getHeader(""Content-Disposition"");
                if(other[i] == null)
                    other[i] =  r.getHeader(""Content-Disposition"");
            } catch (Exception e) {}
            if(other[i]==null) {
                if(i==0)
                    fail(""could not read out content disposition"");
                else
                    System.out.println(""expecting not a value"");
            }
        }
        
    }
    
	void checkHttpHeader(String[] values, String headerKey) {
		if(values.length!= 0) {
    		// first element is a regular or absolute value
    		JPCMRequestContext.checkHttpHeader(values, ""HTTP/""+headerKey+"": ""+(String[])values[0]);

    		// now try with a null first element as an alternative:
    		if (values[0] instanceof String) {
	    		JPCMRequestContext.checkHttpHeader(values, ""HTTP/""+headerKey+"": ""+(String[])values[0].toString());
	    	}
		}
	}
	
    private void checkHttpHeader(String[] values, String key) {
        if(values.length > 1) {
        	JPCMRequestContext.checkHttpHeader(values, ""HTTP/""+key+"": ""+(String[]) values[0]);
        	JPCMRequestContext.checkHttpHeader(values, ""HTTP/""+key+"": ""+(String[]) values[1]);
        }
    }

    public void testGetFlash(ServletResponse sc) throws IOException {
        String url = ""http://www.google.com/"";
        String contentDisposition = ""attachment; filename=google.txt"";
        String flash = new String();
        byte[] bytes;
        
        String[] values = JPCMRequestContext.getParamValues(""getFlash"");
        
        String[] expected = {null, null, null, null, null, null, null};

        System.out.println(""url"" + url);
        
        for (int i = 0; i < expected.length; i++) {
            if (values[i]!= expected[i]) {
                System.out.println(values[i]+""!= expected ""+expected[i]);
                fail(""wrong flash contents"");
            }
        }
        
        bytes = new ByteArrayOutputStream();
        JPCMRequestContext.setCache(true);
        JPCMRequestContext.setCaching(false);

        // JPCMRequestContext.getParamValues() returns the values in the format
        // {values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7]},
        // so these values needs to matched the above array
        values = JPCMRequestContext.getParamValues(""getFlash"");
        int index = 0;
        int total = 0;
        for (int i = 0; i < values.length; i++) {
            if (values[i]!= expected[index]) {
                System.out.println(
                        ""values[i]=  "" + values[i] + ""!= expected ("" + expected[index] + "")"");
                fail(""wrong flash contents"");
            }
            index++;
            total++;
        }
        assertEquals(contentDisposition, values[0]);
        assertEquals(getRequest.getParameterValuesAsString(), values[1]);
        assertEquals(getRequest.getParameterValuesAsString(), values[2"
c6e116cb-dd5a-4e84-90c6-0e726c7d2a12,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_3Test.java,57.0202260017395,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }
}
","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {

	@Test
    public void aJVCRequest()throws IOException {
        HttpServletResponse response = new JVCResponseContext(request, responseMessage);
        assertNotNull(response);
        assertNotNull(response.getInStream());
        assertNotNull(response.getOutStream());
        assertEquals(ContentTypes.TEXT_PLAIN_UTF_8, response.getContentType());
        
    }

    @Test
   public void testGetRequest() {
         // Create the JVC request object
        HttpServletRequest request = new JVCRequestContext(requestMessage, servletContext).getRequest();
   
   // check result from Json Serialization
           assertNotNull(request);
   
   // check result from reading request in the input stream
           assertTrue(request.getInputStream() instanceof InStream);
   
   // check result from reading request in the OutputStream
           assertTrue(result instanceof JsonInOutStream);
 
    }

   @Test
   public void testFormField() throws JsonProcessingException, IOException {
       File tempDir = new File(""./tempdir"");
       assertTrue(tempDir.exists());

       File file = new File(""./file"");

   // check result from Form Field reading
       assertTrue(formField.getFileName() == file.getName());
        
    }

      @Test
   public void testFormSubDir() throws JsonProcessingException, IOException {
       File tempDir = new File(""./tempdir"");
       assertTrue(tempDir.exists());

       File file = new File(""./file"");

   // check result from Form Field reading
       Set<String> files = new HashSet<>();
       files.add(file.getAbsolutePath());
       Set result = formSubDir.findSubDirs(files);

   // check result from Form Field reading
       assertEquals(new File(""./file""), result.toString());
        
    }
    
}
"
1b797ea5-44aa-4748-907b-a493077a9449,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_4Test.java,56.36937069892883,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }
}
","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {

void testFileUpload() throws IOException, UnsupportedEncodingException {
	assertNotNull(request);
	assertNotNull(request.getOutputStream());
}	
	
}
"
0ca8e0f9-1917-476e-ae43-71cda10c6330,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_5Test.java,55.08542513847351,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }
}
","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {

   /**
   * Test method for
   * {@link java.util.map.Map#get(java.lang.String)}.
   */
  @Test
  public void testGetCookie2() {
    Cookie cookie1 = (Cookie)request.getCookies()[0];
    Cookie cookie2 = (Cookie)request.getCookies()[1];
    String value1 = cookie1.getValue();
    String value2 = cookie2.getValue();
    assertEquals(value1, ""jvctest"");
    assertEquals(value2, ""jvctest"");
  }
  
  /**
   * Test method for
   * {@link java.util.Map#get(java.lang.String)}.
   */
  @Test
  public void testGetCookie1() {
    Cookie[] array = request.getCookies();
    String value = ((Cookie)array[0]).getValue();
    String value2 = ((Cookie)array[1]).getValue();
    assertEquals(value, ""jvctest"");
    assertEquals(value2, ""jvctest"");
  }
 
  /**
   * Test method for
   * {@link java.util.Map#get(java.lang.String)}.
   */
  @Test
  public void testGetCookie() {
    String value = request.getCookies()[0].getValue();
    String value2 = request.getCookies()[1].getValue();
    assertEquals(value, ""jvctest"");
    assertEquals(value2, ""jvctest"");
  }

  /**
   * Test method for
   * {@link javax.servlet.http.HttpServletRequest#getPathInfo()}.
   */
  @Test
  public void testGetPathInfo() {
    assertEquals(request.getPathInfo(), ""/"");
  }

  /**
   * Test method for {@link javax.servlet.http.HttpServletRequest#getParameter(String)}.
   */
  @Test
  public void testGetParameter() {
    String[] array = request.getParameterValues(""p1"");
    assertEquals(array[0], """");
    assertEquals(array[1], """");
  }

  /**
   * Test method for {@link javax.servlet.http.HttpServletRequest#getParameterMap()}.
   */
  @Test
  public void testGetParameterMap() {
      Map<String, List<String>> map = request.getParameterMap();
      assertEquals(map.size(), 2);
      Entry<String, List<String>> entry0 = map.entrySet().iterator().next();
      assertEquals(entry0.getKey(), ""p1"");
      List<String> values = entriesToList(entry0.getValue());
      assertEquals(values.size(), 2);
      assertTrue(values.contains(""value1""));
      assertTrue(values.contains(""value2""));
  }

  @Test
  public void testGetInputStream() throws IOException {
    try (FileInputStream stream = new FileInputStream(""src/test/files/testfile.txt"")) {
      assertNotNull(stream);
      assertNotNull(request.getInputStream());
    }
  }
  
  @Test
  public void testGetInputStreamFile() throws IOException {
    try (FileInputStream stream = new FileInputStream(""src/test/files/testfile.txt"")) {
      assertNotNull(stream);
      assertNotNull(request.getInputStream(0));
    }
  }
  
  @Test
  public void testGetInputStreamContentDisposition() throws IOException {
    try (FileInputStream stream = new FileInputStream(""src/test/files/testfile.txt"")) {
      assertNotNull(stream);
      try {
        request.getContentDisposition("""");
        assertEquals(0, count);
        assertNotNull(count);
      } catch(IOException e) {
        fail(""ContentDisposition should be resolved"");
      }
    }
  }

  @Test
  public void testGetInputStreamContentLength() throws IOException {
    try (FileInputStream stream = new FileInputStream(""src/test/files/testfile.txt"")) {
       assertNotNull(stream);
       try {
        request.getContentLength();
        fail(""content length not supported"");
       } catch(IOException e) {
       }
    }
  }

  private String[] entriesToList(List<String> list) {
    ArrayList<String> result = new ArrayList<>();

    for (String entry: list) {
      result.add(entry);
    }

    return result.toArray(new String[result.size()]);
  }
}

// end JVCTestContext_5Test.java

"
f1c612ed-ab74-4495-b9ab-c9a8b30ba591,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_6Test.java,56.68212914466858,stop,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }
}
","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {
// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"")? path : ""/"" + path);
    }
}

// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {
		
	public static final String POST = ""POST"";
    public static final String PUT = ""PUT"";
    public static final String DELETE = ""DELETE"";
    public static final String GET = ""GET"";
    
	public static final List<String> DEFAULTS   = Arrays.asList(""/index.jsp"", ""/index.xml"", ""/index.js"", ""/index.html"");
	public static final List<String> DEFAULTS_A = Arrays.asList(""/home.jsp"", ""/home.xml"", ""/home.js"", ""/home.html"");
	
	private Map<String,String> DEFAULTS_m = new HashMap<String,String>();
	
	public static final List<String> GET_REL_m       = Arrays.asList(""GET"", ""POST"", ""PUT"", ""DELETE"", ""GET"", ""HEAD"");
	
	private Map<String,String> GET_REL_m_A = new HashMap<String,String>();
	
	private Map<String,String> POST_REL_m_A = new HashMap<String,String>();
	
    public Map<String,String> getDefaults() {
		return DEFAULTS_m;
    }
	
	public Map<String,String> getDefaults_A() {
		return DEFAULTS_m_A;
    }
	
	private Map<String,String> GET_REL_m_A_a = new HashMap<String,String>();
	
	public Map<String,String> getRelPost_RelA_m_A() {
		return GET_REL_m_A_a;
    }
	
	public Map<String,String> getRelPost_RelA_m() {
		return POST_REL_m_A;
    }
	
		
	@Test
	public void POST_GET() throws Exception {
		// test POST relative to index.jsp.
		String relativePath = ""/"";
		getRelPost_RelA_m().put(POST, relativePath);
		assertEquals(relativePath, JVCRequestContext.absPath(relativePath));
		assertTrue(request.containsFieldInContext(""request.relativeUrl""));
		assertTrue(request.containsFieldInContext(""relativeUrl""));
		
		
		// test POST relative to /index.jsp
		relativePath = POST;
		getRelPost_RelA_m().put(POST, relativePath);
		assertEquals(relativePath, JVCRequestContext.absPath(relativePath));
		assertTrue(request.containsFieldInContext(""request.relativeUrl""));
		
		
		// test GET relative to /index.html
		getRelPost_RelA_m_A.put(GET, GET);
		assertEquals(GET, JVCRequestContext.absPath(GET));
		assertTrue(request.containsFieldInContext(""request.relativeUrl""));
		assertTrue(request.containsFieldInContext(""relativeUrl""));
		
		
		getRelPost_RelA_m_A.put(DELETE, POST.replaceAll(""/"", GET.replaceAll(""/"", ""."")+""/""+GET));;
		assertEquals(POST.replaceAll(""/index.html"",""index.js""), JVCRequestContext.absPath(POST.replaceAll(""/"", GET.replaceAll(""/"", ""."")+""/""+GET)));
		assertTrue(request.containsFieldInContext(""request.relativeUrl""));
		assertTrue(request.containsFieldInContext(""relativeUrl""));
		
        getRelPost_RelA_m_A.put(GET, POST);
		assertEquals(POST.replaceAll(""/index.html"",""index.js""), JVCRequestContext.absPath(POST.replaceAll(""/"", GET.replaceAll(""/"", "".""))+""/""+GET));
        assertTrue(request.containsFieldInContext(""request.relativeUrl""));
        assertTrue(request.containsFieldInContext(""relativeUrl""));
        
        // test GET relative to /index.js
        getRelPost_RelA_m_A.clear();
        getRelPost_RelA_m_A.put(GET, POST);
        getRelPost_RelA.clear();
        getRelPost_RelA.put(GET, POST);
        assertEquals(POST.replaceAll(""/"", GET.replaceAll(""/"", ""."")+""/""+GET), JVCRequestContext.absPath(POST.replaceAll(""/"", GET.replaceAll(""/"", ""."")+""/""+GET)));
        assertTrue(request.containsFieldInContext(""request.relativeUrl""));
        assertTrue(request.containsFieldInContext(""relativeUrl""));
        
        
		// test GET relative to /index.jsp
		getRelPost_RelA_m_A.clear();
		getRelPost_RelA_m_A.put(POST, POST);
		getRelPost_RelA_m.clear();
        getRelPost_RelA.put(POST, POST);
		assertEquals(POST.replaceAll(""/index.jsp"",""index.js""), JVCRequestContext.absPath(POST.replaceAll(""/"", GET.replaceAll(""/"", ""."")+""/""+POST)));
        assertTrue(request.containsFieldInContext(""request.relativeUrl""));
        assertTrue(request.containsFieldInContext(""relativeUrl""));
        
		
		// test DELETE /index.jsp
		int offset = GET.replaceAll(""/index.jsp"","""").length();
		getRelPost_RelA_m_A.clear();
		getRelPost_RelA_m.clear();
        getRelPost_RelA.clear();
		getRelPost_RelA.put(POST, POST.replaceAll(""/index.jsp"", ""/index.html""));
		getRelPost_RelA.put(GET, POST.replaceAll(""/index.html"", GET));
        assertEquals(POST.replaceAll(""/index.html"", GET), JVCRequestContext.absPath(POST.replaceAll(""/index.html"", GET)));
        assertTrue(request.containsFieldInContext(""request.relativeUrl""));
        assertTrue(request.containsFieldInContext(""relativeUrl""));
        
        
	}

}
"
a9264adb-0317-49fc-880b-16fbe72fb0ca,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_7Test.java,56.804739475250244,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }
}
","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {

	private String makeLink(String anchor, String path, String extra) {
		// create the context
		JVCRequestContext context = new JVCRequestContext(anchor, path);

		// add a link with the optional arguments in the path
		context.getResponse().addHeader(""X-FLASH"", ""Hello World"");

		// request and print out the response
		context.getResponse().setStatus(HttpServletResponse.SC_OK);
		context.getResponse().getWriter().write(
			""FLASH ""+ path + extra
		);

		// return the response
		return getPrintableResult(context.getResponse(), context.getFlow()); 
	}
    
    /**
    * Test that links can be formatted.
    */
    @Test
    public void testLinksCanBeFormatted() {
                                       
        // an image is required for the thumbnail request
        HttpURLConnection connection = null;
        HttpURLConnection htmlConnection = null;
        ArrayList<File> files = new ArrayList<File>(1);
                                    
        String key = makeLink(""key"", ""/some/url/path"");
                                                    
        if (key!= null) {

            // if the context is redirecting, redirect to another url
            connection = getHttpURLConnection(""/some/url/path"");
            files.add(getFile(""some/path.gif""));
            
            connection.addRequestProperty(""Cache-Control"", ""no-cache"");
            connection.addRequestProperty(""Pragma"", ""no-cache"");
            connection.addRequestProperty(""X-File-Name"", ""jvc.gif"");
            connection.addRequestProperty(""Content-type"", ""image/gif"");
          

            htmlConnection = getHttpURLConnection(key);
            connection.setUseCaches(false);
            connection.connect();

            // print out the response
            assertEquals(-1, connection.getErrorCode());

            assertEquals(Response.SC_OK, connection.getResponseCode());


            String contentType = connection.getHeaderField(""Content-type"");
            assertTrue(contentType.startsWith(""image/"") && contentType.endsWith(""/"") && contentType.length() > 3);
            String contentDisposition = connection.getHeaderField(""Content-Disposition"");
            assertTrue(contentDisposition.endsWith(""attachment; name=""));



            // read in the image
            String inputFile = getTextFileContents(connection.getInputStream());
            assertNotNull(""Missing path"", inputFile);
            inputFile = removeEndToken(inputFile); // strip the trailing end token in the path
                                                    // (useful for the link text)

            files.add(getFile(inputFile));

            // read in the image
                    
            File outFile = getFile(contentType + ""/"" + contentDisposition + ""/jvc.gif"");
            outFile.deleteOnExit();
          
            connection.connect();
            
            // should no longer be able to download
            assertFalse(connection.getLastModified());
            assertFalse(connection.getUseCaches());
                                                     
            assertFalse(connection.getResponseCode(), true);
            
            // should have written
            //assertEquals(200, connection.getResponseCode()); 


            // form the link
            output = context.makeLink(files, outFile);

            // get the results
            connection.connect();

            outFile.deleteOnExit();
            connection.disconnect();
            connection = null;
            htmlConnection = null;

            // there should now be one result
            assertNotNull(outFile.exists());
            String linktext = new String(getBytes(outFile), ""UTF-8"");


            // request and print out the response
            assertEquals(-1, connection.getErrorCode());

            assertEquals(Response.SC_OK, connection.getResponseCode());

            // verify that the content was in a string
            assertTrue(linktext.length() > 0);

            assertTrue(linktext.replaceAll("" "", """")
                          .replaceAll(""\n"", """" )
                          .replaceAll(""\r"", """" )
                          .startsWith(extra));
                                    
        }
    }
    
    /**
    * Use case where the link is an absolute path.
    */
    @Test
   public void testLinkNotAnImage() {
            
        String key = makeLink(""key"", ""/some/url2/path2"");

        if (key!= null) {

            HttpURLConnection connection = null;

            connection = getHttpURLConnection(""/some/url2/path2"");

            // only request headers
            connection.setRequestProperty(""X-File-Size"", ""0"");
            connection.setRequestProperty(""Content-Type"", ""text/plain"");

            assertNull(connection.getHeaderField(""Etag""));
            String url = (connection).getURL().toString();
            
            HttpURLConnection outConn = getHttpURLConnection(key);
            outConn.connect();
                    
            Connection connectionOut = outConn.getConnection();
            assertSame(""Connection out should share the same connection"", connectionOut, connection);
                       
            assertEquals(url, connectionOut.getURL().toString());

        }
    }
    
    /**
    * Test that we cannot write if the response header can't be set.
    */
    @Test(expected=IllegalStateException.class)
    public void testFileWriteThrowsException() throws Exception {
        
        String key = makeLink(""key"", ""/some/url2/path/that/stry"");
        HttpURLConnection conn = getHttpURLConnection(""/some/url2/path/that/stry"");    
    }
    
    /**
    * Test that we cannot read when the content length can't be determined.
    */
    @Test(expected=IllegalStateException.class)
    public void testFileLengthReadThrowsException() throws Exception {
        
        String key = makeLink(""key"", ""/some/url2/path/that/stry"");
        HttpURLConnection conn = getHttpURLConnection(""/some/url2/path/that/stry"");    
    }
    
    /**
    * Test that we can read the binary content but can't seek.
    */
    @Test
    public void testNotSeekWrite() throws Exception {
        
        String key = makeLink(""key"", ""/some/url2/path/that/stry"");
        HttpURLConnection conn = getHttpURLConnection(""/some/url2/path/that/stry"");    
    }
    "
e81ab620-7891-46d6-bd75-05321e356391,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_8Test.java,55.776036977767944,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }
}
","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {

	private Integer _status;
    private Map<String,Object> _properties;
	
	/**
    * Constructor for JVCRequestContext_8Test.
	*/
    public JVCRequestContext_8Test() {
    }
    
    /**
     * Creates a new instance of this JVCRequestContext test.
     * @return a create JVC request context.
	 */
    public static JVCRequestContext createContext() {
        return new JVCRequestContext();
    }
    /**
	 * Set a status to this request.
	 * @param status a new status for the request.
	 * @exception Exception if there was an actionable error.
	 */
    public void setStatus(Integer status) {
        _status = status;
    }
	
	/**
    * Get a status from the request context.<br>
    * This method returns null as the values are irrelevant unless the 
    * value of the property is null.  If it returns a property-value a 
    * IllegalArgumentException will be caught.
	* @return a value from the request context. 
	*/
    public Integer getStatus(){
    	this._properties = (Map<String,Object>) _properties.get(""status"");
		return null;
	}
	
	/**
    * Set a property from this request context.  If a new status is found
    * this property value will be set.
	* @param key the new property key that will cause the value of the 
	* current status to be set.  This value is used for the 
	* ""status"".
	* @param value a new value for the property.
	*/
    public void setProperty(String key, Object value) {
    	_properties.put(key, value);
    }

	/**
	 * Set a property from this request context.  If the property is
	 * a parameter this will set the value according an <CODE>String</CODE> value.
	 * @param key the property key that will be set.
	 * @param value a <CODE>String</CODE> to set the property value.
	 */
    public void setProperty(String key, String value) {
    	this.setProperty(key, value.toCharArray());
    }
	
	/**
    * Get a property value for the request context.  If no property is defined
    * this will return null as the property value.
	* @return a <CODE>String</CODE> value from the request context.
	*/
    public String getProperty(String key) {
    	return (String) _properties.get(key);
	}
	
	/**
    * Get a property value for the request context.  If no property is defined
    * this will return <CODE>null</CODE> as the property value.
	* @return an <CODE>Object</CODE> value from the request context.
	*/
    public Object getProperty(String key, Object def) {
		return (Object) _properties.get(key, def);
	}
		
    /**
     * Retrieves the map that provides the current status for the request.
     * @return the map that provides the current status.
    */
    public Map getPropertyMap() {
        return _properties;
    }
	
  	/**
    * Retrieves the Map that provides the current status for the request.  The map can
    * either be a Map of a property key to a object to retrieve the property-value as
    * a String, or a List of property key-values to retrieve a List of String values.
    * If the property was set to Object this will return the value of that property.
    * If it was set to String this will return the value of that property as the value.
    * @return the Map that provides the current status.
    */
    public Map getStatusMap() {
        Map currentStatus = (Map) getProperty(""status"");
		if (currentStatus == null)
			return getPropertyMap();
		return (Map)currentStatus;
	}
	
	/**
	 * Get the path variable for this request context.
	 * @return the path for this request context.
	 * @exception Exception if there was an actionable error.
	 */
    public String getPath() {
    	if (_status == null)
    		return getProperty(""path"");
    	return (String) _status;
    }
	
	/**
    * This method returns <CODE>null</CODE> as the value of the property map.
    * @return <CODE>null</CODE> as the value of the property map.
	 */
    public Map<String,Object> getPropertyMap() {
    	return _properties;
    }	
	
	/**
	 * Get the content type for this request context.
	 * @return the content type for this request context.
	 */
    public String getContentType() {
    	return (String) _properties.get(""contenttype"");
	}
	
  	/**
    * Returns the current HTTP request object.  This will always contain the
    * servlet request object set in this test or one of the other parent 
    * class methods.
    * @return a <CODE>HttpServletRequest</CODE> object.
	*/
    public HttpServletRequest getRequest() {
    	return (HttpServletRequest) _properties.get(""request"");
    }	
    /**
    * Get an integer value that is the status from the request context.  This is
    * never <CODE>null</CODE>.
    * @return An integer value that is the status from this object.  Returns
	* zero as it always returns <CODE>null</CODE>.
    * @exception Exception if there was an actionable error in the request.
	*/
	public Integer getStatus() throws Exception {
    	return _status;
	}
	
	/**
    * Returns the <CODE>Writer</CODE> attached to the request object.
    * @return the <CODE>Writer</CODE> this object's attached to.
	 */
    public File getOutputWriter() {
    	return (File) _properties.get(""outputwriter"");
	}
	
	/**
    * Gets the outputstream attached to the request object.
    * @return the outputstream this object's attached to.
	 */
    public OutputStream getOutputStream() 
    "
ac268a54-8ef0-444d-a0c1-a5e087ef022e,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_9Test.java,57.04176092147827,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    public String getFlash(String key) {
        return flash.get(key);
    }
}
","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains one unit test case for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {

    /**
     * Test of {@link JVCRequestContext#getFlash}.
     */ 
    @Test
    public void testGetFlash() throws Exception {
        
        final String fileName = ""fileName"";

        HttpServletRequest request = createRequest();

        InputStream fileContent = new ServletFileUpload(((ServletExternalContext) request.getExternalContext()).getRequest());
        PrintWriter fileContentWriter = new PrintWriter(new OutputStreamWriter(((ServletExternalContext) request.getExternalContext()).getResponse().getOutputStream()));
        
        fileContentWriter.println(""Contents of file:"");

        //
        // Ensure this test works.
        //
        String flashValue = request.getParameter(""flash"");
        assertEquals(""Contents of file is not correct."", ""Contents of file"", flashValue);
        
        String[] fileNames = new String[1];
        fileNames[0] = fileName;
        
        ArrayList<String> flashKeys = new ArrayList<>();
        List<FileItem> uploadItems = new ArrayList<>();
        List<HttpURLConnection> downloads = new ArrayList<>();
        String contentType;
        List <Map<String, Object>> results = new ArrayList<>();
        
        // Create an instance of FileUploader.
        fileUploader = new ServletFileUpload();
   
        // Add an uploader for each of the requested file.
        for(int i=0; i<fileNames.length; i++) {
            fileUploader.addFilenames(fileNames[i]);
            uploadItems.add(new FileItem());
        }

        // Get the file upload objects.  We must get at least one file upload,
        // so the uploader should be non-null.
        assertNotNull(""Null file upload."", fileUploader.getFileItemList(""fileName""));
        
        // Get the files' content type.
        contentType = fileUploader.getContentType(fileNames[0]);

        for(FileItem content : uploadItems) {
            String fileContentType = content.getField(""file_content_type"");
            fileContentType.replace("".jar"", """");

            // Create a content type object from the file's content type.
            HttpContentType httpContent = new HttpContentType(fileContentType);
            List<ContentDisposition> contentDispositionList = new ArrayList<>();
            
            for(ContentDisposition cd : httpContent.getContentDispositionList()) {
                Collection<String> params = cd.getParameters().get(""name"");
                assertEquals(""One ContentDisposition entry was found."", 2, params.size());
                contentDispositionList.add(new ContentDisposition(params.get(0), cd.getName(), cd.getUpload().getName(), cd.getUpload().getMimeType(), cd.getUpload().getAttachment().getName()));
            }

            fileContentContentType = httpContent.getContentContentType();

            if(httpContent.isMultipart() && content.isFormField() && ""fileName"".equalsIgnoreCase(content.getFieldName())) {
                fileName = content.getField(""files"");
                fileSize = Long.parseLong(httpContent.getContentType().substring(11));
            } else if(!""fileName"".equalsIgnoreCase(fileName)) {
                if(!fileContentType.equalsIgnoreCase(HttpContentType.APPLICATION_OCTET_STREAM)) {
                    fileContentContentType = """";
                }
            }

            fileContentWriter.println(""Content of file:"");

            //
            // Ensure this test works.
            //
            if(fileContentType.equalsIgnoreCase(""jar"")
                    || fileContentType.equalsIgnoreCase(""java.jar"")
                    || fileContentType.equalsIgnoreCase(""class"")) {
                if (content.isFormField() && fileName.equalsIgnoreCase("""")) {
                    fileName = ""unnamedFile"";
                }
            }
            try {
                BufferedInputStream bis = new BufferedInputStream(fileContent.getInputStream());
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(fileUrlToSaveTo)));            
                BufferedReader br = new BufferedReader(new InputStreamReader(bis));
                BufferedWriter bw = new BufferedWriter(new FileWriter(new File(fileUrlToSaveTo)));            
                
                PrintWriter writer = new PrintWriter(bw);
                // Create the input stream for the file content
                int bytes = fileContent.read();
                while(bytes!= -1) {
                    bw.write(bytes);
                    if (bytes == '\n') {
                        bw.write('\r');
                    }
                    bytes = fileContent.read();
                }
                
                // Parse JSON
                Object fileObj = JsonUtils.jsonToObj(br.readLine());

                // Parse the content content type.
                String contentContentType = content.getContentType();
                Collection<String> values = fileObj instanceof Collection? ((Collection<? extends Map<String, Object>>) fileObj)
                       .getCollectionByParam(HttpContentType.CONTENT_TYPE_PROPERTY): mapToCollection((Map<String, Object>) fileObj).getCollectionByParam(HttpContentType.CONTENT_TYPE_PROPERTY);

                Iterator<String> valuesIterator = values.iterator();

                Object valueStr;

                if(mapToCollection(collectionOf(valuesIterator)).containsKey(contentContentType)) {
                    valueStr = mapToCollection(collectionOf(valuesIterator))
                           .get(contentContentType);
                }

                else {
                    valueStr = mapToCollection(collectionOf(valuesIterator)).get(contentContentType);
                }

                // Write the content
                if(!content.isFormField()) {
                    br.close();
                    bw.close();
                    writer.close();
                }
                
                // Create the download object
                HttpURLConnection download = (HttpURLConnection)request.getConnection();
                download.setInstanceFollowRedirects((boolean)request.getAttribute(RequestDispatcher.INCLUDE_REDIRECT_AS_PROPERTY));
                download.setRequestContext(new RequestContext(request));
                downloads.add(download);
                
                // Ensure the content length is at least 0
                FileUploadItem item = (FileUploadItem)fileUploader.getFileItem(fileUploader.getFileItem(fileName, content))[0];
                download.setContentLength("
89d6aa71-33fe-41b3-b8e1-6aa90233ebef,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCDispatcher.java,55.95235300064087,length,"// JVCDispatcher.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;

/**
 * JVC request dispatching servlet
 *
 * @author mike dooley
 */
public class JVCDispatcher extends HttpServlet {

    public static JVCRequestContext getRC() {
        return ctxHolder.get();
    }
}
","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains one unit test case for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains one unit test case for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {
public static JVCRequestContext ctxHolder = new JVCRequestContext();
				
	//
	// Constructor
	//

	/**
	* Create a JVCDispatcher using the default JVCTest class.
	*/
	public JVCDispatcherTest() {
		JVCRequestContext.jvctestClass = getClass();
	}
							
	/**
	* Create a JVCDispatcher using the specified JVCTest class.
	* @param testClass The JVTClass to use.
	*/
      public JVCDispatcherTest(Class testClass) {
		JVCRequestContext.jvctestClass = testClass;
	}
							

	//
	// Getters and setters
	//

	public static Object getTBDynClass() {
		return ctxHolder.get().jvctestClass.getCanonicalName();
	}

	public static Class getTBDynClassForTest() {
		return getTBDynClass();
	}
	
	public static Constructor getTADotClass() throws ClassNotFoundException {
		ClassLoader cl = JVCRequestContext.class.getClassLoader();
		Class t = cl.loadClass(""org.junit.Test"");
		Constructor tcc = t.getConstructor(new Class[] {});
		return tcc;
	}

	public static boolean hasTBDynClass() {
		return ctxHolder.get().jvctestClass!= null;
	}

	public static Class getTargetClass() {
		if (hasTBDynClass())
			return getTBDynClassForTest();
		return ctxHolder.get().jvctestClass;
	}

	
	/**
	*
	* Gets the class name of the target class.
		TBD
	* 
	* @throws ClassNotFoundException
	*/

	public Class getTargetClassForTest() throws ServletException {
		Class[] classes = getTBDynClass().getInterfaces();
		assertTrue(classes.length == 1);
		Class targetClass = classes[0];
		//assertTrue(""No target class!"", targetClass.equals(Object.class));
		return targetClass;
	}
		
	public void init() throws Exception {}

	public static Object callTBDynClassMethod() throws InvocationTargetException,
	    IllegalAccessException, ClassNotFoundException, 
	    NoSuchMethodException, SecurityException {
		return getTBDynClassForTest().getMethod(""testMethod"");
	}

	/**
	*
	* Calls the provided target method on the requested target class.
		TBD
	*
	* @throws ServletException
	*/

	public Object callTADotClassMethod() throws ServletException {
		return getTargetClassForTest().newInstance();
	}
	
	public void setDispatcherResponseHeader() throws Exception {	
		setAttribute(""response.dateHeader"", getDate(System.currentTimeMillis()));
		setAttribute(""response.lastRunBy"", ""demo"");
		setAttribute(""response.message"", ""Test Response"");
	}
	

	//
	// Utility methods
	//
	/**
	*
	*/
	
	public static long getDate(long l) {
		return new GregorianCalendar(1970, 0, 1, 0, 0, l).getTimeInMillis();
	}
	
	/**
	*
	*/
	
	public static long getDate(int i) {
		return new GregorianCalendar(1970,0,1,0,0, i).getTimeInMillis();
	}
	
	/**
	*
	*/

	public static String getTimeAsString() {
		GregorianCalendar gc = new GregorianCalendar();
		return new SimpleDateFormat(""HH:mm:ss.SSS"").format(gc.getTime());
	}

 
	public static String getDate(java.util.Date date) {
 
		java.util.TimeZone tz=java.security.AccessController.doPrivilegedAction(""TimeZone.getDefault"");
		return new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"").format(date);
	}

	/**
	*
	*/

	static {
		System.getProperties().put(""java.security.policy"", ""/security-policy.policy"");
		try {
			System.setSecurityManager(new SecurityManager());
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		System.setInheritable(true);
	}

 
	public static ArrayList<Cookie> getAcceptedCookies() {
		return null; 
	}
	
	public static String getDefaultCookieName() {
		return ""fooBar"";
	}
	
	
	public static String getCookieValue(String name) {
		String value =  (String) JVCRequestContext.getCookieHandler().getValue(name);
		return value;
	}
	
 
	public static String getCookieName(String name) {
		String value =  (String) JVCRequestContext.getCookieHandler().getValue(name);
		return value;
	}

	public static String encode(String data) throws UnsupportedEncodingException {
		String result = """";
		Base64Coder b = new Base64Coder();
		result = b.encode(data);
		return result;
	}

	public static String decode(String data) throws UnsupportedEncodingException {
		return (String) JVCRequestContext.getCookieHandler().decodeValue(data);
	}
	
	//
	// JVC and JVCGenerator API
	//

	public static String generate(String name) throws IOException {
		return JVCGenerator.generate(name);
	}
	
	public static String generate(String name, String value) throws IOException {
		return JVCGenerator.generate(name,value);
	}

	public static String delete(String name) {
		return (String) JVCRequestContext.getCookieHandler().deleteValue(name);
	}
		
	/*
	* HTTP Header Handler
	*/
	
	public static void addHeader(String name, String value) {
		JVCRequestContext.getHeaders().add(name, value);
	}
	
	"
