ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
0c12cfb7-cff8-40b2-b3b1-ea49410fe8c9,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_0Test.java,55.886810064315796,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printFields() {
        Field[] f = c.getFields();
        length = f.length;
        String[] StringData = null;
        if (length > 0) {
            StringData = new String[length];
            String tempStr;
            Object obj = new Object();
            if (debug)
                System.out.println(""****************************************"");
            for (count = 0; count < length; count++) {
                try {
                    tempStr = f[count] + ""="" + f[count].get(obj);
                    StringData[count] = tempStr;
                    if (debug)
                        System.out.println(tempStr);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ACCESS EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                } catch (IllegalArgumentException j) {
                    j.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ARGUMENT EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                }
            }
        } else if (debug)
            System.out.println(""No public fields."");
        return StringData;
    }
}
","// ClassInfo_0Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printFields()} method.
*/
class ClassInfo_0Test {","// ClassInfo_0Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printFields()} method.
*/
class ClassInfo_0Test {

    /**
     * Tests of {@link ClassInfo#printFields()} 
     */
    @Test
    public void testPrintFields() {
        ClassInfo.main(""-q"");
    }
}

"
0e5b8ed4-e30d-4e35-81a8-ce2a277d5403,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_1Test.java,59.75868010520935,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods != null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}
","// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {","// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {
// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods!= null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}

// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {
		private final static String[] v = {
				""getConstructor0"",
				""getConstructor1"",
				""getConstructor2"",
				""hashCode0"",
				""hashCode1"",
				""hashCode2"",
				""getConstructor3"",
				""getConstructor4"",
				""getConstructor5"",
				""getMethodsCount"",
				""hashCode0"",
				""hashCode1"",
				""hashCode2"",
				""getInterfacesCount"",
				""hashCode3"",
				""getMethodsCount"",
				""addClass0"",
				""addClass1"",
				""removeObject0"",
				""removeObject1"",
				""removeObject2"",
				""toArray0"",
				""toArray1"",
				""toArray2"",
				""toObject0"",
				""toObject1"",
				""toObject2"",
				""createHashCode0"",
				""createHashCode1"",
				""clone0"",
				""clone1"",
				""clone0"",
				""clone1"",
				""clone2"",
				""clone3"",
				""clone4"",
				""clone5"",
				""clone6"",
				""clone7"",
				""clone8"",
				""clone9"",
				""clone10"",
				""clone11"",
				""clone12"",
				""clone13"",
				""clone14"",
				""clone15"",
				""clone16"",
				""clone17"",
				""clone18"",
				""clone19"",
				""clone20"",
				""clone21"",
				""clone22"",
				""clone23"",
				""clone24""};
		private final static Map<Integer, ClassName> CLASS_COUNTS = {
				
		};
		private final static Map<Integer, ClassName> INTERFACES = {
				
		};	

    /**
     * Main test method.
     */
    @Test
    @TestOnly
    public static void main(String[] args) {
        DEBUG = Boolean.parseBoolean(args[2]);
        ClassInfo_1Test.init();
        for (int i = 0; i < args.length; i += 3) {
			Method method = ClassInfo_1Test.getMethod(args[i], args[i+1]);
			Method method2 = ClassInfo_1Test.getMethod(args[i]);
			String[] a = ClassInfo_1Test.getMethods(ClassInfo.class, method);
			String[] a2 = ClassInfo_1Test.getMethods(ClassInfo.class, method2);
			assertEquals(method, a[1] + """");
			assertEquals(method2, a2[1] + """");
			assertEquals(a.length, a.length);
			int[] classes = new int[a.length];
			for (int x = 0; x < classes.length; x++) {
				ClassInfo.CLASS_COUNTS.get(classes[x]).addClass(ClassInfo.getClass(a[x]));
				classes[x]++;
			}
			ClassInfo.INTERFACES.get(classes.length-1).addClass(ClassInfo.getClass(a.length));
		}
        ClassInfo_1Test.reinit(classes.length);
        ClassInfo_1Test.init();
        for (ClassInfo_1Test.TestData data1 : v) {
            System.out.println(""Test data1:  "" + StringUtils.join(Arrays.asList(data1.names), "",""));
            for (ClassInfo_1Test.TestData data2 : v) {
                if (data2!= null) {
					System.out.println(""Test data2: "" + StringUtils.join(Arrays.asList(data2.names), "",""));
                    String t;
					List<Object> cv = new ArrayList<>();
					if (data1 == null ||!data1.names.contains(data2.names))
                    	t = ""not "" + ((data1 == null)? data2.names : data1.names);
                    else
                    	t = ""same "" + ((data1 == null)? data2.names : data1.names);
                    cv.addAll(ClassInfo_1Test.getInterfaces(ClassInfo.getClass(data1.className)));
					if (ClassInfo_1Test.getClases(cv)!= null)
                        t += (t == null? """" : "", ""+ClassInfo_1Test.getCount((ClassInfo)ClassInfo_1Test.getClases(cv))) + ""\n"" + ""\n"" + ClassInfo_1Test.getCount(ClassInfo.getClass(data2.className));
                    else
                    	t += "" not "" + ClassInfo_1Test.getCount((ClassInfo)ClassInfo_1Test.getClases(cv));
				} else {
					if (data1!= null)
                        t = ""null "" + ((data1 == null)? null : data1.names.toString());
				}
	
				System.out.println(""        TEST DATA + interfaces: "" + t);
			}
		}
        System.out.println(""TOTAL CLASSES:  "" + ClassInfo_1Test.CLASS_COUNTS.size());
		System.out.println(""    TOTAL INTERFACES:  "" + ClassInfo_1Test.INTERFACES.size());
    }

	//----------------------------------------------------------------------
	public static void init() {
		for (int i = 0; i < v.length; i++)
			ClassInfo_1Test.printMethods();
	}

	//----------------------------------------------------------------------
	public static void reinit(int initialCount) {
		ClassInfo.CLASS_COUNTS.clear();
		ClassInfo.INTERFACES.clear();
		ClassInfo.CLASS_COUNTS.putAll(ClassInfo_1Test.CLASS_COUNTS());
		ClassInfo.INTERFACES.putAll(ClassInfo_1Test.INTERFACES());
		CLASS_COUNTS.clear();
		INTERFACES.clear();
	}

	private ClassInfo(ClassInfo data) {
		init();
		for (int i = 0; i < data.names.size(); i++) {
			ClassInfo_1Test.CLASS_COUNTS.put(i, data);
			System.out.println(""   added "" + ClassInfo.CLASSCOUNTS.get(i));
		}
	}

	public static class TestData implements Serializable {
        String names[];
		public TestData() {
			names = new String[10];
			Arrays.fill(names, """");
		}
		public final static List<String> testMethods = new ArrayList<>();
		public final static List<ClassName> classes = new ArrayList<>();
	}
	
	public static class TestData_"
0170cbd5-614e-4bad-a1f1-ad753ea07c15,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_2Test.java,57.4486083984375,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}
","// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {","// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {
// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.')!= -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {
		/**
		* No test code generated here.
		*/
    private static final String[] null = {};
    private static final String[] all = {};
		
	@Test
	public void test_constructor_1() throws NoSuchMethodException, SecurityException {
	
		//noinspection StatementWithEmptyBody
		if (classInfo == null)
			return;
		
		assertNotNull(classInfo.getClass());
		assertNotNull(classInfo.getClass().newInstance());
	}
	
	@Test
    public void test_printMethods_2() throws NoSuchMethodException {
    	
    	if (isTestClassEnabled(ClassInfo.class)) {
			String[] interfaces;
    		ClassInfo_2 testInfo = new ClassInfo_2();
    		public boolean testConstructor(TestInfo testInfo, Object instance, Object[] args) throws Throwable {
    			assertNotNull(""testConstructor"", args);
    			assertTrue(""testConstructor"", all.length == args.length);
				if (false) {
					int i = 0;
					ClassInfo new1 = (ClassInfo) testConstructorArgs[0].getClass ().newInstance();
					ClassInfo.printMethods(testConstructorArgs[0].getClass ());
    			}
    			if (all.length == 0) {
    				System.out.println(""*** Printing all methods ***""
    				 + ""============================"");
    	    		ClassInfo_2.printMethods(testInfo.getClass(), System.out);
    				System.out.println(""==========================================="");
    				return false;
    			} else {
    				if (cMethods.length > 0)
    					System.out.println(""*** Printing methods ***""
    					 + ""========================"");
    				interfaces = ClassInfo.printMethods(testInfo.getClass(), Arrays.asList(ClassInfo.all));
    				System.out.println(""interfaces = "" + interfaces);
    				if (interfaces.length == 0) {
    					System.out.println(""*** Printing all methods ***""
    					 + ""========================"");
    	    			ClassInfo_2.printMethods(testInfo.getClass(), System.out);
    					System.out.println(""==========================================="");
				    return false;
    				} else
    					return true;
    			}
    		}
    		public void assertConstructor(TestInfo testInfo, Object instance, Object[] args,
    		 		String[] foundMethods, Throwable expectedException) throws Throwable {
    			String[] notFoundMethods = getClassNameSorted(testInfo.getClass()).split(""$"");
    			for (int i = 0; i < notFoundMethods.length; i++) {
    				assertEquals(foundMethods[i], ""NOT_FOUND_METHOD"" + i);
    			}
    			assertEquals(foundMethods.length, args.length);
    		}
    		
    		
    		@Test
    			public void test_constructor_2() throws NoSuchMethodException {
    				if (cMethods.length == 0) {
    					System.out.println(""The class can't be created. ""
    					+ ""You must use one of the methods to create a class."");
    				} else {
    					System.out.println(""The class can be created."");
    				}
    			}
    		
    		public void test_constructor_3() throws Throwable {
    			testConstructor((ClassInfo)testInfo,null,(Object[])null);
    		}
    		public void test_constructor_7() throws Throwable {
    			try {
    				testConstructor((ClassInfo)null, (Object[])null);
    			} catch (RuntimeException e) {
    				Assert.assertTrue(e.getMessage().equals(""expected RuntimeException""));
    			}
    		}
    		public int test_constructor_9() throws Throwable {
    			return 0;
    		}
    		
    	    public Object test_allConstructors_1() throws Throwable {
    			return all;
    		}
    		
    		public Object test_allConstructors_2() throws Throwable {
    			return all;
    		}
    		
    		public Object test_allConstructors() throws Throwable {
    			return all;
    		}
			
    		public String[] test_allMethods() {
    			return all;
    		}
    		
    		public Throwable getExpectedException(ClassInfo.ClassException throwableClassException) {
    			if ((TestInfo.class.isAssignableFrom(throwableClassException.getClass()) ||
    					TestInfo.class.isAssignableFrom(throwableClassException.getClass().getSuperclass()))
                            && throwableClassException.getClass().getName()!= null
                            && throwableClassException.getClass().getName().startsWith(""java.lang"")) {
    				return throwableClassException;
    			}
    			return null;
    		}
    }
}"
996f72fb-db38-47dc-8fb3-11fa89a17c34,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_3Test.java,59.9238338470459,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfo_3Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_3Test {","// ClassInfo_3Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_3Test {

	/**
	 * Set up the test so that the constructor exists
	 */
	static {
		try {
			ClassInfo.staticConstructors();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
		
	/**
	 * Tests constructor of class {@code java.beans.Introspector} by instantiating the constructor
	 * and passing some instances of an interface to instantiate the constructor for its methods.
	 */
	static void testConstructors() {
		System.out.println(""*** ClassInfo_3Test.testConstructors() ***"");
		ClassInfoInfo ci = new ClassInfoInfo();
		ci.printConstructors();
		java.beans.Introspector intr = c.getBeanInfo().getBeanDescriptor().getIntrospector();
		Set interfaces = intr.getAllInterfaces();
		Iterator interfacesIter = interfaces.iterator();
		interfaceToClassObject = new HashMap<String,String>();
		while (interfacesIter.hasNext()) {
			String iface = (String) interfacesIter.next();
			System.out.println(""Testing interfaces for '"" + iface + ""' interface"");
			interfaceToClassObject.put(iface, introspectionClass(forInterface(iface)));
		}
		Iterator interfacesIter2 = interfaces.iterator();
		interfaceToClassObject2 = new HashMap<String,String>();
		while (interfacesIter2.hasNext()) {
			String iface = (String) interfacesIter2.next();
			System.out.println(""Testing interfaces for '"" + iface + ""' interface2"");
			interfaceToClassObject2.put(iface, introspectionClass(forInterface(iface)));
		}
	}

	/**
	 * The {@code public} constructor {@code introspectionClass(String)} is
	 * used to do a reflective class construction.
	 */
	static class ClassInfoInfo {

		public int constructor(String[] arg) {
			return 111;
		}

		public String forInterface(String iface) {
			return ""public""+iface+""Interfaces""+iface;
		}
	}

	/**
	 * The {@code public} constructor {@code introspectionClass} is used to do a reflective class construction.
	 */
	static abstract class ClassInfoInfo_3Test_1 implements ClassInfoIntrospector {
			public String forInterface(String iface) {
				return ""public""+iface+""Interfaces""+iface;
			}
	}

	/**
	 * The {@code public} constructor of {@code JSTestBeanInfo} is used as a reflection
	 * constructor for JSTestBean.
	 */
		static class ClassInfoInfo_3Test_2 implements ClassInfoIntrospector {
			static {
				try {
					ClassInfoInfo_3Test_2 ci = new ClassInfoInfo_3Test_2();
					ci.printConstructors();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

					public int forInterface(final String iface) {
				return 111;
				}
			
	}

	/**
	 * Test for method {@link ClassInfo#ClassInfo_3Test_2#ClassInfo_3Test_2()}
	 * Assert that the interface is as expected.
	 */
	@Test
	public void test() {
		System.out.println(""*** classinfo_3Test_2.test() ***"");
	}

	/**
	 * Test for method {@link ClassInfo#ClassInfo_3Test_2#forInterface(String)}
	 * Assert that the interface is as expected.
	 */
		public void testForInterface(final String iface) {
			System.out.println(""Testing iface for ClassInfo_3Test_2.forInterface(iface): "" + iface);
		}

		
	@Test
	public void test2() {
		System.out.println(""*** classinfo_3Test_2.test2() ***"");
		try {
			ClassInfo_3Test_2 ci = new ClassInfo_3Test_2();
			TestUtils.methodFor(ClassInfo_3Test_2.class, ""testForInterface"", String.class, ci);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			fail();
		}
	}

}

// ClassInfo_3Test.java
"
7b39e9d8-68d0-498b-97fb-8bf54ab1830b,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_4Test.java,51.93747138977051,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c != java.lang.Object.class && !c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data != null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC != null && superC != java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data != null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size() != 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {","// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {
// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c!= java.lang.Object.class &&!c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data!= null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC!= null && superC!= java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data!= null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size()!= 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {
		
	/**
	     * ClassInfo_4Test's data parameters.
	*/
	static final int debug = 0;
	static final int numTestCases = 1;
	static final Class[] c1 = { null };
	static final Class[] c2 = { java.lang.String.class, java.lang.Class.class, java.lang.Runnable.class };
	static final Class[] c3 = { java.lang.Runnable.class, java.lang.Runnable.class, java.lang.Object.class, Object.class, java.lang.Object };
	static final Class[] c4 = { java.lang.String[].class };
	static final Class[] c5 = { null};
	static final Object[] c6 = { null, ""a"", null, ""b"", ""c"", ""d"", null, null, null, null, null };
	static final Object[] c7 = { null, ""a"", null, ""b"", ""c"", ""d"", null };
	static final String[] c8 = {""a"", ""b"", null};
	static final String[] c9 = {""c"", ""d"", null};
	static final String[] c10 = {null};
        
	/**
	 * ClassInfo_4Test's data for the following tests.
	 */
    public static void test(int k, Class[] cases, Object[] results) {
        assertEquals(numTestCases, tests.length);
        int i = 0;
        String[] data = getData(cases);
        
        do {
            System.out.println(""Starting test case ""+data[i]);
            results[i] = null;
            i++;
            try {
                ClassInfo_3 d = new ClassInfo_3(data[i]);
                results[i] = d.getData();
                if (results[i] instanceof String) {
                    if (debug)
                        System.out.println(""Data is ""+results[i]);
                }
                results[i] = d;
            } catch (Throwable t) {
                t.printStackTrace();
                System.out.println(""Failure ""+t);
            }
        } while (i < cases.length);
    }

/**
	 * tests.
	*/
      static class ClassInfo_3 {

	/**
	    * Gets the data.
	    * @param cases The class objects for printing.
	    * @return The array.
	    */
	    public String[] getData(Class[] cases) {
		String[] data = new String[cases.length];
		int i = 0;
		for (; i < cases.length; i++) {
		    data[i] = cases[i].getName();
		}
		return data;
	    }
	}
});

"
bdab030b-0ae6-4ea0-8e33-fd6467dbdb20,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_5Test.java,59.53978443145752,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static String[] getData(Member[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].toString();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_5Test {","// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_5Test {

	private static int _i;

	/**
	 * This test method is for {@link ClassInfo#getData(Member[])} method.
	 * It contains one unit test case for the {@link ClassInfo#getData(Member[])} method.
	 * @throws Exception
	 */
	@Test
	void getDataArray() throws Exception {
		JT_511 jt = new JT_511();
		Member[] m = ClassInfo_5Test.class.getDeclaredField(""m"");
        Class clazz = ClassInfo_5Test.class;
		m = clazz.getDeclaredMethod(""getData"", new Class[]{Member[].class});
		Object o = m.invoke(null, new Object[]{});
		assertEquals(1, m.length);
		String[] Data = getData(m);

		String[] StringData = new String[Data.length];
		System.arraycopy(Data, 0, StringData, 0, Data.length);
		String stringReturned = new String(new CharArrayReader(Data).readLine().replace('\0', '.'));
		System.out.println(""array: ""+stringReturned);
		assertEquals(""Value of string returned has the wrong value."", ""String array"", stringReturned);
		System.out.println(""array: ""+o);

		System.out.println(""array: ""+o.toString());
		assertEquals(""Value of array not correct."", ""String array"", o.toString());
		//Object o = m.invoke(m.get(2));
	}
	
	
	
	/**
	 * ClassInfo.java
	 * @param args
	 * @throws Exception
	 */
	public static void main(String args[]) throws Exception {
		Constructor[] cons = ClassInfo_5Test.class.getDeclaredConstructors();
		//System.out.println(""con count is "" + cons.length);
		length = cons.length;
		
		ClassInfo_5Test testObject = new ClassInfo_5Test();
		
		Class[] cs = new Class[length];
		cs[0] = testObject.getClass();
//		java.lang.reflect.Array.newInstance(testObject.getClass(), length);
		
		for (count = 0; count < elements.length; count++) {
			Class[] ClassArray = new Class[length];
			for (int i = 0; i < length; i++)
                ClassArray[i] = elements[count].getClass();
			
			System.out.println(""Type is "" + ClassArray);
			new ClassArrayIteration(ClassArray);
			
			System.out.println(""Type is "" + cs[count]);
			new ClassIteration(ClassArray);
			
			System.out.println(""Type is "" + cs[count].getClass());
			Object o = cons[count].newInstance(cs[count], 0, classes);
			System.out.println(""Object is "" + o);
			System.out.println(""Object is of class "" + o.getClass());
		}

		System.out.println(""Length is: ""+length);
	}

// ClassInfo.java
}"
79f8f32a-3714-446c-b11a-57001c2db418,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_6Test.java,59.57568097114563,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static String[] getData(Class[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].getName();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfo_6Test {","// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfo_6Test {

    static final int count = 5;
    static final int length = 10;
    static Object testObject = null;
    static Boolean dataSet = null;
    static int count_set = 0;
    static int index_set = 0;
    private static JFrame frame;
    private static JPanel panel;
    private static JList list;
    private static boolean dataSetTest = false;
    private static boolean indexSetTest = false;
    
    static {
        ToolBox.addClass(getData(NewClass_5.class));
    }
    
    class NewClass_5 {
        
        public static String[] getData(String s) {
            if (dataSetTest) {
                dataSetTest = false;
                System.out.println(""ClassInfo.NewClass_5"");
            }
            
            if (indexSetTest) {
                index_set = 0;
                System.out.println(""ClassInfo.NewClass_5.index"");
            }
            
            return (new String[] {s});
        } 
        
    }
    
    JFrame getFrame(){
        return frame;
    }
    JPanel getPanel(){
        return panel;
    }
    
    static Enumeration<String> enumeration = new Enumeration<String>() {

        public boolean hasMoreElements() {
            return count_set < length;
        }

        public String nextElement() {
            return String.valueOf(count_set);
        }
        
    };
    
    // ClassInfo_6 Test
    // public static void main( String[] args ) {
    // System.out.println(""Testing"");
    // try {
    //     List<ClassInfo> tempList = (List<ClassInfo>) ClassInfo.class.newInstance();
    //     
    //     Enumeration<String> enum = tempList.elements();
    //     System.out.println(""Enum Elements: "");
    //     while( enum.hasMoreElements() ) {
    //         System.out.println( enum.nextElement() );
    //     }
    //     System.out.println(""Enum Size: "" + enum.size());
    //     
    //     String s = null;
    //     System.out.println(""Testing"");
    //     System.out.println(""1st test: "");
    //     Enumeration<String> eEnum = tempList.elements();
    //     while( eEnum.hasMoreElements() ) {
    //         s = eEnum.nextElement();
    //         System.out.println( ""2nd test: "" + s );
    //     }
    //     
    //     
    //     testSet(tempList);
    // } catch( RuntimeException ex ) {
    //     ex.printStackTrace();
    // }
    
    public ClassInfo_6Test(JFrame frame) {
        this.frame = frame;
    }
    
    public void testSet(List<ClassInfo> tempList) {
        ClassInfo temp = null;
        System.out.println(""Testing"");
        System.out.println(""tempList.size(): "" + tempList.size());
        System.out.println(""tempList.elements() : "" + Enumeration.toString(tempList.elements()));

        System.out.println(""Enum Elements"" + Enumeration.toString(tempList.elements()));
        
        Enumeration<String> enumeration = tempList.elements();
        System.out.println(""Enum Elements: "" + enumeration.hasMoreElements());
        
        while ( enumeration.hasMoreElements() && index_set < length ) {
            System.out.println( enumeration.nextElement() );
            System.out.println(""index_set"" + index_set);
            index_set++;
            
            
            
        }
    }
    
}
"
b29c5f9b-490a-4611-a614-032cb1152d67,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_7Test.java,59.35008883476257,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}
","// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfo_7Test {","// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfo_7Test {
// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods!= null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfo_7Test {
		
    /**
    * Constructor for ClassInfo_7Test.
    */
    public ClassInfo_7Test(){}
    
    /**
    * ClassInfo_7Test_1_001_test.sc - Constructor test
    */
    @Test
    public void test_7_001_test(){
        
        String[] methods = ClassInfo.srchMethods(""ClassInfo_7Test_1_001_test"");
        assertNull(methods);
    }
    
	/**
	* ClassInfo_7Test_2_003_test.sc - Constructor test
	*/
	@Test
	public void test_7_003_test(){
		
		String[] methods = ClassInfo.srchMethods(""ClassInfo_7Test_2_003_test"");
		assertNotNull(methods);
		assertEquals(2, methods.length);
		assertTrue(methods[0].equals(""ClassInfo_1_001_test""));
		assertTrue(methods[1].equals(""ClassInfo_2_003_test""));
	}
}
"
4d4ee6da-4582-4a10-868a-92112f25dd0a,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_8Test.java,52.782819747924805,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public MethodData getFoundMethod(final int pos) {
        if (fndMethods == null || pos > fndMethods.length)
            return null;
        return new MethodData() {

            //check to make sure position isn't out of range
            String tempStr = fndMethods[pos], tempStr2;

            String className, methodName;

            int begin, end;

            Class methClass;

            {
                end = tempStr.indexOf("")"");
                tempStr = tempStr.substring(0, end + 1);
                begin = tempStr.lastIndexOf("" "");
                tempStr = tempStr.substring(begin + 1, tempStr.length());
                begin = tempStr.indexOf(""("");
                end = tempStr.lastIndexOf(""."", begin);
                className = tempStr.substring(0, end);
                methodName = tempStr.substring(end + 1, tempStr.length());
                if (debug)
                    System.out.println(""className="" + className);
                methClass = ClassInfo.tryClass(className);
                if (debug)
                    System.out.println(""methClass="" + methClass);
            }

            public String getMethPackage() {
                if (methClass == null)
                    return null;
                return methClass.getPackage() != null ? methClass.getPackage().getName() : null;
            }

            public String getMethClass() {
                if (methClass == null)
                    return null;
                return methClass.getName();
            }

            public String getMethName() {
                return methodName;
            }
        };
    }
}
","// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_8Test {","// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_8Test {
// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public MethodData getFoundMethod(final int pos) {
        if (fndMethods == null || pos > fndMethods.length)
            return null;
        return new MethodData() {

            //check to make sure position isn't out of range
            String tempStr = fndMethods[pos], tempStr2;

            String className, methodName;

            int begin, end;

            Class methClass;

            {
                end = tempStr.indexOf("")"");
                tempStr = tempStr.substring(0, end + 1);
                begin = tempStr.lastIndexOf("" "");
                tempStr = tempStr.substring(begin + 1, tempStr.length());
                begin = tempStr.indexOf(""("");
                end = tempStr.lastIndexOf(""."", begin);
                className = tempStr.substring(0, end);
                methodName = tempStr.substring(end + 1, tempStr.length());
                if (debug)
                    System.out.println(""className="" + className);
                methClass = ClassInfo.tryClass(className);
                if (debug)
                    System.out.println(""methClass="" + methClass);
            }

            public String getMethPackage() {
                if (methClass == null)
                    return null;
                return methClass.getPackage()!= null? methClass.getPackage().getName() : null;
            }

            public String getMethClass() {
                if (methClass == null)
                    return null;
                return methClass.getName();
            }

            public String getMethName() {
                return methodName;
            }
        };
    }
}

// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains one unit test case for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_8Test {
		
    @Test
    void testGetAllConstructors() {
        //no arguments
        assertNull(ClassInfo.getAllConstructors(null, new HashSet()));
        assertNull(ClassInfo.getAllConstructors(null));
        assertNull(ClassInfo.getAllConstructors(new HashSet(), new HashSet()));
        ClassInfo_8Test.testGetConstructors(ClassName_1_0_9.class, new HashSet());

        //test parameter types
        final ClassData[] data = ClassInfo.getAllConstructors(ClassName_1_0_9.class, null);
        final Constructor[] constructor = ClassInfo.getConstructorsForClass(ClassInfo_7_8_1.class);
        assertEquals(1, data.length);

        final List<Constructor> constructors = new ArrayList<>();
        final Constructor[] constructorParam = ClassInfo_7_8_1.class.getConstructors();
        for (int i = 0; i < constructorParam.length && constructors.size() < 2; i++)
          constructors.add(constructorParam[i]);
        assertEquals(constructors.size(), constructors.size(), 2);

        final Constructor constructorOne = constructors.get(0);
        final List<Constructor> constructorTwo = new ArrayList<>();
        for (final Constructor constructor2 : constructorOne.getParameterTypes())
                constructors.add(constructor2);
        assertEquals(constructors.size(), 2, String.format(""Expected number of %s%nFound %s%n"", classInfo, DataInfo.getConstructorsForClass(ClassInfo_8Test.this.classInfo).size()));

        final Constructor constructorOneOne = constructors.get(1);
        final List<Constructor> constructorTwoOne = new ArrayList<>();
        for (final Constructor constructor2 : constructorOneOne.getParameterTypes())
                constructors.add(constructor2);
        assertEquals(constructors.size(), 2, String.format(""Expected number of %s%nFound %s%n"", classInfo, DataInfo.getConstructorsForClass(ClassInfo_8Test.this.classInfo).size()));

        //get all constructors
        final List<Constructor> constructorList = new ArrayList<>(constructors);
        final Constructor[] constructorArray = ClassInfo.getConstructorsForClass(ClassInfo_8Test.this.classInfo);
        assertEquals(""Number of constructed constructors"", constructorList.size(), constructorArray.length);

        //test argument types
        final ClassData[] cData = ClassInfo.getAllConstructors(ClassInfo_8Test.this.getClass(), Constructor.class);
        final Constructor constructor = cData[1].getConstructor();
        assertEquals(""Number of constructors"", constructor.getParameterTypes().length, 1);

        //test parameter type
        final ClassData[] cData2 = ClassInfo.getAllConstructors(new ClassInfo_8Test().getClass(), Constructor.class);
        final Constructor constructorParam= ClassInfo_8Test.this.getClass().getConstructors()[1].getParameterTypes()[0];
        assertEquals(""Number of constructors"", cData2.length, constructorParam.getParameterTypes()[0].getType());
        assertEquals(""Class name"", ClassInfo_8Test.this.className, cData[0].getClass().getName());
        assertEquals(""Number of constructors"", Constructor.class, cData[0].getClass().getConstructors()[0].getParameterTypes()[0].getClass());
    }

    @Test
    void testGetConstructors() {
		System.out.println(""=========TestClassInfo.java:getConstructors======================="");
		final HashSet dataFields = new HashSet();
		dataFields.add(""f1"");
		dataFields.add(""f2"");
		dataFields.add(""f3"");
		dataFields.add(""f4"");

        //test data
        final Set <Field> fieldSet = new HashSet(Arrays.asList(ClassInfo.getAllFields(this.classInfo),
                ClassInfo.getAllProperties(this.classInfo),
                ClassInfo.getAllStaticFields(this.classInfo),
                ClassInfo.getAllFields(DataInfo.class),
                ClassInfo_8Test.class.getFields(),
                DataInfo.class.getFields(),
                ClassInfo_7_8_1.class.getFields()
        ));
        assertEquals(Arrays.asList(ClassInfo.getAllMethods(this.classInfo.getName()),
                ClassInfo.getAllMethods(DataInfo_1_0_2.class.getName())
        ), fieldSet);
		System.out.println(""Number of constructors="" + (ClassInfo.getAllConstructors(this.classInfo).size()));

		assertEquals(""Number of constructors"", dataFields.size(), ClassInfo.getConstructorsForClass(ClassInfo_8Test.this.classInfo).size());
	}
}"
