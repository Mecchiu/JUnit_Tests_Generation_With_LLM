ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
ffbe8048-6ae7-4bf1-b389-145775a452eb,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java,63.80572462081909,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }
}
","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {

    /**
     * DefaultNoteListModel_0Test will create empty note list.
     * We will test the following for example:
     *   - the list is initially empty
     *   - if there are more values than the default capacity the list is truncated
     */
//    @Test
    public void testNoChanges_1() {
        DelegateListModel model = new DelegateListModel();
        model.addListener(new NoteListDataListener());
        model.addModelListener(new NoteListDataModelListener());
        
        model.add(new AbstractNote(""this is a test note"", null) {
            @Override
			public boolean remove(Object o) {
            	
            	return false;
            }

            @Override
			public void valueChanged(Event e) {
                notifyNoteListDataChanged();
            }
        });
    }
    
    @Test
    public void testNoChanges_2() {
        DelegateListModel model = new DelegateListModel();
        model.addModelListener(new NoteListDataListener());
        model.addListener(new NoteListDataDataEvent() {
            @Override
			public void start() {
            	
            	synchronized(this) {
                	notify = false;
                }
            }

            void notifyNoteListDataChanged() {
            	notify = true;
            }

            @Override
			public void end() {
            	notify();
            }

            @Override
			public void error(Exception e) {
            	notify();
            }

            @Override
			public void valueChanged(Event e) {
            	notifyNoteListDataChanged();
            }
        });
    }
}
"
eb00eca3-098b-48d4-b0e4-a8087156632d,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java,52.060097455978394,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }
}
","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {
@Test
		public void testAddRemove1() {
			final int n = 10;
			Collection<AbstractNote> c = new DefaultNoteListModel().add(new Note(100, 10)).
			get(n);
			assertEquals(n, c.size());

			AbstractNote c2 = c.iterator().next();
			assertEquals(c2.getPosition(), 100);
			assertEquals(c2.getData(), 10);
//			Set<AbstractNote> c3 = c.iterator().next().getAllAbbreviated();
//			assertEquals(c3.size(), 4);
//			assertEquals(c3.contains(c2), true);
		}

		@Test
		public void testFirst() {
//			AbstractNote a = new Note(200, 0).addData(""A"").addData(""B"").addData(""C"").
			Integer a = 20;
			assertEquals(a, new DefaultNoteListModel().first().getData());
			a = new DefaultNoteListModel().first().getData();
			assertEquals(a, 0);

			a = new DefaultNoteListModel().first().getData().toString();
			assertEquals(a, ""ABC"");
		}

		@Test
		public void testLast() {
//			AbstractNote a = new Note(200, 0).addData(""A"").addData(""B"").addData(""C"").
			Integer a = 20;
			assertEquals(a, new DefaultNoteListModel().last().getData());
			a = new DefaultNoteListModel().last().getData();
			assertEquals(a, (new DefaultNoteListModel().size() - 1).
			getData().toString());
		}

		@Test
		public void testSize() {
			int n = 17;
//			List<Integer> a = new DefaultNoteListModel().
//			list(new DefaultNoteListModel().first(),
//			        new DefaultNoteListModel().first(),
//			        new DefaultNoteListModel().first()).
//			size();
//			if (n!= a.size()) {
//				fail(""Size of list changed"");
//			}
		}

		@Test
		public void testIterator() {
			DefaultNoteListModel m = new DefaultNoteListModel();
			Collection<AbstractNote> collection = m.list(new DefaultNoteListModel().first());

			Iterator<AbstractNote> it = collection.iterator();
			while (it.hasNext()) {
				assertTrue(it.next() instanceof AbstractNote);
			}

		}

        @Test
   		public void testSubItemsIterator() {
			//FIXME why is this commented out?
   			final int n = 0;
   			final int n = 1;
   			final int n = 2;
   			final int n = 3;
   			final int n = 4;
   			final int n = 5;
   			final int n = 6;
   			DefaultNoteListModel m = new DefaultNoteListModel();
   			Collection<AbstractNote> list = m.list(new DefaultNoteListModel.ListNode(n));

   			Iterator<AbstractNote> it = list.iterator();
   			while (it.hasNext()) {
   				assertTrue(n > 0);
   				check(it.next(), n - 1);
   				check(it.next(), n);
   				//
   				assertTrue(it.hasNext());
   				check(it.next(), n);
    			}

   		}

	    @Test
   	    public void testAddRemove() {
   	    	DefaultNoteListModel m = new DefaultNoteListModel();
   	    	m.add(new Note(100, 0));
   	    	m.add(new Note(100, 1));
   	    	m.add(new Note(100, 2));
   	    	assertEquals(new DefaultNoteListModel().size(), 4);
   	    	assertEquals(new DefaultNoteListModel().get(1).getData(), 1);
   	    	assertEquals(new DefaultNoteListModel().get(2).getData(), 2);
   	    	assertEquals(new DefaultNoteListModel().get(3).getData(), 3);
   	    	Collection<AbstractNote> collection = m.list(new DefaultNoteListModel.ListNode(3));

   	    	Collection<AbstractNote> collection2 = m.subItemsIterator(new DefaultNoteListModel.ListNode(0));

   	    	assertEquals(new DefaultNoteListModel().size(), 4);
   	    	assertEquals(new DefaultNoteListModel().subItemsIterator(new DefaultNoteListModel.ListNode(1)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(2)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(3)).
   	    	size(), 4);
   	    	Collection<AbstractNote> collection3 = m.subItemsIterator(new DefaultNoteListModel.ListNode(0));

   	    	assertEquals(new DefaultNoteListModel().subItemsIterator(new DefaultNoteListModel.ListNode(1)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(2)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(3)),
   	    	new ArrayList<AbstractNote>(m.list(new DefaultNoteListModel.ListNode(1)).subItemsIterator(new DefaultNoteListModel.ListNode(2)).subItemsIterator(new DefaultNoteListModel.ListNode(3)), 3));
   	    	assertEquals(new DefaultNoteListModel().subItemsIterator(new DefaultNoteListModel.ListNode(0)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(1)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(2)),
   	    	new ArrayList<AbstractNote>(collection2));
   	    	assertEquals(new DefaultNoteListModel().subItemsIterator(new DefaultNoteListModel.ListNode(3)).
   	    	subItemsIterator(new DefaultNoteListModel.ListNode(0)),
   	    	new ArrayList<AbstractNote>(collection3));
   	    	assertEquals(collection.iterator().next(), 1);
   	    }

	}
"
e7e0351a-aef4-43ea-9e6a-13a649e3ce09,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java,51.94234848022461,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }
}
","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {

    private final ListModel delegate = new DefaultListModel();
    private AbstractNoteListModel model;
    private boolean eventListenerCalled;
    private NoteListDataEvent event;
    
    /**
     * Tests {@link DefaultNoteListModel#elements()} method. 
     */
    @Test
    void testElements() {
        model =  new DefaultNoteListModel(delegate.elements());
        assertFalse(eventListenerCalled);
        event = new DefaultNoteListDataEvent(new AbstractNote(0, 1, 0), false);
        delegate.addListDataListener(event, new NoteListDataListener() {
            public void eventOccured(NoteListDataEvent event) {
                eventListenerCalled = true;
            }
		});
        assertFalse(""Should not be called"", eventListenerCalled);
        model.addElement(new DefaultNote(0, 1, 0));
        event = new DefaultNoteListDataEvent(new AbstractNote(0, 1, 1), false);
        delegate.addListDataListener(event, new NoteListDataListener() {
            public void eventOccured(NoteListDataEvent event) {
                eventListenerCalled = true;
            }
		});
        model.addElement(new DefaultNote(1, 1, 1));
        event = new DefaultNoteListDataEvent(new AbstractNote(0, 1, 2), false);
        delegate.addListDataListener(event, new NoteListDataListener() {
            public void eventOccured(NoteListDataEvent event) {
                eventListenerCalled = true;
            }
		});
        model.addElement(new DefaultNote(1, 2, 3));
        event = new DefaultNoteListDataEvent(new AbstractNote(0, 2, 3), false);
        delegate.addListDataListener(event, new NoteListDataListener() {
            public void eventOccured(NoteListDataEvent event) {
                eventListenerCalled = true;
            }
		});
        model.addElement(new DefaultNote(1, 3, 4));
        
    }
}
"
e413ee41-f197-4d9a-accc-b90cad8e41ce,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java,62.449461221694946,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }
}
","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {

    @Test
	public void testContains_0(){
        final DefaultNoteListModel model = new DefaultNoteListModel();

        assertFalse(model.contains(new AbstractNote(0, null)));
    }

    @Test
	public void testContains_1(){
        final DefaultNoteListModel model = new DefaultNoteListModel();
        
        model.addEventListener(new NoteListDataListener() {
            @Override
            public void onDataEvent(NoteListDataEvent event){
                assertNotNull(event.getObject());
                assertTrue(event.getObject() instanceof AbstractNote);
                //assertEquals(event, event.getOldDataEvent());
                assertEquals(event, event.getDataEvent());
                assertFooEquals(event.getDataEvent().getFoo(), 1);
            }
        });
        assertTrue(model.contains(new AbstractNote(1, 1)));
    }

    @Test
	public void testContains_2(){
        final DefaultNoteListModel model = new DefaultNoteListModel();
        
        model.addEventListener(new NoteListDataListener() {
            @Override
            public void onDataEvent(NoteListDataEvent event){
                assertNotNull(event.getObject());
                assertTrue(event.getObject() instanceof AbstractNote);
                //assertEquals(event, event.getOldDataEvent());
                assertEquals(event, event.getDataEvent());
                assertBarEquals(event.getDataEvent().getBar(), 1);
            }
        });
        assertFalse(model.contains(new AbstractNote(1, 1)));
    }
    
    @Test
	public void testContains_3(){
        final DefaultNoteListModel model = new DefaultNoteListModel();
        
        model.addEventListener(new NoteListDataListener() {
            @Override
            public void onDataEvent(NoteListDataEvent event){
                assertNotNull(event.getObject());
                assertTrue(event.getObject() instanceof AbstractNote);
                //assertEquals(event, event.getOldDataEvent());
                assertEquals(event, event.getDataEvent());
                assertBarEquals(event.getDataEvent().getBar(), 1);
            }
        });
        assertTrue(model.contains(new AbstractNote(1, 1)));
        assertTrue(model.contains(new AbstractNote(2, 2)));
    }

    @Test
	public void testAdd_1(){
        final DefaultNoteListModel model = new DefaultNoteListModel();
        
        model.addEventListener(new NoteListDataListener() {
            @Override
            public void onDataEvent(NoteListDataEvent event){
                assertNotNull(event.getObject());
                assertTrue(event.getObject() instanceof AbstractNote);
                //assertEquals(event, event.getOldDataEvent());
                assertEquals(event, event.getDataEvent());
                assertBarEquals(event.getDataEvent().getBar(), 1);
            }
        });
        assertFooEquals(new AbstractNote(1, 1).getBar(), 1);
        
        assertTrue(model.contains(new AbstractNote(1, 1)));
        assertFalse(model.contains(new AbstractNote(2, 2)));
    }

    @Test
	public void testAdd_2(){
        final DefaultNoteListModel model = new DefaultNoteListModel();
        
        model.addEventListener(new NoteListDataListener() {
            @Override
            public void onDataEvent(NoteListDataEvent event){
                assertNotNull(event.getObject());
                assertTrue(event.getObject() instanceof AbstractNote);
                //assertEquals(event, event.getOldDataEvent());
                assertEquals(event, event.getDataEvent());
                assertBarEquals(event.getDataEvent().getBar(), 2);
            }
        });
        assertBarEquals(new AbstractNote(2, 2).getBar(), 1);
        assertBarEquals(new AbstractNote(1, 1).getBar(), 2);
    }

    private void assertFooEquals(AbstractNote foo, int bar){
        assertEquals(1, bar);
        assertEquals(1, foo, ""Foo should have the same value as the specified value. (""+(foo)+"" -> ""+bar)+"""");
    }

    private void assertBarEquals(int bar, int obj) {
        assertEquals(bar, obj);
    }
    
}"
b1d24973-e12f-4d54-b11c-57920718d9aa,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java,59.97012519836426,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }
}
","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {

	private DefaultNoteListModel bean = null;
	
	private void setData(AbstractNote note) {
		bean.setData(note);
	}
	
	@Test
	void setData_correct() {
		try {
		
			bean.setDelegate(new AbstractNoteListModel());
			assertNull(getDelegate());

			setData(new TestNote());
			assertNull(getDelegate());
			
			setData(new TestNote());
			assertNull(getDelegate());
			
			setData(new TestNote());
			assertNull(getDelegate());
		}
		catch(Exception e)
		{
			fail(e);
		}
	}

	private class TestNote implements AbstractNote {
			
		@Override
		public Object getData() {
			return null;
		}
	}
}

"
8e11b373-9052-483d-bc0a-d25d3003f8f3,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java,55.12419867515564,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem an desired component
     * @param index the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }
}
","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {

    /** {@inheritDoc} */
    @Test
    void indexOfTest() {
        /*
         * DefaultNoteListModel's TestCase.java
         */
        NoteListModelModel model =
            new DefaultNoteListModel(new HashSet<AbstractNote>());
        
        Collection<?> collection =
            Collections.singleton(new AbstractNote(""hello""));
        assertNotNull(collection);
        
        List<Integer> list =
            model.indexOf(new Note(""hello""), 0);
        assertTrue(""List should contains elements"", list.contains(1));
    }
}
"
9edad023-8f7f-4345-94c6-f94d0c551484,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java,55.60022234916687,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }
}
","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {

    /**
     * Test for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
     * <p>Requires that <tt>elem</tt> is defined in a class that extends
     * {@link AbstractNote}.</p>
     * <p>This test checks that the correct index is returned using
     * the <tt>lastIndexOf(Object)</tt> method.</p>
     *
     * @throws NoSuchMethodException if no methods defined for interfaces are found
     * @throws SecurityException if a security manager is registered
     *      before the method is invoked
     * see {@link javax.swing.JList#setSelectionModel(javax.swing.ListSelectionModel) setSelectionModel} 
     * @see AbstractNote
     * @see AbstractNote#lastIndexOf(AbstractNote)
     */
    @Test
    public void lastIndexOf_6_1() throws SecurityException {
        // Set the listener on the list
        JList jl = new JLists(AbstractNote.class);
        
        // Send a list data event to the listeners
        Object elem = new AbstractNote();
        NoteListDataEvent dde = new NoteListDataEvent(elem, jl);
        
        // Call the method under test
        AbstractNote result = DefaultNoteListModel.lastIndexOf(elem);
        
        // Check the result
        assertSame(""the object returned by the method is not equal to ""
            + AbstractNote.class.getName(), result,
            AbstractNote.class.getMethod(""lastIndexOf"", new Class[] {Object.class}).invoke(elem, new Object[] {AbstractNote.class}));
    }
	
	/**
	 * Call the {@link #lastIndexOf(AbstractNote)} method with a null argument.
	 * <p>This method tests that {@link javax.swing.JList#setSelectionModel(javax.swing.ListSelectionModel) setSelectionModel()}
	 * throws with a {@link NullPointerException} when <tt>null</tt> is passed for the method's
	 * parameter.</p>
	 *
	 * @see #lastIndexOf_6_1()
	 */
	@Test (expected = NullPointerException.class)
	public void lastIndexOf_6_2() {
		DefaultNoteListModel m = new DefaultNoteListModel();
		m.lastIndexOf(null);
	}
	
	/**
	 * Call the {@link #lastIndexOf(AbstractNote))} method with a non-existing object.
	 * <p>This method tests that {@link javax.swing.JList#setSelectionModel(javax.swing.ListSelectionModel) setSelectionModel()} throws
	 * with a {@link IllegalArgumentException} when <tt>elem</tt> is null.</p>
	 *
	 * @see #lastIndexOf_6_1()
	 */
	@Test (expected = IllegalArgumentException.class)
	public void lastIndexOf_6_3() {
		DefaultNoteListModel m = new DefaultNoteListModel();
		m.lastIndexOf((AbstractNote)null);
	}
	
	/**
	 * Call the <code>lastIndexOf</code> method with the <code>elem</code> argument
	 * as well as a null argument.
	 * <p>This method tests that the correct result can be returned using the same method.</p>
	 *
	 * @see #lastIndexOf(AbstractNote, AbstractNote)
	 */
	@Test
	public void lastIndexOf_6_4() {
		// Set the listener on the list
		DefaultNoteListModel m = new DefaultNoteListModel();
		Object obj = new AbstractNote(new Class[0]);
		NoteListDataEvent dde = new NoteListDataEvent(obj, m);
		
	    // Call the method under test
        int result = m.lastIndexOf(obj);

        // Check the result
        assertEquals(""the correct result can be returned using the same method"",  ResultCodes.UNCHECKED, result);
	}
	
}
"
caaf5417-953a-40f0-adc2-641d63267308,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java,57.736751079559326,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem the desired component
     * @param index the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }
}
","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {
DefaultNoteListModel_7Test() {
        }
		@Test
    void testFindAllOfType_1arg() {
        AbstractNote elem = new AbstractNote();
		DefaultNoteListModel_7Test.LastNote n1 = new DefaultNoteListModel_7Test.LastNote(elem, 1);
		DefaultNoteListModel_7Test.LastNote n2 = new DefaultNoteListModel_7Test.LastNote(elem, 2);
		DefaultNoteListModel_7Test.LastNote n3 = new DefaultNoteListModel_7Test.LastNote(elem, 3);
        List<LastNote> l = new ArrayList<>();
		l.add(n1);
		l.add(n2);
		l.add(n3);
        Set<LastNote> s = new HashSet();
		for (LastNote n : l) {
             if (n!= n3) throw new AssertionError(""Error found when a match to the object was found"");
        }
        assertEquals(3, s.size());
        assertAllOfAreEqual(s,n1, n2);
        assertLastElementInList(l, n3);
        assertEquals(l.size(), n1.getDepth());
        assertEquals(l.size(), n2.getDepth());
        assertEquals(l.size(), n3.getDepth());
        assertAllOfAreEqual(l,n1);
        assertAllOfAreEqual(l,n2);
        assertAllOfAreEqual(l,n3);
                   }
     @Test
    void testLastIndexOfElementOfCollectionSearchForLastElement() {
        final int maxNbOfElements = 20;
        final List<Integer> nbElements = new ArrayList<>();
        for (int i = 0; i < 10; i++){
             nbElements.add(i);
        }
        final DefaultNoteListModel model = new DefaultNoteListModel.DefaultNoteListModelDelegate();
        Iterator<Integer> iter = nbElements.iterator();
        for (int i = nbElements.size() - 1; i >= 0; i--){
            model.lastIndexOfElementOfCollection(iter.next(), model.lastIndexOfElementOfCollection(iter.next(), i), i % maxNbOfElements);
        }
    }

    // DefaultNoteListModel_8Test.java
    public static class LastNote {
        String text;
        final int index;
        final AbstractNote note;

        /**
         * Creates a new <code>LastNote</code> object.
         */
        public LastNote() {
            this(null, -1);
        }

        /**
         * Creates a new <code>LastNote</code> object.
         */
        public LastNote(AbstractNote n, int index) {
            if (n == null) {
                text = null;
            } else {
                text = n.getBody().get(index);
            }
            this.index = index;
            note = n;
        }

        /**
         * Gets an array in the specified index.
         * @param index The index in the array
         * @return an array
         */
        public String[] getBody(int index) {
            String[] array = new String[index];
            if (text!= null) array[index - 1] = text;
            return array;
        }

        /**
         * Gets an array in the specified index, starting with the specified value.
         * @param index The index in the array
         * @param start The starting value
         * @return an array
         */
        public String[] getBody(int index, String start) {
            Arrays.fill(index, index + 1, Integer.MAX_VALUE, (char) -1);
            if (index >= start.length() - 1) return null;
            String tmp = start;
            if (tmp.charAt (0)!= (char) -1) tmp = tmp.substring (1);
            if (tmp.length() < index) return null;
            return new String[]{tmp};
        }
    }
}

class DefaultNoteListModel_7Test_2 {
    /**
     * Finds all of the objects in the specified list until <code>elem</code>.
     * First the given <code>elem</code> with the appropriate last-index first
     * position in the list is found and the contents of the list are passed
     * to the <code>delegate</code> object. Next, if necessary, the matching
     * <code>obj.first()</code> method is called on the found node recursively
     * up until the parent in the way provided by the value returned by
     * <code>obj.last()</code>.
     * The <code>delegate</code> is modified in place so that
     * <code>delegate</code> is passed on the event.
     * @param objects a list of objects to inspect
     * @param elem the object to match
     * @param delegate the delegator
     * @return a list of objects (if found) or <code>null</code>
     */
    public List<AbstractNote> findAllOfType(final List<AbstractNote> objects, AbstractNote elem, final UndoRedoDelegate delegate) {
        List<Object> l = new ArrayList<>();
        for (final AbstractNote obj : objects) {
            if (obj.getType().equals(elem.getType())) l.add(obj);
        }
        LinkedList<AbstractNote> list = new LinkedList<>();
        list.addAll(l);
        list.addLast(elem);
        return list;
    }
}
"
d5422524-d21a-4b7b-ad14-2f9fefa464fd,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java,57.2170627117157,length,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }
}
","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {
/**
		 * Constructs a new DefaultNoteListModel object.
		 *
		 * @param arg0 argument to be displayed to the test.
		 * @see DefaultNoteListModel#DefaultNoteListModel(List, ArrayList,
		 * ArrayList, boolean, boolean, Set, boolean, com.allenstudio.ir.core.plugins.AbstractNote,
		 * org.junit.jupiter.api.TestInfo[])
		 */
    DefaultNoteListModel_8Test(List arg0, 
			List<AbstractNote> arg1, 
			List<Integer> arg2, 
			boolean arg3, 
			boolean arg4, 
			Set<Integer> indexRange, 
			boolean indexRangeHasKeys, 
			AbstractNote arg5, 
			List<NoteListDataEvent> arg6) 
        {
            listArg0 = arg0;
            listArg1 = arg1;
            listArg2 = arg2;
            indexRangeRange = indexRange;
            indexRangeHasKeys = arg3;
            indexRangeHasKeysDefault = indexRangeHasKeys;
            arg5 = arg5;
            arg6 = arg6;
        }

	/**
	 * Constructs a new DefaultNoteListModel object.
	 *
	 * @param arg0 argument to be displayed to the test.
	 * @param arg1 argument to be displayed to the test.
	 * @param arg2 argument to be displayed to the test.
	 * @param arg3 argument to be displayed to the test.
	 * @param arg4 argument to be displayed to the test.
	 * @param arg5 argument to be displayed to the test.
	 * @param arg6 argument to be displayed to the test.
	 * @see #DefaultNoteListModel(List, ArrayList, ArrayList, boolean, boolean, Set, boolean, com.allenstudio.ir.core.plugins.AbstractNote,
	 * org.junit.jupiter.api.TestInfo)
	 */
    DefaultNoteListModel_8Test(List arg0, 
			List<AbstractNote> arg1, 
			List<Integer> arg2, 
			boolean arg3, 
			boolean arg4, 
			Set<Integer> arg5, 
			List<NoteListDataEvent> arg6, 
			List<AbstractNote> arg7) 
        {
            listArg0 = arg0;
            listArg1 = arg1;
            listArg2 = arg2;
            listArg3 = arg3;
            listArg4 = arg4;
            indexRangeRange = new HashSet();
            indexRangeRange.addAll(arg5);
            indexRangeRange.addAll(arg6);
            indexRangeHasKeys = arg4;
            indexRangeHasKeysDefault = arg4;
            arg7 = arg7;
        }

	/**
	 * Constructs a new DefaultNoteListModel object.
	 *
	 * @param arg0 argument to be presented to the test.
	 * @param arg1 argument to be presented to the test.
	 * @param arg2 argument to be presented to the test.
	 * @param arg3 argument to be presented to the test.
	 * @param arg4 argument to be presented to the test.
	 * @param arg5 argument to be presented to the test.
	 * @param arg6 argument to be presented to the test.
	 * @param listArg7 argument to be presented to the test.
	 */
    DefaultNoteListModel_8Test(List arg0, 
			List<AbstractNote> arg1, 
			List<Integer> arg2, 
			boolean arg3, 
			boolean arg4, 
			Set<Integer> arg5, 
			List<NoteListDataEvent> arg6, 
			List<AbstractNote> listArg7) 
        {
            listArg0 = arg0;
            listArg1 = arg1;
            listArg2 = arg2;
            indexRangeRange = new HashSet();
            indexRangeRange.addAll(arg5);
            indexRangeRange.addAll(arg6);
            indexRangeHasKeys = arg4;
            indexRangeHasKeysDefault = arg4;
            listArg7 = listArg7;
        }

	/**
	 * Tests the {@link DefaultNoteListModel#elementAt(int)} method's 
	 * <code>elementAt</code> method.
	 */
	@Test
    void testElementAt_1_1_8_8_8() {
        Object[] argArray1 = getArrayArguments(indexRangeRange, indexRangeHasKeys, null, null, listArg7, null, null, null);

        objectArgumentsListElementAt_1_1_8_8_8(listArg1, listArg2, listArg3, listArg4, argArray1);        
    }
     
    private static void objectArgumentsListElementAt_1_1_8_8_8(List arg1, 
		List<Integer> arg2, 
		List<Integer> arg3, 
		List<Integer> arg4, Object argArray) {
		int index = 1;
		while (index <= 8) {
			System.err.println(index + "".elementAt: "" + argArray.getClass());
			objectArgumentsListElementAt_1_1_8_8_8_8(arg1, arg2, arg3, arg4, argArray, index);
			index++;
		}
	}
     
	private static void objectArgumentsListElementAt_1_1_8_8_8_8(List arg1, 
		List<Integer> arg2, 
		List<Integer> arg3, 
		List<Integer> arg4, Object argArray, 
		int index) {
		List<AbstractNote> list2 = new ArrayList<AbstractNote>();
		Object o3 = argArray.get(index);
		if (o3 instanceof Collection) {
			for(Object o1 : (Collection)o3) {
				list2.add((AbstractNote)o1);
			}
		} else {
			list2.add( (AbstractNote)o3);
		}
		
		System.err.println(""inject list.get(): "" + list2.getClass());
		objectArgumentsListElementAt_1_1_8_8(arg1, list2, arg2, arg3, arg4) ;
	}

    private static Object[] getArrayArguments( Set<Integer> indexRange, 
			boolean indexRangeHasKeys, Object[] argArray, Object[] result, List elementList, Object[] resultList, Object[] argArrayList"
4ace4524-40c2-4aae-9d85-967127f1393b,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java,60.06197261810303,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }
}
","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {
DefaultNoteListModel(AbstractNoteListModel delegate, Vector<AbstractNote> notes) {
			delegate.addElement(firstElement());
			delegate.addElement(firstElement());
		}
		List<AbstractNote> getDeleter() {
			Collections.synchronizedList(deleter);
			return deleter;
		}
		
		@jbe10.test
		void getDefaultNoteListModel(int size, Comparator<AbstractNote> comparator) {
			assertEquals(Size10, size);
			assertFalse(comparator.compare(System.currentTimeMillis(), 1.1*System.currentTimeMillis()));
			assertFalse(comparator.compare(1.1*System.currentTimeMillis(), System.currentTimeMillis()));
		}
}"
50ca99ff-779d-462f-9373-34acefc59349,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java,60.165380001068115,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }
}
","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {

	private DefaultNoteListModel delegate;

    /**
     * @see DefaultNoteListModel#DEFAULT_NOTE_LIST_MODEL
     * @throws NoSuchElementException If this vector has no components.
     * @throws IllegalAccessException If this vector is protected.
     */
    public DefaultNoteListModel_10Test() throws NoSuchElementException, IllegalAccessException {
        delegate = new DefaultNoteListModel();
        delegate.getDelegate().add(new DefaultNote(""DefaultNote""));        
    }

    /**
     * This test sets up two instances of the delegate and a listener,
     * which runs during the initialization of this class.
     * The listener is also run on a test start.
     * Each time it runs, the vector is cleared, then when this class is
     * started, at least one of the listeners is notified.
     */
    @Test
    public void setup_test() throws Exception {
        AbstractNote[] notesArr = {new DefaultNote(""DefaultNote0""), new DefaultNote(""DefaultNote1""), new DefaultNote(""DefaultNote2"")};
        new DefaultNoteListModel_10Test_updateListeners(notesArr).initialize(delegate);
        
        // Run and wait for all events on the listeners...
	    Thread.sleep(2000);
	    assertTrue(""Listener did not receive Notifcation"", delegate.notifyListeners(new DefaultNoteListDataEvent(new DefaultNoteListDataListener() {
                public void notify(NoteListDataEvent event) throws Exception {
                    assertTrue(event.getId() == 1);
                    assertEquals(delegate.size(), 1);
                }
           	})));
        assertTrue(""Listener did not receive Notifcation"", delegate.notifyListeners(new NoteListDataEvent(new NoteListDataListener() {
                public void notify(NoteListDataEvent event) throws Exception {
                    assertEquals(2, event.getId());
                    assertEquals(""DefaultNote0"", event.getNotes().elementAt(0));
                    assertEquals(""DefaultNote1"", event.getNotes().elementAt(1));
                }
           	})));
    }

    /**
     * Update a list of the vector.
     * The event contains a list of <code>AbstractNote</code> objects.
     *
     * @param notesArr The array of objects which should be added to the vector.
     * @throws Exception If an error occurs or while the list is synchronized.
     * @see DefaultNoteListModel#DEFAULT_NOTE_LIST_MODEL
     */
    private void updateListeners(AbstractNote[] notesArr) throws Exception {
        synchronized(delegate) {
            delegate.setDelegate(new DefaultNoteListModel_10Test_updateListeners(notesArr));
        }
    }

    /**
    * The updateListeners (listeners) method is never used directly.
    * Instead call getDelegate method on this class.
    * The listeners object is a List
    *
    * @param notesArr The array of objects whose list of notes shall be populated in the vector.
     * @throws Exception The listener method takes no parameters and simply throws a
     * 		Notifcation for each object contained therein in the list.
     * @see #DEFAULT_NOTE_LIST_MODEL
    */    
    private abstract class DefaultNoteListModel_10Test_updateListeners extends DefaultNoteListModel {
        /**
         * Gets the listeners object.
         *
         * @return The listeners object.
         * @see DefaultNoteListModel#DEFAULT_NOTE_LIST_MODEL
         */
        protected abstract List<AbstractNote> getDelegate() throws Exception;
        
        /**
         * Called by the listeners.
         *
         * @param event The event which carries some or all information
         *	    about the notification.
         * @see com.allenstudio.ir.core.plugins.AbstractNote.event for an explanation.
         * @see #getDelegate
         * @see DefaultNoteListModel#updateListeners
         * @see AbstractNote#getUserData
         */
        public void notify(NoteListDataEvent event) throws Exception {
            getDelegate().clear();
            super.notify(event);
        }
    }
}
"
6b941147-ea7e-4270-90cc-9bb7c40d3047,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java,58.11582279205322,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }
}
","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {
// NoteListModel.java
		@Test
		public void testRemoveElement() {
                DefaultNoteListModel m = new DefaultNoteListModel();
                // Test removes the element with no reason for failure
                assertNull(m.removeElement(null));
                assertNull(m.removeElement(new Object()));
                assertNull(m.removeElement(new Object()));
                // Test removes the first occurrence of an element
                Object o = new Object();
                boolean b = m.removeElement(o);
                if (b) assertTrue(b); // this test fails when called with o = null;
        }
		// NoteListDataModel.java
        @Test
        public void testAddingNewItemsToTheList() {
                // Test notifies listeners of changes
                DefaultNoteListModel m = new DefaultNoteListModel();
                m.addListDataListener(new NoteListDataListener() {
                    public void onDataChanged(NoteListDataEvent evt) {
                        assertNotNull(evt.getOldData());
                        assertNotNull(evt.getOldData().getEventType());
                        assertNotNull(evt.getNewData());
                        assertNotNull(evt.getNewData().getEventType());
                        // assertNotNull(""data changed event is null"");
						assertTrue(m.removeElement(new Object()));
						System.out.println(""No longer present"");
                    }
                });
                // test new value
                Object[] o = new Object[] {1,2,3};
                Object o1 = new  O(o);
                boolean b = m.removeElement(o);
                // assertTrue(!b);
                boolean b1 = true;
                // test removing
                assertFalse(b);
                assertFalse(b1);
                assertTrue(m.removeElement(o1));
                // notifies list changed, and notifies list added as new element
                m.fireItemAdded(m, new ArrayList());
				m.fireListDataChanged(m);
				MVNLogging.LOGGER.debug(m.size());
                assertFalse(b1);
        }

        private void assertTrue(boolean val) {
                if (val == false)
                        throw new AssertionError(""failed with: "" + val);
        }

        private void assertArrayEquals(Object[] a, Object[] b) {
                assertEquals(a.length, b.length);
                for (int i = 0; i < a.length; i++) {
                        assertEquals(a[i], b[i]);
                }
        }

        static class O {
                Object value;
        }

        // ListDataModel.java
        @Test
        public void testListData() {
                DefaultNoteListModel m = new DefaultNoteListModel();
                m.addListDataListener(new NoteListDataListener() {
                        public void onDataChanged(NoteListDataEvent evt) {
                                Object[] list = evt.getOldData().getOldListData();
                                int i = evt.getKey();
                                assertArrayEquals(evt.getOldData().getOldListData(), list);
                                assertArrayEquals(list, evt.getModifications().getOldListData());
                                assertArrayEquals(list, evt.getNewListData());
                        }
                });
                assertNull(m.removeElement(new Object()));
                assertNull(m.removeElement(new Object()));
                List list = new ArrayList();
                list.add(new Object());
                list.add(new Object());
                assertTrue(m.removeElement(list.get(1)));
                assertTrue(m.removeElement(new Object()));
                m.clearListData();
        }

        // NoteListModelTest_test.java
        @Test
        public void testListenerListeners() {
                DefaultNoteListModel m = new DefaultNoteListModel();
                final NoteListModelListener l = new NoteListModelListener() {
                        public void onDataRemoved(NoteListModelEvent evt) {
                                // m.removeListDataListener(l);
                                l.onDataRemoved(new NoteListModelEvent(evt));
                        }
                };
                m.addListDataListener(l);
                assertEquals(1, m.getListDataListenerCount());

                assertNotNull(l);
                assertSame(m, l.getListModel());
        }

}"
8ce6e067-3f92-4dda-b1fd-86fe0c5f308e,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java,59.73430109024048,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }
}
","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {

	@Test
    void test() throws Exception {
        ModelTestUtil.testClassUnderTest(this, DefaultNoteListModel.class);
    }
	

    
	
	Class<? extends AbstractNote> clazz;
	
	/**
	 * Creates a new instance of the list model.
	 * 
	 * @param clazz a class corresponding to the list model type.
	 */
	@SuppressWarnings(""unused"")
	public DefaultNoteListModel_12Test(Class<? extends AbstractNote> clazz ) {
		this.clazz = clazz;
	}
	
}
/**
 * Test constructor.
 */
class DefaultNoteListModel_2_0Test implements NoteListModel.NoteListModel_3_0Test{
	
	private String _key;
	{
		// empty constructor
	}
	public DefaultNoteListModel_2_0Test(String key) {
    _key = key;
  }
	/**
	 * Creates a new instance of the list model.
	 */
	@Override
	public void create() {
    
  }
  public void removeAt(int i) {
  }
  public AbstractNote get(int i) {
  return null;
  }
  public int size() {
  return 0;
  }
  public abstract AbstractNote[] getAll();
  
  
	
	/**
	 * Returns a array containing all of the elements in this list in the correct order.
	 *
	 * @return an array containing the elements of the list
	 * @see Vector#toArray()
	 */
	public String[] getEntries();
}
"
0d33e636-1457-4bf7-8521-e42ebbfdbd8f,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java,51.641350746154785,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }
}
","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {
/**
         * Main method.
		 *
		 * @param args ignored
		*/
        public static void main(String[] args) {
            AbstractNoteListModel model = new DefaultNoteListModel(new DefaultNoteModel());
            model.addListener(new NoteListDataListener() {
                public void noteUpdate(NoteListDataEvent event) {
                    System.out.println(""update: "" + event);
                }
            });
            
            
            System.out.println(model.get(0).getString());
            
            System.out.println(model.get(1).getString());
            
            System.out.println(model.get(2).getString());
            
        }
}"
6da7e6fc-8d05-408c-bee5-48b34ed1f89e,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java,58.17637372016907,stop,"// DefaultNoteListModel.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }
}
","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains one unit test case for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {
Test
                DEFAULT_NAME = DefaultNoteListModel_14Test.class.getName() + ""test"";
    /**
     * Basic sanity checks.
     */
    @Test
    void basicSanityChecks() {
        AbstractNoteModel aom1    = new DefaultNoteListModel();
        Collection<AbstractNote> am1      = aom1.getAll();

        assertEquals(AbstractNoteModel.NOTES.size(), am1.size());
        for (AbstractNote an : AbstractNoteModel.NOTES) {
            assertTrue(""Should be at least one existing element."", an.getNumber() > 0);
            assertTrue(""Should not be deleted as it is referenced"", am1.remove(an) == null);
        }

        aom1.setAll(Collections.singleton(AbstractNoteModel.NOTES.get(0)));

        assertEquals(
                CollectionUtilities.unorderedSet(""1"", ""2"",  ""3"",  ""4""),
                aom1.getAll());
    }

    @Test
    void testRemove_GivenElementAt() {
        AbstractNoteModel aom1    = new DefaultNoteListModel();
        Collection<AbstractNote> am1      = aom1.getAll();

        AbstractNote an = new DefaultNote(2, 3,4,  ""hello"");
        am1.add(an);

        aom1.remove(an);

        assertFalse(""Should not be updated as it became null."", an.getNumber() > 0);
    }

    @Test
    void testRemove_GivenIterator() {
        AbstractNoteModel aom1    = new DefaultNoteListModel();
        Collection<AbstractNote> am1      = aom1.getAll();

        Iterator<AbstractNote> anIt  = am1.iterator();
        Iterator<AbstractNote> anItEnd = am1.iterator();
        Collection<AbstractNote> amEnd   = new DefaultNoteListModel();


        while (anIt.hasNext()) {
            anIt.next();
        }

        anItEnd.next();

        aom1.remove(anIt);

        Map<AbstractNote, AbstractNote> em1  = new HashMap<AbstractNote, AbstractNote>();

        while (anItEnd.hasNext()) {
            anItEnd.next();
            em1.put(anIt.next().getNote(), anIt.next());
        }

        aendEqualsElements(new ArrayList<AbstractNote>(), em1);

        aom1.setAll(amEnd);

        aendEqualsElements(amEnd, em1);
    }

    @Test
    void testRemove_GivenCollection() {
        AbstractNoteModel aom1    = new DefaultNoteListModel();
        Collection<AbstractNote> am1      = aom1.getAll();

        Collection<AbstractNote> am = new ArrayList<AbstractNote>();

        am.add(new DefaultNote(1, 2, 3, ""abcdef""));
        am.add(new DefaultNote(3, 4, 5, ""hgkjl""));

        aom1.remove(am);

        Collection<AbstractNote> am1b = aom1.getAll();
        for (int i = 0; i < am.size(); i++) {
            if (am.get(i).getNumber()!= am1b.get(i).getNumber()) {
                fail(String.format(""The remaining elements of a sequence should all have same numbers"", am1b));
            }
        }
    }

    private void aendEqualsElements(List<AbstractNote> an, Set<AbstractNote> em) {
        for (int i = 0; i < an.size(); i++) {
            assertTrue(em.contains(an.get(i)));
        }
    }

    @Test
    void testGetAll_givenCollection() {
        AbstractNoteModel aom1    = new DefaultNoteListModel();
        Collection<AbstractNote> am1      = aom1.getAll();

        AbstractNote an = new DefaultNote(1, 2,3, ""abcdef"");
        am1.add(an);
        Collection<AbstractNote> amend = new ArrayList<AbstractNote>();

        amend.add(an);

        // aendEqualsElements(a, am);

        getAll(aom1.getAll(), amend);

        getAll(amend, am);
    }

    /**
     * Returns the number of elements currently in this <code>noteListModel</code>.
     * This version only tracks number of elements that exist in a <code>set</code>
     * element, does not keep track of existing elements.
     *
     * @param an an <code>AbstractNote</code> to check for existance
     *
     * @return the number of elements currently in this note list model
     */
    public Integer getAllSize(AbstractNote an) {
        return aom1.getAllSize(an);
    }

    public AbstractNote getFirstElement(AbstractNote eo) {
        return AbstractNoteModel.getFirstElement(aom1.getAll(), eo);
    }
}
"
d6ce4aee-bfff-4c8b-80a8-3eb009137d1d,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager.java,50.63351535797119,stop,"// ConfigurationManager.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;

/**
 * Manages the configuration for Inspirento.<br>
 * This manager uses XML format to store information.
 * The configuration file is, by default, saved in the
 * ""config"" directory and named ""config.xml"". Clearly,
 * this class should be a singleton, so we use
 * {@link #getInstance()} to get an instance and call
 * other instance methods to get the settings needed
 * by Inspirento, such as ""window.size"", ""window.location"",
 * and etc.<br>
 * The program first tries to get the configuration from
 * this <code>ConfigurationManager</code>. If it fails to
 * get any key, it uses the default settings presetted in
 * the protected <code>default</code> field.
 *
 * @author Allen Chue
 */
public class ConfigurationManager extends Properties {

    /**
     * Uses XML parser to get the specified property.
     * If there is no such a key, the method returns
     * <code>null</code>.
     *
     * @param key the key of the property
     * @return the property value
     */
    @Override
    public synchronized String getProperty(String key) {
        String value = xmlIO.getRoot().getElement(Constants.PROJECT_NAME + ""."" + getPath(key)[0]).getAttribute(getPath(key)[1]);
        if (value == null) {
            //Perhaps some element is lost in the file
            value = defaults.getProperty(key);
            //null value has no side effect
            setProperty(key, value);
            new Thread() {

                @Override
                public void run() {
                    writeBack();
                }
            }.start();
        }
        return value;
    }
}
","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {","// ConfigurationManagerTest.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains one unit test case for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManagerTest {

    @Test
    public void testGetProperty() {
        //Get the value
        assertEquals("""", getProperty(""""));
        //No key
        assertNull(getProperty(""foo""));
        //Put first ""foo"" element into the config.xml file
        assertEquals(""foo"", xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getText());
        //No key
        defaults.put(""foo"", ""bar"");
        assertEquals(""bar"", getProperty(""foo""));
        assertNull(getProperty(""missing""));
        //Put second ""foo"" element into the config.xml file
        assertEquals(""foo"", xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getText());
        //No key
        defaults.put(""missing"", ""bar"");
        assertEquals(""bar"", getProperty(""missing""));
        assertNull(getProperty(""xbadword""));
        assertNull(getProperty(""xbadword1""));
        defaults.put(""xbadword"", ""n"");
        assertEquals(""xbadword1"", getProperty(""xbadword""));
        assertEquals("""" + new Date().getTime(), getProperty(""xbadword1"").replaceAll(""'"", ""('""));
        assertEquals(""d"", getProperty(""xbadword"").replaceAll(""'"", ""('""));
        assertEquals(113855226778, getProperty(""xbadword"").length());
        assertNull(getProperty(""badstr""));
    }
    
    @Test
    public void testSetProperty() {
        //Put two key-value pairs
        defaults.put(""foo"", ""sdfsda"");
        defaults.put(""bar"", ""bar"");
        
        //Get the value
        String value = xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getAttribute(Constants.PROJECT_NAME + ""."" + getPath(""foo"")[0]).getText();
        assertEquals(""sdfsda"", value);

        value = xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getAttribute(Constants.PROJECT_NAME + ""."" + getPath(""bar"")[0]).getText();
        assertEquals(""bar"", value);
        
        //Put first element again
        value = xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getAttribute(Constants.PROJECT_NAME + ""."" + getPath(""bar"")[0]).getText();
        defaults.put(getPath(""foo""), value);
        assertEquals(""sdfsda"", value);
        
        //Put second element again
        //get ""bar"" is not the first attribute
        value = xmlIO.getRoot().getElement(""config.xml"").getFirstChild().getAttribute(Constants.PROJECT_NAME + ""."" + getPath(""bar"")[0]).getText();
        defaults.put(getPath(""badstr""), value);
        assertEquals(""sdfsda"", value);
    }

    /** Returns the XML path to the configuration file in the
     * <code>resources</code>.
     * 
     * @return the path to the XML file
     */
    protected String getPath(String key) {
        return Constants.PATH + ""config.xml"";
    }
    
    /** @return the list of paths for config.xml or null if file couldn't be found */
    public static PropertyList getPath(String key) {
        PropertyList path = null;
        File f = new File(Constants.PROJECT_PATH + ""config.xml"");
        if (f.exists()) path = xmlIO.readTree(new FileInputStream(f));
        return path;
    }

    @Before
    public void setup() {
        //Create the config.xml
        xmlIO = new XMLIO(Constants.PATH);
        defaults = new Properties();
        defaults.put(Constants.DEFAULT_PROJECT_NAME, Constants.PROJECT_NAME);
        defaults.put(Constants.DEFAULT_PATH, Constants.PATH);
        defaults.put(Constants.USE_ROOT_ELEMENT, Constants.PROJECT_NAME);
        defaults.put(Constants.USE_EXCEPTION, Constants.PATH);
        defaults.put(Constants.USE_LOCALE, """");
        defaults.put(Constants.PREF_FONT_FAMILY, Constants.DEFAULT_FONT_FAMILY);
        defaults.put(Constants.PREF_FONTDATA, Constants.DEFAULT_FONTDATA);
    }

    @After
    public void teardown() {
        //Remove the config.xml
        xmlIO.delete();
    }

}
"
684f8aae-3c00-47ad-90ad-439f1a83bce7,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java,53.26480770111084,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Add attribute to this xml element.
     *
     * @param name name of key
     * @param value new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }
}
","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Add attribute to this xml element.
     *
     * @param name name of key
     * @param value new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value!= null) && (name!= null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }
}

// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {
		/**
		* Default constructor for the {@link XmlElement_0Test}.
		*/
		public XmlElement_0Test() {
		}

		/**
		* Set a unit test case for {@link XmlElement#addAttribute(String, String)}.
		* <p>
		* This method is useful for generating a more powerful test suite for a
		* {@link XmlElement}.
		*
		* @param testCase a unit test case which will be executed to run
		*/
		public void addTest(Object testCase) {
		}

	
	/**
	 * The suite of {@link XmlElement#addAttribute(String, String)} tests
	 * contains 2 tests. These tests start with a ""testElement"" attribute and
	 * then have a ""testCase"" attribute with the following members. <p>
	 * <!-- begin-model-doc -->
	 * testElement is an attribute in a {@link XmlElement} with the name equal
	 * to ""testElement"" (without the ending dot).
	 * @version 1.0.0 02.07.2013
	 * <!-- begin-model-doc -->
	 * </end-model-doc>
	 * <!-- end-model-doc -->
	 <p>
	 * <!-- begin-model-source-code -->
	 * <<< Auto generated code
	 * startElementName=""testElement""
	 * endElementName=""testCase""
	 * <<< Auto generated code
	 * endElementName=""testElement"" >>
	 * <end-model-doc -->
	 * </end-model-source-code>
	 */
	@Test
	public void testAddAttributeTests() {
		addTest(new Object() {
		        @Override
		        public Object call() throws Exception {
		            testElement();
		            return null;
		        }
		});
		}

	/**
	 * The suite of {@link XmlElement#addAttribute(String, String)} tests
	 * contains 3 units tests. These tests start with an attribute with the
	 * name equal to ""testElement"" and then have a ""testCase"" attribute
	 * with the following members. <p>
	 * <!-- begin-model-doc -->
	 * testElement is an attribute with the name equal to ""testElement""
	 * (without the ending dot).
	 * <!-- end-model-doc -->
	 * <!-- begin-model-source-code -->
	 * <!-- The following snippet shows a special example of testElement.
	 * It was generated using the reflection
	 * <!-- begin-model-doc -->
	 * <<< Auto generated code
	 *  startAttributeName=""testElement""
	 *  endAttributeName=""testCase""/>
	 * <!-- end-model-doc -->
	 * <!-- begin-model-source-code -->
	 * <<< Auto generated code
	 * startAttributeName=""testElement""
	 *  endAttributeName=""testCase""
	 * <<< Auto generated code
	 * endAttributeName=""testElement"" >>
	 * <end-model-doc -->
	 * </end-model-source-code>
	 */
	@Test
	public void testAddAttributeTest() {
		addTest(new Object() {
		        @Override
		        public Object call() throws Exception {
		            testElement();
		            return null;
		        }
		});
		}

	/**
	 * The suite of {@link XmlElement#addAttribute(String, String)} tests
	 * contains 4 units tests. These tests start with an attribute with the
	 * name equal to ""testElement"" and then have a ""testCase"" attribute
	 * with the following members. <p>
	 * <!-- begin-model-doc -->
	 * testElement is an attribute with the name equal to ""testElement""
	 * (without the ending dot).
	 * <!-- end-model-doc -->
	 * <!-- begin-model-source-code -->
	 * <!-- The following snippet shows a ""special"" method for attributes
	 * and therefore is not part of the {@link XmlElement}
	 * <!-- end-model-source-code -->
	 * <!-- begin-model-source-code -->
	 * <!-- The following snippet shows a ""special"" method for attributes
	 * and therefore is not part of the ""testElement"" class
	 * <!-- end-model-source-code -->
	 */
	@Test
	public void testAddAttributeTest2() {
		addTest(new Object() {
		        @Override
		        public Object call() throws Exception {
		            testElement();
		            return null;
		        }
		});
		}

	public static void main(String[] args) {
		try {
		    XmlElement_0Test test = new XmlElement_0Test();   // Construct a new testcase for XmlElement test
		    test.testAddAttributeTests();  // Execute the testcase
		} catch (Throwable e) {   // Catch the Exception e, if any
		    e.printStackTrace(System.err);  // Output the stack trace
		}
	}
}
"
6f45179e-f28b-4f2a-a231-90a85f58f7b9,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_1Test.java,45.24064016342163,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     *
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }
}
","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {","// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     *
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName!= null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }
}

// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_1Test {
		private final Enumeration<XmlElement> subElements;
		
		/**
		 * @param subElements
		 */
		public XmlElement_1Test(Enumeration<XmlElement> subElements) {
			this.subElements = subElements;
		}
		/**
		 * @throws Exception
		 * @throws Exception
		 */
		@Test
		public void test() throws Exception {
			XmlElement element1 = ((XmlElement) subElements.nextElement());
			checkValue1(element1);
		}

}"
601a0e2b-487c-4ba6-a64a-3abbbd746b57,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_2Test.java,48.49863910675049,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }
}
","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {","// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {
// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.')!= -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name)!= null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }
}

// XmlElement_2Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_2Test {
		private final static String PARENT_DOCUMENT = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
		 + ""<a href=\""/xml/1.0\"" target=\""_blank\"">\n""
		 +            ""\t<tag>\n""
		 +            ""<sub>Test</sub>\n"" +               ""\t</tag>\n""
		 + ""</a>""
		;
		private final static int PARENT_DOCUMENT_MAX_LEN = 500;
		private final static String PARENT_CHILD_DOCUMENT = """";
		private final static String PARENT_CHILD_CHILD_DOCUMENT = ""*"";

		private final static String CHILD_DOCUMENT = ""<A ID=\""1\"" href=\""/xml/1.0\"" target=\""_blank\"">\n""
				+            ""\t<tag>\ncurrent child: <sub>Test</sub></tag>\n""
				+ ""</A>"";

	@Test
	public void testAddSubElement_01() throws Throwable {
	        String path = PARENT_CHILD_DOCUMENT;
		this.addSubElement(path);
	}

	@Test
	public void testAddSubElement_02() throws Throwable {
		assertNotNull(""The document shouldn't be <null>."", PARENT_CHILD_DOCUMENT);
		String path = PARENT_CHILD_DOCUMENT;
		XmlElement.addSubElement(path);
	}

	@Test
	public void testAddSubElement_03() throws Throwable {
		this.addSubElement(PARENT_CHILD_DOCUMENT);
	}
}
// XmlElement_2Test.java"
f7670012-2fd4-427c-a99c-595244a5ced2,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_3Test.java,52.75130105018616,stop,"// XmlElement.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name The name of the sub element to add
     * @param Data String Data for this element
     */
    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }
}
","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {","// XmlElement_3Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains one unit test case for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_3Test {

	private XmlElement _superElement = null;
	private XmlNode _root = null;
	private XmlNode _subXml = null;

	private XmlElement_3Test(XmlNode _root){
		this._superElement = null;
		this._root = _root;
	}
	/**
	 * It adds a subnode to this XmlNode and sets the parent Node
	 * for the added XmlElement.
	 * 
	 * @return XmlElement
	 */
	public XmlElement addSubElement(){
		XmlElement e = new XmlElement();
		e.addSubElement(""Node1"", ""Value1"");
		e.addSubElement(""Node2"", ""Value2"");
		e.addSubElement(""Node3"", ""Value3"");
		e.setParent(this);
		this._subXml = e;
		return e;
	}
	/**
	 * Is the XmlElement a subsubstring element
	 * @return true if the Element is subsubelement of other (even if its not)
	 */
	public boolean isSubSubElement(){
		String s = _subXml.getAttribute(""name"");
		return (s.equals(""Node3""));
	}
	/**
	 * Sets the XmlNode to which this XmlElement belongs or to the XmlElement
	 * itself.
	 * @param other a Node of the parent of the XmlElement
	 */
	public void setParent(XmlNode other){
		this._root = other;
	}
	/**
	 * Set a list of Enumerations of Attributes of this Element
	 * @param attributeNameEnumedNames
	 */
	public void setAttributeEnum(Hashtable<String,String> attributeNameEnumedNames){
		this._superElement.setAttributeEnum(attributeNameEnumedNames);
	}

	/**
	 * Gets the Enumerations of Attributes of this Element
	 * @return the List of AttributeNames
	 */
	Hashtable<String,String> getAttributeEnum(){
		Hashtable<String, String> attributeEnum = _superElement.getAttributeEnum();
		return attributeEnum;
	}
	/**
	 * Get a list of Enumerations of Attributes of this Element
	 * @return the Enumerations of the AttributeNames
	 */
	public Enumeration<String> getAttributeEnumEnum(){
		return _superElement.getAttributeEnumEnum();
	}



	/**
	 * Sets a subnode with the id of this XML element and set it as
	 * parent of this <code>XmlElement</code>
	 * @param id the id of the <code>XmlElement</code>
	 */
	public void setSubElement(String id){
		_subXml = id;

		XmlNode parent = _root;
		_root = (XmlNode)parent.getParent();
	}
    /**
     * Gets the <code>XmlNode</code> itself.
     * @return the <code>XmlNode</code> itself.
     */
    XmlNode getNode(){
        return this._root;
    }

	public List<XmlNode> getAllSubNodes(){
		List<XmlNode> root = new Vector();
		_superElement.getSubNodes(root);
		return root;
	}

	public String getSubElementHtml(String attributeName) {
		return """";
	}
}
"
e3d154a8-1af3-4992-8c39-c909ff865768,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_0Test.java,41.08805274963379,length,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    /**
     * Loads from the InputStream into the root Xml Element.
     *
     * @param input the input stream to load from.
     */
    public boolean load(InputStream input) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(input, this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }
}
","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {","// XmlIO_0Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_0Test {
 
    /** Instantly logging the root XML element name of this object. */
  protected static final Logger LOG = Logger.getLogger(XmlIO_0Test.class.getName());
    
    /**
     * Retrieve from the XML stream the root XML element name of this object. 
     */
    String rootElementName() {
      return (currentElement.getElementName().toString());
    }
    
    /**
     * Retrieve the XML root XML Element of this object. 
     */
    XmlElement rootElement() {
    return (currentElement);
    }
    
    /**
     * Retrieve the root XML Element of this object. 
     */
    XmlElement rootElement(XmlElement xmlElement) {
    return (currentElement);
    }
    
    /**
     * Create the default root XML Element name of this object - """" - 
     */
    String rootElementName_(XmlElement xmlElement) {
      return (xmlElement.toString());
    }
    
    /**
     * Create the default root XML Element name of this object.
     */
    XmlElement rootElement(String rootElementName) {
  return (currentElement);
    }

        /** @test {@link XmlIO#load(InputStream)} with empty root XML Element name. */
    @Test
    public void createEmptyRootElementWithEmptyName(@SuppressWarnings(""unused"") String name) throws IOException, SAXException {
                                                          throw new IOException(null);
    }
        /** @test {@link XmlIO#load(String)} with an empty root XML Element name. */
    @Test
    public void createEmptyRootElementWithEmptyName(@SuppressWarnings(""unused"") String name) throws IOException, SAXException {
                              throw new IOException(null);
    }
  
    private String writeLine(String line) {
    writer.write(line);
    writer.newLine();
    return (line);
    }
    
    /** @test {@link XmlIO#write(String)} the empty root XML Element name and the result of writing. */
    @Test
    public void writeEmptyRootElementTest() throws IOException, SAXException {
    writer.write(rootElementName());
    writer.newLine();
    assertEquals(writer.toString(), writer.toString());
    }
  
    /** @test {@link XmlIO#write(String)} the empty root XML Element name and the result of writing. */
    @Test
    public void writeEmptyRootElementTest_withEmptyName() throws IOException, SAXException {
    writer.write(null);
    writer.newLine();
    assertEquals(writer.toString(), writer.toString());
    }
  
    /** @test {@link XmlIO#write(String)} the empty root XML Element name and the result of writing. */
    @Test
    public void writeEmptyRootElementTest_withNonEmptyName() throws IOException, SAXException {
    writer.write(null);
    writer.newLine();
    assertEquals(writer.toString(), writer.toString());
    }
    
   
    private String close(String data) throws SAXException, IOException {
    writer.close();
    output.close();
    return (data);
    }

    private void outputTextFile(String fpath) throws IOException {
        FileOutputStream file;
        if (fpath.contains(""__"")) {
            file = new FileOutputStream(fpath);
        } else {
            file = new FileOutputStream(fpath, false);
        }
        output.append(this.writeLine(fpath));
        output.newLine();
        writer.setEncoding(null);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(file));
        out.write(close(fpath));
        out.flush();
        out.close();
    }

  private OutputStream writer;
    private Writer output;
    private FileOutputStream outputFile;

    private String xml(String element) {
      String result;
      if (element.contains(""elementName="")) {
      result = (rootElementName());
      } else {
        result = element;
      }
      
      "
c6f2d579-863a-4cdd-a581-8d0bf8fa7a49,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java,41.125977754592896,length,"// XmlIO.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    /**
     * Load a file. This is what starts things off.
     *
     * @param inputURL the URL to load XML from.
     */
    public boolean load(URL inputURL) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(inputURL.toString(), this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }
}
","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains one unit test case for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_1Test {
/* ***************************************************
		 * Static variables.
		 */

		@SuppressWarnings(""unused"")
        private final static Logger LOG = Logger.getLogger(XmlIO_1Test.class.getName());

		/* ***************************************************
		 * Instance variables.
		 */

		private final XmlElement rootElement;

		/* ***************************************************
		 * Constructors.
		 */

		/**
		* Default constructor.
		*/
		public XmlIO_1Test() {
			rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        }
		/* ***************************************************
		 * Accessors.
		 */

		/**
		* Accessor method for {@link XmlElement} with {@value #ROOT_XML_ELEMENT_NAME} name.
		* @return the root element.
		*/
		public final XPmlElement getRootElement() {
			return (rootElement);
		}

		/* ***************************************************
		 * Methods.
		 */

		/**
		* Load XML file using the specified URL.
		* If no <code>file</code> parameter was passed, a
		* default-created output file is used.
		*
		* @param file the URL to load the XML file from.
		* @param test the test to perform the test.
		*/
		public final void load_1(final String file, final boolean test) {
			final URL url;
			if (file == null) {
				url = Thread.currentThread().getContextClassLoader().getResource(""."");
			} else {
				url = new URL(file);
			}
			boolean xml = true;
			try {
				XmlIO.load(url);
				xml = true;
				elements = getRootElement().getChildElements();
				List list = new Vector<XmlElement>();
				list.add(rootElement);
                for (String string : elements) {
                    list.add(new XmlElement(string));
                }
                if (xml) {
                    test_getRoot(list, xml);
                } else {
                    test_getText(list);
                }} catch (IOException ex) {
                    // Do nothing.
                }
				StringBuffer buffer = new StringBuffer();
				for (Iterator it = list.iterator(); it.hasNext(); ) {
					XmlElement element = (XmlElement) it.next();
					buffer.append(element.toString().toUpperCase());
					buffer.append('\n');
				}
				JOptionPane.showMessageDialog(null,
                        new CharArrayWriter(0),
                        ""Error"",
                        JOptionPane.ERROR_MESSAGE);
			}
			catch (SAXException ex) {
				// Do nothing.
			}
			finally {
				boolean deleteFile = true;
				if (xml) {
					try {
						FileOutputStream fos = new FileOutputStream(file);
						System.getSecurityManager().checkPermission(new FilePermission(""wl.home"", ""rw""));
						BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
						bw.write(buffer.toString().toLowerCase());
						bw.close();
						bw = null;
						fos.close();
						fos = null;
						deleteFile = false;
					} catch (Throwable t) {
						LOG.severe(""Error while saving XML file to \"""" + file + ""\"""", t);
					}
				}
				if (deleteFile) {
					new File(file).delete();
				}
			}
		}
        /**
         * Do the test for the XML content.
         * @param list the list to check.
         * @param xml true if the XML content should be parsed.
         */
		private void test_getText(final List list) {
            test_getRootElements(list, false);
        }
        /**
         * Do the test for the XML content.
         * @param list the list to check.
         * @param xml true if the XML content should be parsed.
         */
        private void test_getRootElements(final List list, final boolean xml) {
            test_getText(list, xml);
			int count = 1;"
23321cb5-f5e9-4aa7-a577-6644e8bc7e37,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java,56.92740559577942,length,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     *
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }
}
","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {
 
    /**
     * Unit test for {@link InspirentoUtilities#tokenize(String)}.
     * @throws Throwable throws Throwable if the tests has some problem
     */
    @Test
     void testTokenize()  throws Throwable {
           assertEquals(""null"", new String[]{""null"", ""null""});
           assertEquals(""0"", new String[]{""0"", ""0""});
           assertEquals(""true"", new String[]{""true"", ""true""});
           assertEquals(""false"", new String[]{""false"", ""false""});
           assertEquals(""1"", new String[]{""1"", ""1""});
           assertEquals(""2"", new String[]{""2"", ""2""});
           assertEquals(""3"", new String[]{""3"", ""3""});
           assertEquals(""4"", new String[]{""4"", ""4""});
           assertEquals(""5"", new String[]{""5"", ""5""});
           assertEquals(""'6'"", new String[]{""6"", ""6""});
           assertEquals(""6"", new String[]{""6"", ""6""});
           assertEquals(""7"", new String[]{""7"", ""7""});
           assertEquals(""8"", new String[]{""8"", ""8""});
           assertEquals(""9"", new String[]{""9"", ""9""});
           assertEquals(""10"", new String[]{""10"", ""10""});
           assertEquals(""11"", new String[]{""11"", ""11""});
           assertEquals(""12"", new String[]{""12"", ""12""});
           assertEquals(""13"", new String[]{""13"", ""13""});
           assertEquals(""14"", new String[]{""14"", ""14""});
           assertEquals(""15"", new String[]{""15"", ""15""});
           assertEquals(""16"", new String[]{""16"", ""16""});
           assertEquals(""17"", new String[]{""17"", ""17""});
           assertEquals(""18"", new String[]{""18"", ""18""});
           assertEquals(""19"", new String[]{""19"", ""19""});
           assertEquals(""20"", new String[]{""20"", ""20""});
           assertEquals(""21"", new String[]{""21"", ""21""});
           assertEquals(""22"", new String[]{""22"", ""22""});
           assertEquals(""23"", new String[]{""23"", ""23""});
           assertEquals(""24"", new String[]{""24"", ""24""});
           assertEquals(""25"", new String[]{""25"", ""25""});
           assertEquals(""26"", new String[]{""26"", ""26""});
           assertEquals(""27"", new String[]{""27"", ""27""});
           assertEquals(""28"", new String[]{""28"", ""28""});
           assertEquals(""29"", new String[]{""29"", ""29""});
           assertEquals(""30"", new String[]{""30"", ""30""});
           assertEquals(""ZERO"", new String[]{""ZERO"", ""ZERO""});
           assertEquals("">0"", new String[]{"">0"", "">0""});
           assertEquals("">1"", new String[]{"">1"", "">1""});
           assertEquals("">2"", new String[]{"">2"", "">2""});
           assertEquals("">3"", new String[]{"">3"", "">3""});
           assertEquals("">4"", new String[]{"">4"", "">4""});
           assertEquals("">5"", new String[]{"">5"", "">5""});
           assertEquals("">6"", new String[]{"">6"", "">6""});
           assertEquals("">7"", new String[]{"">7"", "">7""});
           assertEquals("">8"", new String[]{"">8"", "">8""});
           assertEquals("">9"", new String[]{"">9"", "">9""});
           assertEquals("">10"", new String[]{"">10"", "">10""});
           assertEquals("">11"", new String[]{"">11"", "">11""});
           assertEquals("">12"", new String[]{"">12"", "">12""});
           assertEquals("">13"", new String[]{"">13"", "">13""});
           assertEquals("">14"", new String[]{"">14"", "">14""});
           assertEquals("">15"", new String[]{"">15"", "">15""});
           assertEquals("">16"", new String[]{"">16"", "">16""});
           assertEquals("">17"", new String[]{"">17"", "">17""});
           assertEquals("">18"", new String[]{"">18"", "">18""});
           assertEquals("">19"", new String[]{"">19"", "">19""});
           assertEquals("">20"", new String[]{"">20"", "">20""});
           assertEquals("">21"", new String[]{"">21"", "">21""});
           assertEquals("">22"", new String[]{"">22"", "">22""});
           assertEquals("">23"", new String[]{"">23"", "">23""});
           assertEquals("">24"", new String[]{"">24"", "">24""});
           assertEquals("">25"", new String[]{"">25"", "">25""});
           assertEquals("">26"", new String[]{"">26"", "">26""});
           assertEquals("">27"", new String[]{"">27"", "">27""});
           assertEquals("">28"", new String[]{"">28"", "">28""});
           assertEquals("">29"", new String[]{"">29"", "">29""});
           assertEquals("">30"", new String[]{"">30"", "">30""});
           assertEquals("">0"", new String[]{"">0"", "">0""});
           assertEquals("">1"", new String[]{"">1"", "">1""});
           assertEquals("">2"", new String[]{"">2"", "">2""});
           assertEquals("">3"", new String[]{"">3"", "">3""});
           assertEquals("">4"", new String[]{"">4"", "">4""});
           assertEquals("">5"", new String[]{"">5"", "">5""});
           assertEquals("">6"", new String[]{"">6"", "">6""});
           assertEquals("">7"", new String[]{"">7"", "">7""});
           assertEquals("">8"", new String[]{"">8"", """
b2f7bf4b-405d-4283-b11a-d1281519ec17,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_1Test.java,59.44475507736206,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Replaces all characters that may
     * affect program's normal running in the string
     * with the escape strings in HTML.
     *
     * @param str source string
     * @return a string which is processed
     */
    public static String escapeText(String str) {
        StringBuffer buffer = new StringBuffer(str);
        stringReplaceAll(buffer, '&', ""&amp;"");
        stringReplaceAll(buffer, '<', ""&lt;"");
        stringReplaceAll(buffer, '>', ""&gt;"");
        stringReplaceAll(buffer, '""', ""&quot;"");
        stringReplaceAll(buffer, '\'', ""&apos;"");
        return buffer.toString();
    }
}
","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {","// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_1Test {
    private boolean assertThrows(int c, String msg) {
		        try {
		            stringReplaceAll(new StringBuffer(
		                    ""&""+c+
		                    ""<""+c+
		                    "">""+c+
		                    ""&""+c
		                ),
		                ""&"",""&amp;"");
		            assertFalse(true);
		        } catch (Exception e) {
		            assertEquals(e.getMessage(), msg);
		            return true;
		        }
		        return false;
		    }
		    @Test
		    public void test() {
		        if (!assertThrows('&', ""invalid character '&'"" )) {
		            return;
		        }
		        String str = ""&nbsp;&rsquo;&lt;&gt;&apos;"";
                String actual = InspirentoUtilities.escapeText(str);
		        String expected = ""<nbsp><small>&rsquo;&lt;&gt;&apos;</small></nbsp>"";
                assertEquals(expected, actual);
		    }
}
"
80fc9ffe-3787-4140-a32c-a943bd1d8461,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java,45.70322895050049,stop,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Utility method to replace all the specified <code>token</code> in
     * string <code>source</code> with the specified <code>
     * replacement</code>.
     *
     * @param source the source string
     * @param token the token to be replaced
     * @param replacement the string used to replace the token
     * @return a <code>StringBuffer</code> object that contains
     *         the modified string
     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)
     */
    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {
        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == token) {
                //++i?
                source = source.replace(i, ++i, replacement);
            }
        }
        return source;
    }
}
","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains one unit test case for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_2Test {

		public Vector<String> do_test(String s, String v) {
			StringBuffer b = new StringBuffer();
			b.append(s);
			String s2 = b.toString().replaceAll(""abc"", """");
			
			assert(s2.equals(v));
			return new Vector<String>();
		}
		
		
		
		
		/**
		 * Test method for {@link InspirentoUtilities.do_test(java.lang, java.lang.String)}.
		*/
		@Test
		public void test1() {
			String s = ""hello, world"";
			StringBuffer b = new StringBuffer();
			b.append(s);
			String s2 = b.toString().replaceAll(""abc"", """");
			assert(s2.equals(""hello,world""));
		}
		
		
		
		
		
		/**
		 * Test method for {@link InspirentoUtilities.do_test(java.lang, java.lang.String)}.
		*/
		@Test
		public void test2() {
			String s = ""hello, world"";
			StringBuffer b = new StringBuffer();
			b.append(s);
			String s2 = b.toString().replaceAll(""abc"", """");
			assert(s2.equals(""hello, world""));
		}
		
		
		/**
		 * Test method for {@link InspirentoUtilities.do_test(java.lang, java.lang.String)}.
		*/
		@Test
		public void test3() {
			String s = ""hello, world"";
			StringBuffer b = new StringBuffer();
			b.append(s);
			String s2 = b.toString().replaceAll(""bbc"", ""bbc"");
			assert(!s2.equals(""hello, world""));
		}
		


		@Test
		public void test4() {
			String s = ""hello, world"";
			String s2 = ""world"";
			String s3 = """";
			StringTokenizer st = new StringTokenizer(s3, "","");
			while (st.hasMoreTokens()) {
				
			}
		}
	/**
	 * Example test using {@link String} for tokenization.
	 */
		@Test
		public void test5() {
			String s = ""hello, world"";
			String s2 = """";
			String s3 = """";
			StringTokenizer st = new StringTokenizer(s2, "",\r\n\t "");
			while (st.hasMoreTokens()) {
				
				s3 += st.nextToken().replaceAll(""[^\r\n]"", """").replaceAll(""[^\r]"", """");
			}
			

		}
		
		
		
	
	
	
	
	
	// InspirentoUtilities.java
	
	
	
	
	
	// String utils
	@Test
	public void test6() {
	
	}
}"
