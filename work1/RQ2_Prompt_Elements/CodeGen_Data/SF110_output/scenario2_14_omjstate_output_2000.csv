ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
91fb3ea9-e8c8-4a17-8ef7-698555b1668f,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,54.394681453704834,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {

	/**
	 * The IState of the State Machine
	 */
	private IState initialState;
	
	/**
	 * The Event of the event triggered the State Machine to initiate, 
	 */
	private Event triggerEvent;

    Transition_0Test(IState initialState, Event triggerEvent) {
        this.initialState = initialState;
        this.triggerEvent = triggerEvent;
    }

    /**
     * Return the IState of the StateMachine
     * @return IState
     */
    public IState getState() {
        return initialState;
    }

	/**
	 * Set the IState of the StateMachine
	 * @param state the state state
	 */
    protected void setState(IState state) {
	    initialState = state;
    }

    /**
     * Returns the Event of the event triggered the State Machine to initiate
     * @return Event
     */
    public Event getTriggerEvent() {
        return triggerEvent;
    }

    /**
     * Sets the Event of the event triggered the State Machine to initiate
     * @param triggerEvent The State Machine to initiate the Event
     */
    protected void setTriggerEvent(Event triggerEvent) {
        this.triggerEvent = triggerEvent;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).toString();
    }

    @Test
    public void testEquals() throws Exception {
        assertTrue(new Transition((IState) null, null).equals(new Transition((IState) null, null)));
        assertTrue(new Transition((IState) null, null).equals(new Transition((IState) null, ""initiated"")));
        assertFalse(""equals should return false"", new Transition((IState) null, ""initiated"").equals(new Transition((IState) null, ""initiated"")));
        assertTrue(new Transition((IState) null, null).equals(new Transition((IState) null, ""notstartedinitiated"")));
        assertFalse(""equals should return false for transition with nulls"", 
                new Transition((IState) null, null).equals(new Transition((IState) null, ""initiated"")));
        assertTrue(""equals should return false for different event"", 
                new Transition((IState) null, ""initiated"").equals(new Transition((IState) null, ""notstartedinitiated"")));
        assertTrue(""not equals"", new Transition((IState) null, ""notstartedinitiated"").equals(new Transition((IState) null, ""notstartedinitiated"")));
    }
    
    @Test
    public void testHashCode() throws Exception {
        
        assertEquals(""equals should always return true"", 
                new Transition((IState) null, null).equals(new Transition((IState) null, null)), true);
        assertEquals(""hashcode should return same hashcode for both types"", 
                (new Transition((IState) null, null)).hashCode(), 
                new Transition((IState) null, null).hashCode());
        assertFalse(""hashcode should return different hashcode for not null"", 
                new Transition((IState) null, null).hashCode(), 
                new Transition((IState) null, ""notstartedinitiated"").hashCode());
        
	}
	
	@Test
	public void testUpdateGuardConditions() throws Exception {
         assertNotNull(new Transition((IState) null, null).guardConditions);
         assertTrue(""guardConditions is empty"", new Transition((IState) null, null).guardConditions.isEmpty());
         assertEquals(triggerEvent.equals(new Transition((IState) null, null).triggerEvent),
                    !initialState.equals(new Transition((IState) null, null).triggerEvent));
        
	}

}
"
139e878b-4091-483d-86c5-b6c61e3e750f,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,54.44462823867798,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {

    /**
     * Test 1 - Single transition with only a initial state event
     * Test 2 - Transition with a START_EVENT and an END_EVENT,
     * a combination of START, END and START_EVENT.
     * <p>
     * TODO fix
     * Creation date: (13/03/01 23:10:27 PM)
     * @throws Exception
     */
    @Test
    void test1() throws Exception {
        /**
         * Test Case 1 - Single transition with only a initial state event
         */
        final IState initialState = getInitialState();
        
        // Start state transition
        final IState startState = IState.getStartState();
        final Event triggerEvent = new Event(""trigger"");
        final IState outputState = new State();
        final boolean willTrigger = initialState.willTrigger(startState, triggerEvent);
        assertTrue(willTrigger);
        final Event checkEvent = new Event(""event"");
        final IState endState = IState.getEndState();
        final boolean willIgnore = IState.getStartState().willTrigger(endState, checkEvent);
        final boolean transitionWasSuccessful = initialState.isStarted()
               ? initialState.equals(endState)
                : (initialState.isEnded()? initialState.equals(endState) : false);
        assertTrue(transitionWasSuccessful);
        
        // Transition with START_STATE as the first state and a START_EVENT
        final Transition_1 transition = new Transition_1();
        final IState new_initialState = getNewState(initialState, true, false);
        final IState new_startState = new_initialState;
        final IState new_triggerEvent = new Event(""TRIGGER"");
        final boolean willTrigger = startState.willTrigger(new_startState, new_triggerEvent);
        final boolean transitionWasSuccessful = initialState.isStarted()
               ? initialState.equals(new_startState)
                : (initialState.isEnded()? initialState.equals(new_startState) : false);
        assertTrue(""Transition didn't succeed"", transitionWasSuccessful);
        
        /**
         * Test Case 2 - Transition with START_STATE, END_EVENT and START_STATE (again)
         */
        final IState new_trigger = new TriggerEvent(""TRGERY"", startState);
        final boolean transitionWasSuccessful = initialState.isStarted()
               ? initialState.equals(new_trigger)
                : (initialState.isEnded()? initialState.equals(new_trigger) : false);
        assertTrue(""Transition didn't succeed"", transitionWasSuccessful);
        
        assertTrue(transitionWasSuccessful);
    }
        
    final IState getInitialState() {
        return IState.getStartState();
    }
        
    final IState getNewState(final IState pInitialState, final boolean pTriggersInitialState, final boolean pIsStarted) {
        IState new_state = null;
        if (pIsStarted) {
            new_state = IState.getStartState();
        } else {
            new_state = IState.getEndState();
        }
        if (pTriggersInitialState) {
            new_state = new_state.trigger(pInitialState);            
        }
        return new_state;
    }
        
    transient final IState initialState;
        transient final IState trigger;
        transient final IState triggerEvent;
        transient final Event triggerEvent_type;
        
        transient IState new_initialState;
        transient StateFactory new_trigger;
        transient boolean willTrigger_TRIGGER;
        transient boolean willTrigger_EVENT;
        transient boolean willIgnore_TRIGGER;
    
        transient public static final class StateFactory {

            @Override
            public IState newInitialState(final IState pInState) {
                return pInState;
            }

            @Override
            public IState newTriggerState(final IState pTrigState) {
                return new TriggerState();
            }

            @Override
            public Event newTriggerEvent(final Event pTrigger) {
                return pTrigger;
            }

        }
        
        transient Boolean isStartState;
        transient Boolean isEndState;
        transient Boolean triggered;
        
    }    
    
    class Transition_1 extends Transition {

        
        Transition_1() {
            super(new StateFactory());
        }
        
        public void willTrigger(final IState pCurrentState, final Event pTriggerEvent) {
            this.trigger = pTriggerEvent;
            this.triggerEvent_type = this.trigger.getType();
            this.isStartState = pCurrentState.isStarted();
            this.isEndState = pCurrentState.isEnded();
            this.triggerWasSuccessful = pCurrentState.isTriggerable();
        }
        
        public boolean isTriggerable() {
            return this.trigger!= null;
        }
        
        public Boolean isEndState() {
            return this.isEndState;
        }
    }
        


}

"
369ff4e2-f574-479d-9d1b-373e9f237ecf,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,52.75794792175293,stop,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	// private StringMatchesGuardConditionTest()
	// {
	// }

		@Test
    public void testEvaluate() {
				
		String str = ""TEST"";
		
		StringMatchesGuardCondition cond = new StringMatchesGuardCondition();
		int result = cond.evaluate(new uk.me.jockmacmad.jstate.state.Event(str));
		assertEquals(1, result);
    }
}"
addfd9e7-383b-4d54-bda3-9910433713ec,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,29.290011644363403,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton() {
        return SINGLETON;
    }
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {
static final org.junit.jupiter.api.Tag TAG = org.junit.jupiter.api.Tag.NONE;

	@Test
    void testConstructor() {
		System.out.println(""Testing Constructor with no specific constructor argument"");
	}

	@Test
    void testEquals() {
		System.out.println(""Testing equals"");

		// We can't just use EqualsBuilder as a finalizer
		EndState aObj;
		EndState bObj;
		assertEquals(aObj, bObj);

		aObj = new EndState();
		assertNotEquals(aObj, bObj);
		assertNotEquals(aObj, bObj);

		aObj = new EndState();
		bObj = new EndState();
		assertNotEquals(aObj, bObj);
		assertNotEquals(aObj, bObj);
	}

	@Test
    @org.junit.jupiter.api.Disabled
    void testHashCode() {
		System.out.println(""Testing hashtable hashcode"");

		// We can't just use HashCodeBuilder since finalizers need to be installed
		EndState aObjCmp;
		EndState aObj;
		aObjCmp = new EndState();
		aObj = new EndState();
		HashCodeBuilder hb = new HashCodeBuilder(29, 7);
		hb.toHashCode(aObj);
		assertEquals(aObj.hash(), hb.toHashCode(aObj));

		aObj = new EndState();
		aObjCmp = new EndState();
		HashCodeBuilder hb2 = new HashCodeBuilder(29, 7);
		hb2.toHashCode(aObjCmp);
		assertEquals(aObjCmp.hash(), hb2.toHashCode(aObjCmp));

		aObj = new EndState();
		aObjCmp = new EndState();
		hb2 = new HashCodeBuilder(17, 3);
		hb2.toHashCode(aObjCmp);
		assertEquals(aObjCmp.hash(), hb2.toHashCode(aObjCmp));

		aObj = new EndState();
		aObjCmp = new EndState();
		hb2 = new HashCodeBuilder(17, 3);
		hb2.toHashCode(aObjCmp);
		assertEquals(aObjCmp.hash(), hb2.toHashCode(aObjCmp));

		aObj = new EndState();
		aObjCmp = new EndState();
		aObjCmp.setType(""TYPE"");
		aObjCmp.getName();
		assertNotEquals(aObjCmp.hashCode(), aObjCmp.hashCode());
	}
}

/**
 * {@link uk.me.jockmacmad.jstate.state.EndState #END_STATE} class.
 *
 * @author Don Stewart
 * @version 0.1
 * @since 0.1
 * @see EndState
 */
public final IState endState;

/**
 * Instantiates an EndState object by the given singleton implementation.
 *
 * @param singleton The object implementation.
 * @since 0.1
 * @see EndState
 */
public EndState_0Test(final IState singleton) {
	endState = singleton;
	// Empty default constructor
}


/**
* @return Returns the singleton instance of {@link uk.me.jockmacmad.jstate.state.EndState}.
* @since 0.1
* @see uk.me.jockmacmad.jstate.state.EndState
*/
public final IState getSingleton() {
	return endState;
}

}
"
37b3e5b2-4032-45b6-94eb-90b4b60b2ab7,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,59.7636239528656,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {
private EndState endState;
		/**
		 *
		 * @throws java.lang.AssertionFailedError
		 * @since 0.1
		 */
	@Test
    public void testToObject() {
    	assertNotNull(endState);
		assertEquals(this,endState);
    }
}

// EndState_2Test.java"
8ecaf777-befd-44dd-a075-b05b30e838ea,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,59.06068754196167,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton() {
        return SINGLETON;
    }
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {
private static final StartState SINGLETON = new StartState();

        /**
         * Test method for {@link StartState#getSingleton()}.
         * @throws java.lang.AssertionFailedException
         *             when an error occurs in before method in class {@link StartState}.
         */
		@Test
		public void testGetSingleton() throws AssertionFailedException {
			assertFalse(SINGLETON.equals(null));
			assertFalse(SINGLETON.equals(new Object()));
			assertFalse(SINGLETON.equals(SINGLETON));
			assertFalse(SINGLETON.equals(SINGLETON(""a"")));
			assertTrue(SINGLETON.equals(SINGLETON(""a"", new String[]{""a""}, ""a"")));
			assertFalse(SINGLETON.equals(SINGLETON(""this"")));
			assertFalse(SINGLETON.equals(SINGLETON(""a"", ""a"")));
			assertFalse(SINGLETON.equals(SINGLETON(""something"")));
			assertFalse(SINGLETON.equals(SINGLETON(""a"", null)));
		}

		/**
         * Test method for {@link StartState#hashCode()}.
         * @throws java.lang.AssertionFailedException
         *             when an error occurs in hashCode on any of the parameter types.
         */
		@Test
        public void testHashCode() throws AssertionFailedException{
			assertEquals(SINGLETON.hashCode(), SINGLETON.hashCode());
		}

		/**
         * Test method for {@link StartState#toString()}.
         * @throws java.lang.AssertionFailedException
         *             when an error occurs in toString on any of the parameter types.
         */
        public void testToString() throws AssertionFailedException {
            assertEquals(new StartState().toString(), new StartState().toString());
        }

        /**
         * Test method for {@link StartState#equals(java.lang.Object)}.
         */
		@Test
        public void testEqualsObject() {
            assertTrue(SINGLETON.equals(new Object()));
            assertFalse(new StartState().equals(new Object()));
        }

        /**
         * Test method for {@link StartState#hashCode()}.
         */
        public void testHashCode() {
			assertEquals(SINGLETON.hashCode(), SINGLETON.hashCode());
		}

        /**
         * Test method for {@link StartState#toString()}.
         */
        public void testToString() {
            assertEquals(""Start "" + SINGLETON, new StartState().toString());
        }

        /**
         * Test method for {@link StartState#createState()}.
         * Creation date: (12/02/01 8:20:28 PM)
         * @throws java.lang.AssertionFailedException
         *             when an error occurs in createState method in class {@link StartState}.
         */
        @Test
		public void testCreateState() throws AssertionFailedException{
			assertNotNull(new StartState("""").createState());
		}

        /**
         * Test method for {@link StartState#createState(java.lang.String[], java.lang.String[])}.
         * Creation date: (11/20/01 09:23:58 PM)
         * @throws java.lang.AssertionFailedException
         *             when an error occurs in createState method in class {@link StartState}.
         */
        @Test
        public void testCreateState() throws AssertionFailedException {
			System.out.println(new StartState(""a"", null).createState(null));
			assertNotNull(new StartState(""a"", null).createState(null));
		}

	}

// SINGLETON_0Test.java 
"
aba957a9-f32c-405f-a454-82d03814a4c3,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,35.97832775115967,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {
@Test
		public void testStartState() throws Exception {
			String message = ""This is a test message."";
			StartState toCompare1 = new StartState();
			toCompare1.startState().toString();
			assertEquals(""ToString: "", this.getClass().getSimpleName(),"" - a StartState instance and no message."",
				this.getClass().getSimpleName()+"" - a StartState instance."", message);
	}

}
"
