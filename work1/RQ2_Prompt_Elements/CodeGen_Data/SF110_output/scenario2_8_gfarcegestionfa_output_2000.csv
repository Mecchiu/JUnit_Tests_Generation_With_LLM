ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
198f843e-375d-4d08-adf5-b2721406f85c,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,39.95582556724548,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de la formation
     *
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {
/**
		* test method for {@link FenetrePrincipale#compteDistantesDeFormation(int)}.
		* Tests {@link FenetrePrincipale#compteDistantesDeFormation(int)</code> method in
		* {@link FenetrePrincipale} class
		*/
		@Test
		public void testFnCompteDistantesDeFormation4() {
				// Arrange
				ListSelectionModel ssm = listJourJour.getSelectionModel();
				ListSelectionModel ssm2 = listMois.getSelectionModel();
				ListSelectionModel ssm3 = listAnnee.getSelectionModel();
				ListSelectionModel ssm4 = listFormation.getSelectionModel();
				int nbDeFormations = 2;
				ListSelectionModel ssm11 = listFormation.getSelectionModel();
				int nbDeFormations2 = 2;

				// Act
				FenetrePrincipale_0.compteDistantesDeFormation(nbDeFormations);
				FenetrePrincipale_0.compteDistantesDeFormation(nbDeFormations2);

				// Assert
				assertEquals(""wrong selection count"", 3, ssm.getSelectedIndex());
				assertEquals(""wrong selection count"", 3, ssm2.getSelectedIndex());
				assertEquals(""wrong selection count"", 3, ssm3.getSelectedIndex());
				assertEquals(""wrong selection count"", 4, ssm4.getSelectedIndex());
				assertEquals(""wrong selection count"", nbDeFormations, listJourJour.getSelectedIndex());
				assertEquals(""wrong selection count"", nbDeFormations2, listMois.getSelectedIndex());
				assertEquals(""wrong selection count"", nbDeFormations, listAnnee.getSelectedIndex());
				assertEquals(""wrong selection count"", nbDeFormations2, listFormation.getSelectedIndex());
		}

		/**
		*  unit tests for {@link FenetrePrincipale_0#compteDistantesDeFormation(int)}{@code 
		*  @}
		*/
				@Test
				public void testCalculToutesSosFormationNonAjout() {
						// Arrange
						Calendar firstCalender = Calendar.getInstance();
						firstCalender.set(2000, Calendar.JANUARY, 1);
						Calendar secondCalender = Calendar.getInstance();
						secondCalender.set(1980, Calendar.JANUARY, 1);
						// Act
						FenetrePrincipale_0.compteDistantesDeFormation(2);

						// Assert
						// Le calcul seul n'est pas fait
						assertEquals(""wrong selection count"", 5, listFormation.getSelectedIndex());
				}

		/**
		* unit tests for {@link FenetrePrincipale_0#compteDistantesDeFormation(int)}{@code > 
		* @}
		*/
				@Test
				public void testCalculToutesSosFormationAjout() {
					// Arrange
					ListSelectionModel ls = listJour.getSelectionModel();
					int index = ls.getSelectedIndex();
					calculToutesForm(Calendar.getInstance().getTime(), nbFormation, 5 - index);
					assertEquals(calculNbFormations(nbFormation), 0);
				}

		/**
		* unit tests for {@link FenetrePrincipale_0#compteDistantesDeFormation(int)}{@code > 
		* 
		* @}
		*/
				@Test
				public void testCalculToutesSosFormationAjout2() {
					Calendar firstCalender = Calendar.getInstance();
					firstCalender.set(2015, Calendar.JANUARY, 1);
					Calendar secondCalender = Calendar.getInstance();
					secondCal"
06ab4adc-b6aa-4d08-b0dd-d3e34ae2aac9,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,39.78945326805115,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de naissance
     *
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains one unit test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {

    /**
     * Test of getSelectedFormation method, of class FenetrePrincipale.
     */
    @Test
    public void testGetSelectedFormation_01() {
        JFrame frame_1 = new FenetrePrincipale();
        JFrame frame_2 = new FenetrePrincipale_1Test();
        String testName;
        int testNumber;

        Identite applicant;
        RespFormation formation;

        candidat_c.prepare();
        Formation forma = candidat_c.getSelectedFormation();
        forma_c.prepare();

        Formation forma2 = candidat_c.getSelectedFormation();
        forma_c2.prepare();

        //Test cases
        testNumber = 0;
        testName = ""test1"";
        candidat_c.setIdentite(applicant);
        forma = candidat_c.getSelectedFormation();
        candidat_c.setFormation(forma);
        forma2 = candidat_c.getSelectedFormation();
        candidat_c2.setIdentite(applicant);

        //set
        candidat_c.reset();
        candidat_c2.reset();
        forma = candidat_c.getSelectedFormation();
        forma_c.setFormation(forma);
        forma2 = candidat_c.getSelectedFormation();
        candidat_c2.setFormation(forma_c);

        //get
        candidat_c.reset();
        candidat_c2.reset();
        forma = candidat_c.getSelectedFormation();
        forma_c.setFormation(forma);
        forma2 = candidat_c.getSelectedFormation();
        candidat_c2.setFormation(forma_c);

        //retour
        assertEquals(candidat_c_s, applicant);
        assertEquals(candidat_c2_s, applicant);
        assertEquals(forma2_s, applicant);

        candidat_c2.reset();
        forma2_s = forma;
        forma2.reset();
        forma.reset();

        frame_1.dispose();
        frame_2.dispose();
    }

            @Test
    public void testGetSelectedFormation_02() {
        JFrame frame_1 = new FenetrePrincipale();
        JFrame frame_2 = new FenetrePrincipale_1Test();

        Identite applicant;

        Candidat candidat = candidat_c;
        int testNumber;

        respFormation forma;

        candidat.prepare();

        Candidat candidat2;

        forma = candidat.getFormation();
        candidat2 = candidat_c2;

        candidat2.prepare();

        String testName = ""test1"";

        candidat_c.setIdentite(applicant);

        forma = candidat_c.getSelectedFormation();

        candidat_c.setIdentite(applicant);

        String testName2 = ""test1"";

        candidat_c2.reset();
        forma_c.reset();
        candidat_c2.setFormation(forma_c);

        candidat_c2.prepare();

        candidat_c2.setIdentite(applicant);
        forma_c2.reset();
        forma_c2.prepare();

        candidat_c2.setIdentite(applicant);

        candidat_c.setFormation(forma_c2);
        forma_c2.setFormation(forma_c);

        candidat_c2.setFormation(forma_c);

        frame_2.setVisible(true);
        candidat_c2.setIdentite(applic"
596f0d9e-015d-44e0-893d-e1b09613ff11,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java,51.57791495323181,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {
// TODO Auto-generated method stub
/**
*<pre>
*test case of test {@link ModifTableStockage#ajouterLigne()} method.
* </pre>
*/
	@Test
	public void ajouterLigne_Ok_true(){
		new ModifTableStockage().ajouterLigne();
	}
	//<pre>
	//test case of test {@link ModifTableStockage#ajouterLigne()} method.
	// </pre>
void ajouterLigne_false(){
		try {
		new ModifTableStockage().ajouterLigne();
		} catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
}"
33bae1af-a050-47cb-8df4-ea96234e5f05,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,23.01935601234436,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {

    /**
     * Constructor.
     */
	@Test
    public void modifTST() {
    	assertNotNull(ColonneMail());
    }
}

// ModifTableStockage.java
class ModifTableStockage {
    
    private String ts;
    
    /**
     * Constructor.
     */
	public ModifTableStockage(String ts) {
		this.ts = ts;
	}
	
	public String modifTST() {
		assertEquals(""The table should contains an empty table"", 0, ts.length());
		return ts;
	}
}

// ModifTableStockage_1Test.java
class ModifTableStockage_1Test {
	
	@Test
	public void modifTST() {
		
		TableStockage tableS = new ModifTableStockage(ts);
		assertNotNull(tableS);
		assertFalse(tableS.getLength() == 0);
	}

}
"
d9dde5f1-f055-4776-9d88-007b8a4fc864,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java,29.31931161880493,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {
// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j!= this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}

// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains one unit test case for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {
		/**
		* Tests the case when the value set does not exist in the table.
		*/
		@Test
		void noTable(){
			ModifTableStockage modifTableStockage = new ModifTableStockage();
			boolean result;

			result = modifTableStockage.selectMail().getValueAt(0, 0);
			assertFalse(result);
		}

}
"
a21cf047-913a-470c-9c44-bdd24185df92,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,47.02192974090576,stop,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains one unit test case for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {
private static final TypeLibeLibreType LIBRE_TYPE = TypeLibeLibreType.getInstance();
		private static final TypeLibeType LIBRE_TYPE_ID = TypeLibeType.getInstance();
	/**
	 * Test d'un constructeur pour la classe Controler qui contient l'état d'une
	 * {@link Formation} courant
	*/
//	@Test
    public void constructorContructeur() {
        Formation f = new Formation(""id_F"", ""F"");
        Formation f_a = new Formation(""id_A"", ""A"");
        Formation f_a_a = new Formation(""id_A_A"", ""A_A"");
        Formation f_a_b = new Formation(""id_A_B"", ""A_B"");
//        Formation f_c = new Formation(""id_C"", ""C"");
        
        Formation f_d = new Formation(""id_X"", ""X"");
        Formation f_d_a = new Formation(""id_A_X"", ""A_X"");
        Formation f_d_a_b = new Formation(""id_A_B_X"", ""B_X"");
        
        Formation f_e = new Formation(""id_E"", ""E"");
        Formation f_e_a = new Formation(""id_A_E"", ""A_E"");
        Formation f_e_b = new Formation(""id_B_E"", ""B_E"");
        
        Formation f_f = new Formation(""id_F"", ""F"");
        Formation f_f_a = new Formation(""id_A_F"", ""A_F"");
        Formation f_f_b = new Formation(""id_B_F"", ""B_F"");
        Formation f_f_c = new Formation(""id_C_F"", ""C_F"");
        Formation f_f_d = new Formation(""id_D_F"", ""D_F"");
        Formation f_f_d_a = new Formation(""id_A_D_F"", ""A_D_F"");
        Formation f_f_d_a_b = new Formion(""id_A_B_D_F"", ""A_B_D_F"");
}




}
"
