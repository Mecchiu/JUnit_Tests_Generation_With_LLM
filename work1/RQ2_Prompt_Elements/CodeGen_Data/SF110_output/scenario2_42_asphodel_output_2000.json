[
{
    "choices": [
        {
            "text": "/**\n  * @param inputStream the byte array of plain HTML string.\n  * @return the text content of the plain HTML String. \n  */\n    public String extractPlainText(InputStream inputStream) throws IOException, ContentParserException {\n        Source contentSource = new Source(inputStream);\n        return contentSource.extractText();\n    }\n\n    /**\n  * @param reader the Reader of the plain HTML String.\n  * @return the text content of the plain HTML String. \n  * @throws IOException if an error occurred while reading from the input stream \n  *       or if the {@link Source} object could not be loaded \n  */\n    public String extractPlainText(Reader reader) throws IOException, ContentParserException {\n        Source contentSource = new Source(reader);\n        return contentSource.extractText();\n    }\n\n\t/**\n  * @param url the url of the file.\n  * @return the text content of the plain HTML String. \n  * @throws IOException if an error occurred while reading from the input stream \n  *       or if the {@link Source} object could not be loaded \n  * @throws IllegalArgumentException if the url is null\n  */\n    public String extractPlainText(URL url) throws IOException, ContentParserException {\n        throw new IllegalArgumentException(url);\n    }\n\n    /**\n   * Test method for {@link HtmlContentParser#extractPlainText(InputStream)}\n   * Test method to extract an plain XML tag. This method does not need to handle errors \n   * This class test the contentParser method. It will check that it parses the given file. \n   * @throws IOException\n   */\n\t@Test\n\tpublic void testConstructorEmptyFile() throws IOException {\n\t\ttry {\n\t\t\tnew HtmlContentParser();\n\t\t\tfail(\"The HtmlContentParser should throw an IOException as \"\n\t\t\t \t+ \"the content must not be an empty string\");\n\t\t} catch (ContentParserParseException cpe) {\n            Log log = LogFactory.getLog(HtmlContentParserTest.class);\n            log.info(\"The content at the path is supposed to be an empty string\");\n        }\n\t}\n\n\t/**\n  * Test method for {@link HtmlContentParser#extractPlainText(InputStream)}\n  * Test method to extract no html tag.\n  */\n\t@Test\n\tpublic void testConstructorNonEmptyFile() throws IOException {\n\t\ttry {\n\t\t\tnew HtmlContentParser(\"HTML Content\");\n\t\t\tfail(\"The content at the path must be an valid HTML string!\");\n\t\t} catch (ContentParserParseException cpe) {\n            Log log = LogFactory.getLog(HtmlContentParserTest.class);\n            log.info(\"The content at the path is supposed to be an empty string\");\n            log.info(\"The content was not a valid HTML String!\");\n        }\n\t}\n\n\t/**\n  * Test method for {@link HtmlContentParser#extractPlainText(Reader)}\n  * Test method to extract no html tag.\n  */\n\t@Test\n\tpublic void testConstructorNonEmptyReader() throws IOException {\n\t\ttry {\n\t\t\tnew HtmlContentParser(\"HTML Content\");\n\t\t\tfail(\"The content at the path must be an valid HTML string!\");\n\t\t} catch (ContentParserParseException cpe) {\n            Log log = LogFactory.getLog(HtmlContentParserTest.class);\n            log.info(\"The content at the path is supposed to be an empty string\");\n            log.info(\"The content was not a valid HTML String!\");\n        }\n\t}\n\n\t/**\n   * Test method for {@link HtmlContentParser#extractPlainText(URL)}\n   * Test method to extract no html tag.\n   */\n\t@Test\n\tpublic void testConstructorNonEmptyUrl() throws IOException {\n\t\ttry {\n\t\t\tnew HtmlContentParser(\"HTML Content\");\n\t\t\tfail(\"The content at the path must be an valid HTML string!\");\n\t\t} catch (ContentParserParseException cpe) {\n            Log log = LogFactory.getLog(HtmlContentParserTest.class);\n            log.info(\"The content at the path is supposed to be an empty string\");\n            log.info(\"The content was not a valid HTML String!\");\n        }\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "public String extractPlainText(String textContent) throws ContentParserException {\n\t\t\treturn HtmlContentParser.extractPlainText(testURI(textContent));\n\t\t}\n    private static final Log LOG = LogFactory.getLog(HtmlContentParserTest.class);\n\t    private HtmlContentParser parser = new HtmlContentParser();\n\t    private Source source;\n\t    //private Url url;\n\t    private String textContent;\n\t    \n\t    public HtmlContentParserTest() {\n\t    \t\n\t    }\n\t    \n\t    /**\n\t    * test URI used for extracting text\n\t    * @param textContent text content for extract\n\t    */\n\t    public HtmlContentParserTest(String textContent) {\n\t    \t\n\t    }\n\t    \n\t    @Test\n\t    public void test() throws Exception {\n\t        assertNotNull(textContent);\n\t        try (InputStream in = testURI(textContent)) {\n\t            this.source = Source.readFrom(in);\n\t            String result = parser.parse(testURI(source));\n\t            StringBuilder sb = new StringBuilder();\n\t            if (source.hasAttributeNS(null,\"class\")) {\n\t            \tsb.append(source.getAttributeNS(null,\"class\"));\n\t            }\n\t            sb.append(result);\n\t            assertEquals(expectedResult(textContent, sb.toString()), result);\n\t        } catch (ContentParserException e) {\n\t            throw e;\n\t        }\n\t    }\n\n    private String testURI(String textContent) {\n\t        return String.format(\"https://localhost/pathto/%s\",textContent);\n    }\n\n\n    public String extractPlainText(URL url) throws ContentParserException {\n        return HtmlContentParser.extractPlainText(testURI(url));\n    }\n\n    public InputStream execute(URL url) {\n        return url.openStream();\n    }\n\n\t    public URL testURI(URL url) {\n\t        return url;\n\t    }\n\t\n\t    public static String expectedResult(String textContent, String expectedURI) {\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tif (expectedURI!= null) {\n\t\t\t\tSource source = new Source(expectedURI);\n\t\t\t\tresult.append(source);\n\t\t\t\tresult.append(\"<br/>\");\n\t\t\t}\n\t\t\tif (textContent!= null) {\n\t\t\t\tsource = new Source(textContent);\n\t\t\t\tsource.toElement();\n\t\t\t\tresult.append(source);\n\t\t\t\tresult.append(\"</br>\");\n\t\t\t}\n\t\t\tassertEquals(expectedURI, result.toString());\n\t\t\treturn result.toString();\n\t\t}\n\t    \n\t    String expectedText(String textContent) {\n\t\t\treturn \"<nobr=\" + textContent + \"></nobr>\";\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private Log log = LogFactory.getLog(this.getClass());\n\n\t@Test\n\tvoid testPlainText() throws Throwable{\n\t\t// set log level to debug\n\t\tlog.setLevel(Log.INFO);\n\n\t\t// start the test\n        System.setProperty(\"org.apache.commons.logging.log.class\", \"org.asphodel.demo.HtmlContentParser.class\");\n\t\t// a new instance of HtmlContentParser.extractPlainText\n\t\tHtmlContentParser parser = new HtmlContentParser();\n\t\tString text = ParserTestUtil.testParser(parser, \"test_content.txt\");\n\t\t// there is 1 extra line between the second line, the first line is the one that has not the content.\n\t\tassertEquals(\"\\n\\t\\r\\n\\r\\n\\r\", text);\n\t}\n\n\t@Test(expected=ContentParserException.class)\n\tvoid testWrongContent() throws Throwable{\n\t\t// set log level to debug\n\t\tlog.setLevel(Log.ERROR);\n\t\t// a new instance of HtmlContentParser.extractPlainText\n    \tHtmlContentParser parser = new HtmlContentParser();\n    \tString text = ParserTestUtil.testParser(parser, \"wrong_content.txt\");\n    }\n\n\t@Test\n\tvoid testSource() throws Throwable{\n\t\t// set log level to debug\n\t\tlog.setLevel(Log.DEBUG);\n\t\t// a new instance of HtmlContentParser\n\t\tHtmlContentParser parser = new HtmlContentParser();\n\t\tSource contentSource = new Source(\"<a href=\\\"http://aaa.bbb.zzz/\\\">aaa</a> <bbb>bbb </bbb> <ccc><ddd />\");\n\t\t// the content should not contain elements and no tags, if it does we get a parser exception\n\t\tString text = ParserTestUtil.testParser(parser, \"content_test.txt\");\n\t\t// we need to get all the elements to do test.\n\t\tassertEquals(\"aaa\", ParserTestUtil.trimToEmpty(text, \"aaa\"));\n\t\t// the real content contains\n\t\tassertEquals(\"bbb\\r\\n\\r\\n\\r\\n\" + \"<ddd />\\r\\n\\r\\n\"\n\t\t\t\t+ \"<a href=\\\"http://aaa.bbb.zzz/\\\">aaa</a>\\r\\n\\r\\n\"\n\t\t\t\t+ \"<bbb>bbb </bbb>\\r\\n\\r\\n\"\n\t\t\t\t+ \"<ccc>ddd </ccc>\\r\\n\\r\\n\", text);\n\t}\n\n\n\t// @Test\n    // default case.\n    // The test can be changed to use the file system as the content path.\n    // Default case for the parser\n\t// The test parses the content\n\t// The test parser parse the content\n\t// test can also be usefull to verify content is valid\n\t// In that case the log level set to ERROR\n\t// to test the test parser\n\t@Test\n    public void testParser(){\n\t\t// the test parser parse the content that does not contain the tag\n\t\tassertEquals(\"bbb\\r\\n\\r\\n\\r\\n\" + \"<ddd />\\r\\n\\r\\n\"\n\t\t\t\t+ \"<a href=\\\"http://aaa.bbb.zzz/\\\">aaa</a>\\r\\n\"\n\t\t\t\t+ \"<bbb>bbb </bbb>\\r\\n\\r\\n\"\n\t\t\t\t+ \"<ccc>ddd</ccc>\\r\\n\\r\\n\", ParserTestUtil.parseContent(ParserTestUtil.testParseContent(), \"bbb\"));\n\n\t}\n\n\t@Test\n    public void testValidHtml() throws IOException, Throwable {\n\t\t// set log level to debug\n        log.setLevel(Log.DEBUG);\n\n\t\t// create an instance of HtmlContentParser.\n        HtmlContentParser parser = new HtmlContentParser();\n        \n\t\t\n        // the test only parses HTML source with all needed tags.\n        String plainContent = ParserTestUtil.testPlainText();\n        Reader reader = new InputStreamReader(System.in);\n        // the parser will read the data\n        StringBuilder builder = new StringBuilder();\n        // set the source type\n        builder.append(\"[HTML]\\n\");\n\n        while ((reader = new InputStreamReader(new URL(\"file://\" + System.getProperty(\"java.io.tmpdir\") + \"/\"+System.getProperty(\"user.dir\")),\"UTF-8\"))!= null) {\n                int ch= reader.read();\n                // the file system is read to get the new line character.\n        \tif(ch==(int)'\\r'){\n        \t\tch=reader.read();\n        \t\tcontinue; // skip the new line character\n        \t}\n            builder.append((char)ch);\n        }\n        builder.append((System.getProperty(\"line.separator\")));\n        String content = builder.toString();\n        assertTrue(\"invalid content is parse\", ParserTestUtil.parseContent(plainContent, \"\"));\n        \n\n\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "HtmlContentParser tested = new HtmlContentParser();\n\t@Test\n        public void testPlainText_0() throws Exception {\n\t\tInputStream inputStream = getClass().getResourceAsStream(\"plainText.content\");\n\t\tassertNotNull(inputStream);\n        Source source = new Source(inputStream);\n        assertNotNull(source);\n        assertEquals(source.getTitle(), \"\");\n        assertEquals(source.getBody(), \"\");\n\t\t\n        String textContent = IOUtils.toString(inputStream);\n        assertNotNull(textContent);\n\t\tsource.extractText();\n\t\tString sourceContent = IOUtils.toString(inputStream);\n        assertNotNull(sourceContent);\n        assertTrue(sourceContent.indexOf(\"<h1\") > 0);\n        assertTrue(sourceContent.indexOf(\"<p>\") > 0);\n\t\t}\n\t\t\n\t@Test\n        public void testPlainText_1() throws Exception {\n\t\tInputStream inputStream = getClass().getResourceAsStream(\"plaintextTwo.content\");\n\t\tassertNotNull(inputStream);\n        Source source = new Source(inputStream);\n        assertNotNull(source);\n        assertEquals(source.getTitle(), \"\");\n        assertEquals(source.getBody(), \"\");\n\t\t\n        String textContent = IOUtils.toString(inputStream);\n        assertNotNull(textContent);\n        source.extractText();\n        String sourceContent = IOUtils.toString(inputStream);\n        assertNotNull(sourceContent);\n        assertTrue(sourceContent.indexOf(\"<p>\") > 0);\n        assertTrue(sourceContent.indexOf(\"<h1\") > 0);\n        assertTrue(sourceContent.indexOf(\"<h2>\") > 0);\n\t\t}\n\t\t\n\t@Test\n        public void testPlainText_2() throws Exception {\n\t\tInputStream inputStream = getClass().getResourceAsStream(\"plainTextThree.content\");\n\t\tassertNotNull(inputStream);\n        Source source = new Source(inputStream);\n        assertNotNull(source);\n        assertEquals(source.getTitle(), \"\");\n        assertEquals(source.getBody(), \"\");\n\t\t\n        String textContent = IOUtils.toString(inputStream);\n        assertNotNull(textContent);\n        source.extractText();\n        String sourceContent = IOUtils.toString(inputStream);\n        assertNotNull(sourceContent);\n        assertTrue(sourceContent.indexOf(\"<p>\") > 0);\n        assertTrue(sourceContent.indexOf(\"<h1>\") > 0);\n        assertTrue(sourceContent.indexOf(\"<h2>\") > 0);\n        assertTrue(sourceContent.indexOf(\"<h3>\") > 0);\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tstatic final Log log = LogFactory.getLog(HtmlContentParserTest.class);\n\t\n    static final String TEXT =\n    \"<h1>My first content!</h1>\"\n    + \"<p>My content!</p>\"\n    + \"<p>This is a very long line</p>\";\n\n    public HtmlContentParserTest() throws IOException {\n    }\n\t\n\t@Test\n\tpublic void testUnicodeUri () throws IOException {\n\t\tReader reader = new StringReader(TEXT);\n\n        try {\n            Source source = new Source(reader);\n            \n            assertEquals(source.extractText(), TEXT);\n        } finally {\n            reader.close();\n        }\n\t}\n\t\n\t@Test\n\tpublic void testString () throws IOException {\n        InputStream stream = new StringBuilder(\"<html>My first content!</html>\").append(\"<p>My content!</p>\").toInputStream();\n        InputStream source = null; \n\t\t\n    try {\n        Source contentSource = new Source(stream);\n        try {\n\t\t\tsource = contentSource.extractText();\n\t\t}finally {\n\t\t\tcontentSource.close();\n\t\t}\n\t\t\n\t}finally {\n\n\t\tif (source == null) {\n\t\ttry {\n\t\t\tSource source = contentSource.parseSource();\n\t\t\tsource.close();\n\t\t\tcontentSource.unlink();\n\t\t}finally {\n\t\t\tsource.close();\n\t\t}\n\t\t}\n\t}\n\t}\n\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "public HtmlContentParserTest() {\n\t\t}\n\n    /**\n     * test of \"Extract Plain Text\" method.\n     * This test case extends {@link HtmlCoreTest#extractPlainText(String)},\n     * and this class tests some functionality of it.\n     *\n     * @throws ContentParserException is thrown when the content is invalid.\n     * @throws IOException is thrown when the content content is empty.\n     * @throws javax.servlet.ServletException is thrown when a request by any one of this class failed.\n     * @since 1.1\n     */\n    @Test\n    public void testContent() throws ContentParserException, IOException, ServletException {\n        // create a mock input stream with a text content\n        MockInputStream stream = new MockInputStream(\"some content\");\n        // create a reader that reads from given input stream\n        Reader reader = stream.getReader();\n        // create a URLSource\n        URL url = new URL(\"file:something\");\n        InputStream input = url.openStream();\n        // parse the content to extract plain text\n        String extracted = extractPlainText(reader);\n        assertEquals(Reader2String.toString(reader), extracted);\n        assertFalse(input.read() == -1);\n    }\n\n    /**\n     * Test class for {@link HtmlContentParser#extractPlainText(String)},\n     * which will parse an html content when it is received through a url.\n     * <p/>\n     * This is in such a case an html source.\n     * <p/>\n     * This is the current implementation of HtmlSourceParser.\n     * This test class mainly test for parsing the full html content.\n     *\n     * @throws ContentParserException is thrown when the content is invalid.\n     * @throws IOException is thrown when the content content is empty.\n     * @throws javax.servlet.ServletException is thrown when a request by any one of this class failed.\n     * @since 1.1\n     */\n\n    @Test\n    public void testParseWithHtmlSource() throws ContentParserException, IOException, ServletException {\n        HtmlContentParser parser = new HtmlContentParser();\n        Source htmlSource = new Source(url(\"index.html\"));\n        String extracted = parser.extractPlainText(htmlSource.getText());\n        assertEquals(\"<!DOCTYPE html[>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head></head></html>\", extracted);\n\n        // here no content parsed with url\n        try {\n            url(\"other.html\");\n            fail(\"The url should be invalid.\");\n        } catch (IOException ioe) {\n            assertTrue(\"The url is invalid.\", ioe.getMessage().equals(\"url is invalid!\"));\n        }\n    }\n\n    /**\n     * URL test class for {@link HtmlContentParser#extractPlainText(String)},\n     * which will parse a html content when it is received via {@link URL#toString}.\n     * It uses an url, and therefore doesn't parse any content.\n     * @since 1.1\n     */\n    @Test\n    public void testParseWithURL() throws ContentParserException, IOException, ServletException {\n        URL url = new URL(\"https://www.google.fr\");\n        String extracted = extractPlainText(url.toString());\n        assertEquals(\"<!DOCTYPE html[>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head></head></html>\", extracted);\n        // here no content parsed with url\n        url(\"other.html\");\n    }\n\n    private static final Log logger = LogFactory.getLog( HtmlContentParserTest.class );\n\n    /**\n     * {@link HtmlContentParser#getParser(java.net.URL, String, java.net.URL)} is not implemented\n     * according to this test class.\n     * A static factory method should be used to create the correct parser instance!\n     * @param url the url from which the parser can be built.\n     * @param content the text, including elements and attributes,to be parsed\n     * @param urlSource the url source object to use\n     */\n    public static StringContentParser createDefaultParser(URL url, String content, URLSource urlSource) {\n        return new HtmlContentParser(url, content, urlSource);\n    }\n\n    /**\n     * {@link HtmlContentParser#getParser(java.net.URL, String]} is not implemented\n     * according to this test class.\n     * A static factory method should be used to create the correct parser instance!\n     * @param url the content of the url of this parser.\n     * @param urlSource the url source object to use\n     */\n    public static StreamContentParser createDefaultParser(URL url, URLSource urlSource) {\n        return new HtmlContentParser(url, \"/\", urlSource);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private Log log = LogFactory.getLog(this.getClass());\n    private char firstChar = (char) 0;\n    private char lastChar = (char) -1;\n\n    /**\n     * Test of extractPlainText(String) method, of class HtmlContentParser.\n     */\n    @Test\n    void testExtractPlainText() throws ContentParserException {\n        log.debug(\"testing extractPlainText method\");\n        \n        Source contentSource = new Source(\n                                \"<html><tbody><tr><td>\"\n//        \"<p><i><a href=\\\"http://www.example.org\\\">Example</a></i></p>\"\n//\n//        \n//        //<p>\n//        \"<font face=\\\"Serif\\\"><i>Example</i></font>\"\n//\n//        \n//        \"<!ELEMENT TABLE\\u0005>\\u001B\\u003D\\u0005\\n<!ELEMENT tbody EMPTY>\\n            |\\u00C2D\\u00C3\\n\\n            |\\u00C2\\u00C3\\n\\n            |\\u00C2\\u00C3\\n\\n    \"\n//       \n\n\n        );\n        String expectedTxt = \"tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody tbody \"\n                + \" tbody tbody tbody tbody tbody tbody tbody tbody tbody",
            "finish_reason": "length"
        },
        {
            "text": "{\n\t\t}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testExtractPlainText.\n* This method tests content extraction through the {@link HtmlContentParser#extractPlainText(String)} method.\n* @throws ContentParserException\n*/\n@Test\npublic void testContent() throws ContentParserException {\n\t   assertEquals(\"<html:head>\", extractPlainText(Source.getText(\"head\")));\n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testSource.\n* This method tests the {@link Source#extractText()} method.\n*/\n@Test\npublic void testSource() throws ContentParserException {\n\t   String[] texts = Source.getText().split(\"\\n\");\n\t   assertEquals(\"text1\\ntext2\\nextern\\n\", Source.getText(texts));       \n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testExtractionByName.\n* This method tests content extraction through the {@link HtmlContentParser#extractPlainText(String)} method.\n* @throws Exception\n*/\n@Test\npublic void testExtractionByName() throws Exception {\n\t   String contentString = \"head\\nspan\\nhtml\\ntext\\ntext\";\n//\t   String contentString = \"head\\nspan\\nhtml\\ntext\";\n\t   String result = extractPlainText(contentString);\n\t   assertEquals(\"Head\", result);\n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testFromResource.\n* This method tests the {@link InputStream#getContentAsStream()} method.\n*/\n@Test\npublic void testFromResource() throws IOException {\n\t   InputStream content = getClass().getClassLoader().getResourceAsStream(\"testextractcontent_test_logo.html\");\n\t   Source source = Source.fromStream(content);\n\t   String result = extractPlainText(source);\n\t   assertEquals(\"Head\", result);\n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testFromStream.\n* This method tests the {@link InputStream#getContentAsString()} method.\n*/\n@Test\npublic void testFromStream() throws IOException {\n\t   InputStream content = getClass().getClassLoader().getResourceAsStream(\"testextractcontent_test_logo.html\");\n\t   Source source = Source.fromStream(content);\n\t   String result = extractPlainText(source);\n\t   assertEquals(\"Head\", result);\n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testFromURL.\n* This method tests the {@link URL#openStream()} method.\n*/\n@Test\npublic void testFromURL() throws IOException {\n\t   InputStream content = getClass().getClassLoader().getResourceAsStream(\"testextractcontent_test_logo.html\");\n\t   Source source = Source.fromURL(content);\n\t   String result = extractPlainText(source);\n\t   assertEquals(\"Head\", result);\n}\n\n//-------------------------------------------------------------------------------------------------------------\n/**\n* testFromURL.\n* This method tests the {@link URL#openConnection()} method.\n*/\n@Test\npublic void testFromURLConnection() throws IOException {\n\t   Source source = Source.fromURL(getClass().getClassLoader().getResource(\"testextractcontent_test_logo.html\"));\n\t   String content = extractPlainText(source);\n\t   URL url = getClass().getClassLoader().getResource(\"testextractcontent_test_logo.html\");\n\t   assertEquals(\"Head\", content);\n}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Logger.\n     */\n    private static final Log LOG = LogFactory.getLog( HtmlContentParserTest.class );\n    /**\n     * HtmlContentParserTest 1.\n     * This test case parses the input stream and test the read output.\n     *\n     * @throws IOException exception\n     */\n    @Test\n    public void ParseInputFile1Test() throws IOException  {\n        URL resourceLocation = HtmlContentParserTest.class.getClassLoader().getResource(\"1.txt\");\n        InputStream is = HtmlContentParserTest.class.getClassLoader().getResourceAsStream(resourceLocation.getFile());\n        assertTrue(\"the test case is failed\", is!= null);\n        Source source = new Source(is);\n        source.extractText();\n        assertEquals(\"the test case is successful when the result is \",source.findTags(),source.findElements());\n    }\n     /**\n     * Test\n     */\n    @Test\n    public void ParseInputStream2Test() throws IOException  {\n        InputStream is = HtmlContentParserTest.class.getClassLoader().getResourceAsStream(\n                \"2.txt\");\n        Source source = new Source(is);\n        source.extractText();\n        assertEquals(\"the test case is successful when the result is \",source.findTags(),source.findElements());\n    }\n     /*\n        <td>The Test  </td>\n        <td><b>Test <u>1</u></b></td>\n        <td>the test case is successful when the result is </td>\n        <td><b>the test case is failed </b></td>\n     */\n                                                    \n    @Test\n    public void Test2_HtmlContentInputStream() throws IOException{\n      source = new Source(\"<td><b>Test <u>1</u></b></td>.<td>the test case <u>1 </u> is correct </td>\"); //the test 2 is successful\n      String plainText = source.extractPlainText();                                    \n      assertTrue(\"the test case is correct \",source.findTags().contains(\"td\")));\n      assertEquals(\" the correct element is \",1,source.findElements().length);      \n      Source temp = source;\n      source = new Source( plainText.getTrim().trim());     \n      assertFalse(\"the test case is failed \",temp.findElements().contains(source.findElements().get(0)));\n    }\n\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t\t/**\n\t\t * Test method for {@link HtmlContentParser#extractPlainText(String)}.\n\t\t *\n\t\t */\n    @Test\n    public void testExtractPlainText() throws ContentParserException {\n        try {\n            assertNotNull(extractPlainText(\"\"));\n            assertNotNull(extractPlainText(\" \"));\n            assertNotNull(extractPlainText(\"& \"));\n            assertNotNull(extractPlainText(\"&a &b \"));\n            assertNotNull(extractPlainText(\"&a &b & \"));\n        } catch (IOException ioExpection) {\n            log.error(\"Error in extractPlainText() \", ioExpection);\n\n            return;\n        }\n        fail(\"Exception is not thrown.\");\n    }\n\t\n}\n\n// Log test class of LogFactory.\nclass LogTester {\n\n\tprivate static Log log;\n\tstatic {\n\t\tlog = LogFactory.getLog(HtmlContentParserTest.class);\n\t}\n\t\n\t/**\n\t * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....\n\t */\n    public static void setLogTo(String textContent) {\n\t\tlog.setLevel(Level.OFF);\n\t\tlog.fatal(\"Set Log To OFF\");\n        \n    }\n\t\n}\n\n/**\n * Set the log to OFF.\n */\npublic static void assertOFF() {\n\tlog.setLevel(Level.INFO);\n}\n/**\n * Set the log to ERROR.\n */\npublic static void assertERROR() {\n\tlog.setLevel(Level.ERROR);\n}\n/**\n * Main Function.\n */\npublic static void testExtractPlainText() throws ContentParserException {\n\n\tStringReader inReader = new StringReader(\"\");\n    HtmlContentParser parser = new HtmlContentParser(inReader);\n\ttry {\n\t\tparser.extractPlainText(null);\n\t\tassertNull(inReader.toString());\n\t} catch (Exception ioExpection) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(null);\n\t\tparser.extractPlainText(null);\n\t\tassertNull(inReader.toString());\n\t} catch (Exception ioExcept) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(new URI(\"\"));\n\t\tparser.extractPlainText(null);\n\t\tassertNull(inReader.toString());\n\t} catch (Exception ioExpection) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(\" \");\n        parser.extractPlainText(\"\");\n\t\tassertNull(inReader.toString());\n\t} catch (Exception ioException) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(\" \");\n        parser.extractPlainText(\" \");\n        assertNull(inReader.toString());\n\t} catch (Exception ioException) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry  {\n\t\tparser = new HtmlContentParser(\" \");\n\t\tparser.extractPlainText(\" \");\n\t} catch (Exception ioException) {\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(\" \");\n\t\tparser.extractPlainText(\"a\");\n\t} catch (Exception ioExpection) {\n\t\tlog.error(\"Error in extractPlainText() \", ioException);\n\t\tassertFalse(true);\n\t}\n\t\n\ttry {\n\t\tparser = new HtmlContentParser(\" \");\n\t\tparser.extractPlainText(\"a\");\n\t} catch (Exception ioException) {\n\t\tlog.error(\"Error in extractPlainText() \", ioException);\n\t\tassertFalse(true);\n\t}\n\t//test setLogTo\n\tsetLogTo(\"\");\n\t\n}\n\t\n}",
            "finish_reason": "stop"
        }
    ],
    "id": "652caf1a-14a6-4dd8-b07e-7733bcfbd0e7",
    "prompt_id": "/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser.java",
    "original_code": "// HtmlContentParser.java\npackage org.asphodel.parser;\n\nimport au.id.jericho.lib.html.Source;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.net.URL;\n\n/**\n * @author : sunwj\n * @since 0.1\n *        Date: Mar 31, 2007\n *        Time: 10:03:07 PM\n *        <p/>\n *        html content parser using Jericho\n * todo does it need to devided into 2 different implementation?\n */\npublic class HtmlContentParser implements StringContentParser, StreamContentParser {\n\n    /**\n     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....\n     * @return plain text without extra tags or elements\n     */\n    public String extractPlainText(String textContent) throws ContentParserException {\n        Source contentSource = new Source(textContent);\n        return contentSource.extractText();\n    }\n}\n",
    "test_prompt": "// HtmlContentParserTest.java\npackage org.asphodel.parser;\n\nimport au.id.jericho.lib.html.Source;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlContentParser}.\n* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.\n*/\nclass HtmlContentParserTest {",
    "time_taken": 60.505910873413086,
    "usage": {
        "prompt_tokens": 461
    }
}
]