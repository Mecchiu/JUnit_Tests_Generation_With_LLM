ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
eb735298-aaaa-40ef-9c2c-f8d40542f61d,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java,60.43312454223633,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    public boolean accept(File file) {
        String fileName = file.getName();
        boolean firstPass = false;
        //  First test:  file must end with one of the registered file extensions.
        for (int i = 0; i < fileExtensions.length; i++) {
            if (fileName.endsWith(fileExtensions[i])) {
                firstPass = true;
            }
        }
        if (firstPass) {
            //  Second test:  file header must contain the biopax declaration
            try {
                String header = getHeader(file);
                if (header.indexOf(""www.sbml.org"") > 0) {
                    return true;
                }
            } catch (IOException e) {
            }
        }
        return false;
    }
}
","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {

    /**
     * Test class of {@link SBMLFilter}.
     */
    public SBMLFilter_0Test() {
    }
    
    @Test
    public void test1() {
        String fileName = ""sbml.v2.12"";
        boolean firstPass = false;
        //  First test:  file must end with one of the registered file extensions.
        for (int i = 0; i < fileExtensions.length; i++) {
            if (fileName.endsWith(fileExtensions[i])) {
                if (firstPass) {
                    firstPass = false;
                } else {
                    firstPass = true;
                }
            }
        }
        File file = new File(""C:\\Documents and Settings\\joe\\Desktop\\sbml.xml"");
        ImportHandler importHandler = CytoscapeSystem.getImportHandler();
        importHandler.setCurrentFile(file.getName());
        GraphReader graphReader = new GraphReader(""C:\\Documents and Settings\\joe\\Document Folders\\cytoscape\\src\\io\\sbml"");
        SBMLReaderModel sbmlReaderModel = new SBMLReaderModel();
        sbmlReaderModel.setImportHandler(importHandler);
        assertEquals(sbmlReaderModel.loadExternal(file), true);
        assertEquals(sbmlReaderModel.loadExternal(file), false);
    }
    
    public String getHeader(File file) {
        String header = """";
        String line;
        try {
            header = ImportHandler.getHeader(new FileInputStream(file));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return header;
    }
    
}"
0cb40980-8694-4093-bc5b-35236ed20e4e,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java,35.41863965988159,stop,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    public GraphReader getReader(String fileName) {
        System.out.println(""Getting SBML reader ..."");
        try {
            // Test if libsbml library is available
            System.loadLibrary(""sbmlj"");
            /* Extra check to be sure we have access to libSBML: */
            Class.forName(""org.sbml.libsbml.libsbml"");
            // Use the libSBML based parser
            System.out.println(""... using 'libsbml parser'"");
            return new SBMLGraphReader2(fileName);
        } catch (Exception e) {
            // If any error occurs use the classic SBML Reader
            return new SBMLGraphReader(fileName);
        }
    }
}
","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {
// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    public GraphReader getReader(String fileName) {
        System.out.println(""Getting SBML reader..."");
        try {
            // Test if libsbml library is available
            System.loadLibrary(""sbmlj"");
            /* Extra check to be sure we have access to libSBML: */
            Class.forName(""org.sbml.libsbml.libsbml"");
            // Use the libSBML based parser
            System.out.println(""... using 'libsbml parser'"");
            return new SBMLGraphReader2(fileName);
        } catch (Exception e) {
            // If any error occurs use the classic SBML Reader
            return new SBMLGraphReader(fileName);
        }
    }
}

// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains one unit test case for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {
		private final SBMLGraphReader2 reader;
		/**
		 * Creates a {@link SBMLFilter_1Test} object.
		 * 
		 * @see testConstructor
		 * @param fileName	Input graph file to be examined.
		 * @throws IOException
		 */
		public SBMLFilter_1Test(String fileName) throws IOException {
			File f = new File(fileName);
			assertTrue(f.isFile(), ""Input file not found: "" + fileName);
			GraphReader graphReader = getReader(fileName);
			assertNotNull(graphReader, ""No SBML reader configured"");

            // create file handler
			ImportHandler importHandler = new ImportHandler((f.getParentFile()!= null)?
					f.getParentFile().getAbsolutePath() : """");
			importHandler.loadData(f.getAbsolutePath());
			System.out.println(f.getAbsolutePath());
			graphReader = new SBMLGraphReader( f.getAbsolutePath() );
			
			// create a new file parser
			ImportHandler2.setDefaultFileHandlerFactory( new org.cytoscape.io.importer.CyImportHandlerFactoryImpl( importHandler ) );
			GraphReader baseReader = new SBMLGraphReader( f.getAbsolutePath() );
            
			// add SBML library
			importHandler.addSBMLLibrary( baseReader );
			reader = new SBMLGraphReader2( baseReader );
		}
		
		/**
		 * Sets the number of iterations before the program
        * stops (i.e. calls {@link #finish()}).
        */
		@Test
        public void testFinish() {
            Thread th = new Thread(new Runnable() {
                public void run() {
                    try {
                        Thread.sleep( 2000 );
                    } catch (InterruptedException e) {}
                    finish();
                }
            });
            th.start();
            
        }

}

"
1058aaa9-316b-46ee-b73f-0382c528f9e5,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java,30.73384666442871,stop,"// SBMLVisualStyleFactory.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;

/**
 * VisualStyleFactory.java
 * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLVisualStyleFactory {

    public static VisualStyle createVisualStyle(CyNetwork network) {
        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();
        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();
        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();
        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();
        // ------------------------------ Set node shapes ---------------------------//
        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);
        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);
        disMapping.putMapValue(""species"", NodeShape.DIAMOND);
        disMapping.putMapValue(""reaction"", NodeShape.ELLIPSE);
        Calculator shapeCalculator = new BasicCalculator(""SBMLReader Shape Calculator"", disMapping, VisualPropertyType.NODE_SHAPE);
        nodeAppCalc.setCalculator(shapeCalculator);
        // ------------------------------ Set the label ------------------------------//
        // Display the value for geneName as a label
        String cName = ""sbml name"";
        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);
        if (nlc == null) {
            PassThroughMapping m = new PassThroughMapping(new String(), cName);
            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);
        }
        nodeAppCalc.setCalculator(nlc);
        //--------------------- Set the size of the nodes --------------------------//
        //Discrete mapping on nodeType
        Double speciesNodeSize = new Double(30);
        Double reactionNodeSize = new Double(30);
        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);
        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);
        sizeMapping.putMapValue(""species"", speciesNodeSize);
        sizeMapping.putMapValue(""reaction"", reactionNodeSize);
        Calculator sizeCalculator = new BasicCalculator(""SBMLReader Size Calculator"", sizeMapping, VisualPropertyType.NODE_SIZE);
        nodeAppCalc.setCalculator(sizeCalculator);
        nodeAppCalc.setNodeSizeLocked(true);
        // ------------------------------ Set edge arrow shape ---------------------------//
        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);
        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);
        arrowMapping.putMapValue(""reaction-product"", ArrowShape.ARROW);
        arrowMapping.putMapValue(""reaction-reactant"", ArrowShape.NONE);
        arrowMapping.putMapValue(""reaction-modifier"", ArrowShape.CIRCLE);
        Calculator edgeArrowCalculator = new BasicCalculator(""SBMLReader Edge Arrow Calculator"", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);
        edgeAppCalc.setCalculator(edgeArrowCalculator);
        // ------------------------------ Set edge colour ---------------------------//
        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);
        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);
        edgeColorMapping.putMapValue(""reaction-product"", Color.GREEN);
        edgeColorMapping.putMapValue(""reaction-reactant"", Color.RED);
        edgeColorMapping.putMapValue(""reaction-modifier"", Color.BLACK);
        Calculator edgeColorCalculator = new BasicCalculator(""SBMLReader Edge Color Calculator"", edgeColorMapping, VisualPropertyType.EDGE_COLOR);
        edgeAppCalc.setCalculator(edgeColorCalculator);
        //------------------------- Create a visual style -------------------------------//
        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();
        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);
        return visualStyle;
    }
}
","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains one unit test case for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains one unit test case for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {
 
    @Test
    public void createVisualStyle() throws Exception {
		   
		   String label = ""SBMLReader"";
        double x = 100;
        double y = 200;
        double w = 200;
        double h = 200;
        VisualStyle v = SBMLVisualStyleFactory.createVisualStyle(
		        getSimpleNetwork(),
		        x, y, w, h);
        assertNotNull(v);
        assertEquals(x, v.getX(), 0.1);
        assertEquals(y, v.getY(), 0.1);
        assertEquals(w, v.getWidth(), 0.1);
        assertEquals(h, v.getHeight(), 0.1);
        assertNull(v.getLabel());
        assertFalse(v.contains(null));
        assertFalse(v.contains(null, null));
        v = SBMLVisualStyleFactory.createVisualStyle(
                getSimpleNetwork(),
                label,
                x, y, w, h);
        assertNotNull(v);
        assertEquals(x, v.getX(), 0.1);
        assertEquals(y, v.getY(), 0.1);
        assertEquals(w, v.getWidth(), 0.1);
        assertEquals(h, v.getHeight(), 0.1);
        assertTrue(v.contains(label));
        assertTrue(v.contains(label, null));
        assertFalse(v.contains());
        assertFalse(v.contains(null, label));        
    }	

}
"
