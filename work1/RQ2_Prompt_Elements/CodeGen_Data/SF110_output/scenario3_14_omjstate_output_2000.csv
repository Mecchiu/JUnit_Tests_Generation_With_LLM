ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
b286d1b4-103a-4cd7-b3db-2e3ab1863293,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,59.34409022331238,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {

    @Test
    public final void triggerTest() {
        
        final IState state1 = new StateImpl(""State1"", IState.INIT);
        final Event event1 = Event.START_STATE_EXPECTED;
        
        assertTrue(state1.trigger(state1, event1));
        final IState state2 = state1;
        final Event event2 = Event.START_STATE_EXPECTED;
        
        final boolean result = state2.trigger(state2, event2);
        
        assertTrue(result);
        final IState state3 = state2;
        
        assertTrue(event1==event2);
    }
}
// Transition_1.java
"
e781729d-dc7d-4348-8f97-51392b52fee8,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,56.90014839172363,stop,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains one unit test case for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {
/**
		 * Test method for {@link Transition#TRANSITION_NAME}.
		 */
		@Test
            public void testTRANSITION_NAME() {
                    for (Transition t : new Transition[] {new Transition(), new Transition(), null, new Transition()}) {
                        assertEquals(TRANSITION_NAME, t.name);
                    }
            }

    /**
     * Tests {@link Transition#willTrigger(IState, Event)} method.
     */
    @Test
    public final void testWillTrigger() {
        for (Transition t : new Transition[] {new Transition(), new Transition(), null, new Transition()}) {
            assertFalse(t.willTrigger(null, null));
            assertTrue(t.willTrigger(null, null));
        }

    }
    /**
     * Tests that the equality comparison.
     */
    @Test
    public final void testEquals() {
        final Transition t1 = new Transition();
        final Transition t2 = new Transition();
        final Transition t3 = new Transition();
        t1.setName(TRANSITION_NAME);
        t2.setName(TRANSITION_NAME);
        t3.setName(TRANSITION_NAME);
        assertEquals(t1, t2);
        assertTrue(new EqualsBuilder()
               .append(t1, t2)
               .isEquals());
        assertFalse(new EqualsBuilder()
               .append(t1, t3)
               .isEquals());
        t1.setName(""t"");
        assertFalse(new EqualsBuilder()
               .append(t1, t2)
               .isEquals());
        assertFalse(new EqualsBuilder()
               .append(t1, t1)
               .isEquals());
        assertFalse(new EqualsBuilder()
               .append(t1, t3)
               .isEquals());

    }
    /**
     * Tests that the hashcode is calculated based
     * on {@link Transition#name()}.
     */
    @Test
    public final void testHashCode() {
        final Transition t = new Transition();
        t.setName(TRANSITION_NAME);
        assertEquals(new HashCodeBuilder().append(t.name)
               .toHashCode(),
                new HashCodeBuilder().append(t.name)
               .toHashCode());
        assertTrue(new HashCodeBuilder().append(t.name)
               .toHashCode()!= new HashCodeBuilder().append(t.name)
               .toHashCode());
        assertFalse(new EqualsBuilder()
               .append(t.name)
               .isEquals());
    }
    /**
     * Tests that the toString contains the toString of
     * object of {@link Transition})
     */
    @Test
    public final void testToString() {
        final Transition t = new Transition();
        t.setName(TRANSITION_NAME);
        assertTrue(new ToStringBuilder(t)
               .append(t.name)
               .toString().contains(""TRANSITION_NAME""));
    }
}"
c428aec0-f2aa-4e82-9b5e-59a21e41cf7b,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,36.781129598617554,stop,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains one unit test case for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	@Test
	public void test1() {
		String s = ""Hello World"";
		assertFalse(""' "" + s + ""' should not match the string'Hello World'"",
				        StringMatchesGuardCondition.evaluate(s));
	}
	
}

"
3e162bdc-ed7c-4406-943f-0e3d20986ec4,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,37.061158657073975,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {
/**
		* Some basic unit test code for the method {@link EndState#isStateAlone()}.
		*/
    @Test
    public void testIsStateAlone() {
        assertTrue(EndState.getSingleton() instanceof EndState);
    }

    /**
     * Test case of {@link EndState#isStateAlone()}.
     * This test verifies if getSingleton() returns the final instance
     * of the {@link EndState}.
     */
    @Test
    public void testIsStateAloneFailed() {
		assertFalse(EndState.getSingleton() instanceof EndState);
        assertTrue(false);
    }

    /**
     * Test case of {@link EndState#isStateAlone()}.
     * This test verifies if getSingleton() returns a newly created instance:
     *      assertTrue(getSingleton() == endState);
     */
    @Test
    public void testIsStateAloneNew() {
		assertNotSame(EndState.getSingleton(), EndState.getSingleton());
    }

    /**
     * Test case of {@link EndState#toString()}.
     * This test verifies if we have the method {@link EndState#toString()}
     * that we should be able to call it with the final {@link EndState} objects.
     */
    @Test
    public void testToString() {
		assertNotNull(EndState.getSingleton());
        assertEquals(""<eu.objectmentors.state.EndState>"", EndState.getSingleton().toString());
    }

    /**
     * Test case of {@link EndState#isEnumClass()}.
     * This test verifies if the class {} has a property called ""Enum""
     * for a method {@link EndState#getSingleton()} that returns a new end state.
     */
    @Test
    public void testIsEnumClass() {
		assertNotNull(EndState.getSingleton().getEnum());
        assertEquals(""E"", new EndState().getEnum().getValue());
    }
}
"
83b26e4d-67b5-475e-826d-ba92cb67c535,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,29.074965476989746,stop,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains one unit test case for the {@link EndState#toObject()} method.
*/
class EndState_1Test {
private StateMachineStateMachine stateMachine;
  public EndState_1Test() {
    stateMachine = new StateMachineStateMachine(StateMachineType.END);
  }
  @Test
  public void toObject() {
  	return stateMachine.toObject();
  }
  @Test
  public void equalsId() {
  	EqualsBuilder builder = new EqualsBuilder();
    final String E1 = ""E1"";
    final String E2 = ""E2"";
    final EndState A1 = new EndState_1Test();
    A1.stateMachine = new StateMachineStateMachine(StateMachineType.END);
    A1.stateMachine.setStateType(StateMachineSwing.END.name());
    final EndState A2 = new EndState_1Test();
    A2.stateMachine = new StateMachineStateMachine(StateMachineType.END);
    A2.stateMachine.setStateType(StateMachineSwing.END.name());
  	assertTrue(builder.isEquals(A1));
  	assertFalse(builder.isEquals(A2));
    assertEquals(A1.hashCode(), A2.hashCode());
  	StateMachineStateMachine C1 = new StateMachineStateMachine(StateMachineType.ERROR_ONMEMORY);
  	C1.setType(StateMachineType.END.name());
  	C1.setMemoryAmount(20);
  	A1 = new EndState_1Test();
  	A1.stateMachine.setStateType(StateMachineSwing.END.name());
  	assertTrue(builder.isEquals(A1));
  	assertFalse(builder.isEquals(C1));
  	A2 = new EndState_1Test();
  	A2.stateMachine.setStateType(StateMachineSwing.END.name());
  	assertFalse(builder.isEquals(A2));
  	assertTrue(builder.isEquals(C1));
  	assertFalse(builder.isEquals(new EndState_1Test()));
  	assertFalse(""not equals"",builder.isEquals(new EndState_1Test()));
  }
  @Test
  public void hashCode() {
  	final EndState A1 = new EndState_1Test();
  	final int H1 = A1.hashCode();
  	final EndState A2 = new EndState_1Test();
  	final int H2 = A2.hashCode();
  	System.out.println(""hash1 :"" + H1);
  	System.out.println(""hash2:"" + H2);
  	assertTrue(new EndState_1Test().hashCode() == H1);
  	assertTrue(new EndState_1Test().hashCode() == H2);
  	System.out.println(""hash1:"" + new EndState_1Test().hashCode());
  	System.out.println(""hash2:"" + new EndState_1Test().hashCode());
  	A2.stateMachine.setMemorySize(20);
  	final int H3 = -A1.hashCode();
  	final int H4 = A2.hashCode();
  	assertEquals(H3,H4);
  }
  /**
 * Set a new memory amount.
 * @param memoryAmount the new MemoryAmount
 */
  public void setMemoryAmount(final int memoryAmount) {
    stateMachine.setMemoryAmount(memoryAmount);
  }
  public int getMemoryAmount() {
  	return stateMachine.getMemoryAmount();
  }
  /**
 * Change a state-machine's action.
 * @param stateMachine the new state-machine
 * @param action the new action
 */
public void setStateType(final StateMachineStateMachine stateMachine, final StateMachineStateAction action){
	stateMachine.setStateType(action);
}
}
"
810b80b7-8dc6-4f45-8423-a68487085ab0,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,58.017991065979004,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {
/**
		 * Simple unit test for getSingleton.
		 * Creation date: (2/20/01 11:05:10 AM)
		 *
		 * @throws Exception exception
		 */
		@Test
		void simpleTests() throws Exception {
			StartState s1 = StartState_0Test.getSingleton();
			assertEquals(u""The constructor doesn't return the same object"", s1, new StartState(null));
			assertIdentical(s1, u""The constructor does not return distinct objects"");
		}

}
"
c29b98f8-a18e-40bb-8361-e3e7738cd3d5,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,29.953510284423828,stop,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains one unit test case for the {@link StartState#toObject()} method.
*/
class StartState_1Test {

	@Test
	void toObject() throws InstanceStoreException_1Test {
		
		//noinspection ResourceType
		assertEquals(0l, new StartState().toObject());
		
	}
	
	@Test
	void get_1Test() throws InstanceStoreException_1Test {
		
		//noinspection ResourceType
		assertEquals(0l, new StartState().get());
		
	}
	
	@Test
	void set_1Test() throws InstanceStoreException_1Test {
		
		//noinspection ResourceType
		assertEquals(0l, new StartState().set(10l));
		
	}
	
	@Test
	void isState_1Test() throws InstanceStoreException_1Test {
		
		//noinspection ResourceType
		assertTrue(new StartState().isState());
		
	}
	
	@Test
	void test1() throws InstanceStoreException_1Test {
	
		//noinspection ResourceType
		assertTrue(new StartState().test1());
		
	}
	
	@Test
	void test2() throws InstanceStoreException_1Test {
	
		//noinspection ResourceType
		assertTrue(new StartState().test2());
		
	}
}"
