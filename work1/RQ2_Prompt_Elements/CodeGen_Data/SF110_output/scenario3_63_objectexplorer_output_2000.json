[
{
    "choices": [
        {
            "text": "\n\t/**\n\t * Test of make().\n\t * <br><strong>Attributes:</strong> {@code logger}\n\t */\n\t@Test\n\tvoid testMake() {\n\t\tLogger logger = LoggerFactory.make();\n\t\tassertNotNull(logger);\n\t}\n\t\n\t/**\n\t * Test of make().\n\t * <br><strong>Attributes:</strong> {@code logger}\n\t */\n\t@Test\n\tvoid testMake2() {\n\t\tLogger logger = LoggerFactory.make();\n\t\tassertNotNull(logger);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final Logger getLogger() {\n\t\t\t\treturn LoggerFactory.make();\n\t\t}\n\t\t\n\t\tprivate String loggerClassName(){\n\t\t\treturn LoggerFactory.class.getName();\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testLogger() {\n\t\t\tLogger logger = getLogger();\n\t\t\tassertNotNull(logger);\n\t\t\tassertTrue(logger instanceof Logger);\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testLoggerWithClass() {\n\t\t\tassertNotNull(getLogger().getClass().getAnnotation(\"org.apache.log4j\"));\n\t\t\tassertTrue(logger.getClass().getAnnotation(\"org.apache.log4j\") instanceof Log4JLogger);\n\t\t\tLog4JLogger logger2 = (Log4JLogger) logger.getClass().getAnnotation(\"org.apache.log4j\");\n\t\t\tassertNotNull(logger2);\n\t\t\tassertEquals(logger.getName(), logger2.name);\n\t\t\tassertEquals(logger.getLevel(), logger2.level);\n\t\t\tassertEquals(logger.getSystemOut(), logger2.sysout);\n\t\t\tassertEquals(logger.getSystemErr(), logger2.syserr);\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testSystemOut() {\n\t\t\tLogger loggerSystemOut = getLogger();\n\t\t\tassertNotNull(loggerSystemOut);\n\t\t\tassertTrue(loggerSystemOut instanceof SystemOutLogger);\n\t\t\tSystemOutLogger logger2 = (SystemOutLogger) loggerSystemOut;\n\t\t\tassertNotNull(logger2);\n\t\t\tassertEquals(\"java.lang.System\", logger2.getName());\n\t\t\tassertEquals(\"Drylog output\", logger2.getText());\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testSystemErr() {\n\t\t\tLogger loggerSystemErr = getLogger();\n\t\t\tassertNotNull(loggerSystemErr);\n\t\t\tassertTrue(loggerSystemErr instanceof SystemErrLogger);\n\t\t\tSystemErrLogger logger2 = (SystemErrLogger) loggerSystemErr;\n\t\t\tassertNotNull(logger2);\n\t\t\tassertEquals(\"java.lang.System\", logger2.getName());\n\t\t\tassertEquals(\"Drylog error\", logger2.getText());\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testDryLog() {\n\t\t\tLogger logger = getLogger();\n\t\t\tassertNotNull(logger);\n\t\t\tassertTrue(logger instanceof org.apache.log4j.Logger);\n\t\t\torg.apache.log4j.Logger log = (org.apache.log4j.Logger) logger;\n\t\t\tassertNotNull(log);\n\t\t\tfinal String logStr = log.getFormatter().toPattern();\n\t\t\tfinal String expectedPattern = \"Drylog\";\n\t\t\tassertEquals(expectedPattern,logStr);\n\t\t}\n\t}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test \n\tvoid makeString() {\n\t\tLogger log4j = LoggerFactory.make();\n\t\tassertNotNull(log4j);\n\t\tassertNotNull(log4j.getLogger(\"main\"));\n        Logger other = LoggerFactory.make();\n\t\tassertNotNull(other);\n\t\tassertNotNull(other.getLogger(\"main\"));\n\t}\n\t\n\t@Test \n\tvoid makeStringObject() {\n\t\tLogger log4j = LoggerFactory.make();\n\t\tassertNotNull(log4j);\n\t\tassertNotNull(log4j.getLogger(\"main\"));\n        Logger other = LoggerFactory.make(\"something\");\n\t\tassertNotNull(other);\n\t\tassertNotNull(other.getLogger(\"main\"));\n\t}\n\t\n\t@Test \n\tvoid makeLogicNotFoundException() {\n\t\tLogger log4j = LoggerFactory.make(\"myLoggerThatDoesNotExist\");\n        Logger other = LoggerFactory.make();\n\t\tassertNotNull(other);\n\t\tassertNotNull(other.getLogger(\"myLoggerThatDoesNotExist\"));\n\t}\n\t\n\t@Test \n\tvoid makeLoggerNotFound() {\n\t\tLogger log4j = LoggerFactory.make(\"main\");\n\t\tassertNotNull(log4j);\n\t\tassertNotNull(log4j.getLogger(\"main\"));\n        Logger unknown = LoggerFactory.make(\"anotherLogger\");\n\t\tassertNull(unknown);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final Logger logger = LoggerFactory.get();\n\n\t// @Test\n\tpublic void testMakeLogger() {\n\t\t\tassertNotNull(\"Logger was not created properly\", logger);\n\t\t\tLogger logger1 = LoggerFactory.get();\n\t\t\tassertTrue(\"Wrong created logger object!\", logger.getName().equals(logger1.getName()));\n\t}\n\n\t// @Test\n\tpublic void testIsSameName() {\n\t\t\tassertTrue(\"Wrong name for created logger object!\", logger.getName().startsWith(\"logger\"));\n\t}\n\n\t/**\n\t * Test method for {@link LoggerFactory#get()}\n\t *\n\t */\n\t@Test\n\tpublic void testReturnedNullLogger() {\n\t\t\tassertNotNull(\"Logger was not created properly\", logger);\n\t\t\tassertTrue(\"Wrong created logger object!\", logger.getName().equals(LoggerFactory.get().getName()));\n\t}\n\n\t/**\n\t * Test method for {@link LoggerFactory#make()}\n\t */\n\t@Test\n\tpublic void testMakeLoggerNullLogger() {\n\t\t\tassertNotNull(\"null logger is not a logger.\", LoggerFactory.get());\n\t\t\tLogger logger1 = LoggerFactory.get();\n\t\t\tassertTrue(\"Wrong created logger object!\", logger2.getName().equals(logger1.getName()));\n\t}\n\n\n\t/**\n\t * Unsucessful test method for {@link LoggerFactory#make()}\n\t */\n\t@Test(expected = UnsupportedOperationException.class)\n\tpublic void testMakeLoggerWrongTypeLoggerNullLogger() {\n\t\tLoggerFactory.get();\n\t\t// @TODO uncomment...\n\t\t\n\t\tLogger logger = LoggerFactory.get();\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tfinal Logger LOG;\n\t\t\n\t// ------------------------------------------------------------------------\n\t/**\n\t * Einen Konstruktor eine unterdem LogerFactory, also die Klasse dient der Klasse auch\n\t * kleinst die Anwendung.\n\t *\n\t * @param logFactory The LoggerFactory\n\t */\n\tLoggerFactoryTest(final LoggerFactory logFactory) {\n\t\tLOG=new Logger(logFactory);\n\t}\n\t/**\n\t * Dient einen konstruktor mit dem logger Factory and der gespeicherten Logger.\n\t * <b>Stattdem:</b> <br>\n\t * LoggerFactory.make() geeignet eine ausgehende Logger, so da die \"reallog\" auszulebt.\n\t * <b>Nachricht:</b> LoggerFactory.make().getLogger(Logger name);\n\t * </b>\n\t * @param name The name of a logger, which should exist already, but might be not\n\t *\n\t */\n\tLoggerFactoryTest(final String name) {\n\t\tLOG=new Logger(name);\n\t}\n\t/**\n\t * Das f\ufffdr deilt eine Logger.\n\t *\n\t * @return Logger\n\t */\n\tpublic Logger logger() {\n\t\treturn LOG;\n\t}\n\t\n\t/**\n\t * Verwende ein neuer Logger am nicht gespeicherte Logger\n\t * @param name The name of a logger, which should exist already, but might be not\n\t */\n\tLogger logger(final String name) {\n\t\treturn new Logger(name);\n\t}\n\t/**\n\t * Verwende eine log4j.Logger, wenn es nicht gespeichert hat. \n\t * <b>Stattdiffs:</b> Vereinfach: noeue log4j.Logger noeue -->\n\t * <br>\n\t * LoggerFactory.make() -->\n\t * <b>Verwendenden:</b> null\n\t */\n\t@Test\n\tpublic void testCreation() {\n\t\t// check if logger with the given name exists already\n\t\tassertNotNull(logger(Logger.*.*.class));\n\t}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Die Klasse for test method {@link LoggerFactory#make()}.\n\t */\n    @SuppressWarnings(\"javadoc\")\n    TestLoggerImpl tl_;\n\n\t/**\n\t * Erzieugt einen Logger in der aufrufenden Klasse.\n\t *\n\t * @return Logger\n\t */\n\tpublic static Logger make() {\n\t\t\n        LoggerFactory tf = new LoggerFactory();\n        return tf.make();\n\t}\n\n\t/**\n\t * Prueft in eine neue Klasse.\n\t */\n\t@Test\n\tpublic void testCreateTestLogger(){\n\n\t\tLoggerFactory tf = new LoggerFactory();\n\n\t\tString testName  = \"some\";\n\t\tString testMsg  = \"foobar\";\n\n\t\tLogger logger = tf.make();\n\t\t\n        Logger testLogger = new TestLoggerImpl(testName, testMsg);\n\n\t\tassertNotNull(testLogger);\n\n        testLogger.checkDebug();\n        testLogger.checkError();\n\t\ttestLogger.close();\n\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final Logger logger = LoggerFactory.make();\n\n    /*\n     * @Test\n     */\n    @Test\n    void makeLogger() {\n        assertNotNull(logger.getName());\n        assertEquals(\"MyLogger\", logger.getName());\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": " public final void test1() {\n\t\t\t   boolean r = false;\n\t\t\t   LoggerFactory.make();\n\t\t\t}\n\t\t public final void test2() {\n\t\t\t   boolean r = true;\n\t\t\t   LoggerFactory.make();\n\t\t\t}\n\t\t public final void test3() {\n\t\t\t   boolean r = true;\n\t\t\t   LoggerFactory.make();\n\t\t\t}\n\t\t public final void test4() {\n\t\t\t  boolean r = false;\n\t\t\t  LoggerFactory.make();\n\t\t\t}\n\t}\n\t\t /**\n\t\t * Erzeugt einscharte JUnit-Test f\ufffdr Log4J.\n\t\t *\n\t\t * @return der JUnit-Test\n\t\t */\n\t\tpublic static junit.framework.Test suite() {\n\t\t\tfinal LoggerFactoryTest test = new LoggerFactoryTest();\n\t\t\treturn new LoggerFactory() {\n\t\t\t\t final Logger log4j = Logger.getLogger(\"test.class\");\n\t\t\t\t {\n\t\t\t\t\t test.test1();\n\t\t\t\t\t log4j.debug(\"Debug\");\n\t\t\t\t\t test.test2();\n\t\t\t\t\t log4j.warn(\"Warn\");\n\t\t\t\t\t log4j.error(\"Error\");\n\t\t\t\t }\n\t\t };\n\t\t}\n\t\t // Fiegen neus LoggerFactoryTest.java f\ufffdrt, nicht das TestLoggerFactory.java\n\t}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    void testLog4jLoggerFactory();\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Tests the basic unit test method {@link LoggerFactory#make()} for all possible\n\t\t * input and output parameters.\n\t\t */\n\t@Test\n\tpublic final void testAllParameters() {\n\t\t\tLogger log = LoggerFactory.make();\n\t\t\tassertNotNull(log);\n\t\t\tassertTrue(log instanceof Logger);\n\t}\n}",
            "finish_reason": "stop"
        }
    ],
    "id": "672e62ed-7765-4779-b19d-e84ecdde6a86",
    "prompt_id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/util/LoggerFactory.java",
    "original_code": "// LoggerFactory.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\n\n/**\n * Factory f\ufffdr Log4J.\n *\n * @author Stefan Jockenh\ufffdvel\n * @see http://www.javaspecialists.eu/archive/Issue137.html\n * @see http://shemnon.com/speling/2006/12/dry-logs-there-are-better-ways.html\n *      --> comment\n */\npublic final class LoggerFactory {\n\n    /**\n     * Erzeugt einen Logger in der aufrufenden Klasse.\n     *\n     * @return Logger\n     */\n    public static Logger make();\n}\n",
    "test_prompt": "// LoggerFactoryTest.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoggerFactory}.\n* It contains one unit test case for the {@link LoggerFactory#make()} method.\n*/\nclass LoggerFactoryTest {",
    "time_taken": 20.624166250228882,
    "usage": {
        "prompt_tokens": 291
    }
},
{
    "choices": [
        {
            "text": "\n\tprivate ExplorerModel createNewExplorerModelWithFigure();\n\t\n\t@Test\n\tvoid itBuildsNewExplorerModel();\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid test_createNewExplorerModelWithFigure() {\n\t\t// given\n\t\tint a = 42;\n\t\tint b = 43;\n\t\tObject f = new FontMetrics(a);\n\t\tObject g = new FontMetrics(b);\n\t\t// when\n\t\tint result = ExplorerModelBuilder.createNewExplorerModelWithFigure(a, b);\n\t\t\n\t\t// then\n\t\tassertEquals(a, result);\n\t};\n\t\n\t/**\n\t * {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} erstellt eine neue ExplorerFigure und verknuepft diese beiden.\n\t *\n\t * @throws Exception \n\t *\n\t * @author Jens Wilke, B. L\u00fccke\n\t * */\n\t@Test\n\tvoid test_createNewExplorerModelWithFigure_1() throws Exception {\n\t\tExplorerManager.getInstance().changeStarted(Integer.valueOf(42), Integer.valueOf(43));\n\t\tExplorerManager.getInstance().changeFinished(Integer.valueOf(42));\n\n\t\tint a = 42;\n\t\tint b = 43;\n\t\tObject f = new FontMetrics(a);\n\t\tObject g = new FontMetrics(b);\n\t\t// when\n\t\tExplorerModelB2F<Integer,Integer,Object,Object> result = ExplorerModelBuilder.createNewExplorerModelWithFigure(a, b);\n\t\t\n\t\t// then\n\t\tassertFalse(result.isModelCreated());\n\t}\n\t\n\t/**\n\t * {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} erstellt eine neue ExplorerFigure und verknuepft diese beiden.\n\t *\n\t * @throws Exception \n\t *\n\t * @author Jens Wilke, B. L\u00fccke\n\t * */\n\t@Test\n\tvoid test_createNewExplorerModelWithFigure_2() throws Exception {\n\t\tExplorerManager.getInstance().changeStarted(Integer.valueOf(42), Integer.valueOf(43));\n\t\tExplorerManager.getInstance().changeFinished(Integer.valueOf(42));\n\n\t\tint a = 42;\n\t\tint b = 43;\n\t\tObject f = new FontMetrics(a);\n\t\tObject g = new FontMetrics(b);\n\t\t// when\n\t\texplorerModel = ExplorerModelBuilder.createNewExplorerModelWithFigure(a, b);\n\t\t\n\t\t// then\n\t\tassertFalse(explorerModel.isModelCreated());\n\t\tassertEquals(\"Fonts:A Font:B\", new String(explorerModel.getName()), \"Fonts:A Font:B\");\n\t\tassertTrue(explorerModel instanceof ExplorerModelB2F);\n\t}\n\t\n\t/**\n\t * {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} erstellt eine neue ExplorerFigure und verknuepft diese beiden.\n\t *\n\t * @throws Exception \n\t *\n\t * @author Jens Wilke, B. L\u00fccke\n\t * */\n\t@Test\n\tvoid test_createNewExplorerModelWithFigure_3() throws Exception {\n\t\tExplorerManager.getInstance().changeStarted(Integer.valueOf(42), Integer.valueOf(43));\n\t\tExplorerManager.getInstance().changeFinished(Integer.valueOf(42));\n\n\t\tint a = 42;\n\t\tint b = 43;\n\t\tObject f = new FontMetrics(a);\n\t\tObject g = new FontMetrics(b);\n\t\t// when\n\t\texplorerModel = ExplorerModelBuilder.createNewExplorerModelWithFigure(a, b);\n\t\t\n\t\t// then\n\t\tassertFalse(explorerModel.isModelCreated());\n\t\tassertEquals(\"Fonts:A Font:B\", new String(explorerModel.getName()), \"Fonts:A Font:B\");\n\t\tassertTrue(explorerModel instanceof ExplorerModelB2F);\n\t}\n\t\n\t/**\n\t * {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} erstellt eine neue ExplorerFigure und verknuepft diese beiden.\n\t *\n\t * @throws Exception \n\t *\n\t * @author Jens Wilke, B. L\u00fccke\n\t * */\n\t@Test\n\tvoid test_createNewExplorerModelWithFigure_4() throws Exception {\n\t\tExplorerManager.getInstance().changeStarted(Integer.valueOf(42), Integer.valueOf(43));\n\t\tExplorerManager.getInstance().changeFinished(Integer.valueOf(42));\n\n\t\tint a = 42;\n\t\tint b = 43;\n\t\tObject f = new FontMetrics(a);\n\t\tObject g = new FontMetrics(b);\n\t\t// when\n\t\texplorerModel = ExplorerModelBuilder.createNewExplorerModelWithFigure(a, b);\n\t\t\n\t\texplorerModel.getFigure().removeAllItems();\n\t\tfor (int i = 0; i < f.size(); i++) {\n\t\t\tExplorerFigure figure = explorerModel.getFigureCreator().create(f.getClass());\n\t\t\texplorerModel.getFigure().addItem(figure);\n\t\t}\n\t\t\n\t\t// then\n\t\tassertFalse(explorerModel.isModelCreated());\n\t\tassertEquals(\"Fonts:A Font:B\", new String(explorerModel.getName()), \"Fonts:A Font:B\");\n\t\tassertTrue(explorerModel instanceof ExplorerModelB2F);\n\t}\n\t\n\tprivate ExplorerModel explorerModel;\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t  * Test method for\n\t  * {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()}.\n\t  */\n\t@Test\n\tpublic final void testCreateNewExplorerModelWithFigure() {\n\t\t// Method under test\n\t\tExplorerModel model = ExplorerModelBuilder.createNewExplorerModelWithFigure();\n\t\tassertEquals(ExplorerManager.getInstance().getExplorerCollectionSize(), model.size());\n\t\tExplorerManager.getInstance().removeExplorer(model);\n\t\tassertEquals(ExplorerManager.getInstance().getExplorerCollectionSize(), model.size());\n\t}\n\n\t/**\n\t  * Example of one unit test.\n\t  */\n\t@Test\n\tpublic final void createNewExplorerModelWithFigure() {\n\t\tListBoxFigure listBoxFigure = new ListBoxFigure();\n\t\tlistBoxFigure.addItem(\"newListBoxItem\");\n\t\tListBoxFigure existingListboxFigure = new ListBoxFigure();\n\t\tlistBoxFigure.setExistingTextBox(\"newExistingTextBox\");\n\t\texistingListboxFigure.addItem(\"existingListItem\");\n\t\tListBoxFigure newListBoxFigure = ExplorerManager.getInstance().addExplorerFigure(\n\t\t\t\tlistBoxFigure);\n\t\tassertNotNull(newListBoxFigure);\n\t\tTextBoxFigure existingTextBoxFigure = new ListBoxFigure()\n\t\t\t\t\t\t.getElementAt(1);\n\t\tassertNotNull(existingTextBoxFigure);\n\t\tif (existingTextBoxFigure.isItemSelected())\n\t\t{\n\t\t\tassertNull(newListBoxFigure.getElementAt(\"1\"));\n\t\t}\n\t\telse {\n\t\t\tassertTrue(newListBoxFigure.getElementAt(\"1\").isItemSelected());\n\t\t}\n\t\tlistBoxFigure.removeElementAt(\"newListBoxItem\");\n\t\tassertFalse(listBoxFigure.isEmpty());\n\t\tnewListBoxFigure.removeElementAt(\"existingListItem\");\n\t\tassertFalse(newListBoxFigure.isEmpty());\n\t\tExplorerManager.getInstance().removeExplorerFigure(newListBoxFigure);\n\t\tassertTrue(newListBoxFigure.isEmpty());\n\t\tExplorerManager.getInstance().removeExplorerFigure(listBoxFigure);\n\t\tassertFalse(listBoxFigure.isEmpty());\n\t\tExplorerManager.getInstance().addExplorerFigure(newListBoxFigure);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test for {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()}.\n\t\t */\n\t\t@Test\n\t\tpublic void createNewExplorerModelWithFigure() {\n\t\t\tExplorerManager manager = ExplorerManager.getInstance();\n\n            // Create the test model\n\t\t\tExplorerModel model = new ExplorerModel();\n\n\t\t\t// Add some figures to the model\n\t        model.add(new ListBoxFigure());\n//\t\t\tmodel.add(new TextBoxFigure());\n\n            // Create an independent figure which is a child of the tested model\n            ExplorerManager.getInstance().setTopModel(model);\n\n            // Add some figures to the model\n\t        model.add(new ListBoxFigure());\n//            model.add(new TextBoxFigure());\n            \n            // Create an explorer-figure\n            ExplorerFigure explorer = ExplorerManager.getInstance().getTopModel().getTopFigure();\n//            ExplorerManager.getInstance().setTopFigure(new ExplorerFigure(explorer));\n\n            // Start drawing for an explorer-figure. If the start\n            // method is called explicitely, the canvas will be\n            // the root figure, but not the explorer.\n            ExplorerDrawingPanel drawingPanel = new ExplorerDrawingPanel(explorer.getCanvas(), explorer.getRoot(), false);\n            \n            // Set the explorer\n            explorer.setDrawingPanel(drawingPanel);\n            drawingPanel.start();\n\n            // Add some figures to the model\n\t        model.add(new ListBoxFigure());\n//            model.add(new TextBoxFigure());\n            \n            // Create an independent figure which is a child of the tested model\n            ExplorerManager.getInstance().setTopModel(model);\n\n            // Add some figures to the model\n\t        model.add(new ListBoxFigure());\n//            model.add(new TextBoxFigure());\n            \n            // Create an explorer-figure\n            ExplorerFigure explorer2 = ExplorerManager.getInstance().getTopModel().getTopFigure();\n//            ExplorerManager.getInstance().setTopFigure(new ExplorerFigure(explorer2));\n\n            // Start drawing for an explorer-figure. If the start\n            // method is called explicitely, the canvas will be\n            // the root figure, but not the explorer2.\n            drawingPanel = new ExplorerDrawingPanel(explorer2.getCanvas(), explorer2.getRoot(), false);\n\n            // Set the explorer\n            exp1.setDrawingPanel(drawingPanel);\n            drawingPanel.start();\n            exp2.setDrawingPanel(drawingPanel);\n            drawingPanel.start();\n            \n            // Wait until the model draws\n            drawingPanel.waitUntilFinished();\n\t       \n            // Finish the test\n            drawingPanel.finish();\n            \n            // Add some figures to the model\n\t        model.add(new ListBoxFigure());\n//            model.add(new TextBoxFigure());\n            \n            // Create an independent figure which is a child of the tested model\n            ExplorerManager.getInstance().setTopModel(model);\n            \n            // Finish the test\n            drawingPanel = new ExplorerDrawingPanel(explorer.getCanvas(), explorer.getRoot(), false);\t\t\n            drawingPanel.finish();\n            ExplorerManager.getInstance().setTopFigure(null);\n            \n            // Create an explorer-figure\n            explorer.setDrawingPanel(drawingPanel);\n            drawingPanel.start();\n            \n            // Set the explorer\n            exp = explorer;\n            exp.setDrawingPanel(drawingPanel);\n            drawingPanel.start();\n            \n            // Create an independent figure which is a child of the tested \n            // model\n            ExplorerManager.getInstance().setTopModel(model);\n            \n            // Finish the test\n            drawingPanel = new ExplorerDrawingPanel(explorer.getCanvas(), explorer.getRoot(), false);\n            drawingPanel.finish();\n            ExplorerManager.getInstance().setTopFigure(null);\n            \n            // Wait for the canvas to finish\n            drawingPanel.waitUntilFinished();\n        }\n    \n    \n    \n    public ExplorerLevel getExplorer() {\n        return exp;\n    }\n    \n    public ExplorerDrawingPanel getExplorerPanel(){\n        return exp.getDrawingPanel();    \n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public final void testConstructEmptyExplorerModel() {\n        final ExplorerModel model = ExplorerModelBuilder.createNewExplorerModelWithFigure();\n        assertNotNull(model);\n    }\n    \n    @Test\n    public final void testCreateNewExplorerModelWithFigure() {\n        // given, a figure\n        final ExplorerFigure<String> figure = new ExplorerFigureBuilder<String>()\n               .setTextLineColor(org.junit.jupiter.api.Assertions.assertNotNull(org.junit.jupiter.api.Assertions.assertNotNull((figures = new ExplorerFigureBuilder<String>()\n               .setFont(org.junit.jupiter.api.Assertions.assertNotNull((font = (new Font()).setSize(2.0F)))\n               .setAlignment(org.junit.jupiter.api.Assertions.assertNotNull((textAlignment = (new TextAlignmentImpl().setHorizontalAlignment(Font.HORIZONTAL_RIGHT))\n               .setVerticalAlignment(Font.VERTICAL_CENTER)\n               .setAlignmentInPixelsMode(Font.ALIGNMENT_INLINE))))).setText(org.junit.jupiter.api.Assertions.assertNotNull((text = \"Some Text\"))\n               .setFontSize(org.junit.jupiter.api.Assertions.assertNotNull((fontSize = (new FontSizeImpl().setSize(7.0F)))\n               .setAlignment(Font.ALIGNMENT_RIGHT)))).build();\n    \n        // when\n        final ExplorerModel model1 = ExplorerManager.getInstance().createExplorerModel();\n        model1.addFigure(figure);\n        assertNotNull(model1);\n        \n        // then\n        assertEquals(2,model1.getFigureCount());\n        assertEquals((\"Some Text\",),model1.getFigure(0,1));\n        assertEquals((\"Some Text\",),model1.getFigure(1,0));\n    }\n    \n    @Test\n    public final void testCreateExplorerModelWithFigure(final ExplorerManager manager) {\n        // given, a figure\n        final ExplorerFigure<String> figure = new ExplorerFigureBuilder<String>()\n               .setTextLineColor(org.junit.jupiter.api.Assertions.assertNotNull(org.junit.jupiter.api.Assertions.assertNotNull((figures = new ExplorerFigureBuilder<String>()\n               .setFont(org.junit.jupiter.api.Assertions.assertNotNull((font = (new Font()).setSize(2.0F)))\n               .setAlignment(org.junit.jupiter.api.Assertions.assertNotNull((textAlignment = (new TextAlignmentImpl().setHorizontalAlignment(Font.HORIZONTAL_RIGHT))\n               .setVerticalAlignment(Font.VERTICAL_CENTER)\n               .setAlignmentInPixelsMode(Font.ALIGNMENT_LINE))).build()))))\n               .setFont(Manager.getInstance().makeFont(\"TestFont\", Font.PLAIN, 2.0F))\n               .setAlignment(org.junit.jupiter.api.Assertions.assertNotNull((textAlignment = (new TextAlignmentImpl().setHorizontalAlignment(org.junit.jupiter.api.Assertions.assertNotNull((org.junit.jupiter.api.Assertions.assertNotNull((font = (new Font()).setSize(2.0F))))\n               .setAlignmentInPixelsMode(Font.ALIGNMENT_RIGHT))))).setText(Manager.getInstance().makeString(\"some text\")).setFontSize(fontSize(7.0F))\n               .build())).build();\n        \n        // when create new model:\n        final ExplorerModel model1 = ExplorerManager.getInstance().createExplorerModel();\n        model1.addFigure(figure);\n        assertNotNull(model1);\n        \n        // then: correct model1 is created\n        assertEquals(2,model1.getFigureCount());\n        assertEquals((\"some text\",),model1.getFigure(0,1));\n        assertEquals((\"some text\",),model1.getFigure(1,0));\n        \n        // if no figure is found it will throw an exception\n        assertThrows(UnableToFindExistingFigureException.class, () -> ExplorerManager.getInstance().createExplorerModel());\n        \n        // and nothing else\n        assertThrows(UnequalFigureSizeException.class, () -> ExplorerManager.getInstance().createExplorerModelWithFigure(model1));\n    }\n    \n    // protected methods ==========================================================================================\n    // helper ==================================================================================================\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tpublic void testCreatingNewExplorerWithFigure () {\n\t\t\n\t//\tcreateNewExplorerModelWithFigure().\n\t\tExplorerDrawingPanel drawingPanel = new ExplorerDrawingPanel();\n\n\t\t// Test if the new model is created correctly.\n\t\tExplorerModel explorerModel = explorerModelBuilder().createNewExplorerModelWithFigure();\n\t\tassertNotNull(explorerModel);\n\t\tassertTrue(explorerModel.isEmpty);\n\n\t\t// Test if the number of steps in the explorer model is equal to the number\n\t\t// of steps in the drawing panel.\n\t\tint stepsSize = drawingPanel.getSteps().size();\n\t\tint drawStepsSize = drawingPanel.getDrawSteps().size();\n\n\t\tassertEquals(stepsSize, drawStepsSize);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t* Tests {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} in one test case. \n\t*/\n\t@Test\n\tpublic void testCREateNewExplorerModelWithFigureConstructor() {\n\t\t\n\t\t// given/when\n\t\tExplorerManager explorerManager = new ExplorerManager(); // new ExplorerManager(); // new ExplorerManager();\n\t\tExplorerDrawingPanel drawingPanel = new ExplorerDrawingPanel();\n\t\tExplorerFigure explorerFigure = new ExplorerFigure(drawingPanel); // new ExplorerFigure(drawingPanel);\n\t\t// then\n\t\tassertNotNull(explorerManager);\n\t}\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n         * test for {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.\n         */\n\t\t@Test\n         public void constructor() {\n               ExplorerModelBuilderTestObject object = new ExplorerModelBuilderTestObject();\n               Object result = object.createNewExplorerModelWithFigure();\n               assertNotNull(result);\n            }\n        }\n\n// ExplorerModel.java\nclass ExplorerModel {\n    private TableHeader tableHeader;\n    private final ListBoxFigure listBoxFigure = new ListBoxFigure();\n    private final TextBoxFigure textBoxFigure = new TextBoxFigure();\n\n    protected final void setData(final ExplorerFigure figure) {\n        if (this.listBoxFigure instanceof ExplorerFigureBuilder) {\n            final ExplorerFigureBuilder.ExplorerFigureBuilder builder =\n                    ((ExplorerFigureBuilder) this.listBoxFigure);\n            builder.set((ExplorerFigure) figure);\n        } else if (this.textBoxFigure instanceof ExplorerFigureBuilder) {\n            final ExplorerFigureBuilder.ExplorerFigureBuilder builder =\n                    ((ExplorerFigureBuilder) this.textBoxFigure);\n            builder.set((ExplorerFigure) figure);\n        } else\n            fail(\"The textBoxFigure should be part of listBoxFigure.\");\n    }\n\n    private ExplorerModel() {\n        this.tableHeader = new TableHeader();\n        this.tableHeader.setHeaderText(\"Table Header Value\");\n    }    \n    \n    /**\n     * @return the listBoxFigure as ExplorerFigure.\n     */\n\tpublic ExplorerFigureBuilder listBoxFigure() {\n\t    if (this.listBoxFigure instanceof ExplorerFigureBuilder) {\n            final ExplorerFigureBuilder.ExplorerFigureBuilder builder =\n                    ((ExplorerFigureBuilder) this.listBoxFigure);\n            builder.listBox()\n\n            return builder;\n        } else\n            fail(\"The listBoxFigure should be part of listBoxFigure.\");\n\t\t}\n\n\t/**\n\t  * @return the textBoxFigure as ExplorerFigure.\n\t  */\n\t  public ExplorerFigureBuilder textBoxFigure() {\n\t\t if (this.textBoxFigure instanceof ExplorerFigureBuilder) {\n            final ExplorerFigureBuilder.ExplorerFigureBuilder builder = \n                    ((ExplorerFigureBuilder) this.textBoxFigure);\n            builder.textBox();\n            // builder.set((ExplorerFigure) textBoxFigure);\n            return builder;\n        } else\n            fail(\"The textBoxFigure should be part of textBoxFigure.\");\n\t}\n}\n\nclass ExplorerFigureBuilder {\n    \n        \n    /**\n     * @return a new ExplorerFigure as ExplorerFigure.\n     */\n        public ExplorerFigure createExplorerFigure() {\n        \tfinal ExplorerManager mgr = ExplorerManager.getInstance();\n        \tif (mgr instanceof ExplorerManagerTest) {\n            ((ExplorerManagerTest) mgr).createExplorerFigure();\n        \t} else\n            fail(\"The mgr is not of type ExplorerManagerTest.\");\n        \treturn null;\n        }\n}\nclass ExplorerFigureBuilder2 {\n    \n    /**\n     * @return a new ExplorerFigure as ExplorerFigure.\n     */\n        public ExplorerFigure createExplorerFigure() {\n        \tfinal ExplorerManager mgr = ExplorerManager.getInstance();\n        \tif (mgr instanceof ExplorerManagerTest) {\n            ((ExplorerManagerTest) mgr).createExplorerFigure();\n            // mgr = (ExplorerManager) ((ExplorerManagerTest) mgr).createExplorerFigure();\n        \t}\n        \treturn null;\n        }\n        private static class ExplorerManagerTest extends ExplorerManager {\n            ExplorerManagerTest() {\n                super();\n            }\n        }\n}\npublic class ExplorerManagerTest {\n\n    @Test\n    public void testCreateExplorerFigure() {\n        final ExplorerManagerTest mgrTest = new ExplorerManagerTest();\n        ExplorerManagerTest.explorerManagement = mgrTest;\n        final ExplorerManager manager = ExplorerManager.getInstance();\n        manager.setExplorerManagement(mgrTest);\n        final ExplorerManagerTest.ExplorerManagerTestImpl impl = new ExplorerManagerTest.ExplorerManagerTestImpl();;\n        explorerManagement = impl;\n        impl.createExplorerFigure();\n        explorerManagement = manager;\n        assertNotNull(explorerManagement);\n    }\n}\nclass ExplorerManagerTest {\n    ExplorerManagerTest() {\n    }\n    ExplorerManager getExplorerManagement() {\n        return explorerManagement;\n    }\n}\nclass ExplorerManagerTestImpl {\n    explorerManagement;\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public final void testCreateNewExplorerModelWithFigure() {\n        final ExplorerModel model = ExplorerModelBuilder.createNewExplorerModelWithFigure();\n\t\t\t\t\n        assertEquals(1, model.count());\n    }\n    \t\n    @Test\n    public final void testGetExplorerFigureBuilder() {\n        final ExplorerFigureBuilder builder = ExplorerManager.getInstance().getListBoxFigureBuilder();\n        \n        assertNotNull(builder);\n    }\t\n    \n    @Test\n    public final void testGetExplorerFigure() {\n        final ExplorerFigure figure = ExplorerManager.getInstance().getExplorerFigure(\"listBox\");\n        \n        assertNotNull(figure);\n    }\n\n    @Test\n    public final void testAddListBoxFigure() {\n        final ExplorerManager manager = ExplorerManager.getInstance();\n        final ListBoxFigure listBox = new ListBoxFigure();\n\t\t\n        manager.addListBoxFigure(listBox);\n\t\t\n        final ListBoxFigure addedFigure = manager.getListBoxFigure(\"listBox\");\n        \n        assertEquals(listBox, addedFigure);\n    }\n    \n    @Test\n    public final void testAddTextBoxFigure() {\n        final ExplorerManager manager = ExplorerManager.getInstance();\n        final TextBoxFigure figure = new TextBoxFigure();\n\n\t\tmanager.addTextBoxFigure(figure);\n    }\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "public ExplorerModelBuilderTest() {\n\t\t}\n\t@Test\n\t    public void createNewExplorerModelWithFigure() {\n\t    ExplorerManager \n\t    \t\t= new ExplorerManager(explorerFigures -> {\n\t    \t\t\tif (explorerFigures.size() == 5) {\n\t      \t\t\t   explorerFigures.add(new ExplorerFigureBuilder()\n\t      \t  \t\t    \t\t.withName(\"Explorer\"+explorerFigures.size())\n\t      \t  \t\t    \t\t.withLocation(0,0)\n\t      \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t\t    \t\t.withFigure(new ListBoxFigure())\n\t      \t  \t\t    \t\t.build());\n\t     \t\t} else if (explorerFigures.size() == 2) {\n\t      \t\t\texplorerFigures.add(new ExplorerFigureBuilder()\n\t      \t  \t\t    \t\t.withName(\"Explorer\"+explorerFigures.size())\n\t      \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t\t    \t\t.build());\n\t    \t\t}\n\t\t\t\t\t\treturn explorerFigures;\n\t\t\t\t\t}\n\t\t);\n\tExplorerModel model = ExplorerModelBuilder.createNewExplorerModelWithFigure(ExplorerManager.getInstance());\n\tassertTrue(model.size() == 5);\n\tListBoxFigure lbl[] = model.getExplorerFigures().toArray(ListBoxFigure.class);\n\tassertTrue(lbl[0].getFigure().size() == 5);\n\tassertTrue(lbl[1].getFigure().size() == 5);\n\tassertTrue(lbl[2].getFigure().size() == 5);\n\tassertTrue(lbl[3].getFigure().size() == 5);\n\tassertTrue(lbl[4].getFigure().size() == 5);\n\tModelTestHelpers.assertTextBox(lbl[0], \"Explorer\" + model.size());\n\tModelTestHelpers.assertTextBox(lbl[1], \"Explorer\" + model.size());\n\tModelTestHelpers.assertTextBox(lbl[2], \"Explorer\" + model.size());\n\tModelTestHelpers.assertTextBox(lbl[3], \"Explorer\" + model.size());\n\t}\n\t\n\n\t@Test\n\t    public void testSetNewExplorer() {\n\t    ExplorerManager \n\t    \t\t= new ExplorerManager(explorerFigures -> {\n\t    \t\t\tif (explorerFigures.size() == 3) {\n\t      \t\t\t   explorerFigures.add(new ExplorerFigureBuilder()\n\t      \t  \t  \t\t    \t\t.withName(\"Explorer\"+explorerFigures.size())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.build());\n\t     \t\t} else {\n\t      \t\t\texplorerFigures.add(new ExplorerFigureBuilder()\n\t      \t  \t  \t\t    \t\t.withName(\"Explorer\"+explorerFigures.size())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.withFigure(new TextBoxFigure())\n\t      \t  \t  \t\t    \t\t.build());\n\t \t  \t\t}\n\t\t\t\t\t\treturn explorerFigures;\n\t\t\t\t\t}\n\t\t);\n\tExplorerModel model = ExplorerModelBuilder.createNewExplorerModelWithFigure(ExplorerManager.getInstance());\n\tExplorerModel model1 = ExplorerModelBuilder.createNewExplorerModelWithFigure(model);\n\tassertTrue(model1.size() == 3);\n\tsetNewExplorer(ExplorerFigureBuilder.createNewExplorerFigureBuilder(ExplorerFigureBuilder.getExplorerFigures()));\n\t}\n\t\n\n\t\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "7e2fbe05-7492-4dfd-9dbd-86116e0cf8a7",
    "prompt_id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/model/ExplorerModelBuilder.java",
    "original_code": "// ExplorerModelBuilder.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigure;\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport de.paragon.explorer.figure.ListBoxFigure;\nimport de.paragon.explorer.figure.TextBoxFigure;\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\nimport de.paragon.explorer.util.ExplorerManager;\n\npublic final class ExplorerModelBuilder {\n\n    /**\n     * Kommentar: Diese Methode erzeugt ein neues ExplorerModel, eine neue\n     * ExplorerFigure und verknuepft diese beiden.\n     */\n    public ExplorerModel createNewExplorerModelWithFigure();\n}\n",
    "test_prompt": "// ExplorerModelBuilderTest.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigure;\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport de.paragon.explorer.figure.ListBoxFigure;\nimport de.paragon.explorer.figure.TextBoxFigure;\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\nimport de.paragon.explorer.util.ExplorerManager;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplorerModelBuilder}.\n* It contains one unit test case for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.\n*/\nclass ExplorerModelBuilderTest {",
    "time_taken": 45.660887718200684,
    "usage": {
        "prompt_tokens": 398
    }
}
]