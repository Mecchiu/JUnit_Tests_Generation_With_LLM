[
{
    "choices": [
        {
            "text": "String testUrl = \"http://apps.google.com/appengine/\";\n\t\tObject testObject = new QuotaDetails();\n\t\tManager manager = new Manager();\n\t\t\n\t\t//@RunWith(Parameterized.class)\n\t\tTestParameterizedParameterized testValue1, testValue2;\n\t\t\n\t\t@Test\n\t\tvoid testDefaultRetrieveAppQuotaDetails(Parameters parameter) throws Exception {\n\t\t\n\t\t\t// Set up the parameters and check status code\n\t\t\tObject[] params = testValue1.getParams(parameter);\n\t\t\ttestValue1.assertValue1(params.length, \"1\", \"1\");\n\t\t\t\n\t\t\t// Make sure that the request is successful\n\t\t\tparams = testValue2.getParams(parameter);\n\t\t\ttestValue2.assertValue1(params.length, \"2\", \"\");\n\t\t\tassertEquals(testUrl + \"?APPID=%2$s&QUOTA=\", manager.testUrl(queryString(\"APPID=%2$s&QUOTA=\", null)));\n\t\t\tassertEquals(testUrl + \"?APPID=%2$s&QUOTA=&APPSERVERID=%%2$s\", manager.testUrl(testUrl, null));\n\t\t\tassertEquals(testUrl + \"?APPID=%%2$s&QUOTA=&APPSERVERID=%%2$s\", manager.testUrl(testUrl, testValue1.parameter));\n\t\t\tassertEquals(testUrl + \"?APPID=%%2$s&QUOTA=%2$d\", manager.testUrl(testUrl, testValue1.parameter, \"3\"));\n\t\t\tassertEquals(testUrl + \"?APPID=%%2$s&QUOTA=%2$d&APPSERVERID=%%2$s\", manager.testUrl(testUrl, testValue1.parameter, \"3\"));\n\t\t\tassertEquals(testUrl + \"?APPID=%%2$s&QUOTA=%2$d&APPSERVERID=%%2$s\", manager.testUrl(testUrl, testValue1.parameter, \"3\"));\n\t\t\tassertTrue(manager.isValid(testUrl, testValue1.parameter));\n\t\t\t\n\t\t\t// TODO check status code (default request without quota)\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testRetrieveAppQuotaDetailsFromGoogleAppEngine(Parameters parameter) throws Exception {\n\t\t\n\t\t\t// Set up the parameters and check status code\n\t\t\tObject[] params = testValue2.getParams(parameter);\n\t\t\ttestValue2.assertParam1(params.length, \"1\");\n\t\t\ttestValue2.assertParam2(params.length, \"3\");\n\t\t\tString expectedAppId = testValue1.parameter;\n\t\t\t\n\t\t\tObject[] paramsGoogleApp = LogonHelper.logoutFromGoogleAppEngine();\n\t\t\tLogonHelper.loginToGoogleAppEngine(paramsGoogleApp[0].toString(),\n\t\t\t\t\t(String) paramsGoogleApp[1].toString());\n\t\t\tObject[] paramsGoogleAppGoogleAccount = LogonHelper.logoutFromGoogleAppEngine();\n\t\t\tLogonHelper.loginToGoogleAppEngine(testUrl, \"user\");\n\t\t\t\n\t\t\t// Perform the request\n\t\t\tparams = testValue2.getParams(parameter);\n\t\t\tLogonHelper.logoutFromGoogleAppEngine(\n\t\t\t\t\t(String) params[0].toString(), paramsGoogleApp[0].toString());\n\t\t\tparams = testValue2.getParams(parameter);\n\t\t\tHttpGet get = new HttpGet(\"http://%s/%s?APPID=%s&QUOTA=%d&APPSERVERID=%s\",\n\t\t\t\t\ttestUrl, testUrlGoogleApp, expectedAppId, \"\", testUrlGoogleAccount);\n\t\t\tHttpResponse response = manager.retrieveAppQuotaDetails(testUrl, expectedAppId,\n\t\t\t\t\tLogonHelper.APPLICATION_ID_GOOGLE_GAE_ACCESS_CODE,\n\t\t\t\t\tLogonHelper.APPLICATION_ID_GOOGLE_APPSERVERID);\n\t\t\t\t\t\n\t\t\tHttpResponse responseGoogleAppGoogleAccount =\n\t\t\t\t\tmanager.retrieveAppQuotaDetails(testUrlGoogleAccount, expectedAppId,\n\t\t\t\t\t\t\tLogonHelper.APPLICATION_ID_GOOGLE_GAE_ACCESS_CODE,\n\t\t\t\t\t\t\tLogonHelper.APPLICATION_ID_GOOGLE_APPSERVERID);\n\t\t\t\n\t\t\tassertEquals(get.getURI().toString(), responseGoogleAppGoogleAccount.getURI().toString());\n\t\t\tassertEquals(get.getURI().toString(), response.getURI().toString());\n\t\t}\n\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Verify we can retrieve the given quota details.\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void verifyRetrieveGoodQuotaDetails() throws Exception {\n\t\t\tQuotaDetails quotaDetails = retrieveAppQuotaDetails(\"user123\", \"account123\", \"G\", \"appspot\");\n\t\t}\n\n\t\t/**\n\t\t * Verify we can retrieve the quota details.\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void verifyRetrieveExpiredQuotaDetails() throws Exception {\n\t\t\tQuotaDetails quotaDetails = retrieveAppQuotaDetails(\"user123\", \"account123\", \"G\", \"appspot\");\n\t\t\tverifyExpired(quotaDetails);\n\t\t}\n\t\t/**\n\t\t * Verify we can retrieve the quota details.\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\t@Test\n\t\tpublic void verifyRetrieveNonExpiredQuotaDetails() throws Exception {\n\t\t\tQuotaDetails quotaDetails = retrieveAppQuotaDetails(\"user123\", \"account123\", \"G\", \"appspot\");\n\t\t\t\n\t\t\tverifyNonExpired(quotaDetails);  \n\t\t}\n\n\t\t/**\n\t\t * Verify in the case of expired quota credentials, the quota details should be parsed as an expired user.\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\tprivate void verifyExpired(QuotaDetails quotaDetails) throws Exception {\n\t\t\tassertNotNull(quotaDetails.getQuota());\n\t\t\tassertEquals(\"account_email\", quotaDetails.getQuota().getQuotaName());\n\t\t\tassertEquals(\"user123\", quotaDetails.getQuota().getAppId());\n\t\t\tassertFalse(quotaDetails.getQuota().isExpired());\n\t\t\t\n\t\t\tassertNotNull(quotaDetails.getAppCookie());\n\t\t\tassertFalse(quotaDetails.getAppCookie().isExpired());\n\t\t}\n\n\t\t/**\n\t\t * Verify in the case of all the credentials expired, no authentication is required.\n\t\t *\n\t\t * @throws Exception in case of failure\n\t\t */\n\t\tprivate void verifyNonExpired(QuotaDetails quotaDetails) throws Exception {\n\t\t\tassertTrue(quotaDetails.getAppCookie().isExpired());\n\t\t\tassertNotNull(quotaDetails.getAppCookie());\n\t\t\tassertFalse(quotaDetails.getAppCookie().isExpired());\n\t\t\t\n\t\t\tassertEquals(\"account_email\",\n\t\t\t\t\tquotaDetails.getQuota().getQuotaName());\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t// -------------------------------------------------------------- Test cases\n\t\n\t/**\n\t * Retrieve quota details of de application which has not deployed in googleapp engine yet.\n\t */\n    @Test\n    void retrieveNonDeployedAppQuotaDetails() throws Exception {\n        // Create dummy quota details and retrieve it\n        final QuotaDetails quotaDetails = getDummyAppquotaDetail();\n        QuotaDetails tmp = retrieveAppQuotaDetails(\"guest\", \"guest\", \"\",\n                \"apps/test\");\n        assertEquals(tmp, quotaDetails);\n\n\t\t\t\n\t\t// Now, retrieve its details and check it has no error\n        HttpGet get = new HttpGet(\"https://appengine.google.com/apps/test/quotadetails?app_id=guest\");\n        get.setHeader(\"Cookie\", \"ACSID=\" + LogonHelper.getAppspotKey(\"guest\"));\n        HttpResponse response = new DefaultHttpClient().execute(get);\n\n    \tassertEquals(\"application id\", \"guest\",\n\t            parseResponse(get, response));\n        // Check that the response can still be retrieved\n       assertNull(parseResponse(get, response));\n    }\n    \n    // -------------------------------------------------------------- Implementation\n\t\n\t/**\n\t * Return a dummy quota details that shows its own app.\n\t * \n\t * This dummy quota details only needs an unique app (one for\n\t * apps deployed to google app engine), and does not need to know\n\t * its application name.\n\t */\n    private static QuotaDetails getDummyAppquotaDetail() {\n    \tQuotaDetails quotaDetails = new QuotaDetails();\n    \tquotaDetails.setAppId(GuestAppConfiguration.GOOGLE_INSTANCE);\n    \tquotaDetails.setName(\"test\");\n    \tquotaDetails.setState(\"ACTIVE\");\n    \treturn quotaDetails;\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test instance.\n\t\t */\n    private Manager manager;\n\t\t\n    /**\n\t * Gets the {@link Manager} instance\n\t */\n    public void get() {\n        manager = new Manager();\n    }\n \n    @Test\n    void testRetrieveAppQuotaDetails()  throws Exception {\n        get();\n \n        QuotaDetails appQuota = manager.retrieveAppQuotaDetails(LogonHelper.userId,\n        \t\tLogonHelper.password, \"app_id\", \"name\");\n        assertEquals(appQuota.getApplicationId(), \"app_id\");\n        assertEquals(appQuota.getName(), \"name\");\n        appQuota = manager.retrieveAppQuotaDetails(LogonHelper.userId,\n        \t\tLogonHelper.password, LogonHelper.application, \"name\");\n        assertEquals(appQuota.getApplicationId(), \"app_id\");\n        assertEquals(appQuota.getName(), \"name\");\n \n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test method for\n\t\t * {@link net.sf.gaeappmanager.google.appengine.Manager#Manager(java.lang.String, java.lang.String, java.lang.String, int)}.\n\t\t *\n\t\t * @throws Exception if an error occurred while connecting\n\t\t */\n\t\t@Test\n\t\t@SuppressWarnings(\"javadoc\")\n\t\tpublic void testManager() throws Exception {\n\t\t\t\tfinal Manager manager = new Manager(\"\", \"\", \"\", 0);\n\t\t\t\tfinal QuotaDetails quota = manager.retrieveAppQuotaDetails(\"\", \"\", \"\", \"a.com\");\n\t\t\t\tassertNotNull(\"Null quota information\", quota);\n\t\t\t\t//Check all values for the manager instance\n\t\t\t\tassertTrue(\"Quota should be greater than zero.\", quota.isGreaterThanZero());\n\t\t\t\t//Check the userid should be null if it is the default value\n\t\t\t\tassertTrue(\"User ID should be null.\", (quota.getUserId() == null));\n\t\t}\n\n\t\t/**\n\t\t * Test method for\n\t\t * {@link net.sf.gaeappmanager.google.appengine.Manager#Manager(java.lang.String, java.lang.String, java.lang.String, int)}.\n\t\t *\n\t\t * @throws Exception if an error occurred while connecting\n\t\t */\n\t\t@Test\n\t\t@SuppressWarnings(\"javadoc\")\n\t\tpublic void testManagerWithCustomAuthority() throws Exception {\n\t\t\t\tfinal Manager manager = new Manager(\"mail@gmail.com\", \"password\", \"\", 0);\n\t\t\t\tfinal QuotaDetails quota = manager.retrieveAppQuotaDetails(\"mail@gmail.com\", \"password\", \"\", \"v.com\");\n\t\t\t\tassertNotNull(\"Null quota information\", quota);\n\t\t\t\t//Check all values for the manager instance\n\t\t\t\tassertTrue(\"Quotau should be greater than zero.\", quota.isGreaterThanZero());\n\t\t\t\t//Check the userid should be null if it is the default value\n\t\t\t\tassertTrue(\"User ID should be null.\", (quota.getUserId() == null));\n\t\t}\n\n\t\t/**\n\t\t * Test method for\n\t\t * {@link net.sf.gaeappmanager.google.appengine.Manager#Manager(java.lang.String, java.lang.String, java.lang.String, int)}.\n\t\t *\n\t\t * @throws Exception if an error occurred while connecting\n\t\t */\n\t\t@Test\n\t\t@SuppressWarnings(\"javadoc\")\n\t\tpublic void testManagerWithCustomMail() throws Exception {\n\t\t\t\tfinal Manager manager = new Manager(\"myemail@example.com\", \"password\", \"myemail@example.com\", 1);\n\t\t\t\tfinal QuotaDetails quota = manager.retrieveAppQuotaDetails(\"myemail@example.com\", \"password\", \"myemail@example.com\", \"v.com\");\n\t\t\t\tassertNotNull(\"Null quota information\", quota);\n\t\t\t\t//Check all values for the manager instance\n\t\t\t\tassertTrue(\"Quotau should be greater than zero.\", quota.isGreaterThanZero());\n\t\t\t\t//Check the userid should be null if it is the default value\n\t\t\t\tassertTrue(\"User ID should be null.\", (quota.getUserId() == null));\n\t\t}\n\n\t\t/**\n\t\t * Test method for\n\t\t * {@link net.sf.gaeappmanager.google.appengine.Manager#Manager(java.lang.String, java.lang.String, java.lang.String, int)}.\n\t\t *\n\t\t * @throws Exception if an error occurred while connecting\n\t\t */\n\t\t@Test\n\t\t@SuppressWarnings(\"javadoc\")\n\t\tpublic void testManagerNotNullEmail() throws Exception {\n\t\t\t\tfinal Manager manager = new Manager(\"myemail@example.com\", \"password\", \"myemail@example.com\", 1);\n\t\t\t\tfinal QuotaDetails quota = manager.retrieveAppQuotaDetails(\"myemail@example.com\", \"password\", \"myemail@example.com\", \"v.com\");\n\t\t\t\tassertNotNull(\"Null quota information\", quota);\n\t\t\t\t//Check all values for the manager instance\n\t\t\t\tassertFalse(\"The manager should not be null\", manager.isNotNull());\n\t\t\t\t//Check the userid should be null if it is the default value\n\t\t\t\tassertTrue(\"User ID should be null.\", (quota.getUserId() == null));\n\t\t}\n\n\t\t/**\n\t\t * Test method for\n\t\t * {@link net.sf.gaeappmanager.google.appengine.Manager#Manager(java.lang.String, java.lang.String, java.lang.String, int)}.\n\t\t *\n\t\t * @throws Exception if an error occurred while connecting\n\t\t */\n\t\t@Test\n\t\t@SuppressWarnings(\"javadoc\")\n\t\tpublic void testManagerNotNullPassword() throws Exception {\n\t\t\t\tfinal Manager manager = new Manager(\"gmail@gmail.com\", \"mypassword\", \"v.com\", -1);\n\t\t\t\tfinal QuotaDetails quota = manager.retrieveAppQuotaDetails(\"gmail@gmail.com\", \"mypassword\", \"v.com\", \"-1\");\n\t\t\t\tassertNotNull(\"Null quota information\", quota);\n\t\t\t\t//Check all values for the manager instance\n\t\t\t\tassertFalse(\"The manager should not be null\", manager.isNotNull());\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n/*\n* Class variable for logon\n*/\nstatic String TEST_KEY = \"TEST_PAYLOAD\";\n        static final int TARGET_PORT = 8444;\n\tpublic HttpGet getTest(String testURL){\n\t\tHttpGet get = new HttpGet(testURL);\n\t\tget.addHeader(\"Cookie\", \"TEST_PAYLOAD=\" + TEST_KEY);\n\t\treturn get;\n\t}\n\t\n\n/**\n* @test - Tests retrieving quota details of application deployed in Google App Engine.\n*/\n\t@Test\n\tpublic void getTest() throws Exception {\n\t\t// Retrieve current quota details of application, after login in Google App Engine\n\t\tQuotaDetails quotaDetails = null;\n\t\tLogonHelper logonHelper = new LogonHelper(TEST_KEY);\n\t\t\t\t\n\t\tHttpGet get = getTest(\"https://appengine.google.com/api_server/app_template/compute/instance/_get?app_id=\" + application);\n\t\tHttpResponse response = logonHelper.loginToGoogleAppEngine(TEST_KEY, \"\");\n\t\t\n\t\tassertNotNull(\"HttpResponse should not be null\", response);\n\t\t\n\t\tContentType headerForHeaders = new ContentType(\"text/plain\");\n\t\tContentType headerForContentType = new ContentType(\"text/event-stream\", \"text/html\");\n                \n        assertTrue(\"Content type not matched: \" + ResponseUtil.getHttpHeaderForFormValues(response, \"Content-Type\"), ContentTypeHeaderComparator.compareItems(\n                headerForHeaders, ResponseUtil.getHttpHeaderForFormValues(response, \"Content-Type\")) == 0);\n                \n        assertFalse(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 404);\n        \n        try {\n            quotaDetails = new QuotaDetailsBuilder().getFromResponse(response).build();\n                    \n        } catch (Exception e) {\n            response.getEntity().getContent();\n            throw e;\n        }\n        \n        assertTrue(\"quotaDetails.getName() == \" + quotaDetails.getName()\n                        + \" || quotaDetails.getQuotaBytes() == \" + quotaDetails.getQuotaBytes()\n                        + \" || quotaDetails.getTargetPortNumber() == \" + ResponseUtil.httpPortNumber(response)\n                        + \".getBody().length()\",\n                        quotaDetails.getName().equals(quotaDetails.getQuotaBytes()));\n                \n        ContentType contentTypeHeader = null;\n        try {\n            assertNotNull(\"Content type header for response should not be null\", response.getHeader(\"Content-Type\"));\n            assertNotNull(\"header for Text to eventStream\", response.getHeader(\"Text to eventStream\"));\n            \n            contentTypeHeader = new ContentType(response.getHeader(\"Content-Type\"));\n            assertNotNull(\"The content type header for request should not be null\", response.getHeader(\"Content-Type\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n            \n        assertNotSame(headerForHeaders, contentTypeHeader);\n        assertNotSame(contentTypeHeader, headerForContentType);\n                \n        String eventStreamContent = ResponseUtil.getHttpBody(response);\n                    \n        assertNotNull(\"Event stream content not generated.\", eventStreamContent);\n                \n        String expectedTargetPortValue = null;\n        \n        try {\n        expectedTargetPortValue = ResponseUtil.httpPortNumber(response);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n                \n        assertNotNull(\"The expected target port value should be set in event stream.\", expectedTargetPortValue);\n                    \n        assertEquals(\"eventStreamContent should not be empty \", 0, EventStreamTestUtils.getEventStreamTextOfEventStream(response)\n                              .length());\n                 \n        assertEquals(\"eventStreamContent should not be empty \", \"\", EventStreamTestUtils.buildEventStreamTextForActions(response));\n                    \n                \n        QuotaDetails targetQuotaDetails = new QuotaDetailsBuilder().setQuotaBytes(quotaDetails.getQuotaBytes()).setTargetPortNumber(expectedTargetPortValue).build();\n                      \n        assertTrue(\"The Quota should be greater than 1000 (max allowed)\", targetQuotaDetails.getQuotaBytes()< 1000);\n                \n        quotaDetails = targetQuotaDetails;\n        expectedTargetPortValue = targetQuotaDetails.getTargetPortNumber();\n        ContentType targetContentTypeHeader;\n        try {\n            targetContentTypeHeader = new ContentType(targetQuotaDetails.getQuotaBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(\"the Quota content type for target should be equal to the one content type\", targetContentTypeHeader, contentTypeHeader);\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Retrieve quota details of application deployed in Google App Engine.\n\t\t*\n\t\t* @param userid full gmail address for user\n\t\t* @param password gmail account password\n\t\t* @param source name of application requesting quota details\n\t\t* @param application appspot application name\n\t\t* @return quota details of application\n\t\t* @throws Exception in case of failure\n\t\t*/\n\t\t@Test\n\t\tfinal void retrieveAppQuotaDetails(String userid, String password, String source, String application) throws\n\t\t\tjava.lang.Exception {\n\t\t\tManager m = new Manager(new GoogleAppEngineHelper());\n\t\t\tassertNotNull(m.retrieveAppQuotaDetails(userid, password, source, application));\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Unit test for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}.\n\t * @throws Exception in case of failure\n\t *\n\t */\n\t@Test\n\tpublic void testRetrieveAppQuotaDetails() {\n\t\tLogonHelper.loginToGoogleAppEngine(\"userkey\", \"password\", \"name\");\n\t\tQuotaDetails quotaDetails = retrieveAppQuotaDetails(\"userkey\", \"password\", \"mycompany\", \"quota.appengine.java\");\n\t\tassertTrue(quotaDetails.isDeployed());\n\t}\n\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Unit Test for {@link Manager#retrieveAppQuotaDetails(String, String, String, String).\n     * It creates a couple of application.\n     * Then it gets details of all quota information of any application deployed in Google App Engine.\n     * The number of applications expected is expected\n     * @throws Exception in case of failure\n     */\n    @Test\n    public void testRetrieveAppQuotaDetails() throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?part2&appid=e3747cc7ee17d\");\n            get.setHeader(\"Cookie\", \"ACSID=\" + LogonHelper.loginToGoogleAppEngine(\"user\", \"password\", \"https://accounts.google.com\"));\n            HttpResponse response = client.execute(get);\n            \n            assertTrue(response.getStatusLine().getStatusCode() == 200);\n            \n            Object object = new QuotaDetailsParser().parse(response.getEntity().getContent());\n            assertNotNull(object);\n            \n            String expectedAppId = \"\" + new Long(MathUtil.randomNum()).toString();\n            String application = ((QuotaDetails) object).getApplication().getName();\n            assertEquals(expectedAppId, application);\n        } finally {\n            client.getConnectionManager().shutdown();\n\t\t}\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final String googleUrl = \"https://account.google.com/services/admin/?app=\";\n\t\t\n\t@Test\n    void testRetrieveAppQuotaDetails() throws Exception {\n\t\tManager manager = new Manager();\n\t\tmanager.setGaeAppId(\"APPID1234\");\n\t\tQuotaDetails quotaDetails = manager.retrieveAppQuotaDetails(\"me\", \"test\", LogonHelper.getServiceAccountApplicationId(), \"Test application\");\n\t\tassertEquals(\"app id\", \"APPID1234\", quotaDetails.applicationId());\n\t\tassertEquals(\"version\", \"12345\", quotaDetails.version());\n\t\tassertEquals(\"user id\", \"test_user_id\", quotaDetails.userId());\n\t\t\n\t\t// Test with invalid credentials\n//\t\tmanager.setGaeAppId(\"APPID\");\n//\t\tmanager.setGaeCloudId(\"GCloudId\");\n//\t\tquotaDetails = manager.retrieveAppQuotaDetails(\"me\", \"\", \"\", \"Test application\");\n//\t\tassertNull(quotaDetails);\n\t}\n\t\n}",
            "finish_reason": "stop"
        }
    ],
    "id": "3141adf5-caa5-4a67-9ca4-d903132ba2e3",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @param source name of application requesting quota details\n     * @param application appspot application name\n     * @return quota details of application\n     * @throws Exception in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception {\n        String authCookie = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n            HttpResponse response = client.execute(get);\n            return new QuotaDetailsParser().parse(response.getEntity().getContent());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains one unit test case for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {",
    "time_taken": 43.50170540809631,
    "usage": {
        "prompt_tokens": 545
    }
},
{
    "choices": [
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n  @Test\n  void testLoginToGoogleAppElement() throws Exception {\n    logon(new LoginRequestBuilder().success(\"email1@yahoo.com\").user(\"me\"));\n    assertEquals(\"email1@yahoo.com\", getAuthToken(\"https://www.google.com/_ah/account/email\"));\n    assertEquals(\"me\", getAuthToken(\"https://www.google.com/_ah/account/email\"), \"Authentication failed for user'me'\");  \n\n    // Make sure LoginRequestBuilder doesn't require a user token\n    List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n    nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n    HttpPost post = new HttpPost(\"https://www.google.com/_ah/login\");\n    post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\n    try {\n      client.execute(post);\n    } catch (Exception ex) {\n      // We expect the POST to fail\n    }    \n  }\n\t\n  @Test\n  void testLoginToGoogleAppManager() throws Exception {\n    List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n    nvps.add(new BasicNameValuePair(\"accountType\", \"MANAGER\"));\n    HttpPost post = new HttpPost(\"https://www.google.com/_ah/login\");\n    post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\n    try {\n      client.execute(post);\n    } catch (Exception ex) {\n      // We expect the POST to fail\n    }    \n\n    // Make sure LoginRequestBuilder doesn't require a user token\n    nvps = new ArrayList<NameValuePair>();\n    nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n    nvps.add(new BasicNameValuePair(\"Email\", \"test@mail.com\"));\n    post = new HttpPost(\"https://www.google.com/_ah/login\");\n    post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\n    try {\n      client.execute(post);\n    } catch (Exception ex) {\n      // We expect the POST to fail\n    }\n  }\n    \n  /**\n   * A utility method for logging in to Google via HttpGet.\n   *\n   * @param post HTTP POST object\n   */\n  private static void logon(HttpPost post) throws Exception {\n    List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n    List<String> values = new ArrayList<String>();\n    for (String rv : getAuthTokenValues()) {\n      ValuesPair value = new ValuesPair();\n      values.add(rv);\n      ArrayList<String> pv = new ArrayList<String>();\n      pv.add(value.name);\n      pv.add(value.value);\n      List<String> r = new ArrayList<String>();\n      r.add(rv);\n      nvps.add(new BasicNameValuePair(pv.get(0), r.get(0)));\n    }\n    input(post, values);\n  }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\tpublic LogonHelperTest() {\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t/**\n\t* Tests {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}\n\t*/\n\t@Test\n\tvoid testLogin() throws Exception {\n\t\tString userid = new String(\"hdfssds@qqq\");\n\t\tString password = new String(\"12345\");\n\t\tString source = new String(\"apps.googleusercontent.com\");\n\t\t\n\t\tStringBuilder expected = new StringBuilder();\n\t\texpected.append(\"https://accounts.google.com/Accounts/ClientLogin?auth=\").\n\t\t\tappend(\"hdfssds\");\n\t\texpected.append(\"&Email=\").append(userid).\n\t\t\tappend(\"&Passwd=\").append(password);\n\t\texpected.append(\"#google\");\n\t\texpected.append(\"&gme=0&source=\").append(source);\n\t\texpected.append(\"&language=\");\n\t\texpected.append(\"en\");\n\n\t\tList<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t\tnvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n\t\tnvps.add(new BasicNameValuePair(\"Email\", userid));\n\t\tnvps.add(new BasicNameValuePair(\"Passwd\", password));\n\t\tnvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n\t\tnvps.add(new BasicNameValuePair(\"source\", source));\n\t\tHttpPost post = new HttpPost(\"https:{}\").body(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\t\t\n\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\tpost.getEntity().getContent(), \"utf-8\"))) {\n\t\tHttpResponse response = client.execute(post);\n\t\tHttpGet get = new HttpGet(\"https:{}/#google?auth=\" + getAuthToken(response.getEntity().getContent()));\n\t\tHttpResponse resp = client.execute(get);\n\t\tassertEquals(204, resp.getStatusLine().getStatusCode());\n\t\ttry (LineNumberReader line = new LineNumberReader(\n\t\t\t\tnew InputStreamReader(resp.getEntity().getContent(), \"utf-8\"))) {\n\t\texpected.append(line.readLine());\n\t\t}\n\t\tString actual = new String(LineNumberReader.readLine(post.getEntity().getContent(),\n\t\t\tresponse.getEntity().getContent().length() + 1));\n\t\tassertTrue(actual.equals(expected.toString()));\n\t\tassertTrue(\"Should be logged in\", response.getStatusLine().getStatusCode() == 200 &&\n\t\t\t\t\t\"responseCode : \" + resp.getStatusLine().getStatusCode() == 200);\n\t\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t/**\n\t * The login() method is tested.\n\t */\n\t@Test\n\tpublic void login() throws Exception {\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString acsid = \"\";\n        int timeout = 30000;\n\t\t\t\t\n\t\tLogonHelper.loginToGoogleAppEngine(userid, password, source, acsid, timeout);\n\t\t\n\t\t//Test the login for HttpClient with a redirect to http://google.com.\n\t\t{\n\t\t\tDefaultHttpClient httpClient = new DefaultHttpClient();\n\t\t\ttry {\n\t            HttpGet post = new HttpGet(\"https://appengine.google.com/google.golang.org/apps/sync\");\n\t            post.setHeader(new BasicNameValuePair(\"Cookie\", \"ACSID=ACSID1234;Referer=https://appengine.google.com/apps/sync\"));\n\t            HttpResponse resp = httpClient.execute(post);\n\t            assertEquals(200, resp.getStatusLine().getStatusCode());\n\t            String auth = getAuthToken(resp.getEntity().getContent());\n\t            post.abort();\n\t            assertTrue(auth.startsWith(\"HOSTED_OR_GOOGLE\")) ;\n\t\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\t * Test the client for all scenarios.\n\t\t\t\t\t */\t\n\t\t\t\t\tHttpGet get2 = new HttpGet(userinfoURL(\"acsid\", \"ACSID1234\"));\t\t\n\t\t\t\t\tget2.setHeader(HTTP.ACCEPT, \"TEXT/PLAIN\");\n                    HttpResponse resp2 = httpClient.execute(get2);\n                    assertEquals(200, resp2.getStatusLine().getStatusCode());\n                post = new HttpPost(\"https://apps.google.com/appengine/login\")\n//                 .setHeader(new BasicNameValuePair(\"Referer\", userinfoURL(\"user\", \"userid\", \"password\", \"source\", \"gsadm\")),\n                get2.getFirstHeader(\"Accept\"));\n                    post.setHeader(new BasicNameValuePair(\"Cookie\", \"ACSID1234;Referer=https://appengine.google.com/apps/sync;login-required\"), \"gosa-login-required\"); \n\t\t\t\t\tpost.addHeader(new BasicNameValuePair(\"loginField\", \"gosa\"));\n\t\t\t\t\tpost.setHeader(new BasicNameValuePair(\"User-Agent\", \"gosa-login-required\"), \"gosa-login-required\"); \n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t            HttpResponse resp3 = httpClient.execute(post);\n                assertEquals(401,resp3.getStatusLine().getStatusCode());\n                assertTrue(auth.startsWith(\"HOSTED_OR_GOOGLE\"));\n\t\t\t\t\t/*\n\t\t\t\t\t * Test the client for redirects to web/google or userid\n\t\t\t\t\t * userid is required for these cases\n\t\t\t\t\t */\n\t        post = new HttpPost(\"https://appengine.google.com/feeds/apps/docs.apps.googleusercontent.com/feed\");\n\t        post.setHeader(new BasicNameValuePair(\"Referer\", \"https://appengine.google.com/apps/sync\"), \"https://www.google.com.ar\");\n\t        post.setHeader(new BasicNameValuePair(\"User-Agent\", \"gosa-login-required\"), \"gosa-login-required\");\n\t        \n\t            HttpResponse resp4 = httpClient.execute(post);\n\t            assertEquals(202,resp4.getStatusLine().getStatusCode());\n\t            \n\t            \n\t            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t            LineNumberReader in = null;\n\t            try {\n    \t            in = new LineNumberReader(resp4.getEntity().getContent());\n\t            } catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n            }\n\t            int line = 0;\n\t            String lineContent = \"\";\n\t            while (in.readLine()!= null)",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t/**\n\t\t * Check that the loginToGoogleAppEngine method behaves properly.\n\t\t * @throws Exception if any error occurs on the mocked HTTP layer\n\t\t */\n\t\t@Test\n\t\tvoid checkLoginToGoogleAppEngine() throws Exception {\n\t\t\tlogonToGoogleAppEngine(\"bob\", \"dummyPass\", \"Google app engine\");\n\t\t\tassertEquals(\"Get username and password failed.\", \"bob\", getAuthentication(\"bob\"));\n\t\t\tassertEquals(\"Get application code failed.\", \"dummyPass\", getApplicationCode());\n\t\t\tassertNull(\"Get user name failed.\", getUsername());\n\t\t\tassertFalse(\"Login to Google App Engine failed.\", loginToGoogleAppEngine(\"bob\", \"dummyPass\"));\n\t\t\tassertEquals(\"Wrong user response.\", \"John Doe\", getUsername());\n\t\t\tassertEquals(\"Login to Google App Engine failed.\", \"Login error: Unexpected response code received.\", loginToGoogleAppEngine(\"bob\", \"wrongPassword\"));\n\t\t}\n\t\t\n\t\tprivate String getAuthentication(String user) {\n\t\t\tHttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n\t\t\tpost.setEntity(new UrlEncodedFormEntity(new NameValuePair[] {\n\t\t\t\t\tnew BasicNameValuePair(\"Email\", user),\n\t\t\t\t\tnew BasicNameValuePair(\"Passwd\", \"dummyPassword\"),\n\t\t\t\t\tnew BasicNameValuePair(\"Service\", \"ah\")}));\n\t\t\tHttpResponse response;\n\t\t\tresponse = client.execute(post);\n\t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n\t\t\t\tthrow new Exception(\"Error obtaining ACSID\");\n\t\t\t}\n\t\t\treturn response.getEntity().getContent()\n\t\t\t\t\t.split(\"\\\\n\")\n\t\t\t\t\t.subList(1, 19)\n\t\t\t\t\t.get(0);\n\t\t}\n\t\t\n\t\t/**\n\t\t * The returned response should include the account returned by Google appengine.\n\t\t * In fact it is the user name that we expect, but it may be null.\n\t\t * @throws Exception if any error occurs while querying Google appengine\n\t\t */\n\t\t@Test\n\t\tvoid checkLoginToGoogleAppEngineWithException() throws Exception {\n\t\t\tlogonToGoogleAppEngine(\"bob\", \"dummyPass\", \"Google\");\n\t\t\tassertTrue(\"Get invalid user name failed.\", getUsername()==null);\n\t\t\tassertNull(\"Exhausting user failed.\", getUsername(\"test\"));\n\t\t}\n\t\t\n\t\tprivate String getUsername() throws Exception {\n\t\t\tHttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n\t\t\tpost.setEntity(new UrlEncodedFormEntity(new NameValuePair[] {\n\t\t\t\t\tnew BasicNameValuePair(\"Email\", getUsername()),\n\t\t\t\t\tnew BasicNameValuePair(\"Passwd\", \"dummyPassword\"),\n\t\t\t\t\tnew BasicNameValuePair(\"Service\", \"ah\")}));\n\t\t\tHttpResponse response;\n\t\t\tresponse = client.execute(post);\n\t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n\t\t\t\tthrow new Exception(\"Error obtaining ACSID\");\n\t\t\t}\n\t\t\tString content = response.getEntity().getContent();\n\t\t\treturn content\n\t\t\t\t\t.split(\"\\\\n\")\n\t\t\t\t\t.subList(0, 3)\n\t\t\t\t\t.get(0);\n\t\t}\n\t\t\n\t\tprivate String getApplicationCode() throws Exception {\n\t\t\tHttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n\t\t\tpost.setEntity(new UrlEncodedFormEntity(new NameValuePair[] {\n\t\t\t\t\tnew BasicNameValuePair(\"Email\", getUsername()),\n\t\t\t\t\tnew BasicNameValuePair(\"Passwd\", \"dummyPassword\"),\n\t\t\t\t\tnew BasicNameValuePair(\"Service\", \"ah\")}));\n\t\t\tHttpResponse response;\n\t\t\tresponse = client.execute(post);\n\t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n\t\t\t\tthrow new Exception(\"Error obtaining ACSID\");\n\t\t\t}\n\t\t\tString content = response.getEntity().getContent();\n\t\t\tString[] temp = content.split(\"\\\\n\");\n\t\t\tassertEquals(\"Get application code",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t private String userid = \"myuser\";\n\t\t\t private String password = \"mypassword\";\n\t\t\t private String source = \"example_source\";\n\t\t\t private String acsid = \"yourACSID\";\n\t\t\t\n\t\t\t private DefaultHttpClient client = new DefaultHttpClient();\n\t\t \n\t\t\t /**\n\t\t\t * Creates an {@link InputStream} with the given name and contents.\n\t\t\t * @return an {@link InputStream} on which to read the contents.\n\t\t\t */\n\t\t\t public static InputStream createInputStream(String name,String contents) {\n\t\t\t\t InputStream in = LogonHelper.class.getClassLoader().getResourceAsStream(\"google/\" + name + \".txt\");\n\t\t\t\t return in;\n\t\t\t }\n\t\t\t \n\t\t\t /**\n\t\t\t * Login from google app engine.\n\t\t\t * @param source name of source app\n\t\t\t * @throws Exception if an error occured when using the given source\n\t\t\t */\n\t\t\t public void loginFromGoogleAppEngine(String source) throws Exception {\n\t\t\t\t \n\t\t\t\t // Construct POST request.\n\t\t\t\t final String queryString = \"q=app:\" + userid + \"/_ah/login?service=ah&passwd=\" + password + \"&source=\" + source + \"&acsid=\" + acsid;\n\t\t\t\t \n\t\t\t\t try { client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL)); } catch (Exception e) {\n\t\t\t\t\t client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL));\n\t\t\t\t }\n\t\t\t\t // Request 1.\n\t\t\t\t assertTrue(\"login failed\", client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL)));\n\t\t\t\t \n\t\t\t\t try {\n\t\t\t\t\t \n\t\t\t\t\t // Request 2.\n\t\t\t\t\t assertTrue(\"login failed\", client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL)));\n\t\t\t\t\t assertTrue(\"login succesful\", LogonHelper.checkResponse(client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL))));\n\t\t\t\t } catch (Exception e) {\n\t\t\t\t\t fail(\"Failed to login: \" + client.executeMethod(new HttpPost(LogonHelper.GOOGLE_APPENGINE_URL+queryString)));\n\t\t\t\t }\n\t\t\t\t \n\t\t\t\t try {\n\t\t\t\t\tBufferedReader reader = new BufferedReader(\n\t\t\t\t\t\t\tnew InputStreamReader(client.getEntity().getContent()));\n\t\t\t        LineNumberReader lnr = new LineNumberReader(reader);\n\t\t\t        while (true) {\n\t\t\t            String line = lnr.readLine();\n\t\t\t            if (line == null) {\n\t\t\t                break;\n\t\t\t            }\n\t\t\t            \n\t\t\t            String[] lineInfo = line.split(\"\\t\");\n\t\t\t            String[] contentInfo = lineInfo[0].split(\"\\t\");\n\t\t\t            \n\t\t\t            System.out.println();\n\t\t\t            System.out.println(lineInfo[0]);\n\t\t\t            System.out.println(contentInfo[0]);\n\t\t\t            System.out.println(lineInfo[1]);\n\t\t\t            System.out.println(contentInfo[1]);\n\t\t\t            \n\t\t\t            String[] token = {\n\t\t\t                contentInfo[1],\n\t\t\t                contentInfo[2],\n\t\t\t                contentInfo[3],\n\t\t\t                contentInfo[4],\n\t\t\t                contentInfo[5],\n\t\t\t                contentInfo[6]\n\t\t\t            };\n\t\t\t            for (String tokenStr : token) {\t\t\t\t\n\t\t\t                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n\t\t\t                nameValuePairs.add(new BasicNameValuePair(tokenStr, tokenStr));\n\t\t\t                nameValuePairs.add(new BasicNameValuePair(tokenStr, tokenStr));\n\t\t\t                \n\t\t\t                try {\n\t\t\t                    assertTrue(\n\t\t\t                    \t\"Expected \" + tokenStr + \" not found in \" + \n\t\t\t                    \tLogonHelper.LOGON_SERVICE + \". \" +\n\t\t\t                    \tLogonHelper.LOGON_SOURCE + \" found\",\n\t\t\t                    \t",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t/**\n\t * @throws Exception if an error occurs logging into Google App Engine\n\t */\n\t@Test\n    public void loginToGoogleAppEngineTest() throws Exception {\n\t\tLogonHelper.loginToGoogleAppEngine(\"user\", \"pass\", \"app\");\n\t}\n\t\n\t/**\n\t * It checks if the ACSID cookie is set.\n\t * It reads log on page, logs into Google App Engine and extracts the ACSID.\n\t * It checks if the ACSID is extracted to the logon page.\n\t * It verifies that the ACSID value is set for logon page and is as expected.\n\t * @throws Exception if an error occurs\n\t */\n\t@Test\n    public void logOnAppEngineTest() throws Exception {\n\t\t\tInputStream testIn;\n        LineNumberReader testInRL = new LineNumberReader(\n                new InputStreamReader(LogonHelper.class.getResourceAsStream(\"test.txt\")));\n        BufferedReader testRL = new BufferedReader(new InputStreamReader(\n                LogonHelper.class.getResourceAsStream(\"test.txt\")));\n        testIn = testRL;\n        LogonHelper.logonToGoogleAppEngine(\"user\", \"pass\", \"app\");      // Read log on page.\n        testOut = new StringBuilder();\n        testOut.append(\"<html>\\n<body>\\t<div class=\\\"tab\\\">\\t<header>\\t\");\n        testOut.append(\"\\t</header>\\t<ul class=\\\"subNav\\\">\\t\");\n        testOut.append(\"\\t\\t<li>\\t\"+LogonHelper.createLoginLink(\"user\", \"pass\")+ \"</li>\\n\");\n        testOut.append(LogonHelper.getLogin(\n                new DefaultHttpClient(), testIn,testRL));\n        LogonHelper.logOnClick(TestUtil.createPage(testOut.toString(),false));\n        testOut.append(\"\\n\" + LogonHelper.getLogin(\n                new DefaultHttpClient(), testIn,testRL));\n        testOut.append(\"\\n</ul>\\n</header>\");\n        String logOut = testRL.readLine();\n\t\ttestRL.close();\n\t\ttestRL = null;\n\t\ttestIn = null;\n\t\tLogonHelper.logonToGoogleAppEngine(\"user2\", \"pass2\", \"app\");  // Read log on page.\n\t\ttestOut = new StringBuilder();\n\t\ttestOut.append(\"<html>\\n<body>\\t<div class=\\\"tab\\\">\\t<header>\\t\");\n\t\ttestOut.append(\"\\t</header>\\t<ul class=\\\"subNav\\\">\\n\");\n        testOut.append(\"\\t\\t<li>\\t\" + LogonHelper.createLoginLink(\"user2\", \"pass2\") + \"</li>\\n\");\n        testOut.append(LogonHelper.getLogin(\n                new DefaultHttpClient(), testIn,testRL));\n        testOut.append(\"\\n</ul>\\n</header>\");\n        logOut = testRL.readLine();\n\t\ttestRL.close();\n\t\ttestRL = null;\n        BufferedReader testrl = new BufferedReader(new InputStreamReader(\n                LogonHelper.class.getResourceAsStream(\"testrl\")));\n        testrl.readLine();\n\t\ttestrl.close();\n        assertTrue(logOut.contains(\"&lt;a href=\\\".\\\"\\t\"));\n        assertTrue(logOut.contains(\"&lt;target=\\\"_blank\\\"\\t\"));\n        assertTrue(logOut.contains(\"Google-AppEngine logon link!\"));\n        String[] linkTxt = logOut.split(\"&lt;\\t\");\n\t\tfor (String link : linkTxt) {\n\t\t\tLink linkOut = Link.from(link);\n\t\t\tif (linkOut.href!= null) {\n\t\t\t\tassertTrue(link.contains(linkOut.href));\n\t\t\t}\n\t\t}\n\t\tlogOut = testrl.readLine();\n\t\ttestrl.close();\n\t\ttestrl =",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t//\n\t\t//  @Test\n\t\t//  public void testLoginToGoogleAppEngine(){\n\t\t//    // Test if the client connection is closed by default in setup\n\t\t//    assertFalse(client.isConnectionOpen());\n\t\t//    // Initialize a logger which is an instance of GoogleCloudLogger\n\t\t//    // log the message using default debug level\n\t\t//    GoogleCloudLogger log = new GoogleCloudLogger(LogonHelper.DEFAULT_LOGGER_NAME_);\n\t\t//    log.debug(\"Message from default GoogleCloudLogger\");\n\t\t//    List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t\t//    nvps.add(new BasicNameValuePair(\"ACSID\", \"myACSID\"));\n\t\t//    HttpPost post = new HttpPost(\"https://www.google.com/_ah/login\");\n\t\t//    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(nvps, HTTP.UTF_8);\n\t\t//    try {\n\t\t//      post.setEntity(entity);\n\t\t//      HttpResponse response = client.execute(post);\n\t\t//      // Check if the http response status is 200\n\t\t//      assertEquals(\n\t\t//    //      statusCode,\n\t\t//      (Integer)response.getEntity().getContent(),\n\t\t//                          \"Response does not contain gmail ACL in the Cookie\");\n\t\t//      assertTrue(client.isConnectionOpen());\n\t\t//    } finally {\n\t\t//      post.abort();\n\t\t//    }\n\t\t//  }\n\t}",
            "finish_reason": "stop"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n    /* Login to Google App Engine */\n    @Test\n\tpublic void testLoginToGoogleAppEngine() throws Exception {\n\t\tString login = LogonHelper.loginToGoogleAppEngine(\"credentials\", \"credential\", \"AppEngine\");\n\t\tassertEquals(\"Error retrieving ACSID\", 0, login.indexOf(LogonHelper.ACSID_HEADER));\n    }\n    \n    @Test\n\tpublic void testLoginToGoogleAppEngineWithInvalidCookieJar() throws Exception {\n        Cookie cookieSet = new Cookie(\"ACSID\", LogonHelper.ACSID_HEADER);\n\t\ttry {\n\t\t\tString login = LogonHelper.loginToGoogleAppEngine(\"passwort\", \"passwd\", \"appengine\");\n\t\t\tfail(\"Should not be able to use a cookie jar with a non-ASCII cookie name\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tassertEquals(\"Bad Cookie Name\", e.getMessage());\n\t\t}\n\t\tcookieSet.setValue(LogonHelper.ACSID);\n\t\ttry {\n\t\t\tString login = LogonHelper.loginToGoogleAppEngine(\"passwort\", \"passwd\", \"appengine\");\n\t\t\tfail(\"Should not be able to use a non-ASCII cookie name with a non-ASCII value\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tassertEquals(\"Bad Cookie Value\", e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\tString login = LogonHelper.loginToGoogleAppEngine(\"credentials\", \"passwort\", \"appengine\");\n\t\t\tfail(\"Should not be able to use a non-ASCII cookie name with a value greater than 256 characters\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tassertEquals(\"Bad Cookie Value\", e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\tString login = LogonHelper.loginToGoogleAppEngine(\"credentials\", \"passwort\", \"appengine\");\n\t\t\tfail(\"Should not be able to use a non-ASCII cookie name with a value less than 1 characters\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tassertEquals(\"Bad Cookie Value\", e.getMessage());\n\t\t}\n\t\t// Check that the cookie is stored in the jar and that it can be retrieved by an HTTP cookie. This test just tests whether a non-ASCII cookie name is stored and retrieved by an HTTP cookie.\n\t\tassertEquals(LogonHelper.ACSID, getCookieValue(cookieSet));\n\t\tassertEquals(LogonHelper.ACSID, getCookieValue(new Cookie(\"ACSID\")));\n\t\tassertEquals(LogonHelper.ACSID, getCookieValue(new Cookie(\"ACSID\", LogonHelper.ACSID_HEADER)));\n\t\t\n\t\tassertEquals(LogonHelper.ACSID_HEADER, getCookieHeaderValue(cookieSet));\n\t\tassertNull(getCookieHeaderValue(new Cookie(\"ACSID\")));\n\t\tassertNull(getCookieHeaderValue(new Cookie(\"ACSID\", LogonHelper.ACSID_HEADER)));\n\t\t\n\t\t// Try to add the new cookie value.\n\t\tString newCookie = LogonHelper.addCookie(cookieSet, \"newCookieValue\");\n\t\tassertEquals(\"Error adding CSID\", newCookie, getCookieValue(cookieSet));\n\t\t\n\t\t// Cookie name should become the string value of the ACSID.\n\t\tassertEquals(\"Error adding CSID\", LogonHelper.ACSID_HEADER, getCookieHeaderValue(cookieSet));\n\t\tassertEquals(LogonHelper.ACSID, getCookieHeaderValue(new Cookie(\"ACSID\", LogonHelper.ACSID_HEADER)));\n\t\t\n\t\t// Try to add the new ACSID value.\n\t\tnewCookie = LogonHelper.addCookie(cookieSet, newCookie);\n\t\tassertEquals(\"Error adding ACSID\", LogonHelper.ACSID_HEADER, getCookieHeaderValue(cookieSet));\n\t\tassertEquals(LogonHelper.ACSID, getCookieHeaderValue(new Cookie(\"ACSID",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n    /**\n    * Constructor for LogonHelperTest.\n     *\n     */\n    public LogonHelperTest() {\n    }\n\n    /**\n     * Unit test for loginToGoogleAppEngine.\n     */\n    @Test\n\t\t public void testLoginToGoogleAppEngine() {\n        final String username = \"test username\";\n        final String password = \"test password\";\n        HttpGet get = new HttpGet(\"https://www.google.com/oauth/token\");\n        get.addHeader(\"Authorization\", \"Basic \" + new String(\n                Base64.encodeBase64((String) get.getEntity().getContent())));\n        HttpResponse response = getWebServer().execute(get);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        assertFalse(response.getEntity() instanceof HttpPost);\n        assertTrue(response.getEntity() instanceof InputStream);\n        InputStream in = response.getEntity().getContent();\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n\n        String line;\n\n        while ((line = br.readLine())!= null) {\n            line = line.trim();\n        }\n\n        String resLine;\n        int i = 0;\n        System.arraycopy(\"\\r\", 0, line, 0, 4); //skip first line (line \"OAuth\")\n        String authToken = getAuthToken(line);\n        get.abort();\n        getWebServer().execute(get);\n        HttpResponse result = getWebServer().execute(get);\n        assertEquals(403, result.getStatusLine().getStatusCode());\n        // Check if Authentication code did not exist\n        assertNull(result.getEntity());\n\n        try {\n            response = getWebServer().execute(get);\n            assertTrue(response.getStatusLine().getStatusCode() == 403);\n        } catch (Exception e) {\n            assertEquals(\"Unable to login to Google\", e.getMessage());\n        }\n\n        try {\n            // Check if the correct page was returned\n            assertTrue(result.getStatusLine().getStatusCode() == 403);\n            // Check if the authentication header was set correctly\n            result = getWebServer().execute(get);\n            assertTrue(result.getStatusLine().getStatusCode() == 403);\n        } catch (Exception e) {\n            assertEquals(\"Unable to login to Google\", e.getMessage());\n        }\n\n        get.abort();\n\n        response = getWebServer().execute(get);\n        br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n        String[] lines = new String[5];\n\n        try {\n            response = getWebServer().execute(get);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        // We try to read the first 4 entries\n        assertTrue(response.getStatusLine().getStatusCode() == 200);\n        try {\n            reader = new LineNumberReader(new InputStreamReader(response.getEntity().getContent()));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        for (i = 0; i < 4; i++) {\n            line = reader.readLine();\n            assertNotNull(line);\n            lines[i] = line;\n        }\n\n        if (br!= null) {\n            for (i = 0; i < 5; i++) {\n                line = br.readLine();\n\n                // Check the last line for the last four entries\n                if (lines[i].equals(\"HTTP/1.1 200 OK\\r\\n\")){\n                    resLine = lines[i + 4];\n                }else{\n                throw new RuntimeException(\"Should contain only one token\");\n                   \n                }\n            }\n            assertNotNull(resLine);\n\n            String[] resData = resLine.split(\" \");\n            int count = 2;\n\n            // Check if response is encoded\n            BufferedReader r = new BufferedReader(new InputStreamReader(response.getEntity().getContent",
            "finish_reason": "length"
        }
    ],
    "id": "079280f7-b74d-4379-afea-6d186f3902dd",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {",
    "time_taken": 39.37608098983765,
    "usage": {
        "prompt_tokens": 1103
    }
}
]