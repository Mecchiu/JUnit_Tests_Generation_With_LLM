ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
8dc7b1ff-3c96-47df-abe8-1a5f30dc3b54,/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/util/LoggerFactory.java,38.66152882575989,stop,"// LoggerFactory.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;

/**
 * Factory f�r Log4J.
 *
 * @author Stefan Jockenh�vel
 * @see http://www.javaspecialists.eu/archive/Issue137.html
 * @see http://shemnon.com/speling/2006/12/dry-logs-there-are-better-ways.html
 *      --> comment
 */
public final class LoggerFactory {

    /**
     * Erzeugt einen Logger in der aufrufenden Klasse.
     *
     * @return Logger
     */
    public static Logger make() {
        // Throwable t = new Throwable();
        // StackTraceElement directCaller = t.getStackTrace()[1];
        // return Logger.getLogger(directCaller.getClassName());
        final Thread t = Thread.currentThread();
        final StackTraceElement directCaller = t.getStackTrace()[2];
        final String className = directCaller.getClassName();
        return Logger.getLogger(className);
    }
}
","// LoggerFactoryTest.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LoggerFactory}.
* It contains one unit test case for the {@link LoggerFactory#make()} method.
*/
class LoggerFactoryTest {","// LoggerFactoryTest.java
package de.paragon.explorer.util;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LoggerFactory}.
* It contains one unit test case for the {@link LoggerFactory#make()} method.
*/
class LoggerFactoryTest {
LoggerFactoryTest() {
	}

	/**
	* Test methods of {@link LoggerFactory}.
	* It contains one unit test case for each method used in {@link LoggerFactory}.
	*/
	@Test
	public void test() {
		// log4j.Logger logger = make();
		assertNotNull(LoggerFactory.make());
		// logger.debug();
		assertNotNull(LoggerFactory.make());
		// logger.info(""INFO"");
		assertNotNull(LoggerFactory.make());
		System.out.println(LoggerFactory.make());
		assertNotNull(LoggerFactory.make());
		Logger logger = LoggerFactory.make();
		assertNotNull(logger);
		logger.debug();
		assertNotNull(logger);
		logger.info(""INFO"");
		assertNotNull(logger);
		logger.warn(""WARN"");
		assertNotNull(logger);
		System.out.println(logger);
		assertNotNull(logger);
	}
}"
3a7a8c60-048b-46fb-b228-052b165e15af,/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/model/ExplorerModelBuilder.java,42.3333535194397,stop,"// ExplorerModelBuilder.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;

public final class ExplorerModelBuilder {

    /**
     * Kommentar: Diese Methode erzeugt ein neues ExplorerModel, eine neue
     * ExplorerFigure und verknuepft diese beiden.
     */
    public ExplorerModel createNewExplorerModelWithFigure() {
        ExplorerModel explModl;
        ExplorerFigure explFig;
        explModl = new ExplorerModel();
        explFig = this.getExplorerFigureBuilder().createNewExplorerFigure();
        this.connect(explModl, explFig);
        return explModl;
    }
}
","// ExplorerModelBuilderTest.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplorerModelBuilder}.
* It contains one unit test case for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.
*/
class ExplorerModelBuilderTest {","// ExplorerModelBuilderTest.java
package de.paragon.explorer.model;

import de.paragon.explorer.figure.ExplorerFigure;
import de.paragon.explorer.figure.ExplorerFigureBuilder;
import de.paragon.explorer.figure.ListBoxFigure;
import de.paragon.explorer.figure.TextBoxFigure;
import de.paragon.explorer.gui.ExplorerDrawingPanel;
import de.paragon.explorer.util.ExplorerManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplorerModelBuilder}.
* It contains one unit test case for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.
*/
class ExplorerModelBuilderTest {

	private ExplorerModelBuilder t = new ExplorerModelBuilder();
    @Test
    public void testCreateNewExplorerModelWithFigure() {
        final ExplorerFigure explFig = this.t.getExplorerFigureBuilder().createNewExplorerFigure();
        this.t.connect(explFig, false);
        this.t.buildModel(new ExplorerManager<>(explFig));
        
        assertNotNull(explFig);
        assertEquals(explFig.getExplorerFigure(), this.t.explorerFigure.getExplorerFigure());
    } 
	
    @Test
    public void testCreateExplorerCollectionOfAllExplorers() {
        final ExplorerManager<ExplorerModel<ExplorerFigure>> explMan = new ExplorerManager<>();
        this.t.buildModel(explMan);
        assertNotNull(explMan);
        assertFalse(explMan.getExplorerFigureByIndex(0).getExplorerFigure().getExplorerFigure().isVisible());
       
    }
    
    @Test
    public void buildModel() {
        final ExplorerManager<ExplorerModel<ExplorerFigure>> explMan = new ExplorerManager<>();
        assertTrue(explMan.getExplorerFigureByIndex(0).getExplorerFigure().getExplorerFigure().isVisible());
        
    } 
	
    @Test
    void connect(final ExplorerFigure explFig, final ExplorerFigure explOut) {
        this.t.connect(explFig, explOut);
        assertEquals(explFig.getExplorerFigure().getExplorerFigure(), explOut);
     }
}"
