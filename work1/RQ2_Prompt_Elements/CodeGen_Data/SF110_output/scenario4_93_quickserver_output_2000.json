[
{
    "choices": [
        {
            "text": "\n    protected SocketChannel socketChannel;\n    \n    public NonBlockingClientHandler_0Test() {\n    }\n\n    \n\n    protected void doClientHandler() throws Exception;\n\n    protected boolean closeIfSSLInboundDone() throws Exception;\n\n    protected boolean closeIfSSLOutboundDone() throws Exception;    \n\n    public void prepareClientHandlerForCloseAfterRead() throws Exception;\n\n    protected void setInitialHandshakeStatus() {\n    }\n\n    protected void setDataModeNonBlocking(DataMode dataMode) throws IOException {\n    }\n\n    protected void setInitialHandshakeStatus() {\n    }\n\n    protected void processGotDataInBuffers() throws AppException {\n    }\n\n    protected void processData() throws Exception {\n    }\n\n    protected void setSocketChannel(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }    \n    \n    \n    protected void setInputStream(InputStream in) throws IOException {\n        //do nothing\n    }\n\n    protected boolean checkReturnClientHandler() {\n        return true;\n    }\n    \n    protected void setClientWriteHandler(ClientWriteHandler clientWriteHandler) {\n    }\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        InputStream in = dataType.getInputStream();\n        OutputStream out = dataType.getOutputStream();\n        DataMode realDataMode = dataType.getClientDataMode(realData);\n\n        if(realDataMode == in == null || realDataMode == out == null) {\n            throw new IllegalStateException(\"Data mode can only be set when stream or channel is assigned\");\n        }\n        \n        if(!realDataType.isStream(realDataMode)) {\n            throw new IllegalStateException(\"Client data mode can only be set when stream or channel is assigned\");\n        }\n        \n        this.socketChannel = null;\n        socketChannel = clientWriteHandler.createClientChannel(dataType, in, out);\n    }\n\n    //v1.4.10\n\n    protected void set",
            "finish_reason": "length"
        },
        {
            "text": "public NonBlockingClientHandler_0Test(){\n\t\t\t\n\t\t}\n}\n\n//NonBlockingClientHandler_1Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "NonBlockingClientHandler_0Test(){}\n\n\t\tprotected void setUp(){}\n\n\t\ttry {\n\t\t\tClass.forName(\"javax.net.ssl.SSLContext\");\n\t\t}\n\n\t\t\tcatch(Throwable e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t}\n\n\t/**\n\t\t* Test method for {@link NonBlockingClientHandler#processRead()}.\n\t\t* This method is not implemented for the class {@link NonBlockingClientHandler},\n\t\t* because it is not available in the Java 1.4.7 compatibility.\n\t\t*/\n\t@Test\n\tpublic void testProcessRead(){\n\t\tassertFalse(\"Expected non-null value\", this.processRead() == false);\n\t}\n\n\t/**\n\t\t* Test method for {@link NonBlockingClientHandler#doRead()}.\n\t\t* This method is not implemented for the class {@link NonBlockingClientHandler},\n\t\t* because it is not available in the Java 1.4.8 compatibility.\n\t\t*/\n\t@Test\n\tpublic void testDoRead(){\n\t\tassertTrue(\"Expected not null value\", this.doRead()!= false);\n\t}\n\n\t/**\n\t\t* Test method for {@link NonBlockingClientHandler#processWrite()}.\n\t\t* This method is not implemented for the class {@link NonBlockingClientHandler},\n\t\t* because it is not available in the Java 1.4.7 compatibility.\n\t\t*/\n\t@Test\n\tpublic void testProcessWrite(){\n\t\tassertFalse(\"Expected not null value\", this.processWrite() == false);\n\t}\n\n\t/**\n\t\t* Test method for {@link NonBlockingClientHandler#doWrite()}.\n\t\t* This method is not implemented for the class {@link NonBlockingClientHandler},\n\t\t* because it is not available in the Java 1.4.8 compatibility.\n\t\t*/\n\t@Test\n\tpublic void testDoWrite(){\n\t\tassertTrue(\"Expected not null value\", this.doWrite()!= false);\n\t}\n\n\t/**\n\t\t* Test method for {",
            "finish_reason": "length"
        },
        {
            "text": "\n        static void assertValue(String message, ByteBuf bb, int length) {\n            if (assertionError == null) {\n                assertionError = message;\n                assertValue(message, new Buffer(bb));\n            } else {\n            \tassertionError(message, assertionError, bb, length);\n            }\n        }\n\n    private static void assertValue(String message, ByteBuffer bb, int length) {\n            if (assertionError == null) {\n                if (bb.length()!= length) {\n                    assertionError(message, bb.array(), length);\n                } else {\n                    byte[] bytes = new byte[length];\n                    bb.get(bytes);\n                    for (ByteBuffer b : ArraysSpliterator.copyArguments(bb, bytes).spliterator()) {\n//                    assertValue(test.getClass().getName(), bb, bb.contents().length());\n                    }\n                    assertionError(message, bb.array(), bb.capacity());\n                    byte[] bytesb = new byte[length];\n                    bb.array().get(bytesb);\n                    for (ByteBuffer b : ArraysSpliterator.copyArguments(bb, bytesb)) {\n//                    assertValue(test.getClass().getName(), bb.clone().contents().length());\n                    }\n                }\n            }\n    }\n    \n    private final List<ByteBuffer> outputData = new ArrayList<ByteBuffer>();\n    private final List<Buffer> outputBuffer = new ArrayList<Buffer>();\n    private byte[] inputData;\n    private String assertionError;\n\n    public NonBlockingClientHandler_0Test() {\n    }\n\n    protected String setUp(Configuration cc) //\n            throws Exception {\n        inputData = getInputData();\n        outputBuffer.clear();\n        outputData.clear();\n        return \"\";\n    }\n\n    public void tearDown() throws Exception {\n    }\n    \n    protected String getInputData() {\n        return \"\";\n    }",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void testWakeupSelectorAfterRegisterWrite() throws Exception {\n        NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);\n        Thread thread = new Thread(new NonBlockingClientHandler(1));\n        thread.start();\n        Thread.sleep(10000);\n        threads.add(thread);                        \n        doAfterRegisterForWrite();\n        Thread.sleep(10000);\n        assertFalse(thread.isAlive());\n        assertTrue(thread.isAlive());\n        doTasks();\n        assertTrue(!thread.isAlive());\n        //\n        NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);\n    }\n    \n    public static void doAfterRegisterForWrite() throws Exception {\n        final Thread[] threads = Thread.getAllStackTraces().keySet().toArray(new Thread[0]);\n        int writeCounter = 0;\n        for (Thread thread : threads) {\n            if (!thread.isInterrupted() && (thread.getName()).equals(\"write_thread\") && (!Thread.currentThread().isDaemon()) && (!thread.isDaemon())) {\n                writeCounter++;\n                doOnRegisterForWrite(writer);\n            }\n        }\n        for (Thread thread : threads) {\n            thread.interrupt();\n            synchronized (writes) {\n                if ((writeCounter > 1) && (!writes.isEmpty())) {\n     \t\t\t\t\n                    throw new ConnectionLostException(\"write_thread: After writing, this thread is already taken as a writer\");\n                }\n                writes.add(thread.getName());\n            }\n        }\n    }\n\n    private void doOnRegisterForWrite(Writer writer) throws Exception {\n        \n        for (int i = 0; i < 256; i++) {\n            \n            final int byteValue = i;\n            final int numThreads = 1;\n            new Thread(new Runnable() { public void run() {\n                try {\n                    ",
            "finish_reason": "length"
        },
        {
            "text": "\nprivate static void testNonBlockingClientHandler_0() throws Exception {\n\t\tint i = 0;\n\t\tint j = 0;           \n\n        // v1.4.1\n        Connection conn = connect0();\n        conn.pump(\"GET / HTTP/1.1\\rVersion: \\r\\n\\r\\n\", i, false);\n        Thread.sleep(100);\n\n        InputStream input = conn.getInputStream();\n\n        Object o = conn.getContent();\n\n        assertNotNull(o);\n        conn.close();\n\n        Thread.sleep(100);\n\n        assertNull(conn.getContent());\n        Thread.sleep(100);\n        assertNotNull(conn.getContent());\n\n        if (conn.getInputStream().read()<0) conn.close();\n\n        Thread.sleep(100);\n\n        o = conn.getContent();\n\n        assertNull(o);\n        conn.close();\n\n        Thread.sleep(100);\n\n        conn = null;\n\n        i = 0;\n        j = 0;\n        testNonBlockingClientHandler_0();\n}\n\npublic static void main(String args[]) throws Exception {\n    NonBlockingClientHandler_0Test test = new NonBlockingClientHandler_0Test();\n    test.testNonBlockingClientHandler();\n}\n}\n\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    public NonBlockingClientHandler_0Test() {\n\t}\n\n    public void setup() {\n\t}\n\n// Test 1 (write)\n\n    public void test1_1_write() throws IOException, InterruptedException {\n\t// create data buffers\n\tfinal ByteBuffer buffer1 = new FastBuffer();\n\tfinal ByteBuffer dataBuffer = new NativeByteBuffer(10*1024*1024);\n\tfinal ByteBuffer sendBuffer = new FastBuffer();\n\n\t// do byteBuffer input and send data 1\n\twriteInputStreamData(sendBuffer, dataBuffer);\n\n\t// test 2.1, when buffer has enough available space left, the event should be read in buffer1\n\tfinal BufferedReader reader = readInputStreamNoBlocking();\n\twaitTillFullyHasData(dataBuffer, dataBuffer.limit());\n\tassertEquals(\"write2: read\", dataBuffer, reader.read());\n\n\t// test 2, use the write method to write with buffer in writeInputStreamNoBlocking.\n\tfinal BufferedOutputStream outputStream2 = new BufferedOutputStream(sendBuffer);\n\twriteInputStreamData(sendBuffer, dataBuffer);\n\t// test 2, read data using no blocking\n\treader.read();\n\tassertFalse(\"write2: read\", (dataBuffer == null) || (dataBuffer == sendBuffer));\n\tassertEquals(\"write2: read\", dataBuffer, reader.read());\n\tassertFalse(\"write2: read\", (dataBuffer == null) || (dataBuffer == sendBuffer));\n\t// test 2, reenable event\n\treader.read();\n\tassertTrue(\"write2: reenable event\", reader.canRead());\n\treader.read();\n\tassertTrue(\"write2: reenable event\", reader.canRead());\n\treader.read();\n\tassertTrue(\"write2: reenable event\", reader.canRead());\n\treader.read();\n\treader.read();\n\treader.close();\n\t// test 2, send data to read using the write method\n\twriteInputStreamData(sendBuffer, dataBuffer);\n\n\t//",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprotected Client createClient(SocketChannel socketChannel) throws IOException, ConnectionClosedException\n\t{\n\t\treturn new Client(socketChannel);\n\t}\n\n\tprotected Client createClient(SocketChannel socketChannel, HostAndPort hostAndPort, URL url) throws IOException, ConnectionClosedException\n\t{\n\t\treturn new Client(socketChannel, hostAndPort, url);\n\t}\n\n\n\t/**\n\t * Simple test class.\n\t * Creates a BasicClientHandler with SSL enabled and waits for connections to establish.\n\t * @pre\tsslConfigured, clientSSLOnNonBlocking, getWakeupSelectorAfterRegisterWrite() is true\n\t * @see BasicClientHandler#setSSLOnNonBlocking()\n\t * @see BasicClientHandler#setSSLOnNonBlocking(boolean)\n\t * @since 1.4.5\n\t */\n\tprivate class ClientHandler extends BasicClientHandler {\n\n\t\tprotected ClientHandler(SocketChannel listenChannel, HostAndPort hostAndPort) throws IOException\t{\n\t\t\tsuper(listenChannel, hostAndPort, false, false);\n\t\t}\n\n\t\tprotected ClientHandler(SocketChannel listenChannel,\n\t\t        HostAndPort hostAndPort,\n\t\t        boolean useSSL, boolean getDataModeInNonBlocking) throws IOException, ClassNotFoundException, ConnectionClosedException\n\t\t{\n\t\t\tsuper(listenChannel, hostAndPort, useSSL, getDataModeInNonBlocking);\n\t\t}\n\n\t\tprotected ClientHandler(SocketChannel listenChannel,\n\t\t        HostAndPort hostAndPort,\n\t\t        boolean useSSL, boolean getDataModeInNonBlocking,\n\t\t        boolean initialHandshakeStatus,\n\t\t        boolean willReturn) throws IOException, ClassNotFoundException, ConnectionClosedException\n\t\t{\n\t\t\tsuper(listenChannel, hostAndPort, useSSL, getDataModeInNonBlocking, initialHandshakeStatus, willReturn);\n\t\t}\n\n\t\tprotected ClientHandler(SocketChannel listenChannel,\n\t\t        HostAndPort hostAndPort,\n\t\t        boolean ssl, boolean isCipher",
            "finish_reason": "length"
        },
        {
            "text": "private static class S1 implements Runnable {\n\t\t\tprivate static void testMethod(int arg0, int arg1, int arg2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Create a test file for a nonblocking client handshake attempt. There is no need to call\n\t\t* {@link ClientServerFactory#createServer} or {@link ClientServerFactory#createSelector} to produce a\n\t\t* server to be generated to run the test.\n\t\t*/\n\t\tstatic public void testMethod() {\n\t\t\tNonBlockingClientHandler.clear();\n\t\t\ttry {\n\t\t\t\t/*\n\t\t\t\tint arg1 = Integer.parseInt(System.getProperty(\"arg1\", \"10\"));\n\t\t\t\tint arg2 = Integer.parseInt(System.getProperty(\"arg2\", \"20\"));\n\t\t\t\tint arg3 = Integer.parseInt(System.getProperty(\"arg3\", \"30\"));\n\t\t\t\tint arg4 = Integer.parseInt(System.getProperty(\"arg4\", \"40\"));\n\t\t\t\t*/\n\t\t\t\tServer server = null;\n\t\t\t\tSSLSocketFactory socketFactory = SslSocketFactory.createFactory();\n\t\n\t\t\t\tbyte[] arr1 = null;\n\n\t\t\t\tNonBlockingClientHandler handler1 = new NonBlockingClientHandler(100);\n\t\t\t\tNonBlockingClientHandler handler2 = new NonBlockingClientHandler();\n\t\t\t\tNonBlockingClientHandler handler3 = new NonBlockingClientHandler(100);\n\t\t\t\thandler1.setSocketFactory(socketFactory);\n\t\t\t\thandler2.setSocketFactory(socketFactory);\n\t\t\t\thandler3.setSocketFactory(socketFactory);\n\t\n\t\t\t\tserver = (Server)new Thread\n\t\t\t\t(\n\t\t\t\t\thandler2,\t\t\t// Thread class\n\t\t\t\t\t\"Simple server\",\t\t// Thread name\n\t\t\t\t\t1024,\t\t\t// Thread priority\n\t\t\t\t\t300,\t\t\t// Thread stack size\n\t\t\t\t\tnew S1()\t\t// Thread to run in\n\t\t\t\t).start();\n\n\t\t\t\tserver = (Server)new Thread\n\t\t\t\t(\n\t\t\t\t\thandler1,\t\t\t// Thread class\n\t\t\t\t\t\"Simple server 2\",\t\t// Thread name\n\t\t\t\t\t1024,\t\t\t// Thread priority\n\t\t\t\t\t300",
            "finish_reason": "length"
        },
        {
            "text": "//---------------- CONSTRUCTORS ----------------//\n    private  NonBlockingClientHandler_0Test(ClientThread clientThread) {\n    }\n    \n\t//----------------- PROPERTIES ------------------//\n\n    //------------------ METHODS ----------------//\n    public void threadAccessCount(int newValue) {\n        threadAccessCount = newValue;\n    }\n\n    public int threadAccessCount() {\n        return threadAccessCount;\n    }\n\n    public BasicTcpServer newClientThread(int instanceCount) {\n        ClientThread clientThread = new ClientThread(instanceCount);\n        clientThread.setProtocol(ClientProtocol.class);\n        return clientThread;\n    }\n\n    public boolean willReturn() {\n        return willReturn;\n    }\n\n    public boolean isWakeupSelectorAfterRegisterWrite() {\n        return wakeupSelectorAfterRegisterWrite;\n    }\n\n    public boolean getInitialHandshakeStatus() {\n        return initialHandshakeStatus;\n    }\n\n    public boolean willReturnClientHandler() {\n        return willReturnClientHandler;\n    }\n\n    public void threadAccessCount(int newValue, int newValue2) {\n        threadAccessCount = newValue;\n        threadAccessCount = newValue2;\n    }\n\n    public int threadAccessCount() {\n        return threadAccessCount;\n    }\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "4cfa2c67-3781-410c-b3a6-f4f2ac86ee5b",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_0Test.java",
    "original_code": "// NonBlockingClientHandler.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite();\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead();\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count);\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount();\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n    }\n\n    public NonBlockingClientHandler() {\n    }\n\n    public void clean();\n\n    protected void finalize() throws Throwable;\n\n    public void handleClient(TheClient theClient) throws Exception;\n\n    protected void setInputStream(InputStream in) throws IOException;\n\n    public BufferedReader getBufferedReader();\n\n    public void closeConnection();\n\n    private void doPostCloseActivity() throws IOException;\n\n    public boolean closeIfSSLOutboundDone();\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten();\n\n    public void run();\n\n    protected boolean checkReturnClientHandler();\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception;\n\n    private boolean doRead() throws Exception;\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException;\n\n    private boolean doWrite() throws IOException;\n\n    protected void returnThread();\n\n    protected void returnClientHandler();\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException;\n\n    protected byte[] readInputStream() throws IOException;\n\n    public void updateInputOutputStreams() throws IOException;\n\n    public boolean getBlockingMode();\n\n    public void setSocketChannel(SocketChannel socketChannel);\n\n    public SocketChannel getSocketChannel();\n\n    public void setSelectionKey(SelectionKey selectionKey);\n\n    public SelectionKey getSelectionKey();\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException;\n\n    public void registerForRead() throws IOException, ClosedChannelException;\n\n    public void registerForWrite() throws IOException, ClosedChannelException;\n\n    public void registerWrite() throws IOException;\n\n    protected void setClientWriteHandler(ClientWriteHandler handler);\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount();\n\n    private void doHandshake() throws Exception;\n\n    private void doTasks();\n\n    private void finishInitialHandshake() throws IOException;\n\n    public boolean getInitialHandshakeStatus();\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException;\n}\n",
    "test_prompt": "// NonBlockingClientHandler_0Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.\n*/\nclass NonBlockingClientHandler_0Test {",
    "time_taken": 22.076432466506958,
    "usage": {
        "prompt_tokens": 1583
    }
},
{
    "choices": [
        {
            "text": "\n    static class ClientWriteHandler extends SelectorHandler {\n\t\tpublic int totalBytesWritten;\n\t\tprivate ClientWriteHandler[] readyHandlers;\n\n\t\tpublic ClientWriteHandler(ClientWriteHandler[] readyHandlers, int totalBytesCount) {\n\t\t\tsuper(null);\n\t\t\tthis.readyHandlers = readyHandlers;\n\t\t\tthis.totalBytesWritten = totalBytesCount;\n\t\t}\n\n\t\tpublic ClientWriteHandler(ClientWriteHandler[] readyHandlers) {\n\t\t\tsuper(null);\n\t\t\tthis.readyHandlers = readyHandlers;\n\t\t\tthis.totalBytesWritten = 0;\n\t\t}\n\t}\n\n    @Test\n    public void testClientReadByteBuffer() throws Exception {\n\t    NonBlockingClientHandler_1Test test = new NonBlockingClientHandler_1Test();\n\n\t\tThread w = new Thread(() -> {\n\t\t\ttest.doHandshake();\n\t\t});\n\t\tThread ready = new Thread(() -> test.doSelectRead());\n\t\tready.start();\n\t\t//awaitReady();\n\t\t//awaitConnection();\n\t\tsynchronized(test) {\n\t\t\ttest.doSelectRead();\n\t\t\twhile(test.threadAccessCount>1){\n\t\t\t\ttest.wait();\n\t\t\t}\n\t\t\t//processFinished(test);\n\t\t\ttest.doWakeupSelectorAfterRegisterRead();\n\t\t\ttest.doSelectRead();\n\t\t\twhile(!ready.isAlive()){\n\t\t\t\ttry { test.wait(); } catch (Exception e) {}\n\t\t\t}\n\t\t}\n        try (ClientConnectionManager connMan=\"cl\":createConnectionManager(10)) {\n            ClientConnection conn = connMan.connectTo(\"127.0.0.1:10\");\n            try (ClientChannelInboundInputStream p1 = null, p2 = conn.createChannelInboundInputStream()) {\n                p1.readByteBuffer();\n                int count = 0;\n                try (ByteBuffer b = conn.getClientInBoundInputStream()) {\n                    assertNotNull(b);\n                    assertEquals(-1, b.limit());\n                    int i2 = p",
            "finish_reason": "length"
        },
        {
            "text": "private static final String DUMMY = \"dummy\";\n\t\t\tprivate final String url = \"udp://127.0.0.1:8081\";\n\t\t\tprivate final String userName = \"\";\n\t\t\tprivate final String password = \"\";\n\t\t\tprivate final String certfile = \"mycertfile\";\n\t\t\tprivate final boolean debug;\n\n\t\tpublic NonBlockingClientHandler_1Test(String testCase, String timeout, boolean debug) {\n\t\t\tthis.debug = debug;\n\t\t\tthis.testCase = testCase;\n\t\t\tthis.timeout = timeout;\n\t\t\t//System.out.println(testCase);\n\t\t\t//System.out.println(this.timeout);\n\t\t}\n\n\t\t@Test\n\t\tpublic void test() throws Exception {\n\t\t\tNonBlockingClientHandler handler = new NonBlockingClientHandler();\n\t\t\thandler.setSocketTimeout(timeout);\n\n\t\t\t/*\n\t\t\tfor(TestCase tc = 0; tc < testCase.length(); tc++) {\n\t\t\t\tString testCase = testCase.toLowerCase();\n\t\t\t\tif (testCase.endsWith(\"e\")) {\n\t\t\t\t\tsetBlockingMode(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\n\t\t\tif (debug) {\n\t\t\t\tSystem.out.println(\"\\nStarted test of NonBlockingClientHandler_1Test\\n\\n\");\n\t\t\t}\n\t\t\tThread testThread = new Thread(new NonBlockingClientHandlerTestThread(handler));\n\t\t\ttestThread.start();\n\n\t\t\tNonBlockingClientHandler_1TestResult result = new NonBlockingClientHandler_1TestResult();\n\t\t\twhile (true) {\n\t\t\t\tSocketChannel clientChannel = handler.openChannel();\n    \t\t\tif (debug) {\n    \t\t\t\tSystem.out.println(clientChannel.toString() + \", \" + clientChannel.isOpen());\n    \t\t\t}\n    \t\t\ttry {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (clientChannel.isOpen()) {\n\t\t\t\t\t\t\t\tInputStream is = clientChannel.getInputStream();\ncancelConnection:\n\t\t\t\t\t\t\t\tif (debug) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"is.available() = \" + is.available());\n",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tpublic void returnThread() throws Exception {\n\t\tNonBlockingClientHandler.setClientWriteHandler(null);\n\t\t\n\t\tClientReadHandler rh = new ClientReadHandler();\n\t\tClientSocketChannelBase clientSockChanBase = ClientSocketChannelBase.create(new NonBlockingClientHandler(rh).clientSocketChannel); \n\t\t\n\t\tClientWriteHandler rh2 = new NonBlockingClientHandler(rh).clientWriteHandler;\n\t\tClientSocketChannelBase clientSockChanBase2 = ClientSocketChannelBase.create(rh2);\n\t\t\n\t\tNonBlockingClientHandler rh3 = new NonBlockingClientHandler(null,rh, false, null, true);\n\n\t\t\n\t\t\n\t\t\n\t}\n\n\t@Test\n\tpublic void processGotDataInBuffers() throws AppException, IOException, ClassNotFoundException, NullPointerException, ClosedChannelException {\n\t\tNonBlockingClientHandler.setClientWriteHandler(new ReadHandler());\n\t\tNonBlockingClientHandler.setClientReadHandler(new ClientWriteHandler());\n\n\t\tNonBlockingClientHandler.setInitialHandshakeStatus(true);\n\n\t\t\n\t\tbyte[] src = { 1, 2, 3, 4, 7, 8, 9 };\n\t\tNonBlockingClientHandler.setInputStream(new ByteArrayInputStream(src));\n\t\tNonBlockingClientHandler.setSocketChannels(NonBlockingClientHandler.create(null), NonBlockingClientHandler.create(null));\n\t\tNonBlockingClientHandler.setBlockingMode(true);\n\t\t\t\n\t\t\n\t\t\t\n\t}\n\n\t@Test\n\tpublic void processHandshake() throws Exception {\n\t\tClientWriteHandler rh = new ClientWriteHandler();\n\t\tClientReadHandler rh2 = new ClientWriteHandler();\n\t\tClientSocketChannelBase clientSockChanBase = ClientSocketChannelBase.create(rh).clientSocketChannel;\n\t\tClientSocketChannelBase clientSockChanBase2 = ClientSocketChannelBase.create(rh2).clientSocketChannel;\n\n\t\tNonBlockingClientHandler.setClientWriteHandler(rh);\n\t\tNonBlockingClientHandler.setClientRead",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tpublic void execute() throws Exception {\n        \n\t\tNonBlockingClientHandler handler = new NonBlockingClientHandler();\n\t\tTheClient theClient = new TheClient(theClientHandler, handler, 10, 10, 500);\n\t\ttheClient.setSocket(new Socket(127,0));\n\t\ttheClient.setTimeout(1000);\n\t\ttheClient.connect();\n\t\twaitTillFullyWritten();\n\t\ttheClient.setWakeupSelectorAfterRegisterRead();\n\t\ttheClient.run();\n\t\t\n\n//       theClient = handler.getSelectionKey().channel();\n\t}\n\t\n    private SSLSocketChannel theClientHandler;\n\n    private SocketChannel theSelectionKey;\n    \n    private SocketChannel theSocket;\n\n    private Object waitTillFullyWritten = new Object();\n\n    private void waitTillFullyWritten() throws Exception {\n        synchronized (waitTillFullyWritten) {\n            while (waitTillFullyWritten.get() == false && theSelectionKey.isValid() == false)\n                waitTillFullyWritten.wait();\n        }\n    }\n\n    void doHandshake() throws Exception {\n        theClient.doHandshake();\n    }\n\n    void doTasks() throws Exception {\n    \ttheClient.doTasks();\n        theSelChannelThread.join();\n        theSelectionKey.ready();\n        theClientHandler.closeAfterRunning();\n    }\n\n\tprivate void closeAfterRunning() throws Exception {\n\t\ttheClientHandler.socketChannel = null;\n\t\ttheClientHandler.setClientWriteHandler(null);\n\t\twaitTillFullyWritten.notify();\n\t}\n\n    private SelectionKey theSelectionKey;\n \t\n    private SelectionKey theSelChannelThread;\n\n    private ThreadChannelClientHandler theClientHandler;\n\n    private ServerChannel theServerChannel;\n\n    private SocketChannel theSocket;\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "//\n    \n    //v1.4.3\n    //v1.4.4\n    //NOTE the 2.2+ versions don't include registerForRead\n    //v1.4.5\n    //NOTE we only need one instance of the class and one set\n    //of selectors for a single thread\n    //NOTE at the very least there need to be a blocking socket.\n    //NOTE we only need one class as well as the method.\n    //NOTE one thread per class\n    //NOTE one threads per each class\n    //NOTE one thread in the same class\n    //NOTE one write thread.\n    //NOTE one read thread.\n     \n    \n    \n    //protected void doBeforeProcessRead() throws Exception;\n    protected void run() throws Exception;\n     //NOTE this class and its selector is only run once\n  \n    \n    //private class A\n    private class A\n    {\n\t\t//NOTE that readBuffer does not work for this purpose\n\t    private ClientWriteHandler clientWriteHandler = ClientWriteHandler.get();\n\t\t\n\t\t@SuppressWarnings(\"unused\")\n\t    private ClientReadHandler clientReadHandler = ClientReadHandler.get();\n\t\t\n\t\tpublic void doAfterWrite() throws Exception {\n\t\t\tclientWriteHandler.wakeup();\n\t\t}\n\t}\n    //END\n    //\n    \n    @Test\n    public void test() throws Exception {\n    \t//NOTE the v1.4.3 version is only supported for a single selector.\n    \ttry {\n    \t\tThreadClient client = (ThreadClient)ThreadClient.create(false);\n\n    \t\tNonBlockingClientHandler nonBlockingClientHandler =\n    \t\t\t\t(NonBlockingClientHandler) ThreadClient.create(false);\n    \t\t\n    \t\tassertNotNull(nonBlockingClientHandler);\n\n    \t\trun();\n    \t}\n    \tcatch (Exception e)\n    \t{\n    \t\te.printStackTrace();\n    \t\tfail(\"test fail\");\n    \t}\n    \tfinally {\n    \t\tcloseClient();\n    \t\tclose",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void testGetWakeupSelectorAfterRegisterRead() throws Exception {\n        new NonBlockingClientHandler().getWakeupSelectorAfterRegisterRead();\n    }\n\n\n    @Test\n    public void testGetWakeupSelectorAfterRegisterForRead() throws Exception {\n        new NonBlockingClientHandler().getWakeupSelectorAfterRegisterForRead();\n    }\n\n    /**\n     * Test constructor.\n     * @exception Exception in case of error\n     */\n    @Test\n    public void testConstructor() throws Exception {\n        new NonBlockingClientHandler();\n        byte[] data = new byte[100];\n        ClientWriteHandler handler = new ClientWriteHandler(0, data);\n        ClientChannel channel = new ClientChannel(0, handler, 0);\n\n\t\tNonBlockingClientHandler.NonBlockingStreamingClientHandler_1Test.processGotDataInBuffers(channel);\n\t\tNonBlockingClientHandler.NonBlockingStreamingClientHandler_1Test.doHandshake();\n        NonBlockingClientHandler.NonBlockingStreamingClientHandler_1Test.processGotDataInBuffers(channel);\n    }\n\n\n    /**\n     * Test method for {@link NonBlockingClientHandler#getReadQueueSizes()}\n     * @throws IOException\n     */\n    @Test\n    public void testGetReadQueueSizes() throws IOException {\n        assertQueueSize(NonBlockingClientHandler.NonBlockingStreamingClientHandler_1Test.getReadQueueSize(), 100);\n    }\n\n\n    /**\n     * Test method for {@link NonBlockingClientHandler#getWriteQueueSizes()}\n     * @throws IOException\n     */\n    @Test\n    public void testGetWriteQueueSizes() throws IOException {\n        assertQueueSize(NonBlockingClientHandler.NonBlockingStreamingClientHandler_1Test.getWriteQueueSize(), 100);\n    }\n\n\n    /**\n     * Test method for {@link NonBlockingClientHandler#getMaxThreadAccessCount",
            "finish_reason": "length"
        },
        {
            "text": "public static void main(String[] args) throws Exception\n    {\n        System.setProperty(\"java.net.preferIPv4Association\", \"true\");\n\n//            byte[] buffer = new byte[2048];\n\n//\t    int nBytes;\n//\n//\t    for (int i=0; i < buffer.length; i++)\n//\t    {\n//\t        buffer[i] = (byte)127;\n//\t    }\n\n//\t    FileInputStream fis = new FileInputStream(new File(\"src/test/resources/byte.bin\"));\n//\t    FileInputStream fis = new FileInputStream(new File(\"src/test/resources/byte_0F.bin\"));\n//\t    fis.read(buffer, 0, buffer.length);\n//\t    fis.close();\n//\n//\t    int nBytes = buffer[0] & 0xff;\n//\t    assertTrue(\"invalid data in byte\", nBytes > 0);\n//\t    byte[] buffer_0F = new byte[nBytes -4];\n//\t    fis = new FileInputStream(new File(\"src/test/resources/byte_0F.bin\"));\n//\t    fis.read(buffer_0F, 0, buffer_0F.length);\n//\t    fis.close();\n\n    }\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "private int id;\n\n\t\t/**\n\t\t * Creates a new object.\n\t\t */\n\t\tpublic NonBlockingClientHandler_1Test() {\n\t\t}\n\n\t\t/**\n\t\t * Creates a new object.\n\t\t *\n\t\t * @since 1.4.4\n\t\t */\n\t\tpublic NonBlockingClientHandler_1Test(int id) {\n\t\t\tthis.id=id;\n\t\t}\n\n\t\t/**\n\t\t * Creates a new object.\n\t\t *\n\t\t * @since 1.4.7\n\t\t */\n\t\tpublic NonBlockingClientHandler_1Test() {\n\t\t\tthis(null);\n\t\t}\n\n\t\t/**\n\t\t * Creates a new object.\n\t\t *\n\t\t * @param id String id\n\t\t *\n\t\t * @since 1.4.7\n\t\t */\n\t\tpublic NonBlockingClientHandler_1Test(String id) {\n\t\t\tthis.id = id == null? null : Integer.parseInt(id);\n\t\t}\n\n\t\t/**\n\t\t * Gets {@link #id}, {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} status.\n\t\t * @since 1.4.4\n\t\t */\n\t\tpublic int getWakeupSelectorAfterRegisterRead() {\n\t\t\treturn id==null?0:id.equals(int.class.getName())?0:id;\n\t\t}\n\n\t\t/**\n\t\t * Gets {@link #id}, {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} status.\n\t\t *\n\t\t * @return status\n\t\t *\n\t\t * @since 1.4.4\n\t\t */\n\t\tpublic int getWakeupSelectorAfterRegisterWrite() {\n\t\t\treturn id==null?0:id.equals(int.class.getName())?0:id;\n\t\t}\n\n\t\t/**\n\t\t* Waits for the connection to be closed.\n\t\t* This method gets the value of {@link #getWakeupSelectorAfterRegisterRead()} status.\n\t\t* It waits for all the {@link",
            "finish_reason": "length"
        },
        {
            "text": "\n    private final int instanceCount = 100;\n    \n    public int getThreadAccessCount() {\n\t\treturn threadAccessCount;\n    }\n\n    //public static void main(\n    //\t\tString[] args)\n    //\t\tthrows IOException, InterruptedException, ClassNotFoundException, ChannelInUseException, IOException {\n    //\t\t// TODO Auto-generated method stub\n    //\t\tSystem.out.println(Thread.currentThread().getName()+\":\");\n    //\n    //\t\tNonBlockingClientHandler instance = new NonBlockingClientHandler_1Test();\n    //\t\tinstance.init();\n    //\t\tinstance.start();\n    //\n    //\t}\n}\n\n\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    boolean getWakeupSelectorAfterRegisterWrite(SSLEngine sslEngine);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite.\n     * @return true if wakeupSelectorAfterRegisterWrite is set, false if not set\n     */\n    public boolean getWakeupSelectorAfterRegisterWrite();\n\n     Boolean getInitialHandshakeStatus(SSLEngine sslEngine);\n        \n\t/**\n\t * Returns initialHandshakeStatus.\n\t * @return true if initialHandshakeStatus is set, false if not set\n\t */\n\tpublic Boolean getInitialHandshakeStatus();\n\t\n\t/**\n\t * Returns false if initialize is not complete.\n\t * @return value\n\t */\n\tpublic boolean getInitialHandshakeStatus();\n\n\tpublic String getClassName();\n\n\tpublic String getMethodName();\n\n\tpublic Client read();\n\n\tpublic Client write();\n\n\tpublic byte[] readInputStream();\n\n\tpublic void write();\n\n\tpublic ByteBuffer encrypt(Client client, ByteBuffer src, ByteBuffer target, ByteBuffer options) throws IOException;\n\n\tpublic void finishInitialHandshake(SSLEngine engine, ByteBuffer src, ByteBuffer target, ByteBuffer options, boolean sslClose) throws Exception;\n\n\tpublic void handleInput(SSLEngine engine, ByteBuffer src, ByteBuffer target, ByteBuffer options, boolean sslClose) throws Exception;\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "74b70358-acef-490d-8ab0-5c794707c9be",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_1Test.java",
    "original_code": "// NonBlockingClientHandler.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite();\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead();\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count);\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount();\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n    }\n\n    public NonBlockingClientHandler() {\n    }\n\n    public void clean();\n\n    protected void finalize() throws Throwable;\n\n    public void handleClient(TheClient theClient) throws Exception;\n\n    protected void setInputStream(InputStream in) throws IOException;\n\n    public BufferedReader getBufferedReader();\n\n    public void closeConnection();\n\n    private void doPostCloseActivity() throws IOException;\n\n    public boolean closeIfSSLOutboundDone();\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten();\n\n    public void run();\n\n    protected boolean checkReturnClientHandler();\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception;\n\n    private boolean doRead() throws Exception;\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException;\n\n    private boolean doWrite() throws IOException;\n\n    protected void returnThread();\n\n    protected void returnClientHandler();\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException;\n\n    protected byte[] readInputStream() throws IOException;\n\n    public void updateInputOutputStreams() throws IOException;\n\n    public boolean getBlockingMode();\n\n    public void setSocketChannel(SocketChannel socketChannel);\n\n    public SocketChannel getSocketChannel();\n\n    public void setSelectionKey(SelectionKey selectionKey);\n\n    public SelectionKey getSelectionKey();\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException;\n\n    public void registerForRead() throws IOException, ClosedChannelException;\n\n    public void registerForWrite() throws IOException, ClosedChannelException;\n\n    public void registerWrite() throws IOException;\n\n    protected void setClientWriteHandler(ClientWriteHandler handler);\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount();\n\n    private void doHandshake() throws Exception;\n\n    private void doTasks();\n\n    private void finishInitialHandshake() throws IOException;\n\n    public boolean getInitialHandshakeStatus();\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException;\n}\n",
    "test_prompt": "// NonBlockingClientHandler_1Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.\n*/\nclass NonBlockingClientHandler_1Test {",
    "time_taken": 22.023805618286133,
    "usage": {
        "prompt_tokens": 1583
    }
},
{
    "choices": [
        {
            "text": "\n\t/**\n\t * Test case 1: reads until write-complete\n\t * Verifies that the write is successful or not.\n\t * Verifies that there is no additional write-incoming before read-event occurs.\n\t * @throws Exception\n\t */\n\t@Test\n\tpublic final void test1_readReadWrite() throws Exception {\n\t\t\n\t\tfinal ByteBuffer src = ByteBuffer.allocate(500);\n\t\tfinal ByteBuffer dst = ByteBuffer.allocate(10);\n\t\tlong endtime = 0;\n\t\tdo {\n\t\t\tsrc.clear();\n\t\t\tsrc.put(new byte[dst.capacity()]);\n\t\t\tdst.get(new byte[10]);\n\t\t\tassertTrue(src.hasRemaining());\n\t\t\tassertTrue(dst.hasRemaining());\n\t\t\tassertEquals(dst.position(),src.position());\n\t\t\tassertEquals(dst.put(new byte[10]),dst.position());\n\t\t\tendtime = System.currentTimeMillis() + 100;\n\t\t}\n\t\twhile (System.currentTimeMillis() < endtime);\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "//-------------------test 1---------------------------------------------------\n\t@Test\n\tpublic void getMaxThreadAccessCount() {\n\t\tint m = NonBlockingClientHandler.getMaxThreadAccessCount();\n\t\tassertEquals(\"Unexpected value\", maxThreadAccessCount, m);\n\t}\n\t//-------------------test 2--------------------------------------------------------\n\t@Test\n\tpublic void processRunResultAfterCloseHandshake() throws Exception {\n\t\tdoTasks();\n\t\tdoProcessResults();\n\t\tprocessReturnedReader();\n\t\tdoProcessFinished();\n\t\t//processGetWriter();\n\t\t//processRead();\n\t\t//processWrite();\n\t\t//assertAllResultsProcessed();\n\t}\n\t@Test\n\tpublic void processReadAfterCloseHandshake() throws Exception {\n\t\tdoTasks();\n\t\tdoProcessFinished();\n\t\tdoProcessResults();\n\t\tdoProcessRead();\n\t\tdoProcessFinished();\n\t\t//processGetWriter();\n\t\t//processRead();\n\t\t//processWrite();\n\t\t//processReturnedReader();\n\t\t//processGetWriter();\n\t\t//processReadAfterClose();\n\t\t//processRead();\n\t\t//isFinishedResultProcessed();\n\t}\n};\n\n//---------------------------test 1---------------------------------------------------\n/**\n* Test class of {@link NonBlockingClientHandler}.\n*/\npublic abstract class NonBlockingClientHandler_1Test extends NonBlockingClientHandler_2Test {\n\n\t//-----------------test 2-----------------------------------------------------------\n\t@Test\n\tpublic void getMaxThreadAccessCount() {\n\t\tint m = NonBlockingClientHandler.getMaxThreadAccessCount();\n\t\tassertEquals(\"Unexpected value\", maxThreadAccessCount, m);\n\t}\n\n}\n//---------------------------test 2---------------------------------------------------\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate static String getHost() throws UnknownHostException { return null;  }\n\n\tpublic static void main (String aArgs[]) {\n\t\t(new NonBlockingClientHandler_2Test()).run();\n\t}\n\t\n\tclass NonBlockingClientHandler_2TestThread extends Thread {\n        int index = 0;\n\n        NonBlockingClientHandler_2TestThread(int index) {\n                this.index = index;\n        }\n\t\t\t\t\n        @Override public void run() {\n                                doTasks();\n                                super.run();\n        }\n\t\t\t\t\n\t\tprotected void doTasks() { //main class\n                    try {\n                        long currentTime = System.currentTimeMillis();\n                        while(true) { //main thread loop\n                            writeByteBuffer(index);\n                            writeByteBuffer(index+1);\n                            writeByteBuffer(index*2);\n                            writeByteBuffer(index*2+1);\n                            writeByteBuffer(index*3);\n                            writeByteBuffer(index*3+1);\n                            writeByteBuffer(index*3+2);\n                            handleGotDataInBuffers();\n                            handleGotDataInBuffers();\n                            handleGotDataInBuffers();\n                            handleGotDataInBuffers();\n                        }\n                        handleGotDataInBuffers();\n                        handleGotDataInBuffers();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\t\t}\n\t}\n}\n}\n\n/*\n * O.S.\n */\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    //@Test\n    public void test() throws Exception {\n        NonBlockingClientHandler a = new NonBlockingClientHandler();\n            //assertTrue(a.getMaxThreadAccessCount() == 1 );\n        try {\n            a.getMaxThreadAccessCount();\n        } catch (IOException e) {\n            assertTrue(false, e);\n        }\n        try {\n            a.getThreadAccessCount();\n        } catch (IOException e) {\n            assertTrue(false, e);\n        }\n        try {\n            a.getSelectionKey();\n        } catch (SelectionKeyException e) {\n            assertTrue(false, e);\n        }\n        try {\n            NonBlockingClientHandler.doWrite();\n            assertTrue(0!= 1);\n        } catch (Exception ioe) {\n            assertTrue(true || ioe instanceof IOException);\n        }\n    }\n}\n\n/** {@link NonBlockingClientHandler_2Test}</pre> */\nclass NonBlockingClientHandler_2Test extends NonBlockingClientHandler {\n\n    public NonBlockingClientHandler_2Test() {\n        super(maxThreadAccessCount);\n    }\n\n    public void setClientWriteHandler(ClientWriteHandler handler) {\n        handler.setMaxThreadAccessCount(maxThreadAccessCount);\n    }\n\n    public void setMaxThreadAccessCount(int count) {\n        maxThreadAccessCount = count;\n\n        try {\n            doHandshake();\n        } catch (Exception e) {\n        }\n    }\n\n    private void doHandshake() throws IOException {\n        doPostCloseActivity();\n        doTasks();\n        doPausableCloseActivity();\n        doHandshakeComplete();\n    }\n\n    public void start() throws ClassNotFoundException, IOException {\n        FileInputStream fis = null;\n\n        try {\n            fis = new FileInputStream(fileName);\n\n            //set up server\n            Server s = new Server(address);\n            String sSink = \"\";\n\n            s.set",
            "finish_reason": "length"
        },
        {
            "text": "public NonBlockingClientHandler_2Test() {\n\t\t\t\n\t\t}\n\t\tpublic NonBlockingClientHandler_2Test(Server s) {\n\t \t\t\n\t\t\t\n\t\t}\n}\n\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n         * Test class constructor.\n         * @since v1.3\n         */\n    private NonBlockingClientHandler_2Test() {\n    }\n}\n\n/**\n*/\nclass NonBlockingClientHandler_2Test2 {\n\n\t\t/**\n         * Test class.\n         * @since v1.4\n         */\n    public static class NonBlockingClientHandler_2Test2Test implements Runnable {\n\n        private NonBlockingClientHandler_2Test2 testClientHandler;\n\n        private Object lock;\n\n        /**\n        * Creates a new instance of NonBlockingClientHandler_2Test by the specified clientHandler.\n        * @since v1.3\n        */\n        public NonBlockingClientHandler_2Test2Test(NonBlockingClientHandler_2Test2 testClientHandler) {\n            this.testClientHandler = testClientHandler;\n            this.lock = Synchronized.newLock(testClientHandler);\n        }\n\n        private synchronized NonBlockingClientHandler_2Test2Test() {\n            super();\n            this.testClientHandler = null;\n            this.lock = null;\n        }\n\n        /**\n         * Invoke the testClientHandler.\n         * @since v1.4\n         */\n        public synchronized void run() {\n            this.testClientHandler.run();\n        }\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "private static final Logger logger = Logger.getLogger(\"NonBlockingClientHandler_2Test\");\n\t\t\n\t\tprivate static int maxThreadAccessCount = 5;\n\t\t\n\t\tpublic NonBlockingClientHandler_2Test() {\n\t\t\tsuper();\n\t\t}\n\n\t@Test\n\tpublic void testNonBlockingClientHandler_1() throws Exception {\n\t\n\t\tlogger.log(Level.INFO, \"TestNonBlockingClientHandler_1: doNotAllowTasks\");\t\n\t\tdoTasks();\n\t\tassertEquals(maxThreadAccessCount, NonBlockingClientHandler.getMaxThreadAccessCount());\n\t}\n\n\t@Test\n\tpublic void testNonBlockingClientHandler_2() throws Exception {\n\t\n\t\tlogger.log(Level.INFO, \"TestNonBlockingClientHandler_2: initial handshake\");\n\t\ttry {\n\t\t\tNonBlockingClientHandler.doHandshake();\n\t\t\tfail(\"DoHandshake not expected to work.\");\n\t\t} catch (ConnectionLostException expected) {}\n\t\t\n\t\tlogger.log(Level.INFO, \"TestNonBlockingClientHandler_2: readInput\");\n\t\ttry {\n\t\t\tdoRead();\n\t\t\tassertEquals(1, readByteBuffer.size());\n\t\t} catch (IOException iae) {\n\t\t\tfail(\"Read does not happen from the stream.\");\n\t\t}\n\n\t\t//this will take no significant while\n\t\tdoTasks();\n\n\t\tlogger.log(Level.INFO, \"TestNonBlockingClientHandler_2: readInput\");\n\t\ttry {\n\t\t\tdoRead();\n\t\t\tassertEquals(1, readByteBuffer.size());\n\t\t} catch (IOException iae) {\n\t\t\tfail(\"Read does not happen from the stream.\");\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tdoWrite();\n\t\t\tassertEquals(1, writeByteBuffer.size());\n\t\t} catch (IOException iae) {\n\t\t\tfail(\"Write does not happen from the stream.\");\n\t\t}\n\n\t\tNonBlockingClientHandler.doNonBlockingClientHandler_2.doHandshake();\n\t\t\n\t\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test for {@link NonBlockingClientHandler#NonBlockingClientHandler(String)}.\n\t * @since 1.4.7\n\t */\n// This tests the constructor.\n// Its use is as it needs to be public, because then it is called by a static \n// method from its inner class if the constructor is not supported as a way to make\n// one unit test (as the unit test could be inherited from the inherited\n// class - in which case this unit test does not have a class name because the\n// constructor would fail.\n\t@Test\n\tpublic abstract void testConstructor1() throws Exception;\n\t\t\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "public static void main(String[] args) {\n\t\t\tString appName;\n\n\t\t\t//noinspection ResultOfMethodCallIgnored\n\t\t\tSystem.setProperty(\"javax.net.ssl.keyStore\", \"/etc/ssl/ssl.keys\");\n\t\t\tSystem.setProperty(\"javax.net.ssl.keyStorePassword\", \"hX3xJdC1Zgk0\");\n\t\t\t//noinspection ResultOfMethodCallIgnored\n\t\t\tSystem.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n\n\t\t\ttry {\n\t\t\t\tNonBlockingClientHandler_2Test testCase = new NonBlockingClientHandler_2Test();\n\n\t\t\t\t//testcase.testGetMaxThreadAccessCount();\n\t\t\t\tappName = testCase.testGetMaxThreadAccessCount();\n\t\t\t\tSystem.out.println(\"\\tTest : \"+appName);\n\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\n\t\tpublic NonBlockingClientHandler_2Test() {\n\n\t\t}\n\n\t\tpublic String testGetMaxThreadAccessCount() throws IOException {\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "static String testServerName = \"NONSERVER\";\n\t//\tstatic final String testServerName = \"127.0.0.1:1588\";\n\t//\tstatic final String testServerName = \"localhost\";\n\tpublic static final String KEY_TYPE = \"TLSv1_3_\"; //\"AES_KEY\";\n\t\n\t\n\tclass TestContext {\n\t\t\n\t\tpublic final byte[] clientWriteData = new byte[1024]; // for key.\n\t\tpublic final byte[] writeClientData = new byte[1024]; // for  key.\n\t\tpublic final byte[] readServerData = new byte[1024]; // for key.\n\t\tpublic final KeyPair key = new KeyPair(); // for key.\n\t\t\n\t}\n\t\n\tclass TestHandler implements ClientHandler {\n\t\t\n\t\tpublic TestContext testContext;\n\t\tpublic Map<Integer, TestContext> contexts;\n\t\tpublic Throwable testException = new Throwable(\"Test Exception\");\n\t\tpublic Map<Integer, Throwable> handleExceptions = new HashMap<>();\n\t\tpublic boolean gotSasl = false;\n\t\tpublic boolean gotFinal = false;\n\n\t\tpublic ClientConnection getConnection() {\n\t\t\treturn new ClientConnection(null);\n\t\t}\n\n\t\tpublic void setHandshakeStatus() {\n\t\t}\n\n\t\tpublic void setSSLSocketFactory(SSLSocketFactory socketFactory) {\n\t\t}\n\n\t\tpublic void writeBytes(ByteBuffer buffer, InputStream in) throws Exception {\n\t\t\ttestContext.writeInputStream_1(in);\n\t\t}\n\n\t\tpublic void writeBytes(String s) throws Exception {\n\t\t\ttestContext.writeString(s);\n\t\t}\n\t\t\n\t\tpublic String readString(InputStream in) throws Exception {\n\t\t\treturn ByteBuffer.wrap(testContext.readClientData).get(0);\n\t\t}\n\n\t\tpublic void receive_WriteResult(SendResult receiveResult) throws IOException {\n\t\t\t\n\t\t}\n\n\t\tpublic SaslNegotiate saslNegotiate_WriteData(ByteBuffer buffer) throws Exception {\n\t\t\tif(!gotSasl) {",
            "finish_reason": "length"
        }
    ],
    "id": "d8b116b7-1c39-4ee1-800e-0b6169d6326b",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_2Test.java",
    "original_code": "// NonBlockingClientHandler.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite();\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag);\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead();\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count);\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount();\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n    }\n\n    public NonBlockingClientHandler() {\n    }\n\n    public void clean();\n\n    protected void finalize() throws Throwable;\n\n    public void handleClient(TheClient theClient) throws Exception;\n\n    protected void setInputStream(InputStream in) throws IOException;\n\n    public BufferedReader getBufferedReader();\n\n    public void closeConnection();\n\n    private void doPostCloseActivity() throws IOException;\n\n    public boolean closeIfSSLOutboundDone();\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten();\n\n    public void run();\n\n    protected boolean checkReturnClientHandler();\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception;\n\n    private boolean doRead() throws Exception;\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException;\n\n    private boolean doWrite() throws IOException;\n\n    protected void returnThread();\n\n    protected void returnClientHandler();\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException;\n\n    protected byte[] readInputStream() throws IOException;\n\n    public void updateInputOutputStreams() throws IOException;\n\n    public boolean getBlockingMode();\n\n    public void setSocketChannel(SocketChannel socketChannel);\n\n    public SocketChannel getSocketChannel();\n\n    public void setSelectionKey(SelectionKey selectionKey);\n\n    public SelectionKey getSelectionKey();\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException;\n\n    public void registerForRead() throws IOException, ClosedChannelException;\n\n    public void registerForWrite() throws IOException, ClosedChannelException;\n\n    public void registerWrite() throws IOException;\n\n    protected void setClientWriteHandler(ClientWriteHandler handler);\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount();\n\n    private void doHandshake() throws Exception;\n\n    private void doTasks();\n\n    private void finishInitialHandshake() throws IOException;\n\n    public boolean getInitialHandshakeStatus();\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException;\n}\n",
    "test_prompt": "// NonBlockingClientHandler_2Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.\n*/\nclass NonBlockingClientHandler_2Test {",
    "time_taken": 22.169647693634033,
    "usage": {
        "prompt_tokens": 1579
    }
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "09a5af7a-5d5a-4c12-b765-5df6fe04e803",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_0Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_0Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersion()} method.\n*/\nclass QuickServer_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "69425ebe-23e7-4cb7-9422-b701ddd9c6b9",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_1Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_1Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.\n*/\nclass QuickServer_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "ace60e88-c83b-4319-9e65-b824269e4071",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_2Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_2Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getNewLine()} method.\n*/\nclass QuickServer_2Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "bf7ff498-1fab-4b16-bdc5-322d72cf5d00",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_3Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_3Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.\n*/\nclass QuickServer_3Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "a5902975-7d3f-456a-bb96-1bb587b85388",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_4Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_4Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.\n*/\nclass QuickServer_4Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "bfd97c05-4a68-4d1d-aa61-6fd9b0a7f87e",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_5Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_5Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#startService()} method.\n*/\nclass QuickServer_5Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "c6f1789a-711a-495e-bae0-892bd5c84060",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_6Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_6Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#stopService()} method.\n*/\nclass QuickServer_6Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "83393dba-31c6-4e04-ab96-92715b23f9cc",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_7Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_7Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#suspendService()} method.\n*/\nclass QuickServer_7Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "77bb8814-18b6-44bc-8904-45d4b71caf08",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_8Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_8Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#resumeService()} method.\n*/\nclass QuickServer_8Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "752ef52f-a8dc-4d21-bdc3-b8f30f272992",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_9Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_9Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#info()} method.\n*/\nclass QuickServer_9Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "d5cb9952-d82e-4c04-826e-44f04e929a65",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_10Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_10Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#findAllClient()} method.\n*/\nclass QuickServer_10Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "8f96d9e2-fbc1-4ccc-ad81-c35b9ee70dbf",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_11Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_11Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.\n*/\nclass QuickServer_11Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "4dcc4dfe-39e3-4be6-9ce7-8b3d5087f67c",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_12Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_12Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.\n*/\nclass QuickServer_12Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "cc8ae436-6d1c-4118-8ef3-3991f3a1919d",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_13Test.java",
    "original_code": "// QuickServer.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n * Main class of QuickServer library. This class is used to create\n * multi client servers quickly.\n * <p>\n * Ones a client is connected, it creates {@link ClientHandler} object,\n * which is run using any thread available from the pool of threads\n * maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n * handles the client. <br/>\n * QuickServer divides the application logic of its developer over eight\n * class, <br>\n * \t<ul>\n * \t<li>ClientEventHandler<br>\n * \t\t   &nbsp;Handles client events [Optional Class].\n * \t\t<li>ClientCommandHandler [#]<br>\n * \t\t   &nbsp;Handles client character/string commands.\n * \t\t<li>ClientObjectHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - Object commands.\n * \t<li>ClientBinaryHandler [#]<br>\n * \t\t   &nbsp;Handles client interaction - binary data.\n * \t<li>ClientWriteHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n * \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n * \t\t\t&nbsp;Used to Authencatet a client.\n * \t\t<li>ClientData [Optional Class]<br>\n * \t\t\t&nbsp;Client data carrier (support class)\n * \t<li>ClientExtendedEventHandler [Optional Class]<br>\n * \t\t   &nbsp;Handles extended client events.\n * \t</ul>\n *\n * [#] = Any one of these have to be set based on default DataMode for input.\n * The default DataMode for input is String so if not changes you will\n * have to set ClientCommandHandler.\n * </p>\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n * @version 1.4.8\n * @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo();\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver);\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine();\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString();\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException;\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException;\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException;\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName();\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner();\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner);\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port);\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort();\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler);\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler();\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator);\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler();\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator();\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data);\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData();\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time);\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout();\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry);\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry();\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg);\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg();\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg);\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg();\n\n    private TheClient initTheClient();\n\n    public void run();\n\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection);\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection();\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount();\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg);\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg();\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException;\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr();\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects);\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects();\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port);\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort();\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator);\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator();\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException;\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException;\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer();\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer);\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed();\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger();\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger);\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler);\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler();\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException;\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini();\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro();\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level);\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel();\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level);\n\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError();\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param);\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig);\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService();\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService();\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService();\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService();\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info();\n\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException;\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException;\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState();\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state);\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp);\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception;\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception;\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args);\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException;\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage();\n\n    private static void handleOptions(String[] args, QuickServer quickserver);\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception;\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception;\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception;\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool();\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool();\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config);\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig();\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception;\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool();\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil();\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig);\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception;\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id);\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient();\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern);\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key);\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern);\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation();\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation);\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging);\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging();\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass);\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass();\n\n    public SecurityManager getSecurityManager() throws AppException;\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig);\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig();\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader);\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader();\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException;\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath);\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath();\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks);\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks();\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses();\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event);\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone();\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure);\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure();\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure();\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure);\n\n    private File makeAbsoluteToConfig(String fileName);\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException;\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception;\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig();\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException;\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException;\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler);\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler();\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector);\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector();\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception;\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception;\n\n    private boolean checkAccessConstraint(Socket socket);\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException;\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig);\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool();\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception;\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler);\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler();\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime();\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag);\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier();\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception;\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode();\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception;\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler);\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler();\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException;\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException;\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType);\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler);\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler();\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception;\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID();\n\n    public boolean isRawCommunicationLogging();\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging);\n\n    public int getRawCommunicationMaxLength();\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength);\n}\n",
    "test_prompt": "// QuickServer_13Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getPID()} method.\n*/\nclass QuickServer_13Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "8cdd4b51-b0cd-4e1d-bb5a-0a3758bc0031",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/qsadmin/QSAdminAPI.java",
    "original_code": "// QSAdminAPI.java\npackage org.quickserver.net.qsadmin;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.*;\n\n/**\n * QSAdminAPI class to communicate to QsAdmin from java applications.\n * <p>\n *  Eg:\n * <code><BLOCKQUOTE><pre>\n * \tQSAdminAPI qsAdminApi = new QSAdminAPI(\"127.0.0.1\", 9080);\n * \tif(qsAdminApi.logon()) {\n * \t\tSystem.out.println(\"Logged in\");\n * \t\tString info = qsAdminApi.sendCommand(\"info server\");\n * \t\tSystem.out.println(\"Info on Server :\\n\"+info);\n * \t\tqsAdminApi.logoff();\n * \t} else {\n * \t\tSystem.out.println(\"Bad Login\");\n * \t\tqsAdminApi.close();\n * \t}\n * </pre></BLOCKQUOTE></code></p>\n *\n * @see QSAdminServer\n * @since 1.4\n * @author Akshathkumar Shetty\n */\npublic class QSAdminAPI {\n\n    private static final Logger logger = Logger.getLogger(QSAdminAPI.class.getName());\n\n    private String username = \"Admin\";\n\n    private String password = \"QsAdm1n\";\n\n    private String host = \"localhost\";\n\n    private int port = 9877;\n\n    private Socket socket;\n\n    private InputStream in;\n\n    private OutputStream out;\n\n    private BufferedReader br;\n\n    private BufferedWriter bw;\n\n    /**\n     * Creates QSAdminAPI object that will communicate with the\n     * passed host and port.\n     */\n    public QSAdminAPI(String host, int port) {\n    }\n\n    /**\n     * Will attempt to connect and logon to the remote QsAdminServer.\n     */\n    public boolean logon() throws IOException;\n\n    /**\n     * Will attempt to connect and logon to the remote QsAdminServer.\n     */\n    public boolean logon(String username, String password) throws IOException;\n\n    /**\n     * Sends the given command to QSAdmin and gives the response back.\n     */\n    public String sendCommand(String data) throws IOException;\n\n    private String readResponse() throws IOException;\n\n    /**\n     * Logoff the QSAdminServer and closed the socket associated.\n     */\n    public void logoff() throws IOException;\n\n    /**\n     * Closes the socket associated.\n     */\n    public void close() throws IOException;\n\n    public static void main(String[] args) throws Exception;\n}\n",
    "test_prompt": "// QSAdminAPITest.java\npackage org.quickserver.net.qsadmin;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QSAdminAPI}.\n* It contains one unit test case for the {@link QSAdminAPI#logon()} method.\n*/\nclass QSAdminAPITest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "975e3b23-5480-412f-998c-00328c9b7490",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_0Test.java",
    "original_code": "// PasswordField.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\n\n/**\n * This class prompts the user for a password and attempts to mask\n * input.\n *\n * @since 1.4\n */\npublic class PasswordField {\n\n    private static Logger logger = Logger.getLogger(PasswordField.class.getName());\n\n    /**\n     * @param prompt The prompt to display to the user.\n     * @return The password as entered by the user.\n     */\n    public static final char[] getPassword(String prompt) throws IOException;\n\n    /**\n     * @param in input stream to be used (e.g. System.in)\n     * @param prompt The prompt to display to the user.\n     * @return The password as entered by the user.\n     */\n    public static final char[] getPassword(InputStream in, String prompt) throws IOException;\n}\n",
    "test_prompt": "// PasswordField_0Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.\n*/\nclass PasswordField_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "2d4b639c-8e1e-4f24-af8f-a1e4c25a9128",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_1Test.java",
    "original_code": "// PasswordField.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\n\n/**\n * This class prompts the user for a password and attempts to mask\n * input.\n *\n * @since 1.4\n */\npublic class PasswordField {\n\n    private static Logger logger = Logger.getLogger(PasswordField.class.getName());\n\n    /**\n     * @param prompt The prompt to display to the user.\n     * @return The password as entered by the user.\n     */\n    public static final char[] getPassword(String prompt) throws IOException;\n\n    /**\n     * @param in input stream to be used (e.g. System.in)\n     * @param prompt The prompt to display to the user.\n     * @return The password as entered by the user.\n     */\n    public static final char[] getPassword(InputStream in, String prompt) throws IOException;\n}\n",
    "test_prompt": "// PasswordField_1Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.\n*/\nclass PasswordField_1Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "4ab632aa-46b1-4e6a-a50c-c4434d2a9d7e",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/ByteBufferInputStream.java",
    "original_code": "// ByteBufferInputStream.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.charset.*;\nimport java.util.*;\nimport org.quickserver.net.server.ClientHandler;\nimport java.util.logging.*;\nimport org.quickserver.util.*;\n\n/**\n * This is an InputStream constructed from list of ByteBuffers. This is\n * used in non-blocking mode.\n *\n * @since 1.4.5\n * @author Akshathkumar Shetty\n */\npublic class ByteBufferInputStream extends InputStream {\n\n    private static final Logger logger = Logger.getLogger(ByteBufferInputStream.class.getName());\n\n    static {\n    }\n\n    /**\n     * Sets the debug flag.\n     */\n    public static void setDebug(boolean flag);\n\n    /**\n     * @since 1.4.7\n     */\n    public static boolean isLoggable(Level level);\n\n    private final ArrayList bufferList;\n\n    private ClientHandler handler;\n\n    private CharsetDecoder decoder;\n\n    private CharsetEncoder encoder;\n\n    private StringBuilder strings;\n\n    private int pos = 0;\n\n    private int index = -1;\n\n    private int start = 0;\n\n    private boolean lookingForLineFeed = false;\n\n    public ByteBufferInputStream(ArrayList bufferList, ClientHandler handler, String charset) {\n    }\n\n    public synchronized int availableOnlyInByteBuffer();\n\n    public synchronized int available();\n\n    public synchronized void close() throws IOException;\n\n    public boolean markSupported();\n\n    public synchronized int read() throws IOException;\n\n    public int read(byte[] b) throws IOException;\n\n    public synchronized int read(byte[] b, int off, int len) throws IOException;\n\n    public long skip(long n) throws IOException;\n\n    private void addStringsBackAsBuffer();\n\n    private void returnBufferBack();\n\n    private void returnBufferBack(ByteBuffer byteBuffer);\n\n    /**\n     * Checks if a line of String is ready to be read.\n     * @throws IOException if connection is lost or closed.\n     */\n    public synchronized boolean isLineReady() throws IOException;\n\n    private boolean isLineReadyForStringBuilder();\n\n    /**\n     * Reads a line of String if ready. If line is not yet ready this will\n     * block. To find out if the line is ready use <code>isLineReady()</code>\n     * @see #isLineReady()\n     */\n    public synchronized String readLine() throws IOException;\n\n    public void dumpContent();\n}\n",
    "test_prompt": "// ByteBufferInputStreamTest.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.charset.*;\nimport java.util.*;\nimport org.quickserver.net.server.ClientHandler;\nimport java.util.logging.*;\nimport org.quickserver.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByteBufferInputStream}.\n* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.\n*/\nclass ByteBufferInputStreamTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "07131eb7-8243-4b47-8bd3-7ac7d379bb90",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/ClassUtil.java",
    "original_code": "// ClassUtil.java\npackage org.quickserver.util;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.*;\nimport org.quickserver.util.io.*;\nimport java.util.logging.*;\n\n/**\n * A utility class to load class.\n *\n * @author Akshathkumar Shetty\n * @since 1.3.2\n */\npublic class ClassUtil {\n\n    private static Logger logger = Logger.getLogger(ClassUtil.class.getName());\n\n    /**\n     * Tries to load the classes present in the array\n     * passed has second parameter from\n     * the ClassLoader passed has first parameter.\n     * Returns the HashMap of all the classed successfully loaded.\n     * @param classLoader ClassLoader used to find the class\n     * @param classes[] array of classes to load.\n     */\n    public static Map loadClass(ClassLoader classLoader, String[] classNames) throws Exception;\n\n    /**\n     * Returns the ClassLoader to all the jars present in the\n     * dir passed has first parameter.\n     * @param jarDir path to the directory containing the jars\n     */\n    public static ClassLoader getClassLoaderFromJars(String jarDir) throws Exception;\n\n    /**\n     * Returns the ClassLoader to a jar\n     * @since 1.3.3\n     */\n    public static ClassLoader getClassLoaderFromJar(String jarPath) throws Exception;\n\n    /**\n     * Returns the ClassLoader\n     * @since 1.3.3\n     */\n    public static ClassLoader getClassLoader(String path) throws Exception;\n}\n",
    "test_prompt": "// ClassUtilTest.java\npackage org.quickserver.util;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.*;\nimport org.quickserver.util.io.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassUtil}.\n* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.\n*/\nclass ClassUtilTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "f688cce4-d667-4013-86e1-8c9d2274e216",
    "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/pool/thread/ClientPool.java",
    "original_code": "// ClientPool.java\npackage org.quickserver.util.pool.thread;\n\nimport java.util.*;\nimport org.quickserver.util.pool.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.net.server.*;\nimport org.quickserver.util.xmlreader.PoolConfig;\nimport java.util.logging.*;\n\n/**\n * This is a class for managing the pool of threads for\n * handling clients.\n *\n * @author Akshathkumar Shetty\n * @since 1.3\n */\npublic class ClientPool {\n\n    private static final Logger logger = Logger.getLogger(ClientPool.class.getName());\n\n    protected List clients = new ArrayList(3);\n\n    protected ObjectPool pool;\n\n    protected PoolConfig poolConfig;\n\n    //v1.4.6\n    private int countNioWriteThreads;\n\n    private int maxThreadsForNioWrite = 10;\n\n    public ClientPool(QSObjectPool objectPool, PoolConfig poolConfig) {\n    }\n\n    public ObjectPool getObjectPool();\n\n    public void addClient(Runnable r) throws NoSuchElementException;\n\n    public synchronized void addClient(Runnable r, boolean keepObjOnFail) throws NoSuchElementException;\n\n    public synchronized void returnObject(Object object);\n\n    public synchronized Runnable getClient();\n\n    /**\n     * @since 1.4.5\n     */\n    public boolean isClientAvailable();\n\n    protected void finalize() throws Throwable;\n\n    public void close() throws Exception;\n\n    public void clear() throws Exception;\n\n    /**\n     * Return the number of instances currently borrowed from my pool.\n     * @since 1.4.1\n     */\n    public int getNumActive();\n\n    /**\n     * Return the number of instances currently idle in my pool.\n     * @since 1.4.1\n     */\n    public int getNumIdle();\n\n    /**\n     * Returns iterator containing all the active\n     * threads i.e ClientHandler handling connected clients.\n     * @since 1.3.1\n     */\n    public final Iterator getAllClientThread();\n\n    public Object getObjectToSynchronize();\n\n    /**\n     * Returns PoolConfig object that configured this pool\n     * @since 1.4.5\n     */\n    public PoolConfig getPoolConfig();\n\n    /**\n     * Sets the maximum threads allowed for nio write. If set to 0 or less no limit is\n     * imposed.\n     * @since 1.4.6\n     */\n    public void setMaxThreadsForNioWrite(int count);\n\n    /**\n     * Returns the maximum threads allowed for nio write\n     * @since 1.4.6\n     */\n    public int getMaxThreadsForNioWrite();\n\n    /**\n     * Notifies when NIO write is complete.\n     * @since 1.4.6\n     */\n    protected void nioWriteEnd();\n\n    /**\n     * Notifies when NIO write is about to start.\n     * @since 1.4.6\n     */\n    protected void nioWriteStart();\n\n    /**\n     * Method to suggest if nio write should be sent for processing.\n     * @since 1.4.6\n     */\n    public boolean shouldNioWriteHappen();\n}\n",
    "test_prompt": "// ClientPoolTest.java\npackage org.quickserver.util.pool.thread;\n\nimport java.util.*;\nimport org.quickserver.util.pool.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.net.server.*;\nimport org.quickserver.util.xmlreader.PoolConfig;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientPool}.\n* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.\n*/\nclass ClientPoolTest {",
    "time_taken": -1
}
]