[
{
    "choices": [
        {
            "text": "\n\tpublic static void main(String args[]) throws OperationException {\n\t\t\n\t\t// Test of the class: addMenuBarItem(JMenuBar, String) method\n\t\ttry {\n\t\t\t// Anfueghandler eine Funkione, dank, um eine JFrame in der Vissu-Units-Vielenheit\n\t\t\tVishnunView un = new VishnunView();\n\t\t\tJFrame frame = new JFrame(\"VishnunView\");\n\t\t\tframe.setSize(250, 200);\n\t\t\tframe.setVisible(true);\n\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tVishnunViewTest test = new VishnunViewTest();\n\t\t\ttest.addMenuBarItem(un, \"L'Menu bar\");\n\t\t\tun.reset();\n\t\t\tframe.setVisible(true);\n\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tun.setSelected(true);\n\t\t\tframe.setVisible(false);\n\t\t\n\t\t\n\t\t} catch (OperationException e) {\n\t\t\t// JMenuHelperTest.main(String\"VislibException\");\n\t\t}\n\t}\n};\n\n// VishnunViewTest.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "private final JMenu menu;\n\t\t\n\t\t/**\n\t    * Create instance of <tt>JMenuHelperTest</tt> with test\n\t    * environment <tt>env</tt> and test's environment <tt>envN</tt>.\n\t    * @param testSet environment to store values in\n\t    * @param env environment to test <tt>JMenu</tt>,\n\t    * i.e. where is it stored\n\t    */\n\t\tpublic JMenuHelperTest(final JMenu menu, JavaEnvironment env) {\n\t\t\tenv\n\t\t\t\t\t.addShutdownHook(new java.awt.event.JavaEventListener() {\n\t\t\t\t\t\tpublic void javaEventDispatched(\n\t\t\t\t\t\t\t\tjava.awt.event.JavaEvent evt) {\n\t\t\t\t\t\t\tSystem.out.println(\"Event dispatched\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addShutdownHook(new java.awt.event.JavaEventListener() {\n\t\t\t\t\t\tpublic void javaEventDispatched(\n\t\t\t\t\t\t\t\tjava.awt.event.JavaEvent evt) {\n\t\t\t\t\t\t\tSystem.out.println(\"Event dispatched\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t\t\n\t\t/**\n\t    * Create instance of <tt>JMenuHelperTest</tt> with test\n\t    * environment <tt>env</tt> and the environment <tt>envN</tt>.\n\t    * @param testSet environment to store values in\n\t    * @param env environment to test <tt>JMenu</tt>,\n\t    * i.e. where is it stored\n\t    * @param envN environment to test <tt>JMenu</tt>,\n\t    * i.e. where is it stored\n\t    */\n\t\tpublic JMenuHelperTest(\n\t\tjava.util.Hashtable<String, Object> testSet,\n                JavaEnvironment env,\n                        JavaEnvironment envN) {\n\t\t\tthis.menu = env.addMenu(\"A menu\");\n\t\t}\n\t\t\n\t\t/**\n\t    * Test the set of values from the test environment.\n\t    */\n\t\t@Test\n\t\tpublic void testEnviroment() {\n\t\t\tSystem.out.println(\"Environment value are:\");\n\t\t\tSystem.out.println(env.get());\n\t\t\tSystem.out.println(\"Menu value are:\");\n\t\t\tassertNotNull(env.get());\n\t\t}\n\n\t\t/**\n\t    * Test the environment.\n\t    */\n\t\t@Test\n\t\tpublic void testEnvironment() {\n\t\t\tassertTrue(env.contains(\"A menu\"));\n\t\t\tassertTrue(env.contains(\"A menu\"));\n\t\t\tassertNull(env.get(\"A\"));\n\t\t\tassertNull(env.get(\"B\"))\n\t\t}\n\n\t\t/**\n\t    * Test the environment.\n\t    */\n\t\t@Test\n\t\tpublic void testEventDispatcher() {\n\t\t\t/*\n\t\t\t\t1. This event is dispatched\n\t\t\t\t2. This event is dispatched\n\t\t\t\t3. This event is not dispatched\n\t\t\t*/\n\t\t\tjava.awt.EventDispatcher dispatcher = new java.awt.event.EventDispatcher() {\n\t\t\t\tpublic void dispatchEvent(\n\t\t\t\t\tjava.awt.event.AWTEvent event) {\n\t\t\t\t\tSystem.out.println(\"Event dispatched\");\n\t\t\t\t}\n\t\t\t};\n\t\t\tenv.addShutdownHook(dispatcher);\n\t\t\tSystem.out.println(env.get(\"A\"));\n\t\t\tSystem.out.println(env.get(\"B\"));\n\t\t\tassertNotNull(env.get(\"A\"));\n\t\t\tassertNotNull(env.get(\"B\"));\n\t\t\tenv.removeShutdownHook(dispatcher);\n\n\t\t\tassertNull(env.get(\"C\"));\n\t\t\tassertNotNull(env.get(\"C\"));\n\t\t\tenv.addShutdownHook(new java.awt.event.JavaEventListener() {\n\t\t\t\tpublic void javaEventDispatched(\n\t\t\t\t\tjava.awt.event.JavaEvent evt) {\n\t\t\t\t\tSystem.out.println(\"Event dispatched\");\n\t\t\t\t\tSystem.out.println(\"1. This is the main event!\");\n\t\t\t\t\tSystem.out.println(\"2. This is the main event!\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tassertNull(env.get(\"A\"));\n\t\t\tassertNotNull(env.get(\"A\"));\n\t\t\tassertNotNull(env.get(\"B\"));\n\n\t\t\tassertNotNull(env.get(\"C\"));\n\t\t\tassertNotNull(env.get(\"A\"));\n\t\t\tassertNotNull(env.get(\"B\"));\n\t\t\tassertNull(env.get(\"C\"));\n\n\t\t\tenv.addShutdownHook(new java.awt.event.JavaEventListener() {\n\t\t\t\tpublic void javaEventDispatched(\n\t\t\t\t\tjava.awt.event.JavaEvent evt) {\n\t\t\t\t\tSystem.out.println(\"Event dispatched\");\n\t\t\t\t\tSystem.out.println(\"3. This event cannot be dispatched!\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t    * Test the menu.\n\t    */\n\t\t@Test\n\t\tpublic void testMenu() {\n\t\t\tassertNotNull(menu);\n\t\t\tassertNotNull(menu.getName());\n\t\t\tassertTrue(menu.getName().length() > 10);\n\t\t\tmenu.updateUI();\n\t\t\tassertTrue(menu.getUI().isVisible());\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "JMenuHelperTest() throws Exception {\n\t\t}\n\t\t@Test\n\t\tvoid testAddMenuBarItem() {\n\t\t\tJMenu menu = JMenu.createFrame(new JFrame(), \"Menu Test\");\n\t\t\tJMenuBar menuBar = new JMenuBar();\n\t\t\tJMenu subMenu = addMenuBarItem(menuBar, \"SubMenu Test\");\n\t\t\tmenu.add(subMenu);\n\t\t\tmenu.addSeparator();\n\t\t\tmenu.add(new JLabel(\"test add menu item\"));\n\t\t\tJMenu subMenu1 = addMenuBarItem(menuBar, \"SubMenu Test 1\");\n\t\t\tJMenu subMenu2 = addMenuBarItem(menuBar, \"SubMenu Test 2\");\n\t\t\tmenu.add(new JSeparatorMenuItem());\n\t\t\tMenu subMenu3 = addMenuBarItem(menuBar, \"SubMenu Test 3\");\n\t\t\tmenu.add(subMenu1);\n\t\t\tmenu.add(subMenu2);\n\t\t\tmenu.add(subMenu3);\n\t\t\tmenu.addSeparator();\n\t\t\tmenu.add(new JLabel(\"test add menu item again\"));\n\t\t\tmenu.addSeparator();\n\t\t\tmenu.add(new JMenuItem(\"add a item with a suffix\"));\n\t\t\tmenu.addSeparator();\n\t\t\tmenu.add(new JMenuItem(\"add a menu item with several mnemonic\" ));\n\t\t\tmenu.addSeparator();\n\t\t\t\n\t\t\tassertEquals(menu.getMnemonicAt(0),KeyEvent.VK_A);\n\t\t\tassertEquals(menu.getMnemonicAt(1),KeyEvent.VK_B);\n\t\t\tassertEquals(menu.getMnemonicAt(2),KeyEvent.VK_C);\n\t\t\tassertEquals(menu.getMnemonicAt(3),KeyEvent.VK_D);\n\t\t\tassertEquals(menu.getMnemonicAt(4),KeyEvent.VK_F);\n\t\t\tassertEquals(menu.getMnemonicAt(5),KeyEvent.VK_G);\n\t\t\tassertEquals(menu.getMnemonicAt(6),KeyEvent.VK_H);\n\t\t\tassertEquals(menu.getMnemonicAt(7),KeyEvent.VK_I);\n\t\t\tassertEquals(menu.getMnemonicAt(8),KeyEvent.VK_J);\n\t\t\tassertEquals(menu.getMnemonicAt(9),KeyEvent.VK_K);\n\t\t\tassertEquals(menu.getMnemonicAt(10),KeyEvent.VK_L);\n\t\t\tassertEquals(menu.getMnemonicAt(11),KeyEvent.VK_M);\n\t\t\tassertEquals(menu.getMnemonicAt(12),KeyEvent.VK_N);\n\t\t\tassertEquals(menu.getMnemonicAt(13),KeyEvent.VK_O);\n\t\t\tassertEquals(menu.getMnemonicAt(14),KeyEvent.VK_P);\n\t\t\tassertEquals(menu.getMnemonicAt(15),KeyEvent.VK_Q);\n\t\t\tassertEquals(menu.getMnemonicAt(16),KeyEvent.VK_R);\n\t\t\tassertEquals(menu.getMnemonicAt(17),KeyEvent.VK_S);\n\t\t\tassertEquals(menu.getMnemonicAt(18),KeyEvent.VK_T);\n\t\t\tassertEquals(menu.getMnemonicAt(19),KeyEvent.VK_U);\n\t\t\tassertEquals(menu.getMnemonicAt(20),KeyEvent.VK_V);\n\t\t\tassertEquals(menu.getMnemonicAt(21),KeyEvent.VK_W);\n\t\t\tassertEquals(menu.getMnemonicAt(22),KeyEvent.VK_X);\n\t\t\tassertEquals(menu.getMnemonicAt(23),KeyEvent.VK_Y);\n\t\t\tassertEquals(menu.getMnemonicAt(24),KeyEvent.VK_Z);\n\t\t\tassertEquals(menu.getMnemonicAt(25),KeyEvent.VK_SPACE);\n\t\t\tassertEquals(menu.getMnemonicAt(26),KeyEvent.VK_RETURN);\n\t\t\tassertEquals(menu.getMnemonicAt(27),KeyEvent.VK_UP);\n\t\t\tassertEquals(menu.getMnemonicAt(28),KeyEvent.VK_DOWN);\n\t\t\tassertEquals(menu.getMnemonicAt(29),KeyEvent.VK_BACK_SPACE);\n\t\t\tassertEquals(menu.getMnemonicAt(30),KeyEvent.VK_LWIN);\n\t\t\tassertEquals(menu.getMnemonicAt(31),KeyEvent.VK_RWIN);\n\t\t\tassertEquals(menu.getMnemonicAt(42),KeyEvent.VK_COMMA);\n\t\t\tassertEquals(menu.getMnemonicAt(43),KeyEvent.VK_PERIOD);\n\t\t\tassertEquals(menu.getMnemonicAt(44),KeyEvent.VK_STOP);\n\n\t\t\t// Menu Bar.\n\t\t\tmenuBar.add(new JPanel());\n\t\t\tmenuBar.add(new JFrame(\"test\"));\n\t\t\tJMenu menu1 = addMenuBarItem(menuBar, \"Menu 1\");\n\t\t\tmenu1.addSeparator();\n\t\t\tmenuBar.add(new JPanel());\n\t\t\tmenuBar.add(new JFrame(\"test #2\"));\n\t\t\tJMenu menu2 = addMenuBarItem(menuBar, \"Menu 2\");\n\t\t\tmenuBar.add(new JPanel());\n\t\t\tmenuBar.add(new JFrame(\"test #3\"));\n\t\t\tJMenu menu3 = addMenuBarItem(menuBar, \"Menu 3\");\n\t\t\tmenu1.add(new JSeparatorMenuItem());\n\t\t\tmenu2.add(new JSeparatorMenuItem());\n\t\t\tmenuBar.add(new JPanel());\n\t\t\tmenuBar.add(new JFrame(\"test #4\"));\n\t\t\tJMenu menu4 = addMenuBarItem(menuBar, \"Menu 4\");\n\t\t\tmenu1.add(new JSeparatorMenuItem());\n\t\t\tmenu2.add(new JSeparatorMenuItem());\n\t\t\tmenuBar.add(new JPanel());\n\t\t\tmenuDirty = new JMenuItem(\"Menu Dirty\");\n\t\t\tmenuDirty.setEnabled(false);\n\t\t}\n\n\t\t@Test public void testDirtyCount() {\n\t\t\tassertEquals(menuDirty.getCount(),1);\n\t\t\tassertEquals(0,menuDirty.getCount());\n\t\t\tmenuDirty.setEnabled(true);\n\t\t\tassertEquals(menuDirty.getCount(),2);\n\t\t\tJMenu subMenu = addMenuBarItem(menuBar, \"Menu\");\n\t\t\tassertEquals(subMenu.getCount(),1);\n\t\t}\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    @Test\n    public void testAddMenuBarItem() {\n\n    }\n}\n// End of JMenuHelperTest.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link visu.handball.moves.controller.JMenuHelper#addMenuBarItem(JMenuBar, String)}.\n\t */\n    @Test\n    public void testAddMenuBarItem() {\n        JMenuBar menuBar;\n        menuBar = new JMenuBar();\n        JMenu menu;\n        menu = new JMenu(\"JMenu\");\n        menu.setMnemonic(KeyEvent.VK_A);\n        menuBar.add(menu);\n        assertEquals(1, menuBar.getComponentCount());\n        menuBar.setMainComponent(menu);\n        menuBar.add(menu);\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Default constructor, to be implemented by test classes.\n     */\n    JMenuHelperTest() {\n        // empty ctor\n    }\n\n    /**\n     * This test test class.\n     * It contains one unit test case for {@link #addMenuBarItem(JMenuBar, String)} method.\n    */\n    @Test\n    public void shouldAddMenuBarItem() {\n        // given\n        JMenuBar menuBar = new JMenuBar();\n        JMenu menu = new JMenu(\"Menu\");\n        menu.add(new JCheckBoxMenuItem(\"MenuItem\"));\n\n\t\t// execute test\n\t\tJMenuHelper menuHelper = new JMenuHelper(menu, menuBar);\n\t\tmenuHelper.addMenuBarItem(\"MenuItem\", \"SubMenu 1\");\n\t\tmenuHelper.addMenuBarItem(\"MenuItem\", \"SubMenu 2\");\n\n\t\t// assert\n\t\tassertEquals(\"SubMenu 2\", menuHelper.getSubMenu(\"SubMenu 2\").getText());\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tprivate AddMenuBarAction testAction;\n\tprivate JFrame testFrame;\n\n\t/**\n\t * Test method for {@link visu.handball.moves.controller.JMenuHelper#addMenuBarItem(JMenuBar, String)}.\n\t * @throws Throwable\n\t */\n\t@Test\n\tpublic void testAddMenuBarItem() throws Throwable {\n\t\ttestAction = new AddMenuBarAction();\n\t\ttestFrame = new JFrame();\n\t\ttestFrame.add(testAction);\n\t\ttestFrame.setVisible(true);\n\n\t\tassertTrue(\"Action not properly added\", testAction.isAdded());\n\t\tassertTrue(\"Frame not present\", testFrame.isVisible());\n\t\tassertNotEquals(\"Frame not added\", 1, testFrame.getClass().getName().length());\n\t\tassertTrue(\"Action not properly removed\", testAction.isRemoved());\n\t}\n\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t * Method to check the addition of a menu item to the menu of the menu bar.\n\t */\n        @Test\n        void addMenuBarItem1() {\n                JMenu menuBar = new JMenuBar();\n                JMenuItem item = new JMenuItem(\"Foo\");\n                menuBar.add(item);\n                item.addActionListener(e -> {\n                        menuBar.setMnemonic(e.getKeyChar());\n                });\n\t\t}\n\n\t\t /**\n\t * Method to check the addition of a menu item to the menu bar and submenus.\n\t */\n        @Test\n        void addMenuBarItemSubitem() {\n                JMenu menuBar = new JMenuBar();\n                Item item = new JMenuItem(\"Foo\");\n                JMenu subMenu = new JMenu(\"Bar\");\n                menuBar.add(item);\n                item.addActionListener(e -> {\n                        menuBar.add(subMenu);\n                        menuBar.setMnemonic(e.getKeyChar());\n                        subMenu.setMnemonic(e.getKeyChar());\n                });\n                item.addActionListener(e -> {\n                        menuBar.add(subMenu);\n                        menuBar.setMnemonic(e.getKeyChar());\n                });\n\t\t}\n}\n\n// end of JMenuHelperTest.java",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t * Main method.\n\t*/\n    @Test\n    public void test() {\n\n\t\tJMenuBar menuBar = new JMenuBar();\n\t\tfinal JMenu menu1 = new JMenu(\"Menu1\");\n\n\t\tfinal JMenu menu2 = new JMenu(\"Menu2\");\n\n\t\tJMenuBar subMenuBar = new JMenuBar(menu1, menu2);\n\t\taddMenuBarItem(subMenuBar, \"menu1\");\n\t\tmenuBar.add(subMenuBar);\n\t\taddMenuBarItem(menuBar, \"menu2\");\n\n//\t\taddMenuBarItem(menuBar, \"menu1\");\n//\t\taddMenuBarItem(menuBar, \"menu2\");\n\n\t\tJMenu menuBarMenu = new JMenu(\"MenuBarMenu\");\n\t\tmenuBar.add(menuBarMenu);\n\n//\t\taddMenuBarItem(menuBarMenu, \"menu1\");\n//\t\taddMenuBarItem(menuBarMenu, \"menu2\");\n\n\t\tmenu1.add(menu2);\n\t\tmenu2.add(menu1);\n\t\tsubMenuBar.add(menu1);\n\t\tsubMenuBar.add(menu2);\n\n\t\tmenuBarMenu.add(menu1);\n\t        menu1.add(menu2);\n\n//\t\tmenu2.add(menuBarMenu);\n\n        // jMenuBarMenu.add(menuBarMenu);\n\n\t\t// JMenu testMenu = new JMenu(\"TestMenu\");\n\n        // JMenu testMenu = new JMenu(\"TestMenu\");\n        // testMenu.setMnemonic(10);     \n//        menu1.add(testMenu);\n\n\t\tfinal JMenu testMenu = new JMenu(\"TestMenu\");\n\t\tJMenuBar subMenuBarMenu = new JMenuBar(testMenu);\n\t\taddMenuBarItem(subMenuBarMenu, \"MenuTest\");\n//                menu1.add(subMenuBarMenu);    \n\n//        JMenu testMenu = new JMenu(\"TestMenu\");\n//        testMenu.add(menu1);\n\n\t\t// addMenuBarItem(menuBarMenu, \"menuTest\");\n\n\t\tmenu1.add(menuBarMenu);\n\n\t\tassertEquals(subMenuBarMenu.size(), menuBarMenu.getMenuCount());\n        final JMenu barMenu = new JMenu(\"barMenu\");\n        menu1.add(barMenu);\n\n    \tStringBuffer sb = new StringBuffer().append(\"Menu \").append(menu1.getMenuCount());    \t\n\n\t\t// sb.append(\", \").append(\"Menu \").append(menu1.getMenuCount());\n\n        barMenu.add(menu1);\n\n\t\t// addMenuBarItem(menuBarMenu, \"testMenu\");\n\n\t\tmenu2.add(menu1);\n\t\tmenu1.add(menu2);\n\n\t\tmenu1.add(menu2);\n\n\t\tmenuBarMenu.add(menu1);\n\n\t\tassertEquals(menuBarMenu.getMenuCount() + menu2.getMenuCount() + menu1.getMenuCount() + \n\t\t\t\t\t\t\t\t\t menu2.getMenuCount(), menuBarMenu.getMenuCount());\n\n        assertEquals(menu2.getMenuCount() + menu1.getMenuCount() + menu2.getMenuCount(), menuBarMenu.getMenuCount());\n\n\t\tmenuBarMenu.add(menuBar);\n\n\t        assertEquals(menu2.getMenuCount() + menu1.getMenuCount() + menuBarMenu.getMenuCount() +\n\t                                 menuBarMenu.getMenuCount(), menuBarMenu.getMenuCount());\n\n\t\tmenuBarMenu.add(menu1);\n\n\t    // assertEquals(menuBarMenu.getMenuCount() + menu1.getMenuCount() + menu2.getMenuCount(), \n\t    // menuBarMenu.getMenuCount());\n\n              assertEquals(menu2.getMenuCount() + menuBarMenu.getMenuCount() + \n              menuBarMenu.getMenuCount(), menuArray2.getMenuCount());\n\t}\n\n\tprivate static JMenu[] menuArray2 = new JMenu[3];\n\tprivate static JMenu menuArray1[] = new JMenu[4];\n\t/**\n\t * testMenuCount\n\t * @param jMenuBar\n\t *                the jMenuBar\n\t * @param menuCount\n\t *                the menuCount\n\t * @return the arrayOf JMenu\n\t */\t\n\tprivate static JMenu[] testMenuCount(JMenuBar jMenuBar, int menuCount) {\n\t\tJMenu[] menuArray = checkArray(menuArray1, jMenuBar);\n\t\tcheckArray(menuArray1, menuArray[menuCount]);\n\t\treturn menuArray;\n\t}\n\t\n\t/**\n\t * checkArray\n\t * @param array1\n\t *                the array of JMenu\n\t * @param array2\n\t *                the array of JMenu\n\t * @return the array of JMenu\n\t */\n        private static JMenu[] checkArray(JMenu[] array1, JMenu[] array2) {\n        \tfor (int i = 0; i < array2.length; i++) {\n\t        \tboolean found1 = false;\n\t        \tboolean found2 = false;\n\t        \tfor (JMenu jMenu : array1) {\t        \t\n\t        \t\tif (jMenu.equals(array2[i])) {\n\t                \tfound1 = true;\n\t                \tbreak;\n\t            \t}\n\t            }\n\t        \tif (!found1) {\n            \tfound2 = false;\n            \t}\n        \t}\n\n        \tassertTrue(found1);\n        \tassertTrue(found2);\n        \t\n        }\n\n        /**\n         * checkMenuCount\n         *\n         * @param jMenuBarMenu\n         *                the jMenuBarMenu\n         * @param jMenuCount\n         *                the jMenuCount\n         * @return the JMenuCount\n         */\n        private static int checkMenuCount(JMenuBarMenu jMenuBarMenu, int jMenuCount) {\n            JMenu[] menuArray = jMenuBarMenu.getJMenu();\n            if (menuArray!= null) {\n                for (int i = 0; i < menuArray.length; i++) {\n                    boolean found1 = false;\n\n                    for (int k = 0; k < menuArray.length; k++) {\n                        if (menuArray[i].equals(menuArray[k])) {\n                            found1 = true;\n                            break;\n                        }\n                    }\n\n                    if (!found1) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                }\n\n            } else\n                return -1;\n\n        }\n\n        /**\n         * checkMenuCount\n         *\n         * @param jMenuBarMenu\n         *                the jMenu bar menu\n         * @param jMenuCount\n         *                the j Menu Count\n         * @return the JMenuCount\n         */\n        private static int checkMenuCount(JMenuBarMenu jMenuBarMenu, int jMenuCount) {\n            JMenu[] menuArray = jMenuBarMenu.getJMenu();\n            if (menuArray!= null) {\n                for (int i = 0; i < menuArray.length; i++) {\n                    boolean found1 = false;\n\n                    for (int k = 0; k < menuArray.length; k++) {\n                        if (menuArray[i].equals(menuArray",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@org.junit.jupiter.api.Test\n\tvoid testAddMenuBarItem() {\n\t\tString s = \"\";\n\t\tJMenuBar menuBar = new JMenuBar();\n\t\tJMenu menu = JMenuHelper.addMenuBarItem(menuBar, s);\n\t\ts = \"\";\n\t\tassertNotNull(menu);\n\t\tassertNotNull(menu.getText());\n\t\tmenu = null;\n\t\tassertNull(menu.getText());\n\t\t\n\t\tmenuBar.add(menu);\n\t\tJMenuItem menuitem = menuBar.findMenuItem(s);\n\t\ts = \"jmenu_item_1\";\n\t\tassertNotNull(menuBar.findMenuItem(s));\n\t\tmenu = JMenuHelper.addMenuBarItem(menuBar, s);\n\t\ts = \"\";\n\t\t\n\t\tassertNotNull(menuBar.findMenuItem(s));\n\t\ts = \"menu_item_2\";\n\t\tmenu = null;\n\t\tassertNull(menu);\n\t}\n\t\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "7ad3f55d-982f-479a-a67c-1ec28471a4ec",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/controller/JMenuHelper.java",
    "original_code": "// JMenuHelper.java\npackage visu.handball.moves.controller;\n\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class JMenuHelper {\n\n    public static JMenu addMenuBarItem(JMenuBar menuBar, String s) {\n        JMenu menu;\n        /**\n         * Suche nach '_' und nimm das n\u00e4chste Zeichen als Mnemonic,\n         * sonst: normales Menu\n         */\n        if (s.indexOf(\"_\") > -1) {\n            int pos = s.indexOf(\"_\");\n            char c = s.charAt(pos + 1);\n            StringBuffer sb = new StringBuffer(s).delete(pos, pos + 1);\n            menu = new JMenu(sb.toString());\n            menu.setMnemonic(c);\n        } else\n            menu = new JMenu(s);\n        menuBar.add(menu);\n        return menu;\n    }\n}\n",
    "test_prompt": "// JMenuHelperTest.java\npackage visu.handball.moves.controller;\n\nimport java.awt.event.*;\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JMenuHelper}.\n* It contains one unit test case for the {@link JMenuHelper#addMenuBarItem(JMenuBar, String)} method.\n*/\nclass JMenuHelperTest {",
    "time_taken": 63.19255089759827,
    "usage": {
        "prompt_tokens": 365
    }
},
{
    "choices": [
        {
            "text": "\n    /**\n\t * Test of getColorModel() method, of class Main.\n\t */\n    @Test\n    public void test_getColorModel() {\n        System.out.println(\"getColorModel()\");\n\n\t    ColorModel colorModel = Main.getColorModel();\n\t    assertNotNull(\"ColorModel object is null.\", colorModel);\n\t    assertTrue(\"ColorModel-Id-0 is not Null.\", colorModel!= null);\n\t    assertTrue(\"ColorModel-Name-0 is not Null.\", colorModel!= null);\n    }\n\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tstatic void startFrame(String name)\n\t\tthrows Exception {\n\t\tObject obj = Main.getColorModel().getObject(name);\n\t\tassertNotNull(obj);\n\t\tMain.setWindowToShow(obj);\n\t\t\n\t\tbyte[] icon = \"icon.png\".getBytes();\n        ClassLoader classLoader = Main.class.getClassLoader();\n\t\tURL u = classLoader.getResource(\"res/icons/1.png\");\n        ImageIcon icon1 = new ImageIcon(u);\n        classLoader.getClass().getClassLoader().replace(u,icon1.getImage());\n\t\t\n        Main.startFrame(Main.getColorModel().getObject(name));\n//\t\tassertEquals(icon1.getImage(), new ImageIcon(Resources.getDefault().getResource(\"res/icons/icon.png\")));\n\t}\n\t\n\t@Test\n\tpublic void testGetColorModel() throws Exception {\n\t\tassertEquals(Main.getColorModel().getObject(Main.NAME), Main.getColorModel().getObject(Main.NAME",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tpublic void test_01Init_SetColorModel() {\n\t\tSystem.out.println(\"01Init_SetColorModel\");\n\t\tMain.getColorModel().setName(\"Main\");\n\t\tMain.getColorModel().setValue(Color.RED);\n\t\tassertEquals(\"Test setColorModel\",  Main.getColorModel().getName(), Main.getColorModel().getValue().getRGB());\n\t}\n\n\t@Test\n\tpublic void test_02Open_Open_SetColorModel() throws Exception {\n\t\tSystem.out.println(\"02Open_Open_SetColorModel\");\n\t\tOpenAction a = new OpenAction( null );\n\t\ta.run();\n\t\tColorModel cm = Main.getColorModel();\n\t\tassertNotNull(\"Test colorModel\", cm);\n\t\tassertEquals(\"Test colorModel.getName\", cm.getName(), Main.getColorModel().getName());\n\t\tMain.getColorModel().setValue(Color.BLACK);\n\t\tMain.getColorModel().setName(\"Main\");\n\t\tMain.getColorModel().",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static ColorModel colorModel = new ColorModel(16, 1, 1, 1);\n\t\n\t/**\n\t * Test method for {@link Main#getColorModel()}.\n\t * @throws Exception \n\t */\n\t@Test\n\tpublic void testGetColorModel() throws Exception {\n\t\t\n\t\tJFrame wnd = new JFrame(\"Main: \");\n\t\twnd.setBounds(100, 100, 650, 700);\n\t\tJPanel p1 = new JPanel();\n\t\tJToolBar bar = new JToolBar();\n\t\tp1.add(bar);\n\t\tbar.add(new MouseController());\n\t\tp1.add(new CommentController());\n\t\tp1.add(new TableHandballModel());\n\t\tBarHelper barHelper = new BarHelper(tableView);\n\t\t\n\t\twnd.add(p1);\n\t\twnd.setUI(new JMenuBar());\n\t\twnd.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n\t\t\n\t\twnd.add(createCommentComponent(),",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Teste das {@link Main#getColorModel()} wird zur Auswirkung.\n\t\t */\n    @Test\n    public void getColorModelTest() {\n\t\t// Set-up\n\t\tString[] testcases = new Color[] {\n  \t\t\t\"#f0f0f0\",\n  \t\t\t\"#ff0000\",\n\t  \t\t\t//@formatter:off\n  \t\t\t\"#ff0000\",\n  \t\t\t\"#926862\",\n  \t\t\t\"#ffffff\",\n  \t\t\t\"#cc3333\",\n  \t\t\t\"#f2b36f\",\n  \t\t\t\"#ffff0000\",\n  \t\t\t\"#926862\",\n  \t\t\t\"#ffffffff\",\n  \t\t\t\"#c800000\",\n  \t\t\t\"#ffff8000\",\n  \t\t\t\"#00000000\",\n  \t\t\t//@formatter:on\n\t\t\t};\n  \t\t// @formatter:on\n\t\tfor (String testname1 : testcases) {\n  \t\t\t// Set-up\n  \t\t\tColor c = getColorModel().get(0);\n",
            "finish_reason": "length"
        },
        {
            "text": "public static final boolean TRUE =  true;\n\t\tpublic static final boolean FALSE = false;\n\t\n    /**\n     * Erstellt deaktiviert un-seinig zu einem Test\n     * @throws Throwable\n     */\n    @Test\n    void testInitColorModel() throws Throwable {\n    \tassertNotNull(Main.getColorModel());\n    \tcolorModel = Main.getColorModel();\n    }\n\t\n        private static ImageIcon icon() {\n\t\t    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icon/Home.png\")); \n\t\t    return icon;\n\t\t}\n\t\n\t/**\n\t * F\u00fcgt auf eine neue Instanzen ein.\n\t * @param args\n\t * @throws Exception\n\t */\n\t@Test\n\tpublic void testNewEmpty() throws Exception {\n\t\tMain.newEmpty(Color.BLACK);\n\t}\n\t\t\n\t@Test\n\tpublic void testNewEmpty1() throws Exception {\n\t\tString test1 = new",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Standard Konstruktor.\n\t\t*/\n  public Main_0Test() {\n  }\n\n  /**\n\t * Gibt alle Tests zur\u00fcck.\n\t *\n\t * @return all Tests zur\u00fcck\n\t*/\n  @Test\n  public void allFunctions() {\n    assertNotNull(Main.getColorModel());\n    assertEquals(14, getColorModel().getNumColors());\n    assertEquals(30, getColorModel().getNumColorRows());\n    assertNull(nullRef(Main.getColorModel().getTableHeader()));\n\t\t/*\n    assertNotNull(Main.getColorModel().getTableHeader().getFont());\n    assertEquals(9, Main.getColorModel().getTableHeader().getRowHeight());\n    assertEquals(Color.blue, Main.getColorModel().getTableHeader().getForeground());\n\n    assertNotNull(Main.getColorModel().getTableHeader().getRowHeight());\n    assertNull(Main.getColorModel().getTableHeader().setFont(",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n    public void testGetColorModel() {\n\t\tassertNotNull(Main.getColorModel());\n    }\n\t\n\t@Test\n    public void test_001_Init() {\n\t\t\n\t\tfinal JFrame parentWindow = new JFrame(\"ParentWindow\");\n        parentWindow.setDefaultCloseOperation(WindowEvent.HIDE_ON_CLOSE);\n        parentWindow.getContentPane().setLayout(new BorderLayout());\n        JPanel buttonPane = new JPanel();\n        buttonPane.setBackground(new Color(159, 159, 158));\n        parentWindow.getContentPane().add(buttonPane, BorderLayout.SOUTH);\n        \n        final JMenuBar menuBar = new JMenuBar();\n        buttonPane.setBorder(new LineBorder(Color.BLACK));\n        parentWindow.getContentPane().add(menuBar, BorderLayout.NORTH);\n        \n        JMenu m = new JMenu(\"MENU\");\n        menuBar.add(m); \n        ButtonAction a1 = get",
            "finish_reason": "length"
        },
        {
            "text": "\n    private Main main;\n    private String fileName;\n    \n    /**\n     *  Constructor\n     * @param fname file name\n     */\n    public Main_0Test(String fname) {\n        fileName = fname;\n        main = new Main();\n    }\n    \n    /**\n     * Test method for\n     * {@link Main#Main(java.lang.String)}.\n     */\n    @Test\n    public void testMain() {\n    }\n    private final static ColorModel colorModel = new ColorModel() ;\n    \n\tpublic String getFileName() {\n\t\treturn fileName;\n\t}\n    \n\t/**\n     *  test getting colorModel from Main\n     */\n    @Test\n    public void testGetColormodel() {\n        main.getColorModel();\n\t\tassertEquals(Main.COLORS[colorIndex], colorModel.toStringColor());\n    }\n    private final static String COLORS[] = {\"#000000\", \"#858500\"};\n    private static int colorIndex=",
            "finish_reason": "length"
        },
        {
            "text": "private Main app;\n\n\t\t/**\n\t\t* Set up this test class.\n\t\t*/\n\t\tpublic Main_0Test(){\n\t\t\t\tthis.app =  new Main();\n\t\t}\n\n\t\t/**\n\t\t* Test of open action.\n\t\t*/\n\t\t@Test\n\t\tpublic void testOpenAction(){\n\t\t\t\tassertNotNull(this.app.getColorModel());\n\t\t\t\tString expectedResult = \"Main 1 {\\\\n\\\\t\\\\t\\\\t{col:#00ff00}\\\\n\\\\t\\\\t\\\\t{col:#f00f00}\\\\n\\\\t\\\\t\\\\t{col:#000000}\\\\n\\\\t\\\\t\\\\t{col:#ffff00}\\\\n\\\\t\\\\t\\\\t{col:#ff0000}\\\\n\");\n\t\t\t\tJFrame frame = new JFrame();\n\t\t\t\tJPopupMenu menu = new JPopupMenu();\n\t\t\t\tthis.app.newPopUpMenu(menu, frame, new Object() {\n\t\t\t\t\t public String getID(){\n\t                        return ID;\n\t                    }\n\t                });\n\t\t\t\tassertEquals(expectedResult, this.app.",
            "finish_reason": "length"
        }
    ],
    "id": "c5ba2b62-a3d3-4f01-9166-0854e4bd113c",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_0Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static ColorModel getColorModel() {\n        return colorModel;\n    }\n}\n",
    "test_prompt": "// Main_0Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getColorModel()} method.\n*/\nclass Main_0Test {",
    "time_taken": 13.444565773010254,
    "usage": {
        "prompt_tokens": 1806
    }
},
{
    "choices": [
        {
            "text": "\n\n    public static final int COLUMN2W = 2;\n    public static final int COLUMN2V = 2;\n    public static final int COLUMN2H = 2;\n\n    public static final String NAME = \"TestName\";\n\n    public static final Color ICON_COLOR = new Color(200, 0, 0);\n    public static final Color ICON_DEFAULT_COLOR = new Color(255,0,0);\n\n\tprivate JFrame window =null;\n        private JDesktopPane pane =null;\n    public void setUp(){\n        window = new JFrame();\n        window.getContentPane().add(createJDesktopPane(), BorderLayout.CENTER);\n    }\n    \n    public JPanel createJPanel(){\n        ColorModel colorModel = new ColorModel();\n        colorModel.setColorTo(ICON_COLOR);\n\n        JScrollPane pane = new JScrollPane(new JTable(colorModel));\n        pane.setBorder(null);\n        pane.setName(NAME);\n\n        JToolBar toolBar = new J",
            "finish_reason": "length"
        },
        {
            "text": "\n    static {\n        System.setProperty(\"java.awt.headless\", \"true\"); // test\n    }\n\t\n\t/**\n\t * Test des Testcases.\n\t * Die darauf abgefragte Listener wird davon als neue Listener aufgelehrt werden k\u00f6nnen.\n\t *\n\t * @throws InterruptedException wird geschrieben, ob eine Thread erfolgen wird.\n\t*/\n    @Test\n    public void testGetWindow() throws InterruptedException {\n        getWindow();\n    }\n\t\n    @Test\n\tpublic void testJMenuBar() {\n\t\tJPanel menu_bar_contents = JMenuBar.getMenuBar( JDesktopPane.create( null ) );\n\t\tassertEquals( menu_bar_contents.getName(), \"JMenuBar\";\n\t\tassertTrue( menu_bar_contents == JMenuBar.getMenuBar( JDesktopPane.create( null ) ) );\n\t\t\n\t\tmenu_bar_",
            "finish_reason": "length"
        },
        {
            "text": "@Test\n\t\tvoid getWindow() throws Exception {\n\t\t\tMain window = new Main();\n\t\t\twindow.setVisible(true);\n\t\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "public static JFrame getWindow() {\n\t\treturn window;\n\t}\n\n    public static JDesktopPane getDesktopPane() {\n        return jDesktopPane;\n    }\n\n    public static JFrame getJFrame() {\n        return window;\n    }\n\n    public static JDesktopPane getDesktopPane() {\n        return window;\n    }\n\n    public static JDesktopPane getDesktopPane() {\n        return jDesktopPane;\n    }\n\n    public static JDesktopPane getWindow() {\n        return window;\n    }\n\n    @Test\n    public void test() throws Exception {\n        JFrame jFrame = getJFrame();\n        Main main = new Main();\n        main.getDesktopPane().removeAll();\n        main.getWindow().addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent evt) {\n                jFrame.setVisible(false);\n\n            }\n        });\n\n\t\tmain.getDesktopPane().add(getJFrame());\n        jFrame.setVisible",
            "finish_reason": "length"
        },
        {
            "text": "\n\t@Test\n\tvoid getWindow() throws Exception {\n\t\tString pathToResource = getClass().getResource(\"Test_1.txt\").getPath();\n\n\t\tFile objFile = new File(pathToResource);\n\n\t\tassertNotNull(objFile.getName());\n\n\t\tJDesktopPane desktop = new JDesktopPane(null);\n\t\tJFrame frame = new JFrame(\"Test1\");\n\t\tObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n\t\tout.writeObject(new HandballModel(new Object[] { new ByteArrayInputStream(new byte[]{10, 10}), new Color(123, 123, 123)}));\n\t\tout.close();\n\t\tout = new ObjectOutputStream(new ByteArrayOutputStream());\n\t\tout.writeObject(new HandballModel(new Object[] { new ByteArrayInputStream(new byte[]{10, 10}), new Color(123, 100, 100) }));\n\t\tout.close();\n\t\tout = new ObjectOutputStream(new ByteArrayOutputStream());\n\t\tout.writeObject(new HandballModel(new",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     * This unit test case is meant for static code.\n     * Any code that runs in this test case needs modification.\n     */\n    @Test\n    public void test_getWindow() {\n\t\t/*\n        * Tests if the object's static variables have been initialized correctly, including the value\n        * of the {@link Main#window} static variable.\n        */\n        final JFrame frame = new JFrame(\"Basic Test\");\n        final JDesktopPane desktop = new JDesktopPane();\n        FrameTest frameTest = new FrameTest();\n        frameTest.run(frameTest); // Run the test\n        frameTest.assertJFrames();\n        frameTest.assertWnd();\n        frame.getContentPane().removeAll();\n        frame.getContentPane().add(desktop, BorderLayout.CENTER);\n        frame.setVisible(false);\n        try{\n            frameTest.assertJFrames();\n            frameTest.assertWnd();\n        } catch (Exception e){}\n        frame = null;   // This should make sure that the program",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n    * Main method\n    * @param args unused\n    */\n    public static void main(String[] args) {\n        new Main_.1Test().run();\n    }\n\n}\n\nclass Main_1Test {\n\t\t\n    public Object execute(JPanel panel) {\n            // Create the JDesktopPane for the screen\n        \tJDesktopPane jDeskPane = new JDesktopPane();\n\t\t\t\t/* jDeskPane.add(jToolBar, BorderLayout.NORTH);\n\t\t\t\tjDeskPane.add(new JMenuBar(), BorderLayout.SOUTH);\n\t\t\t\tjDeskPane.add(panel, BorderLayout.CENTER);\n\t\t\t\tjDeskPane.add(new JScrollPane(), BorderLayout.EAST);\n//\t\t\t\tjDeskPane.add(new Field(new ImageIcon(Resources.getImageUrl(\"field.image.png\"))), BorderLayout.CENTER);\n\t\t\t*/\n        \t// Get the main frame\n        \tJFrame frame = new JFrame();\n\t\t\t// Add the main frame to the desktop",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate final String TITLE = \"TestTitle\";\n\tprivate final JFrame frame = new JFrame();\n\tprivate final JDesktopPane dp = new JDesktopPane();\n\t\n\t\n\t@Test\n\tvoid getWindowWorks() {\n\t\t\n\t\twindow.setTitle(TITLE);\n\t\twindow.setLocation(new Point(100, 100));\n\t\twindow.pack();\n\t\tframe.setPreferredSize(new Dimension(400, 400));\n\t\tframe.setVisible(true);\n\t\t\n\t\tsynchronized (this) {\n\n\t\t}\n\t}\n\t\n\tprivate Thread getNewThread(final ObjectInputStream inputStream) throws Exception {\n\t\tThread newThread = new Thread(new Object() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void run () {\n\t\t\t\ttry {\n\t\t\t\t\tbyte bytes[] = inputStream.readByteArray();\n\t\t\t\t\tByteArrayOutputStream baos =  new ByteArrayOutputStream(bytes.length);\n\t\t\t\t\t\n\t\t\t\t\tnew ObjectOutputStream(bc.getOutputStream()) {\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tserialVersionUID = 0L;\n",
            "finish_reason": "length"
        },
        {
            "text": "\n}\n// EventTest.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static final int frameWidth = 300;\n    private static final int frameHeight = 400;\n\t\n    private static final ObjectOutputStream streamToWriteTo = new ObjectOutputStream(new BufferOutputStream(frameWidth, frameHeight));\n\t\n\tprivate static final ObjectInputStream streamFromWriteTo = new ObjectInputStream(new BufferInputStream(frameWidth, frameHeight));\n\t\n    @Test\n    public void test() {\n\n        final Main window = getWindow();\n        System.setProperty(\"java.awt.headless\", \"true\");\n        Display display = (Display) Toolkit.getDefaultToolkit().getScreenDevice().getDefaultDisplay();\n        final DisplayMode mode = display.getDisplayMode();\n        final boolean widthAndHeight = (mode.getWidth()!= 0 || mode.getHeight()!=0 ); \n        final boolean heightAndWidth = (mode.getWidth()!= 0 || mode.getHeight() == mode.getWidth());\n\t\t\n\t\tfinal WindowAdapter windowAdapter = new WindowAdapter() {\n\n\t\t\t@Override\n\t\t\tpublic void windowClosing(WindowEvent e",
            "finish_reason": "length"
        }
    ],
    "id": "150b45bb-f296-46a7-9824-1ca8e1c07462",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_1Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static JFrame getWindow() {\n        return window;\n    }\n}\n",
    "test_prompt": "// Main_1Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getWindow()} method.\n*/\nclass Main_1Test {",
    "time_taken": 13.290807247161865,
    "usage": {
        "prompt_tokens": 1803
    }
},
{
    "choices": [
        {
            "text": "\n\tpublic Main_2Test() {\n\t}\n\n\t@Test\n\tpublic void test() {\n\t\tTestField();\n\t\tMain();\n\t\tMain_2Test_2();\n\t}\n\n\tprivate void TestField() {\n    \tField field = Main.getField();\n    \tassertNotNull(field);\n\t\tassertEquals(\"titlelabel\", field.getTitleLabel());\n\t\tassertEquals(\"tablabel\", field.getTabLabel());\n\t\tassertEquals(\"border\", field.getBorder());\n\t\tassertEquals(\"enabled\", field.isEnabled());\n\t\tassertFalse(field.isEditable());\n\t\tassertFalse(field.isEnabled());\n\t\tassertFalse(field.isSelectable());\n\t\tassertFalse(Main.getSelectionSupport());\n\t\tassertFalse(field.isDisplayList());\n\t\tassertNotNull(field.getPaintablePanel());\n\t\tassertEquals(tablePanel, field.getPaintablePanel());\n\t\tassertNotNull(field.getColorModel());\n    \tassertArrayEquals(field.getTable().getSelectionModel().getSe",
            "finish_reason": "length"
        },
        {
            "text": "\n\t//------------------------------------------------------------------------------------------------------------------\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tMain_2Test test = new Main_2Test();\n\t\ttest.go();\n\t}\n\t\n\t//------------------------------------------------------------------------------------------------------------------\n    private void go() throws InterruptedException{\n        setField(Resources.getTableMoves());\n        Main_2Test.go();\n    }\n\t\n\t//------------------------------------------------------------------------------------------------------------------\n    public void setField(TableHandballModel field){\n        JTable table = new JTable(new TableHandballModel());\n        table.setTableHeader(new TableHeader());\n        new CommentTableCellDelayEditor(table);\n        new EventTableCellDelayEditor(table);\n\t\ttable.setModel(new TableSelectionListener(table));\n        table.setBorder(BorderLayout.EAST);\n        table.setShowGrid(false);\n        table.setFillsViewportHeight(true);\n        table.setRowHeight(30);\n        table.setRowSelectionAllowed(false);\n        table.setAutoResizeMode(J",
            "finish_reason": "length"
        },
        {
            "text": "\n\t    JPanel p;\n\t    JPanel p2;\n\t    JPanel p1;\n\n\t    private EventTableCellRenderer rend;\n\n\t    public Main_2Test () {\n\t        /**\n\t        * Initialise the JPanel.\n\t        */\n\t//        field = new MyField();\n\t        p = new JPanel(new BorderLayout());\n\t        p1 = new JPanel(new BorderLayout());\n\t        p1.add(field, BorderLayout.WEST);\n\n\t        p1.setMaximumSize(new Dimension(100, 60));\n\t\n\t    }\n\t    public void test1() {\n\t    \n\t        System.out.println(\"Start:\");\n\t        JFrame f = new JFrame();\n\t        f.setLayout(new BorderLayout());\n\t        Button b = new Button();\n\t        f.add(new JPanel(), BorderLayout.NORTH);\n\n\t        JMenuBar bar = new JMenuBar();\n\t        JMenu m1 = new JMenu(\"Test Menu\");\n\t        ",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void testConstructor() {\n        JFrame frame_2a = new JFrame();\n        final Main main = new Main();\n        main.start(frame_2a);\n        assertTrue(\"Frame has not been started\", frame_2a.isVisible());\n\n        JFrame frame_2b = new JFrame();\n        frame_2b.setUndecorated(true);\n        final Main main_2 = new Main();\n        main_2.start(frame_2b);\n        assertTrue(\"Frame has not been started\", frame_2b.isVisible());\n\n\t\ttry {\n\t\t\tframe_2a.dispose();\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\t\t\n\t\t}\n    }\n\t\n\n    @Test\n    public void testStart() {\n        JFrame frame_2a = new JFrame();\n        final Main main = new Main();\n        JToolBar toolBar = new JToolBar();\n        \n        final PlayerToolBar playerToolBar = new PlayerToolBar();\n        final",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    void testGetField() {\n        final ColorModel colorModel1 = new ColorModel(Color.BLUE, Color.DARK_GRAY);\n        final ColorModel colorModel2 = new ColorModel(Color.BLUE, Color.DARK_GREEN);\n        final ColorModel colorModel3 = new ColorModel(Color.RED);\n        final ByteArrayInputStream bais = new ByteArrayInputStream(Resources.Resource_File_Data.getBytes(\"UTF-8\"));\n        final ObjectInputStream ois = new ObjectInputStream(bais);\n        final JFrame frame = new JFrame(\"test\");\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(600, 500);\n        frame.setLocationRelativeTo(null);\n\n        frame.add(new ImageIcon(Resources.Resource_File_Data), BorderLayout.CENTER);\n        frame.pack();\n        frame.setVisible(true);\n        frame.add(new JPanel(), BorderLayout.CENTER);\n\n        main.getField",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void testGetField() {\n        Main.field.setEnabled(true);\n        String expected = ((Main.class.getName() + \".\" + this.getClass().getName()).concat(\".\"));\n        String actual = ((Main.class.getField(\"field\")).get(Main.class).toString());\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testChangeColors() {\n        Main.field.setEnabled(true);\n        Color oldColor = ((ColorModel) Main.field.getModel().getSelectedItem()).getColor();\n        Color newColor = ColorModel.RANDOM.nextColor();\n        Main.field.setBackground(newColor);\n        \n        assertEquals(oldColor, ((ColorModel) Main.field.getModel().getSelectedItem()).getColor());\n    }\n\n    @Test\n    public void testCloseFrame() throws Exception {\n    \tMain.field.setEnabled(true);\n        final JFrame jf = new JFrame(\"Main",
            "finish_reason": "length"
        },
        {
            "text": "static int NUM_EVEN = 30;\n\t\tstatic int NUM_ODD = 6;\n\t\tstatic int NUM_EVER = 25;\n\t\tstatic int NUM_ALL = NUM_ODD + NUM_EVEN + NUM_EVER;\n\n\t\t/**\n\t\t * Unit test for the {@link Main#getField()} method.\n\t\t * Initializes the table and test that the data table \n\t\t * correctly updates when the size changes\n\t\t * @throws Exception exception\n\t\t * @precondition\n\t\t */\n\t\t@Test\n\t\tpublic void checkFieldData() throws Exception {\n\t\t\tField field = new Field(Resources.getInstance().getTableField(), NUM_EVEN, NUM_ODD);\n\t\t\tassertEquals(NUM_EVEN, field.getWidth());\n\t\t\tassertEquals(NUM_ODD, field.getHeight());\n\t\t}\n\n\t\t/**\n\t\t * Check {@link Main#getField()} returns the right table field\n\t\t * @throws Exception exception\n\t\t * @precondition\n\t\t */\n\t\t@Test\n\t\tpublic void checkField() throws Exception {\n\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate JFrame window;\n\tprivate CommentView commentView;\n\tprivate EventTableCellDelayEditor eventTableCellDelayEditor;\n\tprivate EventTableCellRenderer eventTableCellRenderer;\n\tprivate TableHandballModel model;\n\tprivate PlayerToolBar playerToolBar;\n\tprivate MouseController mouseController;\n\tprivate CommentController commentController;\n\tprivate MouseController childMouseController;\n\n\tpublic Main_2Test () {\n\t\tcommentView = new CommentView(\"\", model);\n\t\tcommentController = new CommentController();\n\t\teventTableCellDelayEditor = new EventTableCellDelayEditor(eventTableCellRenderer);\n\t\twindow = new JFrame(\"TestFrame\");\n\t\twindow.setPreferredSize(new Dimension(1000, 300));\n\t\tWindowEvent we = new WindowEvent(window, WindowEvent.WINDOW_CLOSING);\n\t\t\twindow.addWindowListener(we);\n\t\tComponent a = ((Component) (JDesktopPane.getDesktop().getMainWindow())).getBrowser().getSelectionModel().getSelectionModel().getAnchor();\n\t\t",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test of the unit test {@link Main#getField()}. \n\t*/\n\t@Test\n\tpublic void getField_1() {\n\t\tSystem.out.println(\"Testing getField()\");\n\t\t\n\t\tHandballModel handballModel = new TableHandballModel();\n\t\tassertSame(\"Test\",getField());\n\n\t}\n\n\t/**\n\t * Test of the unit test {@link Main#getField()}. \n\t*/\n\t@Test\n\tpublic void getField_2() {\n\t\tSystem.out.println(\"Testing getField()\");\n\t\t\n\t\tString str = new String(\"test\");\n\t\tassertNotSame(\"Test\",getField());\n\t\t\n\t\tfield.getComponentAt(5,5).removeMouseListener(field);\n\t\t//field.removeListener(field);\n\t\tgetField().setBackground(Color.red);\n\t}\n\n\t/**\n\t * Test of the unit test {@link Main#getField()}. \n\t*/\n\t@Test\n\tpublic void getField_3() {\n\t\tSystem.out.println(\"",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Method to call \"New\" of a new Move object.\n\t\t*/\n\t\t@Test\n\t\tpublic void newMove() {\n\t\t\tDisplayWindowEventHandler.pushWindowHandler(CreateMovePdfAction.class, null);\n\t\t\tassertEquals(Main.getField(), new Move());\n\t\t\tDisplayWindowEventHandler.popWindowHandler();\n\t\t}\n\t\t@Test\n\t\tpublic void newSequence() {\n\t\t\tDisplayWindowEventHandler.pushWindowHandler(NewSequenceAction.class, null);\n\t\t\tassertNotEquals(Main.getField(), newSequence());\n\t\t\tDisplayWindowEventHandler.popWindowHandler();\n\t\t}\n\t\t@Test\n\t\tpublic void newMoveName() {\n\t\t\tDisplayWindowEventHandler.pushWindowHandler(NewMoveEventAction.class, null);\n\t\t\tassertEquals(Main.getField(), newMoveName());\n\t\t\tDisplayWindowEventHandler.popWindowHandler();\n\t\t}\n\t\t@Test\n\t\tpublic void newName() {\n\t\t\tDisplayWindowEventHandler.pushWindowHandler(NewAction.class, null);\n\t\t\tassertEquals(Main.getField(),",
            "finish_reason": "length"
        }
    ],
    "id": "a30f2a5f-2e5f-4150-971c-cc65f1942a9e",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_2Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static Field getField() {\n        return field;\n    }\n}\n",
    "test_prompt": "// Main_2Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getField()} method.\n*/\nclass Main_2Test {",
    "time_taken": 13.33415412902832,
    "usage": {
        "prompt_tokens": 1802
    }
},
{
    "choices": [
        {
            "text": "\n    /**\n     * Tests the creation of the {@link Main}.\n     */\n    @Test\n    public void creationTest() {\n        Main.create(new ColorModel());\n    }\n   \n    /**\n     * Tests the creation of the {@link Main} from an existing {@link javax.swing.JFrame}.\n     * @throws Exception if {@link Main} can not be created\n     */\n    @Test\n    public void create_getNewFrame() throws Exception {\n        Main.create(new TableHandballModel());\n    }\n    \n    /**\n     * Tests the creation of the {@link Main} from an existing {@link javax.swing.JDesktopPane}.\n     * @throws Exception if {@link Main} can not be created\n     */\n    @Test\n    public void create_GetJDesktopPane() throws Exception {\n        Main.create(new JDesktopPane());\n    }\n    \n    /**\n     * Tests the creation of the {@link Main} from an existing {@link",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Test method for {@link Main#main(java.awt.Frame)}.\n\t\t* It checks if the correct exceptions are thrown.\n\t\t*/\n\t\t@Test\n\t\tpublic void testMain_1() {\n\t\t\tMain.main(new JFrame());\n\t\t}\n\n\t\t/**\n\t\t* Test method for {@link Main#main(java.awt.Frame)}.\n\t\t* It checks if the correct exception is thrown.\n\t\t*/\n\t\t@Test\n\t\tpublic void testMain_2() {\n\t\t\tMain.main(null, true);\n\t\t}\n\n\t\t/**\n\t\t* Test method for {@link Main#main(java.awt.Frame)}.\n\t\t* It checks if the correct exception is thrown.\n\t\t*/\n\t\t@Test\n\t\tpublic void testMain_3() {\n\t\t\tMain.main(null, false);\n\t\t}\n\n\n\t\t/**\n\t\t* Test method for {@link Main#main(java.awt.Frame)}.\n\t\t* It checks if the correct exception is thrown.\n\t\t*/\n\t\t@Test(expected",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Method with test for the {@link Main#getSaveAction()} method.\n\t\t*/\n\t\t@Test\n\t\tpublic void testSaveAction(){\n\t\t\t\tMain.getSaveAction();\n\n\t\t\t\t// Assertion, that the return value of the save method is a color model.\n\t\t\t\tassertNotNull(Main.getSaveAction());\n\n\t\t\t\t// Assertion, that the table contains 1 item (0 color).\n\t\t\t\tassertEquals(1, Main.getTable().getRowCount());\n\n\t\t\t\t// Assertion, that the table contains 3 items (2 colors).\n\t\t\t\tassertEquals(3, Main.getTable().getColumnCount());\n\n\t\t}\n\t\t\n\t\t/**\n\t\t * Method with test for the {@link Main#getSaveAction()} method.\n\t\t */\n\t\t@Test\n\t\tpublic void testNoTable(){\t\t\t\n\t\t\t\t// Assertion, that the return value of the save method is a color model.\n\t\t\t\tassertNotNull(Main.getSaveAction());\n\n\t\t\t\t// Assertion, that the table contains 1 item (1 color).\n\t\t\t\tassertEquals",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate final String testCaseName=\"Main.getSaveAction()\";\n\tprivate final int number=1;\n\t\n\t@Test\n\tpublic void testGetSaveAction(){\n\t\tString[] fields=\"text1,text2\";\n\t\tString[] messages={null, \"text1,text2\"};\n\t\tEventTableCellDelayEditor ed=new EventTableCellDelayEditor(testCaseName, number, 1);\n\t\tJDesktopPane pane=new JDesktopPane();\n\t\tpane.add(new ColorButton(Color.red,new ImageIcon(Resources.getImagePath(\"hb_red.png\"))),0,0);\n\t\tpane.add(EventView.create(new JTable(new TableHandballModel(4, ColorModel.BLUE,ColorModel.GREEN,ColorModel.RED,ColorModel.DKGRAY,ColorModel.BLUE,\"text\"))));\n\t\tEventTableView tv=new EventTableView(testCaseName,1,1);\n\t\tpane.add(tv,0,0);\n\t\tStatusBar.setStatusBar",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * JUnit parameter indicating whether we are expected to fail.\n\t\t */\n\t\tboolean fail;\n\n\t\t/**\n\t\t* Returns a new {@link Main} object.\n\t\t* @return Returns a new {@link Main} object.\n\t\t*/\n\t\tpublic Main createTest() {\n\t\t\treturn new Main(false);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new test {@link Main}.\n\t * @param fail is it expected to fail?\n\t */\n\tMain_3Test (boolean fail) {\n\t\tthis.fail = fail;\n\n\t\t// create table header\n\t\tfinal TableHeader header = new TableHeader();\n\t\theader.setColumns(4);\n\t\ttable.setBorder(BorderFactory.createEmptyBorder());\n\t\tborderPane.add(header, BorderLayout.NORTH);\n\n\t\t// create table\n\t\ttable = new JTable();\n\t}\n\n\t/**\n\t * Constructor for all test cases.\n\t * @fixture\n\t */\n\tMain_3Test_fixture() {\n\t\tthis.table",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     *\n     */\n\t@Test\n\tpublic void test() {\n\t\tMain main = new Main();\n\t\tString fileName;\n\t\tfileName = \"TestfileName\";\n\t\tString testData = \"This is the test data.\";\n\t\t\n\t\tmain.getSaveAction().run();\n\t\tassertTrue(eventTable.isEmpty());\n\t\tassertTrue(getSaveAction().getCommentController().getCommentCount() == 0);\n\t\t\n\t\tmain.setComment((String) null);\n\t\tmain.getSaveAction().run();\n\t\tassertNull(eventTable.getSelectionModel());\n\t\t\n\t\tEventTableCellRenderer etcr = new EventTableCellRenderer();\n\t\tetcr.installTableRenderer(eventTable);\n\t\t\n\t\tmain.setComment((String) null);\n    \tmain.getSaveAction().run();\n\t\tassertTrue(eventTable.isEmpty());\n\t\t\n\t\tmain.setComment((String) null);\n\t\tmain.getSaveAction().run();\n\t\tassertNull(eventTable.getSelectionModel",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     * Anzeige des Frame des Hauplabs.\n     */\n    private static final JFrame FRAME_W = new JFrame();\n\n    /**\n     * Schatten des Hauplassen des Frames.\n     */\n    private static void createView() {\n        final JViewport viewport  = new JViewport\n                //new JBViewport()\n                //new JRTViewport()\n                //new GTViewport()\n                //new FTCViewport()\n                //new RCTViewport()\n                //new GPTViewport()\n                //new VTLViewport()\n                //new JTSViewport()\n                //new RTTSViewport()\n                //new TTSViewport()\n                //new PTLViewport()\n                //new DTLViewport()\n                //new RCLViewport()\n                //new GRLViewport()\n                //new GRTViewport()\n                //new FTLViewport()\n                //new RCTViewport()\n                //new JTTViewport()\n                //",
            "finish_reason": "length"
        },
        {
            "text": "\n    private EventTableCellDelayEditor edit = new EventTableCellDelayEditor();\n    private static ColorModel colorModel = new ColorModel(\"#ff00ff00\");\n\n    /**\n     * Method for initializing all components in the Frame of the Main.\n     * \n     * @throws java.io.IOException  {@code\n     *                              }\n     */\n    @Test\n    public void testInit() throws Exception {\n        Main main = new Main();\n        main.setSize(500, 400);\n        main.setTitle(Resources.appName + \" v\" + Resources.versionNumber);\n        assertEquals(\"Test title\", Resources.appName + \" v\" + Resources.versionNumber,\n\t\t\t\t main.getTitle());\n        main.setLocationRelativeTo(null);\n        main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel();\n        main.setContentPane(panel);\n        panel.setLayout(new BorderLayout());\n        main.setMinimumSize(new",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void test() {\n        Main main = new Main();\n        main.getSaveAction();\n        assertEquals(getClass().getCanonicalName(), main.getClass().getCanonicalName());\n    }\n}\n/** The class itself does not contain test classes. */\nclass Main {\n\n\tpublic JFrame createNewFrame() {\n\t\treturn new JFrame();\n\t}\n\n\tpublic JDesktopPane createNewDP() {\n\t\treturn new JDesktopPane(new BorderLayout());\n\t}\n\n\tpublic JDesktopPane createNewDP1() {\n\t\treturn new JDesktopPane(new BorderLayout());\n\t}\n\tpublic ListSelectionModel getListSelectionModel() {\n\t\treturn new DefaultListSelectionModel();\n\t}\n\n    public JFrame createNewFrame(final String name) {\n\t\tfinal JFrame jf = createNewFrame();\n        jf.setTitle(name);\n        \n        final JInternalFrame jif = jf.getInternalFrame();\n        jf.setDefaultCloseOperation(",
            "finish_reason": "length"
        },
        {
            "text": "\n\t//public void run() {\n\t\tpublic Main_3Test () {\n\t\t\t\n\t\t\tMain.getSaveAction();\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void testSetupForMain() {\n\t\t\t\n\t\t\tMain.getSetupForMain();\n\t\t}\n\t\t\n\t}\n\n}\n\n@SuppressWarnings(\"unused\")\npublic class Main {\n\t\n\t// Listener\n\tpublic class Listener extends MouseController {\n\t\t\n\t\tpublic Listener(){\n\t\t\t\n\t\t\t// Testlistener\n\t\t\tthis.addListener(ListSelectionModel.class, new TableSelectionListener(new TableSelectionListener() {\n\t\t\t\t\t\t\t\tpublic void selectionChanged() {\n\t\t\t\t\t\t\t\t\tMain.myTable.setSelectionInterval(0, 2);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}));\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t// Default constructor\n\tpublic Main() {\n\t\t\n\t}\n\t\n\t\n\t/**\n\t * Hinge die Einstellungen und Initialisierungs-Konfiguration\n\t */\n\tprivate void get",
            "finish_reason": "length"
        }
    ],
    "id": "e38a0f2a-4c4d-4a8d-a1cd-3cb37a128128",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_3Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static SaveAction getSaveAction() {\n        return saveAction;\n    }\n}\n",
    "test_prompt": "// Main_3Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getSaveAction()} method.\n*/\nclass Main_3Test {",
    "time_taken": 13.18687105178833,
    "usage": {
        "prompt_tokens": 1806
    }
},
{
    "choices": [
        {
            "text": "\n\tprivate Main main;\n\t\n\tpublic Main_4Test() {\n\t\tmain = this.createMain();\n\t\tThread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n\n\t\t\t@Override\n\t\t\tpublic void uncaughtException(Thread thread, Throwable throwable) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":Uncaught Exeption in thread \" + thread.getName());\n\t\t\t\tthrowable.printStackTrace();\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t});\n\t}\n\t\n\tpublic Main createMain(){\n\t\tJFrame frame = new JFrame(\"Handball - Aufwachen\");\n\t\tframe.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\t\tframe.setSize(new Dimension(1200, 750));\n\t\tframe.setLayout(new BorderLayout());\n\t\tJPanel contentpane = new JPanel();\n\t\tcontentpane.setLayout(new BorderLayout());\n\t\tImageIcon icon = null;\n\t\ttry",
            "finish_reason": "length"
        },
        {
            "text": "private CloseAction closeActionTest = null;\n\t\t\n\t\t/** Test-Ausgabe fuer die Einstellungen des Systemen. */\n\t\t@Test\n\t\tpublic void testCreateMove()\n\t\t\t\tthrows Exception\n\t\t\t\t{\n\t\t\t\t\tfinal String testName = \"Creazione della movimento test.\";\n\t\t\t\t\tfinal int tableSize = 0;\n\t\t\t\t\tfinal int tableHeader = 0;\n\t\t\t\t\tfinal int[] rows = {1,2,3,4,5,6};\n\t\t\t\t\tfinal int[][] cells = {rows,rows,rows,rows,rows,rows};\n\t\t\t\t\tfinal int[][] expectedRows = {rows,rows,rows,rows,rows,rows};\n\t\t\t\t\tfinal String[][] values = {\"2\", \"1\", \"2\", \"1\", \"2\", \"2\"};\n\t\t\t\t\tfinal String[][] expectedValues = new String[][]{values,new String[]{\"1\",\"1\",\"2\",\"1\",\"2\",\"2\"}};\n\t\t\t\t\tfinal HashMap<String,String> expectedValues2 = new HashMap<>();\n\t\t\t\t\t",
            "finish_reason": "length"
        },
        {
            "text": "private final static String TEXT_1 =\n    \t\t\"this is test text 3\\n\" +\n    \t\t\"this is test text2\\n\" +\n    \t\t\"this is test text4\\n\" +\n    \t\t\"this is test text5\\n\" +\n    \t\t\"this is test text2\\n\" +\n    \t\t\"this is test text3\\n\" +\n    \t\t\"this is test text3\\n\" +\n    \t\t\"this is test text4\\n\";\n        \n        boolean closeAction = false;\n\n\t\tpublic Main_4Test()\n                {\t\n                    init();\t                    \n                }\n\n        //private final ObjectOutputStream _os = new ObjectOutputStream (new ByteArrayOutputStream());\n        private final ObjectOutputStream _os = new ObjectOutputStream (new ByteArrayOutputStream ());\n\n        private final void init ()\n        {\n            try {\n        \t\t_os.writeObject (new String (TEXT_1));\n            }\n            catch ( Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n                try",
            "finish_reason": "length"
        },
        {
            "text": "\n\tstatic CloseAction closeAction;\n\t\n\tstatic void initCloseAction(CloseAction expectedAction) {\n\t\tMain.closeAction = expectedAction;\n\t}\n\t\n\tstatic JPanel getPanel()\n\t{\n\t\tJFrame f = new JFrame();\n\t\tf.getContentPane().add(JPanel(CloseAction.class));\n\t\tJPanel _panel = new JPanel(\"main\");\n\t\tf.getContentPane().add(_panel, BorderLayout.CENTER);\n\t\treturn _panel;\n\t}\n\t\n\tstatic JFrame f;\n\n\tstatic void startTest()\n\t{\n\t\tf = new JFrame();\n\t\tnew Main();\n\t\tf.pack();\n\t\tf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tf.setSize(600, 400);\n\t\tf.addWindowListener(new WindowAdapter() {\n\n\t\t\t@Override\n\t\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t});\n\t\tf.setVisible(",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link Main#getCloseAction()}.\n\t */\n\t@Test\n\tpublic final void testGetCloseAction() {\n\t\t\n\t\tMain_4Test instance = new Main_4Test();\n\t\t\n\t\tMain_4Test.CloseAction mockAction = null;\n\t\ttry {\n\t\t\tmockAction = instance.getCloseAction();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Unexpected exception while mocking close action behaviour\");\n\t\t}\n\t\t\t\n\t\t\n\t\tassertNotNull(\"The close action is null\", mockAction);\n\t}\n\t\n\t/**\n\t* Test method for {@link Main_4Test#close()}.\n\t*/\n\t@Test\n\tpublic final void testClose() {\n\t\t\n\t\tMain_4Test instance = new Main_4Test();\n\t\t\n\t\tinstance.close();\n\t}\t\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n\tpublic Main_4Test() {\n\t}\n\t\n\t@Test\n\tpublic void testDefaultConstruction() {\n\t\tMain.setCloseAction();\n\t\tassertNotNull(Main.getCloseAction());\n\t\tassertNotNull(Main.getCloseAction().getActionName());\n\t\tassertNotNull(Main.getCloseAction().getActionName().getActionClass());\n\t\tassertNotNull(Main.getCloseAction().getActionName().getActionParamter());\n\t\tassertEqualValues(\n\t\t\tMain.getCloseAction(),\n\t\t\t\"{closeAction}\"\n\t\t);\n\t}\n\n\t@Test\n\tpublic void testClosedWindow() {\n\t\tMain.getCloseAction().dispose();\n\t\tassertFalse(Main.getCloseAction().isVisible());\n\t}\n\t\n\t/**\n\t * Test for getCloseAction.\n\t *\n\t * @throws Exception \n\t*/\n\t@Test\n\tpublic void testGetCloseAction () throws Exception {\n\t\tMain.getCloseAction();\n\t\tassertTrue(Main.getCloseAction().isVisible());",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n    * Test method for {@link Main#getCloseAction()}.\n    */\n\t@Test\n\tpublic void testGetCloseAction() {\n        final JDesktopPane desktops = new JDesktopPane();\n\n        final JInternalFrame frame = new JInternalFrame(\"Test 1\");\n        final DisplayObject disp = new TableSelectionListener() {\n            public void selectionChanged() {\n                    System.out.println(\"Selection changed to \" + frame.getSelectedRows() + \" of \" + desktops.getSelectedRows());\n            }\n        };\n        frame.setLocation(((JFrame) frame.getParent()).getWidth() / 2, ((JFrame) frame.getParent()).getHeight() / 2);\n        JDesktopPane desk = new JDesktopPane();\n        JTable table = new JTable(5, 2);\n        new TableHandballModel(disp, desk, table, new Direction(ColorModel.BLUE));\n        frame.setVisible(true);\n        frame.setDefaultCloseOperation(",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n     * Test for {@link Main#getCloseAction()} method. Tests method {@link Main_4Test#testGetCloseAction()} for\n     * all constructors and methods of {@link Main}.\n     */\n     @Test\n    void testGetCloseAction(){    \n        assertNotNull(Main_4Test.getCloseAction());\n        \n        assertEquals(Main_4Test.getCloseAction(), CloseAction.getCloseAction());\n        \n        CloseAction closeActionNull = null;\n        assertNotNull(closeActionNull);\n        assertEquals(Main_4Test.getCloseAction(), closeActionNull);\n        \n        /* Method getCloseAction() can be used for checking if constructors fail for all constructors or not.*/\n        \n        try{\n            Main_4Test.getCloseAction();\n            fail(\"getCloseAction() should have failed with IllegalArgumentException\");            \n        } catch(IllegalArgumentException e){\n            \n            assertNull(e.getMessage());\n        }\n    }\n}\n",
            "finish_reason": "length"
        },
        {
            "text": "private static class JMenuHelper2 implements PlayerToolBar.PlayerToolBarEventHandler {\n\t\tpublic final JMenu playerMenu;\n\t\tpublic final JMenuBar menuBar;\n\t\tpublic final MouseController controller;\n\t\tpublic final CommentController commentController;\n\t\tpublic JMenuHelper2(JMenu playerMenu, JMenuBar menuBar, MouseController controller,\n\t\t\t\tCommentController commentController) {\n\t\t\tthis.playerMenu = playerMenu;\n\t\t\tthis.menuBar = menuBar;\n\t\t\tthis.controller = controller;\n\t\t\tthis.commentController = commentController;\n\t\t}\n\t\t@Override\n\t\tpublic void onPlayerMenuSelected(String s, MouseButtonState t) {\n\t\t\tString path = null;\n\t\t\tpath = playerMenu.getName() + \"-s\";\n\t\t\tJMenuItem item = new JMenuItem(s);\n\t\t\titem.setActionCommand(path);\n\t\t\titem.addActionListener(clickableButtonListener);\n\t\t\tJPanel panel = new JPanel(new BorderLayout());\n\t\t\tpanel.add(item, BorderLayout.SOUTH);\n\t\t\tJPanel",
            "finish_reason": "length"
        },
        {
            "text": "\n\n    public static Main testCaseClosed = null;\n    public static TestView testView = null;\n    \n    public Main_4Test() {\n        CloseAction closeActionClosed = new CloseAction();\n        closeActionClosed.setCommand(CloseAction.COMMAND_CLOSE);\n        //testCaseClosed.closeAction = closeActionClosed;\n    }\n    \n    \n    @Test\n    public void test_openTestCase() {\n        final Runnable closeHandler = new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\ttestCaseClosed.closeAction.run();\n\t\t\t\t}\n\t\t\t};\n        testCaseClosed = new Main();\n        testView = new TestView();\n        testView.getTableModel().addTableSelectionListener(new TableSelectionListener() {\n            public void tableSelectionChanged(TableSelectionEvent t) {\n                testCaseClosed.getTable().invalidate();\n            }\n        });\n        testView.addSelectionListener(new TableSelectionListener() {\n            public void",
            "finish_reason": "length"
        }
    ],
    "id": "f9fb7cdb-dbcd-4e78-86f0-c5bbffc14161",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_4Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static CloseAction getCloseAction() {\n        return closeAction;\n    }\n}\n",
    "test_prompt": "// Main_4Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getCloseAction()} method.\n*/\nclass Main_4Test {",
    "time_taken": 13.17248010635376,
    "usage": {
        "prompt_tokens": 1806
    }
},
{
    "choices": [
        {
            "text": "private Main main;\n\t\tprivate JFrame frame = new JFrame(Resources.getAppName());\n\t\tprivate JTable table = new JTable(new TableHandballModel());\n\n\tpublic Main_5Test() throws Exception {\n\t\tinitMain();\n\t}\n\t\t/**\n* It checks the existence of main components on the left side of the {@link Main}.\n*\n*/",
            "finish_reason": "length"
        },
        {
            "text": "private Main aMainJ = null;\n\t\tprivate JFrame aMainFrame = null;\n\t\tprivate EventTableCellRenderer aRendererTest;\n\tprivate TableHandballModel aTableModel1;\n\tprivate ColorModel aModel1;\n\n\tpublic Main_5Test() {\n\t\taMainFrame = new JFrame();\n\t\taMainFrame.setContentPane",
            "finish_reason": "length"
        },
        {
            "text": "\n\t\tprivate static final String RESOURCES_PATH = \"images/\";\n\t\tprivate static final String RESOURCES_ROOT = RESOURCES_PATH+ \"resources/\";\n\t\tprivate static final String RESOURCES_BASE = RESOURCES_ROOT+ \"base\";\n\t\tprivate static final String RESOURCES_ANIMATION_ROOT",
            "finish_reason": "length"
        },
        {
            "text": "\n    /**\n        * @param args the command line arguments\n        */\n        public static void main(String args[]) {\n            System.setProperty(\"java.awt.headless\", \"true\");\n            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n            System.setProperty(\"java.awt.font",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t* Test method for {@link Main#deepCopy(Object)}.\n\t\t*/\n\t\t@Test \n\t\tpublic void testDeepCopy() {\n\t\t\t//$NON-NLS-1$\n\t\t\tMain model;\n\t\t\tmodel = new Main();\n\t\t\tmodel._action.deleteEventAction = null;\n\t\t\tmodel._action.deleteSequenceMoveAction = null",
            "finish_reason": "length"
        },
        {
            "text": "/**\n\t\t * Diese Methode muss aufgerufen werden und in diesem f\u00fcr den Anwendung\n\t\t * veranlassen - einen Test-Case darf auch jede Funktion noch geaendert werden.\n\t\t */\n  @Test\n  void deepCopy() throws Exception {\n    HandballModel handball",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/** Test for {@link Main#deepCopy(Object)}. */\n\t@Test\n\tpublic void testDeepCopy(){\n\t\t\n\t\tHandballModel handballModel = new TableHandballModel(new ColorModel());\n\t\tJInternalFrame newFrame = new JInternalFrame(\"NewFrame\", true, false, true);\n\t\tnewFrame.setTitle(\"NewFrame\");\n",
            "finish_reason": "length"
        },
        {
            "text": "\n    //$NON-NLS-1$\n    @Test\n\tpublic void deepCopy_test(){\n        String fileName = \"Test_data_20170206_171041_01.txt\";\n        TestUtilities test = null;\n        HandlerInterface h1 = new HandlerInterface ();\n\n        test = new TestUtilities();\n        test.setJFrame",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate static long DUMMY_MOVE_ID = -42L;\n\t\n    @Test\n    public void deepCopy() throws Exception {\n        \n    \t//create temporary data\n    \t\n    \t//add some fake entries\n    \t\n    \t//add a mock data\n    \tHandballModel mockModel = Resources.newDummyModel();\n    \t",
            "finish_reason": "length"
        },
        {
            "text": "public final static String F_SERIALIZED_FILE = \"test/Test.pdf\";\n\t\tpublic final static String L_SERIALIZED_FILE = \"test/Test.LAS\";\n\t\n\t\t@Test\n\t\tpublic void test_deepCopy_1() throws Exception {\n\t\t\tbyte[] bytes = Resources.load(F_SERIALIZED_FILE);\n\t\t\t",
            "finish_reason": "length"
        }
    ],
    "id": "38e29104-6415-4186-80b4-d5e7574e6ee3",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_5Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static Object deepCopy(Object oldObj) throws Exception {\n        Object clone = null;\n        try {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ObjectOutputStream oos = new ObjectOutputStream(baos);\n            oos.writeObject(oldObj);\n            oos.flush();\n            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));\n            clone = ois.readObject();\n            oos.close();\n            ois.close();\n        } catch (Exception e) {\n            //$NON-NLS-1$\n            System.out.println(\"Exception in ObjectCloner = \" + e);\n            throw (e);\n        }\n        return clone;\n    }\n}\n",
    "test_prompt": "// Main_5Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#deepCopy(Object)} method.\n*/\nclass Main_5Test {",
    "time_taken": 6.571234464645386,
    "usage": {
        "prompt_tokens": 1964
    }
},
{
    "choices": [
        {
            "text": "\n\tprivate final Component root;\n\t\n\tpublic Main_6Test () {\n\t\tfinal JDesktopPane desktop = new JDesktopPane();\n\t\tdesktop.setPreferredSize(new Dimension(800,600));\n\t\t\n\t\tfinal JPanel panel = new JPanel();\n\t\tpanel.setPreferredSize(new Dimension(550,400));\n\t\n\t\tfinal JFrame frame = new JFrame(\"Visschlag\");\n\t\t\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tframe.setContentPane(desktop);\n\t\tframe.pack();\n\t\t\n\t\tframe.setVisible(true);\n\t\tpanel.add(frame);\n\t\t\n\t}\n\t\n\t/**\n\t* Gets the version.\n\t* @return version string\n\t*/\n\t@Test\n\tpublic final void getVersion () {\n\t\t\t\t\t\n\t\tassertEquals (getVersion(), Main.getVersion());\n\t\t\n\t}\n\t\n\t/**\n\t* Adds listener and listener for status",
            "finish_reason": "length"
        },
        {
            "text": "@Test\n\tvoid getVersion() {\n        //$NON-NLS-1$\n        assertNotNull(getVersion());\n    }\n\t}\n\n\n// Main_1Test.java\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Private Constructor for {@link Main_6Test}.\n     */\n    Main_6Test() {\n    }\n    \n    @Test\n    public void getVersion() {\n        Main.getVersion();\n    }\n    \n        public static class MyHandler implements WindowAdapter {\n        \n            /**\n             * Private Constructor for {@link MyHandler}.\n             */\n            public MyHandler() {\n            }\n            \n            @Override public void windowActivated(WindowEvent arg0) {\n                // no code necessary\n            }\n            \n            @Override public void windowClosing(WindowEvent arg0) {\n                // no code necessary\n            }\n            \n            @Override public void windowClosed(WindowEvent arg0) {\n                // no code necessary\n            }\n            \n            @Override public void windowDeactivated(WindowEvent arg0) {\n                // no code necessary\n            }\n            \n            @Override public void windowDeiconified(WindowEvent arg0) {\n                ",
            "finish_reason": "length"
        },
        {
            "text": "\n//    private static class TestCase {\n//\n//        private TestCase() {\n//            // TODO Auto-generated constructor stub\n//        }\n//    }\n\t\n    \n    private static final Color defaultColor = new Color(239, 224, 255);\n    private static final Color defaultColor2 = new Color(238, 255, 238);\n    \n    static final int tableScrollPaneHeight = 50;\n    static final int tableRowHeight = 40;\n\t\n\tprivate static final String PLAY_SERVO = \"Play.S\";\n\tprivate static final String PLAY_PULL = \"Pull.G\";\n\tprivate final String CHECKBOX_INIT = \"Show check boxes\";\n\tprivate final String CHECKBOX_MULTI = \"Show check boxes for multiple\";\n\tprivate final String CHECK_ALL = \"Show check boxes for all\";\n\tprivate final String CHECK_ONE = \"Show check boxes for one\";\n\tprivate final String CHECK_RENAMES = \"Check for renames\";\n",
            "finish_reason": "length"
        },
        {
            "text": "\n    public static String getVersion() {\n        //$NON-NLS-1$\n        return \"1.0.5\";\n    }\n\tRunnable run2;\n\n\t@BeforeAll\n\tpublic static void setUp() throws Exception {\n\t    run2 = new Runnable() {\n\n            public void run() {\n                JFrame frame = new JFrame();\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n                frame.add(new JFrame(), BorderLayout.CENTER);\n                frame.setLayout(new BorderLayout(5,5));\n                frame.setSize((int) (700 * 0.8), (int) (500 * 0.8));\n                frame.setResizable(false);\n                frame.setResizable(true);\n                frame.setTitle(\"Ausfuehlungs aus\");\n                frame.getContentPane().setLayout(new BorderLayout());\n                CommentView commentView = new CommentView();\n                ",
            "finish_reason": "length"
        },
        {
            "text": "\n\tprivate TableHandballModel model;\n\tprivate CommentsController controller;\n\tprivate MouseController controllerMovable;\n    private BoardView board;\n\n\tstatic void show(String filename) {\n\t\ttry {\n\t\t\t// Startener zum Browser laufen\n\t\t\tboard = new BoardView(Resources.<URL>read(filename));\n                        // Starten des Menue bis in Fenster f\u00fcr die entsprechende Klasse\n                        new JFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tcontroller = new CommentsController();\n\t\t\tfor(final CommentModel _Model : controller.getModel()){\n\t\t\t\tboard.setModel(_Model);\n\t\t\t}\n\t\t\t// Erwarten auch den Spieler erstellen und den Fx\n\t\t\tcontroller.start();\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\tstatic ByteArrayOutputStream getStream();\n\tstatic ByteArrayInputStream getData();\n   \n\tstatic void showComment",
            "finish_reason": "length"
        },
        {
            "text": "public boolean isValid = true;\n\n\t\tpublic Main_6Test( ) {\n\t\t\tisValid = false;\n\t\t}\n\n\t\t/**\n\t\t * Test method for\n\t\t * {@link Main#getVersion()}.\n\t\t */\n\t\t@Test\n\t\tpublic void testVersion() {\n\t\t\tisValid = true;\n\t\t\tString version;\n\t\t\ttry {\n\t\t\t\tversion = JDesktopPane.getDesktopPane().getVersion();\n\t\t\t} catch(Exception ex) {\n\t\t\t\tisValid = false;\n\t\t\t\tSystem.out.println(\"Unable to get version\"+ex.toString());\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tSystem.out.println(version);\n\t\t\tassertEquals(version, Main.getVersion(),isValid);\n\t\t}\n\n\t\t/**\n\t\t * Test method for {@link Main#createNewSequence()}.\n\t\t */\n\t\t@Test\n\t\tpublic void test_createNewSequence() {\n\t\t\tisValid = false;\n\t\t\tassertFalse(\"Sequence creation failed\",\n\t\t\t\t\t\t\t Main.create",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    void testMainIsStartedInOpen() throws Exception {\n\n        //$NON-NLS-1$\n        // Starte ein zuk\u00fcnftigen Frame\n        JFrame frame = new JFrame();\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(200, 200);\n        // Set up framelayout\n        FrameLayoutFrameLayout frameLayoutFrameLayout = new FrameLayoutFrameLayout();\n        // Create JPanel to contain JScrollPane\n        JPanel jPanel = new JPanel();\n        // Create and set JLabel to contain JScrollPane\n        JLabel jLabel = new JLabel(\"\");\n        jPanel.add(jLabel);\n        // Create and set JTable to contain JScrollPane\n        JTable jTable = new JTable();\n        // Set up JScrollPane and JViewport\n        JScrollPane jScrollPane = new JScrollPane();\n        // Create",
            "finish_reason": "length"
        },
        {
            "text": "\n    @Test\n    public void TestMain_getVersion() throws Exception {\n        //$NON-NLS-1$\n        assertTrue(\"TestVersion not correctly detected\", getVersion().equals(\"1.0.5\"));\n    }\n\n    @Test\n    public void TestMain_init_getVersion() {\n    \t// $NON-NLS-1$\n\n        // $NON-NLS-2$\n    \tfinal Main m = new Main();\n    \t\n    \tassertNotNull(m._getVersion());\n    \tassertNotNull(Resources.getInstance().getVersionString());\n    \tassertNotNull(Resources.getVersionString());\n\n    \t// $NON-NLS-3$\n    \tassertNotNull(m._getVersion().hashCode());\n    \tassertNotNull(getVersion().hashCode());\n    }\n\n    @Test\n    public void TestMain_init_getVersion2() throws Exception {\n        //$NON-NLS-1$\n\n",
            "finish_reason": "length"
        },
        {
            "text": "\n    public Main_6Test() {\n    }\n\n    @Test\n    public void testVersion() throws Exception {\n\t\tassertEquals(getVersion(), getVersion()); //$NON-NLS-1$\n    }\n}\n\nclass MoveData {\n\tprivate Move m_move;\n\tprivate HandballModel h;\n\tprivate TableSelectionListener tL;\n\t\n\tprivate JFrame m_parent;\n\tprivate JDesktopPane m_desktopPane;\n\t\n\tprivate void createMovePdfAction() {\n\t\tMovePdfFinder mf = new MovePdfFinder();\n\t\tmf.setParent(m_parent);\n\t\tm_move = mf.getMove();\n\t\th = m_move.getHandballModel();\n        TabsInfo t = h.getTabsInfo();\n        tL = new TableSelectionListener(h.getTable()) {\n            @Override\n            public void tableChanged(JTable jTable){\n            \tupdateMoveP",
            "finish_reason": "length"
        }
    ],
    "id": "894334ef-b2d9-4cd7-91c8-c4f70cdcc24a",
    "prompt_id": "/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_6Test.java",
    "original_code": "// Main.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\n\n/**\n * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen\n *\n * @author tommy\n */\npublic class Main {\n\n    public static String getVersion() {\n        //$NON-NLS-1$\n        return \"1.0.5\";\n    }\n}\n",
    "test_prompt": "// Main_6Test.java\npackage visu.handball.moves;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JToolBar;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.UIManager;\nimport visu.handball.moves.actions.AboutAction;\nimport visu.handball.moves.actions.ChangeColorsAction;\nimport visu.handball.moves.actions.CloseAction;\nimport visu.handball.moves.actions.CreateMovePdfAction;\nimport visu.handball.moves.actions.DeleteEventAction;\nimport visu.handball.moves.actions.NewAction;\nimport visu.handball.moves.actions.NewMoveEventAction;\nimport visu.handball.moves.actions.NewPassEventAction;\nimport visu.handball.moves.actions.NewSequenceAction;\nimport visu.handball.moves.actions.OpenAction;\nimport visu.handball.moves.actions.PauseAnimationAction;\nimport visu.handball.moves.actions.PrintActualSequenzAction;\nimport visu.handball.moves.actions.PrintMoveAction;\nimport visu.handball.moves.actions.SaveAction;\nimport visu.handball.moves.actions.SetMoveNameAction;\nimport visu.handball.moves.actions.StartAnimationAction;\nimport visu.handball.moves.actions.StartOneSequenceAnimationAction;\nimport visu.handball.moves.actions.StopAnimationAction;\nimport visu.handball.moves.controller.CommentController;\nimport visu.handball.moves.controller.JMenuHelper;\nimport visu.handball.moves.controller.MouseController;\nimport visu.handball.moves.model.ColorModel;\nimport visu.handball.moves.model.HandballModel;\nimport visu.handball.moves.model.TableHandballModel;\nimport visu.handball.moves.model.TableSelectionListener;\nimport visu.handball.moves.resources.Resources;\nimport visu.handball.moves.views.CommentView;\nimport visu.handball.moves.views.EventTableCellDelayEditor;\nimport visu.handball.moves.views.EventTableCellRenderer;\nimport visu.handball.moves.views.Field;\nimport visu.handball.moves.views.PlayerToolBar;\nimport visu.handball.moves.views.StatusBar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains one unit test case for the {@link Main#getVersion()} method.\n*/\nclass Main_6Test {",
    "time_taken": 12.650822639465332,
    "usage": {
        "prompt_tokens": 1819
    }
}
]