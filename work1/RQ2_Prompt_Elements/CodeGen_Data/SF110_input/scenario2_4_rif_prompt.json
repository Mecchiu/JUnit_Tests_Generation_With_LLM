[
  {
    "numberTests": "ten",
    "original_code": "// RIFImplementationManager.java\npackage com.densebrain.rif.server;\n\nimport java.lang.reflect.Method;\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport java.util.Map;\n\n/**\n * Manages all of the interface implementations registered on the service and\n * provides a simple function for invoking a method on a registered interface.\n *\n * The RIFServer decomposes the WebService request sent through the RIFServer to the RIFService\n * and then prepares a call to RIFImplementationManager.invoke to call the actual function.\n *\n * To register an implementation:\n * \u003ccode\u003e\n *\n * RIFImplementationManager.getInstance().registerImplementation(YourInterface.class, new YourImpl());\n *\n * \u003c/code\u003e\n *\n * @author Jonathan Glanz\n */\npublic class RIFImplementationManager {\n\n    /**\n     * Retrieve the singleton RIFImplementationManager instance.\n     *\n     * @return\n     */\n    public static RIFImplementationManager getInstance() {\n        return instance;\n    }\n}\n",
    "package": "com.densebrain.rif.server",
    "classname": "RIFImplementationManager",
    "id": "/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFImplementationManager_0Test.java",
    "test_prompt": "// RIFImplementationManager_0Test.java\npackage com.densebrain.rif.server;\n\nimport java.lang.reflect.Method;\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RIFImplementationManager}.\n* It contains ten unit test cases for the {@link RIFImplementationManager#getInstance()} method.\n*/\nclass RIFImplementationManager_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// RIFImplementationManager.java\npackage com.densebrain.rif.server;\n\nimport java.lang.reflect.Method;\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport java.util.Map;\n\n/**\n * Manages all of the interface implementations registered on the service and\n * provides a simple function for invoking a method on a registered interface.\n *\n * The RIFServer decomposes the WebService request sent through the RIFServer to the RIFService\n * and then prepares a call to RIFImplementationManager.invoke to call the actual function.\n *\n * To register an implementation:\n * \u003ccode\u003e\n *\n * RIFImplementationManager.getInstance().registerImplementation(YourInterface.class, new YourImpl());\n *\n * \u003c/code\u003e\n *\n * @author Jonathan Glanz\n */\npublic class RIFImplementationManager {\n\n    /**\n     * Invoke a method on a registered implementation.  The iterfaceName passed is used to lookup\n     * a registered implementation and then the method is invoked on the registered implementation\n     * with the passed parameters.\n     *\n     * @param iterfaceName - name of the registered interface class\n     * @param methodName - method to invoke on the registered implementation\n     * @param params - parameters to pass to the method, which is to be invoked.\n     * @return the return from the method being invoked.\n     * @throws RemoteException\n     */\n    public Object invoke(String iterfaceName, String methodName, Object[] params) throws RemoteException {\n        Object impl \u003d implementationMap.get(iterfaceName);\n        if (impl \u003d\u003d null)\n            throw new RemoteException(\"Not registered: \" + iterfaceName);\n        Map\u003cString, Method\u003e methodMap \u003d methodsMap.get(impl);\n        if (methodMap \u003d\u003d null) {\n            synchronized (this) {\n                methodMap \u003d methodsMap.get(impl);\n                if (methodMap \u003d\u003d null) {\n                    methodMap \u003d new Hashtable\u003cString, Method\u003e();\n                    Class clazz \u003d impl.getClass();\n                    Method[] methods \u003d clazz.getMethods();\n                    for (int i \u003d 0; i \u003c methods.length; i++) {\n                        Method method \u003d methods[i];\n                        methodMap.put(method.getName(), method);\n                    }\n                    methodsMap.put(impl, methodMap);\n                }\n            }\n        }\n        Method method \u003d methodMap.get(methodName);\n        if (method \u003d\u003d null)\n            throw new IllegalArgumentException(\"Unknown method \" + methodName + \" on \" + iterfaceName);\n        try {\n            return method.invoke(impl, params);\n        } catch (Exception e) {\n            throw new RemoteException(\"Error occured while invoking \" + iterfaceName + \".\" + methodName + \": \" + e.getMessage(), e);\n        }\n    }\n}\n",
    "package": "com.densebrain.rif.server",
    "classname": "RIFImplementationManager",
    "id": "/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFImplementationManager_1Test.java",
    "test_prompt": "// RIFImplementationManager_1Test.java\npackage com.densebrain.rif.server;\n\nimport java.lang.reflect.Method;\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RIFImplementationManager}.\n* It contains ten unit test cases for the {@link RIFImplementationManager#invoke(String, String, Object[])} method.\n*/\nclass RIFImplementationManager_1Test {",
    "method_signature": "invoke(String, String, Object[])",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// RIFService.java\npackage com.densebrain.rif.server;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.rmi.RemoteException;\nimport org.apache.axis2.util.Base64;\n\n/**\n * This is the WebService, which is hosted on Axis2 that marshalls the remote calls\n * between the client RIFInvoker and the Server RIFImplementationManager.\n *\n * @see com.densebrain.rif.client.RIFInvoker\n * @see com.densebrain.rif.server.RIFImplementationManager\n * @author Jonathan Glanz\n */\npublic class RIFService {\n\n    /**\n     * The invoke ws method, which marshalls the call to the RIFImplementationManager\n     *\n     * @param interfaceName - the registered interface to invoke the method on\n     * @param methodName - method to invoke on the registered interface\n     * @param serializedParams - serialized parameters to reconstruct and pass to the RIFImplementationManager\n     * @return\n     * @throws RemoteException\n     */\n    public String invoke(String interfaceName, String methodName, String serializedParams) throws RemoteException {\n        byte[] paramBytes \u003d Base64.decode(serializedParams);\n        Object[] params;\n        try {\n            ByteArrayInputStream bais \u003d new ByteArrayInputStream(paramBytes);\n            ObjectInputStream ois \u003d new ObjectInputStream(bais);\n            params \u003d (Object[]) ois.readObject();\n            ois.close();\n            bais.close();\n        } catch (Exception e) {\n            throw new RemoteException(\"Unable to deserialize parameters: \" + e.getMessage(), e);\n        }\n        Object result \u003d RIFImplementationManager.getInstance().invoke(interfaceName, methodName, params);\n        try {\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(result);\n            oos.close();\n            byte[] resultBytes \u003d baos.toByteArray();\n            return Base64.encode(resultBytes);\n        } catch (Exception e) {\n            throw new RemoteException(\"Unable to serialize result: \" + e.getMessage());\n        }\n    }\n}\n",
    "package": "com.densebrain.rif.server",
    "classname": "RIFService",
    "id": "/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/server/RIFService.java",
    "test_prompt": "// RIFServiceTest.java\npackage com.densebrain.rif.server;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.rmi.RemoteException;\nimport org.apache.axis2.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RIFService}.\n* It contains ten unit test cases for the {@link RIFService#invoke(String, String, String)} method.\n*/\nclass RIFServiceTest {",
    "method_signature": "invoke(String, String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RIFManager.java\npackage com.densebrain.rif.client;\n\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport com.densebrain.rif.client.service.RIFService;\nimport com.densebrain.rif.client.service.RIFServiceStub;\n\n/**\n * The RIFManager is responsible for keeping track of the client side web service annd caching\n * RIFInvoker\u0027s to cut down on processing time for secondary RIFInvoker requests.  It keeps an\n * internal mapping of interfaces to RIFInvokers.\n *\n * @author Jonathan Glanz\n * @copyright Desnbrain, Inc @ 2006\n */\npublic class RIFManager {\n\n    /**\n     * Retrieve an invoker by interface name, if one does not exist then create a new RIFInvoker.\n     * When the RIFInvoker is instantiate it build the dynamic runtime proxy.\n     *\n     * @param interfaceClazz - The interface to proxy against the server for, MUST be an interface\n     * @return - RIFInvoker ready to proxy for the given interface\n     * @throws RemoteException\n     */\n    public RIFInvoker getInvoker(Class interfaceClazz) throws RemoteException {\n        RIFInvoker invoker \u003d invokerMap.get(interfaceClazz);\n        if (invoker \u003d\u003d null) {\n            synchronized (this) {\n                invoker \u003d invokerMap.get(interfaceClazz);\n                if (invoker \u003d\u003d null) {\n                    invoker \u003d new RIFInvoker(this, interfaceClazz);\n                    invokerMap.put(interfaceClazz, invoker);\n                }\n            }\n        }\n        return invoker;\n    }\n}\n",
    "package": "com.densebrain.rif.client",
    "classname": "RIFManager",
    "id": "/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/client/RIFManager.java",
    "test_prompt": "// RIFManagerTest.java\npackage com.densebrain.rif.client;\n\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport com.densebrain.rif.client.service.RIFService;\nimport com.densebrain.rif.client.service.RIFServiceStub;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RIFManager}.\n* It contains ten unit test cases for the {@link RIFManager#getInvoker(Class)} method.\n*/\nclass RIFManagerTest {",
    "method_signature": "getInvoker(Class)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RIFManagerFactory.java\npackage com.densebrain.rif.client;\n\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\n\n/**\n * Used as the singleton factory for retrieving a RIFManager and from there retrieving\n * RIFInvoker(s).  The initialize method MUST be called before using the Factory.\n *\n * For the sake of simplicity the manager has 3 getter functions depending on what you want to do:\n * getManager() - Retrieves the RIFManager for the JVM\n * getInvoker(I) - Retrieve the RIFInvoker based on the interface passed\n * getImpl(I) - returns the dynamic proxy of the impl representing the interface passed.\n *\n * @author Jonathan Glanz\n */\npublic class RIFManagerFactory {\n\n    /**\n     * Initialize\u0027s the factory for use; the url passed in is the URL of the\n     * RIFServer with no context path: i.e. http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;\n     *\n     * @param url - URL of the RIFServer in the format http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;\n     * @throws RemoteException\n     */\n    public static RIFManagerFactory getInstance() throws RemoteException {\n        return instance;\n    }\n}\n",
    "package": "com.densebrain.rif.client",
    "classname": "RIFManagerFactory",
    "id": "/EvoSuiteBenchmark/original/4_rif/src/main/java/com/densebrain/rif/client/RIFManagerFactory.java",
    "test_prompt": "// RIFManagerFactoryTest.java\npackage com.densebrain.rif.client;\n\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RIFManagerFactory}.\n* It contains ten unit test cases for the {@link RIFManagerFactory#getInstance()} method.\n*/\nclass RIFManagerFactoryTest {",
    "method_signature": "getInstance()",
    "suffix": ""
  }
]