[
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    private String packageName \u003d null;\n\n    private String classJavadocs \u003d null;\n\n    private String className \u003d null;\n\n    private String superClass \u003d null;\n\n    private String interfaceName \u003d null;\n\n    private List memberVariables \u003d new ArrayList();\n\n    private boolean hasSuperClass \u003d false;\n\n    private boolean isInterface \u003d false;\n\n    /**\n     * Returns the package name for the class.\n     * @return the package name for the class.\n     */\n    public String getPackageName();\n\n    /**\n     * Allows setting the package name for the class.\n     * @param packageName the package name to set.\n     */\n    public void setPackageName(String packageName);\n\n    /**\n     * Returns the class javadocs for this class.\n     * @return the class javadocs for this class.\n     */\n    public String getClassJavadocs();\n\n    /**\n     * Allows setting the class javadocs for this class.\n     * @param classJavadocs the class level javadocs to set.\n     */\n    public void setClassJavadocs(String classJavadocs);\n\n    /**\n     * Returns the class name.\n     * @return the class name.\n     */\n    public String getClassName();\n\n    /**\n     * Sets the class name.\n     * @param className the class name.\n     */\n    public void setClassName(String className);\n\n    /**\n     * Gets the superclass name for this class.\n     * @return the superclass for this class.\n     */\n    public String getSuperClass();\n\n    /**\n     * Sets the superclass name if applicable.\n     * @param superClass the super class name to set.\n     */\n    public void setSuperClass(String superClass);\n\n    /**\n     * Gets the fully qualified interface for this class if specified,\n     * @return the interface name for this class.\n     */\n    public String getInterface();\n\n    /**\n     * Sets the fully qualified interface name for this class.\n     * @param interfaceName the fully qualified interface name for this class.\n     */\n    public void setInterface(String interfaceName);\n\n    /**\n     * Returns a list of member variable objects in this class.\n     * @return a list of member variable objects in this class.\n     */\n    public List getMemberVariables();\n\n    /**\n     * Returns the number of member variables for this class.\n     * @return the number of member variables.\n     */\n    public int getNumberOfMemberVariables();\n\n    /**\n     * Adds a new member variable object for the class. Deduces a variable\n     * name from the class name.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarClass, boolean isArray);\n\n    /**\n     * Adds a new member variable for the class.\n     * @param mVarName the name of the member variable.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarName, String mVarClass, boolean isArray);\n\n    /**\n     * Convenience methods since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class implements an interface.\n     * @return true if this class implements an interface else false.\n     */\n    public boolean hasInterface();\n\n    /**\n     * Convenience method since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class inherits from a superclass.\n     * @return true if this class has a superclass, else false.\n     */\n    public boolean hasSuperClass();\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_0Test.java",
    "test_prompt": "// JavaSource_0Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.\n*/\nclass JavaSource_0Test {",
    "method_signature": "hasInterface()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    private String packageName \u003d null;\n\n    private String classJavadocs \u003d null;\n\n    private String className \u003d null;\n\n    private String superClass \u003d null;\n\n    private String interfaceName \u003d null;\n\n    private List memberVariables \u003d new ArrayList();\n\n    private boolean hasSuperClass \u003d false;\n\n    private boolean isInterface \u003d false;\n\n    /**\n     * Returns the package name for the class.\n     * @return the package name for the class.\n     */\n    public String getPackageName();\n\n    /**\n     * Allows setting the package name for the class.\n     * @param packageName the package name to set.\n     */\n    public void setPackageName(String packageName);\n\n    /**\n     * Returns the class javadocs for this class.\n     * @return the class javadocs for this class.\n     */\n    public String getClassJavadocs();\n\n    /**\n     * Allows setting the class javadocs for this class.\n     * @param classJavadocs the class level javadocs to set.\n     */\n    public void setClassJavadocs(String classJavadocs);\n\n    /**\n     * Returns the class name.\n     * @return the class name.\n     */\n    public String getClassName();\n\n    /**\n     * Sets the class name.\n     * @param className the class name.\n     */\n    public void setClassName(String className);\n\n    /**\n     * Gets the superclass name for this class.\n     * @return the superclass for this class.\n     */\n    public String getSuperClass();\n\n    /**\n     * Sets the superclass name if applicable.\n     * @param superClass the super class name to set.\n     */\n    public void setSuperClass(String superClass);\n\n    /**\n     * Gets the fully qualified interface for this class if specified,\n     * @return the interface name for this class.\n     */\n    public String getInterface();\n\n    /**\n     * Sets the fully qualified interface name for this class.\n     * @param interfaceName the fully qualified interface name for this class.\n     */\n    public void setInterface(String interfaceName);\n\n    /**\n     * Returns a list of member variable objects in this class.\n     * @return a list of member variable objects in this class.\n     */\n    public List getMemberVariables();\n\n    /**\n     * Returns the number of member variables for this class.\n     * @return the number of member variables.\n     */\n    public int getNumberOfMemberVariables();\n\n    /**\n     * Adds a new member variable object for the class. Deduces a variable\n     * name from the class name.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarClass, boolean isArray);\n\n    /**\n     * Adds a new member variable for the class.\n     * @param mVarName the name of the member variable.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarName, String mVarClass, boolean isArray);\n\n    /**\n     * Convenience methods since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class implements an interface.\n     * @return true if this class implements an interface else false.\n     */\n    public boolean hasInterface();\n\n    /**\n     * Convenience method since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class inherits from a superclass.\n     * @return true if this class has a superclass, else false.\n     */\n    public boolean hasSuperClass();\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_1Test.java",
    "test_prompt": "// JavaSource_1Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.\n*/\nclass JavaSource_1Test {",
    "method_signature": "hasSuperClass()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDecoder.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\n\n/**\n * Decodes an IFX XML String to its equivalent Framework bean.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.3 $\n */\npublic class IFXDecoder {\n\n    private ResourceBundle bundle;\n\n    /**\n     * Creates an IFXDecoder object.\n     */\n    public IFXDecoder() {\n    }\n\n    /**\n     * Decodes the element into its equivalent IFX XML representation.\n     * @param element the Element to decode.\n     * @return an IFXObject.\n     * @exception IFXException wrapper for underlying exception.\n     */\n    public IFXObject decode(Element element) throws IFXException;\n\n    /**\n     * Returns a single setXXX Method object corresponding to the IFXObject\n     * and childElement.\n     * @param obj the IFXObject.\n     * @param childElement the element corresponding to the mutator method.\n     * @return a setXXX method object.\n     * @exception IFXException if there was a problem getting the mutators.\n     */\n    private Method getMutator(IFXObject obj, Element childElement) throws IFXException;\n\n    /**\n     * Returns a single setXXX Method object corresponding to the IFXObject\n     * and childElement name.\n     * @param obj the IFXObject.\n     * @param childElementName the element name for the mutator method.\n     * @return a setXXX method object.\n     * @exception IFXException if there was a problem getting the mutators.\n     */\n    private Method getMutator(IFXObject obj, String elementName) throws IFXException;\n\n    /**\n     * Returns the accessor method associated with the given element name.\n     * @param obj an IFXObject.\n     * @param element the element object.\n     * @return a getXXX Method object associated with the element.\n     * @exception IFXException wraps the original exception thrown.\n     */\n    private Method getAccessor(IFXObject obj, Element element) throws IFXException;\n\n    /**\n     * Returns the element name from a bean name.\n     * @param element the Element representing the bean.\n     * @return the element name.\n     * @exception IFXException if bean class name could not be found.\n     */\n    private String getBeanClassName(Element element) throws IFXException;\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDecoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDecoder.java",
    "test_prompt": "// IFXDecoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDecoder}.\n* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.\n*/\nclass IFXDecoderTest {",
    "method_signature": "decode(Element)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXEncoder.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\n\n/**\n * Encodes an IFXObject to its equivalent IFX XML Element.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXEncoder {\n\n    private ResourceBundle bundle;\n\n    private int xmlIndentSize \u003d 2;\n\n    private String lineSeparator \u003d System.getProperty(\"line.separator\");\n\n    private Namespace namespace \u003d Namespace.NO_NAMESPACE;\n\n    /**\n     * Creates an IFXEncoder object in the default namespace.\n     */\n    public IFXEncoder() {\n    }\n\n    /**\n     * Creates an IFXEncoder in the specified namespace.\n     * @param namespacePrefix the namespace prefix to use. If set to null,\n     * then the element will be considered to be in the default namespace.\n     * @param namespaceURI the URI of the namespace.\n     */\n    public IFXEncoder(String namespacePrefix, String namespaceURI) {\n    }\n\n    /**\n     * Builds a JDOM Element for the IFXObject supplied. No validation is\n     * performed, regardless of the setting. To validate, use the encode()\n     * methods instead.\n     * @param obj an IFXObject.\n     * @return a JDOM Element.\n     * @exception IFXException if an exception was encountered in encoding.\n     */\n    public Element encode(IFXObject obj) throws IFXException;\n\n    /**\n     * Sets the name space for this Document.\n     * @param prefix the namespace prefix to use. If null, this namespace\n     * will be set to the default namespace.\n     * @param nameSpaceURI the String URI of this namespace.\n     */\n    private void setNamespace(String prefix, String nameSpaceURI);\n\n    /**\n     * Return a List of accessor methods for a given IFXObject. The\n     * accessors will be ordered in the same order expected by the IFX\n     * schema. This ordering is dictated by the ELEMENTS String[] variable.\n     * @param obj an IFXObject.\n     * @return a List of getXXX Method objects.\n     * @exception IFXException wraps the original exception thrown.\n     */\n    private List getAccessors(IFXObject obj) throws IFXException;\n\n    /**\n     * Gets the element name from the object class name. It retrieves the\n     * class name portion from the fully qualified class name for the bean,\n     * then applies transformations to convert back to dotted form for\n     * certain elements.\n     * @param obj an IFXObject.\n     * @return the name of the element that is represented by this object.\n     * @exception IFXException if element name was not found.\n     */\n    private String getElementName(IFXObject obj) throws IFXException;\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXEncoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXEncoder.java",
    "test_prompt": "// IFXEncoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXEncoder}.\n* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.\n*/\nclass IFXEncoderTest {",
    "method_signature": "encode(IFXObject)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException;\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException;\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException;\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException;\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_0Test.java",
    "test_prompt": "// IFXDocumentHandler_0Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.\n*/\nclass IFXDocumentHandler_0Test {",
    "method_signature": "build(IFXObject, String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException;\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException;\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException;\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException;\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_1Test.java",
    "test_prompt": "// IFXDocumentHandler_1Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.\n*/\nclass IFXDocumentHandler_1Test {",
    "method_signature": "parse(Document)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException;\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException;\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException;\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException;\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_2Test.java",
    "test_prompt": "// IFXDocumentHandler_2Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.\n*/\nclass IFXDocumentHandler_2Test {",
    "method_signature": "read(InputStream, boolean, Map)",
    "suffix": "2"
  }
]