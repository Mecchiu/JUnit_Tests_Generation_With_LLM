[
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java",
    "test_prompt": "// DefaultNoteListModel_0Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#capacity()} method.\n*/\nclass DefaultNoteListModel_0Test {",
    "method_signature": "capacity()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java",
    "test_prompt": "// DefaultNoteListModel_1Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#size()} method.\n*/\nclass DefaultNoteListModel_1Test {",
    "method_signature": "size()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java",
    "test_prompt": "// DefaultNoteListModel_2Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#elements()} method.\n*/\nclass DefaultNoteListModel_2Test {",
    "method_signature": "elements()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java",
    "test_prompt": "// DefaultNoteListModel_3Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#contains(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_3Test {",
    "method_signature": "contains(AbstractNote)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java",
    "test_prompt": "// DefaultNoteListModel_4Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_4Test {",
    "method_signature": "indexOf(AbstractNote)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem an desired component\n     * @param index the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java",
    "test_prompt": "// DefaultNoteListModel_5Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.\n*/\nclass DefaultNoteListModel_5Test {",
    "method_signature": "indexOf(AbstractNote, int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java",
    "test_prompt": "// DefaultNoteListModel_6Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_6Test {",
    "method_signature": "lastIndexOf(AbstractNote)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem the desired component\n     * @param index the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java",
    "test_prompt": "// DefaultNoteListModel_7Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.\n*/\nclass DefaultNoteListModel_7Test {",
    "method_signature": "lastIndexOf(AbstractNote, int)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java",
    "test_prompt": "// DefaultNoteListModel_8Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#elementAt(int)} method.\n*/\nclass DefaultNoteListModel_8Test {",
    "method_signature": "elementAt(int)",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java",
    "test_prompt": "// DefaultNoteListModel_9Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#firstElement()} method.\n*/\nclass DefaultNoteListModel_9Test {",
    "method_signature": "firstElement()",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java",
    "test_prompt": "// DefaultNoteListModel_10Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastElement()} method.\n*/\nclass DefaultNoteListModel_10Test {",
    "method_signature": "lastElement()",
    "suffix": "10"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java",
    "test_prompt": "// DefaultNoteListModel_11Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_11Test {",
    "method_signature": "removeElement(AbstractNote)",
    "suffix": "11"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java",
    "test_prompt": "// DefaultNoteListModel_12Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#toArray()} method.\n*/\nclass DefaultNoteListModel_12Test {",
    "method_signature": "toArray()",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java",
    "test_prompt": "// DefaultNoteListModel_13Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#get(int)} method.\n*/\nclass DefaultNoteListModel_13Test {",
    "method_signature": "get(int)",
    "suffix": "13"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java",
    "test_prompt": "// DefaultNoteListModel_14Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#remove(int)} method.\n*/\nclass DefaultNoteListModel_14Test {",
    "method_signature": "remove(int)",
    "suffix": "14"
  },
  {
    "numberTests": "ten",
    "original_code": "// ConfigurationManager.java\npackage com.allenstudio.ir.core;\n\nimport java.util.*;\nimport java.io.*;\nimport com.allenstudio.ir.util.*;\n\n/**\n * Manages the configuration for Inspirento.\u003cbr\u003e\n * This manager uses XML format to store information.\n * The configuration file is, by default, saved in the\n * \"config\" directory and named \"config.xml\". Clearly,\n * this class should be a singleton, so we use\n * {@link #getInstance()} to get an instance and call\n * other instance methods to get the settings needed\n * by Inspirento, such as \"window.size\", \"window.location\",\n * and etc.\u003cbr\u003e\n * The program first tries to get the configuration from\n * this \u003ccode\u003eConfigurationManager\u003c/code\u003e. If it fails to\n * get any key, it uses the default settings presetted in\n * the protected \u003ccode\u003edefault\u003c/code\u003e field.\n *\n * @author Allen Chue\n */\npublic class ConfigurationManager extends Properties {\n\n    /**\n     * Uses XML parser to get the specified property.\n     * If there is no such a key, the method returns\n     * \u003ccode\u003enull\u003c/code\u003e.\n     *\n     * @param key the key of the property\n     * @return the property value\n     */\n    @Override\n    public synchronized String getProperty(String key) {\n        String value \u003d xmlIO.getRoot().getElement(Constants.PROJECT_NAME + \".\" + getPath(key)[0]).getAttribute(getPath(key)[1]);\n        if (value \u003d\u003d null) {\n            //Perhaps some element is lost in the file\n            value \u003d defaults.getProperty(key);\n            //null value has no side effect\n            setProperty(key, value);\n            new Thread() {\n\n                @Override\n                public void run() {\n                    writeBack();\n                }\n            }.start();\n        }\n        return value;\n    }\n}\n",
    "package": "com.allenstudio.ir.core",
    "classname": "ConfigurationManager",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager.java",
    "test_prompt": "// ConfigurationManagerTest.java\npackage com.allenstudio.ir.core;\n\nimport java.util.*;\nimport java.io.*;\nimport com.allenstudio.ir.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConfigurationManager}.\n* It contains ten unit test cases for the {@link ConfigurationManager#getProperty(String)} method.\n*/\nclass ConfigurationManagerTest {",
    "method_signature": "getProperty(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    /**\n     * Add attribute to this xml element.\n     *\n     * @param name name of key\n     * @param value new attribute value\n     * @return old attribute value\n     */\n    public Object addAttribute(String name, String value) {\n        if ((value !\u003d null) \u0026\u0026 (name !\u003d null)) {\n            Object returnValue \u003d attributes.put(name, value);\n            return returnValue;\n        }\n        return null;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java",
    "test_prompt": "// XmlElement_0Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addAttribute(String, String)} method.\n*/\nclass XmlElement_0Test {",
    "method_signature": "addAttribute(String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    /**\n     * Returns the element whose hierachy is indicated\n     * by \u003ccode\u003epath\u003c/code\u003e. The path is separated with\n     * periods(\".\").\u003cbr\u003e\n     * \u003cem\u003eNote: if one node has more than one elements\n     * that have the same name, that is, if its subnodes\n     * have the same path, only the first one is returned.\n     * \u003c/em\u003e\n     *\n     * @return the first element qualified with the path\n     * @param path the path string of the specified element\n     */\n    public XmlElement getElement(String path) {\n        int i \u003d path.indexOf(\u0027.\u0027);\n        String topName;\n        String subName;\n        if (i \u003d\u003d 0) {\n            path \u003d path.substring(1);\n            i \u003d path.indexOf(\u0027.\u0027);\n        }\n        if (i \u003e 0) {\n            topName \u003d path.substring(0, i);\n            subName \u003d path.substring(i + 1);\n        } else {\n            topName \u003d path;\n            subName \u003d null;\n        }\n        int j;\n        for (j \u003d 0; j \u003c subElements.size(); j++) {\n            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {\n                if (subName !\u003d null) {\n                    return (((XmlElement) subElements.get(j)).getElement(subName));\n                } else {\n                    return ((XmlElement) subElements.get(j));\n                }\n            }\n        }\n        return null;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_1Test.java",
    "test_prompt": "// XmlElement_1Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#getElement(String)} method.\n*/\nclass XmlElement_1Test {",
    "method_signature": "getElement(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    /**\n     * Adds a sub element to this one. The path\n     * is separated with dots(\".\").\n     *\n     * @return the \u003ccode\u003eXmlElement\u003c/code\u003e added\n     * @param path The subpath of the sub element to add\n     */\n    public XmlElement addSubElement(String path) {\n        XmlElement parent \u003d this;\n        XmlElement child;\n        String name;\n        while (path.indexOf(\u0027.\u0027) !\u003d -1) {\n            name \u003d path.substring(0, path.indexOf(\u0027.\u0027));\n            path \u003d path.substring(path.indexOf(\u0027.\u0027) + 1);\n            // if path startsWith \"/\" -\u003e skip\n            if (name.length() \u003d\u003d 0)\n                continue;\n            if (parent.getElement(name) !\u003d null) {\n                parent \u003d parent.getElement(name);\n            } else {\n                child \u003d new XmlElement(name);\n                parent.addElement(child);\n                parent \u003d child;\n            }\n        }\n        child \u003d new XmlElement(path);\n        parent.addElement(child);\n        return child;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_2Test.java",
    "test_prompt": "// XmlElement_2Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addSubElement(String)} method.\n*/\nclass XmlElement_2Test {",
    "method_signature": "addSubElement(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param Name The name of the sub element to add\n     * @param Data String Data for this element\n     */\n    public XmlElement addSubElement(String name, String data) {\n        XmlElement e \u003d new XmlElement(name);\n        e.setData(data);\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_3Test.java",
    "test_prompt": "// XmlElement_3Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addSubElement(String, String)} method.\n*/\nclass XmlElement_3Test {",
    "method_signature": "addSubElement(String, String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlIO.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\n/**\n * XML IO reading and writing utility.\n *\n * @author fdietz\n */\npublic class XmlIO extends DefaultHandler {\n\n    /**\n     * Loads from the InputStream into the root Xml Element.\n     *\n     * @param input the input stream to load from.\n     */\n    public boolean load(InputStream input) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(input, this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlIO",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_0Test.java",
    "test_prompt": "// XmlIO_0Test.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlIO}.\n* It contains ten unit test cases for the {@link XmlIO#load(InputStream)} method.\n*/\nclass XmlIO_0Test {",
    "method_signature": "load(InputStream)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlIO.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\n/**\n * XML IO reading and writing utility.\n *\n * @author fdietz\n */\npublic class XmlIO extends DefaultHandler {\n\n    /**\n     * Load a file. This is what starts things off.\n     *\n     * @param inputURL the URL to load XML from.\n     */\n    public boolean load(URL inputURL) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(inputURL.toString(), this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlIO",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java",
    "test_prompt": "// XmlIO_1Test.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlIO}.\n* It contains ten unit test cases for the {@link XmlIO#load(URL)} method.\n*/\nclass XmlIO_1Test {",
    "method_signature": "load(URL)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     *\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java",
    "test_prompt": "// InspirentoUtilities_0Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String)} method.\n*/\nclass InspirentoUtilities_0Test {",
    "method_signature": "tokenize(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Replaces all characters that may\n     * affect program\u0027s normal running in the string\n     * with the escape strings in HTML.\n     *\n     * @param str source string\n     * @return a string which is processed\n     */\n    public static String escapeText(String str) {\n        StringBuffer buffer \u003d new StringBuffer(str);\n        stringReplaceAll(buffer, \u0027\u0026\u0027, \"\u0026amp;\");\n        stringReplaceAll(buffer, \u0027\u003c\u0027, \"\u0026lt;\");\n        stringReplaceAll(buffer, \u0027\u003e\u0027, \"\u0026gt;\");\n        stringReplaceAll(buffer, \u0027\"\u0027, \"\u0026quot;\");\n        stringReplaceAll(buffer, \u0027\\\u0027\u0027, \"\u0026apos;\");\n        return buffer.toString();\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_1Test.java",
    "test_prompt": "// InspirentoUtilities_1Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#escapeText(String)} method.\n*/\nclass InspirentoUtilities_1Test {",
    "method_signature": "escapeText(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Utility method to replace all the specified \u003ccode\u003etoken\u003c/code\u003e in\n     * string \u003ccode\u003esource\u003c/code\u003e with the specified \u003ccode\u003e\n     * replacement\u003c/code\u003e.\n     *\n     * @param source the source string\n     * @param token the token to be replaced\n     * @param replacement the string used to replace the token\n     * @return a \u003ccode\u003eStringBuffer\u003c/code\u003e object that contains\n     *         the modified string\n     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)\n     */\n    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {\n        for (int i \u003d 0; i \u003c source.length(); i++) {\n            if (source.charAt(i) \u003d\u003d token) {\n                //++i?\n                source \u003d source.replace(i, ++i, replacement);\n            }\n        }\n        return source;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java",
    "test_prompt": "// InspirentoUtilities_2Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.\n*/\nclass InspirentoUtilities_2Test {",
    "method_signature": "stringReplaceAll(StringBuffer, char, String)",
    "suffix": "2"
  }
]