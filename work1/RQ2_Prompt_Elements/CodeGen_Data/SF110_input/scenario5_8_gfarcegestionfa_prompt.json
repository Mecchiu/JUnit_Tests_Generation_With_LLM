[
  {
    "numberTests": "ten",
    "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     * date de la formation\n     *\n     * @return la date de la formation sous forme de String\n     */\n    public String dateLimForm() {\n        String date \u003d comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();\n        return date;\n    }\n}\n",
    "package": "fr.unice.gfarce.interGraph",
    "classname": "FenetrePrincipale",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java",
    "test_prompt": "// FenetrePrincipale_0Test.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.\n*/\nclass FenetrePrincipale_0Test {",
    "method_signature": "dateLimForm()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     * date de naissance\n     *\n     * @return la date de naissance sous form de String\n     */\n    public String dateDeNaiss() {\n        String date \u003d comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();\n        return date;\n    }\n}\n",
    "package": "fr.unice.gfarce.interGraph",
    "classname": "FenetrePrincipale",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java",
    "test_prompt": "// FenetrePrincipale_1Test.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.\n*/\nclass FenetrePrincipale_1Test {",
    "method_signature": "dateDeNaiss()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d\u0027origine, avec une ligne en plus.\n     * Ligne ajoutee a la fin de la JTable\n     *\n     * @return TableStockage\n     */\n    public TableStockage ajouterLigne() {\n        if (nbColonnes \u003e 0) {\n            // s\u0027il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)\n            this.nbLignes++;\n            TableStockage tableS \u003d new TableStockage(nbLignes, nbColonnes);\n            /* on recopie les noms des colonnes */\n            for (int j \u003d 0; j \u003c nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j));\n            }\n            /* on recopie les valeurs dans les colonnes */\n            for (int i \u003d 0; i \u003c nbLignes - 2; i++) {\n                for (int j \u003d 0; j \u003c nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                }\n            }\n            for (int j \u003d 0; j \u003c nbColonnes; j++) {\n                if (ts.getColumnClass(j).equals(String.class)) {\n                    // la derniere ligne sera a null\n                    tableS.setValueAt(\"\", nbLignes - 2, j);\n                } else if (ts.getColumnClass(j).equals(Double.class)) {\n                    tableS.setValueAt(new Double(\"0\"), nbLignes - 2, j);\n                } else\n                    // sauf si de la classe Boolean\n                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);\n            }\n            return tableS;\n        } else {\n            // pas de colonne pour construire une ligne\n            JOptionPane.showMessageDialog(null, \"PAS DE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n}\n\n/**\n * Classe TableStockage \u003cbr\u003e\n * Table qui stocke toutes les valeurs de type String; la premi\u0026egrave;re\n * ligne sert de description des colonnes \u003cbr\u003e\n *\n * @author KOWALSKI Mathias\n */\npublic class TableStockage extends AbstractTableModel {\n\n    /**\n     * Change le nom d\u0027une colonne par rapport \u0026agrave; son index\n     *\n     * @param columnIndex\n     * @param contenu\n     */\n    public void setColumnName(int columnIndex, String contenu);\n\n    /**\n     * @see javax.swing.table.TableModel#getColumnName(int)\n     */\n    public String getColumnName(int columnIndex);\n\n    /**\n     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)\n     */\n    @Override\n    public void setValueAt(Object value, int rowIndex, int columnIndex);\n\n    /**\n     * @see javax.swing.table.TableModel#getValueAt(int, int)\n     */\n    public Object getValueAt(int rowIndex, int columnIndex);\n\n    /**\n     * Recupere la classe des objets de la colonne (String par defaut si pas de ligne)\n     * @param c\n     * @return Class\n     */\n    public Class\u003c?\u003e getColumnClass(int c);\n}\n",
    "package": "fr.unice.gfarce.interGraph",
    "classname": "ModifTableStockage",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java",
    "test_prompt": "// ModifTableStockage_0Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.\n*/\nclass ModifTableStockage_0Test {",
    "method_signature": "ajouterLigne()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d\u0027origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l\u0027utilisateur de choisir a qui envoyer un mail pour la suite.\n     *\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt \u003d new ModifTableStockage(ts);\n        TableStockage tableS \u003d new TableStockage(nbLignes, nbColonnes);\n        tableS \u003d mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i \u003d 0; i \u003c nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n\n    /**\n     * G\u0026eacute;n\u0026egrave;re en sortie une TableStockage \u0026agrave; partir de la table d\u0027origine, mais avec une colonne en plus.\n     * Nouvelle colonne de nom \"nomNouvelleColonne\" et de type \"type\"\n     * Colonne Ajoutee a la fin de la JTable\n     * @param nomNouvelleColonne\n     * @param type\n     * @return TableStockage\n     */\n    public TableStockage ajouterColonne(String nomNouvelleColonne, Class\u003c?\u003e type);\n}\n\n/**\n * Classe TableStockage \u003cbr\u003e\n * Table qui stocke toutes les valeurs de type String; la premi\u0026egrave;re\n * ligne sert de description des colonnes \u003cbr\u003e\n *\n * @author KOWALSKI Mathias\n */\npublic class TableStockage extends AbstractTableModel {\n\n    /**\n     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)\n     */\n    @Override\n    public void setValueAt(Object value, int rowIndex, int columnIndex);\n}\n",
    "package": "fr.unice.gfarce.interGraph",
    "classname": "ModifTableStockage",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java",
    "test_prompt": "// ModifTableStockage_1Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.\n*/\nclass ModifTableStockage_1Test {",
    "method_signature": "colonneMail()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * G\u0026eacute;n\u0026egrave;re en sortie une TableStockage, \u0026agrave; partir de la table d\u0027origine,\n     * avec seulement les lignes o\u0026ugrave; les E-Mails ont \u0026eacute;t\u0026eacute; s\u0026eacute;lectionn\u0026eacute;\n     *\n     * @return TableStockage\n     */\n    public TableStockage selectMail() {\n        int j \u003d 0;\n        Boolean bool;\n        while ((j \u003c this.nbColonnes) \u0026\u0026 (!ts.getColumnName(j).equals(\"Envoyer E-Mail a:\"))) {\n            // renverra la position de la colonne E-Mail si elle existe\n            j++;\n        }\n        if (j !\u003d this.nbColonnes) {\n            // la colonne E-Mail (de type Booleen) existe bien\n            int newNbLignes \u003d 0;\n            for (int i \u003d 0; i \u003c nbLignes - 1; i++) {\n                bool \u003d (Boolean) ts.getValueAt(i, j);\n                if (bool) {\n                    newNbLignes++;\n                }\n            }\n            TableStockage tableS \u003d new TableStockage(newNbLignes + 1, nbColonnes);\n            int k \u003d 0;\n            for (int ind \u003d 0; ind \u003c nbColonnes; ind++) {\n                tableS.setColumnName(ind, ts.getColumnName(ind));\n            }\n            for (int row \u003d 0; row \u003c nbLignes - 1; row++) {\n                bool \u003d (Boolean) ts.getValueAt(row, j);\n                if (bool) {\n                    for (int column \u003d 0; column \u003c nbColonnes; column++) {\n                        tableS.setValueAt(ts.getValueAt(row, column), k, column);\n                        bool \u003d false;\n                    }\n                    k++;\n                }\n            }\n            return tableS;\n        } else {\n            JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n            return ts;\n        }\n    }\n}\n\n/**\n * Classe TableStockage \u003cbr\u003e\n * Table qui stocke toutes les valeurs de type String; la premi\u0026egrave;re\n * ligne sert de description des colonnes \u003cbr\u003e\n *\n * @author KOWALSKI Mathias\n */\npublic class TableStockage extends AbstractTableModel {\n\n    /**\n     * @see javax.swing.table.TableModel#getColumnName(int)\n     */\n    public String getColumnName(int columnIndex);\n\n    /**\n     * @see javax.swing.table.TableModel#getValueAt(int, int)\n     */\n    public Object getValueAt(int rowIndex, int columnIndex);\n\n    /**\n     * Change le nom d\u0027une colonne par rapport \u0026agrave; son index\n     * @param columnIndex\n     * @param contenu\n     */\n    public void setColumnName(int columnIndex, String contenu);\n\n    /**\n     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)\n     */\n    @Override\n    public void setValueAt(Object value, int rowIndex, int columnIndex);\n}\n",
    "package": "fr.unice.gfarce.interGraph",
    "classname": "ModifTableStockage",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java",
    "test_prompt": "// ModifTableStockage_2Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.\n*/\nclass ModifTableStockage_2Test {",
    "method_signature": "selectMail()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Controler.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\n\n/**\n * Fait la liaison entre l\u0027interface graphique et le moteur de l\u0027application\n * Rend comprehensible les requetes de l\u0027interface graphique pour les bases de\n * donnees\n *\n * @author scarankle\n */\npublic class Controler {\n\n    /**\n     * Retourne toutes les formations\n     *\n     * @return un tableau contenant toutes les formations\n     */\n    public Formation[] findAllFormation() {\n        return fdao.findFormation(null, null);\n    }\n}\n\npublic interface FormationDao {\n\n    public Formation[] findFormation(String name, Calendar date);\n}\n",
    "package": "fr.unice.gfarce.main",
    "classname": "Controler",
    "id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java",
    "test_prompt": "// ControlerTest.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Controler}.\n* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.\n*/\nclass ControlerTest {",
    "method_signature": "findAllFormation()",
    "suffix": ""
  }
]