[
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    public char BeginToken() throws java.io.IOException {\n        tokenBegin \u003d -1;\n        char c \u003d readChar();\n        tokenBegin \u003d bufpos;\n        return c;\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_0Test.java",
    "test_prompt": "// SimpleCharStream_0Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#BeginToken()} method.\n*/\nclass SimpleCharStream_0Test {",
    "method_signature": "BeginToken()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    public char readChar() throws java.io.IOException {\n        if (inBuf \u003e 0) {\n            --inBuf;\n            if (++bufpos \u003d\u003d bufsize)\n                bufpos \u003d 0;\n            return buffer[bufpos];\n        }\n        if (++bufpos \u003e\u003d maxNextCharInd)\n            FillBuff();\n        char c \u003d buffer[bufpos];\n        UpdateLineColumn(c);\n        return c;\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_1Test.java",
    "test_prompt": "// SimpleCharStream_1Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#readChar()} method.\n*/\nclass SimpleCharStream_1Test {",
    "method_signature": "readChar()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    public String GetImage() {\n        if (bufpos \u003e\u003d tokenBegin)\n            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);\n        else\n            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_2Test.java",
    "test_prompt": "// SimpleCharStream_2Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#GetImage()} method.\n*/\nclass SimpleCharStream_2Test {",
    "method_signature": "GetImage()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static String encodeString(String s) {\n        return new String(encode(s.getBytes()));\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_0Test.java",
    "test_prompt": "// Base64Coder_0Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encodeString(String)} method.\n*/\nclass Base64Coder_0Test {",
    "method_signature": "encodeString(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static char[] encode(byte[] in) {\n        return encode(in, in.length);\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_1Test.java",
    "test_prompt": "// Base64Coder_1Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encode(byte[])} method.\n*/\nclass Base64Coder_1Test {",
    "method_signature": "encode(byte[])",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static char[] encode(byte[] in, int iLen) {\n        // output length without padding\n        int oDataLen \u003d (iLen * 4 + 2) / 3;\n        // output length including padding\n        int oLen \u003d ((iLen + 2) / 3) * 4;\n        char[] out \u003d new char[oLen];\n        int ip \u003d 0;\n        int op \u003d 0;\n        while (ip \u003c iLen) {\n            int i0 \u003d in[ip++] \u0026 0xff;\n            int i1 \u003d ip \u003c iLen ? in[ip++] \u0026 0xff : 0;\n            int i2 \u003d ip \u003c iLen ? in[ip++] \u0026 0xff : 0;\n            int o0 \u003d i0 \u003e\u003e\u003e 2;\n            int o1 \u003d ((i0 \u0026 3) \u003c\u003c 4) | (i1 \u003e\u003e\u003e 4);\n            int o2 \u003d ((i1 \u0026 0xf) \u003c\u003c 2) | (i2 \u003e\u003e\u003e 6);\n            int o3 \u003d i2 \u0026 0x3F;\n            out[op++] \u003d map1[o0];\n            out[op++] \u003d map1[o1];\n            out[op] \u003d op \u003c oDataLen ? map1[o2] : \u0027\u003d\u0027;\n            op++;\n            out[op] \u003d op \u003c oDataLen ? map1[o3] : \u0027\u003d\u0027;\n            op++;\n        }\n        return out;\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_2Test.java",
    "test_prompt": "// Base64Coder_2Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encode(byte[], int)} method.\n*/\nclass Base64Coder_2Test {",
    "method_signature": "encode(byte[], int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static String decodeString(String s) {\n        return new String(decode(s));\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_3Test.java",
    "test_prompt": "// Base64Coder_3Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decodeString(String)} method.\n*/\nclass Base64Coder_3Test {",
    "method_signature": "decodeString(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static byte[] decode(String s) {\n        return decode(s.toCharArray());\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_4Test.java",
    "test_prompt": "// Base64Coder_4Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decode(String)} method.\n*/\nclass Base64Coder_4Test {",
    "method_signature": "decode(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    public static byte[] decode(char[] in) {\n        int iLen \u003d in.length;\n        if (iLen % 4 !\u003d 0)\n            throw new IllegalArgumentException(\"Length of Base64 encoded input string is not a multiple of 4.\");\n        while (iLen \u003e 0 \u0026\u0026 in[iLen - 1] \u003d\u003d \u0027\u003d\u0027) iLen--;\n        int oLen \u003d (iLen * 3) / 4;\n        byte[] out \u003d new byte[oLen];\n        int ip \u003d 0;\n        int op \u003d 0;\n        while (ip \u003c iLen) {\n            int i0 \u003d in[ip++];\n            int i1 \u003d in[ip++];\n            int i2 \u003d ip \u003c iLen ? in[ip++] : \u0027A\u0027;\n            int i3 \u003d ip \u003c iLen ? in[ip++] : \u0027A\u0027;\n            if (i0 \u003e 127 || i1 \u003e 127 || i2 \u003e 127 || i3 \u003e 127)\n                throw new IllegalArgumentException(\"Illegal character in Base64 encoded data.\");\n            int b0 \u003d map2[i0];\n            int b1 \u003d map2[i1];\n            int b2 \u003d map2[i2];\n            int b3 \u003d map2[i3];\n            if (b0 \u003c 0 || b1 \u003c 0 || b2 \u003c 0 || b3 \u003c 0)\n                throw new IllegalArgumentException(\"Illegal character in Base64 encoded data.\");\n            int o0 \u003d (b0 \u003c\u003c 2) | (b1 \u003e\u003e\u003e 4);\n            int o1 \u003d ((b1 \u0026 0xf) \u003c\u003c 4) | (b2 \u003e\u003e\u003e 2);\n            int o2 \u003d ((b2 \u0026 3) \u003c\u003c 6) | b3;\n            out[op++] \u003d (byte) o0;\n            if (op \u003c oLen)\n                out[op++] \u003d (byte) o1;\n            if (op \u003c oLen)\n                out[op++] \u003d (byte) o2;\n        }\n        return out;\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_5Test.java",
    "test_prompt": "// Base64Coder_5Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.\n*/\nclass Base64Coder_5Test {",
    "method_signature": "decode(char[])",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String getParam(String name) {\n        if (hasMultipartContent) {\n            Object o \u003d request.getAttribute(name);\n            return (o !\u003d null \u0026\u0026 o instanceof String) ? (String) o : BINARY_VALUE;\n        } else {\n            return request.getParameter(name);\n        }\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_0Test.java",
    "test_prompt": "// JVCRequestContext_0Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParam(String)} method.\n*/\nclass JVCRequestContext_0Test {",
    "method_signature": "getParam(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public Map\u003cString, String\u003e getParamMap(String name) {\n        Map\u003cString, String\u003e m \u003d new HashMap\u003cString, String\u003e();\n        String prefix \u003d name + \"[\";\n        int n \u003d prefix.length();\n        if (hasMultipartContent) {\n            // for multipart requests the parameters have been stored as attributes (see constructor)\n            Enumeration\u003cString\u003e e \u003d request.getAttributeNames();\n            while (e.hasMoreElements()) {\n                String key \u003d e.nextElement();\n                if (key.startsWith(prefix) \u0026\u0026 key.endsWith(\"]\")) {\n                    m.put(key.substring(n, key.length() - 1), getParam(key));\n                }\n            }\n        } else {\n            Map\u003cString, String[]\u003e pm \u003d request.getParameterMap();\n            for (String key : pm.keySet()) {\n                if (key.startsWith(prefix) \u0026\u0026 key.endsWith(\"]\")) {\n                    m.put(key.substring(n, key.length() - 1), getParam(key));\n                }\n            }\n        }\n        return m;\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_1Test.java",
    "test_prompt": "// JVCRequestContext_1Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParamMap(String)} method.\n*/\nclass JVCRequestContext_1Test {",
    "method_signature": "getParamMap(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String[] getParamValues(String name) {\n        return request.getParameterValues(name);\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_2Test.java",
    "test_prompt": "// JVCRequestContext_2Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParamValues(String)} method.\n*/\nclass JVCRequestContext_2Test {",
    "method_signature": "getParamValues(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public Object getAttribute(String name) {\n        return request.getAttribute(name);\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_3Test.java",
    "test_prompt": "// JVCRequestContext_3Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getAttribute(String)} method.\n*/\nclass JVCRequestContext_3Test {",
    "method_signature": "getAttribute(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public Object getSessionAttr(String name) {\n        if (request.getSession() \u003d\u003d null)\n            return null;\n        return request.getSession().getAttribute(name);\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_4Test.java",
    "test_prompt": "// JVCRequestContext_4Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getSessionAttr(String)} method.\n*/\nclass JVCRequestContext_4Test {",
    "method_signature": "getSessionAttr(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public Cookie getCookie(String name) {\n        if (name \u003d\u003d null)\n            return null;\n        Cookie[] cookies \u003d request.getCookies();\n        if (cookies \u003d\u003d null)\n            return null;\n        for (Cookie c : cookies) {\n            if (name.equals(c.getName()))\n                return c;\n        }\n        return null;\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_5Test.java",
    "test_prompt": "// JVCRequestContext_5Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getCookie(String)} method.\n*/\nclass JVCRequestContext_5Test {",
    "method_signature": "getCookie(String)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String absPath(String path) {\n        return getContextPath() + (path.startsWith(\"/\") ? path : \"/\" + path);\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_6Test.java",
    "test_prompt": "// JVCRequestContext_6Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#absPath(String)} method.\n*/\nclass JVCRequestContext_6Test {",
    "method_signature": "absPath(String)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String makeLink(String anchor, String path) {\n        return makeLink(anchor, path, \"\");\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_7Test.java",
    "test_prompt": "// JVCRequestContext_7Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.\n*/\nclass JVCRequestContext_7Test {",
    "method_signature": "makeLink(String, String)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String makeLink(String anchor, String path, String options) {\n        if (path.startsWith(\"/\"))\n            path \u003d absPath(path);\n        return \"\u003ca href\u003d\u0027\" + path + \"\u0027 \" + options + \"\u003e\" + anchor + \"\u003c/a\u003e\";\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_8Test.java",
    "test_prompt": "// JVCRequestContext_8Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String, String)} method.\n*/\nclass JVCRequestContext_8Test {",
    "method_signature": "makeLink(String, String, String)",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    public String getFlash(String key) {\n        return flash.get(key);\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_9Test.java",
    "test_prompt": "// JVCRequestContext_9Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getFlash(String)} method.\n*/\nclass JVCRequestContext_9Test {",
    "method_signature": "getFlash(String)",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCDispatcher.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Cookie;\nimport com.pmdesigns.jvc.tools.Base64Coder;\nimport com.pmdesigns.jvc.tools.JVCGenerator;\n\n/**\n * JVC request dispatching servlet\n *\n * @author mike dooley\n */\npublic class JVCDispatcher extends HttpServlet {\n\n    public static JVCRequestContext getRC() {\n        return ctxHolder.get();\n    }\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCDispatcher",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCDispatcher.java",
    "test_prompt": "// JVCDispatcherTest.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Cookie;\nimport com.pmdesigns.jvc.tools.Base64Coder;\nimport com.pmdesigns.jvc.tools.JVCGenerator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCDispatcher}.\n* It contains ten unit test cases for the {@link JVCDispatcher#getRC()} method.\n*/\nclass JVCDispatcherTest {",
    "method_signature": "getRC()",
    "suffix": ""
  }
]