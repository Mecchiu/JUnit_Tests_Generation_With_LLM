[
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStereo0D.java\npackage net.sf.jniinchi;\n\n/**\n * Encapsulates properites of InChI Stereo Parity.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiStereo0D {\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at tetrahedral\n     * atom centres.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  4 neighbors\n     *\n     *           X                    neighbor[4] : {#W, #X, #Y, #Z}\n     *           |                    central_atom: #A\n     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral\n     *           |\n     *           Z\n     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is \u0027e\u0027 otherwise \u0027o\u0027\n     *  Example (see AXYZW above): if W is above the plane XYZ then parity \u003d \u0027e\u0027\n     *\n     *  3 neighbors\n     *\n     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}\n     *            /          /        central_atom: #A\n     *        X--A  (e.g. O\u003dS   )     type        : INCHI_StereoType_Tetrahedral\n     *            \\          \\\n     *             Z          Z\n     *\n     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is \u0027e\u0027,\n     *                                                         otherwise \u0027o\u0027\n     *  unknown parity \u003d \u0027u\u0027\n     *  Example (see AXYZ above): if A is above the plane XYZ then parity \u003d \u0027e\u0027\n     *  This approach may be used also in case of an implicit H attached to A.\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  a list of 4 atoms corresponds to CML atomRefs4\n     *\n     *  tetrahedral atom\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML atomParity \u003e 0 \u003c\u003d\u003e INCHI_PARITY_EVEN\n     *  CML atomParity \u003c 0 \u003c\u003d\u003e INCHI_PARITY_ODD\n     *\n     *                               | 1   1   1   1  |  where xW is x-coordinate of\n     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a\n     *  CML atomParity \u003d determinant | yW  yX  yY  yZ |  \u0027right-handed\u0027 Cartesian\n     *                               | zW  zX  xY  zZ |  coordinate system)\n     * \u003c/pre\u003e\n     *\n     * @param atC Central atom\n     * @param at0 Neighbour atom 0\n     * @param at1 Neighbour atom 1\n     * @param at2 Neighbour atom 2\n     * @param at3 Neighbour atom 3\n     * @param parity Parity\n     */\n    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {\n        JniInchiStereo0D stereo \u003d new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);\n        return stereo;\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStereo0D",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_0Test.java",
    "test_prompt": "// JniInchiStereo0D_0Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_0Test {",
    "method_signature": "createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStereo0D.java\npackage net.sf.jniinchi;\n\n/**\n * Encapsulates properites of InChI Stereo Parity.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiStereo0D {\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at stereogenic\n     * double bonds.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  stereogenic bond \u003eA\u003dB\u003c or cumulene \u003eA\u003dC\u003dC\u003dB\u003c\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order\n     *  X                           central_atom : NO_ATOM\n     *   \\            X      Y      type         : INCHI_StereoType_DoubleBond\n     *    A\u003d\u003dB         \\    /\n     *        \\         A\u003d\u003dB\n     *         Y\n     *\n     *  parity\u003d \u0027e\u0027    parity\u003d \u0027o\u0027   unknown parity \u003d \u0027u\u0027\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *  stereogenic double bond and (not yet defined in CML) cumulenes\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML \u0027C\u0027 (cis)      \u003c\u003d\u003e INCHI_PARITY_ODD\n     *  CML \u0027T\u0027 (trans)    \u003c\u003d\u003e INCHI_PARITY_EVEN\n     * \u003c/pre\u003e\n     *\n     * @param at0 Neighbour atom 0\n     * @param at1 Neighbour atom 1\n     * @param at2 Neighbour atom 2\n     * @param at3 Neighbour atom 3\n     * @param parity Parity\n     * @return\n     */\n    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {\n        JniInchiStereo0D stereo \u003d new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);\n        return stereo;\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStereo0D",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_1Test.java",
    "test_prompt": "// JniInchiStereo0D_1Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_1Test {",
    "method_signature": "createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom Atom to add\n     * @return Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom) {\n        atomList.add(atom);\n        return atom;\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_0Test.java",
    "test_prompt": "// JniInchiStructure_0Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.\n*/\nclass JniInchiStructure_0Test {",
    "method_signature": "addAtom(JniInchiAtom)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond Bond to add\n     * @return Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond) {\n        bondList.add(bond);\n        return bond;\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_1Test.java",
    "test_prompt": "// JniInchiStructure_1Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.\n*/\nclass JniInchiStructure_1Test {",
    "method_signature": "addBond(JniInchiBond)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity Parity to add\n     * @return Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {\n        stereoList.add(parity);\n        return parity;\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_2Test.java",
    "test_prompt": "// JniInchiStructure_2Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.\n*/\nclass JniInchiStructure_2Test {",
    "method_signature": "addStereo0D(JniInchiStereo0D)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Returns atom from structure.\n     *\n     * @param i Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i) {\n        return (JniInchiAtom) atomList.get(i);\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_3Test.java",
    "test_prompt": "// JniInchiStructure_3Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.\n*/\nclass JniInchiStructure_3Test {",
    "method_signature": "getAtom(int)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Returns bond from structure.\n     *\n     * @param i Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i) {\n        return (JniInchiBond) bondList.get(i);\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_4Test.java",
    "test_prompt": "// JniInchiStructure_4Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.\n*/\nclass JniInchiStructure_4Test {",
    "method_signature": "getBond(int)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Returns stereo parity from structure.\n     *\n     * @param i Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i) {\n        return (JniInchiStereo0D) stereoList.get(i);\n    }\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_5Test.java",
    "test_prompt": "// JniInchiStructure_5Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.\n*/\nclass JniInchiStructure_5Test {",
    "method_signature": "getStereo0D(int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiWrapper.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * \u003cp\u003eJNI Wrapper for International Chemical Identifier (InChI) C++ library.\n *\n * \u003cp\u003eThis class is not intended to be used directly, but should be accessed\n * through subclasses that read data formats and load them into the InChI\n * data structures.\n *\n * \u003cp\u003eSubclasses should load data through the addAtom, addBond and addParity\n * methods. Once the molecule is fully loaded then the generateInchi method\n * should be called. Ideally this should all take place within the subclass\u0027s\n * constructor. The public get methods will all return null until this has\n * happened.\n *\n * \u003cp\u003eSee \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiWrapper {\n\n    /**\n     * Calculates the InChIKey for an InChI string.\n     *\n     * @param inchi source InChI string\n     * @return InChIKey output\n     * @throws JniInchiException\n     */\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\n        if (inchi \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Null InChI\");\n        }\n        JniInchiWrapper wrapper \u003d getWrapper();\n        wrapper.getLock();\n        try {\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException;\n\n    private static synchronized void getLock() throws JniInchiException;\n\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiWrapper",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_0Test.java",
    "test_prompt": "// JniInchiWrapper_0Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.\n*/\nclass JniInchiWrapper_0Test {",
    "method_signature": "getInchiKey(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiWrapper.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * \u003cp\u003eJNI Wrapper for International Chemical Identifier (InChI) C++ library.\n *\n * \u003cp\u003eThis class is not intended to be used directly, but should be accessed\n * through subclasses that read data formats and load them into the InChI\n * data structures.\n *\n * \u003cp\u003eSubclasses should load data through the addAtom, addBond and addParity\n * methods. Once the molecule is fully loaded then the generateInchi method\n * should be called. Ideally this should all take place within the subclass\u0027s\n * constructor. The public get methods will all return null until this has\n * happened.\n *\n * \u003cp\u003eSee \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiWrapper {\n\n    /**\n     * \u003cp\u003eChecks if the string represents valid InChI/standard InChI.\u003c/p\u003e\n     *\n     * @param inchi source InChI\n     * @param strict if \u003ccode\u003efalse\u003c/code\u003e, just briefly check for proper layout (prefix, version, etc.) The result\n     *               may not be strict.\n     *               If \u003ccode\u003etrue\u003c/code\u003e, try to perform InChI2InChI conversion and returns success if a resulting\n     *               InChI string exactly match source. The result may be \u0027false alarm\u0027 due to imperfectness of\n     */\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\n        if (inchi \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Null InChI\");\n        }\n        JniInchiWrapper wrapper \u003d getWrapper();\n        wrapper.getLock();\n        try {\n            int ret \u003d wrapper.CheckINCHI(inchi, strict);\n            INCHI_STATUS retStatus \u003d INCHI_STATUS.getValue(ret);\n            if (retStatus \u003d\u003d null) {\n                throw new JniInchiException(\"Unknown return status: \" + ret);\n            }\n            return retStatus;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException;\n\n    private static synchronized void getLock() throws JniInchiException;\n\n    private native int CheckINCHI(String inchi, boolean strict);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiWrapper",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_1Test.java",
    "test_prompt": "// JniInchiWrapper_1Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.\n*/\nclass JniInchiWrapper_1Test {",
    "method_signature": "checkInchi(String, boolean)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Main.java\npackage net.sf.jniinchi;\n\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\n\n/**\n * Simple test class, for debugging purposes.\n *\n * @author sea36\n */\npublic class Main {\n\n    /**\n     * Provide test structure.\n     *\n     * @return\n     */\n    public static JniInchiStructure getTestMolecule() {\n        JniInchiStructure struct \u003d new JniInchiStructure();\n        JniInchiAtom a1 \u003d struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, \"C\"));\n        JniInchiAtom a2 \u003d struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, \"C\"));\n        JniInchiAtom a3 \u003d struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, \"N\"));\n        JniInchiAtom a4 \u003d struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, \"C\"));\n        JniInchiAtom a5 \u003d struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, \"O\"));\n        JniInchiAtom a6 \u003d struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, \"O\"));\n        a1.setImplicitH(1);\n        a3.setImplicitH(2);\n        a4.setImplicitH(3);\n        a5.setImplicitH(1);\n        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));\n        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);\n        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));\n        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));\n        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));\n        return struct;\n    }\n}\n\n/**\n * Encapsulates properties of InChI Atom.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiAtom {\n\n    /**\n     * Sets number of implicit hydrogens on atom. If set to -1, InChI will add\n     * implicit H automatically.\n     *\n     * @param n Number of implicit hydrogen\n     */\n    public void setImplicitH(final int n);\n}\n\n/**\n * Encapsulates properties of InChI Bond.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiBond {\n\n    /**\n     * Set 2D stereo definition.\n     *\n     * @param stereo Bond 2D stereo definition\n     */\n    public void setStereoDefinition(INCHI_BOND_STEREO stereo);\n}\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom Atom to add\n     * @return Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "Main",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java",
    "test_prompt": "// MainTest.java\npackage net.sf.jniinchi;\n\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.\n*/\nclass MainTest {",
    "method_signature": "getTestMolecule()",
    "suffix": ""
  }
]