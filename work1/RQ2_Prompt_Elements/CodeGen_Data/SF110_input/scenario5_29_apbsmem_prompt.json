[
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns the default lower bounds for\n     *  this axis scale.  Returns -1.0.\n     */\n    public double lowerBounds() {\n        return -1.0;\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_0Test.java",
    "test_prompt": "// LinearAxisScale_0Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.\n*/\nclass LinearAxisScale_0Test {",
    "method_signature": "lowerBounds()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns the default upper bounds for\n     *  this axis scale.  Returns 1.0.\n     */\n    public double upperBounds() {\n        return 1.0;\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_1Test.java",
    "test_prompt": "// LinearAxisScale_1Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.\n*/\nclass LinearAxisScale_1Test {",
    "method_signature": "upperBounds()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns an AxisLimitData object that contains\n     *  the preferred axis limits and tick mark spacing for the\n     *  specified range of data values for this linear axis scale.\n     *\n     * @param aLB The lower bounds of the data plotted on this axis.\n     * @param aUB The upper bounds of the data plotted on this axis.\n     */\n    public AxisLimitData findGoodLimits(double aLB, double aUB) {\n        //\tThe lower limit and tick mark spacing being calculated.\n        double s \u003d 0., r \u003d 0.;\n        //\tMake sure we don\u0027t have a degenerate case.\n        if (Math.abs(aUB - aLB) \u003c\u003d 0.000001) {\n            if (aUB \u003e 0.) {\n                aUB \u003d 2. * aUB;\n                aLB \u003d 0.;\n            } else if (aLB \u003c 0) {\n                aLB \u003d 2. * aLB;\n                aUB \u003d 0.;\n            }\n            if (Math.abs(aUB - aLB) \u003c\u003d 0.000001) {\n                aLB \u003d lowerBounds();\n                aUB \u003d upperBounds();\n            }\n        }\n        if (DEBUG) {\n            System.out.println(\"In findGoodLimits()...\");\n            System.out.println(\"   aLB \u003d \" + aLB + \", aUB \u003d \" + aUB);\n        }\n        //\tObject used to return results.\n        AxisLimitData limData \u003d new AxisLimitData();\n        boolean done \u003d false;\n        while (!done) {\n            done \u003d true;\n            double ub \u003d aUB;\n            double lb \u003d aLB;\n            double delta \u003d ub - lb;\n            //\tScale up by s, a power of 10, so range (delta) exceeds 1.\n            s \u003d 1.;\n            while (delta * s \u003c 10.) s *\u003d 10.;\n            //\tFind power of 10 quantum, r, such that delta/10 \u003c\u003d r \u003c delta.\n            r \u003d 1. / s;\n            while (10. * r \u003c delta) r *\u003d 10.;\n            //\tSet r\u003d(1,2,5)*10**n so that 3-5 quanta cover range.\n            if (r \u003e\u003d delta / 2.)\n                r /\u003d 2.;\n            else if (r \u003c delta / 5.)\n                r *\u003d 2.;\n            limData.ub \u003d modceil(ub, r);\n            limData.lb \u003d modfloor(lb, r);\n            //\tIf lower bound is \u003c\u003d r and \u003e 0, then repeat.\n            if (limData.lb \u003c\u003d r \u0026\u0026 limData.lb \u003e 0.) {\n                aLB \u003d 0.;\n                done \u003d false;\n                //\tIf upper bound \u003e\u003d -r and \u003c 0, then repeat.\n            } else if (limData.ub \u003e\u003d -r \u0026\u0026 limData.ub \u003c 0.) {\n                aUB \u003d 0.;\n                done \u003d false;\n            }\n        }\n        //\tSave off tick mark spacing.\n        limData.quantum \u003d r;\n        if (DEBUG) {\n            System.out.println(\"    limData.lb \u003d \" + limData.lb + \", limData.ub \u003d \" + limData.ub + \", limData.quantum \u003d \" + limData.quantum);\n        }\n        return limData;\n    }\n\n    /**\n     *  Method that returns the default lower bounds for\n     *  this axis scale.  Returns -1.0.\n     */\n    public double lowerBounds();\n\n    /**\n     *  Method that returns the default upper bounds for\n     *  this axis scale.  Returns 1.0.\n     */\n    public double upperBounds();\n\n    private double modceil(double f, double t);\n\n    private double modfloor(double f, double t);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_2Test.java",
    "test_prompt": "// LinearAxisScale_2Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.\n*/\nclass LinearAxisScale_2Test {",
    "method_signature": "findGoodLimits(double, double)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Find the position and size (in screen coordinates) of tick\n     *  marks for a given axis scale.\n     *\n     * @param quantum Tick mark step size for the axis using this scale.\n     * @param aLB Lower bounds of axis using this scale.\n     * @param aUB Upper bounds of axis using this scale.\n     * @param xA Scaling coefficient for this axis.\n     * @param xB Scaling coefficient for this axis.\n     * @return An TickMarkData object containing the tick mark positions, lengths,\n     *          and data values at each tick mark.\n     */\n    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB) {\n        double xl \u003d 0;\n        double xu \u003d 0;\n        double q \u003d quantum;\n        if (q \u003e 0.) {\n            xl \u003d modfloor(aLB, q);\n            xu \u003d modfloor(aUB - q / 10., q / 5.) + q / 10.;\n        } else {\n            xl \u003d modfloor(aUB, q);\n            xu \u003d modfloor(aLB + q / 10., q / 5.) - q / 10.;\n        }\n        //\tDetermine the number of tick marks.\n        int xn \u003d (int) ((xu - xl) / (Math.abs(quantum) / 5.));\n        if (DEBUG) {\n            System.out.println(\"In calcTickMarks()...\");\n            System.out.println(\"    quantum \u003d \" + quantum + \", aLB \u003d \" + aLB + \", aUB \u003d \" + aUB);\n            System.out.println(\"    xA \u003d \" + xA + \", xB \u003d \" + xB);\n            System.out.println(\"    xl \u003d \" + xl + \", xu \u003d \" + xu);\n            System.out.println(\"    xn \u003d \" + xn);\n        }\n        //\tAllocate memory for tick mark arrays.\n        int[] mark \u003d new int[xn];\n        int[] lmark \u003d new int[xn];\n        float[] markValue \u003d new float[xn];\n        xn \u003d 0;\n        int i \u003d 0;\n        for (double x \u003d xl; x \u003c\u003d xu; x +\u003d Math.abs(quantum) / 5., ++i) {\n            //\tBounds check.\n            if (q \u003e 0.)\n                if (x \u003c\u003d aLB || x \u003e\u003d aUB)\n                    continue;\n            if (q \u003c 0.)\n                if (x \u003e\u003d aLB || x \u003c\u003d aUB)\n                    continue;\n            //\tStore tick mark.\n            mark[xn] \u003d (int) (func(x) * xA + xB);\n            markValue[xn] \u003d (float) x;\n            if (i % 5 !\u003d 0)\n                //\tMinor tick mark.\n                lmark[xn++] \u003d PlotAxis.kTick;\n            else\n                //\tMajor tick mark.\n                lmark[xn++] \u003d 3 * PlotAxis.kTick;\n        }\n        if (DEBUG) {\n            System.out.println(\"Tick mark values:\");\n            int length \u003d markValue.length;\n            for (i \u003d 0; i \u003c length; ++i) System.out.print(\"   \" + markValue[i]);\n            System.out.println();\n        }\n        //\tCreate a tick mark data object and pass it out.\n        TickMarkData data \u003d new TickMarkData();\n        data.mark \u003d mark;\n        data.lmark \u003d lmark;\n        data.markValue \u003d markValue;\n        return data;\n    }\n\n    private double modfloor(double f, double t);\n\n    /**\n     *  The transformation function used to scale the data\n     *  plotted against this axis.\n     *  This axis uses a linear scaling function:  f(a) \u003d a.\n     */\n    public final double func(double a);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_3Test.java",
    "test_prompt": "// LinearAxisScale_3Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.\n*/\nclass LinearAxisScale_3Test {",
    "method_signature": "calcTickMarks(double, double, double, double, double)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the number of PlotDatum objects in this run.\n     *\n     * @return The number of plot data objects in this run.\n     */\n    public int size() {\n        return data.size();\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_0Test.java",
    "test_prompt": "// PlotRun_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#size()} method.\n*/\nclass PlotRun_0Test {",
    "method_signature": "size()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the PlotDatum object at the specified position\n     *  in this run.\n     *\n     * @param index The index of the plot data object to return.\n     * @return The PlotDatum object at the specified position\n     *           in this run.\n     */\n    public Object get(int index) {\n        return data.get(index);\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_1Test.java",
    "test_prompt": "// PlotRun_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#get(int)} method.\n*/\nclass PlotRun_1Test {",
    "method_signature": "get(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Remove the plot data object at the specified position in\n     *  this run.  Shifts any subsequent data elements\n     *  to the left (subtracts one from their indices).  Returns the\n     *  data element that was removed from this run.\n     *\n     * @param index The index of the plot data element to remove.\n     * @return The PlotDatum object previously at the specified position.\n     */\n    public Object remove(int index) {\n        return data.remove(index);\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_2Test.java",
    "test_prompt": "// PlotRun_2Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.\n*/\nclass PlotRun_2Test {",
    "method_signature": "remove(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return an enumeration of all the plot data elements in\n     *  this run.\n     *\n     * @return An interation of all the PlotDatum objects in this run.\n     */\n    public Iterator iterator() {\n        return data.iterator();\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_3Test.java",
    "test_prompt": "// PlotRun_3Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#iterator()} method.\n*/\nclass PlotRun_3Test {",
    "method_signature": "iterator()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the number of PlotRun objects in this run list.\n     *\n     * @return The number of plot run objects in this run list.\n     */\n    public int size() {\n        return data.size();\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_0Test.java",
    "test_prompt": "// PlotRunList_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#size()} method.\n*/\nclass PlotRunList_0Test {",
    "method_signature": "size()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the PlotRun object at the specified position\n     *  in this run list.\n     *\n     * @param index The index of the plot run object to return.\n     * @return The PlotRun object at the specified position\n     *           in this run.\n     */\n    public Object get(int index) {\n        return data.get(index);\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_1Test.java",
    "test_prompt": "// PlotRunList_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.\n*/\nclass PlotRunList_1Test {",
    "method_signature": "get(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Remove the plot run object at the specified position in\n     *  this run list.  Shifts any subsequent run elements\n     *  to the left (subtracts one from their indices).  Returns the\n     *  run element that was removed from this run list.\n     *\n     * @param index The index of the plot run element to remove.\n     * @return The PlotRun object previously at the specified position.\n     */\n    public Object remove(int index) {\n        return data.remove(index);\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_2Test.java",
    "test_prompt": "// PlotRunList_2Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.\n*/\nclass PlotRunList_2Test {",
    "method_signature": "remove(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return an enumeration of all the plot run elements in\n     *  this run list.\n     *\n     * @return An interation of all the PlotRun objects in this list.\n     */\n    public Iterator iterator() {\n        return data.iterator();\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_3Test.java",
    "test_prompt": "// PlotRunList_3Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.\n*/\nclass PlotRunList_3Test {",
    "method_signature": "iterator()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// ContourGenerator.java\npackage jahuwaldt.plot;\n\nimport java.util.*;\n\n/**\n *  \u003cp\u003e An object used to generate a list of contour lines\n *      or paths from a set of gridded three dimensional data.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,\n *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,\n *      Moffett Field, CA 94035.\n *      I don\u0027t know how the original Fortran code looked like or where it came from,\n *      other than that NeXTcontour1.4 is based on Pieter Bunings\u0027 PLOT3D package\n *      for Computational Fluid Dynamics.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  November 11, 2000\n * @version November 23, 2000\n */\npublic class ContourGenerator {\n\n    /**\n     *  Returns true if the contour generation process is done.  False if it is not.\n     */\n    public boolean done() {\n        return cCalculated;\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "ContourGenerator",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java",
    "test_prompt": "// ContourGeneratorTest.java\npackage jahuwaldt.plot;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ContourGenerator}.\n* It contains ten unit test cases for the {@link ContourGenerator#done()} method.\n*/\nclass ContourGeneratorTest {",
    "method_signature": "done()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotDatum.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\n\n/**\n *  \u003cp\u003e This class represents a single data point on a plot\n *      and includes all the information required by each point.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  June 1, 2000\n * @version November 20, 2000\n */\npublic class PlotDatum extends Object implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns true if this data point has an error bar.\n     */\n    public boolean hasErrorBar() {\n        return errBarFlg;\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotDatum",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_0Test.java",
    "test_prompt": "// PlotDatum_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotDatum}.\n* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.\n*/\nclass PlotDatum_0Test {",
    "method_signature": "hasErrorBar()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotDatum.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\n\n/**\n *  \u003cp\u003e This class represents a single data point on a plot\n *      and includes all the information required by each point.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  June 1, 2000\n * @version November 20, 2000\n */\npublic class PlotDatum extends Object implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return true if this datum is connected to the previous one by a line\n     *  and false if it is not.\n     */\n    public boolean connected() {\n        return conFlg;\n    }\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotDatum",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_1Test.java",
    "test_prompt": "// PlotDatum_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotDatum}.\n* It contains ten unit test cases for the {@link PlotDatum#connected()} method.\n*/\nclass PlotDatum_1Test {",
    "method_signature": "connected()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// FileEditor.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\n\npublic class FileEditor {\n\n    /**\n     * Extract energy from the final APBS output file.\n     *\n     * @param filename Path to APBS output file.\n     * @return String array of total energies in kilojoules, kilocalories and k_BT\n     */\n    public String[] getEnergy(String filename) {\n        //returns [0] energy in kJ/mol, then [1] is in kcal/mol\n        File temp \u003d new File(filename);\n        String[] energies \u003d new String[3];\n        if (!temp.exists())\n            return null;\n        else {\n            NumberFormat formatter \u003d new DecimalFormat(\"0.####E0\");\n            double finalenergy \u003d 0;\n            try {\n                Scanner fScan \u003d new Scanner(new FileInputStream(filename));\n                String nextline;\n                //tells whether solvated or reference\n                boolean solvated \u003d true;\n                while (fScan.hasNextLine()) {\n                    nextline \u003d fScan.nextLine();\n                    if (nextline.contains(\"elec name solvated\")) {\n                        solvated \u003d true;\n                    } else if (nextline.contains(\"elec name reference\")) {\n                        solvated \u003d false;\n                    } else if (nextline.contains(\"Global net ELEC energy \") \u0026\u0026 solvated) {\n                        //if found energy and its in solvated\n                        System.out.println(nextline);\n                        if (nextline.contains(\"+\")) {\n                            //if its time 10^positive int\n                            finalenergy \u003d toDoublePos(nextline);\n                        } else {\n                            //if its time 10^negative int\n                            finalenergy \u003d toDoubleNeg(nextline);\n                        }\n                    }\n                }\n            } catch (Exception e1) {\n                e1.printStackTrace();\n            }\n            energies[0] \u003d formatter.format(finalenergy) + \" kJ/mol\";\n            energies[1] \u003d formatter.format(finalenergy * 0.239) + \" kcal/mol\";\n            energies[2] \u003d formatter.format(finalenergy * 0.4035) + \" kT\";\n            return energies;\n        }\n    }\n\n    private double toDoublePos(String theDouble);\n\n    private double toDoubleNeg(String theDouble);\n}\n",
    "package": "apbs_mem_gui",
    "classname": "FileEditor",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_0Test.java",
    "test_prompt": "// FileEditor_0Test.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileEditor}.\n* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.\n*/\nclass FileEditor_0Test {",
    "method_signature": "getEnergy(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FileEditor.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\n\npublic class FileEditor {\n\n    /**\n     * Extract the energy from a calculation that has summed the component atom energies\n     * rather than simply taking the total. (pull_comps.c)\n     *\n     * @param filename Path to the file written by pull_comps with the energy sum.\n     * @return a double array of the total energy of each calculation (up to 6 calculations if there are 3 focus levels).\n     */\n    public double[] getCompEnergy(String filename) {\n        File temp \u003d new File(filename);\n        if (!temp.exists())\n            return null;\n        else {\n            double[] finalenergy \u003d new double[6];\n            int i \u003d 0;\n            try {\n                Scanner fScan \u003d new Scanner(new FileInputStream(filename));\n                String nextline;\n                double D;\n                while (fScan.hasNextLine()) {\n                    nextline \u003d fScan.nextLine();\n                    System.out.println(nextline);\n                    if (!nextline.equals(\"\")) {\n                        if (nextline.contains(\"+\")) {\n                            //if its time 10^positive int\n                            D \u003d Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(\"+\") - 1)));\n                            D *\u003d Math.pow(10, Double.parseDouble(nextline.substring(nextline.indexOf(\"+\") + 1)));\n                            //  /(temperature*0.008314472); // convert to kT\n                            finalenergy[i] \u003d D;\n                        } else {\n                            //if its time 10^negative int\n                            D \u003d Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(\"-\") - 1)));\n                            D *\u003d Math.pow(10, Double.parseDouble(nextline.substring(nextline.lastIndexOf(\"-\"))));\n                            //  /(temperature*0.008314472);\n                            finalenergy[i] \u003d D;\n                        }\n                        i++;\n                    }\n                }\n            } catch (Exception e1) {\n                e1.printStackTrace();\n            }\n            return finalenergy;\n        }\n    }\n}\n",
    "package": "apbs_mem_gui",
    "classname": "FileEditor",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_1Test.java",
    "test_prompt": "// FileEditor_1Test.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileEditor}.\n* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.\n*/\nclass FileEditor_1Test {",
    "method_signature": "getCompEnergy(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Main.java\npackage apbs_mem_gui;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\nimport java.io.*;\nimport com.jgoodies.forms.layout.*;\nimport com.jgoodies.forms.builder.*;\nimport org.jmol.api.JmolViewer;\nimport org.jmol.api.JmolAdapter;\nimport org.jmol.popup.JmolPopup;\n\npublic class InFile {\n\n    /* setter methods for the Main class */\n    public void setMol1(String mol1);\n\n    public void setMol2(String mol2);\n\n    public void setDime(String newDime);\n\n    public void setGlen(String newGlen, int f);\n\n    public void setIon1Charge(String newi1charge);\n\n    public void setIon1Conc(String newi1conc);\n\n    public void setIon1Radius(String newi1radius);\n\n    public void setIon2Charge(String newi2charge);\n\n    public void setIon2Conc(String newi2conc);\n\n    public void setIon2Radius(String newi2radius);\n\n    public void setProteinDi(String newpDi);\n\n    public void setSolventDi(String newsDi);\n\n    public void setSrad(String newrad);\n\n    public void setSdens(String newden);\n\n    public void setTemp(String newtem);\n\n    public void setType(int type);\n\n    public void setPotential(String pot);\n\n    public void setLmem(String lm);\n\n    public void setZmem(String zm);\n\n    public void setMdie(String md);\n\n    public void setIdie(String id);\n\n    public void setGeo1(String g1);\n\n    public void setGeo2(String g2);\n\n    public void setGeo3(String g3);\n\n    public void setDrawPot(boolean dp);\n\n    public void setBoundCond(String newbcd);\n\n    public void setSolMethod(String newsol);\n\n    public void setCenter(String ctr);\n}\n\n/**\n * @author Keith Callenberg, Gabriel de Forest\n */\npublic class Main {\n\n    /**\n     * Store the current GUI text field values in the inFile object.\n     *\n     * @return True if the operation was succesful, false otherwise.\n     */\n    public boolean SaveData() {\n        if (pqrFile1.getText().equals(\"\") || pqrFile1.getText() \u003d\u003d null || gridDimx.getText().equals(\"\") || gridDimx.getText() \u003d\u003d null || gridDimy.getText().equals(\"\") || gridDimy.getText() \u003d\u003d null || gridDimz.getText().equals(\"\") || gridDimz.getText() \u003d\u003d null || gridLen1a.getText().equals(\"\") || gridLen1a.getText() \u003d\u003d null || gridLen2a.getText().equals(\"\") || gridLen2a.getText() \u003d\u003d null || gridLen3a.getText().equals(\"\") || gridLen3a.getText() \u003d\u003d null || countIon1Charge.getText().equals(\"\") || countIon1Charge.getText() \u003d\u003d null || countIon1Con.getText().equals(\"\") || countIon1Con.getText() \u003d\u003d null || countIon1Sz.getText().equals(\"\") || countIon1Sz.getText() \u003d\u003d null || countIon2Charge.getText().equals(\"\") || countIon2Charge.getText() \u003d\u003d null || countIon2Con.getText().equals(\"\") || countIon2Con.getText() \u003d\u003d null || countIon2Sz.getText().equals(\"\") || countIon2Sz.getText() \u003d\u003d null || proteinDi.getText().equals(\"\") || proteinDi.getText() \u003d\u003d null || solventDi.getText().equals(\"\") || solventDi.getText() \u003d\u003d null || srad.getText().equals(\"\") || srad.getText() \u003d\u003d null || sdens.getText().equals(\"\") || sdens.getText() \u003d\u003d null || temp.getText().equals(\"\") || temp.getText() \u003d\u003d null) {\n            if (maxfocus \u003e 0 \u0026\u0026 (gridLen1b.getText().equals(\"\") || gridLen1b.getText() \u003d\u003d null || gridLen2b.getText().equals(\"\") || gridLen2b.getText() \u003d\u003d null || gridLen3b.getText().equals(\"\") || gridLen3b.getText() \u003d\u003d null)) {\n                if (maxfocus \u003e 1 \u0026\u0026 (gridLen1c.getText().equals(\"\") || gridLen1c.getText() \u003d\u003d null || gridLen2c.getText().equals(\"\") || gridLen2c.getText() \u003d\u003d null || gridLen3c.getText().equals(\"\") || gridLen3c.getText() \u003d\u003d null)) {\n                    if (file_loaded) {\n                        //if you arent opening it and it fails then fail\n                        JOptionPane.showMessageDialog(null, \"Fill in all values first\", \"\", JOptionPane.ERROR_MESSAGE);\n                        return false;\n                    }\n                }\n            }\n        }\n        //otherwise save data\n        inFile.setMol1(pqrFile1.getText());\n        inFile.setMol2(pqrFile2.getText());\n        inFile.setDime(new String(gridDimx.getText() + \" \" + gridDimy.getText() + \" \" + gridDimz.getText()));\n        inFile.setGlen(new String(gridLen1a.getText() + \" \" + gridLen2a.getText() + \" \" + gridLen3a.getText()), 0);\n        if (maxfocus \u003e 0) {\n            inFile.setGlen(new String(gridLen1b.getText() + \" \" + gridLen2b.getText() + \" \" + gridLen3b.getText()), 1);\n        }\n        if (maxfocus \u003d\u003d 2) {\n            inFile.setGlen(new String(gridLen1c.getText() + \" \" + gridLen2c.getText() + \" \" + gridLen3c.getText()), 2);\n        }\n        inFile.setIon1Charge(countIon1Charge.getText());\n        inFile.setIon1Conc(countIon1Con.getText());\n        inFile.setIon1Radius(countIon1Sz.getText());\n        inFile.setIon2Charge(countIon2Charge.getText());\n        inFile.setIon2Conc(countIon2Con.getText());\n        inFile.setIon2Radius(countIon2Sz.getText());\n        inFile.setProteinDi(new String(proteinDi.getText()));\n        inFile.setSolventDi(new String(solventDi.getText()));\n        inFile.setSrad(srad.getText());\n        inFile.setSdens(sdens.getText());\n        inFile.setTemp(temp.getText());\n        inFile.setType(calcTypeCombo.getSelectedIndex());\n        inFile.setPotential(potential.getText());\n        inFile.setLmem(Lmem.getText());\n        inFile.setZmem(zmem.getText());\n        inFile.setMdie(membraneDi.getText());\n        inFile.setIdie(idie.getText());\n        inFile.setGeo1(geoFactor1.getText());\n        inFile.setGeo2(geoFactor2.getText());\n        inFile.setGeo3(geoFactor3.getText());\n        inFile.setDrawPot(drawPot.isSelected());\n        if (boundaryCondCombo.getSelectedIndex() \u003d\u003d 2) {\n            inFile.setBoundCond(new String(\"mdh\"));\n        } else if (boundaryCondCombo.getSelectedIndex() \u003d\u003d 1) {\n            inFile.setBoundCond(new String(\"sdh\"));\n        } else if (boundaryCondCombo.getSelectedIndex() \u003d\u003d 0) {\n            inFile.setBoundCond(new String(\"zero\"));\n        }\n        if (solMethodCombo.getSelectedIndex() \u003d\u003d 1) {\n            inFile.setSolMethod(new String(\"npbe\"));\n        } else if (solMethodCombo.getSelectedIndex() \u003d\u003d 0) {\n            inFile.setSolMethod(new String(\"lpbe\"));\n        }\n        if (centerCombo.getSelectedIndex() \u003d\u003d 0) {\n            inFile.setCenter(new String(\"0 0 0\"));\n        } else if (centerCombo.getSelectedIndex() \u003d\u003d 1) {\n            inFile.setCenter(new String(\"mol 1\"));\n        }\n        return true;\n    }\n}\n",
    "package": "apbs_mem_gui",
    "classname": "Main",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/Main.java",
    "test_prompt": "// MainTest.java\npackage apbs_mem_gui;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\nimport java.io.*;\nimport com.jgoodies.forms.layout.*;\nimport com.jgoodies.forms.builder.*;\nimport org.jmol.api.JmolViewer;\nimport org.jmol.api.JmolAdapter;\nimport org.jmol.popup.JmolPopup;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#SaveData()} method.\n*/\nclass MainTest {",
    "method_signature": "SaveData()",
    "suffix": ""
  }
]