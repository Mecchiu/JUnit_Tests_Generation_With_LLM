[
  {
    "numberTests": "ten",
    "original_code": "// InternalGmHeroFrame.java\npackage dsachat.gm.gui;\n\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTree;\nimport javax.swing.SpinnerModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.tree.TreePath;\nimport javax.swing.tree.TreeSelectionModel;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Weapon;\n\n/**\n * this displays the heros or the enemies\n * it can send challenges or challenge requests.\n *\n * @author bernshausen\n */\npublic class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {\n\n    /**\n     * the game master should not use silent mode.\n     * He has to know all results\n     *\n     * @return false\n     */\n    public boolean silent() {\n        return false;\n    }\n}\n",
    "package": "dsachat.gm.gui",
    "classname": "InternalGmHeroFrame",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java",
    "test_prompt": "// InternalGmHeroFrameTest.java\npackage dsachat.gm.gui;\n\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTree;\nimport javax.swing.SpinnerModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.tree.TreePath;\nimport javax.swing.tree.TreeSelectionModel;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InternalGmHeroFrame}.\n* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.\n*/\nclass InternalGmHeroFrameTest {",
    "method_signature": "silent()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Challenge.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\n\n/**\n * This class represents a challenge.\u003cbr\u003e\n * It is created by a client and sent to the server which executes the internal task.\n * \u003cbr\u003e\n * A challenge can be a talent, spell, attribute or weapon.\n *\n * @author bernshausen\n */\npublic class Challenge implements Serializable {\n\n    /**\n     * execute this challenge\n     * differ between talents, attributes or fight\n     *\n     * @return the result as string\n     */\n    public String roll() {\n        if (t !\u003d null)\n            return rollTalent();\n        if (attrib !\u003d null)\n            return rollAttr();\n        if (w !\u003d null) {\n            return rollFight();\n        }\n        return \" missing Talent, Spell, ...\";\n    }\n\n    /**\n     * execute talent challenge\n     * @return results as string\n     */\n    private String rollTalent();\n\n    /**\n     * execute attribute challenge\n     * @return result as string\n     */\n    private String rollAttr();\n\n    /**\n     * roll the attack or defense with the given weapon\n     * @return the results as string\n     */\n    private String rollFight();\n}\n",
    "package": "dsachat.share",
    "classname": "Challenge",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java",
    "test_prompt": "// Challenge_0Test.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Challenge}.\n* It contains ten unit test cases for the {@link Challenge#roll()} method.\n*/\nclass Challenge_0Test {",
    "method_signature": "roll()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Challenge.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\n\n/**\n * This class represents a challenge.\u003cbr\u003e\n * It is created by a client and sent to the server which executes the internal task.\n * \u003cbr\u003e\n * A challenge can be a talent, spell, attribute or weapon.\n *\n * @author bernshausen\n */\npublic class Challenge implements Serializable {\n\n    /**\n     * roll a dice with variable sides\n     *\n     * @param sides the sides this dice should have\n     * @return a random number n between 1\u003c\u003dn\u003c\u003dsides\n     */\n    public static int dice(int sides) {\n        int ret \u003d -1;\n        ret \u003d (int) Math.rint((Math.random() * sides)) % sides + 1;\n        return ret;\n    }\n}\n",
    "package": "dsachat.share",
    "classname": "Challenge",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java",
    "test_prompt": "// Challenge_1Test.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Challenge}.\n* It contains ten unit test cases for the {@link Challenge#dice(int)} method.\n*/\nclass Challenge_1Test {",
    "method_signature": "dice(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Hero.java\npackage dsachat.share.hero;\n\nimport java.io.Serializable;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport org.dom4j.Document;\nimport org.dom4j.Element;\n\n/**\n * a Hero describes all attributes, talents, spells and weapons of an hero.\n *\n * @author bernshausen\n */\npublic class Hero implements Serializable {\n\n    /**\n     * return the value of the attribute described by the shortcut\n     *\n     * @param shortcut the shortcut of the attribute\n     * @return the value\n     */\n    public int getAttrValue(String shortcut) {\n        for (int i \u003d 0; i \u003c attributes.size(); i++) {\n            if (attributes.elementAt(i).getShortcut().equals(shortcut)) {\n                return attributes.elementAt(i).getValue();\n            }\n        }\n        return -1;\n    }\n}\n\n/**\n * this class represents an attribute of a hero.\n * an attribute has a name, a shortcut and a value.\n *\n * @author bernshausen\n */\npublic class Attribute implements Serializable {\n\n    /**\n     * get the shortcut for this attribute\n     *\n     * @return the shortcut\n     */\n    public String getShortcut();\n\n    /**\n     * return the value of this attribute\n     * @return the value\n     */\n    public int getValue();\n}\n",
    "package": "dsachat.share.hero",
    "classname": "Hero",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java",
    "test_prompt": "// HeroTest.java\npackage dsachat.share.hero;\n\nimport java.io.Serializable;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport org.dom4j.Document;\nimport org.dom4j.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Hero}.\n* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.\n*/\nclass HeroTest {",
    "method_signature": "getAttrValue(String)",
    "suffix": ""
  }
]