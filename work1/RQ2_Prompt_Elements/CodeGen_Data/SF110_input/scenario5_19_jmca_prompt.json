[
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     * implements Comparable\n     *\n     * @param node Object\n     * @return int values 0 for same and 1 for different\n     */\n    public int compareTo(Object node) {\n        if (!type.equals(((ASTNode) node).getType()) || !identity.equals(((ASTNode) node).getIdentity())) {\n            return 1;\n        }\n        for (int i \u003d 0; i \u003c list.size(); ++i) {\n            try {\n                if (list.get(i).compareTo(((ASTNode) node).list.get(i)) \u003d\u003d 1) {\n                    return 1;\n                }\n            } catch (IndexOutOfBoundsException ne) {\n                return 1;\n            } catch (NullPointerException np) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * get the data element type\n     * @return String\n     */\n    public String getType();\n\n    /**\n     * get the data element identity\n     * @return String\n     */\n    public String getIdentity();\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_0Test.java",
    "test_prompt": "// ASTNode_0Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#compareTo(Object)} method.\n*/\nclass ASTNode_0Test {",
    "method_signature": "compareTo(Object)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     *  reads the node in from a file\n     *\n     * @param filename String\n     * @return ASTNode\n     */\n    public static ASTNode getTree(String filename) {\n        ObjectInputStream rdr \u003d null;\n        ASTNode rootNode \u003d null;\n        try {\n            FileInputStream flstrm \u003d new FileInputStream(new File(filename));\n            rdr \u003d new ObjectInputStream(flstrm);\n            rootNode \u003d (ASTNode) rdr.readObject();\n            rdr.close();\n        } catch (java.io.IOException ie) {\n        } finally {\n            return rootNode;\n        }\n    }\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_1Test.java",
    "test_prompt": "// ASTNode_1Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.\n*/\nclass ASTNode_1Test {",
    "method_signature": "getTree(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ASTNode.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\n\npublic class ASTNode implements Comparable, java.io.Serializable {\n\n    /**\n     * add this node and recursively all its children to a swing tree structure \u003cbr\u003e\n     * used to construct a JTree with the ASTree\n     *\n     * @return DefaultMutableTreeNode\n     */\n    public DefaultMutableTreeNode createTree() {\n        javax.swing.tree.DefaultMutableTreeNode node \u003d new DefaultMutableTreeNode(toString());\n        int arraySize \u003d list.size();\n        for (int i \u003d 0; i \u003c arraySize; ++i) {\n            node.add(list.get(i).createTree());\n        }\n        return node;\n    }\n\n    /**\n     * concat type and identity\n     * @return String\n     */\n    public String toString();\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "ASTNode",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode_2Test.java",
    "test_prompt": "// ASTNode_2Test.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.ArrayList;\nimport java.io.*;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ASTNode}.\n* It contains ten unit test cases for the {@link ASTNode#createTree()} method.\n*/\nclass ASTNode_2Test {",
    "method_signature": "createTree()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JMCAParser.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.io.Reader;\nimport com.soops.CEN4010.JMCA.JParser.JavaParser;\nimport java.io.IOException;\nimport java.io.FileWriter;\nimport java.io.Writer;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;\nimport com.soops.CEN4010.JMCA.JParser.ParseException;\n\n/**\n * This exception is thrown when parse errors are encountered.\n * You can explicitly create objects of this exception type by\n * calling the method generateParseException in the generated\n * parser.\n *\n * You can modify this class to customize your error reporting\n * mechanisms so long as you retain the public fields.\n */\npublic class ParseException extends Exception {\n\n    /**\n     * This method has the standard behavior when this object has been\n     * created using the standard constructors.  Otherwise, it uses\n     * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n     * error message and returns it.  If this object has been created\n     * due to a parse error, and you do not catch it (it gets thrown\n     * from the parser), then this method is called during the printing\n     * of the final stack trace, and hence the correct error message\n     * gets displayed.\n     */\n    public String getMessage();\n}\n\n/**\n * Grammar to parse Java version 1.5\n *\n * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5\n */\npublic class JavaParser implements /*@bgen(jjtree)*/\nJavaParserTreeConstants, JavaParserConstants {\n\n    /*\n     * Program structuring syntax follows.\n     */\n    final public void CompilationUnit() throws ParseException;\n\n    public void dump(Writer wtr);\n}\n\npublic class SaxProcessor extends DefaultHandler implements XMLParser {\n\n    public void showFile();\n\n    public ASTNode getRootNode();\n}\n\npublic class JMCAParser implements Parser {\n\n    /**\n     * parse implements parse for Parser\n     * precondition is the intermediatFile is set\n     *\n     * @param rdr Reader\n     * @return ASTNode\n     */\n    public ASTNode parse(Reader rdr) {\n        JavaParser parser \u003d new JavaParser(rdr);\n        Writer wtr \u003d null;\n        try {\n            parser.CompilationUnit();\n            wtr \u003d new FileWriter(new File(intermediateFile));\n            parser.dump(wtr);\n            System.out.println(\"Java Parser Version 1.1:  Java program parsed successfully.\");\n            wtr.close();\n            SaxProcessor saxP \u003d new SaxProcessor(new FileInputStream(new File(intermediateFile)));\n            saxP.showFile();\n            return saxP.getRootNode();\n        } catch (ParseException e) {\n            System.out.println(e.getMessage());\n            System.out.println(\"Java Parser Version 1.1:  Encountered errors during parse.\");\n            return null;\n        } catch (IOException ie) {\n            System.out.println(\"IO Error from parse : \" + ie.getMessage());\n            return null;\n        } catch (Error ex) {\n            return null;\n        } finally {\n            try {\n                if (wtr !\u003d null)\n                    wtr.close();\n            } catch (IOException ie) {\n                System.err.println(\"Error while closing intermediate file \" + intermediateFile);\n                System.err.println(ie.getMessage());\n            }\n        }\n        //           return null;\n    }\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "JMCAParser",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAParser.java",
    "test_prompt": "// JMCAParserTest.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.io.Reader;\nimport com.soops.CEN4010.JMCA.JParser.JavaParser;\nimport java.io.IOException;\nimport java.io.FileWriter;\nimport java.io.Writer;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;\nimport com.soops.CEN4010.JMCA.JParser.ParseException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JMCAParser}.\n* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.\n*/\nclass JMCAParserTest {",
    "method_signature": "parse(Reader)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// UILayoutDisplayAnalyzer.java\npackage com.soops.CEN4010.JMCA;\n\n/**\n * \u003cp\u003eTitle: Group 2 Project \u003c/p\u003e\n *\n * \u003cp\u003eClass: CEN4010 Fall 2005\u003c/p\u003e\n *\n * \u003cp\u003eDescription: Description: UILayoutDisplayAnalyzer implements a dummy Analyzer\n *    use for UI layout  \u003c/p\u003e\n *\n * \u003cp\u003eInstructor Dr. Stoeklin\u003c/p\u003e\n *\n * @author Group 2\n */\npublic class UILayoutDisplayAnalyzer implements Analyzer {\n\n    /**\n     * no operational implementation of Analyzer\n     *\n     * @param dummy ASTNode not used for dummy output\n     * @return display string\n     */\n    public String analyze(ASTNode dummy) {\n        StringBuffer output \u003d new StringBuffer();\n        //FAKE OUTPUT FOR PROTOTYPE\n        output \u003d new StringBuffer(\"\\nFile:  \");\n        output.append(filename);\n        output.append(\"\\n\");\n        output.append(\"Class: CohesionTest\\n\\n\");\n        output.append(\"Method Name                             Cohesion Level\\n\");\n        output.append(\"--------------------------------------------------------------\\n\");\n        output.append(\"deposit                                 Functional\\n\");\n        output.append(\"withdraw                                Sequential\\n\");\n        output.append(\"addCD                                   Communicational\\n\");\n        output.append(\"formDet                                 Iterative\\n\");\n        output.append(\"checkBookIn                             Conditional\\n\");\n        output.append(\"readInput                               Coincidental\\n\");\n        return output.toString();\n    }\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "UILayoutDisplayAnalyzer",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/UILayoutDisplayAnalyzer.java",
    "test_prompt": "// UILayoutDisplayAnalyzerTest.java\npackage com.soops.CEN4010.JMCA;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UILayoutDisplayAnalyzer}.\n* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.\n*/\nclass UILayoutDisplayAnalyzerTest {",
    "method_signature": "analyze(ASTNode)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// JMCAAnalyzer.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.*;\n\n/**\n * \u003cp\u003eTitle: JMCAAnalyzer \u003c/p\u003e\n *\n * \u003cp\u003eDescription: implements Analyzer\u003c/p\u003e\n *\n * Group2 for CEN4010 at FSU - Fall 2005\n */\npublic class JMCAAnalyzer implements Analyzer {\n\n    /**\n     * Analyze the ASTree and return a formatted string\n     *\n     * @param root ASTNode\n     * @return String\n     */\n    public String analyze(ASTNode root) {\n        if (root \u003d\u003d null) {\n            output.append(\"File did not parse correctly\");\n            return output.toString();\n        }\n        setHeader();\n        //  for each class\n        for (ASTNode node : root.list) {\n            analyzeClass(node);\n        }\n        return output.toString();\n    }\n\n    /**\n     * write the report header to output\n     */\n    private void setHeader();\n\n    /**\n     * top level analyzer for each class \u003cbr\u003e\n     * calls analyzeMethod for each method\n     * @param node ASTNode\n     */\n    private void analyzeClass(ASTNode node);\n}\n",
    "package": "com.soops.CEN4010.JMCA",
    "classname": "JMCAAnalyzer",
    "id": "/EvoSuiteBenchmark/original/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAAnalyzer.java",
    "test_prompt": "// JMCAAnalyzerTest.java\npackage com.soops.CEN4010.JMCA;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JMCAAnalyzer}.\n* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.\n*/\nclass JMCAAnalyzerTest {",
    "method_signature": "analyze(ASTNode)",
    "suffix": ""
  }
]