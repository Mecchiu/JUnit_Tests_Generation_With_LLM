[
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns the default lower bounds for\n     *  this axis scale.  Returns -1.0.\n     */\n    public double lowerBounds();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_0Test.java",
    "test_prompt": "// LinearAxisScale_0Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.\n*/\nclass LinearAxisScale_0Test {",
    "method_signature": "lowerBounds()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns the default upper bounds for\n     *  this axis scale.  Returns 1.0.\n     */\n    public double upperBounds();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_1Test.java",
    "test_prompt": "// LinearAxisScale_1Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.\n*/\nclass LinearAxisScale_1Test {",
    "method_signature": "upperBounds()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Method that returns an AxisLimitData object that contains\n     *  the preferred axis limits and tick mark spacing for the\n     *  specified range of data values for this linear axis scale.\n     *\n     * @param aLB The lower bounds of the data plotted on this axis.\n     * @param aUB The upper bounds of the data plotted on this axis.\n     */\n    public AxisLimitData findGoodLimits(double aLB, double aUB);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_2Test.java",
    "test_prompt": "// LinearAxisScale_2Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.\n*/\nclass LinearAxisScale_2Test {",
    "method_signature": "findGoodLimits(double, double)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// LinearAxisScale.java\npackage jahuwaldt.plot;\n\n/**\n *  \u003cp\u003e This object provides linear scaling for plot axes.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version January 10, 2001\n */\npublic class LinearAxisScale extends Object implements PlotAxisScale {\n\n    /**\n     *  Find the position and size (in screen coordinates) of tick\n     *  marks for a given axis scale.\n     *\n     * @param quantum Tick mark step size for the axis using this scale.\n     * @param aLB Lower bounds of axis using this scale.\n     * @param aUB Upper bounds of axis using this scale.\n     * @param xA Scaling coefficient for this axis.\n     * @param xB Scaling coefficient for this axis.\n     * @return An TickMarkData object containing the tick mark positions, lengths,\n     *          and data values at each tick mark.\n     */\n    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "LinearAxisScale",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale_3Test.java",
    "test_prompt": "// LinearAxisScale_3Test.java\npackage jahuwaldt.plot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LinearAxisScale}.\n* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.\n*/\nclass LinearAxisScale_3Test {",
    "method_signature": "calcTickMarks(double, double, double, double, double)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the number of PlotDatum objects in this run.\n     *\n     * @return The number of plot data objects in this run.\n     */\n    public int size();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_0Test.java",
    "test_prompt": "// PlotRun_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#size()} method.\n*/\nclass PlotRun_0Test {",
    "method_signature": "size()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the PlotDatum object at the specified position\n     *  in this run.\n     *\n     * @param index The index of the plot data object to return.\n     * @return The PlotDatum object at the specified position\n     *           in this run.\n     */\n    public Object get(int index);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_1Test.java",
    "test_prompt": "// PlotRun_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#get(int)} method.\n*/\nclass PlotRun_1Test {",
    "method_signature": "get(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Remove the plot data object at the specified position in\n     *  this run.  Shifts any subsequent data elements\n     *  to the left (subtracts one from their indices).  Returns the\n     *  data element that was removed from this run.\n     *\n     * @param index The index of the plot data element to remove.\n     * @return The PlotDatum object previously at the specified position.\n     */\n    public Object remove(int index);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_2Test.java",
    "test_prompt": "// PlotRun_2Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.\n*/\nclass PlotRun_2Test {",
    "method_signature": "remove(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRun.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a single run of data in a plot.\n *      A run is an array or list of PlotDatum objects.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version December 12, 2000\n */\npublic class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return an enumeration of all the plot data elements in\n     *  this run.\n     *\n     * @return An interation of all the PlotDatum objects in this run.\n     */\n    public Iterator iterator();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRun",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun_3Test.java",
    "test_prompt": "// PlotRun_3Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRun}.\n* It contains ten unit test cases for the {@link PlotRun#iterator()} method.\n*/\nclass PlotRun_3Test {",
    "method_signature": "iterator()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the number of PlotRun objects in this run list.\n     *\n     * @return The number of plot run objects in this run list.\n     */\n    public int size();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_0Test.java",
    "test_prompt": "// PlotRunList_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#size()} method.\n*/\nclass PlotRunList_0Test {",
    "method_signature": "size()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns the PlotRun object at the specified position\n     *  in this run list.\n     *\n     * @param index The index of the plot run object to return.\n     * @return The PlotRun object at the specified position\n     *           in this run.\n     */\n    public Object get(int index);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_1Test.java",
    "test_prompt": "// PlotRunList_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.\n*/\nclass PlotRunList_1Test {",
    "method_signature": "get(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Remove the plot run object at the specified position in\n     *  this run list.  Shifts any subsequent run elements\n     *  to the left (subtracts one from their indices).  Returns the\n     *  run element that was removed from this run list.\n     *\n     * @param index The index of the plot run element to remove.\n     * @return The PlotRun object previously at the specified position.\n     */\n    public Object remove(int index);\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_2Test.java",
    "test_prompt": "// PlotRunList_2Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.\n*/\nclass PlotRunList_2Test {",
    "method_signature": "remove(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotRunList.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\n\n/**\n *  \u003cp\u003e This class represents a list of runs of data in a plot.\n *      A run is an array or list of PlotDatum objects.  A run\n *      list is an array or list of runs.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  September 13, 2000\n * @version November 20, 2000\n */\npublic class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return an enumeration of all the plot run elements in\n     *  this run list.\n     *\n     * @return An interation of all the PlotRun objects in this list.\n     */\n    public Iterator iterator();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotRunList",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList_3Test.java",
    "test_prompt": "// PlotRunList_3Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotRunList}.\n* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.\n*/\nclass PlotRunList_3Test {",
    "method_signature": "iterator()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// ContourGenerator.java\npackage jahuwaldt.plot;\n\nimport java.util.*;\n\n/**\n *  \u003cp\u003e An object used to generate a list of contour lines\n *      or paths from a set of gridded three dimensional data.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,\n *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,\n *      Moffett Field, CA 94035.\n *      I don\u0027t know how the original Fortran code looked like or where it came from,\n *      other than that NeXTcontour1.4 is based on Pieter Bunings\u0027 PLOT3D package\n *      for Computational Fluid Dynamics.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  November 11, 2000\n * @version November 23, 2000\n */\npublic class ContourGenerator {\n\n    /**\n     *  Returns true if the contour generation process is done.  False if it is not.\n     */\n    public boolean done();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "ContourGenerator",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java",
    "test_prompt": "// ContourGeneratorTest.java\npackage jahuwaldt.plot;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ContourGenerator}.\n* It contains ten unit test cases for the {@link ContourGenerator#done()} method.\n*/\nclass ContourGeneratorTest {",
    "method_signature": "done()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotDatum.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\n\n/**\n *  \u003cp\u003e This class represents a single data point on a plot\n *      and includes all the information required by each point.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  June 1, 2000\n * @version November 20, 2000\n */\npublic class PlotDatum extends Object implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Returns true if this data point has an error bar.\n     */\n    public boolean hasErrorBar();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotDatum",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_0Test.java",
    "test_prompt": "// PlotDatum_0Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotDatum}.\n* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.\n*/\nclass PlotDatum_0Test {",
    "method_signature": "hasErrorBar()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlotDatum.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\n\n/**\n *  \u003cp\u003e This class represents a single data point on a plot\n *      and includes all the information required by each point.\n *  \u003c/p\u003e\n *\n *  \u003cp\u003e  Modified by:  Joseph A. Huwaldt  \u003c/p\u003e\n *\n * @author Joseph A. Huwaldt   Date:  June 1, 2000\n * @version November 20, 2000\n */\npublic class PlotDatum extends Object implements Cloneable, java.io.Serializable {\n\n    /**\n     *  Return true if this datum is connected to the previous one by a line\n     *  and false if it is not.\n     */\n    public boolean connected();\n}\n",
    "package": "jahuwaldt.plot",
    "classname": "PlotDatum",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum_1Test.java",
    "test_prompt": "// PlotDatum_1Test.java\npackage jahuwaldt.plot;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotDatum}.\n* It contains ten unit test cases for the {@link PlotDatum#connected()} method.\n*/\nclass PlotDatum_1Test {",
    "method_signature": "connected()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// FileEditor.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\n\npublic class FileEditor {\n\n    /**\n     * Extract energy from the final APBS output file.\n     *\n     * @param filename Path to APBS output file.\n     * @return String array of total energies in kilojoules, kilocalories and k_BT\n     */\n    public String[] getEnergy(String filename);\n}\n",
    "package": "apbs_mem_gui",
    "classname": "FileEditor",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_0Test.java",
    "test_prompt": "// FileEditor_0Test.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileEditor}.\n* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.\n*/\nclass FileEditor_0Test {",
    "method_signature": "getEnergy(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FileEditor.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\n\npublic class FileEditor {\n\n    /**\n     * Extract the energy from a calculation that has summed the component atom energies\n     * rather than simply taking the total. (pull_comps.c)\n     *\n     * @param filename Path to the file written by pull_comps with the energy sum.\n     * @return a double array of the total energy of each calculation (up to 6 calculations if there are 3 focus levels).\n     */\n    public double[] getCompEnergy(String filename);\n}\n",
    "package": "apbs_mem_gui",
    "classname": "FileEditor",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor_1Test.java",
    "test_prompt": "// FileEditor_1Test.java\npackage apbs_mem_gui;\n\n/**\n * @author keithc\n */\nimport java.io.*;\nimport java.util.Scanner;\nimport java.text.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileEditor}.\n* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.\n*/\nclass FileEditor_1Test {",
    "method_signature": "getCompEnergy(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Main.java\npackage apbs_mem_gui;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\nimport java.io.*;\nimport com.jgoodies.forms.layout.*;\nimport com.jgoodies.forms.builder.*;\nimport org.jmol.api.JmolViewer;\nimport org.jmol.api.JmolAdapter;\nimport org.jmol.popup.JmolPopup;\n\n/**\n * @author Keith Callenberg, Gabriel de Forest\n */\npublic class Main {\n\n    /**\n     * Store the current GUI text field values in the inFile object.\n     *\n     * @return True if the operation was succesful, false otherwise.\n     */\n    public boolean SaveData();\n}\n",
    "package": "apbs_mem_gui",
    "classname": "Main",
    "id": "/EvoSuiteBenchmark/original/29_apbsmem/src/main/java/apbs_mem_gui/Main.java",
    "test_prompt": "// MainTest.java\npackage apbs_mem_gui;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\nimport java.io.*;\nimport com.jgoodies.forms.layout.*;\nimport com.jgoodies.forms.builder.*;\nimport org.jmol.api.JmolViewer;\nimport org.jmol.api.JmolAdapter;\nimport org.jmol.popup.JmolPopup;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#SaveData()} method.\n*/\nclass MainTest {",
    "method_signature": "SaveData()",
    "suffix": ""
  }
]