[
  {
    "numberTests": "ten",
    "original_code": "// Burn.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author Shane Santner\n * This class burns the DVD file structure previously created by\n * dvd-author to a DVD disc.\n */\npublic class Burn {\n\n    /**\n     * Optionally burn to DVD when complete and no errors, uses growisofs\n     *\n     * @param DVD_GUI This is the GUI object used to control the form\n     * return   A boolean to determine if an error occurred in the function\n     */\n    public boolean BurnToDVD(GUI DVD_GUI) {\n        /* Update growisofs command with the correct paths */\n        m_growisofs \u003d m_growisofs.replaceAll(\"temp\", DVD_GUI.strOutputDir);\n        /* \n         * Burn object always gets created, so m_Burn will not always be true,\n         * must be checked. \n         */\n        if (m_Burn \u003d\u003d true) {\n            try {\n                /* Create the growisofs process which actually burns the DVD */\n                Process p \u003d Runtime.getRuntime().exec(m_growisofs);\n                /* Instantiate input and output readers for dvd-author streams */\n                BufferedReader in \u003d new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in \u003d new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out \u003d new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/burn.log\"));\n                BufferedWriter err_out \u003d new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/burn.err\"));\n                String line;\n                /* We will miss the error without this delay */\n                Thread.sleep(50);\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line \u003d err_in.readLine();\n                    if (line.equals(\"/bin/sh: growisofs: command not found\")) {\n                        DVD_GUI.MessageBox(\"Could not locate growisofs in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        return true;\n                    } else {\n                        DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                out.write(\"burn.log---\u003edvd-homevideo\");\n                out.newLine();\n                /* Write the output to the txtAreaOutput user display */\n                while ((line \u003d in.readLine()) !\u003d null) {\n                    DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                    out.write(line);\n                    out.newLine();\n                }\n                /*\n                 * close() throws an IOException\n                 */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                p.waitFor();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (NullPointerException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (IllegalArgumentException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (Exception ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            }\n        }\n        if (m_Burn)\n            return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + \"/log/burn.log\");\n        return false;\n    }\n}\n\n/**\n * SaveStackTrace is a debugging class that provides one utility method.\n * The method takes an object of type Throwable as an argument and sends\n * the contents of printStackTrace to a file for better viewing.\n * Usage: Call from a catch block like this:\n *        try\n *        {\n *          ...\n *   }\n *   catch(Exception ex)\n *        {\n *       SaveStackTrace.printTrace(ex);\n *        }\n */\npublic class SaveStackTrace {\n\n    /**\n     * The static method that logs all exceptions to a file.\n     *\n     * @param path location to write the error file\n     * @param e the Throwable object\n     */\n    public static void printTrace(String path, Throwable e);\n}\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and type\n     *\n     * @param message The message to display in the box\n     * @param type The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type);\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n",
    "package": "",
    "classname": "Burn",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Burn.java",
    "test_prompt": "// BurnTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Burn}.\n* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.\n*/\nclass BurnTest {",
    "method_signature": "BurnToDVD(GUI)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     *\n     * @param fileName This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        /* Create and start the new thread */\n        m_Thread \u003d new Thread(this);\n        m_Thread.start();\n        try {\n            m_Thread.join();\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n        /* \n         * If an error occurred while executing DV_Capture then m_Error will be set\n         * to true.  Also check the log file for any evidence of an error.\n         */\n        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/dvd-menu.log\"));\n    }\n}\n",
    "package": "",
    "classname": "Menu",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_0Test.java",
    "test_prompt": "// Menu_0Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#init()} method.\n*/\nclass Menu_0Test {",
    "method_signature": "init()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * SaveStackTrace is a debugging class that provides one utility method.\n * The method takes an object of type Throwable as an argument and sends\n * the contents of printStackTrace to a file for better viewing.\n * Usage: Call from a catch block like this:\n *        try\n *        {\n *          ...\n *   }\n *   catch(Exception ex)\n *        {\n *       SaveStackTrace.printTrace(ex);\n *        }\n */\npublic class SaveStackTrace {\n\n    /**\n     * The static method that logs all exceptions to a file.\n     *\n     * @param path location to write the error file\n     * @param e the Throwable object\n     */\n    public static void printTrace(String path, Throwable e);\n}\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and type\n     *\n     * @param message The message to display in the box\n     * @param type The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type);\n}\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Creates the xml file to pass to dvdauthor\n     *\n     * @param m_GUI This is the GUI object used to control the form\n     */\n    public boolean createXML() {\n        File xmlFile \u003d new File(m_GUI.strOutputDir + \"/vmgm.xml\");\n        File ListDir \u003d new File(m_GUI.strOutputDir);\n        /* \n         * Need to find all vob files, but don\u0027t want to include menu.vob\n         * which was created by dvd-menu.\n         */\n        FilenameFilter filter \u003d new FilenameFilter() {\n\n            boolean ret_val \u003d true;\n\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\"vob\")) {\n                    if (!name.equals(\"menu.vob\"))\n                        ret_val \u003d true;\n                    else\n                        ret_val \u003d false;\n                } else\n                    ret_val \u003d false;\n                return ret_val;\n            }\n        };\n        video_files \u003d ListDir.list(filter);\n        /* Write the xml file.  It\u0027s not pretty, but it works. */\n        int i;\n        try {\n            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(xmlFile));\n            writer.write(\"\u003cdvdauthor dest\u003d\\\"\" + m_GUI.strOutputDir + \"/DVD/\\\" jumppad\u003d\\\"0\\\"\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003cvmgm\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\u003cmenus\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\u003cpgc entry\u003d\\\"title\\\" \u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\\t\u003cvob file\u003d\\\"\" + m_GUI.strOutputDir + \"/menu.vob\\\" pause\u003d\\\"inf\\\" /\u003e\");\n            writer.newLine();\n            if (titles[0] \u003d\u003d null) {\n                for (i \u003d 1; i \u003c\u003d video_files.length; i++) {\n                    writer.write(\"\\t\\t\\t\\t\u003cbutton\u003ejump title \" + i + \";\u003c/button\u003e\");\n                    writer.newLine();\n                }\n            } else {\n                for (i \u003d 1; i \u003c titles.length; i++) {\n                    if (!titles[i - 1].equals(\"BLANK\") \u0026\u0026 !titles[i - 1].equals(\"DONE\")) {\n                        writer.write(\"\\t\\t\\t\\t\u003cbutton\u003ejump title \" + i + \";\u003c/button\u003e\");\n                        writer.newLine();\n                    } else if (titles[i - 1].equals(\"DONE\"))\n                        break;\n                }\n            }\n            writer.write(\"\\t\\t\\t\\t\u003cpost\u003e jump vmgm menu 1; \u003c/post\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\u003c/pgc\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\u003c/menus\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003c/vmgm\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003ctitleset\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003ctitles\u003e\");\n            writer.newLine();\n            for (i \u003d 1; i \u003c video_files.length; i++) {\n                writer.write(\"\\t\\t\u003cpgc\u003e\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t\u003cvob file\u003d\\\"\" + video_files[i - 1] + \"\\\" /\u003e\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t\u003cpost\u003ejump title \" + (i + 1) + \";\u003c/post\u003e\");\n                writer.newLine();\n                writer.write(\"\\t\\t\u003c/pgc\u003e\");\n                writer.newLine();\n            }\n            writer.write(\"\\t\\t\u003cpgc\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\u003cvob file\u003d\\\"\" + video_files[i - 1] + \"\\\" /\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\u003cpost\u003ecall vmgm menu 1;\u003c/post\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\\t\u003c/pgc\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003c/titles\u003e\");\n            writer.newLine();\n            writer.write(\"\\t\u003c/titleset\u003e\");\n            writer.newLine();\n            writer.write(\"\u003c/dvdauthor\u003e\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        /* Shouldn\u0027t expect to see any errors from this method call. */\n        return false;\n    }\n}\n",
    "package": "",
    "classname": "Menu",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_1Test.java",
    "test_prompt": "// Menu_1Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#createXML()} method.\n*/\nclass Menu_1Test {",
    "method_signature": "createXML()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Author.java\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\n\n/**\n * @author Shane Santner\n * This class create the DVD filesystem that will be burned\n * to disc.\n *\n * TODO - Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Author {\n\n    /**\n     * Create a DVD filestructure necessary to play in dvd player using dvdauthor\n     *\n     * @param DVD_GUI This is the GUI object used to control the form\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean CreateDVDFileStructure(GUI DVD_GUI) {\n        try {\n            /* \n             * Set progress bar to 50% since we have completed dvd-menu.\n             * In the future would like a better way to track progress, this\n             * is not very precise.\n             */\n            DVD_GUI.prgAuthor.setValue(50);\n            DVD_GUI.lblAuthorProg.setText(\"50%\");\n            /* Build up the dvdauthor_cmd string and execute dvd-author */\n            String[] dvdauthor_cmd \u003d { \"/bin/sh\", \"-c\", m_dvdauthor };\n            /*\n             * exec(...) throws IOException, NullPointerException and\n             *                  IllegalArgumentException.\n             */\n            Process p \u003d Runtime.getRuntime().exec(dvdauthor_cmd, null, new File(DVD_GUI.strOutputDir));\n            try {\n                /* Instantiate input and output readers for dvd-author streams */\n                BufferedReader in \u003d new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in \u003d new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out \u003d new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvdauthor.log\"));\n                BufferedWriter err_out \u003d new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\"));\n                String line;\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line \u003d err_in.readLine();\n                    if (line.equals(\"/bin/sh: dvdauthor: command not found\")) {\n                        DVD_GUI.MessageBox(\"Could not locate dvdauthor in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        return true;\n                    }\n                }\n                /*\n                 * Lets look for indications of problems and display these to the user\n                 * through the txtAreaOutput interface.\n                 */\n                StringTokenizer st;\n                /*\n                 * err_in.readLine() throws an IOException\n                 */\n                while ((line \u003d err_in.readLine()) !\u003d null) {\n                    st \u003d new StringTokenizer(line, \":\");\n                    if (st.hasMoreTokens()) {\n                        /*\n                         * st.nextToken() throws NoSuchElementException\n                         */\n                        if (!st.nextToken().equals(\"WARN\")) {\n                            DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                            DVD_GUI.txtAreaOutput.setCaretPosition(DVD_GUI.txtAreaOutput.getDocument().getLength());\n                            out.write(line);\n                            out.newLine();\n                        }\n                    }\n                }\n                /*\n                 * close() throws an IOException\n                 */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                p.waitFor();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (NoSuchElementException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Looked for a token that didn\u0027t exist\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            }\n            /* Set progress bar to 100% and disable it */\n            DVD_GUI.prgAuthor.setIndeterminate(false);\n            DVD_GUI.prgAuthor.setValue(100);\n            DVD_GUI.lblAuthorProg.setText(\"100%\");\n            DVD_GUI.lblAuthor.setEnabled(false);\n            DVD_GUI.lblAuthorProg.setEnabled(false);\n            DVD_GUI.prgAuthor.setEnabled(false);\n            /* Put in a slight delay to ensure author.log closes */\n            Thread.sleep(2000);\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (NullPointerException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IllegalArgumentException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (Exception ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        /* Look for any indication of an error in the author log file */\n        return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + \"/log/dvdauthor.log\");\n    }\n}\n\n/**\n * SaveStackTrace is a debugging class that provides one utility method.\n * The method takes an object of type Throwable as an argument and sends\n * the contents of printStackTrace to a file for better viewing.\n * Usage: Call from a catch block like this:\n *        try\n *        {\n *          ...\n *   }\n *   catch(Exception ex)\n *        {\n *       SaveStackTrace.printTrace(ex);\n *        }\n */\npublic class SaveStackTrace {\n\n    /**\n     * The static method that logs all exceptions to a file.\n     *\n     * @param path location to write the error file\n     * @param e the Throwable object\n     */\n    public static void printTrace(String path, Throwable e);\n}\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and type\n     *\n     * @param message The message to display in the box\n     * @param type The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type);\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n",
    "package": "",
    "classname": "Author",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Author.java",
    "test_prompt": "// AuthorTest.java\n\n\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Author}.\n* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.\n*/\nclass AuthorTest {",
    "method_signature": "CreateDVDFileStructure(GUI)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Capture.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     *\n     * @param fileName This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n\n/**\n * @author Shane Santner\n * The Capture class utilizes dvgrab to capture audio and video\n * data from a dv camcorder.  It captures for the amount of time\n * specified by the user.\n *\n * TODO - Is there a way to get the camcorder time from dvgrab?\n *        This would be a more accurate way of determining when\n *        to stop the camcorder.  Also need to handle input, output\n *        and error streams more appropriatly.\n */\npublic class Capture implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        if (m_GUI.menuChkThread.isSelected()) {\n            /* Create and start the new thread */\n            m_Thread \u003d new Thread(this);\n            /* Increase priority so we don\u0027t drop frames */\n            m_Thread.setPriority(10);\n            m_Thread.start();\n            /* Need to fix this */\n            return false;\n        } else {\n            DV_Capture();\n            return (m_Error | m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/dvgrab.log\"));\n        }\n        /* \n         * If an error occurred while executing DV_Capture then m_Error will be set\n         * to true.  Also check the log file for any evidence of an error.\n         */\n    }\n\n    /**\n     * Captures audio and video from a dv camcorder by calling dvgrab\n     */\n    public void DV_Capture();\n}\n",
    "package": "",
    "classname": "Capture",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Capture.java",
    "test_prompt": "// CaptureTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Capture}.\n* It contains ten unit test cases for the {@link Capture#init()} method.\n*/\nclass CaptureTest {",
    "method_signature": "init()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * On startup, checks to ensure that the raw1394 module is loaded.\n     * This module is only needed to capture audio and video from the\n     * dv camcorder.\n     * return   A boolean indicating if the module is present\n     */\n    public boolean checkForModules() {\n        try {\n            String line;\n            String modules \u003d \"cat /proc/modules | grep raw1394\";\n            String[] module_cmd \u003d { \"/bin/sh\", \"-c\", modules };\n            Process p \u003d Runtime.getRuntime().exec(module_cmd);\n            BufferedReader in \u003d new BufferedReader(new InputStreamReader(p.getInputStream()));\n            line \u003d in.readLine();\n            p.waitFor();\n            if (line \u003d\u003d null)\n                return false;\n            else\n                return true;\n        } catch (Exception ioe) {\n            /* If we have made it here then the module is not loaded */\n            return false;\n        }\n    }\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_0Test.java",
    "test_prompt": "// GUI_0Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#checkForModules()} method.\n*/\nclass GUI_0Test {",
    "method_signature": "checkForModules()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and yes/no options\n     *\n     * @param message The message to display in the box\n     */\n    public int MessageBox(String message) {\n        return JOptionPane.showConfirmDialog(null, message, \"dvd-homevideo\", JOptionPane.YES_NO_OPTION);\n    }\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_1Test.java",
    "test_prompt": "// GUI_1Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.\n*/\nclass GUI_1Test {",
    "method_signature": "MessageBox(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * SaveStackTrace is a debugging class that provides one utility method.\n * The method takes an object of type Throwable as an argument and sends\n * the contents of printStackTrace to a file for better viewing.\n * Usage: Call from a catch block like this:\n *        try\n *        {\n *          ...\n *   }\n *   catch(Exception ex)\n *        {\n *       SaveStackTrace.printTrace(ex);\n *        }\n */\npublic class SaveStackTrace {\n\n    /**\n     * The static method that logs all exceptions to a file.\n     *\n     * @param path location to write the error file\n     * @param e the Throwable object\n     */\n    public static void printTrace(String path, Throwable e);\n}\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     *\n     * @param fileName This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName) {\n        String line;\n        StringTokenizer st;\n        String testToken;\n        boolean error \u003d false;\n        /*\n         * Need to parse through the supplies file and look for any\n         * instances of the words \u0027error\u0027 or \u0027broken\u0027.  If found, this\n         * is treated as a run-time error of one of the dependent programs\n         * that dvd-homevideo relies on.\n         */\n        try {\n            BufferedReader in \u003d new BufferedReader(new FileReader(fileName));\n            while ((line \u003d in.readLine()) !\u003d null) {\n                /* Check for a specific burn error */\n                if (line.equals(\":-( /dev/dvd: media is not recognized as recordable DVD: 9\")) {\n                    MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                    return true;\n                }\n                /*\n                 * Need to catch all instances of \u0027error\u0027 or \u0027broken\u0027.  This\n                 * includes cases such as:\n                 * **Error:\n                 * error~\n                 * Broken pipe\n                 * etc, etc, etc.  We need to catch ALL instances.\n                 */\n                st \u003d new StringTokenizer(line, \"*,;:\u0027-~\\t \");\n                while (st.hasMoreTokens()) {\n                    testToken \u003d st.nextToken();\n                    if (// ||\n                    testToken.equalsIgnoreCase(\"Error\")) //testToken.equalsIgnoreCase(\"Broken\"))\n                    {\n                        MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                        error \u003d true;\n                    }\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"Can not find \" + fileName + \"\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        return error;\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type);\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_2Test.java",
    "test_prompt": "// GUI_2Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.\n*/\nclass GUI_2Test {",
    "method_signature": "ErrorCheck(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Convert.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class is used to transcode the video captured\n * from the digital camcorder into mpeg4, the DVD compatible\n * format.  It explicitly calls the transcode command\n * after meticulously preparing the options that can be passed\n * to transcode.\n *\n * TODO - Break mplex out into its own class.\n *        Figure out how to calculate remaining time even if\n *        video was not captured from the camcorder during the\n *        current session.\n *        Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Convert implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        if (m_GUI.menuChkThread.isSelected()) {\n            m_Thread \u003d new Thread(this);\n            m_Thread.start();\n            try {\n                m_Thread.join();\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Could not join Convert.java thread\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error \u003d true;\n            }\n        } else\n            Transcode();\n        /* \n         * Check transcode.log and mplex.log for any sign of an error.\n         * If either file contains an error then return an error.  Also\n         * check m_Error to see if it was set while executing the \n         * Transcode method.\n         */\n        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/transcode.log\") || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/mplex.log\"));\n    }\n\n    /**\n     * Encodes dv files to mpeg using transcode, then uses mplex to combine\n     * the .ac3 audio and .m2v video files into a DVD compatible .vob file\n     */\n    public void Transcode();\n}\n\n/**\n * SaveStackTrace is a debugging class that provides one utility method.\n * The method takes an object of type Throwable as an argument and sends\n * the contents of printStackTrace to a file for better viewing.\n * Usage: Call from a catch block like this:\n *        try\n *        {\n *          ...\n *   }\n *   catch(Exception ex)\n *        {\n *       SaveStackTrace.printTrace(ex);\n *        }\n */\npublic class SaveStackTrace {\n\n    /**\n     * The static method that logs all exceptions to a file.\n     *\n     * @param path location to write the error file\n     * @param e the Throwable object\n     */\n    public static void printTrace(String path, Throwable e);\n}\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and type\n     *\n     * @param message The message to display in the box\n     * @param type The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type);\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n",
    "package": "",
    "classname": "Convert",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Convert.java",
    "test_prompt": "// ConvertTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Convert}.\n* It contains ten unit test cases for the {@link Convert#init()} method.\n*/\nclass ConvertTest {",
    "method_signature": "init()",
    "suffix": ""
  }
]