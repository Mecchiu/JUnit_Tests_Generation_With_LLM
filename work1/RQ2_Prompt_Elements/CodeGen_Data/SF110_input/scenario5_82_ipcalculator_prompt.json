[
  {
    "numberTests": "ten",
    "original_code": "// BinaryCalculate.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class BinaryCalculate {\n\n    /**\n     *  Calculates the sum of two binary numbers.\n     *\n     * @param num1 The starting binary number\n     * @param num2 The binary number to be added to the starting binary\n     * @return The sum of two binary numbers.\n     */\n    public String addBinary(String num1, String num2) {\n        boolean carry \u003d false;\n        int size1 \u003d num1.length() - 1;\n        int size2 \u003d num2.length() - 1;\n        String sum \u003d \"\";\n        if (size2 \u003e size1) {\n            String s \u003d num1;\n            num1 \u003d num2;\n            num2 \u003d s;\n            int n \u003d size1;\n            size1 \u003d size2;\n            size2 \u003d n;\n        }\n        for (; size2 \u003e\u003d 0; size1--, size2--) {\n            if (num1.charAt(size1) \u003d\u003d \u00270\u0027 \u0026\u0026 num2.charAt(size2) \u003d\u003d \u00270\u0027) {\n                if (!carry)\n                    sum \u003d \"0\" + sum;\n                else\n                    sum \u003d \"1\" + sum;\n                carry \u003d false;\n            } else if (num1.charAt(size1) \u003d\u003d \u00271\u0027 \u0026\u0026 num2.charAt(size2) \u003d\u003d \u00270\u0027) {\n                if (!carry)\n                    sum \u003d \"1\" + sum;\n                else {\n                    sum \u003d \"0\" + sum;\n                    carry \u003d true;\n                }\n            } else if (num1.charAt(size1) \u003d\u003d \u00270\u0027 \u0026\u0026 num2.charAt(size2) \u003d\u003d \u00271\u0027) {\n                if (!carry)\n                    sum \u003d \"1\" + sum;\n                else {\n                    sum \u003d \"0\" + sum;\n                    carry \u003d true;\n                }\n            } else if (num1.charAt(size1) \u003d\u003d \u00271\u0027 \u0026\u0026 num2.charAt(size2) \u003d\u003d \u00271\u0027) {\n                if (!carry)\n                    sum \u003d \"0\" + sum;\n                else\n                    sum \u003d \"1\" + sum;\n                carry \u003d true;\n            }\n        }\n        for (; size1 \u003e\u003d 0; size1--) {\n            if (num1.charAt(size1) \u003d\u003d \u00270\u0027) {\n                if (!carry)\n                    sum \u003d \"0\" + sum;\n                else\n                    sum \u003d \"1\" + sum;\n                carry \u003d false;\n            } else if (num1.charAt(size1) \u003d\u003d \u00271\u0027) {\n                if (!carry)\n                    sum \u003d \"1\" + sum;\n                else {\n                    sum \u003d \"0\" + sum;\n                    carry \u003d true;\n                }\n            }\n        }\n        if (carry)\n            sum \u003d \"1\" + sum;\n        return sum;\n    }\n}\n",
    "package": "ipac",
    "classname": "BinaryCalculate",
    "id": "/EvoSuiteBenchmark/original/82_ipcalculator/src/main/java/ipac/BinaryCalculate_0Test.java",
    "test_prompt": "// BinaryCalculate_0Test.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BinaryCalculate}.\n* It contains ten unit test cases for the {@link BinaryCalculate#addBinary(String, String)} method.\n*/\nclass BinaryCalculate_0Test {",
    "method_signature": "addBinary(String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// BinaryCalculate.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class BinaryCalculate {\n\n    /**\n     *  Subtracts two binary numbers.\n     *\n     * @param num1 The starting binary number\n     * @param num2 The binary number to be subtracted from the\n     *                       starting binary\n     * @return The difference of two binary numbers.\n     */\n    public String subBinary(String num1, String num2) {\n        String diff \u003d \"\";\n        String twosComp \u003d \"\";\n        int size \u003d num1.length() - 1;\n        for (; size \u003e\u003d 0; size--) {\n            if (num1.charAt(size) \u003d\u003d \u00270\u0027)\n                twosComp \u003d \"1\" + twosComp;\n            else\n                twosComp \u003d \"0\" + twosComp;\n        }\n        twosComp \u003d \"0\" + twosComp;\n        twosComp \u003d addBinary(twosComp, \"1\");\n        diff \u003d addBinary(twosComp, num2);\n        return diff.substring(1);\n    }\n\n    /**\n     *  Calculates the sum of two binary numbers.\n     *\n     *  @param       num1    The starting binary number\n     *  @param       num2    The binary number to be added to the starting binary\n     *  @return      The sum of two binary numbers.\n     */\n    public String addBinary(String num1, String num2);\n}\n",
    "package": "ipac",
    "classname": "BinaryCalculate",
    "id": "/EvoSuiteBenchmark/original/82_ipcalculator/src/main/java/ipac/BinaryCalculate_1Test.java",
    "test_prompt": "// BinaryCalculate_1Test.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BinaryCalculate}.\n* It contains ten unit test cases for the {@link BinaryCalculate#subBinary(String, String)} method.\n*/\nclass BinaryCalculate_1Test {",
    "method_signature": "subBinary(String, String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// BinaryCalculate.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class BinaryCalculate {\n\n    /**\n     *  Calculates the IP Range from the provided IP address and number of IP\n     *  addresses. The results are stored into an \u003ccode\u003estring\u003c/code\u003e to be\n     *  returned to the method that called it.\n     *\n     * @param IP The starting IP address (subnet) in binary\n     * @param IPPrefix Number of IP addresses in binary\n     * @return Results string\n     */\n    public String IPCalculate(String IP, String IPPrefix) {\n        String outputText \u003d \"\";\n        checkIPType(IP.length() - 1);\n        String subnet \u003d convert(IP);\n        String netmask \u003d getNetmask(IPPrefix);\n        calculate(IP, IPPrefix);\n        outputText +\u003d \"Total Range: \" + IPRangeAddress + \"\\n\";\n        outputText +\u003d \"Usable Range: \" + usableRange + \"\\n\";\n        NumberFormat formatter \u003d new DecimalFormat(\"###,###,###,###,###,###,###,###,###,###,###,###,###\");\n        outputText +\u003d \"\\n\";\n        outputText +\u003d \"Total usable IP Addresses : \" + formatter.format(totalIPAddresses) + \"\\n\";\n        outputText +\u003d \"Subnet: \" + subnet + \"\\n\";\n        outputText +\u003d \"Binary Subnet: \" + getBinaryIP(IP) + \"\\n\";\n        outputText +\u003d \"Broadcast Address: \" + currentIP + \"\\n\";\n        outputText +\u003d \"Prefix: \" + prefix + \"\\n\";\n        checkIPType(netmask.length() - 1);\n        String outputNetmask \u003d convert(netmask);\n        outputText +\u003d \"Netmask: \" + outputNetmask + \"\\n\";\n        String binaryNetmask \u003d getBinaryIP(netmask);\n        outputText +\u003d \"Binary Netmask: \" + binaryNetmask;\n        return outputText;\n    }\n\n    /**\n     *  Determines whether an IP Address provided in binary form is an IPv4 or\n     *  an IPv6 by the length of the binary string.\n     *\n     *  @param       size1    Length of binary string\n     */\n    private void checkIPType(int size1);\n\n    /**\n     *  Reconstructs the dotted-decimal or hexidecimal IP address with\n     *  seperators from an given binary IP Address. The reconstructed IP address\n     *  is stored as a global declared variable, \u003ccode\u003ecurrentIP\u003c/code\u003e.\n     *\n     *  @param   IP  An binary IP Address to be converted back into\n     *               dotted-decimal or hexidecimal format\n     */\n    private String convert(String binaryIP);\n\n    /**\n     *  Gets the netmask from a binary representation of number of IP addresses\n     *\n     *  @param      binaryIP     binary representation of number of IP addresses\n     *  @return     netmask of \u003ccode\u003ebinaryIP\u003c/code\u003e\n     */\n    private String getNetmask(String binaryIP);\n\n    /**\n     *  Calculates the IP Range from the provided IP address and number of IP\n     *  addresses. The results are stored as declared global variables for many\n     *  other methods to manipulate or use.\n     *  \u003cbr\u003eThis method also detects if the provided of number of IP addresses\n     *  to be calculate exceeds past these IP addresses: 255.255.255.255 and\n     *  FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF, as further IP addresses exceeds\n     *  the IP addressing bounds.\n     *  \u003cbr\u003eThis method also calculates the prefix size needed to accomodate all\n     *  the IP Addresses to be listed and stores it as a global variable for use\n     *  in other methods.\n     *\n     *  @param       subnet              The starting IP address (subnet)\n     *  @param       noOfIPAddresses     Number of IP addresses\n     */\n    private void calculate(String subnet, String noOfIPAddresses);\n\n    /**\n     *  Adds delimiters back into a given IP address\n     *\n     *  @param      binaryIP     binary IP address with no delimiters\n     *  @return     binary IP address with delimiters\n     */\n    private String getBinaryIP(String binaryIP);\n}\n",
    "package": "ipac",
    "classname": "BinaryCalculate",
    "id": "/EvoSuiteBenchmark/original/82_ipcalculator/src/main/java/ipac/BinaryCalculate_2Test.java",
    "test_prompt": "// BinaryCalculate_2Test.java\npackage ipac;\n\nimport java.text.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BinaryCalculate}.\n* It contains ten unit test cases for the {@link BinaryCalculate#IPCalculate(String, String)} method.\n*/\nclass BinaryCalculate_2Test {",
    "method_signature": "IPCalculate(String, String)",
    "suffix": "2"
  }
]