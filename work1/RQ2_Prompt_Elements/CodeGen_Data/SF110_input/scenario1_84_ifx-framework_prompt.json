[
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    public boolean hasInterface() {\n        return (this.getInterface() !\u003d null);\n    }\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_0Test.java",
    "test_prompt": "// JavaSource_0Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.\n*/\nclass JavaSource_0Test {",
    "method_signature": "hasInterface()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    public boolean hasSuperClass() {\n        return (this.getSuperClass() !\u003d null);\n    }\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_1Test.java",
    "test_prompt": "// JavaSource_1Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.\n*/\nclass JavaSource_1Test {",
    "method_signature": "hasSuperClass()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDecoder.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\n\n/**\n * Decodes an IFX XML String to its equivalent Framework bean.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.3 $\n */\npublic class IFXDecoder {\n\n    public IFXObject decode(Element element) throws IFXException {\n        try {\n            String id \u003d element.getAttributeValue(\"Id\");\n            String beanClassName \u003d getBeanClassName(element);\n            IFXObject obj \u003d (IFXObject) Class.forName(beanClassName).newInstance();\n            List children \u003d element.getChildren();\n            if (children.size() \u003d\u003d 0) {\n                String text \u003d element.getText();\n                if (text !\u003d null \u0026\u0026 text.trim().length() \u003e 0) {\n                    if (!(obj instanceof IBaseType)) {\n                        throw new IFXException(\"Leaf node not an instance of IBaseType: \" + obj.getClass().getName());\n                    } else {\n                        ((IBaseType) obj).setString(text);\n                        return obj;\n                    }\n                } else {\n                    // return the empty object\n                    return obj;\n                }\n            } else {\n                Iterator childIter \u003d children.iterator();\n                while (childIter.hasNext()) {\n                    Element childElement \u003d (Element) childIter.next();\n                    IFXObject childObj \u003d decode(childElement);\n                    // run corresponding accessor method to see if the\n                    // result is an array\n                    Method accessorMethod \u003d getAccessor(obj, childElement);\n                    Object retValObj \u003d accessorMethod.invoke(obj, null);\n                    boolean isArray \u003d accessorMethod.getReturnType().isArray();\n                    // then get the mutator method and invoke it\n                    Method mutatorMethod \u003d getMutator(obj, childElement);\n                    if (isArray) {\n                        // if result is an array, build a new array with\n                        // size \u003d returned array size + 1, and stuff this\n                        // object at the end of the array\n                        IFXObject[] childObjs \u003d null;\n                        if (retValObj !\u003d null) {\n                            int oldLen \u003d Array.getLength(retValObj);\n                            childObjs \u003d (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { oldLen + 1 });\n                            IFXObject[] retValObjs \u003d (IFXObject[]) retValObj;\n                            System.arraycopy(retValObj, 0, childObjs, 0, oldLen);\n                            childObjs[oldLen] \u003d childObj;\n                        } else {\n                            childObjs \u003d (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { 1 });\n                            childObjs[0] \u003d childObj;\n                        }\n                        mutatorMethod.invoke(obj, new Object[] { childObjs });\n                    } else {\n                        mutatorMethod.invoke(obj, new Object[] { childObj });\n                    }\n                }\n                // if Id attribute is specified, populate it\n                if (id !\u003d null) {\n                    Method mutatorMethod \u003d getMutator(obj, \"Id\");\n                    IFXString idObj \u003d new IFXString();\n                    idObj.setString(id);\n                    mutatorMethod.invoke(obj, new Object[] { idObj });\n                }\n                return obj;\n            }\n        } catch (Exception e) {\n            throw new IFXException(\"Error decoding \" + element.getName(), e);\n        }\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDecoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDecoder.java",
    "test_prompt": "// IFXDecoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDecoder}.\n* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.\n*/\nclass IFXDecoderTest {",
    "method_signature": "decode(Element)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXEncoder.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\n\n/**\n * Encodes an IFXObject to its equivalent IFX XML Element.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXEncoder {\n\n    public Element encode(IFXObject obj) throws IFXException {\n        try {\n            Element element \u003d new Element(getElementName(obj), namespace);\n            List accessorList \u003d getAccessors(obj);\n            Iterator accessorIter \u003d accessorList.iterator();\n            while (accessorIter.hasNext()) {\n                Method accessorMethod \u003d (Method) accessorIter.next();\n                if (accessorMethod.getName().equals(\"getClass\")) {\n                    continue;\n                }\n                Object retValObj \u003d accessorMethod.invoke(obj, null);\n                if (retValObj \u003d\u003d null) {\n                    continue;\n                }\n                IFXObject[] retVals \u003d new IFXObject[1];\n                if (retValObj.getClass().isArray()) {\n                    retVals \u003d (IFXObject[]) retValObj;\n                } else {\n                    retVals[0] \u003d (IFXObject) retValObj;\n                }\n                for (int i \u003d 0; i \u003c retVals.length; i++) {\n                    IFXObject retVal \u003d retVals[i];\n                    if (retVal instanceof IBaseType) {\n                        String value \u003d ((IBaseType) retVal).getString();\n                        if (accessorMethod.getName().equals(\"getId\")) {\n                            element.setAttribute(\"Id\", value);\n                        } else {\n                            Element baseElement \u003d new Element(getElementName(retVal), namespace);\n                            baseElement.setText(value);\n                            element.addContent(baseElement);\n                        }\n                    } else {\n                        element.addContent(encode(retVal));\n                    }\n                }\n            }\n            return element;\n        } catch (Exception e) {\n            throw new IFXException(\"Error encoding \" + obj.getClass().getName(), e);\n        }\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXEncoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXEncoder.java",
    "test_prompt": "// IFXEncoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXEncoder}.\n* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.\n*/\nclass IFXEncoderTest {",
    "method_signature": "encode(IFXObject)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {\n        IFXEncoder encoder \u003d null;\n        if (namespaceURI !\u003d null) {\n            encoder \u003d new IFXEncoder(namespacePrefix, namespaceURI);\n        } else {\n            encoder \u003d new IFXEncoder();\n        }\n        Element element \u003d encoder.encode(obj);\n        Document doc \u003d new Document(element);\n        return doc;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_0Test.java",
    "test_prompt": "// IFXDocumentHandler_0Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.\n*/\nclass IFXDocumentHandler_0Test {",
    "method_signature": "build(IFXObject, String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    public static IFXObject parse(Document doc) throws IFXException {\n        Element element \u003d doc.getRootElement();\n        IFXDecoder decoder \u003d new IFXDecoder();\n        return decoder.decode(element);\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_1Test.java",
    "test_prompt": "// IFXDocumentHandler_1Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.\n*/\nclass IFXDocumentHandler_1Test {",
    "method_signature": "parse(Document)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n *\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException {\n        SAXBuilder builder \u003d null;\n        if (validate) {\n            builder \u003d new SAXBuilder(\"org.apache.xerces.parsers.SAXParser\", true);\n            builder.setFeature(\"http://apache.org/xml/features/validation/schema\", true);\n            if (validationProperties !\u003d null) {\n                Iterator propIter \u003d validationProperties.keySet().iterator();\n                StringBuffer buf \u003d new StringBuffer();\n                int i \u003d 0;\n                while (propIter.hasNext()) {\n                    String key \u003d (String) propIter.next();\n                    String value \u003d (String) validationProperties.get(key);\n                    if (i \u003e 0) {\n                        buf.append(\" \");\n                    }\n                    buf.append(key).append(\" \").append(value);\n                    i++;\n                }\n                builder.setProperty(\"http://apache.org/xml/properties/schema/external-schemaLocation\", buf.toString());\n            }\n        } else {\n            builder \u003d new SAXBuilder();\n        }\n        Document doc \u003d null;\n        try {\n            doc \u003d builder.build(istream);\n        } catch (Exception e) {\n            throw new IFXException(\"Error reading Document\", e);\n        }\n        return doc;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_2Test.java",
    "test_prompt": "// IFXDocumentHandler_2Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.\n*/\nclass IFXDocumentHandler_2Test {",
    "method_signature": "read(InputStream, boolean, Map)",
    "suffix": "2"
  }
]