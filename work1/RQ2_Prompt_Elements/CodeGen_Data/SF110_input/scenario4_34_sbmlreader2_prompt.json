[
  {
    "numberTests": "ten",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * XGMML Files are Graphs.\n     */\n    private static String fileNature \u003d ImportHandler.GRAPH_NATURE;\n\n    /**\n     * File Extensions.\n     */\n    private static String[] fileExtensions \u003d { \"xml\", \"sbml\" };\n\n    /**\n     * Filter Description.\n     */\n    private static String description \u003d \"SBML files\";\n\n    /**\n     * Constructor.\n     */\n    public SBMLFilter() {\n    }\n\n    /**\n     * Indicates which files the SBMLFilter accepts.\n     * \u003cp/\u003e\n     * This method will return true only if:\n     * \u003cUL\u003e\n     * \u003cLI\u003eFile ends in .xml or .sbml;  and\n     * \u003cLI\u003eFile headers includes the www.sbml.org namespace declaration.\n     * \u003c/UL\u003e\n     *\n     * @param file File\n     * @return true or false.\n     */\n    public boolean accept(File file);\n\n    /**\n     * Gets the appropirate GraphReader object.\n     * If the libsbml is not available use the old sbml library.\n     *\n     * @author Matthias Koenig\n     * @param fileName File Name.\n     * @return GraphReader Object.\n     */\n    public GraphReader getReader(String fileName);\n}\n",
    "package": "sbmlreader2",
    "classname": "SBMLFilter",
    "id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java",
    "test_prompt": "// SBMLFilter_0Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilter_0Test {",
    "method_signature": "accept(File)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * XGMML Files are Graphs.\n     */\n    private static String fileNature \u003d ImportHandler.GRAPH_NATURE;\n\n    /**\n     * File Extensions.\n     */\n    private static String[] fileExtensions \u003d { \"xml\", \"sbml\" };\n\n    /**\n     * Filter Description.\n     */\n    private static String description \u003d \"SBML files\";\n\n    /**\n     * Constructor.\n     */\n    public SBMLFilter() {\n    }\n\n    /**\n     * Indicates which files the SBMLFilter accepts.\n     * \u003cp/\u003e\n     * This method will return true only if:\n     * \u003cUL\u003e\n     * \u003cLI\u003eFile ends in .xml or .sbml;  and\n     * \u003cLI\u003eFile headers includes the www.sbml.org namespace declaration.\n     * \u003c/UL\u003e\n     *\n     * @param file File\n     * @return true or false.\n     */\n    public boolean accept(File file);\n\n    /**\n     * Gets the appropirate GraphReader object.\n     * If the libsbml is not available use the old sbml library.\n     *\n     * @author Matthias Koenig\n     * @param fileName File Name.\n     * @return GraphReader Object.\n     */\n    public GraphReader getReader(String fileName);\n}\n",
    "package": "sbmlreader2",
    "classname": "SBMLFilter",
    "id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java",
    "test_prompt": "// SBMLFilter_1Test.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {",
    "method_signature": "getReader(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    /**\n     */\n    public static final String SBMLReader_VS \u003d \"SBMLReader Style\";\n\n    /**\n     */\n    public static final String NODE_TYPE_ATT \u003d \"sbml type\";\n\n    /**\n     */\n    public static final String EDGE_TYPE_ATT \u003d \"interaction\";\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param network DOCUMENT ME!\n     *\n     * @return  DOCUMENT ME!\n     */\n    public static VisualStyle createVisualStyle(CyNetwork network);\n}\n",
    "package": "sbmlreader2",
    "classname": "SBMLVisualStyleFactory",
    "id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
    "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {",
    "method_signature": "createVisualStyle(CyNetwork)",
    "suffix": ""
  }
]