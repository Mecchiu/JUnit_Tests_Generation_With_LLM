[
  {
    "numberTests": "ten",
    "original_code": "// Transition.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\n\n/**\n * A transition that is evaluated upon receiving an event.\n * \u003cp\u003e\n *   Given a start state and an event the transition\n *     firstly evaluates if it applies by checking\n *     the start state and and event match its own.\n *     Once it ascertains it is for the start state/event\n *     combination, then the transition evaluates any\n *     guard conditions it has associated to it.\n *     If all the guard conditions evaluate to true,\n *     then the transition executes and returns the\n *     new state that the state machine is in.\n * Creation date: (14/02/01 6:14:35 PM)\n *\n * @author:\n */\npublic class Transition {\n\n    /**\n     * The initial state that the state machine must\n     * be in for this transition to apply.\n     */\n    private final IState initialState;\n\n    /**\n     * The outcome state that the state machine will be\n     *   in if this transition applies.\n     */\n    private final IState outcomeState;\n\n    /**\n     * List of guard conditions that must be\n     * evaluated and return true before the transition\n     * can execute.\n     */\n    private final java.util.List\u003cIGuardCondition\u003e guardConditions \u003d new java.util.ArrayList\u003cIGuardCondition\u003e();\n\n    /**\n     * The event upon which this transition takes place.\n     */\n    private final Event triggerEvent;\n\n    /**\n     * The name of the transition.\n     */\n    private final java.lang.String name;\n\n    /**\n     * Transition constructor comment.\n     *\n     * @param pName the name of this Transition\n     * @param pTriggerEvent the Event that causes\n     * this Transition\n     * @param pInitialState the State which we must\n     * be in to initiate this Transition\n     * @param pOutcomeState the State we will be\n     * in once we have performed this Transition\n     */\n    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {\n    }\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 2:57:02 PM)\n     * @param pGuard com.objectmentors.state.IGuardCondition\n     */\n    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 2:57:02 PM)\n     * @param pGuard com.objectmentors.state.IGuardCondition\n     */\n    public final void addGuardCondition(final IGuardCondition pGuard);\n\n    /**\n     * Method to compare two Transition objects.\n     *\n     * Returns true if both Transition objects are identical,\n     * otherwise returns false.\n     * \u003cp\u003e\n     * Uses the Apache Commons Lang\n     *  \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     * @since 0.1\n     * @return boolean\n     * @param pTransition the Transition to compare against\n     * the State to compare against\n     */\n    @Override\n    public final boolean equals(final Object pTransition);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public final int hashCode();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/14/01 6:19:57 PM)\n     */\n    protected void evaluateGuardConditions();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.IState\n     */\n    public final IState getInitialState();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.IState\n     */\n    public final IState getOutcomeState();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.Event\n     */\n    public final Event getTriggerEvent();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (15/02/01 2:14:58 PM)\n     * @return java.lang.String\n     */\n    @Override\n    public final String toString();\n\n    /**\n     * Causes this Transition to fire.\n     * Creation date: (14/02/01 6:21:09 PM)\n     * @author Don Stewart\n     * @since 0.1\n     * @param pCurrentState the current State\n     * @param pEvent the Event to trigger\n     * @return com.objectmentors.state.State\n     */\n    public final IState trigger(final IState pCurrentState, final Event pEvent);\n\n    /**\n     * Check to evaluate if this Transition will trigger\n     * given the supplied current State of the State Machine\n     * and the supplied Event.\n     * Creation date: (14/02/01 6:21:09 PM)\n     * @param pCurrentState current State of the State Machine\n     * @param pEvent the supplied Event\n     * @return com.objectmentors.state.State\n     */\n    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "Transition",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java",
    "test_prompt": "// Transition_0Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Transition}.\n* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.\n*/\nclass Transition_0Test {",
    "method_signature": "trigger(IState, Event)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Transition.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\n\n/**\n * A transition that is evaluated upon receiving an event.\n * \u003cp\u003e\n *   Given a start state and an event the transition\n *     firstly evaluates if it applies by checking\n *     the start state and and event match its own.\n *     Once it ascertains it is for the start state/event\n *     combination, then the transition evaluates any\n *     guard conditions it has associated to it.\n *     If all the guard conditions evaluate to true,\n *     then the transition executes and returns the\n *     new state that the state machine is in.\n * Creation date: (14/02/01 6:14:35 PM)\n *\n * @author:\n */\npublic class Transition {\n\n    /**\n     * The initial state that the state machine must\n     * be in for this transition to apply.\n     */\n    private final IState initialState;\n\n    /**\n     * The outcome state that the state machine will be\n     *   in if this transition applies.\n     */\n    private final IState outcomeState;\n\n    /**\n     * List of guard conditions that must be\n     * evaluated and return true before the transition\n     * can execute.\n     */\n    private final java.util.List\u003cIGuardCondition\u003e guardConditions \u003d new java.util.ArrayList\u003cIGuardCondition\u003e();\n\n    /**\n     * The event upon which this transition takes place.\n     */\n    private final Event triggerEvent;\n\n    /**\n     * The name of the transition.\n     */\n    private final java.lang.String name;\n\n    /**\n     * Transition constructor comment.\n     *\n     * @param pName the name of this Transition\n     * @param pTriggerEvent the Event that causes\n     * this Transition\n     * @param pInitialState the State which we must\n     * be in to initiate this Transition\n     * @param pOutcomeState the State we will be\n     * in once we have performed this Transition\n     */\n    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {\n    }\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 2:57:02 PM)\n     * @param pGuard com.objectmentors.state.IGuardCondition\n     */\n    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 2:57:02 PM)\n     * @param pGuard com.objectmentors.state.IGuardCondition\n     */\n    public final void addGuardCondition(final IGuardCondition pGuard);\n\n    /**\n     * Method to compare two Transition objects.\n     *\n     * Returns true if both Transition objects are identical,\n     * otherwise returns false.\n     * \u003cp\u003e\n     * Uses the Apache Commons Lang\n     *  \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     * @since 0.1\n     * @return boolean\n     * @param pTransition the Transition to compare against\n     * the State to compare against\n     */\n    @Override\n    public final boolean equals(final Object pTransition);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public final int hashCode();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/14/01 6:19:57 PM)\n     */\n    protected void evaluateGuardConditions();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.IState\n     */\n    public final IState getInitialState();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.IState\n     */\n    public final IState getOutcomeState();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/15/01 9:34:41 AM)\n     * @return com.objectmentors.state.Event\n     */\n    public final Event getTriggerEvent();\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (15/02/01 2:14:58 PM)\n     * @return java.lang.String\n     */\n    @Override\n    public final String toString();\n\n    /**\n     * Causes this Transition to fire.\n     * Creation date: (14/02/01 6:21:09 PM)\n     * @author Don Stewart\n     * @since 0.1\n     * @param pCurrentState the current State\n     * @param pEvent the Event to trigger\n     * @return com.objectmentors.state.State\n     */\n    public final IState trigger(final IState pCurrentState, final Event pEvent);\n\n    /**\n     * Check to evaluate if this Transition will trigger\n     * given the supplied current State of the State Machine\n     * and the supplied Event.\n     * Creation date: (14/02/01 6:21:09 PM)\n     * @param pCurrentState current State of the State Machine\n     * @param pEvent the supplied Event\n     * @return com.objectmentors.state.State\n     */\n    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "Transition",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java",
    "test_prompt": "// Transition_1Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Transition}.\n* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.\n*/\nclass Transition_1Test {",
    "method_signature": "willTrigger(IState, Event)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// StringMatchesGuardCondition.java\npackage uk.me.jockmacmad.jstate.state;\n\n/**\n * Insert the type\u0027s description here.\n * Creation date: (2/26/01 5:09:09 PM)\n *\n * @author: Administrator\n */\npublic class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {\n\n    private final java.lang.String Value;\n\n    /**\n     * StringMatchesGuardCondition constructor comment.\n     */\n    public StringMatchesGuardCondition(java.lang.String newStr) {\n    }\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/26/01 5:09:09 PM)\n     * @return boolean\n     * @param o java.lang.Object\n     */\n    public boolean evaluate(Object o);\n\n    /**\n     * Insert the method\u0027s description here.\n     * Creation date: (2/26/01 5:11:09 PM)\n     * @return java.lang.String\n     */\n    public final java.lang.String getValue();\n\n    /**\n     * Returns a String that represents the value of this object.\n     * @return a string representation of the receiver\n     */\n    @Override\n    public String toString();\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "StringMatchesGuardCondition",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java",
    "test_prompt": "// StringMatchesGuardConditionTest.java\npackage uk.me.jockmacmad.jstate.state;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringMatchesGuardCondition}.\n* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.\n*/\nclass StringMatchesGuardConditionTest {",
    "method_signature": "evaluate(Object)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EndState.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\n\n/**\n * Class representing a  state machines ending state.\n * There is no instance data associated with such a class therefore\n *   there only needs to be a single instance of the end state.\n * Creation date: (2/19/01 4:22:51 PM)\n *\n * @since 0.1\n * @author :Don Stewart\n * @version 0.1\n * @stereotype singleton\n */\npublic final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {\n\n    /**\n     * Field storing a stringified version of the classname.\n     * @since 0.1\n     */\n    private static final java.lang.String NAME \u003d \"com.objectmentors.state.EndState\";\n\n    /**\n     * Variable used to store the singleton instance of the EndState class.\n     *\n     * Uses the private constructor to create the instance on the loading this\n     * class.\n     * @since 0.1\n     */\n    private static final EndState SINGLETON \u003d new EndState();\n\n    /**\n     * The actual method a client should call to get a\n     * reference to the single instance of the EndState object.\n     * Creation date: (2/20/01 11:05:10 AM)\n     * @return com.objectmentors.state.EndState\n     */\n    public static EndState getSingleton();\n\n    /**\n     *  Method to compare two IState objects.\n     * \u003cp\u003e\n     *  Returns true if both IState objects are instances of\n     *  \u003ccode\u003eEndState\u003c/code\u003e, otherwise returns false.\n     *  \u003cp\u003e\n     *  Uses the Apache Commons Lang\n     *   \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     *  @since 0.1\n     *  @return boolean\n     *  @param pIState the State to compare against\n     *  the State to compare against\n     */\n    @Override\n    public boolean equals(final Object pIState);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * Field storing a stringified version of the classname.\n     * Creation date: (20/02/01 10:55:55 AM)\n     * @return java.lang.String\n     */\n    public java.lang.String getName();\n\n    /**\n     * Returns this EndState object as a java.lang.Object.\n     * Used during reflection.\n     * Creation date: (2/26/01 10:49:49 AM)\n     * @return java.lang.Object\n     */\n    public java.lang.Object toObject();\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "EndState",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java",
    "test_prompt": "// EndState_0Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EndState}.\n* It contains ten unit test cases for the {@link EndState#getSingleton()} method.\n*/\nclass EndState_0Test {",
    "method_signature": "getSingleton()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// EndState.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\n\n/**\n * Class representing a  state machines ending state.\n * There is no instance data associated with such a class therefore\n *   there only needs to be a single instance of the end state.\n * Creation date: (2/19/01 4:22:51 PM)\n *\n * @since 0.1\n * @author :Don Stewart\n * @version 0.1\n * @stereotype singleton\n */\npublic final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {\n\n    /**\n     * Field storing a stringified version of the classname.\n     * @since 0.1\n     */\n    private static final java.lang.String NAME \u003d \"com.objectmentors.state.EndState\";\n\n    /**\n     * Variable used to store the singleton instance of the EndState class.\n     *\n     * Uses the private constructor to create the instance on the loading this\n     * class.\n     * @since 0.1\n     */\n    private static final EndState SINGLETON \u003d new EndState();\n\n    /**\n     * The actual method a client should call to get a\n     * reference to the single instance of the EndState object.\n     * Creation date: (2/20/01 11:05:10 AM)\n     * @return com.objectmentors.state.EndState\n     */\n    public static EndState getSingleton();\n\n    /**\n     *  Method to compare two IState objects.\n     * \u003cp\u003e\n     *  Returns true if both IState objects are instances of\n     *  \u003ccode\u003eEndState\u003c/code\u003e, otherwise returns false.\n     *  \u003cp\u003e\n     *  Uses the Apache Commons Lang\n     *   \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     *  @since 0.1\n     *  @return boolean\n     *  @param pIState the State to compare against\n     *  the State to compare against\n     */\n    @Override\n    public boolean equals(final Object pIState);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * Field storing a stringified version of the classname.\n     * Creation date: (20/02/01 10:55:55 AM)\n     * @return java.lang.String\n     */\n    public java.lang.String getName();\n\n    /**\n     * Returns this EndState object as a java.lang.Object.\n     * Used during reflection.\n     * Creation date: (2/26/01 10:49:49 AM)\n     * @return java.lang.Object\n     */\n    public java.lang.Object toObject();\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "EndState",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java",
    "test_prompt": "// EndState_1Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EndState}.\n* It contains ten unit test cases for the {@link EndState#toObject()} method.\n*/\nclass EndState_1Test {",
    "method_signature": "toObject()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// StartState.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\n\n/**\n * Class representing a state machines staring state.\n * There is no instance data associated with such a class therefore\n *   there only needs to be a single instance of the start state.\n * Creation date: (19/02/01 4:22:22 PM)\n *\n * @stereotype singleton\n * @author :Don Stewart\n * @version 0.1\n * @since 0.1\n */\npublic final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {\n\n    /**\n     * Field storing a stringified version of the classname.\n     * @since 0.1\n     */\n    public static final java.lang.String NAME \u003d \"com.objectmentors.state.StartState\";\n\n    /**\n     * Variable used to store the singleton instance of the StartState class.\n     *\n     * Uses the private constructor to create the instance on the loading this\n     * class.\n     * @since 0.1\n     */\n    private static final StartState SINGLETON \u003d new StartState();\n\n    /**\n     * Private constructor, makes sure that there is no default constructor\n     * by which people can create a new instance of the StartState.\n     *\n     * Creation date: (2/20/01 11:12:56 AM)\n     * @since 0.1\n     * @see getSingleton()\n     */\n    private StartState() {\n    }\n\n    /**\n     *  Method to compare two IState objects.\n     * \u003cp\u003e\n     *  Returns true if both IState objects are instances of\n     *  \u003ccode\u003eStartState\u003c/code\u003e, otherwise returns false.\n     *  \u003cp\u003e\n     *  Uses the Apache Commons Lang\n     *   \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     *  @since 0.1\n     *  @return boolean\n     *  @param pIState the State to compare against\n     *  the State to compare against\n     */\n    @Override\n    public boolean equals(final Object pIState);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * Field storing a stringified version of the classname.\n     * Creation date: (2/20/01 10:55:55 AM)\n     * @return java.lang.String\n     */\n    @Override\n    public java.lang.String getName();\n\n    /**\n     * The actual method a client should call to get a\n     * reference to the single instance of the StartState object.\n     * Creation date: (2/20/01 11:05:10 AM)\n     * @return com.objectmentors.state.StartState\n     */\n    public static StartState getSingleton();\n\n    /**\n     * Returns this StartState object as a java.lang.Object.\n     * Used during reflection.\n     * Creation date: (2/26/01 10:49:49 AM)\n     * @return java.lang.Object\n     */\n    public java.lang.Object toObject();\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "StartState",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java",
    "test_prompt": "// StartState_0Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartState}.\n* It contains ten unit test cases for the {@link StartState#getSingleton()} method.\n*/\nclass StartState_0Test {",
    "method_signature": "getSingleton()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// StartState.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\n\n/**\n * Class representing a state machines staring state.\n * There is no instance data associated with such a class therefore\n *   there only needs to be a single instance of the start state.\n * Creation date: (19/02/01 4:22:22 PM)\n *\n * @stereotype singleton\n * @author :Don Stewart\n * @version 0.1\n * @since 0.1\n */\npublic final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {\n\n    /**\n     * Field storing a stringified version of the classname.\n     * @since 0.1\n     */\n    public static final java.lang.String NAME \u003d \"com.objectmentors.state.StartState\";\n\n    /**\n     * Variable used to store the singleton instance of the StartState class.\n     *\n     * Uses the private constructor to create the instance on the loading this\n     * class.\n     * @since 0.1\n     */\n    private static final StartState SINGLETON \u003d new StartState();\n\n    /**\n     * Private constructor, makes sure that there is no default constructor\n     * by which people can create a new instance of the StartState.\n     *\n     * Creation date: (2/20/01 11:12:56 AM)\n     * @since 0.1\n     * @see getSingleton()\n     */\n    private StartState() {\n    }\n\n    /**\n     *  Method to compare two IState objects.\n     * \u003cp\u003e\n     *  Returns true if both IState objects are instances of\n     *  \u003ccode\u003eStartState\u003c/code\u003e, otherwise returns false.\n     *  \u003cp\u003e\n     *  Uses the Apache Commons Lang\n     *   \u003ccode\u003eEqualsBuilder.reflectionEquals(this, pIState);\u003c/code\u003e function.\n     *  @since 0.1\n     *  @return boolean\n     *  @param pIState the State to compare against\n     *  the State to compare against\n     */\n    @Override\n    public boolean equals(final Object pIState);\n\n    /**\n     *  Builds the \u003ccode\u003ehashCode\u003c/code\u003e of this \u003ccode\u003eObject\u003c/code\u003e\n     *  using the Apache Commons Lang\n     *  \u003ccode\u003eHashCodeBuilder.reflectionHashCode(this);\u003c/code\u003e function.\n     * @return int the HashCode of this \u003ccode\u003eObject\u003c/code\u003e\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * Field storing a stringified version of the classname.\n     * Creation date: (2/20/01 10:55:55 AM)\n     * @return java.lang.String\n     */\n    @Override\n    public java.lang.String getName();\n\n    /**\n     * The actual method a client should call to get a\n     * reference to the single instance of the StartState object.\n     * Creation date: (2/20/01 11:05:10 AM)\n     * @return com.objectmentors.state.StartState\n     */\n    public static StartState getSingleton();\n\n    /**\n     * Returns this StartState object as a java.lang.Object.\n     * Used during reflection.\n     * Creation date: (2/26/01 10:49:49 AM)\n     * @return java.lang.Object\n     */\n    public java.lang.Object toObject();\n}\n",
    "package": "uk.me.jockmacmad.jstate.state",
    "classname": "StartState",
    "id": "/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java",
    "test_prompt": "// StartState_1Test.java\npackage uk.me.jockmacmad.jstate.state;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartState}.\n* It contains ten unit test cases for the {@link StartState#toObject()} method.\n*/\nclass StartState_1Test {",
    "method_signature": "toObject()",
    "suffix": "1"
  }
]