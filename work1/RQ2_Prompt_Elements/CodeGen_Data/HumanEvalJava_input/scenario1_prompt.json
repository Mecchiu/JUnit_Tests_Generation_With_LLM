[
  {
    "numberTests": "one",
    "original_code": "// CorrectBracketing.java\npackage scenario1;\n\nclass CorrectBracketing {\n\n    public static Boolean correctBracketing(String brackets) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c brackets.length(); i++) {\n            if (brackets.charAt(i) \u003d\u003d \u0027\u003c\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                return false;\n            }\n        }\n        return count \u003d\u003d 0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CorrectBracketing",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_56.java",
    "test_prompt": "// CorrectBracketingTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing}.\n* It contains one unit test case for the {@link CorrectBracketing#correctBracketing(String)} method.\n*/\nclass CorrectBracketingTest {",
    "method_signature": "correctBracketing(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// TriplesSumToZero.java\npackage scenario1;\n\nimport java.util.List;\n\nclass TriplesSumToZero {\n\n    public static Boolean triplesSumToZero(List\u003cInteger\u003e l) {\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            for (int j \u003d i + 1; j \u003c l.size(); j++) {\n                for (int k \u003d j + 1; k \u003c l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) \u003d\u003d 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "TriplesSumToZero",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_40.java",
    "test_prompt": "// TriplesSumToZeroTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriplesSumToZero}.\n* It contains one unit test case for the {@link TriplesSumToZero#triplesSumToZero(List)} method.\n*/\nclass TriplesSumToZeroTest {",
    "method_signature": "triplesSumToZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ParseMusic.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ParseMusic {\n\n    public static List\u003cObject\u003e parseMusic(String musicString) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c musicString.length(); i++) {\n            if (musicString.charAt(i) \u003d\u003d \u0027o\u0027) {\n                if (i \u003c musicString.length() - 1 \u0026\u0026 musicString.charAt(i + 1) \u003d\u003d \u0027|\u0027) {\n                    result.add(2);\n                    i++;\n                } else {\n                    result.add(4);\n                }\n            } else if (musicString.charAt(i) \u003d\u003d \u0027.\u0027) {\n                result.add(1);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ParseMusic",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_17.java",
    "test_prompt": "// ParseMusicTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseMusic}.\n* It contains one unit test case for the {@link ParseMusic#parseMusic(String)} method.\n*/\nclass ParseMusicTest {",
    "method_signature": "parseMusic(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StartsOneEnds.java\npackage scenario1;\n\nclass StartsOneEnds {\n\n    public static int startsOneEnds(int n) {\n        int count \u003d 0;\n        int start \u003d 1;\n        int end \u003d 1;\n        for (int i \u003d 1; i \u003c n; i++) {\n            start *\u003d 10;\n            end *\u003d 10;\n        }\n        for (int i \u003d start; i \u003c end * 10; i++) {\n            if (i % 10 \u003d\u003d 1 || i / start \u003d\u003d 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "StartsOneEnds",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_83.java",
    "test_prompt": "// StartsOneEndsTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartsOneEnds}.\n* It contains one unit test case for the {@link StartsOneEnds#startsOneEnds(int)} method.\n*/\nclass StartsOneEndsTest {",
    "method_signature": "startsOneEnds(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SumProduct.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SumProduct {\n\n    public static List\u003cInteger\u003e sumProduct(List\u003cObject\u003e numbers) {\n        Integer sum \u003d 0;\n        Integer product \u003d 1;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum +\u003d (Integer) number;\n                product *\u003d (Integer) number;\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SumProduct",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_8.java",
    "test_prompt": "// SumProductTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumProduct}.\n* It contains one unit test case for the {@link SumProduct#sumProduct(List)} method.\n*/\nclass SumProductTest {",
    "method_signature": "sumProduct(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IntToMiniRoman.java\npackage scenario1;\n\nclass IntToMiniRoman {\n\n    public static String intToMiniRoman(int number) {\n        String result \u003d \"\";\n        int[] values \u003d { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        String[] symbols \u003d { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i \u003d 0; i \u003c values.length; i++) {\n            while (number \u003e\u003d values[i]) {\n                number -\u003d values[i];\n                result +\u003d symbols[i];\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IntToMiniRoman",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_156.java",
    "test_prompt": "// IntToMiniRomanTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IntToMiniRoman}.\n* It contains one unit test case for the {@link IntToMiniRoman#intToMiniRoman(int)} method.\n*/\nclass IntToMiniRomanTest {",
    "method_signature": "intToMiniRoman(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// WordsString.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass WordsString {\n\n    public static List\u003cObject\u003e wordsString(String s) {\n        if (s.length() \u003d\u003d 0)\n            return new ArrayList\u003cObject\u003e();\n        String[] words \u003d s.split(\"[, ]+\");\n        return Arrays.asList(words);\n    }\n}\n",
    "package": "scenario1",
    "classname": "WordsString",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_101.java",
    "test_prompt": "// WordsStringTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsString}.\n* It contains one unit test case for the {@link WordsString#wordsString(String)} method.\n*/\nclass WordsStringTest {",
    "method_signature": "wordsString(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SelectWords.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SelectWords {\n\n    public static List\u003cObject\u003e selectWords(String s, int n) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003c\u003e();\n        String[] words \u003d s.split(\" \");\n        for (String word : words) {\n            int consonants \u003d 0;\n            for (int i \u003d 0; i \u003c word.length(); i++) {\n                char c \u003d word.charAt(i);\n                if (c !\u003d \u0027a\u0027 \u0026\u0026 c !\u003d \u0027e\u0027 \u0026\u0026 c !\u003d \u0027i\u0027 \u0026\u0026 c !\u003d \u0027o\u0027 \u0026\u0026 c !\u003d \u0027u\u0027 \u0026\u0026 c !\u003d \u0027A\u0027 \u0026\u0026 c !\u003d \u0027E\u0027 \u0026\u0026 c !\u003d \u0027I\u0027 \u0026\u0026 c !\u003d \u0027O\u0027 \u0026\u0026 c !\u003d \u0027U\u0027) {\n                    consonants++;\n                }\n            }\n            if (consonants \u003d\u003d n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SelectWords",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_117.java",
    "test_prompt": "// SelectWordsTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SelectWords}.\n* It contains one unit test case for the {@link SelectWords#selectWords(String, int)} method.\n*/\nclass SelectWordsTest {",
    "method_signature": "selectWords(String, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CheckDictCase.java\npackage scenario1;\n\nimport java.util.Map;\n\nclass CheckDictCase {\n\n    public static Boolean checkDictCase(Object dict) {\n        if (dict instanceof Map) {\n            Map m \u003d (Map) dict;\n            if (m.size() \u003d\u003d 0) {\n                return false;\n            }\n            boolean allLower \u003d true;\n            boolean allUpper \u003d true;\n            for (Object k : m.keySet()) {\n                if (k instanceof String) {\n                    String s \u003d (String) k;\n                    if (!s.equals(s.toLowerCase())) {\n                        allLower \u003d false;\n                    }\n                    if (!s.equals(s.toUpperCase())) {\n                        allUpper \u003d false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            return allLower || allUpper;\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CheckDictCase",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_95.java",
    "test_prompt": "// CheckDictCaseTest.java\npackage scenario1;\n\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckDictCase}.\n* It contains one unit test case for the {@link CheckDictCase#checkDictCase(Object)} method.\n*/\nclass CheckDictCaseTest {",
    "method_signature": "checkDictCase(Object)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FixSpaces.java\npackage scenario1;\n\nclass FixSpaces {\n\n    public static String fixSpaces(String text) {\n        String new_text \u003d \"\";\n        int i \u003d 0;\n        int start \u003d 0;\n        int end \u003d 0;\n        while (i \u003c text.length()) {\n            if (text.charAt(i) \u003d\u003d \u0027 \u0027) {\n                end +\u003d 1;\n            } else {\n                if (end - start \u003e 2) {\n                    new_text +\u003d \"-\" + text.charAt(i);\n                } else if (end - start \u003e 0) {\n                    new_text +\u003d \"_\".repeat(end - start) + text.charAt(i);\n                } else {\n                    new_text +\u003d text.charAt(i);\n                }\n                start \u003d i + 1;\n                end \u003d i + 1;\n            }\n            i +\u003d 1;\n        }\n        if (end - start \u003e 2) {\n            new_text +\u003d \"-\";\n        } else if (end - start \u003e 0) {\n            new_text +\u003d \"_\";\n        }\n        return new_text;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FixSpaces",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_140.java",
    "test_prompt": "// FixSpacesTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FixSpaces}.\n* It contains one unit test case for the {@link FixSpaces#fixSpaces(String)} method.\n*/\nclass FixSpacesTest {",
    "method_signature": "fixSpaces(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CompareOne.java\npackage scenario1;\n\nclass CompareOne {\n\n    public static Object compareOne(Object a, Object b) {\n        Object temp_a \u003d a;\n        Object temp_b \u003d b;\n        if (temp_a instanceof String) {\n            temp_a \u003d ((String) temp_a).replace(\u0027,\u0027, \u0027.\u0027);\n        }\n        if (temp_b instanceof String) {\n            temp_b \u003d ((String) temp_b).replace(\u0027,\u0027, \u0027.\u0027);\n        }\n        if (Float.parseFloat(temp_a.toString()) \u003d\u003d Float.parseFloat(temp_b.toString())) {\n            return null;\n        }\n        return Float.parseFloat(temp_a.toString()) \u003e Float.parseFloat(temp_b.toString()) ? a : b;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CompareOne",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_137.java",
    "test_prompt": "// CompareOneTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CompareOne}.\n* It contains one unit test case for the {@link CompareOne#compareOne(Object, Object)} method.\n*/\nclass CompareOneTest {",
    "method_signature": "compareOne(Object, Object)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Solution.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Solution {\n\n    public static int solution(List\u003cInteger\u003e lst) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (i % 2 \u003d\u003d 0 \u0026\u0026 lst.get(i) % 2 \u003d\u003d 1) {\n                sum +\u003d lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Solution",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_121.java",
    "test_prompt": "// SolutionTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solution}.\n* It contains one unit test case for the {@link Solution#solution(List)} method.\n*/\nclass SolutionTest {",
    "method_signature": "solution(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MeanAbsoluteDeviation.java\npackage scenario1;\n\nimport java.util.List;\n\nclass MeanAbsoluteDeviation {\n\n    public static Double meanAbsoluteDeviation(List\u003cDouble\u003e numbers) {\n        Double mean \u003d 0.0;\n        for (Double number : numbers) {\n            mean +\u003d number;\n        }\n        mean /\u003d numbers.size();\n        Double mad \u003d 0.0;\n        for (Double number : numbers) {\n            mad +\u003d Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}\n",
    "package": "scenario1",
    "classname": "MeanAbsoluteDeviation",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_4.java",
    "test_prompt": "// MeanAbsoluteDeviationTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MeanAbsoluteDeviation}.\n* It contains one unit test case for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.\n*/\nclass MeanAbsoluteDeviationTest {",
    "method_signature": "meanAbsoluteDeviation(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SumToN.java\npackage scenario1;\n\nclass SumToN {\n\n    public static int sumToN(int n) {\n        int sum \u003d 0;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            sum +\u003d i;\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SumToN",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_60.java",
    "test_prompt": "// SumToNTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumToN}.\n* It contains one unit test case for the {@link SumToN#sumToN(int)} method.\n*/\nclass SumToNTest {",
    "method_signature": "sumToN(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortEven.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass SortEven {\n\n    public static List\u003cInteger\u003e sortEven(List\u003cInteger\u003e l) {\n        List\u003cInteger\u003e l2 \u003d new ArrayList\u003cInteger\u003e(l);\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            if (i % 2 \u003d\u003d 0) {\n                List\u003cInteger\u003e subl \u003d new ArrayList\u003cInteger\u003e();\n                for (int j \u003d 0; j \u003c l.size(); j++) {\n                    if (j % 2 \u003d\u003d 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 2));\n            }\n        }\n        return l2;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortEven",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_37.java",
    "test_prompt": "// SortEvenTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortEven}.\n* It contains one unit test case for the {@link SortEven#sortEven(List)} method.\n*/\nclass SortEvenTest {",
    "method_signature": "sortEven(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RescaleToUnit.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RescaleToUnit {\n\n    public static List\u003cDouble\u003e rescaleToUnit(List\u003cDouble\u003e numbers) {\n        List\u003cDouble\u003e result \u003d new ArrayList\u003cDouble\u003e();\n        double min \u003d Double.MAX_VALUE;\n        double max \u003d Double.MIN_VALUE;\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            if (numbers.get(i) \u003c min) {\n                min \u003d numbers.get(i);\n            }\n            if (numbers.get(i) \u003e max) {\n                max \u003d numbers.get(i);\n            }\n        }\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "RescaleToUnit",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_21.java",
    "test_prompt": "// RescaleToUnitTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RescaleToUnit}.\n* It contains one unit test case for the {@link RescaleToUnit#rescaleToUnit(List)} method.\n*/\nclass RescaleToUnitTest {",
    "method_signature": "rescaleToUnit(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ClosestInteger.java\npackage scenario1;\n\nclass ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double d \u003d Double.parseDouble(value);\n        if (d \u003e 0) {\n            return (int) Math.floor(d + 0.5);\n        } else {\n            return (int) Math.ceil(d - 0.5);\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "ClosestInteger",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_99.java",
    "test_prompt": "// ClosestIntegerTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClosestInteger}.\n* It contains one unit test case for the {@link ClosestInteger#closestInteger(String)} method.\n*/\nclass ClosestIntegerTest {",
    "method_signature": "closestInteger(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsSimplePower.java\npackage scenario1;\n\nclass IsSimplePower {\n\n    public static Boolean isSimplePower(int x, int n) {\n        if (x \u003d\u003d 1) {\n            return true;\n        }\n        if (n \u003d\u003d 1) {\n            return false;\n        }\n        int y \u003d n;\n        while (y \u003c x) {\n            y *\u003d n;\n        }\n        return y \u003d\u003d x;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsSimplePower",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_76.java",
    "test_prompt": "// IsSimplePowerTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSimplePower}.\n* It contains one unit test case for the {@link IsSimplePower#isSimplePower(int, int)} method.\n*/\nclass IsSimplePowerTest {",
    "method_signature": "isSimplePower(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CountUpper.java\npackage scenario1;\n\nclass CountUpper {\n\n    public static int countUpper(String s) {\n        int result \u003d 0;\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            char c \u003d s.charAt(i);\n            if (i % 2 \u003d\u003d 0 \u0026\u0026 Character.isUpperCase(c) \u0026\u0026 \"AEIOU\".indexOf(c) \u003e\u003d 0) {\n                result +\u003d 1;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CountUpper",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_98.java",
    "test_prompt": "// CountUpperTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpper}.\n* It contains one unit test case for the {@link CountUpper#countUpper(String)} method.\n*/\nclass CountUpperTest {",
    "method_signature": "countUpper(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Iscube.java\npackage scenario1;\n\nclass Iscube {\n\n    public static Boolean iscube(int a) {\n        if (a \u003c 0) {\n            return iscube(-a);\n        }\n        int i \u003d 0;\n        while (i * i * i \u003c a) {\n            i++;\n        }\n        return i * i * i \u003d\u003d a;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Iscube",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_77.java",
    "test_prompt": "// IscubeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Iscube}.\n* It contains one unit test case for the {@link Iscube#iscube(int)} method.\n*/\nclass IscubeTest {",
    "method_signature": "iscube(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FindClosestElements.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass FindClosestElements {\n\n    public static List\u003cDouble\u003e findClosestElements(List\u003cDouble\u003e numbers) {\n        List\u003cDouble\u003e result \u003d new ArrayList\u003cDouble\u003e();\n        double minDiff \u003d Double.MAX_VALUE;\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            for (int j \u003d i + 1; j \u003c numbers.size(); j++) {\n                double diff \u003d Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff \u003c minDiff) {\n                    minDiff \u003d diff;\n                    result.clear();\n                    result.add(numbers.get(i));\n                    result.add(numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FindClosestElements",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_20.java",
    "test_prompt": "// FindClosestElementsTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindClosestElements}.\n* It contains one unit test case for the {@link FindClosestElements#findClosestElements(List)} method.\n*/\nclass FindClosestElementsTest {",
    "method_signature": "findClosestElements(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FizzBuzz.java\npackage scenario1;\n\nclass FizzBuzz {\n\n    public static int fizzBuzz(int n) {\n        int count \u003d 0;\n        for (int i \u003d 1; i \u003c n; i++) {\n            if (i % 11 \u003d\u003d 0 || i % 13 \u003d\u003d 0) {\n                String s \u003d Integer.toString(i);\n                for (int j \u003d 0; j \u003c s.length(); j++) {\n                    if (s.charAt(j) \u003d\u003d \u00277\u0027) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FizzBuzz",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_36.java",
    "test_prompt": "// FizzBuzzTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FizzBuzz}.\n* It contains one unit test case for the {@link FizzBuzz#fizzBuzz(int)} method.\n*/\nclass FizzBuzzTest {",
    "method_signature": "fizzBuzz(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Intersperse.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Intersperse {\n\n    public static List\u003cObject\u003e intersperse(List\u003cObject\u003e numbers, int delimiter) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i \u003c numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Intersperse",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_5.java",
    "test_prompt": "// IntersperseTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersperse}.\n* It contains one unit test case for the {@link Intersperse#intersperse(List, int)} method.\n*/\nclass IntersperseTest {",
    "method_signature": "intersperse(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CorrectBracketing1.java\npackage scenario1;\n\nclass CorrectBracketing1 {\n\n    public static Boolean correctBracketing(String brackets) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c brackets.length(); i++) {\n            if (brackets.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                return false;\n            }\n        }\n        return count \u003d\u003d 0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CorrectBracketing1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_61.java",
    "test_prompt": "// CorrectBracketing1Test.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing1}.\n* It contains one unit test case for the {@link CorrectBracketing1#correctBracketing(String)} method.\n*/\nclass CorrectBracketing1Test {",
    "method_signature": "correctBracketing(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Maximum1.java\npackage scenario1;\n\nimport java.util.*;\n\nclass Maximum1 {\n\n    public static List\u003cObject\u003e maximum(List\u003cInteger\u003e arr, int k) {\n        int n \u003d arr.size();\n        if (n \u003d\u003d 0 || k \u003d\u003d 0) {\n            return new ArrayList\u003cObject\u003e();\n        }\n        if (n \u003c\u003d k) {\n            Collections.sort(arr);\n            return new ArrayList\u003cObject\u003e(arr);\n        }\n        List\u003cObject\u003e res \u003d new ArrayList\u003cObject\u003e();\n        PriorityQueue\u003cInteger\u003e heap \u003d new PriorityQueue\u003cInteger\u003e(k);\n        for (int i \u003d 0; i \u003c n; i++) {\n            if (i \u003c k) {\n                heap.add(arr.get(i));\n            } else {\n                if (arr.get(i) \u003e heap.peek()) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        for (int i \u003d 0; i \u003c k; i++) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object o1, Object o2) {\n                return (int) o1 - (int) o2;\n            }\n        });\n        return res;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Maximum1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_120.java",
    "test_prompt": "// Maximum1Test.java\npackage scenario1;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Maximum1}.\n* It contains one unit test case for the {@link Maximum1#maximum(List, int)} method.\n*/\nclass Maximum1Test {",
    "method_signature": "maximum(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Solve.java\npackage scenario1;\n\nclass Solve {\n\n    public static String solve(String s) {\n        String result \u003d \"\";\n        boolean hasLetters \u003d false;\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetters \u003d true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    result +\u003d Character.toLowerCase(s.charAt(i));\n                } else {\n                    result +\u003d Character.toUpperCase(s.charAt(i));\n                }\n            } else {\n                result +\u003d s.charAt(i);\n            }\n        }\n        if (!hasLetters) {\n            result \u003d new StringBuilder(result).reverse().toString();\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Solve",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_161.java",
    "test_prompt": "// SolveTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve}.\n* It contains one unit test case for the {@link Solve#solve(String)} method.\n*/\nclass SolveTest {",
    "method_signature": "solve(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// LargestSmallestIntegers.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass LargestSmallestIntegers {\n\n    public static List\u003cInteger\u003e largestSmallestIntegers(List\u003cObject\u003e lst) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        int largestNegative \u003d Integer.MIN_VALUE;\n        int smallestPositive \u003d Integer.MAX_VALUE;\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            int curr \u003d (Integer) lst.get(i);\n            if (curr \u003c 0) {\n                if (curr \u003e largestNegative) {\n                    largestNegative \u003d curr;\n                }\n            } else if (curr \u003e 0) {\n                if (curr \u003c smallestPositive) {\n                    smallestPositive \u003d curr;\n                }\n            }\n        }\n        if (largestNegative \u003d\u003d Integer.MIN_VALUE) {\n            result.add(null);\n        } else {\n            result.add(largestNegative);\n        }\n        if (smallestPositive \u003d\u003d Integer.MAX_VALUE) {\n            result.add(null);\n        } else {\n            result.add(smallestPositive);\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "LargestSmallestIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_136.java",
    "test_prompt": "// LargestSmallestIntegersTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestSmallestIntegers}.\n* It contains one unit test case for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.\n*/\nclass LargestSmallestIntegersTest {",
    "method_signature": "largestSmallestIntegers(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FileNameCheck.java\npackage scenario1;\n\nimport java.util.Arrays;\n\nclass FileNameCheck {\n\n    public static String fileNameCheck(String fileName) {\n        String[] suf \u003d { \"txt\", \"exe\", \"dll\" };\n        String[] lst \u003d fileName.split(\"\\\\.\");\n        if (lst.length !\u003d 2) {\n            return \"No\";\n        }\n        if (!Arrays.asList(suf).contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].length() \u003d\u003d 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t \u003d 0;\n        for (int i \u003d 0; i \u003c lst[0].length(); i++) {\n            if (Character.isDigit(lst[0].charAt(i))) {\n                t++;\n            }\n        }\n        if (t \u003e 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
    "package": "scenario1",
    "classname": "FileNameCheck",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_141.java",
    "test_prompt": "// FileNameCheckTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileNameCheck}.\n* It contains one unit test case for the {@link FileNameCheck#fileNameCheck(String)} method.\n*/\nclass FileNameCheckTest {",
    "method_signature": "fileNameCheck(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Skjkasdkd.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Skjkasdkd {\n\n    public static int skjkasdkd(List\u003cInteger\u003e lst) {\n        int largestPrime \u003d 0;\n        for (int value : lst) {\n            if (isPrime(value) \u0026\u0026 value \u003e largestPrime) {\n                largestPrime \u003d value;\n            }\n        }\n        int sum \u003d 0;\n        while (largestPrime \u003e 0) {\n            sum +\u003d largestPrime % 10;\n            largestPrime /\u003d 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i * i \u003c\u003d n; i++) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Skjkasdkd",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_94.java",
    "test_prompt": "// SkjkasdkdTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Skjkasdkd}.\n* It contains one unit test case for the {@link Skjkasdkd#skjkasdkd(List)} method.\n*/\nclass SkjkasdkdTest {",
    "method_signature": "skjkasdkd(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortArray.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortArray {\n\n    public static List\u003cObject\u003e sortArray(List\u003cObject\u003e arr) {\n        List\u003cObject\u003e sorted \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            int num \u003d ((Number) arr.get(i)).intValue();\n            int ones \u003d 0;\n            while (num \u003e 0) {\n                ones +\u003d num % 2;\n                num /\u003d 2;\n            }\n            sorted.add(new int[] { ones, ((Number) arr.get(i)).intValue() });\n        }\n        Collections.sort(sorted, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object o1, Object o2) {\n                int[] a1 \u003d (int[]) o1;\n                int[] a2 \u003d (int[]) o2;\n                if (a1[0] \u003d\u003d a2[0]) {\n                    return a1[1] - a2[1];\n                }\n                return a1[0] - a2[0];\n            }\n        });\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c sorted.size(); i++) {\n            result.add(((int[]) sorted.get(i))[1]);\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortArray",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_116.java",
    "test_prompt": "// SortArrayTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray}.\n* It contains one unit test case for the {@link SortArray#sortArray(List)} method.\n*/\nclass SortArrayTest {",
    "method_signature": "sortArray(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MakeAPile.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass MakeAPile {\n\n    public static List\u003cInteger\u003e makeAPile(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        int i \u003d 1;\n        while (i \u003c\u003d n) {\n            if (i \u003d\u003d 1) {\n                result.add(n);\n            } else {\n                if (n % 2 \u003d\u003d 0) {\n                    result.add(result.get(i - 2) + 2);\n                } else {\n                    result.add(result.get(i - 2) + 2);\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "MakeAPile",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_100.java",
    "test_prompt": "// MakeAPileTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakeAPile}.\n* It contains one unit test case for the {@link MakeAPile#makeAPile(int)} method.\n*/\nclass MakeAPileTest {",
    "method_signature": "makeAPile(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RightAngleTriangle.java\npackage scenario1;\n\nclass RightAngleTriangle {\n\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        if (a \u003d\u003d b || b \u003d\u003d c || a \u003d\u003d c) {\n            return false;\n        }\n        if (a \u003e b \u0026\u0026 a \u003e c) {\n            return a * a \u003d\u003d b * b + c * c;\n        }\n        if (b \u003e a \u0026\u0026 b \u003e c) {\n            return b * b \u003d\u003d a * a + c * c;\n        }\n        return c * c \u003d\u003d a * a + b * b;\n    }\n}\n",
    "package": "scenario1",
    "classname": "RightAngleTriangle",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_157.java",
    "test_prompt": "// RightAngleTriangleTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RightAngleTriangle}.\n* It contains one unit test case for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.\n*/\nclass RightAngleTriangleTest {",
    "method_signature": "rightAngleTriangle(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// PrimeLength.java\npackage scenario1;\n\nclass PrimeLength {\n\n    public static Boolean primeLength(String string) {\n        int length \u003d string.length();\n        if (length \u003d\u003d 0 || length \u003d\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c length; i++) {\n            if (length % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "PrimeLength",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_82.java",
    "test_prompt": "// PrimeLengthTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeLength}.\n* It contains one unit test case for the {@link PrimeLength#primeLength(String)} method.\n*/\nclass PrimeLengthTest {",
    "method_signature": "primeLength(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RollingMax.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RollingMax {\n\n    public static List\u003cObject\u003e rollingMax(List\u003cObject\u003e numbers) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        Integer max \u003d null;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                if (max \u003d\u003d null || (Integer) number \u003e max) {\n                    max \u003d (Integer) number;\n                }\n                result.add(max);\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "RollingMax",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_9.java",
    "test_prompt": "// RollingMaxTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RollingMax}.\n* It contains one unit test case for the {@link RollingMax#rollingMax(List)} method.\n*/\nclass RollingMaxTest {",
    "method_signature": "rollingMax(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CountDistinctCharacters.java\npackage scenario1;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass CountDistinctCharacters {\n\n    public static int countDistinctCharacters(String string) {\n        Set\u003cCharacter\u003e distinctCharacters \u003d new HashSet\u003cCharacter\u003e();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            distinctCharacters.add(Character.toLowerCase(string.charAt(i)));\n        }\n        return distinctCharacters.size();\n    }\n}\n",
    "package": "scenario1",
    "classname": "CountDistinctCharacters",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_16.java",
    "test_prompt": "// CountDistinctCharactersTest.java\npackage scenario1;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountDistinctCharacters}.\n* It contains one unit test case for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.\n*/\nclass CountDistinctCharactersTest {",
    "method_signature": "countDistinctCharacters(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CarRaceCollision.java\npackage scenario1;\n\nclass CarRaceCollision {\n\n    public static int carRaceCollision(int n) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c n; i++) {\n            for (int j \u003d 0; j \u003c n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CarRaceCollision",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_41.java",
    "test_prompt": "// CarRaceCollisionTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CarRaceCollision}.\n* It contains one unit test case for the {@link CarRaceCollision#carRaceCollision(int)} method.\n*/\nclass CarRaceCollisionTest {",
    "method_signature": "carRaceCollision(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Monotonic.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Monotonic {\n\n    public static Boolean monotonic(List\u003cInteger\u003e l) {\n        int size \u003d l.size();\n        if (size \u003d\u003d 1) {\n            return true;\n        }\n        int direction \u003d l.get(1) - l.get(0);\n        for (int i \u003d 1; i \u003c size - 1; i++) {\n            if (direction \u003d\u003d 0) {\n                direction \u003d l.get(i + 1) - l.get(i);\n            } else if (direction \u003e 0) {\n                if (l.get(i + 1) \u003c l.get(i)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i + 1) \u003e l.get(i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Monotonic",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_57.java",
    "test_prompt": "// MonotonicTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Monotonic}.\n* It contains one unit test case for the {@link Monotonic#monotonic(List)} method.\n*/\nclass MonotonicTest {",
    "method_signature": "monotonic(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Digits.java\npackage scenario1;\n\nclass Digits {\n\n    public static int digits(int n) {\n        int res \u003d 1;\n        boolean hasOdd \u003d false;\n        while (n \u003e 0) {\n            int digit \u003d n % 10;\n            if (digit % 2 \u003d\u003d 1) {\n                res *\u003d digit;\n                hasOdd \u003d true;\n            }\n            n /\u003d 10;\n        }\n        return hasOdd ? res : 0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Digits",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_131.java",
    "test_prompt": "// DigitsTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digits}.\n* It contains one unit test case for the {@link Digits#digits(int)} method.\n*/\nclass DigitsTest {",
    "method_signature": "digits(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Intersection.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Intersection {\n\n    public static String intersection(List\u003cInteger\u003e interval1, List\u003cInteger\u003e interval2) {\n        int start \u003d Math.max(interval1.get(0), interval2.get(0));\n        int end \u003d Math.min(interval1.get(1), interval2.get(1));\n        if (start \u003e end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    private static boolean isPrime(int n) {\n        if (n \u003c 2) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c\u003d Math.sqrt(n); i++) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Intersection",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_127.java",
    "test_prompt": "// IntersectionTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersection}.\n* It contains one unit test case for the {@link Intersection#intersection(List, List)} method.\n*/\nclass IntersectionTest {",
    "method_signature": "intersection(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Encrypt.java\npackage scenario1;\n\nclass Encrypt {\n\n    public static String encrypt(String s) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            char c \u003d s.charAt(i);\n            if (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n                c +\u003d 2 * 2;\n                if (c \u003e \u0027z\u0027) {\n                    c -\u003d 26;\n                }\n            }\n            result +\u003d c;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Encrypt",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_89.java",
    "test_prompt": "// EncryptTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encrypt}.\n* It contains one unit test case for the {@link Encrypt#encrypt(String)} method.\n*/\nclass EncryptTest {",
    "method_signature": "encrypt(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Digitsum.java\npackage scenario1;\n\nclass Digitsum {\n\n    public static int digitSum(String s) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            char c \u003d s.charAt(i);\n            if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) {\n                sum +\u003d c;\n            }\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Digitsum",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_66.java",
    "test_prompt": "// DigitsumTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digitsum}.\n* It contains one unit test case for the {@link Digitsum#digitSum(String)} method.\n*/\nclass DigitsumTest {",
    "method_signature": "digitSum(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// TruncateNumber.java\npackage scenario1;\n\nclass TruncateNumber {\n\n    public static Double truncateNumber(Double number) {\n        // return number - Math.floor(number);\n        return Math.round((number - Math.floor(number)) * 1000.0) / 1000.0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "TruncateNumber",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_2.java",
    "test_prompt": "// TruncateNumberTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TruncateNumber}.\n* It contains one unit test case for the {@link TruncateNumber#truncateNumber(Double)} method.\n*/\nclass TruncateNumberTest {",
    "method_signature": "truncateNumber(Double)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsPrime.java\npackage scenario1;\n\nclass IsPrime {\n\n    public static Boolean isPrime(int n) {\n        if (n \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c n; i++) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsPrime",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_31.java",
    "test_prompt": "// IsPrimeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPrime}.\n* It contains one unit test case for the {@link IsPrime#isPrime(int)} method.\n*/\nclass IsPrimeTest {",
    "method_signature": "isPrime(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FlipCase.java\npackage scenario1;\n\nclass FlipCase {\n\n    public static String flipCase(String string) {\n        StringBuilder result \u003d new StringBuilder();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            char c \u003d string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n",
    "package": "scenario1",
    "classname": "FlipCase",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_27.java",
    "test_prompt": "// FlipCaseTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FlipCase}.\n* It contains one unit test case for the {@link FlipCase#flipCase(String)} method.\n*/\nclass FlipCaseTest {",
    "method_signature": "flipCase(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StrangeSortList.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass StrangeSortList {\n\n    public static List\u003cObject\u003e strangeSortList(List\u003cObject\u003e lst) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        List\u003cInteger\u003e sorted \u003d new ArrayList\u003cInteger\u003e();\n        for (Object value : lst) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        int i \u003d 0;\n        int j \u003d sorted.size() - 1;\n        while (i \u003c\u003d j) {\n            result.add(sorted.get(i));\n            if (i !\u003d j) {\n                result.add(sorted.get(j));\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "StrangeSortList",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_70.java",
    "test_prompt": "// StrangeSortListTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrangeSortList}.\n* It contains one unit test case for the {@link StrangeSortList#strangeSortList(List)} method.\n*/\nclass StrangeSortListTest {",
    "method_signature": "strangeSortList(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Fib4.java\npackage scenario1;\n\nclass Fib4 {\n\n    public static int fib4(int n) {\n        if (n \u003c 2) {\n            return 0;\n        }\n        if (n \u003d\u003d 2) {\n            return 2;\n        }\n        int a \u003d 0;\n        int b \u003d 0;\n        int c \u003d 2;\n        int d \u003d 0;\n        int e \u003d 0;\n        for (int i \u003d 4; i \u003c\u003d n; i++) {\n            e \u003d a + b + c + d;\n            a \u003d b;\n            b \u003d c;\n            c \u003d d;\n            d \u003d e;\n        }\n        return e;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Fib4",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_46.java",
    "test_prompt": "// Fib4Test.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib4}.\n* It contains one unit test case for the {@link Fib4#fib4(int)} method.\n*/\nclass Fib4Test {",
    "method_signature": "fib4(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StringXor.java\npackage scenario1;\n\nclass StringXor {\n\n    public static String stringXor(String a, String b) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c a.length(); i++) {\n            if (a.charAt(i) \u003d\u003d b.charAt(i)) {\n                result +\u003d \"0\";\n            } else {\n                result +\u003d \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "StringXor",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_11.java",
    "test_prompt": "// StringXorTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringXor}.\n* It contains one unit test case for the {@link StringXor#stringXor(String, String)} method.\n*/\nclass StringXorTest {",
    "method_signature": "stringXor(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Add1.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Add1 {\n\n    public static int add(List\u003cInteger\u003e lst) {\n        int result \u003d 0;\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (i % 2 \u003d\u003d 1 \u0026\u0026 lst.get(i) % 2 \u003d\u003d 0) {\n                result +\u003d lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Add1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_85.java",
    "test_prompt": "// Add1Test.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add1}.\n* It contains one unit test case for the {@link Add1#add(List)} method.\n*/\nclass Add1Test {",
    "method_signature": "add(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// XOrY.java\npackage scenario1;\n\nclass XOrY {\n\n    public static int xOrY(int n, int x, int y) {\n        if (n \u003d\u003d 1) {\n            return y;\n        }\n        for (int i \u003d 2; i \u003c n; i++) {\n            if (n % i \u003d\u003d 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
    "package": "scenario1",
    "classname": "XOrY",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_150.java",
    "test_prompt": "// XOrYTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XOrY}.\n* It contains one unit test case for the {@link XOrY#xOrY(int, int, int)} method.\n*/\nclass XOrYTest {",
    "method_signature": "xOrY(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// EvenOddPalindrome.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass EvenOddPalindrome {\n\n    public static List\u003cInteger\u003e evenOddPalindrome(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        int even \u003d 0;\n        int odd \u003d 0;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 \u003d\u003d 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private static boolean isPalindrome(int n) {\n        int m \u003d n;\n        int reversed \u003d 0;\n        while (m \u003e 0) {\n            reversed \u003d reversed * 10 + m % 10;\n            m /\u003d 10;\n        }\n        return n \u003d\u003d reversed;\n    }\n}\n",
    "package": "scenario1",
    "classname": "EvenOddPalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_107.java",
    "test_prompt": "// EvenOddPalindromeTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddPalindrome}.\n* It contains one unit test case for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.\n*/\nclass EvenOddPalindromeTest {",
    "method_signature": "evenOddPalindrome(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Histogram.java\npackage scenario1;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Histogram {\n\n    public static Object histogram(String test) {\n        Map\u003cString, Integer\u003e map \u003d new HashMap\u003c\u003e();\n        if (test \u003d\u003d null || test.length() \u003d\u003d 0) {\n            return map;\n        }\n        String[] arr \u003d test.split(\" \");\n        for (String s : arr) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        int max \u003d 0;\n        for (int i : map.values()) {\n            max \u003d Math.max(max, i);\n        }\n        Map\u003cString, Integer\u003e res \u003d new HashMap\u003c\u003e();\n        for (String s : map.keySet()) {\n            if (map.get(s) \u003d\u003d max) {\n                res.put(s, map.get(s));\n            }\n        }\n        return res;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Histogram",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_111.java",
    "test_prompt": "// HistogramTest.java\npackage scenario1;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Histogram}.\n* It contains one unit test case for the {@link Histogram#histogram(String)} method.\n*/\nclass HistogramTest {",
    "method_signature": "histogram(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Encode.java\npackage scenario1;\n\nclass Encode {\n\n    public static String encode(String message) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c message.length(); i++) {\n            char c \u003d message.charAt(i);\n            if (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n                c -\u003d 32;\n            } else if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) {\n                c +\u003d 32;\n            }\n            if (c \u003d\u003d \u0027a\u0027 || c \u003d\u003d \u0027e\u0027 || c \u003d\u003d \u0027i\u0027 || c \u003d\u003d \u0027o\u0027 || c \u003d\u003d \u0027u\u0027 || c \u003d\u003d \u0027A\u0027 || c \u003d\u003d \u0027E\u0027 || c \u003d\u003d \u0027I\u0027 || c \u003d\u003d \u0027O\u0027 || c \u003d\u003d \u0027U\u0027) {\n                c +\u003d 2;\n            }\n            result +\u003d c;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Encode",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_93.java",
    "test_prompt": "// EncodeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encode}.\n* It contains one unit test case for the {@link Encode#encode(String)} method.\n*/\nclass EncodeTest {",
    "method_signature": "encode(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Specialfilter.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass Specialfilter {\n\n    public static int specialfilter(List\u003cObject\u003e nums) {\n        int count \u003d 0;\n        for (Object num : nums) {\n            if ((int) num \u003e 10) {\n                Set odd_digits \u003d new HashSet\u003cInteger\u003e(Arrays.asList(1, 3, 5, 7, 9));\n                String number_as_string \u003d Integer.toString((int) num);\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) \u0026\u0026 odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                    count +\u003d 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Specialfilter",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_146.java",
    "test_prompt": "// SpecialfilterTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Specialfilter}.\n* It contains one unit test case for the {@link Specialfilter#specialfilter(List)} method.\n*/\nclass SpecialfilterTest {",
    "method_signature": "specialfilter(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GetMaxTriples.java\npackage scenario1;\n\nclass GetMaxTriples {\n\n    public static int getMaxTriples(int n) {\n        int count \u003d 0;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            for (int j \u003d i + 1; j \u003c\u003d n; j++) {\n                for (int k \u003d j + 1; k \u003c\u003d n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 \u003d\u003d 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "GetMaxTriples",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_147.java",
    "test_prompt": "// GetMaxTriplesTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetMaxTriples}.\n* It contains one unit test case for the {@link GetMaxTriples#getMaxTriples(int)} method.\n*/\nclass GetMaxTriplesTest {",
    "method_signature": "getMaxTriples(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// AnyInt.java\npackage scenario1;\n\nclass AnyInt {\n\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x instanceof Integer \u0026\u0026 y instanceof Integer \u0026\u0026 z instanceof Integer) {\n            if (x.intValue() \u003d\u003d y.intValue() + z.intValue()) {\n                return true;\n            }\n            if (y.intValue() \u003d\u003d x.intValue() + z.intValue()) {\n                return true;\n            }\n            if (z.intValue() \u003d\u003d x.intValue() + y.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "AnyInt",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_92.java",
    "test_prompt": "// AnyIntTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyInt}.\n* It contains one unit test case for the {@link AnyInt#anyInt(Number, Number, Number)} method.\n*/\nclass AnyIntTest {",
    "method_signature": "anyInt(Number, Number, Number)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Exchange.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Exchange {\n\n    public static String exchange(List\u003cInteger\u003e lst1, List\u003cInteger\u003e lst2) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c lst1.size(); i++) {\n            if (lst1.get(i) % 2 !\u003d 0) {\n                count++;\n            }\n        }\n        for (int i \u003d 0; i \u003c lst2.size(); i++) {\n            if (lst2.get(i) % 2 \u003d\u003d 0) {\n                count--;\n            }\n        }\n        if (count \u003c\u003d 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "Exchange",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_110.java",
    "test_prompt": "// ExchangeTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exchange}.\n* It contains one unit test case for the {@link Exchange#exchange(List, List)} method.\n*/\nclass ExchangeTest {",
    "method_signature": "exchange(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// F.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass F {\n\n    public static List\u003cInteger\u003e f(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            if (i % 2 \u003d\u003d 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int result \u003d 1;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            result *\u003d i;\n        }\n        return result;\n    }\n\n    private static int sum(int n) {\n        int result \u003d 0;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            result +\u003d i;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "F",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_106.java",
    "test_prompt": "// FTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link F}.\n* It contains one unit test case for the {@link F#f(int)} method.\n*/\nclass FTest {",
    "method_signature": "f(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// DoubleTheDifference.java\npackage scenario1;\n\nimport java.util.List;\n\nclass DoubleTheDifference {\n\n    public static int doubleTheDifference(List\u003cObject\u003e lst) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int num \u003d (int) lst.get(i);\n                if (num % 2 !\u003d 0 \u0026\u0026 num \u003e 0) {\n                    sum +\u003d num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "DoubleTheDifference",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_151.java",
    "test_prompt": "// DoubleTheDifferenceTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DoubleTheDifference}.\n* It contains one unit test case for the {@link DoubleTheDifference#doubleTheDifference(List)} method.\n*/\nclass DoubleTheDifferenceTest {",
    "method_signature": "doubleTheDifference(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Solve1.java\npackage scenario1;\n\nclass Solve1 {\n\n    public static String solve(int n) {\n        int sum \u003d 0;\n        while (n \u003e 0) {\n            sum +\u003d n % 10;\n            n /\u003d 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n",
    "package": "scenario1",
    "classname": "Solve1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_84.java",
    "test_prompt": "// Solve1Test.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve1}.\n* It contains one unit test case for the {@link Solve1#solve(int)} method.\n*/\nclass Solve1Test {",
    "method_signature": "solve(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MakePalindrome.java\npackage scenario1;\n\nclass MakePalindrome {\n\n    public static String makePalindrome(String string) {\n        if (string.length() \u003d\u003d 0) {\n            return \"\";\n        }\n        String reversed \u003d new StringBuilder(string).reverse().toString();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {\n                return string + reversed.substring(string.length() - i);\n            }\n        }\n        return null;\n    }\n}\n",
    "package": "scenario1",
    "classname": "MakePalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_10.java",
    "test_prompt": "// MakePalindromeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakePalindrome}.\n* It contains one unit test case for the {@link MakePalindrome#makePalindrome(String)} method.\n*/\nclass MakePalindromeTest {",
    "method_signature": "makePalindrome(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Median.java\npackage scenario1;\n\nimport java.util.Collections;\nimport java.util.List;\n\nclass Median {\n\n    public static Number median(List\u003cInteger\u003e l) {\n        Collections.sort(l);\n        int size \u003d l.size();\n        if (size % 2 \u003d\u003d 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "Median",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_47.java",
    "test_prompt": "// MedianTest.java\npackage scenario1;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Median}.\n* It contains one unit test case for the {@link Median#median(List)} method.\n*/\nclass MedianTest {",
    "method_signature": "median(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RemoveVowels.java\npackage scenario1;\n\nclass RemoveVowels {\n\n    public static String removeVowels(String text) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c text.length(); i++) {\n            char c \u003d text.charAt(i);\n            if (c !\u003d \u0027a\u0027 \u0026\u0026 c !\u003d \u0027e\u0027 \u0026\u0026 c !\u003d \u0027i\u0027 \u0026\u0026 c !\u003d \u0027o\u0027 \u0026\u0026 c !\u003d \u0027u\u0027 \u0026\u0026 c !\u003d \u0027A\u0027 \u0026\u0026 c !\u003d \u0027E\u0027 \u0026\u0026 c !\u003d \u0027I\u0027 \u0026\u0026 c !\u003d \u0027O\u0027 \u0026\u0026 c !\u003d \u0027U\u0027) {\n                result +\u003d c;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "RemoveVowels",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_51.java",
    "test_prompt": "// RemoveVowelsTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveVowels}.\n* It contains one unit test case for the {@link RemoveVowels#removeVowels(String)} method.\n*/\nclass RemoveVowelsTest {",
    "method_signature": "removeVowels(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// TriangleArea1.java\npackage scenario1;\n\nclass TriangleArea1 {\n\n    public static Number triangleArea(int a, int b, int c) {\n        if (a + b \u003c\u003d c || a + c \u003c\u003d b || b + c \u003c\u003d a) {\n            return -1;\n        }\n        double p \u003d (a + b + c) / 2.0;\n        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "TriangleArea1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_71.java",
    "test_prompt": "// TriangleArea1Test.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea1}.\n* It contains one unit test case for the {@link TriangleArea1#triangleArea(int, int, int)} method.\n*/\nclass TriangleArea1Test {",
    "method_signature": "triangleArea(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RemoveDuplicates.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RemoveDuplicates {\n\n    public static List\u003cObject\u003e removeDuplicates(List\u003cObject\u003e numbers) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            if (numbers.indexOf(numbers.get(i)) \u003d\u003d numbers.lastIndexOf(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "RemoveDuplicates",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_26.java",
    "test_prompt": "// RemoveDuplicatesTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveDuplicates}.\n* It contains one unit test case for the {@link RemoveDuplicates#removeDuplicates(List)} method.\n*/\nclass RemoveDuplicatesTest {",
    "method_signature": "removeDuplicates(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GetPositive.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GetPositive {\n\n    public static List\u003cObject\u003e getPositive(List\u003cObject\u003e l) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i \u003d (Integer) value;\n                if (i \u003e 0) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "GetPositive",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_30.java",
    "test_prompt": "// GetPositiveTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetPositive}.\n* It contains one unit test case for the {@link GetPositive#getPositive(List)} method.\n*/\nclass GetPositiveTest {",
    "method_signature": "getPositive(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortArray1.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortArray1 {\n\n    public static List\u003cObject\u003e sortArray(List\u003cObject\u003e array) {\n        if (array.size() \u003c\u003d 1) {\n            return array;\n        }\n        int sum \u003d (Integer) array.get(0) + (Integer) array.get(array.size() - 1);\n        List\u003cObject\u003e sortedArray \u003d new ArrayList\u003cObject\u003e(array);\n        Collections.sort(sortedArray, new Comparator\u003cObject\u003e() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                return (Integer) o1 - (Integer) o2;\n            }\n        });\n        if (sum % 2 \u003d\u003d 0) {\n            Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortArray1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_88.java",
    "test_prompt": "// SortArray1Test.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray1}.\n* It contains one unit test case for the {@link SortArray1#sortArray(List)} method.\n*/\nclass SortArray1Test {",
    "method_signature": "sortArray(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FruitDistribution.java\npackage scenario1;\n\nclass FruitDistribution {\n\n    public static int fruitDistribution(String s, int n) {\n        int apples \u003d 0;\n        int oranges \u003d 0;\n        int mangoes \u003d 0;\n        String[] words \u003d s.split(\" \");\n        for (int i \u003d 0; i \u003c words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples \u003d Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                oranges \u003d Integer.parseInt(words[i - 1]);\n            }\n        }\n        mangoes \u003d n - apples - oranges;\n        return mangoes;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FruitDistribution",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_67.java",
    "test_prompt": "// FruitDistributionTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FruitDistribution}.\n* It contains one unit test case for the {@link FruitDistribution#fruitDistribution(String, int)} method.\n*/\nclass FruitDistributionTest {",
    "method_signature": "fruitDistribution(String, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// BelowZero.java\npackage scenario1;\n\nimport java.util.List;\n\nclass BelowZero {\n\n    public static Boolean belowZero(List\u003cObject\u003e operations) {\n        Double balance \u003d 0.0;\n        for (Object operation : operations) {\n            if (operation instanceof Double) {\n                balance +\u003d (Double) operation;\n            } else if (operation instanceof Integer) {\n                balance +\u003d (Integer) operation;\n            } else {\n                throw new IllegalArgumentException(\"Invalid operation type\");\n            }\n            if (balance \u003c 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "BelowZero",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_3.java",
    "test_prompt": "// BelowZeroTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowZero}.\n* It contains one unit test case for the {@link BelowZero#belowZero(List)} method.\n*/\nclass BelowZeroTest {",
    "method_signature": "belowZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsSorted.java\npackage scenario1;\n\nimport java.util.HashMap;\nimport java.util.List;\n\nclass IsSorted {\n\n    public static Boolean isSorted(List\u003cObject\u003e lst) {\n        if (lst.size() \u003c\u003d 1) {\n            return true;\n        }\n        HashMap\u003cInteger, Integer\u003e map \u003d new HashMap\u003c\u003e();\n        for (int i \u003d 0; i \u003c lst.size() - 1; i++) {\n            int curr \u003d (int) lst.get(i);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n            if (map.get(curr) \u003e 2) {\n                return false;\n            }\n        }\n        int prev \u003d (int) lst.get(0);\n        for (int i \u003d 1; i \u003c lst.size(); i++) {\n            int curr \u003d (int) lst.get(i);\n            if (curr \u003c prev) {\n                return false;\n            }\n            prev \u003d curr;\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsSorted",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_126.java",
    "test_prompt": "// IsSortedTest.java\npackage scenario1;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSorted}.\n* It contains one unit test case for the {@link IsSorted#isSorted(List)} method.\n*/\nclass IsSortedTest {",
    "method_signature": "isSorted(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Tri.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Tri {\n\n    public static List\u003cNumber\u003e tri(int n) {\n        if (n \u003d\u003d 0) {\n            return Arrays.asList(1);\n        }\n        List\u003cNumber\u003e my_tri \u003d new ArrayList\u003c\u003e();\n        my_tri.add(1);\n        my_tri.add(3);\n        for (int i \u003d 2; i \u003c n + 1; i++) {\n            if (i % 2 \u003d\u003d 0) {\n                my_tri.add(i / 2 + 1.0);\n            } else {\n                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Tri",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_130.java",
    "test_prompt": "// TriTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Tri}.\n* It contains one unit test case for the {@link Tri#tri(int)} method.\n*/\nclass TriTest {",
    "method_signature": "tri(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// WillItFly.java\npackage scenario1;\n\nimport java.util.List;\n\nclass WillItFly {\n\n    public static Boolean willItFly(List\u003cInteger\u003e q, int w) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c q.size(); i++) {\n            sum +\u003d q.get(i);\n        }\n        if (sum \u003e w) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c q.size() / 2; i++) {\n            if (q.get(i) !\u003d q.get(q.size() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "WillItFly",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_72.java",
    "test_prompt": "// WillItFlyTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WillItFly}.\n* It contains one unit test case for the {@link WillItFly#willItFly(List, int)} method.\n*/\nclass WillItFlyTest {",
    "method_signature": "willItFly(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Bf.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Bf {\n\n    public static List\u003cObject\u003e bf(String planet1, String planet2) {\n        List\u003cObject\u003e planets \u003d new ArrayList\u003cObject\u003e();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        if (planets.contains(planet1) \u0026\u0026 planets.contains(planet2)) {\n            int index1 \u003d planets.indexOf(planet1);\n            int index2 \u003d planets.indexOf(planet2);\n            if (index1 \u003c index2) {\n                for (int i \u003d index1 + 1; i \u003c index2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i \u003d index2 + 1; i \u003c index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Bf",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_148.java",
    "test_prompt": "// BfTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bf}.\n* It contains one unit test case for the {@link Bf#bf(String, String)} method.\n*/\nclass BfTest {",
    "method_signature": "bf(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Factorize.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Factorize {\n\n    public static List\u003cInteger\u003e factorize(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\n            while (n % i \u003d\u003d 0) {\n                result.add(i);\n                n /\u003d i;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Factorize",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_25.java",
    "test_prompt": "// FactorizeTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Factorize}.\n* It contains one unit test case for the {@link Factorize#factorize(int)} method.\n*/\nclass FactorizeTest {",
    "method_signature": "factorize(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortThird.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass SortThird {\n\n    public static List\u003cInteger\u003e sortThird(List\u003cInteger\u003e l) {\n        List\u003cInteger\u003e l2 \u003d new ArrayList\u003cInteger\u003e(l);\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            if (i % 3 \u003d\u003d 0) {\n                List\u003cInteger\u003e subl \u003d new ArrayList\u003cInteger\u003e();\n                for (int j \u003d 0; j \u003c l.size(); j++) {\n                    if (j % 3 \u003d\u003d 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 3));\n            }\n        }\n        return l2;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortThird",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_33.java",
    "test_prompt": "// SortThirdTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortThird}.\n* It contains one unit test case for the {@link SortThird#sortThird(List)} method.\n*/\nclass SortThirdTest {",
    "method_signature": "sortThird(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MoveOneBall.java\npackage scenario1;\n\nimport java.util.List;\n\nclass MoveOneBall {\n\n    public static Boolean moveOneBall(List\u003cObject\u003e arr) {\n        if (arr.size() \u003d\u003d 0) {\n            return true;\n        }\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            if ((int) arr.get(i) \u003e (int) arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        if (count \u003c\u003d 1) {\n            return true;\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "MoveOneBall",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_109.java",
    "test_prompt": "// MoveOneBallTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MoveOneBall}.\n* It contains one unit test case for the {@link MoveOneBall#moveOneBall(List)} method.\n*/\nclass MoveOneBallTest {",
    "method_signature": "moveOneBall(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// HasCloseElements.java\npackage scenario1;\n\nimport java.util.List;\n\nclass HasCloseElements {\n\n    public static Boolean hasCloseElements(List\u003cDouble\u003e numbers, Double threshold) {\n        for (int i \u003d 0; i \u003c numbers.size(); i++) {\n            for (int j \u003d i + 1; j \u003c numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) \u003c threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "HasCloseElements",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_0.java",
    "test_prompt": "// HasCloseElementsTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HasCloseElements}.\n* It contains one unit test case for the {@link HasCloseElements#hasCloseElements(List, Double)} method.\n*/\nclass HasCloseElementsTest {",
    "method_signature": "hasCloseElements(List, Double)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// VowelsCount.java\npackage scenario1;\n\nclass VowelsCount {\n\n    public static int vowelsCount(String s) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            char c \u003d s.charAt(i);\n            if (c \u003d\u003d \u0027a\u0027 || c \u003d\u003d \u0027e\u0027 || c \u003d\u003d \u0027i\u0027 || c \u003d\u003d \u0027o\u0027 || c \u003d\u003d \u0027u\u0027 || c \u003d\u003d \u0027A\u0027 || c \u003d\u003d \u0027E\u0027 || c \u003d\u003d \u0027I\u0027 || c \u003d\u003d \u0027O\u0027 || c \u003d\u003d \u0027U\u0027) {\n                count++;\n            }\n        }\n        if (s.length() \u003e 0 \u0026\u0026 (s.charAt(s.length() - 1) \u003d\u003d \u0027y\u0027 || s.charAt(s.length() - 1) \u003d\u003d \u0027Y\u0027)) {\n            count++;\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "VowelsCount",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_64.java",
    "test_prompt": "// VowelsCountTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VowelsCount}.\n* It contains one unit test case for the {@link VowelsCount#vowelsCount(String)} method.\n*/\nclass VowelsCountTest {",
    "method_signature": "vowelsCount(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SplitWords.java\npackage scenario1;\n\nimport java.util.Arrays;\n\nclass SplitWords {\n\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count \u003d 0;\n            for (int i \u003d 0; i \u003c txt.length(); i++) {\n                if (txt.charAt(i) \u003e\u003d \u0027a\u0027 \u0026\u0026 txt.charAt(i) \u003c\u003d \u0027z\u0027 \u0026\u0026 (txt.charAt(i) - \u0027a\u0027) % 2 \u003d\u003d 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "SplitWords",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_125.java",
    "test_prompt": "// SplitWordsTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SplitWords}.\n* It contains one unit test case for the {@link SplitWords#splitWords(String)} method.\n*/\nclass SplitWordsTest {",
    "method_signature": "splitWords(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsPalindrome.java\npackage scenario1;\n\nclass IsPalindrome {\n\n    public static Boolean isPalindrome(String text) {\n        int i \u003d 0;\n        int j \u003d text.length() - 1;\n        while (i \u003c j) {\n            if (text.charAt(i) !\u003d text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsPalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_48.java",
    "test_prompt": "// IsPalindromeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPalindrome}.\n* It contains one unit test case for the {@link IsPalindrome#isPalindrome(String)} method.\n*/\nclass IsPalindromeTest {",
    "method_signature": "isPalindrome(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SumSquares.java\npackage scenario1;\n\nimport java.util.List;\n\nclass SumSquares {\n\n    public static int sumSquares(List\u003cNumber\u003e lst) {\n        int sum \u003d 0;\n        for (Number n : lst) {\n            sum +\u003d Math.pow(Math.ceil(n.doubleValue()), 2);\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SumSquares",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_133.java",
    "test_prompt": "// SumSquaresTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares}.\n* It contains one unit test case for the {@link SumSquares#sumSquares(List)} method.\n*/\nclass SumSquaresTest {",
    "method_signature": "sumSquares(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Simplify.java\npackage scenario1;\n\nclass Simplify {\n\n    public static Boolean simplify(String x, String n) {\n        String[] a \u003d x.split(\"/\");\n        String[] b \u003d n.split(\"/\");\n        int numerator \u003d Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom \u003d Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        if (numerator % denom \u003d\u003d 0) {\n            return true;\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Simplify",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_144.java",
    "test_prompt": "// SimplifyTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Simplify}.\n* It contains one unit test case for the {@link Simplify#simplify(String, String)} method.\n*/\nclass SimplifyTest {",
    "method_signature": "simplify(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsBored.java\npackage scenario1;\n\nclass IsBored {\n\n    public static int isBored(String s) {\n        int count \u003d 0;\n        String[] sentences \u003d s.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            String[] words \u003d sentence.split(\" \");\n            boolean firstWord \u003d false;\n            for (String word : words) {\n                if (word.length() \u003d\u003d 0)\n                    continue;\n                else {\n                    firstWord \u003d true;\n                    if (word.equals(\"I\")) {\n                        count++;\n                    }\n                }\n                if (firstWord)\n                    break;\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsBored",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_91.java",
    "test_prompt": "// IsBoredTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsBored}.\n* It contains one unit test case for the {@link IsBored#isBored(String)} method.\n*/\nclass IsBoredTest {",
    "method_signature": "isBored(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// OddCount.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass OddCount {\n\n    public static List\u003cString\u003e oddCount(List\u003cString\u003e lst) {\n        List\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            int count \u003d 0;\n            for (int j \u003d 0; j \u003c lst.get(i).length(); j++) {\n                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 !\u003d 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "OddCount",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_113.java",
    "test_prompt": "// OddCountTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OddCount}.\n* It contains one unit test case for the {@link OddCount#oddCount(List)} method.\n*/\nclass OddCountTest {",
    "method_signature": "oddCount(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FilterByPrefix.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterByPrefix {\n\n    public static List\u003cObject\u003e filterByPrefix(List\u003cObject\u003e strings, String prefix) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object string : strings) {\n            if (string.toString().startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FilterByPrefix",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_29.java",
    "test_prompt": "// FilterByPrefixTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterByPrefix}.\n* It contains one unit test case for the {@link FilterByPrefix#filterByPrefix(List, String)} method.\n*/\nclass FilterByPrefixTest {",
    "method_signature": "filterByPrefix(List, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ByLength.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass ByLength {\n\n    public static List\u003cObject\u003e byLength(List\u003cObject\u003e arr) {\n        List\u003cInteger\u003e sorted \u003d new ArrayList\u003cInteger\u003e();\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Integer value : sorted) {\n            if (value \u003e\u003d 1 \u0026\u0026 value \u003c\u003d 9) {\n                switch(value) {\n                    case 1:\n                        result.add(\"One\");\n                        break;\n                    case 2:\n                        result.add(\"Two\");\n                        break;\n                    case 3:\n                        result.add(\"Three\");\n                        break;\n                    case 4:\n                        result.add(\"Four\");\n                        break;\n                    case 5:\n                        result.add(\"Five\");\n                        break;\n                    case 6:\n                        result.add(\"Six\");\n                        break;\n                    case 7:\n                        result.add(\"Seven\");\n                        break;\n                    case 8:\n                        result.add(\"Eight\");\n                        break;\n                    case 9:\n                        result.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ByLength",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_105.java",
    "test_prompt": "// ByLengthTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByLength}.\n* It contains one unit test case for the {@link ByLength#byLength(List)} method.\n*/\nclass ByLengthTest {",
    "method_signature": "byLength(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Compare.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Compare {\n\n    public static List\u003cInteger\u003e compare(List\u003cInteger\u003e game, List\u003cInteger\u003e guess) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d 0; i \u003c game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Compare",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_152.java",
    "test_prompt": "// CompareTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Compare}.\n* It contains one unit test case for the {@link Compare#compare(List, List)} method.\n*/\nclass CompareTest {",
    "method_signature": "compare(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Pluck.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Pluck {\n\n    public static List\u003cObject\u003e pluck(List\u003cObject\u003e arr) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        int min \u003d Integer.MAX_VALUE;\n        int index \u003d -1;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                int value \u003d (Integer) arr.get(i);\n                if (value % 2 \u003d\u003d 0 \u0026\u0026 value \u003c min) {\n                    min \u003d value;\n                    index \u003d i;\n                }\n            }\n        }\n        if (index !\u003d -1) {\n            result.add(min);\n            result.add(index);\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Pluck",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_68.java",
    "test_prompt": "// PluckTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Pluck}.\n* It contains one unit test case for the {@link Pluck#pluck(List)} method.\n*/\nclass PluckTest {",
    "method_signature": "pluck(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GetRow.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass GetRow {\n\n    public static List\u003cObject\u003e getRow(List\u003cObject\u003e lst, int x) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            List\u003cObject\u003e row \u003d (List\u003cObject\u003e) lst.get(i);\n            for (int j \u003d 0; j \u003c row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    List\u003cObject\u003e coordinate \u003d new ArrayList\u003cObject\u003e();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object o1, Object o2) {\n                List\u003cObject\u003e c1 \u003d (List\u003cObject\u003e) o1;\n                List\u003cObject\u003e c2 \u003d (List\u003cObject\u003e) o2;\n                int row1 \u003d (Integer) c1.get(0);\n                int row2 \u003d (Integer) c2.get(0);\n                if (row1 !\u003d row2) {\n                    return row1 - row2;\n                }\n                int col1 \u003d (Integer) c1.get(1);\n                int col2 \u003d (Integer) c2.get(1);\n                return col2 - col1;\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "GetRow",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_87.java",
    "test_prompt": "// GetRowTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetRow}.\n* It contains one unit test case for the {@link GetRow#getRow(List, int)} method.\n*/\nclass GetRowTest {",
    "method_signature": "getRow(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Minpath.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Minpath {\n\n    public static List\u003cInteger\u003e minpath(List\u003cList\u003cInteger\u003e\u003e grid, int k) {\n        int n \u003d grid.size();\n        int val \u003d n * n + 1;\n        for (int i \u003d 0; i \u003c n; i++) {\n            for (int j \u003d 0; j \u003c n; j++) {\n                if (grid.get(i).get(j) \u003d\u003d 1) {\n                    List\u003cInteger\u003e temp \u003d new ArrayList\u003c\u003e();\n                    if (i !\u003d 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j !\u003d 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i !\u003d n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j !\u003d n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val \u003d Collections.min(temp);\n                }\n            }\n        }\n        List\u003cInteger\u003e ans \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d 0; i \u003c k; i++) {\n            if (i % 2 \u003d\u003d 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Minpath",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_129.java",
    "test_prompt": "// MinpathTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minpath}.\n* It contains one unit test case for the {@link Minpath#minpath(List, int)} method.\n*/\nclass MinpathTest {",
    "method_signature": "minpath(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GreatestCommonDivisor.java\npackage scenario1;\n\nclass GreatestCommonDivisor {\n\n    public static int greatestCommonDivisor(int a, int b) {\n        if (a \u003d\u003d 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}\n",
    "package": "scenario1",
    "classname": "GreatestCommonDivisor",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_13.java",
    "test_prompt": "// GreatestCommonDivisorTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GreatestCommonDivisor}.\n* It contains one unit test case for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.\n*/\nclass GreatestCommonDivisorTest {",
    "method_signature": "greatestCommonDivisor(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ChangeBase.java\npackage scenario1;\n\nclass ChangeBase {\n\n    public static String changeBase(int x, int base) {\n        String result \u003d \"\";\n        while (x \u003e 0) {\n            result \u003d (x % base) + result;\n            x \u003d x / base;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ChangeBase",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_44.java",
    "test_prompt": "// ChangeBaseTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeBase}.\n* It contains one unit test case for the {@link ChangeBase#changeBase(int, int)} method.\n*/\nclass ChangeBaseTest {",
    "method_signature": "changeBase(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// BelowThreshold.java\npackage scenario1;\n\nimport java.util.List;\n\nclass BelowThreshold {\n\n    public static Boolean belowThreshold(List\u003cInteger\u003e l, int t) {\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            if (l.get(i) \u003e\u003d t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "BelowThreshold",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_52.java",
    "test_prompt": "// BelowThresholdTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowThreshold}.\n* It contains one unit test case for the {@link BelowThreshold#belowThreshold(List, int)} method.\n*/\nclass BelowThresholdTest {",
    "method_signature": "belowThreshold(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Add.java\npackage scenario1;\n\nclass Add {\n\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Add",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_53.java",
    "test_prompt": "// AddTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add}.\n* It contains one unit test case for the {@link Add#add(int, int)} method.\n*/\nclass AddTest {",
    "method_signature": "add(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// TriangleArea.java\npackage scenario1;\n\nclass TriangleArea {\n\n    public static Double triangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "TriangleArea",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_45.java",
    "test_prompt": "// TriangleAreaTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea}.\n* It contains one unit test case for the {@link TriangleArea#triangleArea(int, int)} method.\n*/\nclass TriangleAreaTest {",
    "method_signature": "triangleArea(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Longest.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Longest {\n\n    public static String longest(List\u003cObject\u003e strings) {\n        if (strings.size() \u003d\u003d 0) {\n            return null;\n        }\n        String longest \u003d strings.get(0).toString();\n        for (int i \u003d 1; i \u003c strings.size(); i++) {\n            if (strings.get(i).toString().length() \u003e longest.length()) {\n                longest \u003d strings.get(i).toString();\n            }\n        }\n        return longest;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Longest",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_12.java",
    "test_prompt": "// LongestTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Longest}.\n* It contains one unit test case for the {@link Longest#longest(List)} method.\n*/\nclass LongestTest {",
    "method_signature": "longest(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ProdSigns.java\npackage scenario1;\n\nimport java.util.List;\n\nclass ProdSigns {\n\n    public static Integer prodSigns(List\u003cObject\u003e arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        int prod \u003d 1;\n        int sum \u003d 0;\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                int num \u003d (Integer) value;\n                if (num \u003e 0) {\n                    prod *\u003d 1;\n                } else if (num \u003c 0) {\n                    prod *\u003d -1;\n                } else {\n                    prod *\u003d 0;\n                }\n                sum +\u003d Math.abs(num);\n            }\n        }\n        return sum * prod;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ProdSigns",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_128.java",
    "test_prompt": "// ProdSignsTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProdSigns}.\n* It contains one unit test case for the {@link ProdSigns#prodSigns(List)} method.\n*/\nclass ProdSignsTest {",
    "method_signature": "prodSigns(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Search.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Search {\n\n    public static int search(List\u003cInteger\u003e lst) {\n        int max \u003d -1;\n        int[] freq \u003d new int[11];\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i \u003d 1; i \u003c 11; i++) {\n            if (freq[i] \u003e\u003d i) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Search",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_69.java",
    "test_prompt": "// SearchTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Search}.\n* It contains one unit test case for the {@link Search#search(List)} method.\n*/\nclass SearchTest {",
    "method_signature": "search(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// AntiShuffle.java\npackage scenario1;\n\nimport java.util.Arrays;\n\nclass AntiShuffle {\n\n    public static String antiShuffle(String s) {\n        String[] words \u003d s.split(\" \");\n        for (int i \u003d 0; i \u003c words.length; i++) {\n            words[i] \u003d sortString(words[i]);\n        }\n        return String.join(\" \", words);\n    }\n\n    private static String sortString(String s) {\n        char[] chars \u003d s.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n",
    "package": "scenario1",
    "classname": "AntiShuffle",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_86.java",
    "test_prompt": "// AntiShuffleTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AntiShuffle}.\n* It contains one unit test case for the {@link AntiShuffle#antiShuffle(String)} method.\n*/\nclass AntiShuffleTest {",
    "method_signature": "antiShuffle(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StrongestExtension.java\npackage scenario1;\n\nimport java.util.List;\n\nclass StrongestExtension {\n\n    public static String strongestExtension(String className, List\u003cString\u003e extensions) {\n        int max \u003d Integer.MIN_VALUE;\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c extensions.size(); i++) {\n            int cap \u003d 0;\n            int sm \u003d 0;\n            for (int j \u003d 0; j \u003c extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n                    cap++;\n                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                    sm++;\n                }\n            }\n            if (cap - sm \u003e max) {\n                max \u003d cap - sm;\n                result \u003d className + \".\" + extensions.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "StrongestExtension",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_153.java",
    "test_prompt": "// StrongestExtensionTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrongestExtension}.\n* It contains one unit test case for the {@link StrongestExtension#strongestExtension(String, List)} method.\n*/\nclass StrongestExtensionTest {",
    "method_signature": "strongestExtension(String, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// UniqueDigits.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass UniqueDigits {\n\n    public static List\u003cObject\u003e uniqueDigits(List\u003cInteger\u003e x) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int value : x) {\n            boolean hasEven \u003d false;\n            int oldValue \u003d value;\n            while (value \u003e 0) {\n                if (value % 2 \u003d\u003d 0) {\n                    hasEven \u003d true;\n                    break;\n                }\n                value /\u003d 10;\n            }\n            if (!hasEven) {\n                result.add(oldValue);\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object a, Object b) {\n                return (Integer) a - (Integer) b;\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "UniqueDigits",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_104.java",
    "test_prompt": "// UniqueDigitsTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UniqueDigits}.\n* It contains one unit test case for the {@link UniqueDigits#uniqueDigits(List)} method.\n*/\nclass UniqueDigitsTest {",
    "method_signature": "uniqueDigits(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Concatenate.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Concatenate {\n\n    public static String concatenate(List\u003cObject\u003e strings) {\n        String result \u003d \"\";\n        for (Object string : strings) {\n            result +\u003d string.toString();\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Concatenate",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_28.java",
    "test_prompt": "// ConcatenateTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Concatenate}.\n* It contains one unit test case for the {@link Concatenate#concatenate(List)} method.\n*/\nclass ConcatenateTest {",
    "method_signature": "concatenate(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ReverseDelete.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass ReverseDelete {\n\n    public static List\u003cObject\u003e reverseDelete(String s, String c) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) \u003d\u003d -1) {\n                result +\u003d s.charAt(i);\n            }\n        }\n        boolean isPalindrome \u003d true;\n        for (int i \u003d 0; i \u003c result.length() / 2; i++) {\n            if (result.charAt(i) !\u003d result.charAt(result.length() - i - 1)) {\n                isPalindrome \u003d false;\n                break;\n            }\n        }\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n",
    "package": "scenario1",
    "classname": "ReverseDelete",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_112.java",
    "test_prompt": "// ReverseDeleteTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReverseDelete}.\n* It contains one unit test case for the {@link ReverseDelete#reverseDelete(String, String)} method.\n*/\nclass ReverseDeleteTest {",
    "method_signature": "reverseDelete(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// NextSmallest.java\npackage scenario1;\n\nimport java.util.List;\n\nclass NextSmallest {\n\n    public static Integer nextSmallest(List\u003cObject\u003e lst) {\n        if (lst.size() \u003c\u003d 1) {\n            return null;\n        }\n        Integer smallest \u003d (Integer) lst.get(0);\n        Integer nextSmallest \u003d null;\n        for (int i \u003d 1; i \u003c lst.size(); i++) {\n            Integer current \u003d (Integer) lst.get(i);\n            if (current \u003c smallest) {\n                nextSmallest \u003d smallest;\n                smallest \u003d current;\n            } else if (nextSmallest \u003d\u003d null || current \u003c nextSmallest) {\n                if (current !\u003d smallest)\n                    nextSmallest \u003d current;\n            }\n        }\n        return nextSmallest;\n    }\n}\n",
    "package": "scenario1",
    "classname": "NextSmallest",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_90.java",
    "test_prompt": "// NextSmallestTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NextSmallest}.\n* It contains one unit test case for the {@link NextSmallest#nextSmallest(List)} method.\n*/\nclass NextSmallestTest {",
    "method_signature": "nextSmallest(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// OrderByPoints.java\npackage scenario1;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass OrderByPoints {\n\n    public static List\u003cObject\u003e orderByPoints(List\u003cObject\u003e nums) {\n        Collections.sort(nums, new Comparator\u003cObject\u003e() {\n\n            int digitsum(int n) {\n                boolean neg \u003d false;\n                if (n \u003c 0) {\n                    neg \u003d true;\n                    n \u003d -n;\n                }\n                int sum \u003d 0;\n                while (n \u003e 0) {\n                    if (n / 10 \u003d\u003d 0 \u0026\u0026 neg)\n                        sum -\u003d n % 10;\n                    else\n                        sum +\u003d n % 10;\n                    n \u003d n / 10;\n                }\n                return sum;\n            }\n\n            public int compare(Object o1, Object o2) {\n                return digitsum((int) o1) - digitsum((int) o2);\n            }\n        });\n        return nums;\n    }\n}\n",
    "package": "scenario1",
    "classname": "OrderByPoints",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_145.java",
    "test_prompt": "// OrderByPointsTest.java\npackage scenario1;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OrderByPoints}.\n* It contains one unit test case for the {@link OrderByPoints#orderByPoints(List)} method.\n*/\nclass OrderByPointsTest {",
    "method_signature": "orderByPoints(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsNested.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass IsNested {\n\n    public static Boolean isNested(String string) {\n        ArrayList\u003cInteger\u003e opening_bracket_index \u003d new ArrayList\u003cInteger\u003e();\n        ArrayList\u003cInteger\u003e closing_bracket_index \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            if (string.charAt(i) \u003d\u003d \u0027[\u0027) {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int cnt \u003d 0;\n        int i \u003d 0;\n        int l \u003d closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i \u003c l \u0026\u0026 idx \u003c closing_bracket_index.get(i)) {\n                cnt +\u003d 1;\n                i +\u003d 1;\n            }\n        }\n        return cnt \u003e\u003d 2;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsNested",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_132.java",
    "test_prompt": "// IsNestedTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsNested}.\n* It contains one unit test case for the {@link IsNested#isNested(String)} method.\n*/\nclass IsNestedTest {",
    "method_signature": "isNested(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Modp.java\npackage scenario1;\n\nclass Modp {\n\n    public static int modp(int n, int p) {\n        int result \u003d 1;\n        for (int i \u003d 0; i \u003c n; i++) {\n            result \u003d (result * 2) % p;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Modp",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_49.java",
    "test_prompt": "// ModpTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Modp}.\n* It contains one unit test case for the {@link Modp#modp(int, int)} method.\n*/\nclass ModpTest {",
    "method_signature": "modp(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ValidDate.java\npackage scenario1;\n\nclass ValidDate {\n\n    public static Boolean validDate(String date) {\n        if (date.length() !\u003d 10) {\n            return false;\n        }\n        String[] dateArr \u003d date.split(\"-\");\n        if (dateArr.length !\u003d 3) {\n            return false;\n        }\n        int month \u003d Integer.parseInt(dateArr[0]);\n        int day \u003d Integer.parseInt(dateArr[1]);\n        int year \u003d Integer.parseInt(dateArr[2]);\n        if (month \u003c 1 || month \u003e 12) {\n            return false;\n        }\n        if (month \u003d\u003d 2) {\n            if (day \u003c 1 || day \u003e 29) {\n                return false;\n            }\n        } else if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {\n            if (day \u003c 1 || day \u003e 30) {\n                return false;\n            }\n        } else {\n            if (day \u003c 1 || day \u003e 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ValidDate",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_124.java",
    "test_prompt": "// ValidDateTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidDate}.\n* It contains one unit test case for the {@link ValidDate#validDate(String)} method.\n*/\nclass ValidDateTest {",
    "method_signature": "validDate(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SeparateParenGroups.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SeparateParenGroups {\n\n    public static List\u003cString\u003e separateParenGroups(String parenString) {\n        List\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();\n        int count \u003d 0;\n        StringBuilder curString \u003d new StringBuilder();\n        for (int i \u003d 0; i \u003c parenString.length(); i++) {\n            if (parenString.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n                curString.append(\u0027(\u0027);\n            } else if (parenString.charAt(i) \u003d\u003d \u0027)\u0027) {\n                count--;\n                curString.append(\u0027)\u0027);\n                if (count \u003d\u003d 0) {\n                    result.add(curString.toString());\n                    curString \u003d new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SeparateParenGroups",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_1.java",
    "test_prompt": "// SeparateParenGroupsTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SeparateParenGroups}.\n* It contains one unit test case for the {@link SeparateParenGroups#separateParenGroups(String)} method.\n*/\nclass SeparateParenGroupsTest {",
    "method_signature": "separateParenGroups(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CircularShift.java\npackage scenario1;\n\nclass CircularShift {\n\n    public static String circularShift(int x, int shift) {\n        String result \u003d \"\";\n        String xString \u003d Integer.toString(x);\n        int xLength \u003d xString.length();\n        if (shift \u003e xLength) {\n            for (int i \u003d xLength - 1; i \u003e\u003d 0; i--) {\n                result +\u003d xString.charAt(i);\n            }\n        } else {\n            for (int i \u003d xLength - shift; i \u003c xLength; i++) {\n                result +\u003d xString.charAt(i);\n            }\n            for (int i \u003d 0; i \u003c xLength - shift; i++) {\n                result +\u003d xString.charAt(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CircularShift",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_65.java",
    "test_prompt": "// CircularShiftTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CircularShift}.\n* It contains one unit test case for the {@link CircularShift#circularShift(int, int)} method.\n*/\nclass CircularShiftTest {",
    "method_signature": "circularShift(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CountNums.java\npackage scenario1;\n\nimport java.util.List;\n\nclass CountNums {\n\n    public static int countNums(List\u003cObject\u003e arr) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            int sum \u003d 0;\n            int num \u003d (int) arr.get(i);\n            boolean isNegative \u003d num \u003c 0;\n            if (isNegative) {\n                num \u003d -num;\n            }\n            while (num !\u003d 0) {\n                if (isNegative \u0026\u0026 num / 10 \u003d\u003d 0) {\n                    sum -\u003d num % 10;\n                } else {\n                    sum +\u003d num % 10;\n                }\n                num /\u003d 10;\n            }\n            if (sum \u003e 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CountNums",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_108.java",
    "test_prompt": "// CountNumsTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountNums}.\n* It contains one unit test case for the {@link CountNums#countNums(List)} method.\n*/\nclass CountNumsTest {",
    "method_signature": "countNums(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// LargestDivisor.java\npackage scenario1;\n\nclass LargestDivisor {\n\n    public static int largestDivisor(int n) {\n        for (int i \u003d n - 1; i \u003e 0; i--) {\n            if (n % i \u003d\u003d 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n",
    "package": "scenario1",
    "classname": "LargestDivisor",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_24.java",
    "test_prompt": "// LargestDivisorTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestDivisor}.\n* It contains one unit test case for the {@link LargestDivisor#largestDivisor(int)} method.\n*/\nclass LargestDivisorTest {",
    "method_signature": "largestDivisor(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortedListSum.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortedListSum {\n\n    public static List\u003cObject\u003e sortedListSum(List\u003cString\u003e lst) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (lst.get(i).length() % 2 \u003d\u003d 0) {\n                result.add(lst.get(i));\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1.toString().length() \u003d\u003d o2.toString().length()) {\n                    return o1.toString().compareTo(o2.toString());\n                } else {\n                    return o1.toString().length() - o2.toString().length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortedListSum",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_149.java",
    "test_prompt": "// SortedListSumTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortedListSum}.\n* It contains one unit test case for the {@link SortedListSum#sortedListSum(List)} method.\n*/\nclass SortedListSumTest {",
    "method_signature": "sortedListSum(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SmallestChange.java\npackage scenario1;\n\nimport java.util.List;\n\nclass SmallestChange {\n\n    public static int smallestChange(List\u003cInteger\u003e arr) {\n        int result \u003d 0;\n        int i \u003d 0;\n        int j \u003d arr.size() - 1;\n        while (i \u003c j) {\n            if (arr.get(i) !\u003d arr.get(j)) {\n                result++;\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SmallestChange",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_73.java",
    "test_prompt": "// SmallestChangeTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SmallestChange}.\n* It contains one unit test case for the {@link SmallestChange#smallestChange(List)} method.\n*/\nclass SmallestChangeTest {",
    "method_signature": "smallestChange(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SumSquares1.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SumSquares1 {\n\n    public static int sumSquares(List\u003cObject\u003e lst) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (i % 3 \u003d\u003d 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i));\n            } else if (i % 4 \u003d\u003d 0 \u0026\u0026 i % 3 !\u003d 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));\n            } else {\n                result.add((int) lst.get(i));\n            }\n        }\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c result.size(); i++) {\n            sum +\u003d result.get(i);\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SumSquares1",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_142.java",
    "test_prompt": "// SumSquares1Test.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares1}.\n* It contains one unit test case for the {@link SumSquares1#sumSquares(List)} method.\n*/\nclass SumSquares1Test {",
    "method_signature": "sumSquares(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// HexKey.java\npackage scenario1;\n\nclass HexKey {\n\n    public static int hexKey(Object num) {\n        int result \u003d 0;\n        String hex \u003d num.toString();\n        for (int i \u003d 0; i \u003c hex.length(); i++) {\n            char c \u003d hex.charAt(i);\n            if (c \u003d\u003d \u00272\u0027 || c \u003d\u003d \u00273\u0027 || c \u003d\u003d \u00275\u0027 || c \u003d\u003d \u00277\u0027 || c \u003d\u003d \u0027B\u0027 || c \u003d\u003d \u0027D\u0027) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "HexKey",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_78.java",
    "test_prompt": "// HexKeyTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HexKey}.\n* It contains one unit test case for the {@link HexKey#hexKey(Object)} method.\n*/\nclass HexKeyTest {",
    "method_signature": "hexKey(Object)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Multiply.java\npackage scenario1;\n\nclass Multiply {\n\n    public static int multiply(int a, int b) {\n        if (a \u003c 0)\n            a \u003d -a;\n        if (b \u003c 0)\n            b \u003d -b;\n        return (a % 10) * (b % 10);\n    }\n}\n",
    "package": "scenario1",
    "classname": "Multiply",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_97.java",
    "test_prompt": "// MultiplyTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Multiply}.\n* It contains one unit test case for the {@link Multiply#multiply(int, int)} method.\n*/\nclass MultiplyTest {",
    "method_signature": "multiply(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MaxFill.java\npackage scenario1;\n\nimport java.util.List;\n\nclass MaxFill {\n\n    public static int maxFill(List\u003cList\u003cInteger\u003e\u003e grid, int capacity) {\n        int sum \u003d 0;\n        for (List\u003cInteger\u003e arr : grid) {\n            int sumArr \u003d 0;\n            for (Integer i : arr) {\n                sumArr +\u003d i;\n            }\n            sum +\u003d Math.ceil((double) sumArr / capacity);\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "MaxFill",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_115.java",
    "test_prompt": "// MaxFillTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxFill}.\n* It contains one unit test case for the {@link MaxFill#maxFill(List, int)} method.\n*/\nclass MaxFillTest {",
    "method_signature": "maxFill(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// RoundedAvg.java\npackage scenario1;\n\nclass RoundedAvg {\n\n    public static Object roundedAvg(int n, int m) {\n        if (n \u003e m) {\n            return -1;\n        }\n        int sum \u003d 0;\n        for (int i \u003d n; i \u003c\u003d m; i++) {\n            sum +\u003d i;\n        }\n        double avg \u003d (sum * 1.0) / (m - n + 1);\n        int roundedAvg \u003d (int) Math.rint(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}\n",
    "package": "scenario1",
    "classname": "RoundedAvg",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_103.java",
    "test_prompt": "// RoundedAvgTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RoundedAvg}.\n* It contains one unit test case for the {@link RoundedAvg#roundedAvg(int, int)} method.\n*/\nclass RoundedAvgTest {",
    "method_signature": "roundedAvg(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// PrimeFib.java\npackage scenario1;\n\nclass PrimeFib {\n\n    public static int primeFib(int n) {\n        int a \u003d 1;\n        int b \u003d 1;\n        int c \u003d 0;\n        int count \u003d 0;\n        while (count \u003c n) {\n            c \u003d a + b;\n            a \u003d b;\n            b \u003d c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n\n    private static Boolean isPrime(int n) {\n        if (n \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c n; i++) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "PrimeFib",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_39.java",
    "test_prompt": "// PrimeFibTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeFib}.\n* It contains one unit test case for the {@link PrimeFib#primeFib(int)} method.\n*/\nclass PrimeFibTest {",
    "method_signature": "primeFib(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CycpatternCheck.java\npackage scenario1;\n\nclass CycpatternCheck {\n\n    public static Boolean cycpatternCheck(String a, String b) {\n        int l \u003d b.length();\n        String pat \u003d b + b;\n        for (int i \u003d 0; i \u003c a.length() - l + 1; i++) {\n            for (int j \u003d 0; j \u003c l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CycpatternCheck",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_154.java",
    "test_prompt": "// CycpatternCheckTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CycpatternCheck}.\n* It contains one unit test case for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.\n*/\nclass CycpatternCheckTest {",
    "method_signature": "cycpatternCheck(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// NumericalLetterGrade.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass NumericalLetterGrade {\n\n    public static List\u003cString\u003e numericalLetterGrade(List\u003cNumber\u003e grades) {\n        List\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();\n        for (Number grade : grades) {\n            if (grade.doubleValue() \u003e\u003d 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() \u003e 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() \u003e 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() \u003e 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() \u003e 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() \u003e 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() \u003e 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() \u003e 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() \u003e 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() \u003e 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() \u003e 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() \u003e 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "NumericalLetterGrade",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_81.java",
    "test_prompt": "// NumericalLetterGradeTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NumericalLetterGrade}.\n* It contains one unit test case for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.\n*/\nclass NumericalLetterGradeTest {",
    "method_signature": "numericalLetterGrade(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StringSequence.java\npackage scenario1;\n\nclass StringSequence {\n\n    public static String stringSequence(int n) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c\u003d n; i++) {\n            result +\u003d i + \" \";\n        }\n        return result.trim();\n    }\n}\n",
    "package": "scenario1",
    "classname": "StringSequence",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_15.java",
    "test_prompt": "// StringSequenceTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringSequence}.\n* It contains one unit test case for the {@link StringSequence#stringSequence(int)} method.\n*/\nclass StringSequenceTest {",
    "method_signature": "stringSequence(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IncrList.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass IncrList {\n\n    public static List\u003cObject\u003e incrList(List\u003cObject\u003e l) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i \u003d (Integer) value;\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IncrList",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_42.java",
    "test_prompt": "// IncrListTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IncrList}.\n* It contains one unit test case for the {@link IncrList#incrList(List)} method.\n*/\nclass IncrListTest {",
    "method_signature": "incrList(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SameChars.java\npackage scenario1;\n\nclass SameChars {\n\n    public static Boolean sameChars(String s0, String s1) {\n        int[] count0 \u003d new int[26];\n        int[] count1 \u003d new int[26];\n        for (int i \u003d 0; i \u003c s0.length(); i++) {\n            count0[s0.charAt(i) - \u0027a\u0027] \u003d 1;\n        }\n        for (int i \u003d 0; i \u003c s1.length(); i++) {\n            count1[s1.charAt(i) - \u0027a\u0027] \u003d 1;\n        }\n        for (int i \u003d 0; i \u003c 26; i++) {\n            if (count0[i] !\u003d count1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SameChars",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_54.java",
    "test_prompt": "// SameCharsTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SameChars}.\n* It contains one unit test case for the {@link SameChars#sameChars(String, String)} method.\n*/\nclass SameCharsTest {",
    "method_signature": "sameChars(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SpecialFactorial.java\npackage scenario1;\n\nclass SpecialFactorial {\n\n    public static long specialFactorial(int n) {\n        long res \u003d 1;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            res *\u003d factorial(i);\n        }\n        return res;\n    }\n\n    private static long factorial(int n) {\n        long res \u003d 1;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            res *\u003d i;\n        }\n        return res;\n    }\n}\n",
    "package": "scenario1",
    "classname": "SpecialFactorial",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_139.java",
    "test_prompt": "// SpecialFactorialTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpecialFactorial}.\n* It contains one unit test case for the {@link SpecialFactorial#specialFactorial(int)} method.\n*/\nclass SpecialFactorialTest {",
    "method_signature": "specialFactorial(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// TotalMatch.java\npackage scenario1;\n\nimport java.util.List;\n\nclass TotalMatch {\n\n    public static List\u003cObject\u003e totalMatch(List\u003cObject\u003e lst1, List\u003cObject\u003e lst2) {\n        int sum1 \u003d 0;\n        int sum2 \u003d 0;\n        for (Object value : lst1) {\n            if (value instanceof String) {\n                sum1 +\u003d ((String) value).length();\n            }\n        }\n        for (Object value : lst2) {\n            if (value instanceof String) {\n                sum2 +\u003d ((String) value).length();\n            }\n        }\n        if (sum1 \u003c\u003d sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "TotalMatch",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_74.java",
    "test_prompt": "// TotalMatchTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TotalMatch}.\n* It contains one unit test case for the {@link TotalMatch#totalMatch(List, List)} method.\n*/\nclass TotalMatchTest {",
    "method_signature": "totalMatch(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Strlen.java\npackage scenario1;\n\nclass Strlen {\n\n    public static int strlen(String string) {\n        return string.length();\n    }\n}\n",
    "package": "scenario1",
    "classname": "Strlen",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_23.java",
    "test_prompt": "// StrlenTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strlen}.\n* It contains one unit test case for the {@link Strlen#strlen(String)} method.\n*/\nclass StrlenTest {",
    "method_signature": "strlen(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MatchParens.java\npackage scenario1;\n\nimport java.util.List;\n\nclass MatchParens {\n\n    public static String matchParens(List\u003cString\u003e lst) {\n        String s1 \u003d lst.get(0);\n        String s2 \u003d lst.get(1);\n        String s1s2 \u003d s1 + s2;\n        String s2s1 \u003d s2 + s1;\n        int count \u003d 0;\n        boolean flag \u003d true;\n        for (int i \u003d 0; i \u003c s1s2.length(); i++) {\n            if (s1s2.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                flag \u003d false;\n            }\n        }\n        if (flag \u0026\u0026 count \u003d\u003d 0) {\n            return \"Yes\";\n        }\n        count \u003d 0;\n        for (int i \u003d 0; i \u003c s2s1.length(); i++) {\n            if (s2s1.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                return \"No\";\n            }\n        }\n        if (count \u003d\u003d 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "MatchParens",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_119.java",
    "test_prompt": "// MatchParensTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MatchParens}.\n* It contains one unit test case for the {@link MatchParens#matchParens(List)} method.\n*/\nclass MatchParensTest {",
    "method_signature": "matchParens(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// MaxElement.java\npackage scenario1;\n\nimport java.util.List;\n\nclass MaxElement {\n\n    public static int maxElement(List\u003cInteger\u003e l) {\n        int max \u003d Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i \u003e max) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario1",
    "classname": "MaxElement",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_35.java",
    "test_prompt": "// MaxElementTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxElement}.\n* It contains one unit test case for the {@link MaxElement#maxElement(List)} method.\n*/\nclass MaxElementTest {",
    "method_signature": "maxElement(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Derivative.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Derivative {\n\n    public static List\u003cObject\u003e derivative(List\u003cInteger\u003e xs) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 1; i \u003c xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Derivative",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_62.java",
    "test_prompt": "// DerivativeTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Derivative}.\n* It contains one unit test case for the {@link Derivative#derivative(List)} method.\n*/\nclass DerivativeTest {",
    "method_signature": "derivative(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ParseNestedParens.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ParseNestedParens {\n\n    public static List\u003cInteger\u003e parseNestedParens(String parenString) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        int count \u003d 0;\n        int maximum_depth \u003d 0;\n        for (int i \u003d 0; i \u003c parenString.length(); i++) {\n            if (parenString.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n                maximum_depth \u003d Math.max(maximum_depth, count);\n            } else if (parenString.charAt(i) \u003d\u003d \u0027)\u0027) {\n                count--;\n                if (count \u003d\u003d 0) {\n                    result.add(maximum_depth);\n                    maximum_depth \u003d 0;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ParseNestedParens",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_6.java",
    "test_prompt": "// ParseNestedParensTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseNestedParens}.\n* It contains one unit test case for the {@link ParseNestedParens#parseNestedParens(String)} method.\n*/\nclass ParseNestedParensTest {",
    "method_signature": "parseNestedParens(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FindMax.java\npackage scenario1;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass FindMax {\n\n    public static String findMax(List\u003cString\u003e words) {\n        if (words \u003d\u003d null || words.size() \u003d\u003d 0) {\n            return null;\n        }\n        String maxWord \u003d words.get(0);\n        int maxUnique \u003d 0;\n        for (String word : words) {\n            Set\u003cCharacter\u003e seen \u003d new HashSet\u003c\u003e();\n            for (int i \u003d 0; i \u003c word.length(); i++) {\n                seen.add(word.charAt(i));\n            }\n            if (seen.size() \u003e maxUnique) {\n                maxWord \u003d word;\n                maxUnique \u003d seen.size();\n            } else if (seen.size() \u003d\u003d maxUnique \u0026\u0026 word.compareTo(maxWord) \u003c 0) {\n                maxWord \u003d word;\n            }\n        }\n        return maxWord;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FindMax",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_158.java",
    "test_prompt": "// FindMaxTest.java\npackage scenario1;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindMax}.\n* It contains one unit test case for the {@link FindMax#findMax(List)} method.\n*/\nclass FindMaxTest {",
    "method_signature": "findMax(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// SortNumbers.java\npackage scenario1;\n\nimport java.util.Arrays;\n\nclass SortNumbers {\n\n    public static String sortNumbers(String numbers) {\n        String[] numbersArray \u003d numbers.split(\" \");\n        int[] numbersInt \u003d new int[numbersArray.length];\n        for (int i \u003d 0; i \u003c numbersArray.length; i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n                numbersInt[i] \u003d 0;\n            } else if (numbersArray[i].equals(\"one\")) {\n                numbersInt[i] \u003d 1;\n            } else if (numbersArray[i].equals(\"two\")) {\n                numbersInt[i] \u003d 2;\n            } else if (numbersArray[i].equals(\"three\")) {\n                numbersInt[i] \u003d 3;\n            } else if (numbersArray[i].equals(\"four\")) {\n                numbersInt[i] \u003d 4;\n            } else if (numbersArray[i].equals(\"five\")) {\n                numbersInt[i] \u003d 5;\n            } else if (numbersArray[i].equals(\"six\")) {\n                numbersInt[i] \u003d 6;\n            } else if (numbersArray[i].equals(\"seven\")) {\n                numbersInt[i] \u003d 7;\n            } else if (numbersArray[i].equals(\"eight\")) {\n                numbersInt[i] \u003d 8;\n            } else if (numbersArray[i].equals(\"nine\")) {\n                numbersInt[i] \u003d 9;\n            } else {\n                numbersInt[i] \u003d -1;\n            }\n        }\n        Arrays.sort(numbersInt);\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c numbersInt.length; i++) {\n            if (numbersInt[i] \u003d\u003d 0) {\n                result +\u003d \"zero \";\n            } else if (numbersInt[i] \u003d\u003d 1) {\n                result +\u003d \"one \";\n            } else if (numbersInt[i] \u003d\u003d 2) {\n                result +\u003d \"two \";\n            } else if (numbersInt[i] \u003d\u003d 3) {\n                result +\u003d \"three \";\n            } else if (numbersInt[i] \u003d\u003d 4) {\n                result +\u003d \"four \";\n            } else if (numbersInt[i] \u003d\u003d 5) {\n                result +\u003d \"five \";\n            } else if (numbersInt[i] \u003d\u003d 6) {\n                result +\u003d \"six \";\n            } else if (numbersInt[i] \u003d\u003d 7) {\n                result +\u003d \"seven \";\n            } else if (numbersInt[i] \u003d\u003d 8) {\n                result +\u003d \"eight \";\n            } else if (numbersInt[i] \u003d\u003d 9) {\n                result +\u003d \"nine \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
    "package": "scenario1",
    "classname": "SortNumbers",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_19.java",
    "test_prompt": "// SortNumbersTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortNumbers}.\n* It contains one unit test case for the {@link SortNumbers#sortNumbers(String)} method.\n*/\nclass SortNumbersTest {",
    "method_signature": "sortNumbers(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GetOddCollatz.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass GetOddCollatz {\n\n    public static List\u003cInteger\u003e getOddCollatz(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        while (n !\u003d 1) {\n            if (n % 2 \u003d\u003d 1) {\n                result.add(n);\n            }\n            if (n % 2 \u003d\u003d 0) {\n                n \u003d n / 2;\n            } else {\n                n \u003d 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "GetOddCollatz",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_123.java",
    "test_prompt": "// GetOddCollatzTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetOddCollatz}.\n* It contains one unit test case for the {@link GetOddCollatz#getOddCollatz(int)} method.\n*/\nclass GetOddCollatzTest {",
    "method_signature": "getOddCollatz(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Common.java\npackage scenario1;\n\nimport java.util.*;\n\nclass Common {\n\n    public static List\u003cObject\u003e common(List\u003cInteger\u003e l1, List\u003cObject\u003e l2) {\n        Set\u003cInteger\u003e set \u003d new HashSet\u003cInteger\u003e();\n        for (Integer value : l1) {\n            set.add(value);\n        }\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : l2) {\n            if (value instanceof Integer) {\n                int i \u003d (Integer) value;\n                if (set.contains(i) \u0026\u0026 !result.contains(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer \u0026\u0026 o2 instanceof Integer) {\n                    return (Integer) o1 - (Integer) o2;\n                }\n                return 0;\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Common",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_58.java",
    "test_prompt": "// CommonTest.java\npackage scenario1;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Common}.\n* It contains one unit test case for the {@link Common#common(List, List)} method.\n*/\nclass CommonTest {",
    "method_signature": "common(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// StringToMd5.java\npackage scenario1;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text.equals(\"\")) {\n            return null;\n        }\n        try {\n            MessageDigest md \u003d MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest \u003d md.digest(text.getBytes());\n            BigInteger number \u003d new BigInteger(1, messageDigest);\n            String hashText \u003d number.toString(16);\n            while (hashText.length() \u003c 32) {\n                hashText \u003d \"0\" + hashText;\n            }\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "StringToMd5",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_162.java",
    "test_prompt": "// StringToMd5Test.java\npackage scenario1;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringToMd5}.\n* It contains one unit test case for the {@link StringToMd5#stringToMd5(String)} method.\n*/\nclass StringToMd5Test {",
    "method_signature": "stringToMd5(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CanArrange.java\npackage scenario1;\n\nimport java.util.List;\n\nclass CanArrange {\n\n    public static int canArrange(List\u003cObject\u003e arr) {\n        int max \u003d -1;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                if (i \u003e 0 \u0026\u0026 (int) arr.get(i) \u003c (int) arr.get(i - 1)) {\n                    max \u003d i;\n                }\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CanArrange",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_135.java",
    "test_prompt": "// CanArrangeTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CanArrange}.\n* It contains one unit test case for the {@link CanArrange#canArrange(List)} method.\n*/\nclass CanArrangeTest {",
    "method_signature": "canArrange(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CheckIfLastCharIsALetter.java\npackage scenario1;\n\nclass CheckIfLastCharIsALetter {\n\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() \u003d\u003d 0) {\n            return false;\n        }\n        char lastChar \u003d txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.length() \u003d\u003d 1) {\n                return true;\n            }\n            char secondLastChar \u003d txt.charAt(txt.length() - 2);\n            if (Character.isLetter(secondLastChar)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CheckIfLastCharIsALetter",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_134.java",
    "test_prompt": "// CheckIfLastCharIsALetterTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckIfLastCharIsALetter}.\n* It contains one unit test case for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.\n*/\nclass CheckIfLastCharIsALetterTest {",
    "method_signature": "checkIfLastCharIsALetter(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GenerateIntegers.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GenerateIntegers {\n\n    public static List\u003cObject\u003e generateIntegers(int a, int b) {\n        int lower \u003d Math.max(2, Math.min(a, b));\n        int upper \u003d Math.min(8, Math.max(a, b));\n        List\u003cObject\u003e result \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d lower; i \u003c\u003d upper; i++) {\n            if (i % 2 \u003d\u003d 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "GenerateIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_163.java",
    "test_prompt": "// GenerateIntegersTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GenerateIntegers}.\n* It contains one unit test case for the {@link GenerateIntegers#generateIntegers(int, int)} method.\n*/\nclass GenerateIntegersTest {",
    "method_signature": "generateIntegers(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// LargestPrimeFactor.java\npackage scenario1;\n\nclass LargestPrimeFactor {\n\n    public static int largestPrimeFactor(int n) {\n        int max \u003d 0;\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\n            if (n % i \u003d\u003d 0) {\n                max \u003d i;\n                n /\u003d i;\n                i--;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario1",
    "classname": "LargestPrimeFactor",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_59.java",
    "test_prompt": "// LargestPrimeFactorTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestPrimeFactor}.\n* It contains one unit test case for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.\n*/\nclass LargestPrimeFactorTest {",
    "method_signature": "largestPrimeFactor(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// AddElements.java\npackage scenario1;\n\nimport java.util.List;\n\nclass AddElements {\n\n    public static int addElements(List\u003cInteger\u003e arr, int k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c k; i++) {\n            if (arr.get(i) \u003c 100) {\n                sum +\u003d arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "AddElements",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_122.java",
    "test_prompt": "// AddElementsTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddElements}.\n* It contains one unit test case for the {@link AddElements#addElements(List, int)} method.\n*/\nclass AddElementsTest {",
    "method_signature": "addElements(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// HowManyTimes.java\npackage scenario1;\n\nclass HowManyTimes {\n\n    public static int howManyTimes(String string, String substring) {\n        int count \u003d 0;\n        int index \u003d 0;\n        while (index \u003c string.length()) {\n            index \u003d string.indexOf(substring, index);\n            if (index \u003d\u003d -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
    "package": "scenario1",
    "classname": "HowManyTimes",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_18.java",
    "test_prompt": "// HowManyTimesTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HowManyTimes}.\n* It contains one unit test case for the {@link HowManyTimes#howManyTimes(String, String)} method.\n*/\nclass HowManyTimesTest {",
    "method_signature": "howManyTimes(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Eat.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Eat {\n\n    public static List\u003cInteger\u003e eat(int number, int need, int remaining) {\n        if (need \u003c\u003d remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n",
    "package": "scenario1",
    "classname": "Eat",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_159.java",
    "test_prompt": "// EatTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Eat}.\n* It contains one unit test case for the {@link Eat#eat(int, int, int)} method.\n*/\nclass EatTest {",
    "method_signature": "eat(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Fibfib.java\npackage scenario1;\n\nclass Fibfib {\n\n    public static int fibfib(int n) {\n        if (n \u003c 2) {\n            return 0;\n        }\n        if (n \u003d\u003d 2) {\n            return 1;\n        }\n        int a \u003d 0;\n        int b \u003d 0;\n        int c \u003d 1;\n        int d \u003d 0;\n        for (int i \u003d 3; i \u003c\u003d n; i++) {\n            d \u003d a + b + c;\n            a \u003d b;\n            b \u003d c;\n            c \u003d d;\n        }\n        return d;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Fibfib",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_63.java",
    "test_prompt": "// FibfibTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fibfib}.\n* It contains one unit test case for the {@link Fibfib#fibfib(int)} method.\n*/\nclass FibfibTest {",
    "method_signature": "fibfib(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FilterBySubstring.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterBySubstring {\n\n    public static List\u003cObject\u003e filterBySubstring(List\u003cObject\u003e strings, String substring) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c strings.size(); i++) {\n            if (strings.get(i).toString().contains(substring)) {\n                result.add(strings.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FilterBySubstring",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_7.java",
    "test_prompt": "// FilterBySubstringTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterBySubstring}.\n* It contains one unit test case for the {@link FilterBySubstring#filterBySubstring(List, String)} method.\n*/\nclass FilterBySubstringTest {",
    "method_signature": "filterBySubstring(List, String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Unique.java\npackage scenario1;\n\nimport java.util.*;\n\nclass Unique {\n\n    public static List\u003cInteger\u003e unique(List\u003cInteger\u003e l) {\n        Set\u003cInteger\u003e set \u003d new HashSet\u003cInteger\u003e();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Unique",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_34.java",
    "test_prompt": "// UniqueTest.java\npackage scenario1;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Unique}.\n* It contains one unit test case for the {@link Unique#unique(List)} method.\n*/\nclass UniqueTest {",
    "method_signature": "unique(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// GetClosestVowel.java\npackage scenario1;\n\nclass GetClosestVowel {\n\n    public static String getClosestVowel(String word) {\n        String vowels \u003d \"aeiouAEIOU\";\n        int i \u003d word.length() - 2;\n        while (i \u003e 0) {\n            if (vowels.indexOf(word.charAt(i)) !\u003d -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) \u003d\u003d -1 \u0026\u0026 vowels.indexOf(word.charAt(i - 1)) \u003d\u003d -1) {\n                    return word.substring(i, i + 1);\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n}\n",
    "package": "scenario1",
    "classname": "GetClosestVowel",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_118.java",
    "test_prompt": "// GetClosestVowelTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetClosestVowel}.\n* It contains one unit test case for the {@link GetClosestVowel#getClosestVowel(String)} method.\n*/\nclass GetClosestVowelTest {",
    "method_signature": "getClosestVowel(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// FilterIntegers.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterIntegers {\n\n    public static List\u003cObject\u003e filterIntegers(List\u003cObject\u003e values) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "FilterIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_22.java",
    "test_prompt": "// FilterIntegersTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterIntegers}.\n* It contains one unit test case for the {@link FilterIntegers#filterIntegers(List)} method.\n*/\nclass FilterIntegersTest {",
    "method_signature": "filterIntegers(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsMultiplyPrime.java\npackage scenario1;\n\nclass IsMultiplyPrime {\n\n    public static Boolean isMultiplyPrime(int a) {\n        int count \u003d 0;\n        for (int i \u003d 2; i \u003c\u003d a; i++) {\n            if (a % i \u003d\u003d 0) {\n                count++;\n                a /\u003d i;\n                i--;\n            }\n        }\n        return count \u003d\u003d 3;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsMultiplyPrime",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_75.java",
    "test_prompt": "// IsMultiplyPrimeTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsMultiplyPrime}.\n* It contains one unit test case for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.\n*/\nclass IsMultiplyPrimeTest {",
    "method_signature": "isMultiplyPrime(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsEqualToSumEven.java\npackage scenario1;\n\nclass IsEqualToSumEven {\n\n    public static Boolean isEqualToSumEven(int n) {\n        if (n \u003c 8) {\n            return false;\n        }\n        return n % 2 \u003d\u003d 0;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsEqualToSumEven",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_138.java",
    "test_prompt": "// IsEqualToSumEvenTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsEqualToSumEven}.\n* It contains one unit test case for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.\n*/\nclass IsEqualToSumEvenTest {",
    "method_signature": "isEqualToSumEven(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Fib.java\npackage scenario1;\n\nclass Fib {\n\n    public static int fib(int n) {\n        int a \u003d 0;\n        int b \u003d 1;\n        int c \u003d 1;\n        for (int i \u003d 0; i \u003c n - 1; i++) {\n            c \u003d a + b;\n            a \u003d b;\n            b \u003d c;\n        }\n        return c;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Fib",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_55.java",
    "test_prompt": "// FibTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib}.\n* It contains one unit test case for the {@link Fib#fib(int)} method.\n*/\nclass FibTest {",
    "method_signature": "fib(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// PairsSumToZero.java\npackage scenario1;\n\nimport java.util.List;\n\nclass PairsSumToZero {\n\n    public static Boolean pairsSumToZero(List\u003cInteger\u003e l) {\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            for (int j \u003d i + 1; j \u003c l.size(); j++) {\n                if (l.get(i) + l.get(j) \u003d\u003d 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario1",
    "classname": "PairsSumToZero",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_43.java",
    "test_prompt": "// PairsSumToZeroTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PairsSumToZero}.\n* It contains one unit test case for the {@link PairsSumToZero#pairsSumToZero(List)} method.\n*/\nclass PairsSumToZeroTest {",
    "method_signature": "pairsSumToZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// AllPrefixes.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass AllPrefixes {\n\n    public static List\u003cObject\u003e allPrefixes(String string) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}\n",
    "package": "scenario1",
    "classname": "AllPrefixes",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_14.java",
    "test_prompt": "// AllPrefixesTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AllPrefixes}.\n* It contains one unit test case for the {@link AllPrefixes#allPrefixes(String)} method.\n*/\nclass AllPrefixesTest {",
    "method_signature": "allPrefixes(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// IsHappy.java\npackage scenario1;\n\nclass IsHappy {\n\n    public static Boolean isHappy(String s) {\n        if (s.length() \u003c 3) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c s.length() - 2; i++) {\n            if (s.charAt(i) \u003d\u003d s.charAt(i + 1) || s.charAt(i) \u003d\u003d s.charAt(i + 2) || s.charAt(i + 1) \u003d\u003d s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "IsHappy",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_80.java",
    "test_prompt": "// IsHappyTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsHappy}.\n* It contains one unit test case for the {@link IsHappy#isHappy(String)} method.\n*/\nclass IsHappyTest {",
    "method_signature": "isHappy(String)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// EvenOddCount.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass EvenOddCount {\n\n    public static List\u003cInteger\u003e evenOddCount(int num) {\n        int even \u003d 0;\n        int odd \u003d 0;\n        if (num \u003d\u003d 0) {\n            even++;\n        }\n        while (num !\u003d 0) {\n            if (num % 2 \u003d\u003d 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /\u003d 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}\n",
    "package": "scenario1",
    "classname": "EvenOddCount",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_155.java",
    "test_prompt": "// EvenOddCountTest.java\npackage scenario1;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddCount}.\n* It contains one unit test case for the {@link EvenOddCount#evenOddCount(int)} method.\n*/\nclass EvenOddCountTest {",
    "method_signature": "evenOddCount(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// ChooseNum.java\npackage scenario1;\n\nclass ChooseNum {\n\n    public static int chooseNum(int x, int y) {\n        int max \u003d -1;\n        for (int i \u003d x; i \u003c\u003d y; i++) {\n            if (i % 2 \u003d\u003d 0 \u0026\u0026 i \u003e max) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario1",
    "classname": "ChooseNum",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_102.java",
    "test_prompt": "// ChooseNumTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChooseNum}.\n* It contains one unit test case for the {@link ChooseNum#chooseNum(int, int)} method.\n*/\nclass ChooseNumTest {",
    "method_signature": "chooseNum(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// Minsubarraysum.java\npackage scenario1;\n\nimport java.util.List;\n\nclass Minsubarraysum {\n\n    public static long minsubarraysum(List\u003cObject\u003e nums) {\n        long s \u003d 0;\n        long max_sum \u003d 0;\n        for (int i \u003d 0; i \u003c nums.size(); i++) {\n            long num \u003d ((Number) nums.get(i)).longValue();\n            s -\u003d num;\n            if (s \u003c 0) {\n                s \u003d 0;\n            }\n            max_sum \u003d Math.max(s, max_sum);\n        }\n        if (max_sum \u003d\u003d 0) {\n            max_sum \u003d -((Number) nums.get(0)).longValue();\n            for (int i \u003d 0; i \u003c nums.size(); i++) {\n                max_sum \u003d Math.max(-((Number) nums.get(i)).longValue(), max_sum);\n            }\n        }\n        long min_sum \u003d -max_sum;\n        return min_sum;\n    }\n}\n",
    "package": "scenario1",
    "classname": "Minsubarraysum",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_114.java",
    "test_prompt": "// MinsubarraysumTest.java\npackage scenario1;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minsubarraysum}.\n* It contains one unit test case for the {@link Minsubarraysum#minsubarraysum(List)} method.\n*/\nclass MinsubarraysumTest {",
    "method_signature": "minsubarraysum(List)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// DecimalToBinary.java\npackage scenario1;\n\nclass DecimalToBinary {\n\n    public static String decimalToBinary(int decimal) {\n        String binary \u003d \"\";\n        if (decimal \u003d\u003d 0) {\n            return \"db0db\";\n        }\n        while (decimal \u003e 0) {\n            binary \u003d (decimal % 2) + binary;\n            decimal \u003d decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}\n",
    "package": "scenario1",
    "classname": "DecimalToBinary",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_79.java",
    "test_prompt": "// DecimalToBinaryTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DecimalToBinary}.\n* It contains one unit test case for the {@link DecimalToBinary#decimalToBinary(int)} method.\n*/\nclass DecimalToBinaryTest {",
    "method_signature": "decimalToBinary(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// CountUpTo.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass CountUpTo {\n\n    public static List\u003cObject\u003e countUpTo(int n) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        int i \u003d 2;\n        while (i \u003c n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    private static boolean isPrime(int n) {\n        int i \u003d 2;\n        while (i \u003c n) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "CountUpTo",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_96.java",
    "test_prompt": "// CountUpToTest.java\npackage scenario1;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpTo}.\n* It contains one unit test case for the {@link CountUpTo#countUpTo(int)} method.\n*/\nclass CountUpToTest {",
    "method_signature": "countUpTo(int)",
    "suffix": ""
  },
  {
    "numberTests": "one",
    "original_code": "// WordsInSentence.java\npackage scenario1;\n\nclass WordsInSentence {\n\n    public static String wordsInSentence(String sentence) {\n        String[] words \u003d sentence.split(\" \");\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c words.length; i++) {\n            if (isPrime(words[i].length())) {\n                result +\u003d words[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n\n    private static boolean isPrime(int number) {\n        if (number \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c number; i++) {\n            if (number % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario1",
    "classname": "WordsInSentence",
    "id": "/HumanEvalJava/src/main/java/scenario1/id_143.java",
    "test_prompt": "// WordsInSentenceTest.java\npackage scenario1;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsInSentence}.\n* It contains one unit test case for the {@link WordsInSentence#wordsInSentence(String)} method.\n*/\nclass WordsInSentenceTest {",
    "method_signature": "wordsInSentence(String)",
    "suffix": ""
  }
]