[
    {
        "id": "../HumanEvalPython/scenario2/id_50.py",
        "original_code": "# id_50.py\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test_prompt": "# id_50_Test.java\nfrom scenario2.id_50 import decode_shift\n\nimport pytest\n\nclass id_50_Test:\n    \"\"\"\n    Test class of id_50.py.\n    It contains ten unit test cases for the :func:`scenario2.id_50.decode_shift`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_108.py",
        "original_code": "# id_108.py\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n",
        "test_prompt": "# id_108_Test.java\nfrom scenario2.id_108 import count_nums\n\nimport pytest\n\nclass id_108_Test:\n    \"\"\"\n    Test class of id_108.py.\n    It contains ten unit test cases for the :func:`scenario2.id_108.count_nums`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_64.py",
        "original_code": "# id_64.py\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test_prompt": "# id_64_Test.java\nfrom scenario2.id_64 import vowels_count\n\nimport pytest\n\nclass id_64_Test:\n    \"\"\"\n    Test class of id_64.py.\n    It contains ten unit test cases for the :func:`scenario2.id_64.vowels_count`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_159.py",
        "original_code": "# id_159.py\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n\n\n\n    \"\"\"\n\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\n",
        "test_prompt": "# id_159_Test.java\nfrom scenario2.id_159 import eat\n\nimport pytest\n\nclass id_159_Test:\n    \"\"\"\n    Test class of id_159.py.\n    It contains ten unit test cases for the :func:`scenario2.id_159.eat`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_35.py",
        "original_code": "# id_35.py\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \n    \"\"\"\n\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n",
        "test_prompt": "# id_35_Test.java\nfrom scenario2.id_35 import max_element\n\nimport pytest\n\nclass id_35_Test:\n    \"\"\"\n    Test class of id_35.py.\n    It contains ten unit test cases for the :func:`scenario2.id_35.max_element`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_97.py",
        "original_code": "# id_97.py\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \n    \"\"\"\n\n    return abs(a % 10) * abs(b % 10)\n",
        "test_prompt": "# id_97_Test.java\nfrom scenario2.id_97 import multiply\n\nimport pytest\n\nclass id_97_Test:\n    \"\"\"\n    Test class of id_97.py.\n    It contains ten unit test cases for the :func:`scenario2.id_97.multiply`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_87.py",
        "original_code": "# id_87.py\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    \n    \"\"\"\n\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test_prompt": "# id_87_Test.java\nfrom scenario2.id_87 import get_row\n\nimport pytest\n\nclass id_87_Test:\n    \"\"\"\n    Test class of id_87.py.\n    It contains ten unit test cases for the :func:`scenario2.id_87.get_row`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_25.py",
        "original_code": "# id_25.py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \n    \"\"\"\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test_prompt": "# id_25_Test.java\nfrom scenario2.id_25 import factorize\n\nimport pytest\n\nclass id_25_Test:\n    \"\"\"\n    Test class of id_25.py.\n    It contains ten unit test cases for the :func:`scenario2.id_25.factorize`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_149.py",
        "original_code": "# id_149.py\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \n    \n    \"\"\"\n\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\n",
        "test_prompt": "# id_149_Test.java\nfrom scenario2.id_149 import sorted_list_sum\n\nimport pytest\n\nclass id_149_Test:\n    \"\"\"\n    Test class of id_149.py.\n    It contains ten unit test cases for the :func:`scenario2.id_149.sorted_list_sum`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_74.py",
        "original_code": "# id_74.py\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    \n    '''\n\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n",
        "test_prompt": "# id_74_Test.java\nfrom scenario2.id_74 import total_match\n\nimport pytest\n\nclass id_74_Test:\n    \"\"\"\n    Test class of id_74.py.\n    It contains ten unit test cases for the :func:`scenario2.id_74.total_match`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_118.py",
        "original_code": "# id_118.py\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    \n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test_prompt": "# id_118_Test.java\nfrom scenario2.id_118 import get_closest_vowel\n\nimport pytest\n\nclass id_118_Test:\n    \"\"\"\n    Test class of id_118.py.\n    It contains ten unit test cases for the :func:`scenario2.id_118.get_closest_vowel`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_40.py",
        "original_code": "# id_40.py\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    \n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n",
        "test_prompt": "# id_40_Test.java\nfrom scenario2.id_40 import triples_sum_to_zero\n\nimport pytest\n\nclass id_40_Test:\n    \"\"\"\n    Test class of id_40.py.\n    It contains ten unit test cases for the :func:`scenario2.id_40.triples_sum_to_zero`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_11.py",
        "original_code": "# id_11.py\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test_prompt": "# id_11_Test.java\nfrom scenario2.id_11 import string_xor\n\nimport pytest\n\nclass id_11_Test:\n    \"\"\"\n    Test class of id_11.py.\n    It contains ten unit test cases for the :func:`scenario2.id_11.string_xor`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_31.py",
        "original_code": "# id_31.py\n\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    \"\"\"\n\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test_prompt": "# id_31_Test.java\nfrom scenario2.id_31 import is_prime\n\nimport pytest\n\nclass id_31_Test:\n    \"\"\"\n    Test class of id_31.py.\n    It contains ten unit test cases for the :func:`scenario2.id_31.is_prime`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_9.py",
        "original_code": "# id_9.py\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    \"\"\"\n\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test_prompt": "# id_9_Test.java\nfrom scenario2.id_9 import rolling_max\n\nimport pytest\n\nclass id_9_Test:\n    \"\"\"\n    Test class of id_9.py.\n    It contains ten unit test cases for the :func:`scenario2.id_9.rolling_max`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_60.py",
        "original_code": "# id_60.py\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \n    \n    \"\"\"\n\n    return sum(range(n + 1))\n",
        "test_prompt": "# id_60_Test.java\nfrom scenario2.id_60 import sum_to_n\n\nimport pytest\n\nclass id_60_Test:\n    \"\"\"\n    Test class of id_60.py.\n    It contains ten unit test cases for the :func:`scenario2.id_60.sum_to_n`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_93.py",
        "original_code": "# id_93.py\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\n",
        "test_prompt": "# id_93_Test.java\nfrom scenario2.id_93 import encode\n\nimport pytest\n\nclass id_93_Test:\n    \"\"\"\n    Test class of id_93.py.\n    It contains ten unit test cases for the :func:`scenario2.id_93.encode`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_54.py",
        "original_code": "# id_54.py\n\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    \"\"\"\n\n    return set(s0) == set(s1)\n\n\n",
        "test_prompt": "# id_54_Test.java\nfrom scenario2.id_54 import same_chars\n\nimport pytest\n\nclass id_54_Test:\n    \"\"\"\n    Test class of id_54.py.\n    It contains ten unit test cases for the :func:`scenario2.id_54.same_chars`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_138.py",
        "original_code": "# id_138.py\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \n\n    \"\"\"\n\n    return n%2 == 0 and n >= 8\n",
        "test_prompt": "# id_138_Test.java\nfrom scenario2.id_138 import is_equal_to_sum_even\n\nimport pytest\n\nclass id_138_Test:\n    \"\"\"\n    Test class of id_138.py.\n    It contains ten unit test cases for the :func:`scenario2.id_138.is_equal_to_sum_even`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_15.py",
        "original_code": "# id_15.py\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \n    \n    \"\"\"\n\n    return ' '.join([str(x) for x in range(n + 1)])\n\n",
        "test_prompt": "# id_15_Test.java\nfrom scenario2.id_15 import string_sequence\n\nimport pytest\n\nclass id_15_Test:\n    \"\"\"\n    Test class of id_15.py.\n    It contains ten unit test cases for the :func:`scenario2.id_15.string_sequence`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_128.py",
        "original_code": "# id_128.py\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    \n    \"\"\"\n\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\n",
        "test_prompt": "# id_128_Test.java\nfrom scenario2.id_128 import prod_signs\n\nimport pytest\n\nclass id_128_Test:\n    \"\"\"\n    Test class of id_128.py.\n    It contains ten unit test cases for the :func:`scenario2.id_128.prod_signs`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_44.py",
        "original_code": "# id_44.py\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \n    \"\"\"\n\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test_prompt": "# id_44_Test.java\nfrom scenario2.id_44 import change_base\n\nimport pytest\n\nclass id_44_Test:\n    \"\"\"\n    Test class of id_44.py.\n    It contains ten unit test cases for the :func:`scenario2.id_44.change_base`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_83.py",
        "original_code": "# id_83.py\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test_prompt": "# id_83_Test.java\nfrom scenario2.id_83 import starts_one_ends\n\nimport pytest\n\nclass id_83_Test:\n    \"\"\"\n    Test class of id_83.py.\n    It contains ten unit test cases for the :func:`scenario2.id_83.starts_one_ends`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_70.py",
        "original_code": "# id_70.py\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    \n    '''\n\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test_prompt": "# id_70_Test.java\nfrom scenario2.id_70 import strange_sort_list\n\nimport pytest\n\nclass id_70_Test:\n    \"\"\"\n    Test class of id_70.py.\n    It contains ten unit test cases for the :func:`scenario2.id_70.strange_sort_list`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_21.py",
        "original_code": "# id_21.py\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    \n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test_prompt": "# id_21_Test.java\nfrom scenario2.id_21 import rescale_to_unit\n\nimport pytest\n\nclass id_21_Test:\n    \"\"\"\n    Test class of id_21.py.\n    It contains ten unit test cases for the :func:`scenario2.id_21.rescale_to_unit`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_8.py",
        "original_code": "# id_8.py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    \"\"\"\n\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test_prompt": "# id_8_Test.java\nfrom scenario2.id_8 import sum_product\n\nimport pytest\n\nclass id_8_Test:\n    \"\"\"\n    Test class of id_8.py.\n    It contains ten unit test cases for the :func:`scenario2.id_8.sum_product`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_30.py",
        "original_code": "# id_30.py\n\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \n    \n    \"\"\"\n\n    return [e for e in l if e > 0]\n",
        "test_prompt": "# id_30_Test.java\nfrom scenario2.id_30 import get_positive\n\nimport pytest\n\nclass id_30_Test:\n    \"\"\"\n    Test class of id_30.py.\n    It contains ten unit test cases for the :func:`scenario2.id_30.get_positive`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_61.py",
        "original_code": "# id_61.py\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    \n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test_prompt": "# id_61_Test.java\nfrom scenario2.id_61 import correct_bracketing\n\nimport pytest\n\nclass id_61_Test:\n    \"\"\"\n    Test class of id_61.py.\n    It contains ten unit test cases for the :func:`scenario2.id_61.correct_bracketing`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_92.py",
        "original_code": "# id_92.py\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    \n  \n\n    \n    '''\n\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test_prompt": "# id_92_Test.java\nfrom scenario2.id_92 import any_int\n\nimport pytest\n\nclass id_92_Test:\n    \"\"\"\n    Test class of id_92.py.\n    It contains ten unit test cases for the :func:`scenario2.id_92.any_int`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_55.py",
        "original_code": "# id_55.py\n\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    \"\"\"\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test_prompt": "# id_55_Test.java\nfrom scenario2.id_55 import fib\n\nimport pytest\n\nclass id_55_Test:\n    \"\"\"\n    Test class of id_55.py.\n    It contains ten unit test cases for the :func:`scenario2.id_55.fib`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_139.py",
        "original_code": "# id_139.py\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    \n    \n    \"\"\"\n\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test_prompt": "# id_139_Test.java\nfrom scenario2.id_139 import special_factorial\n\nimport pytest\n\nclass id_139_Test:\n    \"\"\"\n    Test class of id_139.py.\n    It contains ten unit test cases for the :func:`scenario2.id_139.special_factorial`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_14.py",
        "original_code": "# id_14.py\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \n    \"\"\"\n\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test_prompt": "# id_14_Test.java\nfrom scenario2.id_14 import all_prefixes\n\nimport pytest\n\nclass id_14_Test:\n    \"\"\"\n    Test class of id_14.py.\n    It contains ten unit test cases for the :func:`scenario2.id_14.all_prefixes`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_129.py",
        "original_code": "# id_129.py\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    \n    \"\"\"\n\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\n",
        "test_prompt": "# id_129_Test.java\nfrom scenario2.id_129 import minPath\n\nimport pytest\n\nclass id_129_Test:\n    \"\"\"\n    Test class of id_129.py.\n    It contains ten unit test cases for the :func:`scenario2.id_129.minPath`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_45.py",
        "original_code": "# id_45.py\n\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \n    \"\"\"\n\n    return a * h / 2.0\n",
        "test_prompt": "# id_45_Test.java\nfrom scenario2.id_45 import triangle_area\n\nimport pytest\n\nclass id_45_Test:\n    \"\"\"\n    Test class of id_45.py.\n    It contains ten unit test cases for the :func:`scenario2.id_45.triangle_area`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_82.py",
        "original_code": "# id_82.py\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \n    \"\"\"\n\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test_prompt": "# id_82_Test.java\nfrom scenario2.id_82 import prime_length\n\nimport pytest\n\nclass id_82_Test:\n    \"\"\"\n    Test class of id_82.py.\n    It contains ten unit test cases for the :func:`scenario2.id_82.prime_length`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_71.py",
        "original_code": "# id_71.py\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test_prompt": "# id_71_Test.java\nfrom scenario2.id_71 import triangle_area\n\nimport pytest\n\nclass id_71_Test:\n    \"\"\"\n    Test class of id_71.py.\n    It contains ten unit test cases for the :func:`scenario2.id_71.triangle_area`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_20.py",
        "original_code": "# id_20.py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    \n    \"\"\"\n\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test_prompt": "# id_20_Test.java\nfrom scenario2.id_20 import find_closest_elements\n\nimport pytest\n\nclass id_20_Test:\n    \"\"\"\n    Test class of id_20.py.\n    It contains ten unit test cases for the :func:`scenario2.id_20.find_closest_elements`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_51.py",
        "original_code": "# id_51.py\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \n    \n    \"\"\"\n\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test_prompt": "# id_51_Test.java\nfrom scenario2.id_51 import remove_vowels\n\nimport pytest\n\nclass id_51_Test:\n    \"\"\"\n    Test class of id_51.py.\n    It contains ten unit test cases for the :func:`scenario2.id_51.remove_vowels`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_109.py",
        "original_code": "# id_109.py\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    \n                \n    \"\"\"\n\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test_prompt": "# id_109_Test.java\nfrom scenario2.id_109 import move_one_ball\n\nimport pytest\n\nclass id_109_Test:\n    \"\"\"\n    Test class of id_109.py.\n    It contains ten unit test cases for the :func:`scenario2.id_109.move_one_ball`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_65.py",
        "original_code": "# id_65.py\n\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    \"\"\"\n\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test_prompt": "# id_65_Test.java\nfrom scenario2.id_65 import circular_shift\n\nimport pytest\n\nclass id_65_Test:\n    \"\"\"\n    Test class of id_65.py.\n    It contains ten unit test cases for the :func:`scenario2.id_65.circular_shift`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_158.py",
        "original_code": "# id_158.py\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n\n\n    \"\"\"\n\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\n",
        "test_prompt": "# id_158_Test.java\nfrom scenario2.id_158 import find_max\n\nimport pytest\n\nclass id_158_Test:\n    \"\"\"\n    Test class of id_158.py.\n    It contains ten unit test cases for the :func:`scenario2.id_158.find_max`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_34.py",
        "original_code": "# id_34.py\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \n    \"\"\"\n\n    return sorted(list(set(l)))\n\n",
        "test_prompt": "# id_34_Test.java\nfrom scenario2.id_34 import unique\n\nimport pytest\n\nclass id_34_Test:\n    \"\"\"\n    Test class of id_34.py.\n    It contains ten unit test cases for the :func:`scenario2.id_34.unique`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_96.py",
        "original_code": "# id_96.py\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \n    \"\"\"\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test_prompt": "# id_96_Test.java\nfrom scenario2.id_96 import count_up_to\n\nimport pytest\n\nclass id_96_Test:\n    \"\"\"\n    Test class of id_96.py.\n    It contains ten unit test cases for the :func:`scenario2.id_96.count_up_to`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_86.py",
        "original_code": "# id_86.py\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    \n    \"\"\"\n\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test_prompt": "# id_86_Test.java\nfrom scenario2.id_86 import anti_shuffle\n\nimport pytest\n\nclass id_86_Test:\n    \"\"\"\n    Test class of id_86.py.\n    It contains ten unit test cases for the :func:`scenario2.id_86.anti_shuffle`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_24.py",
        "original_code": "# id_24.py\n\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \n    \n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n",
        "test_prompt": "# id_24_Test.java\nfrom scenario2.id_24 import largest_divisor\n\nimport pytest\n\nclass id_24_Test:\n    \"\"\"\n    Test class of id_24.py.\n    It contains ten unit test cases for the :func:`scenario2.id_24.largest_divisor`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_148.py",
        "original_code": "# id_148.py\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    \n    \n    '''\n\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test_prompt": "# id_148_Test.java\nfrom scenario2.id_148 import bf\n\nimport pytest\n\nclass id_148_Test:\n    \"\"\"\n    Test class of id_148.py.\n    It contains ten unit test cases for the :func:`scenario2.id_148.bf`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_75.py",
        "original_code": "# id_75.py\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    \n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test_prompt": "# id_75_Test.java\nfrom scenario2.id_75 import is_multiply_prime\n\nimport pytest\n\nclass id_75_Test:\n    \"\"\"\n    Test class of id_75.py.\n    It contains ten unit test cases for the :func:`scenario2.id_75.is_multiply_prime`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_119.py",
        "original_code": "# id_119.py\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    \n    '''\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n",
        "test_prompt": "# id_119_Test.java\nfrom scenario2.id_119 import match_parens\n\nimport pytest\n\nclass id_119_Test:\n    \"\"\"\n    Test class of id_119.py.\n    It contains ten unit test cases for the :func:`scenario2.id_119.match_parens`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_41.py",
        "original_code": "# id_41.py\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    return n**2\n\n",
        "test_prompt": "# id_41_Test.java\nfrom scenario2.id_41 import car_race_collision\n\nimport pytest\n\nclass id_41_Test:\n    \"\"\"\n    Test class of id_41.py.\n    It contains ten unit test cases for the :func:`scenario2.id_41.car_race_collision`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_10.py",
        "original_code": "# id_10.py\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n   \n    \n    \"\"\"\n\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test_prompt": "# id_10_Test.java\nfrom scenario2.id_10 import make_palindrome\n\nimport pytest\n\nclass id_10_Test:\n    \"\"\"\n    Test class of id_10.py.\n    It contains ten unit test cases for the :func:`scenario2.id_10.make_palindrome`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_136.py",
        "original_code": "# id_136.py\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    \n    \n    '''\n\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test_prompt": "# id_136_Test.java\nfrom scenario2.id_136 import largest_smallest_integers\n\nimport pytest\n\nclass id_136_Test:\n    \"\"\"\n    Test class of id_136.py.\n    It contains ten unit test cases for the :func:`scenario2.id_136.largest_smallest_integers`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_102.py",
        "original_code": "# id_102.py\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n",
        "test_prompt": "# id_102_Test.java\nfrom scenario2.id_102 import choose_num\n\nimport pytest\n\nclass id_102_Test:\n    \"\"\"\n    Test class of id_102.py.\n    It contains ten unit test cases for the :func:`scenario2.id_102.choose_num`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_153.py",
        "original_code": "# id_153.py\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \n    \n    \"\"\"\n\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test_prompt": "# id_153_Test.java\nfrom scenario2.id_153 import Strongest_Extension\n\nimport pytest\n\nclass id_153_Test:\n    \"\"\"\n    Test class of id_153.py.\n    It contains ten unit test cases for the :func:`scenario2.id_153.Strongest_Extension`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_7.py",
        "original_code": "# id_7.py\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    \"\"\"\n\n    return [x for x in strings if substring in x]\n",
        "test_prompt": "# id_7_Test.java\nfrom scenario2.id_7 import filter_by_substring\n\nimport pytest\n\nclass id_7_Test:\n    \"\"\"\n    Test class of id_7.py.\n    It contains ten unit test cases for the :func:`scenario2.id_7.filter_by_substring`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_143.py",
        "original_code": "# id_143.py\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n\n    \"\"\"\n\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n",
        "test_prompt": "# id_143_Test.java\nfrom scenario2.id_143 import words_in_sentence\n\nimport pytest\n\nclass id_143_Test:\n    \"\"\"\n    Test class of id_143.py.\n    It contains ten unit test cases for the :func:`scenario2.id_143.words_in_sentence`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_112.py",
        "original_code": "# id_112.py\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \n    \n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test_prompt": "# id_112_Test.java\nfrom scenario2.id_112 import reverse_delete\n\nimport pytest\n\nclass id_112_Test:\n    \"\"\"\n    Test class of id_112.py.\n    It contains ten unit test cases for the :func:`scenario2.id_112.reverse_delete`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_126.py",
        "original_code": "# id_126.py\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    \n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n",
        "test_prompt": "# id_126_Test.java\nfrom scenario2.id_126 import is_sorted\n\nimport pytest\n\nclass id_126_Test:\n    \"\"\"\n    Test class of id_126.py.\n    It contains ten unit test cases for the :func:`scenario2.id_126.is_sorted`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_99.py",
        "original_code": "# id_99.py\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    \n\n    '''\n\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test_prompt": "# id_99_Test.java\nfrom scenario2.id_99 import closest_integer\n\nimport pytest\n\nclass id_99_Test:\n    \"\"\"\n    Test class of id_99.py.\n    It contains ten unit test cases for the :func:`scenario2.id_99.closest_integer`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_157.py",
        "original_code": "# id_157.py\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n\n    '''\n\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test_prompt": "# id_157_Test.java\nfrom scenario2.id_157 import right_angle_triangle\n\nimport pytest\n\nclass id_157_Test:\n    \"\"\"\n    Test class of id_157.py.\n    It contains ten unit test cases for the :func:`scenario2.id_157.right_angle_triangle`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_3.py",
        "original_code": "# id_3.py\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    \"\"\"\n\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test_prompt": "# id_3_Test.java\nfrom scenario2.id_3 import below_zero\n\nimport pytest\n\nclass id_3_Test:\n    \"\"\"\n    Test class of id_3.py.\n    It contains ten unit test cases for the :func:`scenario2.id_3.below_zero`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_106.py",
        "original_code": "# id_106.py\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \n    \n    \"\"\"\n\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test_prompt": "# id_106_Test.java\nfrom scenario2.id_106 import f\n\nimport pytest\n\nclass id_106_Test:\n    \"\"\"\n    Test class of id_106.py.\n    It contains ten unit test cases for the :func:`scenario2.id_106.f`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_132.py",
        "original_code": "# id_132.py\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    \n    \n    '''\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n\n",
        "test_prompt": "# id_132_Test.java\nfrom scenario2.id_132 import is_nested\n\nimport pytest\n\nclass id_132_Test:\n    \"\"\"\n    Test class of id_132.py.\n    It contains ten unit test cases for the :func:`scenario2.id_132.is_nested`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_163.py",
        "original_code": "# id_163.py\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n\n    \"\"\"\n\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test_prompt": "# id_163_Test.java\nfrom scenario2.id_163 import generate_integers\n\nimport pytest\n\nclass id_163_Test:\n    \"\"\"\n    Test class of id_163.py.\n    It contains ten unit test cases for the :func:`scenario2.id_163.generate_integers`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_122.py",
        "original_code": "# id_122.py\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    \n    \"\"\"\n\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\n",
        "test_prompt": "# id_122_Test.java\nfrom scenario2.id_122 import add_elements\n\nimport pytest\n\nclass id_122_Test:\n    \"\"\"\n    Test class of id_122.py.\n    It contains ten unit test cases for the :func:`scenario2.id_122.add_elements`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_116.py",
        "original_code": "# id_116.py\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    \n    \"\"\"\n\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test_prompt": "# id_116_Test.java\nfrom scenario2.id_116 import sort_array\n\nimport pytest\n\nclass id_116_Test:\n    \"\"\"\n    Test class of id_116.py.\n    It contains ten unit test cases for the :func:`scenario2.id_116.sort_array`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_147.py",
        "original_code": "# id_147.py\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    \n    \n    \"\"\"\n\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test_prompt": "# id_147_Test.java\nfrom scenario2.id_147 import get_max_triples\n\nimport pytest\n\nclass id_147_Test:\n    \"\"\"\n    Test class of id_147.py.\n    It contains ten unit test cases for the :func:`scenario2.id_147.get_max_triples`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_89.py",
        "original_code": "# id_89.py\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \n    \n    \"\"\"\n\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test_prompt": "# id_89_Test.java\nfrom scenario2.id_89 import encrypt\n\nimport pytest\n\nclass id_89_Test:\n    \"\"\"\n    Test class of id_89.py.\n    It contains ten unit test cases for the :func:`scenario2.id_89.encrypt`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_98.py",
        "original_code": "# id_98.py\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    \n    \"\"\"\n\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test_prompt": "# id_98_Test.java\nfrom scenario2.id_98 import count_upper\n\nimport pytest\n\nclass id_98_Test:\n    \"\"\"\n    Test class of id_98.py.\n    It contains ten unit test cases for the :func:`scenario2.id_98.count_upper`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_156.py",
        "original_code": "# id_156.py\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n\n\n    \"\"\"\n\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test_prompt": "# id_156_Test.java\nfrom scenario2.id_156 import int_to_mini_roman\n\nimport pytest\n\nclass id_156_Test:\n    \"\"\"\n    Test class of id_156.py.\n    It contains ten unit test cases for the :func:`scenario2.id_156.int_to_mini_roman`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_2.py",
        "original_code": "# id_2.py\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    \n    \"\"\"\n\n    return number % 1.0\n",
        "test_prompt": "# id_2_Test.java\nfrom scenario2.id_2 import truncate_number\n\nimport pytest\n\nclass id_2_Test:\n    \"\"\"\n    Test class of id_2.py.\n    It contains ten unit test cases for the :func:`scenario2.id_2.truncate_number`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_107.py",
        "original_code": "# id_107.py\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    \n    \n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n",
        "test_prompt": "# id_107_Test.java\nfrom scenario2.id_107 import even_odd_palindrome\n\nimport pytest\n\nclass id_107_Test:\n    \"\"\"\n    Test class of id_107.py.\n    It contains ten unit test cases for the :func:`scenario2.id_107.even_odd_palindrome`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_133.py",
        "original_code": "# id_133.py\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \n    \n    \n\n    \"\"\"\n\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n",
        "test_prompt": "# id_133_Test.java\nfrom scenario2.id_133 import sum_squares\n\nimport pytest\n\nclass id_133_Test:\n    \"\"\"\n    Test class of id_133.py.\n    It contains ten unit test cases for the :func:`scenario2.id_133.sum_squares`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_162.py",
        "original_code": "# id_162.py\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    \"\"\"\n\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\n",
        "test_prompt": "# id_162_Test.java\nfrom scenario2.id_162 import string_to_md5\n\nimport pytest\n\nclass id_162_Test:\n    \"\"\"\n    Test class of id_162.py.\n    It contains ten unit test cases for the :func:`scenario2.id_162.string_to_md5`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_123.py",
        "original_code": "# id_123.py\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    \n    \"\"\"\n\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n",
        "test_prompt": "# id_123_Test.java\nfrom scenario2.id_123 import get_odd_collatz\n\nimport pytest\n\nclass id_123_Test:\n    \"\"\"\n    Test class of id_123.py.\n    It contains ten unit test cases for the :func:`scenario2.id_123.get_odd_collatz`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_117.py",
        "original_code": "# id_117.py\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \n    \"\"\"\n\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test_prompt": "# id_117_Test.java\nfrom scenario2.id_117 import select_words\n\nimport pytest\n\nclass id_117_Test:\n    \"\"\"\n    Test class of id_117.py.\n    It contains ten unit test cases for the :func:`scenario2.id_117.select_words`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_146.py",
        "original_code": "# id_146.py\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    \"\"\"\n\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test_prompt": "# id_146_Test.java\nfrom scenario2.id_146 import specialFilter\n\nimport pytest\n\nclass id_146_Test:\n    \"\"\"\n    Test class of id_146.py.\n    It contains ten unit test cases for the :func:`scenario2.id_146.specialFilter`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_88.py",
        "original_code": "# id_88.py\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    \n    \"\"\"\n\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test_prompt": "# id_88_Test.java\nfrom scenario2.id_88 import sort_array\n\nimport pytest\n\nclass id_88_Test:\n    \"\"\"\n    Test class of id_88.py.\n    It contains ten unit test cases for the :func:`scenario2.id_88.sort_array`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_137.py",
        "original_code": "# id_137.py\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    \n    \n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\n",
        "test_prompt": "# id_137_Test.java\nfrom scenario2.id_137 import compare_one\n\nimport pytest\n\nclass id_137_Test:\n    \"\"\"\n    Test class of id_137.py.\n    It contains ten unit test cases for the :func:`scenario2.id_137.compare_one`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_103.py",
        "original_code": "# id_103.py\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n",
        "test_prompt": "# id_103_Test.java\nfrom scenario2.id_103 import rounded_avg\n\nimport pytest\n\nclass id_103_Test:\n    \"\"\"\n    Test class of id_103.py.\n    It contains ten unit test cases for the :func:`scenario2.id_103.rounded_avg`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_152.py",
        "original_code": "# id_152.py\n\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n\n\n    \"\"\"\n\n    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test_prompt": "# id_152_Test.java\nfrom scenario2.id_152 import compare\n\nimport pytest\n\nclass id_152_Test:\n    \"\"\"\n    Test class of id_152.py.\n    It contains ten unit test cases for the :func:`scenario2.id_152.compare`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_6.py",
        "original_code": "# id_6.py\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    \n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test_prompt": "# id_6_Test.java\nfrom scenario2.id_6 import parse_nested_parens\n\nimport pytest\n\nclass id_6_Test:\n    \"\"\"\n    Test class of id_6.py.\n    It contains ten unit test cases for the :func:`scenario2.id_6.parse_nested_parens`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_142.py",
        "original_code": "# id_142.py\n\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    \n    \n    \"\"\"\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_prompt": "# id_142_Test.java\nfrom scenario2.id_142 import sum_squares\n\nimport pytest\n\nclass id_142_Test:\n    \"\"\"\n    Test class of id_142.py.\n    It contains ten unit test cases for the :func:`scenario2.id_142.sum_squares`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_113.py",
        "original_code": "# id_113.py\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    \n    \n    \"\"\"\n\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\n\n",
        "test_prompt": "# id_113_Test.java\nfrom scenario2.id_113 import odd_count\n\nimport pytest\n\nclass id_113_Test:\n    \"\"\"\n    Test class of id_113.py.\n    It contains ten unit test cases for the :func:`scenario2.id_113.odd_count`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_127.py",
        "original_code": "# id_127.py\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n",
        "test_prompt": "# id_127_Test.java\nfrom scenario2.id_127 import intersection\n\nimport pytest\n\nclass id_127_Test:\n    \"\"\"\n    Test class of id_127.py.\n    It contains ten unit test cases for the :func:`scenario2.id_127.intersection`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_104.py",
        "original_code": "# id_104.py\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    \n    \"\"\"\n\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n",
        "test_prompt": "# id_104_Test.java\nfrom scenario2.id_104 import unique_digits\n\nimport pytest\n\nclass id_104_Test:\n    \"\"\"\n    Test class of id_104.py.\n    It contains ten unit test cases for the :func:`scenario2.id_104.unique_digits`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_68.py",
        "original_code": "# id_68.py\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    \n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test_prompt": "# id_68_Test.java\nfrom scenario2.id_68 import pluck\n\nimport pytest\n\nclass id_68_Test:\n    \"\"\"\n    Test class of id_68.py.\n    It contains ten unit test cases for the :func:`scenario2.id_68.pluck`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_155.py",
        "original_code": "# id_155.py\n\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n\n\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test_prompt": "# id_155_Test.java\nfrom scenario2.id_155 import even_odd_count\n\nimport pytest\n\nclass id_155_Test:\n    \"\"\"\n    Test class of id_155.py.\n    It contains ten unit test cases for the :func:`scenario2.id_155.even_odd_count`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_1.py",
        "original_code": "# id_1.py\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test_prompt": "# id_1_Test.java\nfrom scenario2.id_1 import separate_paren_groups\n\nimport pytest\n\nclass id_1_Test:\n    \"\"\"\n    Test class of id_1.py.\n    It contains ten unit test cases for the :func:`scenario2.id_1.separate_paren_groups`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_39.py",
        "original_code": "# id_39.py\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \n    \"\"\"\n\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test_prompt": "# id_39_Test.java\nfrom scenario2.id_39 import prime_fib\n\nimport pytest\n\nclass id_39_Test:\n    \"\"\"\n    Test class of id_39.py.\n    It contains ten unit test cases for the :func:`scenario2.id_39.prime_fib`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_161.py",
        "original_code": "# id_161.py\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\n    \"\"\"\n\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n",
        "test_prompt": "# id_161_Test.java\nfrom scenario2.id_161 import solve\n\nimport pytest\n\nclass id_161_Test:\n    \"\"\"\n    Test class of id_161.py.\n    It contains ten unit test cases for the :func:`scenario2.id_161.solve`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_130.py",
        "original_code": "# id_130.py\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \n    \"\"\"\n\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n",
        "test_prompt": "# id_130_Test.java\nfrom scenario2.id_130 import tri\n\nimport pytest\n\nclass id_130_Test:\n    \"\"\"\n    Test class of id_130.py.\n    It contains ten unit test cases for the :func:`scenario2.id_130.tri`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_120.py",
        "original_code": "# id_120.py\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    \n    \"\"\"\n\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n",
        "test_prompt": "# id_120_Test.java\nfrom scenario2.id_120 import maximum\n\nimport pytest\n\nclass id_120_Test:\n    \"\"\"\n    Test class of id_120.py.\n    It contains ten unit test cases for the :func:`scenario2.id_120.maximum`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_29.py",
        "original_code": "# id_29.py\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    \n    \"\"\"\n\n    return [x for x in strings if x.startswith(prefix)]\n",
        "test_prompt": "# id_29_Test.java\nfrom scenario2.id_29 import filter_by_prefix\n\nimport pytest\n\nclass id_29_Test:\n    \"\"\"\n    Test class of id_29.py.\n    It contains ten unit test cases for the :func:`scenario2.id_29.filter_by_prefix`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_145.py",
        "original_code": "# id_145.py\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test_prompt": "# id_145_Test.java\nfrom scenario2.id_145 import order_by_points\n\nimport pytest\n\nclass id_145_Test:\n    \"\"\"\n    Test class of id_145.py.\n    It contains ten unit test cases for the :func:`scenario2.id_145.order_by_points`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_78.py",
        "original_code": "# id_78.py\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \n    \"\"\"\n\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test_prompt": "# id_78_Test.java\nfrom scenario2.id_78 import hex_key\n\nimport pytest\n\nclass id_78_Test:\n    \"\"\"\n    Test class of id_78.py.\n    It contains ten unit test cases for the :func:`scenario2.id_78.hex_key`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_114.py",
        "original_code": "# id_114.py\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    \"\"\"\n\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test_prompt": "# id_114_Test.java\nfrom scenario2.id_114 import minSubArraySum\n\nimport pytest\n\nclass id_114_Test:\n    \"\"\"\n    Test class of id_114.py.\n    It contains ten unit test cases for the :func:`scenario2.id_114.minSubArraySum`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_58.py",
        "original_code": "# id_58.py\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    \n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test_prompt": "# id_58_Test.java\nfrom scenario2.id_58 import common\n\nimport pytest\n\nclass id_58_Test:\n    \"\"\"\n    Test class of id_58.py.\n    It contains ten unit test cases for the :func:`scenario2.id_58.common`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_134.py",
        "original_code": "# id_134.py\n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    \n    \n    '''\n\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n",
        "test_prompt": "# id_134_Test.java\nfrom scenario2.id_134 import check_if_last_char_is_a_letter\n\nimport pytest\n\nclass id_134_Test:\n    \"\"\"\n    Test class of id_134.py.\n    It contains ten unit test cases for the :func:`scenario2.id_134.check_if_last_char_is_a_letter`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_151.py",
        "original_code": "# id_151.py\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    If the input list is empty, return 0.\n    '''\n\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test_prompt": "# id_151_Test.java\nfrom scenario2.id_151 import double_the_difference\n\nimport pytest\n\nclass id_151_Test:\n    \"\"\"\n    Test class of id_151.py.\n    It contains ten unit test cases for the :func:`scenario2.id_151.double_the_difference`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_5.py",
        "original_code": "# id_5.py\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n   \n    \n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test_prompt": "# id_5_Test.java\nfrom scenario2.id_5 import intersperse\n\nimport pytest\n\nclass id_5_Test:\n    \"\"\"\n    Test class of id_5.py.\n    It contains ten unit test cases for the :func:`scenario2.id_5.intersperse`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_100.py",
        "original_code": "# id_100.py\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    \n    \"\"\"\n\n    return [n + 2*i for i in range(n)]\n",
        "test_prompt": "# id_100_Test.java\nfrom scenario2.id_100 import make_a_pile\n\nimport pytest\n\nclass id_100_Test:\n    \"\"\"\n    Test class of id_100.py.\n    It contains ten unit test cases for the :func:`scenario2.id_100.make_a_pile`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_110.py",
        "original_code": "# id_110.py\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \n    \n    \"\"\"\n\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test_prompt": "# id_110_Test.java\nfrom scenario2.id_110 import exchange\n\nimport pytest\n\nclass id_110_Test:\n    \"\"\"\n    Test class of id_110.py.\n    It contains ten unit test cases for the :func:`scenario2.id_110.exchange`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_141.py",
        "original_code": "# id_141.py\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n    \n    \"\"\"\n\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\n",
        "test_prompt": "# id_141_Test.java\nfrom scenario2.id_141 import file_name_check\n\nimport pytest\n\nclass id_141_Test:\n    \"\"\"\n    Test class of id_141.py.\n    It contains ten unit test cases for the :func:`scenario2.id_141.file_name_check`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_19.py",
        "original_code": "# id_19.py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \n    \n    \"\"\"\n\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test_prompt": "# id_19_Test.java\nfrom scenario2.id_19 import sort_numbers\n\nimport pytest\n\nclass id_19_Test:\n    \"\"\"\n    Test class of id_19.py.\n    It contains ten unit test cases for the :func:`scenario2.id_19.sort_numbers`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_124.py",
        "original_code": "# id_124.py\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    \n    \"\"\"\n\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n",
        "test_prompt": "# id_124_Test.java\nfrom scenario2.id_124 import valid_date\n\nimport pytest\n\nclass id_124_Test:\n    \"\"\"\n    Test class of id_124.py.\n    It contains ten unit test cases for the :func:`scenario2.id_124.valid_date`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_48.py",
        "original_code": "# id_48.py\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \n    \n    \"\"\"\n\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n",
        "test_prompt": "# id_48_Test.java\nfrom scenario2.id_48 import is_palindrome\n\nimport pytest\n\nclass id_48_Test:\n    \"\"\"\n    Test class of id_48.py.\n    It contains ten unit test cases for the :func:`scenario2.id_48.is_palindrome`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_59.py",
        "original_code": "# id_59.py\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    \n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test_prompt": "# id_59_Test.java\nfrom scenario2.id_59 import largest_prime_factor\n\nimport pytest\n\nclass id_59_Test:\n    \"\"\"\n    Test class of id_59.py.\n    It contains ten unit test cases for the :func:`scenario2.id_59.largest_prime_factor`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_135.py",
        "original_code": "# id_135.py\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    \n    \n    \"\"\"\n\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n",
        "test_prompt": "# id_135_Test.java\nfrom scenario2.id_135 import can_arrange\n\nimport pytest\n\nclass id_135_Test:\n    \"\"\"\n    Test class of id_135.py.\n    It contains ten unit test cases for the :func:`scenario2.id_135.can_arrange`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_150.py",
        "original_code": "# id_150.py\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n\n\n    \n    \"\"\"\n\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n",
        "test_prompt": "# id_150_Test.java\nfrom scenario2.id_150 import x_or_y\n\nimport pytest\n\nclass id_150_Test:\n    \"\"\"\n    Test class of id_150.py.\n    It contains ten unit test cases for the :func:`scenario2.id_150.x_or_y`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_4.py",
        "original_code": "# id_4.py\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test_prompt": "# id_4_Test.java\nfrom scenario2.id_4 import mean_absolute_deviation\n\nimport pytest\n\nclass id_4_Test:\n    \"\"\"\n    Test class of id_4.py.\n    It contains ten unit test cases for the :func:`scenario2.id_4.mean_absolute_deviation`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_101.py",
        "original_code": "# id_101.py\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    \"\"\"\n\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n",
        "test_prompt": "# id_101_Test.java\nfrom scenario2.id_101 import words_string\n\nimport pytest\n\nclass id_101_Test:\n    \"\"\"\n    Test class of id_101.py.\n    It contains ten unit test cases for the :func:`scenario2.id_101.words_string`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_111.py",
        "original_code": "# id_111.py\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    \n\n    \"\"\"\n\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\n",
        "test_prompt": "# id_111_Test.java\nfrom scenario2.id_111 import histogram\n\nimport pytest\n\nclass id_111_Test:\n    \"\"\"\n    Test class of id_111.py.\n    It contains ten unit test cases for the :func:`scenario2.id_111.histogram`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_140.py",
        "original_code": "# id_140.py\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n\n\n    \"\"\"\n\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test_prompt": "# id_140_Test.java\nfrom scenario2.id_140 import fix_spaces\n\nimport pytest\n\nclass id_140_Test:\n    \"\"\"\n    Test class of id_140.py.\n    It contains ten unit test cases for the :func:`scenario2.id_140.fix_spaces`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_18.py",
        "original_code": "# id_18.py\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \n    \n    \"\"\"\n\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test_prompt": "# id_18_Test.java\nfrom scenario2.id_18 import how_many_times\n\nimport pytest\n\nclass id_18_Test:\n    \"\"\"\n    Test class of id_18.py.\n    It contains ten unit test cases for the :func:`scenario2.id_18.how_many_times`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_125.py",
        "original_code": "# id_125.py\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n",
        "test_prompt": "# id_125_Test.java\nfrom scenario2.id_125 import split_words\n\nimport pytest\n\nclass id_125_Test:\n    \"\"\"\n    Test class of id_125.py.\n    It contains ten unit test cases for the :func:`scenario2.id_125.split_words`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_49.py",
        "original_code": "# id_49.py\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    \n    \"\"\"\n\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\n",
        "test_prompt": "# id_49_Test.java\nfrom scenario2.id_49 import modp\n\nimport pytest\n\nclass id_49_Test:\n    \"\"\"\n    Test class of id_49.py.\n    It contains ten unit test cases for the :func:`scenario2.id_49.modp`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_105.py",
        "original_code": "# id_105.py\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    \n    \"\"\"\n\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\n",
        "test_prompt": "# id_105_Test.java\nfrom scenario2.id_105 import by_length\n\nimport pytest\n\nclass id_105_Test:\n    \"\"\"\n    Test class of id_105.py.\n    It contains ten unit test cases for the :func:`scenario2.id_105.by_length`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_69.py",
        "original_code": "# id_69.py\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \n    '''\n\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test_prompt": "# id_69_Test.java\nfrom scenario2.id_69 import search\n\nimport pytest\n\nclass id_69_Test:\n    \"\"\"\n    Test class of id_69.py.\n    It contains ten unit test cases for the :func:`scenario2.id_69.search`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_154.py",
        "original_code": "# id_154.py\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \n    \n    \"\"\"\n\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test_prompt": "# id_154_Test.java\nfrom scenario2.id_154 import cycpattern_check\n\nimport pytest\n\nclass id_154_Test:\n    \"\"\"\n    Test class of id_154.py.\n    It contains ten unit test cases for the :func:`scenario2.id_154.cycpattern_check`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_38.py",
        "original_code": "# id_38.py\n\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n    return encode_cyclic(encode_cyclic(s))\n\n",
        "test_prompt": "# id_38_Test.java\nfrom scenario2.id_38 import decode_cyclic\n\nimport pytest\n\nclass id_38_Test:\n    \"\"\"\n    Test class of id_38.py.\n    It contains ten unit test cases for the :func:`scenario2.id_38.decode_cyclic`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_0.py",
        "original_code": "# id_0.py\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "test_prompt": "# id_0_Test.java\nfrom scenario2.id_0 import has_close_elements\n\nimport pytest\n\nclass id_0_Test:\n    \"\"\"\n    Test class of id_0.py.\n    It contains ten unit test cases for the :func:`scenario2.id_0.has_close_elements`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_160.py",
        "original_code": "# id_160.py\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n\n    \"\"\"\n\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test_prompt": "# id_160_Test.java\nfrom scenario2.id_160 import do_algebra\n\nimport pytest\n\nclass id_160_Test:\n    \"\"\"\n    Test class of id_160.py.\n    It contains ten unit test cases for the :func:`scenario2.id_160.do_algebra`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_131.py",
        "original_code": "# id_131.py\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    \"\"\"\n\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test_prompt": "# id_131_Test.java\nfrom scenario2.id_131 import digits\n\nimport pytest\n\nclass id_131_Test:\n    \"\"\"\n    Test class of id_131.py.\n    It contains ten unit test cases for the :func:`scenario2.id_131.digits`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_121.py",
        "original_code": "# id_121.py\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    \"\"\"\n\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\n",
        "test_prompt": "# id_121_Test.java\nfrom scenario2.id_121 import solution\n\nimport pytest\n\nclass id_121_Test:\n    \"\"\"\n    Test class of id_121.py.\n    It contains ten unit test cases for the :func:`scenario2.id_121.solution`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_28.py",
        "original_code": "# id_28.py\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \n    \n    \"\"\"\n\n    return ''.join(strings)\n",
        "test_prompt": "# id_28_Test.java\nfrom scenario2.id_28 import concatenate\n\nimport pytest\n\nclass id_28_Test:\n    \"\"\"\n    Test class of id_28.py.\n    It contains ten unit test cases for the :func:`scenario2.id_28.concatenate`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_144.py",
        "original_code": "# id_144.py\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\n    \"\"\"\n\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test_prompt": "# id_144_Test.java\nfrom scenario2.id_144 import simplify\n\nimport pytest\n\nclass id_144_Test:\n    \"\"\"\n    Test class of id_144.py.\n    It contains ten unit test cases for the :func:`scenario2.id_144.simplify`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_79.py",
        "original_code": "# id_79.py\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    \n    \"\"\"\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test_prompt": "# id_79_Test.java\nfrom scenario2.id_79 import decimal_to_binary\n\nimport pytest\n\nclass id_79_Test:\n    \"\"\"\n    Test class of id_79.py.\n    It contains ten unit test cases for the :func:`scenario2.id_79.decimal_to_binary`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_115.py",
        "original_code": "# id_115.py\n\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    \n    \"\"\"\n\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n",
        "test_prompt": "# id_115_Test.java\nfrom scenario2.id_115 import max_fill\n\nimport pytest\n\nclass id_115_Test:\n    \"\"\"\n    Test class of id_115.py.\n    It contains ten unit test cases for the :func:`scenario2.id_115.max_fill`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_91.py",
        "original_code": "# id_91.py\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    \n    \"\"\"\n\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test_prompt": "# id_91_Test.java\nfrom scenario2.id_91 import is_bored\n\nimport pytest\n\nclass id_91_Test:\n    \"\"\"\n    Test class of id_91.py.\n    It contains ten unit test cases for the :func:`scenario2.id_91.is_bored`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_62.py",
        "original_code": "# id_62.py\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \n    \n    \"\"\"\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_prompt": "# id_62_Test.java\nfrom scenario2.id_62 import derivative\n\nimport pytest\n\nclass id_62_Test:\n    \"\"\"\n    Test class of id_62.py.\n    It contains ten unit test cases for the :func:`scenario2.id_62.derivative`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_33.py",
        "original_code": "# id_33.py\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n    \"\"\"\n\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test_prompt": "# id_33_Test.java\nfrom scenario2.id_33 import sort_third\n\nimport pytest\n\nclass id_33_Test:\n    \"\"\"\n    Test class of id_33.py.\n    It contains ten unit test cases for the :func:`scenario2.id_33.sort_third`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_56.py",
        "original_code": "# id_56.py\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    \n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test_prompt": "# id_56_Test.java\nfrom scenario2.id_56 import correct_bracketing\n\nimport pytest\n\nclass id_56_Test:\n    \"\"\"\n    Test class of id_56.py.\n    It contains ten unit test cases for the :func:`scenario2.id_56.correct_bracketing`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_46.py",
        "original_code": "# id_46.py\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \n    \n    \"\"\"\n\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test_prompt": "# id_46_Test.java\nfrom scenario2.id_46 import fib4\n\nimport pytest\n\nclass id_46_Test:\n    \"\"\"\n    Test class of id_46.py.\n    It contains ten unit test cases for the :func:`scenario2.id_46.fib4`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_17.py",
        "original_code": "# id_17.py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    \n    \n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test_prompt": "# id_17_Test.java\nfrom scenario2.id_17 import parse_music\n\nimport pytest\n\nclass id_17_Test:\n    \"\"\"\n    Test class of id_17.py.\n    It contains ten unit test cases for the :func:`scenario2.id_17.parse_music`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_23.py",
        "original_code": "# id_23.py\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \n    \n    \"\"\"\n\n    return len(string)\n",
        "test_prompt": "# id_23_Test.java\nfrom scenario2.id_23 import strlen\n\nimport pytest\n\nclass id_23_Test:\n    \"\"\"\n    Test class of id_23.py.\n    It contains ten unit test cases for the :func:`scenario2.id_23.strlen`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_72.py",
        "original_code": "# id_72.py\n\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    \n    '''\n\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test_prompt": "# id_72_Test.java\nfrom scenario2.id_72 import will_it_fly\n\nimport pytest\n\nclass id_72_Test:\n    \"\"\"\n    Test class of id_72.py.\n    It contains ten unit test cases for the :func:`scenario2.id_72.will_it_fly`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_81.py",
        "original_code": "# id_81.py\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    \n    \"\"\"\n\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test_prompt": "# id_81_Test.java\nfrom scenario2.id_81 import numerical_letter_grade\n\nimport pytest\n\nclass id_81_Test:\n    \"\"\"\n    Test class of id_81.py.\n    It contains ten unit test cases for the :func:`scenario2.id_81.numerical_letter_grade`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_52.py",
        "original_code": "# id_52.py\n\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    \n    \"\"\"\n\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n",
        "test_prompt": "# id_52_Test.java\nfrom scenario2.id_52 import below_threshold\n\nimport pytest\n\nclass id_52_Test:\n    \"\"\"\n    Test class of id_52.py.\n    It contains ten unit test cases for the :func:`scenario2.id_52.below_threshold`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_95.py",
        "original_code": "# id_95.py\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \n    \"\"\"\n\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test_prompt": "# id_95_Test.java\nfrom scenario2.id_95 import check_dict_case\n\nimport pytest\n\nclass id_95_Test:\n    \"\"\"\n    Test class of id_95.py.\n    It contains ten unit test cases for the :func:`scenario2.id_95.check_dict_case`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_37.py",
        "original_code": "# id_37.py\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \n    \"\"\"\n\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n",
        "test_prompt": "# id_37_Test.java\nfrom scenario2.id_37 import sort_even\n\nimport pytest\n\nclass id_37_Test:\n    \"\"\"\n    Test class of id_37.py.\n    It contains ten unit test cases for the :func:`scenario2.id_37.sort_even`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_66.py",
        "original_code": "# id_66.py\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    \n    \"\"\"\n\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test_prompt": "# id_66_Test.java\nfrom scenario2.id_66 import digitSum\n\nimport pytest\n\nclass id_66_Test:\n    \"\"\"\n    Test class of id_66.py.\n    It contains ten unit test cases for the :func:`scenario2.id_66.digitSum`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_76.py",
        "original_code": "# id_76.py\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test_prompt": "# id_76_Test.java\nfrom scenario2.id_76 import is_simple_power\n\nimport pytest\n\nclass id_76_Test:\n    \"\"\"\n    Test class of id_76.py.\n    It contains ten unit test cases for the :func:`scenario2.id_76.is_simple_power`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_27.py",
        "original_code": "# id_27.py\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    \n    \"\"\"\n\n    return string.swapcase()\n",
        "test_prompt": "# id_27_Test.java\nfrom scenario2.id_27 import flip_case\n\nimport pytest\n\nclass id_27_Test:\n    \"\"\"\n    Test class of id_27.py.\n    It contains ten unit test cases for the :func:`scenario2.id_27.flip_case`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_85.py",
        "original_code": "# id_85.py\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    \"\"\"\n\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test_prompt": "# id_85_Test.java\nfrom scenario2.id_85 import add\n\nimport pytest\n\nclass id_85_Test:\n    \"\"\"\n    Test class of id_85.py.\n    It contains ten unit test cases for the :func:`scenario2.id_85.add`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_13.py",
        "original_code": "# id_13.py\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test_prompt": "# id_13_Test.java\nfrom scenario2.id_13 import greatest_common_divisor\n\nimport pytest\n\nclass id_13_Test:\n    \"\"\"\n    Test class of id_13.py.\n    It contains ten unit test cases for the :func:`scenario2.id_13.greatest_common_divisor`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_42.py",
        "original_code": "# id_42.py\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \n    \"\"\"\n\n    return [(e + 1) for e in l]\n",
        "test_prompt": "# id_42_Test.java\nfrom scenario2.id_42 import incr_list\n\nimport pytest\n\nclass id_42_Test:\n    \"\"\"\n    Test class of id_42.py.\n    It contains ten unit test cases for the :func:`scenario2.id_42.incr_list`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_53.py",
        "original_code": "# id_53.py\n\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    \"\"\"\n\n    return x + y\n",
        "test_prompt": "# id_53_Test.java\nfrom scenario2.id_53 import add\n\nimport pytest\n\nclass id_53_Test:\n    \"\"\"\n    Test class of id_53.py.\n    It contains ten unit test cases for the :func:`scenario2.id_53.add`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_94.py",
        "original_code": "# id_94.py\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test_prompt": "# id_94_Test.java\nfrom scenario2.id_94 import skjkasdkd\n\nimport pytest\n\nclass id_94_Test:\n    \"\"\"\n    Test class of id_94.py.\n    It contains ten unit test cases for the :func:`scenario2.id_94.skjkasdkd`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_36.py",
        "original_code": "# id_36.py\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    \"\"\"\n\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n",
        "test_prompt": "# id_36_Test.java\nfrom scenario2.id_36 import fizz_buzz\n\nimport pytest\n\nclass id_36_Test:\n    \"\"\"\n    Test class of id_36.py.\n    It contains ten unit test cases for the :func:`scenario2.id_36.fizz_buzz`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_67.py",
        "original_code": "# id_67.py\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \n    \"\"\"\n\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test_prompt": "# id_67_Test.java\nfrom scenario2.id_67 import fruit_distribution\n\nimport pytest\n\nclass id_67_Test:\n    \"\"\"\n    Test class of id_67.py.\n    It contains ten unit test cases for the :func:`scenario2.id_67.fruit_distribution`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_77.py",
        "original_code": "# id_77.py\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \n    '''\n\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test_prompt": "# id_77_Test.java\nfrom scenario2.id_77 import iscube\n\nimport pytest\n\nclass id_77_Test:\n    \"\"\"\n    Test class of id_77.py.\n    It contains ten unit test cases for the :func:`scenario2.id_77.iscube`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_26.py",
        "original_code": "# id_26.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n   \n    \n    \n    \"\"\"\n\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test_prompt": "# id_26_Test.java\nfrom scenario2.id_26 import remove_duplicates\n\nimport pytest\n\nclass id_26_Test:\n    \"\"\"\n    Test class of id_26.py.\n    It contains ten unit test cases for the :func:`scenario2.id_26.remove_duplicates`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_84.py",
        "original_code": "# id_84.py\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    \n    \n    \"\"\"\n\n    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test_prompt": "# id_84_Test.java\nfrom scenario2.id_84 import solve\n\nimport pytest\n\nclass id_84_Test:\n    \"\"\"\n    Test class of id_84.py.\n    It contains ten unit test cases for the :func:`scenario2.id_84.solve`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_12.py",
        "original_code": "# id_12.py\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    \n    \"\"\"\n\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test_prompt": "# id_12_Test.java\nfrom scenario2.id_12 import longest\n\nimport pytest\n\nclass id_12_Test:\n    \"\"\"\n    Test class of id_12.py.\n    It contains ten unit test cases for the :func:`scenario2.id_12.longest`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_43.py",
        "original_code": "# id_43.py\n\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    \n    \"\"\"\n\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n",
        "test_prompt": "# id_43_Test.java\nfrom scenario2.id_43 import pairs_sum_to_zero\n\nimport pytest\n\nclass id_43_Test:\n    \"\"\"\n    Test class of id_43.py.\n    It contains ten unit test cases for the :func:`scenario2.id_43.pairs_sum_to_zero`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_90.py",
        "original_code": "# id_90.py\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    \n    \"\"\"\n\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test_prompt": "# id_90_Test.java\nfrom scenario2.id_90 import next_smallest\n\nimport pytest\n\nclass id_90_Test:\n    \"\"\"\n    Test class of id_90.py.\n    It contains ten unit test cases for the :func:`scenario2.id_90.next_smallest`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_63.py",
        "original_code": "# id_63.py\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \n    \"\"\"\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test_prompt": "# id_63_Test.java\nfrom scenario2.id_63 import fibfib\n\nimport pytest\n\nclass id_63_Test:\n    \"\"\"\n    Test class of id_63.py.\n    It contains ten unit test cases for the :func:`scenario2.id_63.fibfib`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_32.py",
        "original_code": "# id_32.py\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \n    \"\"\"\n\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test_prompt": "# id_32_Test.java\nfrom scenario2.id_32 import find_zero\n\nimport pytest\n\nclass id_32_Test:\n    \"\"\"\n    Test class of id_32.py.\n    It contains ten unit test cases for the :func:`scenario2.id_32.find_zero`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_57.py",
        "original_code": "# id_57.py\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \n    \n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n",
        "test_prompt": "# id_57_Test.java\nfrom scenario2.id_57 import monotonic\n\nimport pytest\n\nclass id_57_Test:\n    \"\"\"\n    Test class of id_57.py.\n    It contains ten unit test cases for the :func:`scenario2.id_57.monotonic`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_47.py",
        "original_code": "# id_47.py\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \n    \n    \"\"\"\n\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n",
        "test_prompt": "# id_47_Test.java\nfrom scenario2.id_47 import median\n\nimport pytest\n\nclass id_47_Test:\n    \"\"\"\n    Test class of id_47.py.\n    It contains ten unit test cases for the :func:`scenario2.id_47.median`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_16.py",
        "original_code": "# id_16.py\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \n    \n    \"\"\"\n\n    return len(set(string.lower()))\n",
        "test_prompt": "# id_16_Test.java\nfrom scenario2.id_16 import count_distinct_characters\n\nimport pytest\n\nclass id_16_Test:\n    \"\"\"\n    Test class of id_16.py.\n    It contains ten unit test cases for the :func:`scenario2.id_16.count_distinct_characters`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_22.py",
        "original_code": "# id_22.py\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \n    \n    \"\"\"\n\n    return [x for x in values if isinstance(x, int)]\n",
        "test_prompt": "# id_22_Test.java\nfrom scenario2.id_22 import filter_integers\n\nimport pytest\n\nclass id_22_Test:\n    \"\"\"\n    Test class of id_22.py.\n    It contains ten unit test cases for the :func:`scenario2.id_22.filter_integers`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_73.py",
        "original_code": "# id_73.py\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    \n    \"\"\"\n\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test_prompt": "# id_73_Test.java\nfrom scenario2.id_73 import smallest_change\n\nimport pytest\n\nclass id_73_Test:\n    \"\"\"\n    Test class of id_73.py.\n    It contains ten unit test cases for the :func:`scenario2.id_73.smallest_change`.\n    \"\"\"\n"
    },
    {
        "id": "../HumanEvalPython/scenario2/id_80.py",
        "original_code": "# id_80.py\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \n    \"\"\"\n\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test_prompt": "# id_80_Test.java\nfrom scenario2.id_80 import is_happy\n\nimport pytest\n\nclass id_80_Test:\n    \"\"\"\n    Test class of id_80.py.\n    It contains ten unit test cases for the :func:`scenario2.id_80.is_happy`.\n    \"\"\"\n"
    }
]