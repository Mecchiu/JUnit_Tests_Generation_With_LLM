[
  {
    "numberTests": "ten",
    "original_code": "// BelowThreshold.java\npackage scenario2;\n\nimport java.util.List;\n\nclass BelowThreshold {\n\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public static Boolean belowThreshold(List\u003cInteger\u003e l, int t) {\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            if (l.get(i) \u003e\u003d t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "BelowThreshold",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_52.java",
    "test_prompt": "// BelowThresholdTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowThreshold}.\n* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.\n*/\nclass BelowThresholdTest {",
    "method_signature": "belowThreshold(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Add.java\npackage scenario2;\n\nclass Add {\n\n    /**\n     * Add two numbers x and y\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Add",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_53.java",
    "test_prompt": "// AddTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add}.\n* It contains ten unit test cases for the {@link Add#add(int, int)} method.\n*/\nclass AddTest {",
    "method_signature": "add(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TriangleArea.java\npackage scenario2;\n\nclass TriangleArea {\n\n    /**\n     * Given length of a side and high return area for a triangle.\n     */\n    public static Double triangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
    "package": "scenario2",
    "classname": "TriangleArea",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_45.java",
    "test_prompt": "// TriangleAreaTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea}.\n* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.\n*/\nclass TriangleAreaTest {",
    "method_signature": "triangleArea(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Longest.java\npackage scenario2;\n\nimport java.util.List;\n\nclass Longest {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     */\n    public static String longest(List\u003cObject\u003e strings) {\n        if (strings.size() \u003d\u003d 0) {\n            return null;\n        }\n        String longest \u003d strings.get(0).toString();\n        for (int i \u003d 1; i \u003c strings.size(); i++) {\n            if (strings.get(i).toString().length() \u003e longest.length()) {\n                longest \u003d strings.get(i).toString();\n            }\n        }\n        return longest;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Longest",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_12.java",
    "test_prompt": "// LongestTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Longest}.\n* It contains ten unit test cases for the {@link Longest#longest(List)} method.\n*/\nclass LongestTest {",
    "method_signature": "longest(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ProdSigns.java\npackage scenario2;\n\nimport java.util.List;\n\nclass ProdSigns {\n\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     */\n    public static Integer prodSigns(List\u003cObject\u003e arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        int prod \u003d 1;\n        int sum \u003d 0;\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                int num \u003d (Integer) value;\n                if (num \u003e 0) {\n                    prod *\u003d 1;\n                } else if (num \u003c 0) {\n                    prod *\u003d -1;\n                } else {\n                    prod *\u003d 0;\n                }\n                sum +\u003d Math.abs(num);\n            }\n        }\n        return sum * prod;\n    }\n}\n",
    "package": "scenario2",
    "classname": "ProdSigns",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_128.java",
    "test_prompt": "// ProdSignsTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProdSigns}.\n* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.\n*/\nclass ProdSignsTest {",
    "method_signature": "prodSigns(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Search.java\npackage scenario2;\n\nimport java.util.List;\n\nclass Search {\n\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     */\n    public static int search(List\u003cInteger\u003e lst) {\n        int max \u003d -1;\n        int[] freq \u003d new int[11];\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i \u003d 1; i \u003c 11; i++) {\n            if (freq[i] \u003e\u003d i) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Search",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_69.java",
    "test_prompt": "// SearchTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Search}.\n* It contains ten unit test cases for the {@link Search#search(List)} method.\n*/\nclass SearchTest {",
    "method_signature": "search(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AntiShuffle.java\npackage scenario2;\n\nimport java.util.Arrays;\n\nclass AntiShuffle {\n\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     */\n    public static String antiShuffle(String s) {\n        String[] words \u003d s.split(\" \");\n        for (int i \u003d 0; i \u003c words.length; i++) {\n            words[i] \u003d sortString(words[i]);\n        }\n        return String.join(\" \", words);\n    }\n\n    private static String sortString(String s) {\n        char[] chars \u003d s.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n",
    "package": "scenario2",
    "classname": "AntiShuffle",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_86.java",
    "test_prompt": "// AntiShuffleTest.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AntiShuffle}.\n* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.\n*/\nclass AntiShuffleTest {",
    "method_signature": "antiShuffle(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StrongestExtension.java\npackage scenario2;\n\nimport java.util.List;\n\nclass StrongestExtension {\n\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension\u0027s name, and let SM be the number of lowercase letters\n     * in the extension\u0027s name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     */\n    public static String strongestExtension(String className, List\u003cString\u003e extensions) {\n        int max \u003d Integer.MIN_VALUE;\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c extensions.size(); i++) {\n            int cap \u003d 0;\n            int sm \u003d 0;\n            for (int j \u003d 0; j \u003c extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n                    cap++;\n                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                    sm++;\n                }\n            }\n            if (cap - sm \u003e max) {\n                max \u003d cap - sm;\n                result \u003d className + \".\" + extensions.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "StrongestExtension",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_153.java",
    "test_prompt": "// StrongestExtensionTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrongestExtension}.\n* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.\n*/\nclass StrongestExtensionTest {",
    "method_signature": "strongestExtension(String, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// UniqueDigits.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass UniqueDigits {\n\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn\u0027t any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     */\n    public static List\u003cObject\u003e uniqueDigits(List\u003cInteger\u003e x) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int value : x) {\n            boolean hasEven \u003d false;\n            int oldValue \u003d value;\n            while (value \u003e 0) {\n                if (value % 2 \u003d\u003d 0) {\n                    hasEven \u003d true;\n                    break;\n                }\n                value /\u003d 10;\n            }\n            if (!hasEven) {\n                result.add(oldValue);\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object a, Object b) {\n                return (Integer) a - (Integer) b;\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "UniqueDigits",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_104.java",
    "test_prompt": "// UniqueDigitsTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UniqueDigits}.\n* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.\n*/\nclass UniqueDigitsTest {",
    "method_signature": "uniqueDigits(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Concatenate.java\npackage scenario2;\n\nimport java.util.List;\n\nclass Concatenate {\n\n    /**\n     * Concatenate list of strings into a single string\n     */\n    public static String concatenate(List\u003cObject\u003e strings) {\n        String result \u003d \"\";\n        for (Object string : strings) {\n            result +\u003d string.toString();\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Concatenate",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_28.java",
    "test_prompt": "// ConcatenateTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Concatenate}.\n* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.\n*/\nclass ConcatenateTest {",
    "method_signature": "concatenate(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ReverseDelete.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass ReverseDelete {\n\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     */\n    public static List\u003cObject\u003e reverseDelete(String s, String c) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) \u003d\u003d -1) {\n                result +\u003d s.charAt(i);\n            }\n        }\n        boolean isPalindrome \u003d true;\n        for (int i \u003d 0; i \u003c result.length() / 2; i++) {\n            if (result.charAt(i) !\u003d result.charAt(result.length() - i - 1)) {\n                isPalindrome \u003d false;\n                break;\n            }\n        }\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n",
    "package": "scenario2",
    "classname": "ReverseDelete",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_112.java",
    "test_prompt": "// ReverseDeleteTest.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReverseDelete}.\n* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.\n*/\nclass ReverseDeleteTest {",
    "method_signature": "reverseDelete(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// NextSmallest.java\npackage scenario2;\n\nimport java.util.List;\n\nclass NextSmallest {\n\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     */\n    public static Integer nextSmallest(List\u003cObject\u003e lst) {\n        if (lst.size() \u003c\u003d 1) {\n            return null;\n        }\n        Integer smallest \u003d (Integer) lst.get(0);\n        Integer nextSmallest \u003d null;\n        for (int i \u003d 1; i \u003c lst.size(); i++) {\n            Integer current \u003d (Integer) lst.get(i);\n            if (current \u003c smallest) {\n                nextSmallest \u003d smallest;\n                smallest \u003d current;\n            } else if (nextSmallest \u003d\u003d null || current \u003c nextSmallest) {\n                if (current !\u003d smallest)\n                    nextSmallest \u003d current;\n            }\n        }\n        return nextSmallest;\n    }\n}\n",
    "package": "scenario2",
    "classname": "NextSmallest",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_90.java",
    "test_prompt": "// NextSmallestTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NextSmallest}.\n* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.\n*/\nclass NextSmallestTest {",
    "method_signature": "nextSmallest(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// OrderByPoints.java\npackage scenario2;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass OrderByPoints {\n\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     */\n    public static List\u003cObject\u003e orderByPoints(List\u003cObject\u003e nums) {\n        Collections.sort(nums, new Comparator\u003cObject\u003e() {\n\n            int digitsum(int n) {\n                boolean neg \u003d false;\n                if (n \u003c 0) {\n                    neg \u003d true;\n                    n \u003d -n;\n                }\n                int sum \u003d 0;\n                while (n \u003e 0) {\n                    if (n / 10 \u003d\u003d 0 \u0026\u0026 neg)\n                        sum -\u003d n % 10;\n                    else\n                        sum +\u003d n % 10;\n                    n \u003d n / 10;\n                }\n                return sum;\n            }\n\n            public int compare(Object o1, Object o2) {\n                return digitsum((int) o1) - digitsum((int) o2);\n            }\n        });\n        return nums;\n    }\n}\n",
    "package": "scenario2",
    "classname": "OrderByPoints",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_145.java",
    "test_prompt": "// OrderByPointsTest.java\npackage scenario2;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OrderByPoints}.\n* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.\n*/\nclass OrderByPointsTest {",
    "method_signature": "orderByPoints(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsNested.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass IsNested {\n\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     */\n    public static Boolean isNested(String string) {\n        ArrayList\u003cInteger\u003e opening_bracket_index \u003d new ArrayList\u003cInteger\u003e();\n        ArrayList\u003cInteger\u003e closing_bracket_index \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            if (string.charAt(i) \u003d\u003d \u0027[\u0027) {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int cnt \u003d 0;\n        int i \u003d 0;\n        int l \u003d closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i \u003c l \u0026\u0026 idx \u003c closing_bracket_index.get(i)) {\n                cnt +\u003d 1;\n                i +\u003d 1;\n            }\n        }\n        return cnt \u003e\u003d 2;\n    }\n}\n",
    "package": "scenario2",
    "classname": "IsNested",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_132.java",
    "test_prompt": "// IsNestedTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsNested}.\n* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.\n*/\nclass IsNestedTest {",
    "method_signature": "isNested(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Modp.java\npackage scenario2;\n\nclass Modp {\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public static int modp(int n, int p) {\n        int result \u003d 1;\n        for (int i \u003d 0; i \u003c n; i++) {\n            result \u003d (result * 2) % p;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Modp",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_49.java",
    "test_prompt": "// ModpTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Modp}.\n* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.\n*/\nclass ModpTest {",
    "method_signature": "modp(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ValidDate.java\npackage scenario2;\n\nclass ValidDate {\n\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     */\n    public static Boolean validDate(String date) {\n        if (date.length() !\u003d 10) {\n            return false;\n        }\n        String[] dateArr \u003d date.split(\"-\");\n        if (dateArr.length !\u003d 3) {\n            return false;\n        }\n        int month \u003d Integer.parseInt(dateArr[0]);\n        int day \u003d Integer.parseInt(dateArr[1]);\n        int year \u003d Integer.parseInt(dateArr[2]);\n        if (month \u003c 1 || month \u003e 12) {\n            return false;\n        }\n        if (month \u003d\u003d 2) {\n            if (day \u003c 1 || day \u003e 29) {\n                return false;\n            }\n        } else if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {\n            if (day \u003c 1 || day \u003e 30) {\n                return false;\n            }\n        } else {\n            if (day \u003c 1 || day \u003e 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "ValidDate",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_124.java",
    "test_prompt": "// ValidDateTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidDate}.\n* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.\n*/\nclass ValidDateTest {",
    "method_signature": "validDate(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SeparateParenGroups.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SeparateParenGroups {\n\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string\n     */\n    public static List\u003cString\u003e separateParenGroups(String parenString) {\n        List\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();\n        int count \u003d 0;\n        StringBuilder curString \u003d new StringBuilder();\n        for (int i \u003d 0; i \u003c parenString.length(); i++) {\n            if (parenString.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n                curString.append(\u0027(\u0027);\n            } else if (parenString.charAt(i) \u003d\u003d \u0027)\u0027) {\n                count--;\n                curString.append(\u0027)\u0027);\n                if (count \u003d\u003d 0) {\n                    result.add(curString.toString());\n                    curString \u003d new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SeparateParenGroups",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_1.java",
    "test_prompt": "// SeparateParenGroupsTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SeparateParenGroups}.\n* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.\n*/\nclass SeparateParenGroupsTest {",
    "method_signature": "separateParenGroups(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CircularShift.java\npackage scenario2;\n\nclass CircularShift {\n\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift \u003e number of digits, return digits reversed.\n     */\n    public static String circularShift(int x, int shift) {\n        String result \u003d \"\";\n        String xString \u003d Integer.toString(x);\n        int xLength \u003d xString.length();\n        if (shift \u003e xLength) {\n            for (int i \u003d xLength - 1; i \u003e\u003d 0; i--) {\n                result +\u003d xString.charAt(i);\n            }\n        } else {\n            for (int i \u003d xLength - shift; i \u003c xLength; i++) {\n                result +\u003d xString.charAt(i);\n            }\n            for (int i \u003d 0; i \u003c xLength - shift; i++) {\n                result +\u003d xString.charAt(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CircularShift",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_65.java",
    "test_prompt": "// CircularShiftTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CircularShift}.\n* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.\n*/\nclass CircularShiftTest {",
    "method_signature": "circularShift(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountNums.java\npackage scenario2;\n\nimport java.util.List;\n\nclass CountNums {\n\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits \u003e 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     */\n    public static int countNums(List\u003cObject\u003e arr) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            int sum \u003d 0;\n            int num \u003d (int) arr.get(i);\n            boolean isNegative \u003d num \u003c 0;\n            if (isNegative) {\n                num \u003d -num;\n            }\n            while (num !\u003d 0) {\n                if (isNegative \u0026\u0026 num / 10 \u003d\u003d 0) {\n                    sum -\u003d num % 10;\n                } else {\n                    sum +\u003d num % 10;\n                }\n                num /\u003d 10;\n            }\n            if (sum \u003e 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CountNums",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_108.java",
    "test_prompt": "// CountNumsTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountNums}.\n* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.\n*/\nclass CountNumsTest {",
    "method_signature": "countNums(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LargestDivisor.java\npackage scenario2;\n\nclass LargestDivisor {\n\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     */\n    public static int largestDivisor(int n) {\n        for (int i \u003d n - 1; i \u003e 0; i--) {\n            if (n % i \u003d\u003d 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n",
    "package": "scenario2",
    "classname": "LargestDivisor",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_24.java",
    "test_prompt": "// LargestDivisorTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestDivisor}.\n* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.\n*/\nclass LargestDivisorTest {",
    "method_signature": "largestDivisor(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortedListSum.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortedListSum {\n\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     */\n    public static List\u003cObject\u003e sortedListSum(List\u003cString\u003e lst) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (lst.get(i).length() % 2 \u003d\u003d 0) {\n                result.add(lst.get(i));\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1.toString().length() \u003d\u003d o2.toString().length()) {\n                    return o1.toString().compareTo(o2.toString());\n                } else {\n                    return o1.toString().length() - o2.toString().length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SortedListSum",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_149.java",
    "test_prompt": "// SortedListSumTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortedListSum}.\n* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.\n*/\nclass SortedListSumTest {",
    "method_signature": "sortedListSum(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SmallestChange.java\npackage scenario2;\n\nimport java.util.List;\n\nclass SmallestChange {\n\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     */\n    public static int smallestChange(List\u003cInteger\u003e arr) {\n        int result \u003d 0;\n        int i \u003d 0;\n        int j \u003d arr.size() - 1;\n        while (i \u003c j) {\n            if (arr.get(i) !\u003d arr.get(j)) {\n                result++;\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SmallestChange",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_73.java",
    "test_prompt": "// SmallestChangeTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SmallestChange}.\n* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.\n*/\nclass SmallestChangeTest {",
    "method_signature": "smallestChange(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SumSquares1.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SumSquares1 {\n\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     */\n    public static int sumSquares(List\u003cObject\u003e lst) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        for (int i \u003d 0; i \u003c lst.size(); i++) {\n            if (i % 3 \u003d\u003d 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i));\n            } else if (i % 4 \u003d\u003d 0 \u0026\u0026 i % 3 !\u003d 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));\n            } else {\n                result.add((int) lst.get(i));\n            }\n        }\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c result.size(); i++) {\n            sum +\u003d result.get(i);\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SumSquares1",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_142.java",
    "test_prompt": "// SumSquares1Test.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares1}.\n* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.\n*/\nclass SumSquares1Test {",
    "method_signature": "sumSquares(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HexKey.java\npackage scenario2;\n\nclass HexKey {\n\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (\u003ddecimal 11), D (\u003ddecimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     */\n    public static int hexKey(Object num) {\n        int result \u003d 0;\n        String hex \u003d num.toString();\n        for (int i \u003d 0; i \u003c hex.length(); i++) {\n            char c \u003d hex.charAt(i);\n            if (c \u003d\u003d \u00272\u0027 || c \u003d\u003d \u00273\u0027 || c \u003d\u003d \u00275\u0027 || c \u003d\u003d \u00277\u0027 || c \u003d\u003d \u0027B\u0027 || c \u003d\u003d \u0027D\u0027) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "HexKey",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_78.java",
    "test_prompt": "// HexKeyTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HexKey}.\n* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.\n*/\nclass HexKeyTest {",
    "method_signature": "hexKey(Object)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Multiply.java\npackage scenario2;\n\nclass Multiply {\n\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     */\n    public static int multiply(int a, int b) {\n        if (a \u003c 0)\n            a \u003d -a;\n        if (b \u003c 0)\n            b \u003d -b;\n        return (a % 10) * (b % 10);\n    }\n}\n",
    "package": "scenario2",
    "classname": "Multiply",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_97.java",
    "test_prompt": "// MultiplyTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Multiply}.\n* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.\n*/\nclass MultiplyTest {",
    "method_signature": "multiply(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MaxFill.java\npackage scenario2;\n\nimport java.util.List;\n\nclass MaxFill {\n\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Constraints:\n     * * all wells have the same length\n     * * 1 \u003c\u003d grid.length \u003c\u003d 10^2\n     * * 1 \u003c\u003d grid[:,1].length \u003c\u003d 10^2\n     * * grid[i][j] -\u003e 0 | 1\n     * * 1 \u003c\u003d capacity \u003c\u003d 10\n     */\n    public static int maxFill(List\u003cList\u003cInteger\u003e\u003e grid, int capacity) {\n        int sum \u003d 0;\n        for (List\u003cInteger\u003e arr : grid) {\n            int sumArr \u003d 0;\n            for (Integer i : arr) {\n                sumArr +\u003d i;\n            }\n            sum +\u003d Math.ceil((double) sumArr / capacity);\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario2",
    "classname": "MaxFill",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_115.java",
    "test_prompt": "// MaxFillTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxFill}.\n* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.\n*/\nclass MaxFillTest {",
    "method_signature": "maxFill(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RoundedAvg.java\npackage scenario2;\n\nclass RoundedAvg {\n\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n \u003e m) {\n            return -1;\n        }\n        int sum \u003d 0;\n        for (int i \u003d n; i \u003c\u003d m; i++) {\n            sum +\u003d i;\n        }\n        double avg \u003d (sum * 1.0) / (m - n + 1);\n        int roundedAvg \u003d (int) Math.rint(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}\n",
    "package": "scenario2",
    "classname": "RoundedAvg",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_103.java",
    "test_prompt": "// RoundedAvgTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RoundedAvg}.\n* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.\n*/\nclass RoundedAvgTest {",
    "method_signature": "roundedAvg(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PrimeFib.java\npackage scenario2;\n\nclass PrimeFib {\n\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it\u0027s also prime.\n     */\n    public static int primeFib(int n) {\n        int a \u003d 1;\n        int b \u003d 1;\n        int c \u003d 0;\n        int count \u003d 0;\n        while (count \u003c n) {\n            c \u003d a + b;\n            a \u003d b;\n            b \u003d c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n\n    private static Boolean isPrime(int n) {\n        if (n \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c n; i++) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "PrimeFib",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_39.java",
    "test_prompt": "// PrimeFibTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeFib}.\n* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.\n*/\nclass PrimeFibTest {",
    "method_signature": "primeFib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CycpatternCheck.java\npackage scenario2;\n\nclass CycpatternCheck {\n\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n        int l \u003d b.length();\n        String pat \u003d b + b;\n        for (int i \u003d 0; i \u003c a.length() - l + 1; i++) {\n            for (int j \u003d 0; j \u003c l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CycpatternCheck",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_154.java",
    "test_prompt": "// CycpatternCheckTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CycpatternCheck}.\n* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.\n*/\nclass CycpatternCheckTest {",
    "method_signature": "cycpatternCheck(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// NumericalLetterGrade.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass NumericalLetterGrade {\n\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * \u003e 3.7                A\n     * \u003e 3.3                A-\n     * \u003e 3.0                B+\n     * \u003e 2.7                B\n     * \u003e 2.3                B-\n     * \u003e 2.0                C+\n     * \u003e 1.7                C\n     * \u003e 1.3                C-\n     * \u003e 1.0                D+\n     * \u003e 0.7                D\n     * \u003e 0.0                D-\n     * 0.0                E\n     */\n    public static List\u003cString\u003e numericalLetterGrade(List\u003cNumber\u003e grades) {\n        List\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();\n        for (Number grade : grades) {\n            if (grade.doubleValue() \u003e\u003d 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() \u003e 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() \u003e 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() \u003e 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() \u003e 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() \u003e 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() \u003e 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() \u003e 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() \u003e 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() \u003e 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() \u003e 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() \u003e 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "NumericalLetterGrade",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_81.java",
    "test_prompt": "// NumericalLetterGradeTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NumericalLetterGrade}.\n* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.\n*/\nclass NumericalLetterGradeTest {",
    "method_signature": "numericalLetterGrade(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StringSequence.java\npackage scenario2;\n\nclass StringSequence {\n\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     */\n    public static String stringSequence(int n) {\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c\u003d n; i++) {\n            result +\u003d i + \" \";\n        }\n        return result.trim();\n    }\n}\n",
    "package": "scenario2",
    "classname": "StringSequence",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_15.java",
    "test_prompt": "// StringSequenceTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringSequence}.\n* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.\n*/\nclass StringSequenceTest {",
    "method_signature": "stringSequence(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IncrList.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass IncrList {\n\n    /**\n     * Return list with elements incremented by 1.\n     */\n    public static List\u003cObject\u003e incrList(List\u003cObject\u003e l) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i \u003d (Integer) value;\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "IncrList",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_42.java",
    "test_prompt": "// IncrListTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IncrList}.\n* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.\n*/\nclass IncrListTest {",
    "method_signature": "incrList(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SameChars.java\npackage scenario2;\n\nclass SameChars {\n\n    /**\n     * * Check if two words have the same characters.\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        int[] count0 \u003d new int[26];\n        int[] count1 \u003d new int[26];\n        for (int i \u003d 0; i \u003c s0.length(); i++) {\n            count0[s0.charAt(i) - \u0027a\u0027] \u003d 1;\n        }\n        for (int i \u003d 0; i \u003c s1.length(); i++) {\n            count1[s1.charAt(i) - \u0027a\u0027] \u003d 1;\n        }\n        for (int i \u003d 0; i \u003c 26; i++) {\n            if (count0[i] !\u003d count1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SameChars",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_54.java",
    "test_prompt": "// SameCharsTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SameChars}.\n* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.\n*/\nclass SameCharsTest {",
    "method_signature": "sameChars(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SpecialFactorial.java\npackage scenario2;\n\nclass SpecialFactorial {\n\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) \u003d n! * (n-1)! * (n-2)! * ... * 1!\n     * where n \u003e 0\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n    public static long specialFactorial(int n) {\n        long res \u003d 1;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            res *\u003d factorial(i);\n        }\n        return res;\n    }\n\n    private static long factorial(int n) {\n        long res \u003d 1;\n        for (int i \u003d 1; i \u003c\u003d n; i++) {\n            res *\u003d i;\n        }\n        return res;\n    }\n}\n",
    "package": "scenario2",
    "classname": "SpecialFactorial",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_139.java",
    "test_prompt": "// SpecialFactorialTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpecialFactorial}.\n* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.\n*/\nclass SpecialFactorialTest {",
    "method_signature": "specialFactorial(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TotalMatch.java\npackage scenario2;\n\nimport java.util.List;\n\nclass TotalMatch {\n\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public static List\u003cObject\u003e totalMatch(List\u003cObject\u003e lst1, List\u003cObject\u003e lst2) {\n        int sum1 \u003d 0;\n        int sum2 \u003d 0;\n        for (Object value : lst1) {\n            if (value instanceof String) {\n                sum1 +\u003d ((String) value).length();\n            }\n        }\n        for (Object value : lst2) {\n            if (value instanceof String) {\n                sum2 +\u003d ((String) value).length();\n            }\n        }\n        if (sum1 \u003c\u003d sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
    "package": "scenario2",
    "classname": "TotalMatch",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_74.java",
    "test_prompt": "// TotalMatchTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TotalMatch}.\n* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.\n*/\nclass TotalMatchTest {",
    "method_signature": "totalMatch(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Strlen.java\npackage scenario2;\n\nclass Strlen {\n\n    /**\n     * Return length of given string\n     */\n    public static int strlen(String string) {\n        return string.length();\n    }\n}\n",
    "package": "scenario2",
    "classname": "Strlen",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_23.java",
    "test_prompt": "// StrlenTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strlen}.\n* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.\n*/\nclass StrlenTest {",
    "method_signature": "strlen(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MatchParens.java\npackage scenario2;\n\nimport java.util.List;\n\nclass MatchParens {\n\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses \u0027(\u0027 or close parentheses \u0027)\u0027 only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \u0027(())()\u0027 is good, while the string\n     * \u0027())\u0027 is not.\n     * Return \u0027Yes\u0027 if there\u0027s a way to make a good string, and return \u0027No\u0027 otherwise.\n     */\n    public static String matchParens(List\u003cString\u003e lst) {\n        String s1 \u003d lst.get(0);\n        String s2 \u003d lst.get(1);\n        String s1s2 \u003d s1 + s2;\n        String s2s1 \u003d s2 + s1;\n        int count \u003d 0;\n        boolean flag \u003d true;\n        for (int i \u003d 0; i \u003c s1s2.length(); i++) {\n            if (s1s2.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                flag \u003d false;\n            }\n        }\n        if (flag \u0026\u0026 count \u003d\u003d 0) {\n            return \"Yes\";\n        }\n        count \u003d 0;\n        for (int i \u003d 0; i \u003c s2s1.length(); i++) {\n            if (s2s1.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count \u003c 0) {\n                return \"No\";\n            }\n        }\n        if (count \u003d\u003d 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
    "package": "scenario2",
    "classname": "MatchParens",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_119.java",
    "test_prompt": "// MatchParensTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MatchParens}.\n* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.\n*/\nclass MatchParensTest {",
    "method_signature": "matchParens(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MaxElement.java\npackage scenario2;\n\nimport java.util.List;\n\nclass MaxElement {\n\n    /**\n     * Return maximum element in the list.\n     */\n    public static int maxElement(List\u003cInteger\u003e l) {\n        int max \u003d Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i \u003e max) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario2",
    "classname": "MaxElement",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_35.java",
    "test_prompt": "// MaxElementTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxElement}.\n* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.\n*/\nclass MaxElementTest {",
    "method_signature": "maxElement(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Derivative.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Derivative {\n\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     */\n    public static List\u003cObject\u003e derivative(List\u003cInteger\u003e xs) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 1; i \u003c xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Derivative",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_62.java",
    "test_prompt": "// DerivativeTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Derivative}.\n* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.\n*/\nclass DerivativeTest {",
    "method_signature": "derivative(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ParseNestedParens.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ParseNestedParens {\n\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     */\n    public static List\u003cInteger\u003e parseNestedParens(String parenString) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        int count \u003d 0;\n        int maximum_depth \u003d 0;\n        for (int i \u003d 0; i \u003c parenString.length(); i++) {\n            if (parenString.charAt(i) \u003d\u003d \u0027(\u0027) {\n                count++;\n                maximum_depth \u003d Math.max(maximum_depth, count);\n            } else if (parenString.charAt(i) \u003d\u003d \u0027)\u0027) {\n                count--;\n                if (count \u003d\u003d 0) {\n                    result.add(maximum_depth);\n                    maximum_depth \u003d 0;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "ParseNestedParens",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_6.java",
    "test_prompt": "// ParseNestedParensTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseNestedParens}.\n* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.\n*/\nclass ParseNestedParensTest {",
    "method_signature": "parseNestedParens(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FindMax.java\npackage scenario2;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass FindMax {\n\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     */\n    public static String findMax(List\u003cString\u003e words) {\n        if (words \u003d\u003d null || words.size() \u003d\u003d 0) {\n            return null;\n        }\n        String maxWord \u003d words.get(0);\n        int maxUnique \u003d 0;\n        for (String word : words) {\n            Set\u003cCharacter\u003e seen \u003d new HashSet\u003c\u003e();\n            for (int i \u003d 0; i \u003c word.length(); i++) {\n                seen.add(word.charAt(i));\n            }\n            if (seen.size() \u003e maxUnique) {\n                maxWord \u003d word;\n                maxUnique \u003d seen.size();\n            } else if (seen.size() \u003d\u003d maxUnique \u0026\u0026 word.compareTo(maxWord) \u003c 0) {\n                maxWord \u003d word;\n            }\n        }\n        return maxWord;\n    }\n}\n",
    "package": "scenario2",
    "classname": "FindMax",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_158.java",
    "test_prompt": "// FindMaxTest.java\npackage scenario2;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindMax}.\n* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.\n*/\nclass FindMaxTest {",
    "method_signature": "findMax(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortNumbers.java\npackage scenario2;\n\nimport java.util.Arrays;\n\nclass SortNumbers {\n\n    /**\n     * Input is a space-delimited string of numbers from \u0027zero\u0027 to \u0027nine\u0027.\n     * Valid choices are \u0027zero\u0027, \u0027one\u0027, \u0027two\u0027, \u0027three\u0027, \u0027four\u0027, \u0027five\u0027, \u0027six\u0027, \u0027seven\u0027, \u0027eight\u0027 and \u0027nine\u0027.\n     * Return the string with numbers sorted from smallest to largest\n     */\n    public static String sortNumbers(String numbers) {\n        String[] numbersArray \u003d numbers.split(\" \");\n        int[] numbersInt \u003d new int[numbersArray.length];\n        for (int i \u003d 0; i \u003c numbersArray.length; i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n                numbersInt[i] \u003d 0;\n            } else if (numbersArray[i].equals(\"one\")) {\n                numbersInt[i] \u003d 1;\n            } else if (numbersArray[i].equals(\"two\")) {\n                numbersInt[i] \u003d 2;\n            } else if (numbersArray[i].equals(\"three\")) {\n                numbersInt[i] \u003d 3;\n            } else if (numbersArray[i].equals(\"four\")) {\n                numbersInt[i] \u003d 4;\n            } else if (numbersArray[i].equals(\"five\")) {\n                numbersInt[i] \u003d 5;\n            } else if (numbersArray[i].equals(\"six\")) {\n                numbersInt[i] \u003d 6;\n            } else if (numbersArray[i].equals(\"seven\")) {\n                numbersInt[i] \u003d 7;\n            } else if (numbersArray[i].equals(\"eight\")) {\n                numbersInt[i] \u003d 8;\n            } else if (numbersArray[i].equals(\"nine\")) {\n                numbersInt[i] \u003d 9;\n            } else {\n                numbersInt[i] \u003d -1;\n            }\n        }\n        Arrays.sort(numbersInt);\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c numbersInt.length; i++) {\n            if (numbersInt[i] \u003d\u003d 0) {\n                result +\u003d \"zero \";\n            } else if (numbersInt[i] \u003d\u003d 1) {\n                result +\u003d \"one \";\n            } else if (numbersInt[i] \u003d\u003d 2) {\n                result +\u003d \"two \";\n            } else if (numbersInt[i] \u003d\u003d 3) {\n                result +\u003d \"three \";\n            } else if (numbersInt[i] \u003d\u003d 4) {\n                result +\u003d \"four \";\n            } else if (numbersInt[i] \u003d\u003d 5) {\n                result +\u003d \"five \";\n            } else if (numbersInt[i] \u003d\u003d 6) {\n                result +\u003d \"six \";\n            } else if (numbersInt[i] \u003d\u003d 7) {\n                result +\u003d \"seven \";\n            } else if (numbersInt[i] \u003d\u003d 8) {\n                result +\u003d \"eight \";\n            } else if (numbersInt[i] \u003d\u003d 9) {\n                result +\u003d \"nine \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
    "package": "scenario2",
    "classname": "SortNumbers",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_19.java",
    "test_prompt": "// SortNumbersTest.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortNumbers}.\n* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.\n*/\nclass SortNumbersTest {",
    "method_signature": "sortNumbers(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetOddCollatz.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass GetOddCollatz {\n\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     * 1. Collatz(1) is [1].\n     * 2. returned list sorted in increasing order.\n     */\n    public static List\u003cInteger\u003e getOddCollatz(int n) {\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n        while (n !\u003d 1) {\n            if (n % 2 \u003d\u003d 1) {\n                result.add(n);\n            }\n            if (n % 2 \u003d\u003d 0) {\n                n \u003d n / 2;\n            } else {\n                n \u003d 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "GetOddCollatz",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_123.java",
    "test_prompt": "// GetOddCollatzTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetOddCollatz}.\n* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.\n*/\nclass GetOddCollatzTest {",
    "method_signature": "getOddCollatz(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Common.java\npackage scenario2;\n\nimport java.util.*;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public static List\u003cObject\u003e common(List\u003cInteger\u003e l1, List\u003cObject\u003e l2) {\n        Set\u003cInteger\u003e set \u003d new HashSet\u003cInteger\u003e();\n        for (Integer value : l1) {\n            set.add(value);\n        }\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : l2) {\n            if (value instanceof Integer) {\n                int i \u003d (Integer) value;\n                if (set.contains(i) \u0026\u0026 !result.contains(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator\u003cObject\u003e() {\n\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer \u0026\u0026 o2 instanceof Integer) {\n                    return (Integer) o1 - (Integer) o2;\n                }\n                return 0;\n            }\n        });\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Common",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_58.java",
    "test_prompt": "// CommonTest.java\npackage scenario2;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Common}.\n* It contains ten unit test cases for the {@link Common#common(List, List)} method.\n*/\nclass CommonTest {",
    "method_signature": "common(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StringToMd5.java\npackage scenario2;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n\n    /**\n     * * Given a string \u0027text\u0027, return its md5 hash equivalent string.\n     * If \u0027text\u0027 is an empty string, return null.\n     */\n    public static String stringToMd5(String text) {\n        if (text.equals(\"\")) {\n            return null;\n        }\n        try {\n            MessageDigest md \u003d MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest \u003d md.digest(text.getBytes());\n            BigInteger number \u003d new BigInteger(1, messageDigest);\n            String hashText \u003d number.toString(16);\n            while (hashText.length() \u003c 32) {\n                hashText \u003d \"0\" + hashText;\n            }\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
    "package": "scenario2",
    "classname": "StringToMd5",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_162.java",
    "test_prompt": "// StringToMd5Test.java\npackage scenario2;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringToMd5}.\n* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.\n*/\nclass StringToMd5Test {",
    "method_signature": "stringToMd5(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CanArrange.java\npackage scenario2;\n\nimport java.util.List;\n\nclass CanArrange {\n\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     */\n    public static int canArrange(List\u003cObject\u003e arr) {\n        int max \u003d -1;\n        for (int i \u003d 0; i \u003c arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                if (i \u003e 0 \u0026\u0026 (int) arr.get(i) \u003c (int) arr.get(i - 1)) {\n                    max \u003d i;\n                }\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CanArrange",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_135.java",
    "test_prompt": "// CanArrangeTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CanArrange}.\n* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.\n*/\nclass CanArrangeTest {",
    "method_signature": "canArrange(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CheckIfLastCharIsALetter.java\npackage scenario2;\n\nclass CheckIfLastCharIsALetter {\n\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() \u003d\u003d 0) {\n            return false;\n        }\n        char lastChar \u003d txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.length() \u003d\u003d 1) {\n                return true;\n            }\n            char secondLastChar \u003d txt.charAt(txt.length() - 2);\n            if (Character.isLetter(secondLastChar)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CheckIfLastCharIsALetter",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_134.java",
    "test_prompt": "// CheckIfLastCharIsALetterTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckIfLastCharIsALetter}.\n* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.\n*/\nclass CheckIfLastCharIsALetterTest {",
    "method_signature": "checkIfLastCharIsALetter(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GenerateIntegers.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GenerateIntegers {\n\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     */\n    public static List\u003cObject\u003e generateIntegers(int a, int b) {\n        int lower \u003d Math.max(2, Math.min(a, b));\n        int upper \u003d Math.min(8, Math.max(a, b));\n        List\u003cObject\u003e result \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d lower; i \u003c\u003d upper; i++) {\n            if (i % 2 \u003d\u003d 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "GenerateIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_163.java",
    "test_prompt": "// GenerateIntegersTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GenerateIntegers}.\n* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.\n*/\nclass GenerateIntegersTest {",
    "method_signature": "generateIntegers(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LargestPrimeFactor.java\npackage scenario2;\n\nclass LargestPrimeFactor {\n\n    /**\n     * Return the largest prime factor of n. Assume n \u003e 1 and is not a prime.\n     */\n    public static int largestPrimeFactor(int n) {\n        int max \u003d 0;\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\n            if (n % i \u003d\u003d 0) {\n                max \u003d i;\n                n /\u003d i;\n                i--;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario2",
    "classname": "LargestPrimeFactor",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_59.java",
    "test_prompt": "// LargestPrimeFactorTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestPrimeFactor}.\n* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.\n*/\nclass LargestPrimeFactorTest {",
    "method_signature": "largestPrimeFactor(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AddElements.java\npackage scenario2;\n\nimport java.util.List;\n\nclass AddElements {\n\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     */\n    public static int addElements(List\u003cInteger\u003e arr, int k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c k; i++) {\n            if (arr.get(i) \u003c 100) {\n                sum +\u003d arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
    "package": "scenario2",
    "classname": "AddElements",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_122.java",
    "test_prompt": "// AddElementsTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddElements}.\n* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.\n*/\nclass AddElementsTest {",
    "method_signature": "addElements(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HowManyTimes.java\npackage scenario2;\n\nclass HowManyTimes {\n\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     */\n    public static int howManyTimes(String string, String substring) {\n        int count \u003d 0;\n        int index \u003d 0;\n        while (index \u003c string.length()) {\n            index \u003d string.indexOf(substring, index);\n            if (index \u003d\u003d -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
    "package": "scenario2",
    "classname": "HowManyTimes",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_18.java",
    "test_prompt": "// HowManyTimesTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HowManyTimes}.\n* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.\n*/\nclass HowManyTimesTest {",
    "method_signature": "howManyTimes(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Eat.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Eat {\n\n    /**\n     * * You\u0027re a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day\u0027s meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     * the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Variables:\n     *\n     * @number : integer\n     * the number of carrots that you have eaten.\n     * @need : integer\n     * the number of carrots that you need to eat.\n     * @remaining : integer\n     * the number of remaining carrots that exist in stock\n     *\n     * Constrain:\n     * * 0 \u003c\u003d number \u003c\u003d 1000\n     * * 0 \u003c\u003d need \u003c\u003d 1000\n     * * 0 \u003c\u003d remaining \u003c\u003d 1000\n     */\n    public static List\u003cInteger\u003e eat(int number, int need, int remaining) {\n        if (need \u003c\u003d remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n",
    "package": "scenario2",
    "classname": "Eat",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_159.java",
    "test_prompt": "// EatTest.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Eat}.\n* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.\n*/\nclass EatTest {",
    "method_signature": "eat(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Fibfib.java\npackage scenario2;\n\nclass Fibfib {\n\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that\u0027s defined as follows:\n     * fibfib(0) \u003d\u003d 0\n     * fibfib(1) \u003d\u003d 0\n     * fibfib(2) \u003d\u003d 1\n     * fibfib(n) \u003d\u003d fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     */\n    public static int fibfib(int n) {\n        if (n \u003c 2) {\n            return 0;\n        }\n        if (n \u003d\u003d 2) {\n            return 1;\n        }\n        int a \u003d 0;\n        int b \u003d 0;\n        int c \u003d 1;\n        int d \u003d 0;\n        for (int i \u003d 3; i \u003c\u003d n; i++) {\n            d \u003d a + b + c;\n            a \u003d b;\n            b \u003d c;\n            c \u003d d;\n        }\n        return d;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Fibfib",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_63.java",
    "test_prompt": "// FibfibTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fibfib}.\n* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.\n*/\nclass FibfibTest {",
    "method_signature": "fibfib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FilterBySubstring.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterBySubstring {\n\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     */\n    public static List\u003cObject\u003e filterBySubstring(List\u003cObject\u003e strings, String substring) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c strings.size(); i++) {\n            if (strings.get(i).toString().contains(substring)) {\n                result.add(strings.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "FilterBySubstring",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_7.java",
    "test_prompt": "// FilterBySubstringTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterBySubstring}.\n* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.\n*/\nclass FilterBySubstringTest {",
    "method_signature": "filterBySubstring(List, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Unique.java\npackage scenario2;\n\nimport java.util.*;\n\nclass Unique {\n\n    /**\n     * Return sorted unique elements in a list\n     */\n    public static List\u003cInteger\u003e unique(List\u003cInteger\u003e l) {\n        Set\u003cInteger\u003e set \u003d new HashSet\u003cInteger\u003e();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Unique",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_34.java",
    "test_prompt": "// UniqueTest.java\npackage scenario2;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Unique}.\n* It contains ten unit test cases for the {@link Unique#unique(List)} method.\n*/\nclass UniqueTest {",
    "method_signature": "unique(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetClosestVowel.java\npackage scenario2;\n\nclass GetClosestVowel {\n\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn\u0027t count. Return empty string if you didn\u0027t\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     */\n    public static String getClosestVowel(String word) {\n        String vowels \u003d \"aeiouAEIOU\";\n        int i \u003d word.length() - 2;\n        while (i \u003e 0) {\n            if (vowels.indexOf(word.charAt(i)) !\u003d -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) \u003d\u003d -1 \u0026\u0026 vowels.indexOf(word.charAt(i - 1)) \u003d\u003d -1) {\n                    return word.substring(i, i + 1);\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n}\n",
    "package": "scenario2",
    "classname": "GetClosestVowel",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_118.java",
    "test_prompt": "// GetClosestVowelTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetClosestVowel}.\n* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.\n*/\nclass GetClosestVowelTest {",
    "method_signature": "getClosestVowel(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FilterIntegers.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterIntegers {\n\n    /**\n     * Filter given list of any Java values only for integers\n     */\n    public static List\u003cObject\u003e filterIntegers(List\u003cObject\u003e values) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "FilterIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_22.java",
    "test_prompt": "// FilterIntegersTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterIntegers}.\n* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.\n*/\nclass FilterIntegersTest {",
    "method_signature": "filterIntegers(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsMultiplyPrime.java\npackage scenario2;\n\nclass IsMultiplyPrime {\n\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100.\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        int count \u003d 0;\n        for (int i \u003d 2; i \u003c\u003d a; i++) {\n            if (a % i \u003d\u003d 0) {\n                count++;\n                a /\u003d i;\n                i--;\n            }\n        }\n        return count \u003d\u003d 3;\n    }\n}\n",
    "package": "scenario2",
    "classname": "IsMultiplyPrime",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_75.java",
    "test_prompt": "// IsMultiplyPrimeTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsMultiplyPrime}.\n* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.\n*/\nclass IsMultiplyPrimeTest {",
    "method_signature": "isMultiplyPrime(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsEqualToSumEven.java\npackage scenario2;\n\nclass IsEqualToSumEven {\n\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     */\n    public static Boolean isEqualToSumEven(int n) {\n        if (n \u003c 8) {\n            return false;\n        }\n        return n % 2 \u003d\u003d 0;\n    }\n}\n",
    "package": "scenario2",
    "classname": "IsEqualToSumEven",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_138.java",
    "test_prompt": "// IsEqualToSumEvenTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsEqualToSumEven}.\n* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.\n*/\nclass IsEqualToSumEvenTest {",
    "method_signature": "isEqualToSumEven(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Fib.java\npackage scenario2;\n\nclass Fib {\n\n    /**\n     * Return n-th Fibonacci number.\n     */\n    public static int fib(int n) {\n        int a \u003d 0;\n        int b \u003d 1;\n        int c \u003d 1;\n        for (int i \u003d 0; i \u003c n - 1; i++) {\n            c \u003d a + b;\n            a \u003d b;\n            b \u003d c;\n        }\n        return c;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Fib",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_55.java",
    "test_prompt": "// FibTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib}.\n* It contains ten unit test cases for the {@link Fib#fib(int)} method.\n*/\nclass FibTest {",
    "method_signature": "fib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PairsSumToZero.java\npackage scenario2;\n\nimport java.util.List;\n\nclass PairsSumToZero {\n\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public static Boolean pairsSumToZero(List\u003cInteger\u003e l) {\n        for (int i \u003d 0; i \u003c l.size(); i++) {\n            for (int j \u003d i + 1; j \u003c l.size(); j++) {\n                if (l.get(i) + l.get(j) \u003d\u003d 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
    "package": "scenario2",
    "classname": "PairsSumToZero",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_43.java",
    "test_prompt": "// PairsSumToZeroTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PairsSumToZero}.\n* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.\n*/\nclass PairsSumToZeroTest {",
    "method_signature": "pairsSumToZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AllPrefixes.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass AllPrefixes {\n\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     */\n    public static List\u003cObject\u003e allPrefixes(String string) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        for (int i \u003d 0; i \u003c string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}\n",
    "package": "scenario2",
    "classname": "AllPrefixes",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_14.java",
    "test_prompt": "// AllPrefixesTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AllPrefixes}.\n* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.\n*/\nclass AllPrefixesTest {",
    "method_signature": "allPrefixes(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsHappy.java\npackage scenario2;\n\nclass IsHappy {\n\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     */\n    public static Boolean isHappy(String s) {\n        if (s.length() \u003c 3) {\n            return false;\n        }\n        for (int i \u003d 0; i \u003c s.length() - 2; i++) {\n            if (s.charAt(i) \u003d\u003d s.charAt(i + 1) || s.charAt(i) \u003d\u003d s.charAt(i + 2) || s.charAt(i + 1) \u003d\u003d s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "IsHappy",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_80.java",
    "test_prompt": "// IsHappyTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsHappy}.\n* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.\n*/\nclass IsHappyTest {",
    "method_signature": "isHappy(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EvenOddCount.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass EvenOddCount {\n\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n     */\n    public static List\u003cInteger\u003e evenOddCount(int num) {\n        int even \u003d 0;\n        int odd \u003d 0;\n        if (num \u003d\u003d 0) {\n            even++;\n        }\n        while (num !\u003d 0) {\n            if (num % 2 \u003d\u003d 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /\u003d 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}\n",
    "package": "scenario2",
    "classname": "EvenOddCount",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_155.java",
    "test_prompt": "// EvenOddCountTest.java\npackage scenario2;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddCount}.\n* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.\n*/\nclass EvenOddCountTest {",
    "method_signature": "evenOddCount(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ChooseNum.java\npackage scenario2;\n\nclass ChooseNum {\n\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there\u0027s no such number, then the function should return -1.\n     */\n    public static int chooseNum(int x, int y) {\n        int max \u003d -1;\n        for (int i \u003d x; i \u003c\u003d y; i++) {\n            if (i % 2 \u003d\u003d 0 \u0026\u0026 i \u003e max) {\n                max \u003d i;\n            }\n        }\n        return max;\n    }\n}\n",
    "package": "scenario2",
    "classname": "ChooseNum",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_102.java",
    "test_prompt": "// ChooseNumTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChooseNum}.\n* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.\n*/\nclass ChooseNumTest {",
    "method_signature": "chooseNum(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Minsubarraysum.java\npackage scenario2;\n\nimport java.util.List;\n\nclass Minsubarraysum {\n\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     */\n    public static long minsubarraysum(List\u003cObject\u003e nums) {\n        long s \u003d 0;\n        long max_sum \u003d 0;\n        for (int i \u003d 0; i \u003c nums.size(); i++) {\n            long num \u003d ((Number) nums.get(i)).longValue();\n            s -\u003d num;\n            if (s \u003c 0) {\n                s \u003d 0;\n            }\n            max_sum \u003d Math.max(s, max_sum);\n        }\n        if (max_sum \u003d\u003d 0) {\n            max_sum \u003d -((Number) nums.get(0)).longValue();\n            for (int i \u003d 0; i \u003c nums.size(); i++) {\n                max_sum \u003d Math.max(-((Number) nums.get(i)).longValue(), max_sum);\n            }\n        }\n        long min_sum \u003d -max_sum;\n        return min_sum;\n    }\n}\n",
    "package": "scenario2",
    "classname": "Minsubarraysum",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_114.java",
    "test_prompt": "// MinsubarraysumTest.java\npackage scenario2;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minsubarraysum}.\n* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.\n*/\nclass MinsubarraysumTest {",
    "method_signature": "minsubarraysum(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DecimalToBinary.java\npackage scenario2;\n\nclass DecimalToBinary {\n\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be \u00270\u0027 or \u00271\u0027.\n     *\n     * There will be an extra couple of characters \u0027db\u0027 at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     */\n    public static String decimalToBinary(int decimal) {\n        String binary \u003d \"\";\n        if (decimal \u003d\u003d 0) {\n            return \"db0db\";\n        }\n        while (decimal \u003e 0) {\n            binary \u003d (decimal % 2) + binary;\n            decimal \u003d decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}\n",
    "package": "scenario2",
    "classname": "DecimalToBinary",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_79.java",
    "test_prompt": "// DecimalToBinaryTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DecimalToBinary}.\n* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.\n*/\nclass DecimalToBinaryTest {",
    "method_signature": "decimalToBinary(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountUpTo.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass CountUpTo {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     */\n    public static List\u003cObject\u003e countUpTo(int n) {\n        List\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e();\n        int i \u003d 2;\n        while (i \u003c n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    private static boolean isPrime(int n) {\n        int i \u003d 2;\n        while (i \u003c n) {\n            if (n % i \u003d\u003d 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "CountUpTo",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_96.java",
    "test_prompt": "// CountUpToTest.java\npackage scenario2;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpTo}.\n* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.\n*/\nclass CountUpToTest {",
    "method_signature": "countUpTo(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// WordsInSentence.java\npackage scenario2;\n\nclass WordsInSentence {\n\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Constraints:\n     * * 1 \u003c\u003d len(sentence) \u003c\u003d 100\n     * * sentence contains only letters\n     */\n    public static String wordsInSentence(String sentence) {\n        String[] words \u003d sentence.split(\" \");\n        String result \u003d \"\";\n        for (int i \u003d 0; i \u003c words.length; i++) {\n            if (isPrime(words[i].length())) {\n                result +\u003d words[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n\n    private static boolean isPrime(int number) {\n        if (number \u003c\u003d 1) {\n            return false;\n        }\n        for (int i \u003d 2; i \u003c number; i++) {\n            if (number % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "package": "scenario2",
    "classname": "WordsInSentence",
    "id": "/HumanEvalJava/src/main/java/scenario2/id_143.java",
    "test_prompt": "// WordsInSentenceTest.java\npackage scenario2;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsInSentence}.\n* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.\n*/\nclass WordsInSentenceTest {",
    "method_signature": "wordsInSentence(String)",
    "suffix": ""
  }
]