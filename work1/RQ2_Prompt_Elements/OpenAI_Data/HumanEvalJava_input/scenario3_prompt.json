[
  {
    "numberTests": "ten",
    "original_code": "// CorrectBracketing.java\npackage scenario3;\n\nclass CorrectBracketing {\n\n    /**\n     * Brackets is a string of \"\u003c\" and \"\u003e\".\n     * return true if every opening bracket has a corresponding closing bracket.\n     *\n     * \u003e correctBracketing(\"\u003c\u003e\")\n     * true\n     * \u003e correctBracketing(\"\u003c\u003c\u003e\u003c\u003e\u003e\")\n     * true\n     * \u003e correctBracketing(\"\u003c\u003e\u003c\u003e\u003c\u003c\u003e\u003c\u003e\u003e\u003c\u003e\")\n     * true\n     * \u003e correctBracketing(\"\u003c\u003e\u003c\u003e\u003c\u003c\u003c\u003e\u003c\u003e\u003c\u003e\u003e\u003c\u003e\u003e\u003c\u003c\u003e\u003c\u003e\u003c\u003c\u003e\u003e\u003e\")\n     * true\n     * \u003e correctBracketing(\"\u003c\u003c\u003c\u003e\u003c\u003e\u003e\u003e\u003e\")\n     * false\n     * \u003e correctBracketing(\"\u003e\u003c\u003c\u003e\")\n     * false\n     * \u003e correctBracketing(\"\u003c\")\n     * false\n     * \u003e correctBracketing(\"\u003c\u003c\u003c\u003c\")\n     * false\n     * \u003e correctBracketing(\"\u003e\")\n     * false\n     * \u003e correctBracketing(\"\u003c\u003c\u003e\")\n     * false\n     * \u003e correctBracketing(\"\u003c\u003e\u003c\u003e\u003c\u003c\u003e\u003c\u003e\u003e\u003c\u003e\u003e\u003c\u003c\u003e\")\n     * false\n     * \u003e correctBracketing(\"\u003c\u003e\u003c\u003e\u003c\u003c\u003e\u003c\u003e\u003e\u003c\u003e\u003e\u003e\u003c\u003e\")\n     * false\n     */\n    public static Boolean correctBracketing(String brackets) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CorrectBracketing",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_56.java",
    "test_prompt": "// CorrectBracketingTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing}.\n* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.\n*/\nclass CorrectBracketingTest {",
    "method_signature": "correctBracketing(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TriplesSumToZero.java\npackage scenario3;\n\nimport java.util.List;\n\nclass TriplesSumToZero {\n\n    /**\n     * triplesSumToZero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     *\n     * \u003e triplesSumToZero([1, 3, 5, 0])\n     * false\n     * \u003e triplesSumToZero([1, 3, 5, -1])\n     * false\n     * \u003e triplesSumToZero([1, 3, -2, 1])\n     * true\n     * \u003e triplesSumToZero([1, 2, 3, 7])\n     * false\n     * \u003e triplesSumToZero([1, 2, 5, 7])\n     * false\n     * \u003e triplesSumToZero([2, 4, -5, 3, 9, 7])\n     * true\n     * \u003e triplesSumToZero([1])\n     * false\n     * \u003e triplesSumToZero([1, 3, 5, -100])\n     * false\n     * \u003e triplesSumToZero([100, 3, 5, -100])\n     * false\n     */\n    public static Boolean triplesSumToZero(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "TriplesSumToZero",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_40.java",
    "test_prompt": "// TriplesSumToZeroTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriplesSumToZero}.\n* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.\n*/\nclass TriplesSumToZeroTest {",
    "method_signature": "triplesSumToZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ParseMusic.java\npackage scenario3;\n\nimport java.util.List;\n\nclass ParseMusic {\n\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats  each does not last.\n     * Here is a legend:\n     * \u0027o\u0027 - whole note, lasts four beats\n     * \u0027o|\u0027 - half note, lasts two beats\n     * \u0027.|\u0027 - quarter note, lasts one beat\n     *\n     * \u003e parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     * \u003e parseMusic(\"\")\n     * []\n     * \u003e parseMusic(\"o o o o\")\n     * [4, 4, 4, 4]\n     * \u003e parseMusic(\".| .| .| .|\")\n     * [1, 1, 1, 1]\n     * \u003e parseMusic(\"o| o| .| .| o o o o\")\n     * [2, 2, 1, 1, 4, 4, 4, 4]\n     * \u003e parseMusic(\"o| .| o| .| o o| o o|\")\n     * [2, 1, 2, 1, 4, 2, 4, 2]\n     */\n    public static List\u003cObject\u003e parseMusic(String musicString) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ParseMusic",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_17.java",
    "test_prompt": "// ParseMusicTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseMusic}.\n* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.\n*/\nclass ParseMusicTest {",
    "method_signature": "parseMusic(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StartsOneEnds.java\npackage scenario3;\n\nclass StartsOneEnds {\n\n    /**\n     * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     * \u003e startsOneEnds(1)\n     * 1\n     * \u003e startsOneEnds(2)\n     * 18\n     * \u003e startsOneEnds(3)\n     * 180\n     * \u003e startsOneEnds(4)\n     * 1800\n     * \u003e startsOneEnds(5)\n     * 18000\n     */\n    public static int startsOneEnds(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StartsOneEnds",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_83.java",
    "test_prompt": "// StartsOneEndsTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartsOneEnds}.\n* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.\n*/\nclass StartsOneEndsTest {",
    "method_signature": "startsOneEnds(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SumProduct.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SumProduct {\n\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * \u003e sumProduct([1, 2, 3, 4])\n     * [10, 24]\n     * \u003e sumProduct([])\n     * [0, 1]\n     * \u003e sumProduct([1, 1, 1])\n     * [3, 1]\n     * \u003e sumProduct([100, 0])\n     * [100, 0]\n     * \u003e sumProduct([3, 5, 7])\n     * [15, 105]\n     * \u003e sumProduct([10])\n     * [10, 10]\n     */\n    public static List\u003cInteger\u003e sumProduct(List\u003cObject\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SumProduct",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_8.java",
    "test_prompt": "// SumProductTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumProduct}.\n* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.\n*/\nclass SumProductTest {",
    "method_signature": "sumProduct(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IntToMiniRoman.java\npackage scenario3;\n\nclass IntToMiniRoman {\n\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 \u003c\u003d num \u003c\u003d 1000\n     *\n     * Examples:\n     * \u003e\u003e\u003e intToMiniRoman(19) \u003d\u003d \u0027xix\u0027\n     * \u003e\u003e\u003e intToMiniRoman(152) \u003d\u003d \u0027clii\u0027\n     * \u003e\u003e\u003e intToMiniRoman(426) \u003d\u003d \u0027cdxxvi\u0027\n     *\n     * \u003e intToMiniRoman(19)\n     * \"xix\"\n     * \u003e intToMiniRoman(152)\n     * \"clii\"\n     * \u003e intToMiniRoman(251)\n     * \"ccli\"\n     * \u003e intToMiniRoman(426)\n     * \"cdxxvi\"\n     * \u003e intToMiniRoman(500)\n     * \"d\"\n     * \u003e intToMiniRoman(1)\n     * \"i\"\n     * \u003e intToMiniRoman(4)\n     * \"iv\"\n     * \u003e intToMiniRoman(43)\n     * \"xliii\"\n     * \u003e intToMiniRoman(90)\n     * \"xc\"\n     * \u003e intToMiniRoman(94)\n     * \"xciv\"\n     * \u003e intToMiniRoman(532)\n     * \"dxxxii\"\n     * \u003e intToMiniRoman(900)\n     * \"cm\"\n     * \u003e intToMiniRoman(994)\n     * \"cmxciv\"\n     * \u003e intToMiniRoman(1000)\n     * \"m\"\n     */\n    public static String intToMiniRoman(int number) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IntToMiniRoman",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_156.java",
    "test_prompt": "// IntToMiniRomanTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IntToMiniRoman}.\n* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.\n*/\nclass IntToMiniRomanTest {",
    "method_signature": "intToMiniRoman(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// WordsString.java\npackage scenario3;\n\nimport java.util.List;\n\nclass WordsString {\n\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * wordsString(\"Hi, my name is John\") \u003d\u003d [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * wordsString(\"One, two, three, four, five, six\") \u003d\u003d [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     * \u003e wordsString(\"Hi, my name is John\")\n     * [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * \u003e wordsString(\"One, two, three, four, five, six\")\n     * [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     * \u003e wordsString(\"Hi, my name\")\n     * [\"Hi\", \"my\", \"name\"]\n     * \u003e wordsString(\"One,, two, three, four, five, six,\")\n     * [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     * \u003e wordsString(\"\")\n     * []\n     * \u003e wordsString(\"ahmed     , gamal\")\n     * [\"ahmed\", \"gamal\"]\n     */\n    public static List\u003cObject\u003e wordsString(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "WordsString",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_101.java",
    "test_prompt": "// WordsStringTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsString}.\n* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.\n*/\nclass WordsStringTest {",
    "method_signature": "wordsString(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SelectWords.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SelectWords {\n\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * selectWords(\"Mary had a little lamb\", 4) \u003d\u003d\u003e [\"little\"]\n     * selectWords(\"Mary had a little lamb\", 3) \u003d\u003d\u003e [\"Mary\", \"lamb\"]\n     * selectWords(\"simple white space\", 2) \u003d\u003d\u003e []\n     * selectWords(\"Hello world\", 4) \u003d\u003d\u003e [\"world\"]\n     * selectWords(\"Uncle sam\", 3) \u003d\u003d\u003e [\"Uncle\"]\n     *\n     * \u003e selectWords(\"Mary had a little lamb\", 4)\n     * [\"little\"]\n     * \u003e selectWords(\"Mary had a little lamb\", 3)\n     * [\"Mary\", \"lamb\"]\n     * \u003e selectWords(\"simple white space\", 2)\n     * []\n     * \u003e selectWords(\"Hello world\", 4)\n     * [\"world\"]\n     * \u003e selectWords(\"Uncle sam\", 3)\n     * [\"Uncle\"]\n     * \u003e selectWords(\"\", 4)\n     * []\n     * \u003e selectWords(\"a b c d e f\", 1)\n     * [\"b\", \"c\", \"d\", \"f\"]\n     */\n    public static List\u003cObject\u003e selectWords(String s, int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SelectWords",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_117.java",
    "test_prompt": "// SelectWordsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SelectWords}.\n* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.\n*/\nclass SelectWordsTest {",
    "method_signature": "selectWords(String, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CheckDictCase.java\npackage scenario3;\n\nclass CheckDictCase {\n\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower\n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     * \u003e checkDictCase({\"p\": \"pineapple\", \"b\": \"banana\"})\n     * true\n     * \u003e checkDictCase({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"})\n     * false\n     * \u003e checkDictCase({\"p\": \"pineapple\", 5: \"banana\", \"a\": \"apple\"})\n     * false\n     * \u003e checkDictCase({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n     * false\n     * \u003e checkDictCase({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n     * true\n     * \u003e checkDictCase({\"fruit\": \"Orange\", \"taste\": \"Sweet\"})\n     * true\n     * \u003e checkDictCase({})\n     * false\n     */\n    public static Boolean checkDictCase(Object dict) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CheckDictCase",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_95.java",
    "test_prompt": "// CheckDictCaseTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckDictCase}.\n* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Object)} method.\n*/\nclass CheckDictCaseTest {",
    "method_signature": "checkDictCase(Object)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FixSpaces.java\npackage scenario3;\n\nclass FixSpaces {\n\n    /**\n     * * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     *\n     * fixSpaces(\"Example\") \u003d\u003d \"Example\"\n     * fixSpaces(\"Example 1\") \u003d\u003d \"Example_1\"\n     * fixSpaces(\" Example 2\") \u003d\u003d \"_Example_2\"\n     * fixSpaces(\" Example   3\") \u003d\u003d \"_Example-3\"\n     *\n     * \u003e fixSpaces(\"Example\")\n     * \"Example\"\n     * \u003e fixSpaces(\"Mudasir Hanif \")\n     * \"Mudasir_Hanif_\"\n     * \u003e fixSpaces(\"Yellow Yellow  Dirty  Fellow\")\n     * \"Yellow_Yellow__Dirty__Fellow\"\n     * \u003e fixSpaces(\"Exa   mple\")\n     * \"Exa-mple\"\n     * \u003e fixSpaces(\"   Exa 1 2 2 mple\")\n     * \"-Exa_1_2_2_mple\"\n     */\n    public static String fixSpaces(String text) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FixSpaces",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_140.java",
    "test_prompt": "// FixSpacesTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FixSpaces}.\n* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.\n*/\nclass FixSpacesTest {",
    "method_signature": "fixSpaces(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CompareOne.java\npackage scenario3;\n\nclass CompareOne {\n\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compareOne(1, 2.5) ➞ 2.5\n     * compareOne(1, \"2,3\") ➞ \"2,3\"\n     * compareOne(\"5,1\", \"6\") ➞ \"6\"\n     * compareOne(\"1\", 1) ➞ None\n     *\n     * \u003e compareOne(1, 2)\n     * 2\n     * \u003e compareOne(1, 2.5)\n     * 2.5\n     * \u003e compareOne(2, 3)\n     * 3\n     * \u003e compareOne(5, 6)\n     * 6\n     * \u003e compareOne(1, \"2,3\")\n     * \"2,3\"\n     * \u003e compareOne(\"5,1\", \"6\")\n     * \"6\"\n     * \u003e compareOne(\"1\", \"2\")\n     * \"2\"\n     * \u003e compareOne(\"1\", 1)\n     * null\n     */\n    public static Object compareOne(Object a, Object b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CompareOne",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_137.java",
    "test_prompt": "// CompareOneTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CompareOne}.\n* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.\n*/\nclass CompareOneTest {",
    "method_signature": "compareOne(Object, Object)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Solution.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples\n     * solution([5, 8, 7, 1]) \u003d\u003d\u003e 12\n     * solution([3, 3, 3, 3, 3]) \u003d\u003d\u003e 9\n     * solution([30, 13, 24, 321]) \u003d\u003d\u003e0\n     *\n     * \u003e solution([3, 3, 3, 3, 3])\n     * 9\n     * \u003e solution([30, 13, 24, 321])\n     * 0\n     * \u003e solution([5, 9])\n     * 5\n     * \u003e solution([2, 4, 8])\n     * 0\n     * \u003e solution([30, 13, 23, 32])\n     * 23\n     * \u003e solution([3, 13, 2, 9])\n     * 3\n     */\n    public static int solution(List\u003cInteger\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Solution",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_121.java",
    "test_prompt": "// SolutionTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solution}.\n* It contains ten unit test cases for the {@link Solution#solution(List)} method.\n*/\nclass SolutionTest {",
    "method_signature": "solution(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MeanAbsoluteDeviation.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MeanAbsoluteDeviation {\n\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD \u003d average | x - x_mean |\n     *\n     * \u003e meanAbsoluteDeviation([1.0, 2.0, 3.0])\n     * 0.6666666666666666\n     * \u003e meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     * \u003e meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n     * 1.2\n     */\n    public static Double meanAbsoluteDeviation(List\u003cDouble\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MeanAbsoluteDeviation",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_4.java",
    "test_prompt": "// MeanAbsoluteDeviationTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MeanAbsoluteDeviation}.\n* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.\n*/\nclass MeanAbsoluteDeviationTest {",
    "method_signature": "meanAbsoluteDeviation(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SumToN.java\npackage scenario3;\n\nclass SumToN {\n\n    /**\n     * sumToN is a function that sums numbers from 1 to n.\n     *\n     * \u003e sumToN(5)\n     * 15\n     * \u003e sumToN(10)\n     * 55\n     * \u003e sumToN(1)\n     * 1\n     * \u003e sumToN(6)\n     * 21\n     * \u003e sumToN(11)\n     * 66\n     * \u003e sumToN(30)\n     * 465\n     * \u003e sumToN(100)\n     * 5050\n     */\n    public static int sumToN(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SumToN",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_60.java",
    "test_prompt": "// SumToNTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumToN}.\n* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.\n*/\nclass SumToNTest {",
    "method_signature": "sumToN(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortEven.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SortEven {\n\n    /**\n     * This function takes a list l and returns a list l\u0027 such that\n     * l\u0027 is identical to l in the odd indices, while its values at the even indices are equal\n     * to the values of the even indices of l, but sorted.\n     *\n     * \u003e sortEven([1, 2, 3])\n     * [1, 2, 3]\n     * \u003e sortEven([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     * \u003e sortEven([1, 2, 3])\n     * [1, 2, 3]\n     * \u003e sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]\n     * \u003e sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\n     * [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]\n     */\n    public static List\u003cInteger\u003e sortEven(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortEven",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_37.java",
    "test_prompt": "// SortEvenTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortEven}.\n* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.\n*/\nclass SortEvenTest {",
    "method_signature": "sortEven(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RescaleToUnit.java\npackage scenario3;\n\nimport java.util.List;\n\nclass RescaleToUnit {\n\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     *\n     * \u003e rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     * \u003e rescaleToUnit([2.0, 49.9])\n     * [0.0, 1.0]\n     * \u003e rescaleToUnit([100.0, 49.9])\n     * [1.0, 0.0]\n     * \u003e rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     * \u003e rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])\n     * [0.25, 0.0, 1.0, 0.5, 0.75]\n     * \u003e rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])\n     * [0.25, 0.0, 1.0, 0.5, 0.75]\n     */\n    public static List\u003cDouble\u003e rescaleToUnit(List\u003cDouble\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RescaleToUnit",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_21.java",
    "test_prompt": "// RescaleToUnitTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RescaleToUnit}.\n* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.\n*/\nclass RescaleToUnitTest {",
    "method_signature": "rescaleToUnit(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ClosestInteger.java\npackage scenario3;\n\nclass ClosestInteger {\n\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Examples\n     * \u003e\u003e\u003e closestInteger(\"10\")\n     * 10\n     * \u003e\u003e\u003e closestInteger(\"15.3\")\n     * 15\n     *\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     * \u003e closestInteger(\"10\")\n     * 10\n     * \u003e closestInteger(\"14.5\")\n     * 15\n     * \u003e closestInteger(\"-15.5\")\n     * -16\n     * \u003e closestInteger(\"15.3\")\n     * 15\n     * \u003e closestInteger(\"0\")\n     * 0\n     */\n    public static int closestInteger(String value) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ClosestInteger",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_99.java",
    "test_prompt": "// ClosestIntegerTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClosestInteger}.\n* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.\n*/\nclass ClosestIntegerTest {",
    "method_signature": "closestInteger(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsSimplePower.java\npackage scenario3;\n\nclass IsSimplePower {\n\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int\u003dx\n     * For example:\n     * isSimplePower(1, 4) \u003d\u003e true\n     * isSimplePower(2, 2) \u003d\u003e true\n     * isSimplePower(8, 2) \u003d\u003e true\n     * isSimplePower(3, 2) \u003d\u003e false\n     * isSimplePower(3, 1) \u003d\u003e false\n     * isSimplePower(5, 3) \u003d\u003e false\n     *\n     * \u003e isSimplePower(16, 2)\n     * true\n     * \u003e isSimplePower(143214, 16)\n     * false\n     * \u003e isSimplePower(4, 2)\n     * true\n     * \u003e isSimplePower(9, 3)\n     * true\n     * \u003e isSimplePower(16, 4)\n     * true\n     * \u003e isSimplePower(24, 2)\n     * false\n     * \u003e isSimplePower(128, 4)\n     * false\n     * \u003e isSimplePower(12, 6)\n     * false\n     * \u003e isSimplePower(1, 1)\n     * true\n     * \u003e isSimplePower(1, 12)\n     * true\n     */\n    public static Boolean isSimplePower(int x, int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsSimplePower",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_76.java",
    "test_prompt": "// IsSimplePowerTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSimplePower}.\n* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.\n*/\nclass IsSimplePowerTest {",
    "method_signature": "isSimplePower(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountUpper.java\npackage scenario3;\n\nclass CountUpper {\n\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * countUpper(\u0027aBCdEf\u0027) returns 1\n     * countUpper(\u0027abcdefg\u0027) returns 0\n     * countUpper(\u0027dBBE\u0027) returns 0\n     *\n     * \u003e countUpper(\"abcdefg\")\n     * 0\n     * \u003e countUpper(\"dBBE\")\n     * 0\n     * \u003e countUpper(\"\")\n     * 0\n     * \u003e countUpper(\"EEEE\")\n     * 2\n     */\n    public static int countUpper(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CountUpper",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_98.java",
    "test_prompt": "// CountUpperTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpper}.\n* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.\n*/\nclass CountUpperTest {",
    "method_signature": "countUpper(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Iscube.java\npackage scenario3;\n\nclass Iscube {\n\n    /**\n     * * Write a function that takes an integer a and returns True\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) \u003d\u003d\u003e True\n     * iscube(2) \u003d\u003d\u003e False\n     * iscube(-1) \u003d\u003d\u003e True\n     * iscube(64) \u003d\u003d\u003e True\n     * iscube(0) \u003d\u003d\u003e True\n     * iscube(180) \u003d\u003d\u003e False\n     *\n     * \u003e iscube(1)\n     * true\n     * \u003e iscube(2)\n     * false\n     * \u003e iscube(-1)\n     * true\n     * \u003e iscube(64)\n     * true\n     * \u003e iscube(180)\n     * false\n     * \u003e iscube(1000)\n     * true\n     * \u003e iscube(0)\n     * true\n     * \u003e iscube(1729)\n     * false\n     */\n    public static Boolean iscube(int a) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Iscube",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_77.java",
    "test_prompt": "// IscubeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Iscube}.\n* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.\n*/\nclass IscubeTest {",
    "method_signature": "iscube(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FindClosestElements.java\npackage scenario3;\n\nimport java.util.List;\n\nclass FindClosestElements {\n\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     *\n     * \u003e findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\n     * [3.9, 4.0]\n     * \u003e findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])\n     * [5.0, 5.9]\n     * \u003e findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * [2.0, 2.2]\n     * \u003e findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * [2.0, 2.0]\n     * \u003e findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])\n     * [2.2, 3.1]\n     */\n    public static List\u003cDouble\u003e findClosestElements(List\u003cDouble\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FindClosestElements",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_20.java",
    "test_prompt": "// FindClosestElementsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindClosestElements}.\n* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.\n*/\nclass FindClosestElementsTest {",
    "method_signature": "findClosestElements(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FizzBuzz.java\npackage scenario3;\n\nclass FizzBuzz {\n\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     *\n     * \u003e fizzBuzz(50)\n     * 0\n     * \u003e fizzBuzz(78)\n     * 2\n     * \u003e fizzBuzz(79)\n     * 3\n     * \u003e fizzBuzz(50)\n     * 0\n     * \u003e fizzBuzz(78)\n     * 2\n     * \u003e fizzBuzz(79)\n     * 3\n     * \u003e fizzBuzz(100)\n     * 3\n     * \u003e fizzBuzz(200)\n     * 6\n     * \u003e fizzBuzz(4000)\n     * 192\n     * \u003e fizzBuzz(10000)\n     * 639\n     * \u003e fizzBuzz(100000)\n     * 8026\n     */\n    public static int fizzBuzz(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FizzBuzz",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_36.java",
    "test_prompt": "// FizzBuzzTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FizzBuzz}.\n* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.\n*/\nclass FizzBuzzTest {",
    "method_signature": "fizzBuzz(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Intersperse.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Intersperse {\n\n    /**\n     * Insert a number \u0027delimiter\u0027 between every two consecutive elements of input list `numbers\u0027.\n     *\n     * \u003e intersperse([], 4)\n     * []\n     * \u003e intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     * \u003e intersperse([], 7)\n     * []\n     * \u003e intersperse([5, 6, 3, 2], 8)\n     * [5, 8, 6, 8, 3, 8, 2]\n     * \u003e intersperse([2, 2, 2], 2)\n     * [2, 2, 2, 2, 2]\n     */\n    public static List\u003cObject\u003e intersperse(List\u003cObject\u003e numbers, int delimiter) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Intersperse",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_5.java",
    "test_prompt": "// IntersperseTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersperse}.\n* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.\n*/\nclass IntersperseTest {",
    "method_signature": "intersperse(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CorrectBracketing1.java\npackage scenario3;\n\nclass CorrectBracketing1 {\n\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * \u003e correctBracketing(\"()\")\n     * true\n     * \u003e correctBracketing(\"(()())\")\n     * true\n     * \u003e correctBracketing(\"()()(()())()\")\n     * true\n     * \u003e correctBracketing(\"()()((()()())())(()()(()))\")\n     * true\n     * \u003e correctBracketing(\"((()())))\")\n     * false\n     * \u003e correctBracketing(\")(()\")\n     * false\n     * \u003e correctBracketing(\"(\")\n     * false\n     * \u003e correctBracketing(\"((((\")\n     * false\n     * \u003e correctBracketing(\")\")\n     * false\n     * \u003e correctBracketing(\"(()\")\n     * false\n     * \u003e correctBracketing(\"()()(()())())(()\")\n     * false\n     * \u003e correctBracketing(\"()()(()())()))()\")\n     * false\n     */\n    public static Boolean correctBracketing(String brackets) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CorrectBracketing1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_61.java",
    "test_prompt": "// CorrectBracketing1Test.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing1}.\n* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.\n*/\nclass CorrectBracketing1Test {",
    "method_signature": "correctBracketing(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Maximum1.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Maximum1 {\n\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list\n     * of length k with the maximum k numbers in arr.\n     *\n     * Example 1:\n     *\n     * Input: arr \u003d [-3, -4, 5], k \u003d 3\n     * Output: [-4, -3, 5]\n     *\n     * Example 2:\n     *\n     * Input: arr \u003d [4, -4, 4], k \u003d 2\n     * Output: [4, 4]\n     *\n     * Example 3:\n     *\n     * Input: arr \u003d [-3, 2, 1, 2, -1, -2, 1], k \u003d 1\n     * Output: [2]\n     *\n     * Note:\n     * 1. The length of the array will be in the range of [1, 1000].\n     * 2. The elements in the array will be in the range of [-1000, 1000].\n     * 3. 0 \u003c\u003d k \u003c\u003d len(arr)\n     *\n     * \u003e maximum([-3, -4, 5], 3)\n     * [-4, -3, 5]\n     * \u003e maximum([4, -4, 4], 2)\n     * [4, 4]\n     * \u003e maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n     * [2]\n     * \u003e maximum([123, -123, 20, 0, 1, 2, -3], 3)\n     * [2, 20, 123]\n     * \u003e maximum([-123, 20, 0, 1, 2, -3], 4)\n     * [0, 1, 2, 20]\n     * \u003e maximum([5, 15, 0, 3, -13, -8, 0], 7)\n     * [-13, -8, 0, 0, 3, 5, 15]\n     * \u003e maximum([-1, 0, 2, 5, 3, -10], 2)\n     * [3, 5]\n     * \u003e maximum([1, 0, 5, -7], 1)\n     * [5]\n     * \u003e maximum([4, -4], 2)\n     * [-4, 4]\n     * \u003e maximum([-10, 10], 2)\n     * [-10, 10]\n     * \u003e maximum([1, 2, 3, -23, 243, -400, 0], 0)\n     * []\n     */\n    public static List\u003cObject\u003e maximum(List\u003cInteger\u003e arr, int k) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Maximum1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_120.java",
    "test_prompt": "// Maximum1Test.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Maximum1}.\n* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.\n*/\nclass Maximum1Test {",
    "method_signature": "maximum(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Solve.java\npackage scenario3;\n\nclass Solve {\n\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") \u003d \"4321\"\n     * solve(\"ab\") \u003d \"AB\"\n     * solve(\"#a@C\") \u003d \"#A@c\"\n     *\n     * \u003e solve(\"AsDf\")\n     * \"aSdF\"\n     * \u003e solve(\"1234\")\n     * \"4321\"\n     * \u003e solve(\"ab\")\n     * \"AB\"\n     * \u003e solve(\"#a@C\")\n     * \"#A@c\"\n     * \u003e solve(\"#AsdfW^45\")\n     * \"#aSDFw^45\"\n     * \u003e solve(\"#6@2\")\n     * \"2@6#\"\n     * \u003e solve(\"#$a^D\")\n     * \"#$A^d\"\n     * \u003e solve(\"#ccc\")\n     * \"#CCC\"\n     */\n    public static String solve(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Solve",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_161.java",
    "test_prompt": "// SolveTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve}.\n* It contains ten unit test cases for the {@link Solve#solve(String)} method.\n*/\nclass SolveTest {",
    "method_signature": "solve(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LargestSmallestIntegers.java\npackage scenario3;\n\nimport java.util.List;\n\nclass LargestSmallestIntegers {\n\n    /**\n     * * Create a function that returns a tuple (a, b), where \u0027a\u0027 is\n     * the largest of negative integers, and \u0027b\u0027 is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largestSmallestIntegers([2, 4, 1, 3, 5, 7]) \u003d\u003d (None, 1)\n     * largestSmallestIntegers([]) \u003d\u003d (None, None)\n     * largestSmallestIntegers([0]) \u003d\u003d (None, None)\n     *\n     * \u003e largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n     * [null, 1]\n     * \u003e largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])\n     * [null, 1]\n     * \u003e largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])\n     * [-2, 1]\n     * \u003e largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])\n     * [-7, 2]\n     * \u003e largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])\n     * [-9, 2]\n     * \u003e largestSmallestIntegers([])\n     * [null, null]\n     * \u003e largestSmallestIntegers([0])\n     * [null, null]\n     * \u003e largestSmallestIntegers([-1, -3, -5, -6])\n     * [-1, null]\n     * \u003e largestSmallestIntegers([-1, -3, -5, -6, 0])\n     * [-1, null]\n     * \u003e largestSmallestIntegers([-6, -4, -4, -3, 1])\n     * [-3, 1]\n     * \u003e largestSmallestIntegers([-6, -4, -4, -3, -100, 1])\n     * [-3, 1]\n     */\n    public static List\u003cInteger\u003e largestSmallestIntegers(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "LargestSmallestIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_136.java",
    "test_prompt": "// LargestSmallestIntegersTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestSmallestIntegers}.\n* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.\n*/\nclass LargestSmallestIntegersTest {",
    "method_signature": "largestSmallestIntegers(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FileNameCheck.java\npackage scenario3;\n\nclass FileNameCheck {\n\n    /**\n     * Create a function which takes a string representing a file\u0027s name, and returns\n     * \u0027Yes\u0027 if the file\u0027s name is valid, and returns \u0027No\u0027 otherwise.\n     * A file\u0027s name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits (\u00270\u0027-\u00279\u0027) in the file\u0027s name.\n     * - The file\u0027s name contains exactly one dot \u0027.\u0027\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     * the latin alphabet (\u0027a\u0027-\u0027z\u0027 and \u0027A\u0027-\u0027Z\u0027).\n     * - The substring after the dot should be one of these: [\u0027txt\u0027, \u0027exe\u0027, \u0027dll\u0027]\n     * Examples:\n     * fileNameCheck(\"example.txt\") # \u003d\u003e \u0027Yes\u0027\n     * fileNameCheck(\"1example.dll\") # \u003d\u003e \u0027No\u0027 (the name should start with a latin alphabet letter)\n     *\n     * \u003e fileNameCheck(\"example.txt\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"1example.dll\")\n     * \"No\"\n     * \u003e fileNameCheck(\"s1sdf3.asd\")\n     * \"No\"\n     * \u003e fileNameCheck(\"K.dll\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"MY16FILE3.exe\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"His12FILE94.exe\")\n     * \"No\"\n     * \u003e fileNameCheck(\"_Y.txt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"?aREYA.exe\")\n     * \"No\"\n     * \u003e fileNameCheck(\"/this_is_valid.dll\")\n     * \"No\"\n     * \u003e fileNameCheck(\"this_is_valid.wow\")\n     * \"No\"\n     * \u003e fileNameCheck(\"this_is_valid.txt\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"this_is_valid.txtexe\")\n     * \"No\"\n     * \u003e fileNameCheck(\"#this2_i4s_5valid.ten\")\n     * \"No\"\n     * \u003e fileNameCheck(\"@this1_is6_valid.exe\")\n     * \"No\"\n     * \u003e fileNameCheck(\"this_is_12valid.6exe4.txt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"all.exe.txt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"I563_No.exe\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"Is3youfault.txt\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"no_one#knows.dll\")\n     * \"Yes\"\n     * \u003e fileNameCheck(\"1I563_Yes3.exe\")\n     * \"No\"\n     * \u003e fileNameCheck(\"I563_Yes3.txtt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"final..txt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"final132\")\n     * \"No\"\n     * \u003e fileNameCheck(\"_f4indsartal132.\")\n     * \"No\"\n     * \u003e fileNameCheck(\".txt\")\n     * \"No\"\n     * \u003e fileNameCheck(\"s.\")\n     * \"No\"\n     */\n    public static String fileNameCheck(String fileName) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FileNameCheck",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_141.java",
    "test_prompt": "// FileNameCheckTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileNameCheck}.\n* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.\n*/\nclass FileNameCheckTest {",
    "method_signature": "fileNameCheck(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Skjkasdkd.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Skjkasdkd {\n\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * Examples:\n     * For lst \u003d [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst \u003d [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst \u003d [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst \u003d [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst \u003d [0,81,12,3,1,21] the output should be 3\n     * For lst \u003d [0,8,1,2,1,7] the output should be 7\n     *\n     * \u003e skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n     * 10\n     * \u003e skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n     * 25\n     * \u003e skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n     * 13\n     * \u003e skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n     * 11\n     * \u003e skjkasdkd([0, 81, 12, 3, 1, 21])\n     * 3\n     * \u003e skjkasdkd([0, 8, 1, 2, 1, 7])\n     * 7\n     * \u003e skjkasdkd([8191])\n     * 19\n     * \u003e skjkasdkd([8191, 123456, 127, 7])\n     * 19\n     * \u003e skjkasdkd([127, 97, 8192])\n     * 10\n     */\n    public static int skjkasdkd(List\u003cInteger\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Skjkasdkd",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_94.java",
    "test_prompt": "// SkjkasdkdTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Skjkasdkd}.\n* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.\n*/\nclass SkjkasdkdTest {",
    "method_signature": "skjkasdkd(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortArray.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SortArray {\n\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * \u003e\u003e\u003e sortArray([1, 5, 2, 3, 4]) \u003d\u003d [1, 2, 3, 4, 5]\n     * \u003e\u003e\u003e sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     * \u003e sortArray([1, 5, 2, 3, 4])\n     * [1, 2, 4, 3, 5]\n     * \u003e sortArray([1, 0, 2, 3, 4])\n     * [0, 1, 2, 4, 3]\n     * \u003e sortArray([])\n     * []\n     * \u003e sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\n     * [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n     * \u003e sortArray([3, 6, 44, 12, 32, 5])\n     * [32, 3, 5, 6, 12, 44]\n     * \u003e sortArray([2, 4, 8, 16, 32])\n     * [2, 4, 8, 16, 32]\n     * \u003e sortArray([2, 4, 8, 16, 32])\n     * [2, 4, 8, 16, 32]\n     */\n    public static List\u003cObject\u003e sortArray(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortArray",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_116.java",
    "test_prompt": "// SortArrayTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray}.\n* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.\n*/\nclass SortArrayTest {",
    "method_signature": "sortArray(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MakeAPile.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MakeAPile {\n\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * \u003e\u003e\u003e makeAPile(3)\n     * [3, 5, 7]\n     *\n     * \u003e makeAPile(3)\n     * [3, 5, 7]\n     * \u003e makeAPile(4)\n     * [4, 6, 8, 10]\n     * \u003e makeAPile(5)\n     * [5, 7, 9, 11, 13]\n     * \u003e makeAPile(6)\n     * [6, 8, 10, 12, 14, 16]\n     * \u003e makeAPile(8)\n     * [8, 10, 12, 14, 16, 18, 20, 22]\n     */\n    public static List\u003cInteger\u003e makeAPile(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MakeAPile",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_100.java",
    "test_prompt": "// MakeAPileTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakeAPile}.\n* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.\n*/\nclass MakeAPileTest {",
    "method_signature": "makeAPile(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RightAngleTriangle.java\npackage scenario3;\n\nclass RightAngleTriangle {\n\n    /**\n     * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or\n     * 90 degree.\n     * Example:\n     * rightAngleTriangle(3, 4, 5) \u003d\u003d True\n     * rightAngleTriangle(1, 2, 3) \u003d\u003d False\n     *\n     * \u003e rightAngleTriangle(3, 4, 5)\n     * true\n     * \u003e rightAngleTriangle(1, 2, 3)\n     * false\n     * \u003e rightAngleTriangle(10, 6, 8)\n     * true\n     * \u003e rightAngleTriangle(2, 2, 2)\n     * false\n     * \u003e rightAngleTriangle(7, 24, 25)\n     * true\n     * \u003e rightAngleTriangle(10, 5, 7)\n     * false\n     * \u003e rightAngleTriangle(5, 12, 13)\n     * true\n     * \u003e rightAngleTriangle(15, 8, 17)\n     * true\n     * \u003e rightAngleTriangle(48, 55, 73)\n     * true\n     * \u003e rightAngleTriangle(1, 1, 1)\n     * false\n     * \u003e rightAngleTriangle(2, 2, 10)\n     * false\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RightAngleTriangle",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_157.java",
    "test_prompt": "// RightAngleTriangleTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RightAngleTriangle}.\n* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.\n*/\nclass RightAngleTriangleTest {",
    "method_signature": "rightAngleTriangle(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PrimeLength.java\npackage scenario3;\n\nclass PrimeLength {\n\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * primeLength(\u0027Hello\u0027) \u003d\u003d True\n     * primeLength(\u0027abcdcba\u0027) \u003d\u003d True\n     * primeLength(\u0027kittens\u0027) \u003d\u003d True\n     * primeLength(\u0027orange\u0027) \u003d\u003d False\n     *\n     * \u003e primeLength(\"Hello\")\n     * true\n     * \u003e primeLength(\"abcdcba\")\n     * true\n     * \u003e primeLength(\"kittens\")\n     * true\n     * \u003e primeLength(\"orange\")\n     * false\n     * \u003e primeLength(\"wow\")\n     * true\n     * \u003e primeLength(\"world\")\n     * true\n     * \u003e primeLength(\"MadaM\")\n     * true\n     * \u003e primeLength(\"Wow\")\n     * true\n     * \u003e primeLength(\"\")\n     * false\n     * \u003e primeLength(\"HI\")\n     * true\n     * \u003e primeLength(\"go\")\n     * true\n     * \u003e primeLength(\"gogo\")\n     * false\n     * \u003e primeLength(\"aaaaaaaaaaaaaaa\")\n     * false\n     * \u003e primeLength(\"Madam\")\n     * true\n     * \u003e primeLength(\"M\")\n     * false\n     * \u003e primeLength(\"0\")\n     * false\n     */\n    public static Boolean primeLength(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "PrimeLength",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_82.java",
    "test_prompt": "// PrimeLengthTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeLength}.\n* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.\n*/\nclass PrimeLengthTest {",
    "method_signature": "primeLength(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RollingMax.java\npackage scenario3;\n\nimport java.util.List;\n\nclass RollingMax {\n\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     *\n     * \u003e rollingMax([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     * \u003e rollingMax([])\n     * []\n     * \u003e rollingMax([1, 2, 3, 4])\n     * [1, 2, 3, 4]\n     * \u003e rollingMax([4, 3, 2, 1])\n     * [4, 4, 4, 4]\n     * \u003e rollingMax([3, 2, 3, 100, 3])\n     * [3, 3, 3, 100, 100]\n     */\n    public static List\u003cObject\u003e rollingMax(List\u003cObject\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RollingMax",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_9.java",
    "test_prompt": "// RollingMaxTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RollingMax}.\n* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.\n*/\nclass RollingMaxTest {",
    "method_signature": "rollingMax(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountDistinctCharacters.java\npackage scenario3;\n\nclass CountDistinctCharacters {\n\n    /**\n     * Given a string, find out how many distinct characters (regardless of case)  it consists  of.\n     *\n     * \u003e countDistinctCharacters(\"xyzXYZ\")\n     * 3\n     * \u003e countDistinctCharacters(\"Jerry\")\n     * 4\n     * \u003e countDistinctCharacters(\"\")\n     * 0\n     * \u003e countDistinctCharacters(\"abcde\")\n     * 5\n     * \u003e countDistinctCharacters(\"abcdecadeCADE\")\n     * 5\n     * \u003e countDistinctCharacters(\"aaaaAAAAaaaa\")\n     * 1\n     * \u003e countDistinctCharacters(\"Jerry jERRY JeRRRY\")\n     * 5\n     */\n    public static int countDistinctCharacters(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CountDistinctCharacters",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_16.java",
    "test_prompt": "// CountDistinctCharactersTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountDistinctCharacters}.\n* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.\n*/\nclass CountDistinctCharactersTest {",
    "method_signature": "countDistinctCharacters(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CarRaceCollision.java\npackage scenario3;\n\nclass CarRaceCollision {\n\n    /**\n     * * Imagine a road that\u0027s a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that\u0027s moving left to right hits a car that\u0027s moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     * This function outputs the number of such collisions.\n     *\n     * \u003e carRaceCollision(2)\n     * 4\n     * \u003e carRaceCollision(3)\n     * 9\n     * \u003e carRaceCollision(4)\n     * 16\n     * \u003e carRaceCollision(8)\n     * 64\n     * \u003e carRaceCollision(10)\n     * 100\n     */\n    public static int carRaceCollision(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CarRaceCollision",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_41.java",
    "test_prompt": "// CarRaceCollisionTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CarRaceCollision}.\n* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.\n*/\nclass CarRaceCollisionTest {",
    "method_signature": "carRaceCollision(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Monotonic.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Monotonic {\n\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     *\n     * \u003e monotonic([1, 2, 4, 10])\n     * true\n     * \u003e monotonic([1, 2, 4, 20])\n     * true\n     * \u003e monotonic([1, 20, 4, 10])\n     * false\n     * \u003e monotonic([4, 1, 0, -10])\n     * true\n     * \u003e monotonic([4, 1, 1, 0])\n     * true\n     * \u003e monotonic([1, 2, 3, 2, 5, 60])\n     * false\n     * \u003e monotonic([1, 2, 3, 4, 5, 60])\n     * true\n     * \u003e monotonic([9, 9, 9, 9])\n     * true\n     */\n    public static Boolean monotonic(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Monotonic",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_57.java",
    "test_prompt": "// MonotonicTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Monotonic}.\n* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.\n*/\nclass MonotonicTest {",
    "method_signature": "monotonic(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Digits.java\npackage scenario3;\n\nclass Digits {\n\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  \u003d\u003d 1\n     * digits(4)  \u003d\u003d 0\n     * digits(235) \u003d\u003d 15\n     *\n     * \u003e digits(5)\n     * 5\n     * \u003e digits(54)\n     * 5\n     * \u003e digits(120)\n     * 1\n     * \u003e digits(5014)\n     * 5\n     * \u003e digits(98765)\n     * 315\n     * \u003e digits(5576543)\n     * 2625\n     * \u003e digits(2468)\n     * 0\n     */\n    public static int digits(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Digits",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_131.java",
    "test_prompt": "// DigitsTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digits}.\n* It contains ten unit test cases for the {@link Digits#digits(int)} method.\n*/\nclass DigitsTest {",
    "method_signature": "digits(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Intersection.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Intersection {\n\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval \u003d (start, end) \u003d (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don\u0027t intersect, return \"NO\".\n     *\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) \u003d\u003d\u003e \"NO\"\n     * intersection((-1, 1), (0, 4)) \u003d\u003d\u003e \"NO\"\n     * intersection((-3, -1), (-5, 5)) \u003d\u003d\u003e \"YES\"\n     *\n     * \u003e intersection([1, 2], [2, 3])\n     * \"NO\"\n     * \u003e intersection([-1, 1], [0, 4])\n     * \"NO\"\n     * \u003e intersection([-3, -1], [-5, 5])\n     * \"YES\"\n     * \u003e intersection([-2, 2], [-4, 0])\n     * \"YES\"\n     * \u003e intersection([-11, 2], [-1, -1])\n     * \"NO\"\n     * \u003e intersection([1, 2], [3, 5])\n     * \"NO\"\n     * \u003e intersection([1, 2], [1, 2])\n     * \"NO\"\n     * \u003e intersection([-2, -2], [-3, -2])\n     * \"NO\"\n     */\n    public static String intersection(List\u003cInteger\u003e interval1, List\u003cInteger\u003e interval2) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Intersection",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_127.java",
    "test_prompt": "// IntersectionTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersection}.\n* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.\n*/\nclass IntersectionTest {",
    "method_signature": "intersection(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Encrypt.java\npackage scenario3;\n\nclass Encrypt {\n\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\u0027hi\u0027) returns \u0027lm\u0027\n     * encrypt(\u0027asdfghjkl\u0027) returns \u0027ewhjklnop\u0027\n     * encrypt(\u0027gf\u0027) returns \u0027kj\u0027\n     * encrypt(\u0027et\u0027) returns \u0027ix\u0027\n     *\n     * \u003e encrypt(\"hi\")\n     * \"lm\"\n     * \u003e encrypt(\"asdfghjkl\")\n     * \"ewhjklnop\"\n     * \u003e encrypt(\"gf\")\n     * \"kj\"\n     * \u003e encrypt(\"et\")\n     * \"ix\"\n     * \u003e encrypt(\"faewfawefaewg\")\n     * \"jeiajeaijeiak\"\n     * \u003e encrypt(\"hellomyfriend\")\n     * \"lippsqcjvmirh\"\n     * \u003e encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n     * \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n     * \u003e encrypt(\"a\")\n     * \"e\"\n     */\n    public static String encrypt(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Encrypt",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_89.java",
    "test_prompt": "// EncryptTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encrypt}.\n* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.\n*/\nclass EncryptTest {",
    "method_signature": "encrypt(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Digitsum.java\npackage scenario3;\n\nclass Digitsum {\n\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only\u0027\n     * ASCII codes.\n     * Examples:\n     * digitSum(\"\") \u003d\u003e 0\n     * digitSum(\"abAB\") \u003d\u003e 131\n     * digitSum(\"abcCd\") \u003d\u003e 67\n     * digitSum(\"helloE\") \u003d\u003e 69\n     * digitSum(\"woArBld\") \u003d\u003e 131\n     * digitSum(\"aAaaaXa\") \u003d\u003e 153\n     *\n     * \u003e digitSum(\"\")\n     * 0\n     * \u003e digitSum(\"abAB\")\n     * 131\n     * \u003e digitSum(\"abcCd\")\n     * 67\n     * \u003e digitSum(\"helloE\")\n     * 69\n     * \u003e digitSum(\"woArBld\")\n     * 131\n     * \u003e digitSum(\"aAaaaXa\")\n     * 153\n     * \u003e digitSum(\" How are yOu?\")\n     * 151\n     * \u003e digitSum(\"You arE Very Smart\")\n     * 327\n     */\n    public static int digitSum(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Digitsum",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_66.java",
    "test_prompt": "// DigitsumTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digitsum}.\n* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.\n*/\nclass DigitsumTest {",
    "method_signature": "digitSum(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TruncateNumber.java\npackage scenario3;\n\nclass TruncateNumber {\n\n    /**\n     * Given a positive floating point number, it can be decomposed into and integer part\n     * (the largest integer smaller than given number) and decimals (leftover part always smaller than 1).\n     * Return the decimal part of the number.\n     *\n     * \u003e truncateNumber(3.5)\n     * 0.5\n     * \u003e truncateNumber(1.33)\n     * 0.33\n     * \u003e truncateNumber(123.456)\n     * 0.456\n     */\n    // write a code with solving floating point issue\n    public static Double truncateNumber(Double number) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "TruncateNumber",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_2.java",
    "test_prompt": "// TruncateNumberTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TruncateNumber}.\n* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.\n*/\nclass TruncateNumberTest {",
    "method_signature": "truncateNumber(Double)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsPrime.java\npackage scenario3;\n\nclass IsPrime {\n\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     *\n     * \u003e isPrime(6)\n     * false\n     * \u003e isPrime(101)\n     * true\n     * \u003e isPrime(11)\n     * true\n     * \u003e isPrime(13441)\n     * true\n     * \u003e isPrime(61)\n     * true\n     * \u003e isPrime(4)\n     * false\n     * \u003e isPrime(1)\n     * false\n     * \u003e isPrime(5)\n     * true\n     * \u003e isPrime(11)\n     * true\n     * \u003e isPrime(17)\n     * true\n     * \u003e isPrime(85)\n     * false\n     * \u003e isPrime(77)\n     * false\n     * \u003e isPrime(255379)\n     * false\n     */\n    public static Boolean isPrime(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsPrime",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_31.java",
    "test_prompt": "// IsPrimeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPrime}.\n* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.\n*/\nclass IsPrimeTest {",
    "method_signature": "isPrime(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FlipCase.java\npackage scenario3;\n\nclass FlipCase {\n\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * \u003e flipCase(\"Hello\")\n     * \"hELLO\"\n     * \u003e flipCase(\"\")\n     * \"\"\n     * \u003e flipCase(\"Hello!\")\n     * \"hELLO!\"\n     * \u003e flipCase(\"These violent delights have violent ends\")\n     * \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\n     */\n    public static String flipCase(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FlipCase",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_27.java",
    "test_prompt": "// FlipCaseTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FlipCase}.\n* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.\n*/\nclass FlipCaseTest {",
    "method_signature": "flipCase(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StrangeSortList.java\npackage scenario3;\n\nimport java.util.List;\n\nclass StrangeSortList {\n\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) \u003d\u003d [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) \u003d\u003d [5, 5, 5, 5]\n     * strange_sort_list([]) \u003d\u003d []\n     *\n     * \u003e strangeSortList([1, 2, 3, 4])\n     * [1, 4, 2, 3]\n     * \u003e strangeSortList([5, 6, 7, 8, 9])\n     * [5, 9, 6, 8, 7]\n     * \u003e strangeSortList([1, 2, 3, 4, 5])\n     * [1, 5, 2, 4, 3]\n     * \u003e strangeSortList([5, 6, 7, 8, 9, 1])\n     * [1, 9, 5, 8, 6, 7]\n     * \u003e strangeSortList([5, 5, 5, 5])\n     * [5, 5, 5, 5]\n     * \u003e strangeSortList([])\n     * []\n     * \u003e strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])\n     * [1, 8, 2, 7, 3, 6, 4, 5]\n     * \u003e strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])\n     * [-5, 5, -5, 5, 0, 2, 2, 2]\n     * \u003e strangeSortList([111111])\n     * [111111]\n     */\n    public static List\u003cObject\u003e strangeSortList(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StrangeSortList",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_70.java",
    "test_prompt": "// StrangeSortListTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrangeSortList}.\n* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.\n*/\nclass StrangeSortListTest {",
    "method_signature": "strangeSortList(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Fib4.java\npackage scenario3;\n\nclass Fib4 {\n\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that\u0027s defined as follows:\n     * fib4(0) -\u003e 0\n     * fib4(1) -\u003e 0\n     * fib4(2) -\u003e 2\n     * fib4(3) -\u003e 0\n     * fib4(n) -\u003e fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     *\n     * \u003e fib4(5)\n     * 4\n     * \u003e fib4(6)\n     * 8\n     * \u003e fib4(7)\n     * 14\n     * \u003e fib4(5)\n     * 4\n     * \u003e fib4(8)\n     * 28\n     * \u003e fib4(10)\n     * 104\n     * \u003e fib4(12)\n     * 386\n     */\n    public static int fib4(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Fib4",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_46.java",
    "test_prompt": "// Fib4Test.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib4}.\n* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.\n*/\nclass Fib4Test {",
    "method_signature": "fib4(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StringXor.java\npackage scenario3;\n\nclass StringXor {\n\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * \u003e stringXor(\"010\", \"110\")\n     * \"100\"\n     * \u003e stringXor(\"111000\", \"101010\")\n     * \"010010\"\n     * \u003e stringXor(\"1\", \"1\")\n     * \"0\"\n     * \u003e stringXor(\"0101\", \"0000\")\n     * \"0101\"\n     */\n    public static String stringXor(String a, String b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StringXor",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_11.java",
    "test_prompt": "// StringXorTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringXor}.\n* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.\n*/\nclass StringXorTest {",
    "method_signature": "stringXor(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Add1.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Add1 {\n\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n     *\n     * Examples:\n     * add([4, 2, 6, 7]) \u003d\u003d\u003e 2\n     *\n     * \u003e add([4, 88])\n     * 88\n     * \u003e add([4, 5, 6, 7, 2, 122])\n     * 122\n     * \u003e add([4, 0, 6, 7])\n     * 0\n     * \u003e add([4, 4, 6, 8])\n     * 12\n     */\n    public static int add(List\u003cInteger\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Add1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_85.java",
    "test_prompt": "// Add1Test.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add1}.\n* It contains ten unit test cases for the {@link Add1#add(List)} method.\n*/\nclass Add1Test {",
    "method_signature": "add(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// XOrY.java\npackage scenario3;\n\nclass XOrY {\n\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for xOrY(7, 34, 12) \u003d\u003d 34\n     * for xOrY(15, 8, 5) \u003d\u003d 5\n     *\n     * \u003e xOrY(7, 34, 12)\n     * 34\n     * \u003e xOrY(15, 8, 5)\n     * 5\n     * \u003e xOrY(3, 33, 5212)\n     * 33\n     * \u003e xOrY(1259, 3, 52)\n     * 3\n     * \u003e xOrY(7919, -1, 12)\n     * -1\n     * \u003e xOrY(3609, 1245, 583)\n     * 583\n     * \u003e xOrY(91, 56, 129)\n     * 129\n     * \u003e xOrY(6, 34, 1234)\n     * 1234\n     * \u003e xOrY(1, 2, 0)\n     * 0\n     * \u003e xOrY(2, 2, 0)\n     * 2\n     */\n    public static int xOrY(int n, int x, int y) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "XOrY",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_150.java",
    "test_prompt": "// XOrYTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XOrY}.\n* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.\n*/\nclass XOrYTest {",
    "method_signature": "xOrY(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EvenOddPalindrome.java\npackage scenario3;\n\nimport java.util.List;\n\nclass EvenOddPalindrome {\n\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * Example 1:\n     *\n     * Input: 3\n     * Output: (1, 2)\n     * Explanation:\n     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n     *\n     * Example 2:\n     *\n     * Input: 12\n     * Output: (4, 6)\n     * Explanation:\n     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n     *\n     * Note:\n     * 1. 1 \u003c\u003d n \u003c\u003d 10^3\n     * 2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     * \u003e evenOddPalindrome(123)\n     * [8, 13]\n     * \u003e evenOddPalindrome(12)\n     * [4, 6]\n     * \u003e evenOddPalindrome(3)\n     * [1, 2]\n     * \u003e evenOddPalindrome(63)\n     * [6, 8]\n     * \u003e evenOddPalindrome(25)\n     * [5, 6]\n     * \u003e evenOddPalindrome(19)\n     * [4, 6]\n     * \u003e evenOddPalindrome(9)\n     * [4, 5]\n     * \u003e evenOddPalindrome(1)\n     * [0, 1]\n     */\n    public static List\u003cInteger\u003e evenOddPalindrome(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "EvenOddPalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_107.java",
    "test_prompt": "// EvenOddPalindromeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddPalindrome}.\n* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.\n*/\nclass EvenOddPalindromeTest {",
    "method_signature": "evenOddPalindrome(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Histogram.java\npackage scenario3;\n\nclass Histogram {\n\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\n     * Example:\n     * histogram(\u0027a b c\u0027) \u003d\u003d {\u0027a\u0027: 1, \u0027b\u0027: 1, \u0027c\u0027: 1}\n     * histogram(\u0027a b b a\u0027) \u003d\u003d {\u0027a\u0027: 2, \u0027b\u0027: 2}\n     * histogram(\u0027a b c a b\u0027) \u003d\u003d {\u0027a\u0027: 2, \u0027b\u0027: 2}\n     * histogram(\u0027b b b b a\u0027) \u003d\u003d {\u0027b\u0027: 4}\n     * histogram(\u0027\u0027) \u003d\u003d {}\n     *\n     * \u003e histogram(\"a b b a\")\n     * {\"a\": 2, \"b\": 2}\n     * \u003e histogram(\"a b c a b\")\n     * {\"a\": 2, \"b\": 2}\n     * \u003e histogram(\"a b c d g\")\n     * {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1}\n     * \u003e histogram(\"r t g\")\n     * {\"r\": 1, \"t\": 1, \"g\": 1}\n     * \u003e histogram(\"b b b b a\")\n     * {\"b\": 4}\n     * \u003e histogram(\"r t g\")\n     * {\"r\": 1, \"t\": 1, \"g\": 1}\n     * \u003e histogram(\"\")\n     * {}\n     * \u003e histogram(\"a\")\n     * {\"a\": 1}\n     */\n    public static Object histogram(String test) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Histogram",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_111.java",
    "test_prompt": "// HistogramTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Histogram}.\n* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.\n*/\nclass HistogramTest {",
    "method_signature": "histogram(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Encode.java\npackage scenario3;\n\nclass Encode {\n\n    /**\n     * * Write a function that takes a message, and encodes in such a\n     * way that it swaps case of all letters, replaces all vowels in\n     * the message with the letter that appears 2 places ahead of that\n     * vowel in the english alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * \u003e\u003e\u003e encode(\u0027test\u0027)\n     * \u0027TGST\u0027\n     * \u003e\u003e\u003e encode(\u0027This is a message\u0027)\n     * \u0027tHKS KS C MGSSCGG\u0027\n     *\n     * \u003e encode(\"TEST\")\n     * \"tgst\"\n     * \u003e encode(\"Mudasir\")\n     * \"mWDCSKR\"\n     * \u003e encode(\"YES\")\n     * \"ygs\"\n     * \u003e encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     * \u003e encode(\"I DoNt KnOw WhAt tO WrItE\")\n     * \"k dQnT kNqW wHcT Tq wRkTg\"\n     */\n    public static String encode(String message) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Encode",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_93.java",
    "test_prompt": "// EncodeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encode}.\n* It contains ten unit test cases for the {@link Encode#encode(String)} method.\n*/\nclass EncodeTest {",
    "method_signature": "encode(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Specialfilter.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Specialfilter {\n\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) \u003d\u003e 1\n     * specialFilter([33, -2, -3, 45, 21, 109]) \u003d\u003e 2\n     *\n     * \u003e specialfilter([5, -2, 1, -5])\n     * 0\n     * \u003e specialfilter([15, -73, 14, -15])\n     * 1\n     * \u003e specialfilter([33, -2, -3, 45, 21, 109])\n     * 2\n     * \u003e specialfilter([43, -12, 93, 125, 121, 109])\n     * 4\n     * \u003e specialfilter([71, -2, -33, 75, 21, 19])\n     * 3\n     * \u003e specialfilter([1])\n     * 0\n     * \u003e specialfilter([])\n     * 0\n     */\n    public static int specialfilter(List\u003cObject\u003e nums) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Specialfilter",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_146.java",
    "test_prompt": "// SpecialfilterTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Specialfilter}.\n* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.\n*/\nclass SpecialfilterTest {",
    "method_signature": "specialfilter(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetMaxTriples.java\npackage scenario3;\n\nclass GetMaxTriples {\n\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 ≤ i ≤ n), the value of a[i] \u003d i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i \u003c j \u003c k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n \u003d 5\n     * Output: 1\n     * Explanation:\n     * a \u003d [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     *\n     * \u003e getMaxTriples(5)\n     * 1\n     * \u003e getMaxTriples(6)\n     * 4\n     * \u003e getMaxTriples(10)\n     * 36\n     * \u003e getMaxTriples(100)\n     * 53361\n     */\n    public static int getMaxTriples(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GetMaxTriples",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_147.java",
    "test_prompt": "// GetMaxTriplesTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetMaxTriples}.\n* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.\n*/\nclass GetMaxTriplesTest {",
    "method_signature": "getMaxTriples(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AnyInt.java\npackage scenario3;\n\nclass AnyInt {\n\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * anyInt(5, 2, 7) ➞ True\n     *\n     * anyInt(3, 2, 2) ➞ False\n     *\n     * anyInt(3, -2, 1) ➞ True\n     *\n     * anyInt(3.6, -2.2, 2) ➞ False\n     *\n     * \u003e anyInt(2, 3, 1)\n     * true\n     * \u003e anyInt(2.5, 2, 3)\n     * false\n     * \u003e anyInt(1.5, 5, 3.5)\n     * false\n     * \u003e anyInt(2, 6, 2)\n     * false\n     * \u003e anyInt(4, 2, 2)\n     * true\n     * \u003e anyInt(2.2, 2.2, 2.2)\n     * false\n     * \u003e anyInt(-4, 6, 2)\n     * true\n     * \u003e anyInt(2, 1, 1)\n     * true\n     * \u003e anyInt(3, 4, 7)\n     * true\n     * \u003e anyInt(3.0, 4, 7)\n     * false\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "AnyInt",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_92.java",
    "test_prompt": "// AnyIntTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyInt}.\n* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.\n*/\nclass AnyIntTest {",
    "method_signature": "anyInt(Number, Number, Number)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Exchange.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Exchange {\n\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) \u003d\u003e \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) \u003d\u003e \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     * \u003e exchange([1, 2, 3, 4], [1, 2, 3, 4])\n     * \"YES\"\n     * \u003e exchange([1, 2, 3, 4], [1, 5, 3, 4])\n     * \"NO\"\n     * \u003e exchange([1, 2, 3, 4], [2, 1, 4, 3])\n     * \"YES\"\n     * \u003e exchange([5, 7, 3], [2, 6, 4])\n     * \"YES\"\n     * \u003e exchange([5, 7, 3], [2, 6, 3])\n     * \"NO\"\n     * \u003e exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\n     * \"NO\"\n     * \u003e exchange([100, 200], [200, 200])\n     * \"YES\"\n     */\n    public static String exchange(List\u003cInteger\u003e lst1, List\u003cInteger\u003e lst2) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Exchange",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_110.java",
    "test_prompt": "// ExchangeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exchange}.\n* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.\n*/\nclass ExchangeTest {",
    "method_signature": "exchange(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// F.java\npackage scenario3;\n\nimport java.util.List;\n\nclass F {\n\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) \u003d\u003d [1, 2, 6, 24, 15]\n     *\n     * \u003e f(5)\n     * [1, 2, 6, 24, 15]\n     * \u003e f(7)\n     * [1, 2, 6, 24, 15, 720, 28]\n     * \u003e f(1)\n     * [1]\n     * \u003e f(3)\n     * [1, 2, 6]\n     */\n    public static List\u003cInteger\u003e f(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "F",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_106.java",
    "test_prompt": "// FTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link F}.\n* It contains ten unit test cases for the {@link F#f(int)} method.\n*/\nclass FTest {",
    "method_signature": "f(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DoubleTheDifference.java\npackage scenario3;\n\nimport java.util.List;\n\nclass DoubleTheDifference {\n\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     *\n     * doubleTheDifference([1, 3, 2, 0]) \u003d\u003d 1 + 9 + 0 + 0 \u003d 10\n     * doubleTheDifference([-1, -2, 0]) \u003d\u003d 0\n     * doubleTheDifference([9, -2]) \u003d\u003d 81\n     * doubleTheDifference([0]) \u003d\u003d 0\n     *\n     * If the input list is empty, return 0.\n     *\n     * \u003e doubleTheDifference([])\n     * 0\n     * \u003e doubleTheDifference([5, 4])\n     * 25\n     * \u003e doubleTheDifference([0.1, 0.2, 0.3])\n     * 0\n     * \u003e doubleTheDifference([-10, -20, -30])\n     * 0\n     * \u003e doubleTheDifference([-1, -2, 8])\n     * 0\n     * \u003e doubleTheDifference([0.2, 3, 5])\n     * 34\n     * \u003e doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])\n     * 166650\n     */\n    public static int doubleTheDifference(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "DoubleTheDifference",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_151.java",
    "test_prompt": "// DoubleTheDifferenceTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DoubleTheDifference}.\n* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.\n*/\nclass DoubleTheDifferenceTest {",
    "method_signature": "doubleTheDifference(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Solve1.java\npackage scenario3;\n\nclass Solve1 {\n\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     *\n     * Example\n     * For N \u003d 1000, the sum of digits will be 1 the output should be \"1\".\n     * For N \u003d 150, the sum of digits will be 6 the output should be \"110\".\n     * For N \u003d 147, the sum of digits will be 12 the output should be \"1100\".\n     *\n     * Variables:\n     *\n     * @N integer\n     * Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     * a string of binary number\n     *\n     * \u003e solve(1000)\n     * \"1\"\n     * \u003e solve(150)\n     * \"110\"\n     * \u003e solve(147)\n     * \"1100\"\n     * \u003e solve(333)\n     * \"1001\"\n     * \u003e solve(963)\n     * \"10010\"\n     */\n    public static String solve(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Solve1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_84.java",
    "test_prompt": "// Solve1Test.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve1}.\n* It contains ten unit test cases for the {@link Solve1#solve(int)} method.\n*/\nclass Solve1Test {",
    "method_signature": "solve(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MakePalindrome.java\npackage scenario3;\n\nclass MakePalindrome {\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     *\n     * \u003e makePalindrome(\"\")\n     * \"\"\n     * \u003e makePalindrome(\"cat\")\n     * \"catac\"\n     * \u003e makePalindrome(\"cata\")\n     * \"catac\"\n     * \u003e makePalindrome(\"\")\n     * \"\"\n     * \u003e makePalindrome(\"x\")\n     * \"x\"\n     * \u003e makePalindrome(\"xyz\")\n     * \"xyzyx\"\n     * \u003e makePalindrome(\"xyx\")\n     * \"xyx\"\n     * \u003e makePalindrome(\"jerry\")\n     * \"jerryrrej\"\n     */\n    public static String makePalindrome(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MakePalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_10.java",
    "test_prompt": "// MakePalindromeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakePalindrome}.\n* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.\n*/\nclass MakePalindromeTest {",
    "method_signature": "makePalindrome(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Median.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Median {\n\n    /**\n     * Return median of elements in the list l.\n     *\n     * \u003e median([3, 1, 2, 4, 5])\n     * 3\n     * \u003e median([-10, 4, 6, 1000, 10, 20])\n     * 8.0\n     * \u003e median([5])\n     * 5\n     * \u003e median([6, 5])\n     * 5.5\n     * \u003e median([8, 1, 3, 9, 9, 2, 7])\n     * 7\n     */\n    public static Number median(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Median",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_47.java",
    "test_prompt": "// MedianTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Median}.\n* It contains ten unit test cases for the {@link Median#median(List)} method.\n*/\nclass MedianTest {",
    "method_signature": "median(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RemoveVowels.java\npackage scenario3;\n\nclass RemoveVowels {\n\n    /**\n     * removeVowels is a function that takes string and returns string without vowels.\n     *\n     * \u003e removeVowels(\"abcdef\")\n     * \"bcdf\"\n     * \u003e removeVowels(\"aaaaa\")\n     * \"\"\n     * \u003e removeVowels(\"aaBAA\")\n     * \"B\"\n     * \u003e removeVowels(\"zbcd\")\n     * \"zbcd\"\n     * \u003e removeVowels(\"\")\n     * \"\"\n     * \u003e removeVowels(\"abcdef\\nghijklm\")\n     * \"bcdf\\nghjklm\"\n     * \u003e removeVowels(\"fedcba\")\n     * \"fdcb\"\n     * \u003e removeVowels(\"eeeee\")\n     * \"\"\n     * \u003e removeVowels(\"acBAA\")\n     * \"cB\"\n     * \u003e removeVowels(\"EcBOO\")\n     * \"cB\"\n     * \u003e removeVowels(\"ybcd\")\n     * \"ybcd\"\n     */\n    public static String removeVowels(String text) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RemoveVowels",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_51.java",
    "test_prompt": "// RemoveVowelsTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveVowels}.\n* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.\n*/\nclass RemoveVowelsTest {",
    "method_signature": "removeVowels(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TriangleArea1.java\npackage scenario3;\n\nclass TriangleArea1 {\n\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) \u003d\u003d 6.00\n     * triangle_area(1, 2, 10) \u003d\u003d -1\n     *\n     * \u003e triangleArea(3, 4, 5)\n     * 6.0\n     * \u003e triangleArea(1, 2, 10)\n     * -1\n     * \u003e triangleArea(4, 8, 5)\n     * 8.18\n     * \u003e triangleArea(2, 2, 2)\n     * 1.73\n     * \u003e triangleArea(1, 2, 3)\n     * -1\n     * \u003e triangleArea(10, 5, 7)\n     * 16.25\n     * \u003e triangleArea(2, 6, 3)\n     * -1\n     * \u003e triangleArea(1, 1, 1)\n     * 0.43\n     * \u003e triangleArea(2, 2, 10)\n     * -1\n     */\n    public static Number triangleArea(int a, int b, int c) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "TriangleArea1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_71.java",
    "test_prompt": "// TriangleArea1Test.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea1}.\n* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.\n*/\nclass TriangleArea1Test {",
    "method_signature": "triangleArea(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RemoveDuplicates.java\npackage scenario3;\n\nimport java.util.List;\n\nclass RemoveDuplicates {\n\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * \u003e removeDuplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     * \u003e removeDuplicates([])\n     * []\n     * \u003e removeDuplicates([1, 2, 3, 4])\n     * [1, 2, 3, 4]\n     * \u003e removeDuplicates([1, 2, 3, 2, 4, 3, 5])\n     * [1, 4, 5]\n     */\n    public static List\u003cObject\u003e removeDuplicates(List\u003cObject\u003e numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RemoveDuplicates",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_26.java",
    "test_prompt": "// RemoveDuplicatesTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveDuplicates}.\n* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.\n*/\nclass RemoveDuplicatesTest {",
    "method_signature": "removeDuplicates(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetPositive.java\npackage scenario3;\n\nimport java.util.List;\n\nclass GetPositive {\n\n    /**\n     * Return only positive numbers in the list.\n     *\n     * \u003e getPositive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * \u003e getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     * \u003e getPositive([-1, -2, 4, 5, 6])\n     * [4, 5, 6]\n     * \u003e getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 3, 9, 123, 1]\n     * \u003e getPositive([-1, -2])\n     * []\n     * \u003e getPositive([])\n     * []\n     */\n    public static List\u003cObject\u003e getPositive(List\u003cObject\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GetPositive",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_30.java",
    "test_prompt": "// GetPositiveTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetPositive}.\n* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.\n*/\nclass GetPositiveTest {",
    "method_signature": "getPositive(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortArray1.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SortArray1 {\n\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don\u0027t change the given array.\n     *\n     * Examples:\n     * * sort_array([]) \u003d\u003e []\n     * * sort_array([5]) \u003d\u003e [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) \u003d\u003e [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) \u003d\u003e [6, 5, 4, 3, 2, 1, 0]\n     *\n     * \u003e sortArray([])\n     * []\n     * \u003e sortArray([5])\n     * [5]\n     * \u003e sortArray([2, 4, 3, 0, 1, 5])\n     * [0, 1, 2, 3, 4, 5]\n     * \u003e sortArray([2, 4, 3, 0, 1, 5, 6])\n     * [6, 5, 4, 3, 2, 1, 0]\n     * \u003e sortArray([2, 1])\n     * [1, 2]\n     * \u003e sortArray([15, 42, 87, 32, 11, 0])\n     * [0, 11, 15, 32, 42, 87]\n     * \u003e sortArray([21, 14, 23, 11])\n     * [23, 21, 14, 11]\n     */\n    public static List\u003cObject\u003e sortArray(List\u003cObject\u003e array) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortArray1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_88.java",
    "test_prompt": "// SortArray1Test.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray1}.\n* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.\n*/\nclass SortArray1Test {",
    "method_signature": "sortArray(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FruitDistribution.java\npackage scenario3;\n\nclass FruitDistribution {\n\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit this basket contains\n     * apples, oranges, and mango fruits. Given the string that represents the total number of\n     * the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     * For example:\n     * fruitDistribution(\"5 apples and 6 oranges\", 19) -\u003e19 - 5 - 6 \u003d 8\n     * fruitDistribution(\"0 apples and 1 oranges\",3) -\u003e 3 - 0 - 1 \u003d 2\n     * fruitDistribution(\"2 apples and 3 oranges\", 100) -\u003e 100 - 2 - 3 \u003d 95\n     * fruitDistribution(\"100 apples and 1 oranges\",120) -\u003e 120 - 100 - 1 \u003d 19\n     *\n     * \u003e fruitDistribution(\"5 apples and 6 oranges\", 19)\n     * 8\n     * \u003e fruitDistribution(\"5 apples and 6 oranges\", 21)\n     * 10\n     * \u003e fruitDistribution(\"0 apples and 1 oranges\", 3)\n     * 2\n     * \u003e fruitDistribution(\"1 apples and 0 oranges\", 3)\n     * 2\n     * \u003e fruitDistribution(\"2 apples and 3 oranges\", 100)\n     * 95\n     * \u003e fruitDistribution(\"2 apples and 3 oranges\", 5)\n     * 0\n     * \u003e fruitDistribution(\"1 apples and 100 oranges\", 120)\n     * 19\n     */\n    public static int fruitDistribution(String s, int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FruitDistribution",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_67.java",
    "test_prompt": "// FruitDistributionTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FruitDistribution}.\n* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.\n*/\nclass FruitDistributionTest {",
    "method_signature": "fruitDistribution(String, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BelowZero.java\npackage scenario3;\n\nimport java.util.List;\n\nclass BelowZero {\n\n    /**\n     * You\u0027re given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise, it should return False.\n     *\n     * \u003e belowZero([1, 2, 3])\n     * false\n     * \u003e belowZero([1, 2, -4, 5])\n     * true\n     * \u003e belowZero([])\n     * false\n     * \u003e belowZero([1, 2, -3, 1, 2, -3])\n     * false\n     * \u003e belowZero([1, 2, -4, 5, 6])\n     * true\n     * \u003e belowZero([1, -1, 2, -2, 5, -5, 4, -4])\n     * false\n     * \u003e belowZero([1, -1, 2, -2, 5, -5, 4, -5])\n     * true\n     * \u003e belowZero([1, -2, 2, -2, 5, -5, 4, -4])\n     * true\n     */\n    public static Boolean belowZero(List\u003cObject\u003e operations) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "BelowZero",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_3.java",
    "test_prompt": "// BelowZeroTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowZero}.\n* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.\n*/\nclass BelowZeroTest {",
    "method_signature": "belowZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsSorted.java\npackage scenario3;\n\nimport java.util.List;\n\nclass IsSorted {\n\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n     *\n     * Examples\n     * isSorted([5]) ➞ True\n     * isSorted([1, 2, 3, 4, 5]) ➞ True\n     * isSorted([1, 3, 2, 4, 5]) ➞ False\n     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     * \u003e isSorted([5])\n     * true\n     * \u003e isSorted([1, 2, 3, 4, 5])\n     * true\n     * \u003e isSorted([1, 3, 2, 4, 5])\n     * false\n     * \u003e isSorted([1, 2, 3, 4, 5, 6])\n     * true\n     * \u003e isSorted([1, 2, 3, 4, 5, 6, 7])\n     * true\n     * \u003e isSorted([1, 3, 2, 4, 5, 6, 7])\n     * false\n     * \u003e isSorted([])\n     * true\n     * \u003e isSorted([1])\n     * true\n     * \u003e isSorted([3, 2, 1])\n     * false\n     * \u003e isSorted([1, 2, 2, 2, 3, 4])\n     * false\n     * \u003e isSorted([1, 2, 3, 3, 3, 4])\n     * false\n     * \u003e isSorted([1, 2, 2, 3, 3, 4])\n     * true\n     * \u003e isSorted([1, 2, 3, 4])\n     * true\n     */\n    public static Boolean isSorted(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsSorted",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_126.java",
    "test_prompt": "// IsSortedTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSorted}.\n* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.\n*/\nclass IsSortedTest {",
    "method_signature": "isSorted(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Tri.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Tri {\n\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n     * the last couple centuries. However, what people don\u0027t know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) \u003d 3\n     * tri(n) \u003d 1 + n / 2, if n is even.\n     * tri(n) \u003d  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) \u003d 1 + (2 / 2) \u003d 2\n     * tri(4) \u003d 3\n     * tri(3) \u003d tri(2) + tri(1) + tri(4)\n     * \u003d 2 + 3 + 3 \u003d 8\n     * You are given a non-negative integer number n, you have to a return a list of the\n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) \u003d [1, 3, 2, 8]\n     *\n     * \u003e tri(3)\n     * [1, 3, 2.0, 8.0]\n     * \u003e tri(4)\n     * [1, 3, 2.0, 8.0, 3.0]\n     * \u003e tri(5)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0]\n     * \u003e tri(6)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n     * \u003e tri(7)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n     * \u003e tri(8)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n     * \u003e tri(9)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n     * \u003e tri(20)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n     * \u003e tri(0)\n     * [1]\n     * \u003e tri(1)\n     * [1, 3]\n     */\n    public static List\u003cNumber\u003e tri(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Tri",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_130.java",
    "test_prompt": "// TriTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Tri}.\n* It contains ten unit test cases for the {@link Tri#tri(int)} method.\n*/\nclass TriTest {",
    "method_signature": "tri(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// WillItFly.java\npackage scenario3;\n\nimport java.util.List;\n\nclass WillItFly {\n\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it\u0027s balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n     *\n     * Example:\n     * willItFly([1, 2], 5) ➞ False\n     * # 1+2 is less than the maximum possible weight, but it\u0027s unbalanced.\n     *\n     * willItFly([3, 2, 3], 1) ➞ False\n     * # it\u0027s balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * willItFly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it\u0027s balanced.\n     *\n     * willItFly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it\u0027s balanced.\n     *\n     * \u003e willItFly([3, 2, 3], 9)\n     * true\n     * \u003e willItFly([1, 2], 5)\n     * false\n     * \u003e willItFly([3], 5)\n     * true\n     * \u003e willItFly([3, 2, 3], 1)\n     * false\n     * \u003e willItFly([1, 2, 3], 6)\n     * false\n     * \u003e willItFly([5], 5)\n     * true\n     */\n    public static Boolean willItFly(List\u003cInteger\u003e q, int w) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "WillItFly",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_72.java",
    "test_prompt": "// WillItFlyTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WillItFly}.\n* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.\n*/\nclass WillItFlyTest {",
    "method_signature": "willItFly(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Bf.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Bf {\n\n    /**\n     * * There are eight planets in our solar system: the closest to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a tuple containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names.\n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") \u003d\u003d\u003e (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") \u003d\u003d\u003e (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") \u003d\u003d\u003e (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     * \u003e bf(\"Jupiter\", \"Neptune\")\n     * [\"Saturn\", \"Uranus\"]\n     * \u003e bf(\"Earth\", \"Mercury\")\n     * [\"Venus\"]\n     * \u003e bf(\"Mercury\", \"Uranus\")\n     * [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     * \u003e bf(\"Neptune\", \"Venus\")\n     * [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n     * \u003e bf(\"Earth\", \"Earth\")\n     * []\n     * \u003e bf(\"Mars\", \"Earth\")\n     * []\n     * \u003e bf(\"Jupiter\", \"Makemake\")\n     * []\n     */\n    public static List\u003cObject\u003e bf(String planet1, String planet2) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Bf",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_148.java",
    "test_prompt": "// BfTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bf}.\n* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.\n*/\nclass BfTest {",
    "method_signature": "bf(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Factorize.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Factorize {\n\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * \u003e factorize(8)\n     * [2, 2, 2]\n     * \u003e factorize(25)\n     * [5, 5]\n     * \u003e factorize(70)\n     * [2, 5, 7]\n     * \u003e factorize(2)\n     * [2]\n     * \u003e factorize(4)\n     * [2, 2]\n     * \u003e factorize(8)\n     * [2, 2, 2]\n     * \u003e factorize(57)\n     * [3, 19]\n     * \u003e factorize(3249)\n     * [3, 3, 19, 19]\n     * \u003e factorize(185193)\n     * [3, 3, 3, 19, 19, 19]\n     * \u003e factorize(20577)\n     * [3, 19, 19, 19]\n     * \u003e factorize(18)\n     * [2, 3, 3]\n     */\n    public static List\u003cInteger\u003e factorize(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Factorize",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_25.java",
    "test_prompt": "// FactorizeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Factorize}.\n* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.\n*/\nclass FactorizeTest {",
    "method_signature": "factorize(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortThird.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SortThird {\n\n    /**\n     * This function takes a list l and returns a list l\u0027 such that\n     * l\u0027 is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     * \u003e sortThird([1, 2, 3])\n     * [1, 2, 3]\n     * \u003e sortThird([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     * \u003e sortThird([1, 2, 3])\n     * [1, 2, 3]\n     * \u003e sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]\n     * \u003e sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\n     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]\n     * \u003e sortThird([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     * \u003e sortThird([5, 8, 3, 4, 6, 9, 2])\n     * [2, 8, 3, 4, 6, 9, 5]\n     * \u003e sortThird([5, 6, 9, 4, 8, 3, 2])\n     * [2, 6, 9, 4, 8, 3, 5]\n     * \u003e sortThird([5, 6, 3, 4, 8, 9, 2, 1])\n     * [2, 6, 3, 4, 8, 9, 5, 1]\n     */\n    public static List\u003cInteger\u003e sortThird(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortThird",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_33.java",
    "test_prompt": "// SortThirdTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortThird}.\n* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.\n*/\nclass SortThirdTest {",
    "method_signature": "sortThird(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MoveOneBall.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MoveOneBall {\n\n    /**\n     * We have an array \u0027arr\u0027 of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     * You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     *\n     * For Example:\n     *\n     * move_one_ball([3, 4, 5, 1, 2])\u003d\u003d\u003eTrue\n     * Explanation: By performing 2 right shift operations, non-decreasing order can\n     * be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])\u003d\u003d\u003eFalse\n     * Explanation:It is not possible to get non-decreasing order for the given\n     * array by performing any number of right shift operations.\n     *\n     * \u003e moveOneBall([3, 4, 5, 1, 2])\n     * true\n     * \u003e moveOneBall([3, 5, 10, 1, 2])\n     * true\n     * \u003e moveOneBall([4, 3, 1, 2])\n     * false\n     * \u003e moveOneBall([3, 5, 4, 1, 2])\n     * false\n     * \u003e moveOneBall([])\n     * true\n     */\n    public static Boolean moveOneBall(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MoveOneBall",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_109.java",
    "test_prompt": "// MoveOneBallTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MoveOneBall}.\n* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.\n*/\nclass MoveOneBallTest {",
    "method_signature": "moveOneBall(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HasCloseElements.java\npackage scenario3;\n\nimport java.util.List;\n\nclass HasCloseElements {\n\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.\n     *\n     * \u003e hasCloseElements([1.0, 2.0, 3.0], 0.5)\n     * false\n     * \u003e hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * true\n     * \u003e hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\n     * true\n     * \u003e hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)\n     * false\n     * \u003e hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\n     * true\n     * \u003e hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\n     * false\n     * \u003e hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n     * true\n     * \u003e hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\n     * true\n     * \u003e hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\n     * false\n     */\n    public static Boolean hasCloseElements(List\u003cDouble\u003e numbers, Double threshold) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "HasCloseElements",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_0.java",
    "test_prompt": "// HasCloseElementsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HasCloseElements}.\n* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.\n*/\nclass HasCloseElementsTest {",
    "method_signature": "hasCloseElements(List, Double)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// VowelsCount.java\npackage scenario3;\n\nclass VowelsCount {\n\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are \u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027. Here, \u0027y\u0027 is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * \u003e vowelsCount(\"abcde\")\n     * 2\n     * \u003e vowelsCount(\"Alone\")\n     * 3\n     * \u003e vowelsCount(\"key\")\n     * 2\n     * \u003e vowelsCount(\"bye\")\n     * 1\n     * \u003e vowelsCount(\"keY\")\n     * 2\n     * \u003e vowelsCount(\"bYe\")\n     * 1\n     * \u003e vowelsCount(\"ACEDY\")\n     * 3\n     */\n    public static int vowelsCount(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "VowelsCount",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_64.java",
    "test_prompt": "// VowelsCountTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VowelsCount}.\n* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.\n*/\nclass VowelsCountTest {",
    "method_signature": "vowelsCount(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SplitWords.java\npackage scenario3;\n\nclass SplitWords {\n\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas \u0027,\u0027 if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord(\u0027a\u0027) \u003d 0, ord(\u0027b\u0027) \u003d 1, ... ord(\u0027z\u0027) \u003d 25\n     * Examples\n     * splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * splitWords(\"abcdef\") \u003d\u003d 3\n     *\n     * \u003e splitWords(\"Hello world!\")\n     * [\"Hello\", \"world!\"]\n     * \u003e splitWords(\"Hello,world!\")\n     * [\"Hello\", \"world!\"]\n     * \u003e splitWords(\"Hello world,!\")\n     * [\"Hello\", \"world,!\"]\n     * \u003e splitWords(\"Hello,Hello,world !\")\n     * [\"Hello,Hello,world\", \"!\"]\n     * \u003e splitWords(\"abcdef\")\n     * 3\n     * \u003e splitWords(\"aaabb\")\n     * 2\n     * \u003e splitWords(\"aaaBb\")\n     * 1\n     * \u003e splitWords(\"\")\n     * 0\n     */\n    public static Object splitWords(String txt) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SplitWords",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_125.java",
    "test_prompt": "// SplitWordsTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SplitWords}.\n* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.\n*/\nclass SplitWordsTest {",
    "method_signature": "splitWords(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsPalindrome.java\npackage scenario3;\n\nclass IsPalindrome {\n\n    /**\n     * Checks if given string is a palindrome\n     *\n     * \u003e isPalindrome(\"\")\n     * true\n     * \u003e isPalindrome(\"aba\")\n     * true\n     * \u003e isPalindrome(\"aaaaa\")\n     * true\n     * \u003e isPalindrome(\"zbcd\")\n     * false\n     * \u003e isPalindrome(\"xywyx\")\n     * true\n     * \u003e isPalindrome(\"xywyz\")\n     * false\n     * \u003e isPalindrome(\"xywzx\")\n     * false\n     */\n    public static Boolean isPalindrome(String text) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsPalindrome",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_48.java",
    "test_prompt": "// IsPalindromeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPalindrome}.\n* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.\n*/\nclass IsPalindromeTest {",
    "method_signature": "isPalindrome(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SumSquares.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SumSquares {\n\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst \u003d [1,2,3] the output should be 14\n     * For lst \u003d [1,4,9] the output should be 98\n     * For lst \u003d [1,3,5,7] the output should be 84\n     * For lst \u003d [1.4,4.2,0] the output should be 29\n     * For lst \u003d [-2.4,1,1] the output should be 6\n     *\n     * \u003e sumSquares([1, 2, 3])\n     * 14\n     * \u003e sumSquares([1.0, 2, 3])\n     * 14\n     * \u003e sumSquares([1, 3, 5, 7])\n     * 84\n     * \u003e sumSquares([1.4, 4.2, 0])\n     * 29\n     * \u003e sumSquares([-2.4, 1, 1])\n     * 6\n     * \u003e sumSquares([100, 1, 15, 2])\n     * 10230\n     * \u003e sumSquares([10000, 10000])\n     * 200000000\n     * \u003e sumSquares([-1.4, 4.6, 6.3])\n     * 75\n     * \u003e sumSquares([-1.4, 17.9, 18.9, 19.9])\n     * 1086\n     * \u003e sumSquares([0])\n     * 0\n     * \u003e sumSquares([-1])\n     * 1\n     * \u003e sumSquares([-1, 1, 0])\n     * 2\n     */\n    public static int sumSquares(List\u003cNumber\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SumSquares",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_133.java",
    "test_prompt": "// SumSquaresTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares}.\n* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.\n*/\nclass SumSquaresTest {",
    "method_signature": "sumSquares(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Simplify.java\npackage scenario3;\n\nclass Simplify {\n\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * \u003cnumerator\u003e/\u003cdenominator\u003e where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     *\n     * simplify(\"1/5\", \"5/1\") \u003d True\n     * simplify(\"1/6\", \"2/1\") \u003d False\n     * simplify(\"7/10\", \"10/2\") \u003d False\n     *\n     * \u003e simplify(\"1/5\", \"5/1\")\n     * true\n     * \u003e simplify(\"1/6\", \"2/1\")\n     * false\n     * \u003e simplify(\"5/1\", \"3/1\")\n     * true\n     * \u003e simplify(\"7/10\", \"10/2\")\n     * false\n     * \u003e simplify(\"2/10\", \"50/10\")\n     * true\n     * \u003e simplify(\"7/2\", \"4/2\")\n     * true\n     * \u003e simplify(\"11/6\", \"6/1\")\n     * true\n     * \u003e simplify(\"2/3\", \"5/2\")\n     * false\n     * \u003e simplify(\"5/2\", \"3/5\")\n     * false\n     * \u003e simplify(\"2/4\", \"8/4\")\n     * true\n     * \u003e simplify(\"2/4\", \"4/2\")\n     * true\n     * \u003e simplify(\"1/5\", \"5/1\")\n     * true\n     * \u003e simplify(\"1/5\", \"1/5\")\n     * false\n     */\n    public static Boolean simplify(String x, String n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Simplify",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_144.java",
    "test_prompt": "// SimplifyTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Simplify}.\n* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.\n*/\nclass SimplifyTest {",
    "method_signature": "simplify(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsBored.java\npackage scenario3;\n\nclass IsBored {\n\n    /**\n     * You\u0027ll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by \u0027.\u0027, \u0027?\u0027 or \u0027!\u0027.\n     *\n     * For example:\n     * \u003e\u003e\u003e isBored(\"Hello world\")\n     * 0\n     * \u003e\u003e\u003e isBored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     * \u003e isBored(\"Hello world\")\n     * 0\n     * \u003e isBored(\"Is the sky blue?\")\n     * 0\n     * \u003e isBored(\"I love It !\")\n     * 1\n     * \u003e isBored(\"bIt\")\n     * 0\n     * \u003e isBored(\"I feel good today. I will be productive. will kill It\")\n     * 2\n     * \u003e isBored(\"You and I are going for a walk\")\n     * 0\n     */\n    public static int isBored(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsBored",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_91.java",
    "test_prompt": "// IsBoredTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsBored}.\n* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.\n*/\nclass IsBoredTest {",
    "method_signature": "isBored(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// OddCount.java\npackage scenario3;\n\nimport java.util.List;\n\nclass OddCount {\n\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i\u0027s should be replaced by the number\n     * of odd digits in the i\u0027th string of the input.\n     *\n     * \u003e\u003e\u003e oddCount([\u00271234567\u0027])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * \u003e\u003e\u003e oddCount([\u00273\u0027,\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     * \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     * \u003e oddCount([\"1234567\"])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * \u003e oddCount([\"3\", \"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     * \u003e oddCount([\"271\", \"137\", \"314\"])\n     * [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n     */\n    public static List\u003cString\u003e oddCount(List\u003cString\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "OddCount",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_113.java",
    "test_prompt": "// OddCountTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OddCount}.\n* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.\n*/\nclass OddCountTest {",
    "method_signature": "oddCount(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FilterByPrefix.java\npackage scenario3;\n\nimport java.util.List;\n\nclass FilterByPrefix {\n\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * \u003e filterByPrefix([], \"a\")\n     * []\n     * \u003e filterByPrefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n     * [\"abc\", \"array\"]\n     * \u003e filterByPrefix([], \"john\")\n     * []\n     * \u003e filterByPrefix([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n     * [\"xxx\", \"xxxAAA\", \"xxx\"]\n     */\n    public static List\u003cObject\u003e filterByPrefix(List\u003cObject\u003e strings, String prefix) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FilterByPrefix",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_29.java",
    "test_prompt": "// FilterByPrefixTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterByPrefix}.\n* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.\n*/\nclass FilterByPrefixTest {",
    "method_signature": "filterByPrefix(List, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ByLength.java\npackage scenario3;\n\nimport java.util.List;\n\nclass ByLength {\n\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * For example:\n     * arr \u003d [2, 1, 1, 4, 5, 8, 2, 3]\n     * -\u003e sort arr -\u003e [1, 1, 2, 2, 3, 4, 5, 8]\n     * -\u003e reverse arr -\u003e [8, 5, 4, 3, 2, 2, 1, 1]\n     * return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     *\n     * If the array is empty, return an empty array:\n     * arr \u003d []\n     * return []\n     *\n     * If the array has any strange number ignore it:\n     * arr \u003d [1, -1 , 55]\n     * -\u003e sort arr -\u003e [-1, 1, 55]\n     * -\u003e reverse arr -\u003e [55, 1, -1]\n     * return \u003d [\u0027One\u0027]\n     *\n     * \u003e byLength([2, 1, 1, 4, 5, 8, 2, 3])\n     * [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \u003e byLength([])\n     * []\n     * \u003e byLength([1, -1, 55])\n     * [\"One\"]\n     * \u003e byLength([1, -1, 3, 2])\n     * [\"Three\", \"Two\", \"One\"]\n     * \u003e byLength([9, 4, 8])\n     * [\"Nine\", \"Eight\", \"Four\"]\n     */\n    public static List\u003cObject\u003e byLength(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ByLength",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_105.java",
    "test_prompt": "// ByLengthTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByLength}.\n* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.\n*/\nclass ByLengthTest {",
    "method_signature": "byLength(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Compare.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Compare {\n\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match.\n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     *\n     * example:\n     *\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -\u003e [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -\u003e [4,4,1,0,0,6]\n     *\n     * \u003e compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n     * [0, 0, 0, 0, 3, 3]\n     * \u003e compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])\n     * [0, 0, 0, 0, 0, 0]\n     * \u003e compare([1, 2, 3], [-1, -2, -3])\n     * [2, 4, 6]\n     * \u003e compare([1, 2, 3, 5], [-1, 2, 3, 4])\n     * [2, 0, 0, 1]\n     */\n    public static List\u003cInteger\u003e compare(List\u003cInteger\u003e game, List\u003cInteger\u003e guess) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Compare",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_152.java",
    "test_prompt": "// CompareTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Compare}.\n* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.\n*/\nclass CompareTest {",
    "method_signature": "compare(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Pluck.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Pluck {\n\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n     * The plucked node should be returned in a list, [ smallest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n     *\n     * Example 1:\n     * - Input: [4,2,3]\n     * - Output: [2, 1]\n     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.\n     * Example 2:\n     * - Input: [1,2,3]\n     * - Output: [2, 1]\n     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.\n     * Example 3:\n     * - Input: []\n     * - Output: []\n     * Example 4:\n     * - Input: [5, 0, 3, 0, 4, 2]\n     * - Output: [0, 1]\n     * - Explanation: 0 is the smallest value, but  there are two zeros,\n     * so we will choose the first zero, which has the smallest index.\n     *\n     * Constraints:\n     * 1 \u003c\u003d nodes.length \u003c\u003d 10000\n     * 0 \u003c\u003d node.value\n     *\n     * \u003e pluck([4, 2, 3])\n     * [2, 1]\n     * \u003e pluck([1, 2, 3])\n     * [2, 1]\n     * \u003e pluck([])\n     * []\n     * \u003e pluck([5, 0, 3, 0, 4, 2])\n     * [0, 1]\n     * \u003e pluck([1, 2, 3, 0, 5, 3])\n     * [0, 3]\n     * \u003e pluck([5, 4, 8, 4, 8])\n     * [4, 1]\n     * \u003e pluck([7, 6, 7, 1])\n     * [6, 1]\n     * \u003e pluck([7, 9, 7, 1])\n     * []\n     */\n    public static List\u003cObject\u003e pluck(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Pluck",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_68.java",
    "test_prompt": "// PluckTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Pluck}.\n* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.\n*/\nclass PluckTest {",
    "method_signature": "pluck(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetRow.java\npackage scenario3;\n\nimport java.util.List;\n\nclass GetRow {\n\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * getRow([\n     * [1,2,3,4,5,6],\n     * [1,2,3,4,1,6],\n     * [1,2,3,4,5,1]\n     * ], 1) \u003d\u003d [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * getRow([], 1) \u003d\u003d []\n     * getRow([[], [1], [1, 2, 3]], 3) \u003d\u003d [(2, 2)]\n     *\n     * \u003e getRow([], 1)\n     * []\n     * \u003e getRow([[1]], 2)\n     * []\n     * \u003e getRow([[], [1], [1, 2, 3]], 3)\n     * [[2, 2]]\n     */\n    public static List\u003cObject\u003e getRow(List\u003cObject\u003e lst, int x) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GetRow",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_87.java",
    "test_prompt": "// GetRowTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetRow}.\n* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.\n*/\nclass GetRowTest {",
    "method_signature": "getRow(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Minpath.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Minpath {\n\n    /**\n     * * Given a grid with N rows and N columns (N \u003e\u003d 2) and a positive integer k,\n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n     *\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let\u0027s call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 \u003c\u003d i \u003c\u003d k)\n     * such that lst_A[i] \u003c lst_B[i] and for any j (1 \u003c\u003d j \u003c i) we have\n     * lst_A[j] \u003d lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n     *\n     * Examples:\n     *\n     * Input: grid \u003d [ [1,2,3], [4,5,6], [7,8,9]], k \u003d 3\n     * Output: [1, 2, 1]\n     *\n     * Input: grid \u003d [ [5,9,3], [4,1,6], [7,8,2]], k \u003d 1\n     * Output: [1]\n     *\n     * \u003e minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n     * [1, 2, 1]\n     * \u003e minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n     * [1]\n     * \u003e minpath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)\n     * [1, 2, 1, 2]\n     * \u003e minpath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\n     * [1, 10, 1, 10, 1, 10, 1]\n     * \u003e minpath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\n     * [1, 7, 1, 7, 1]\n     * \u003e minpath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)\n     * [1, 6, 1, 6, 1, 6, 1, 6, 1]\n     * \u003e minpath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)\n     * [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n     * \u003e minpath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)\n     * [1, 3, 1, 3, 1, 3, 1, 3]\n     * \u003e minpath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)\n     * [1, 5, 1, 5, 1, 5, 1, 5]\n     * \u003e minpath([[1, 2], [3, 4]], 10)\n     * [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n     * \u003e minpath([[1, 3], [3, 2]], 10)\n     * [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n     */\n    public static List\u003cInteger\u003e minpath(List\u003cList\u003cInteger\u003e\u003e grid, int k) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Minpath",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_129.java",
    "test_prompt": "// MinpathTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minpath}.\n* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.\n*/\nclass MinpathTest {",
    "method_signature": "minpath(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GreatestCommonDivisor.java\npackage scenario3;\n\nclass GreatestCommonDivisor {\n\n    /**\n     * Return the greatest common divisor of two integers a and b.\n     *\n     * \u003e greatestCommonDivisor(3, 5)\n     * 1\n     * \u003e greatestCommonDivisor(25, 15)\n     * 5\n     * \u003e greatestCommonDivisor(3, 7)\n     * 1\n     * \u003e greatestCommonDivisor(10, 15)\n     * 5\n     * \u003e greatestCommonDivisor(49, 14)\n     * 7\n     * \u003e greatestCommonDivisor(144, 60)\n     * 12\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GreatestCommonDivisor",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_13.java",
    "test_prompt": "// GreatestCommonDivisorTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GreatestCommonDivisor}.\n* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.\n*/\nclass GreatestCommonDivisorTest {",
    "method_signature": "greatestCommonDivisor(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ChangeBase.java\npackage scenario3;\n\nclass ChangeBase {\n\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * \u003e changeBase(8, 3)\n     * \"22\"\n     * \u003e changeBase(8, 2)\n     * \"1000\"\n     * \u003e changeBase(7, 2)\n     * \"111\"\n     * \u003e changeBase(8, 3)\n     * \"22\"\n     * \u003e changeBase(9, 3)\n     * \"100\"\n     * \u003e changeBase(234, 2)\n     * \"11101010\"\n     * \u003e changeBase(16, 2)\n     * \"10000\"\n     * \u003e changeBase(8, 2)\n     * \"1000\"\n     * \u003e changeBase(7, 2)\n     * \"111\"\n     * \u003e changeBase(2, 3)\n     * \"2\"\n     * \u003e changeBase(3, 4)\n     * \"3\"\n     * \u003e changeBase(4, 5)\n     * \"4\"\n     * \u003e changeBase(5, 6)\n     * \"5\"\n     * \u003e changeBase(6, 7)\n     * \"6\"\n     * \u003e changeBase(7, 8)\n     * \"7\"\n     */\n    public static String changeBase(int x, int base) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ChangeBase",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_44.java",
    "test_prompt": "// ChangeBaseTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeBase}.\n* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.\n*/\nclass ChangeBaseTest {",
    "method_signature": "changeBase(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BelowThreshold.java\npackage scenario3;\n\nimport java.util.List;\n\nclass BelowThreshold {\n\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     *\n     * \u003e belowThreshold([1, 2, 4, 10], 100)\n     * true\n     * \u003e belowThreshold([1, 20, 4, 10], 5)\n     * false\n     * \u003e belowThreshold([1, 20, 4, 10], 21)\n     * true\n     * \u003e belowThreshold([1, 20, 4, 10], 22)\n     * true\n     * \u003e belowThreshold([1, 8, 4, 10], 11)\n     * true\n     * \u003e belowThreshold([1, 8, 4, 10], 10)\n     * false\n     */\n    public static Boolean belowThreshold(List\u003cInteger\u003e l, int t) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "BelowThreshold",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_52.java",
    "test_prompt": "// BelowThresholdTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowThreshold}.\n* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.\n*/\nclass BelowThresholdTest {",
    "method_signature": "belowThreshold(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Add.java\npackage scenario3;\n\nclass Add {\n\n    /**\n     * Add two numbers x and y\n     *\n     * \u003e add(0, 1)\n     * 1\n     * \u003e add(1, 0)\n     * 1\n     * \u003e add(2, 3)\n     * 5\n     * \u003e add(5, 7)\n     * 12\n     * \u003e add(7, 5)\n     * 12\n     * \u003e add(572, 725)\n     * 1297\n     * \u003e add(51, 804)\n     * 855\n     * \u003e add(645, 96)\n     * 741\n     * \u003e add(712, 853)\n     * 1565\n     * \u003e add(223, 101)\n     * 324\n     * \u003e add(76, 29)\n     * 105\n     * \u003e add(416, 149)\n     * 565\n     * \u003e add(145, 409)\n     * 554\n     * \u003e add(535, 430)\n     * 965\n     * \u003e add(118, 303)\n     * 421\n     * \u003e add(287, 94)\n     * 381\n     * \u003e add(768, 257)\n     * 1025\n     * \u003e add(421, 677)\n     * 1098\n     * \u003e add(802, 814)\n     * 1616\n     * \u003e add(510, 922)\n     * 1432\n     * \u003e add(345, 819)\n     * 1164\n     * \u003e add(895, 436)\n     * 1331\n     * \u003e add(123, 424)\n     * 547\n     * \u003e add(923, 245)\n     * 1168\n     * \u003e add(23, 438)\n     * 461\n     * \u003e add(565, 133)\n     * 698\n     * \u003e add(945, 925)\n     * 1870\n     * \u003e add(261, 983)\n     * 1244\n     * \u003e add(139, 577)\n     * 716\n     * \u003e add(763, 178)\n     * 941\n     * \u003e add(147, 892)\n     * 1039\n     * \u003e add(436, 402)\n     * 838\n     * \u003e add(610, 581)\n     * 1191\n     * \u003e add(103, 416)\n     * 519\n     * \u003e add(339, 990)\n     * 1329\n     * \u003e add(130, 504)\n     * 634\n     * \u003e add(242, 717)\n     * 959\n     * \u003e add(562, 110)\n     * 672\n     * \u003e add(396, 909)\n     * 1305\n     * \u003e add(887, 703)\n     * 1590\n     * \u003e add(870, 551)\n     * 1421\n     * \u003e add(422, 391)\n     * 813\n     * \u003e add(299, 505)\n     * 804\n     * \u003e add(346, 56)\n     * 402\n     * \u003e add(36, 706)\n     * 742\n     * \u003e add(738, 411)\n     * 1149\n     * \u003e add(679, 87)\n     * 766\n     * \u003e add(25, 303)\n     * 328\n     * \u003e add(161, 612)\n     * 773\n     * \u003e add(306, 841)\n     * 1147\n     * \u003e add(973, 411)\n     * 1384\n     * \u003e add(711, 157)\n     * 868\n     * \u003e add(471, 27)\n     * 498\n     * \u003e add(714, 792)\n     * 1506\n     * \u003e add(38, 206)\n     * 244\n     * \u003e add(907, 343)\n     * 1250\n     * \u003e add(23, 760)\n     * 783\n     * \u003e add(524, 859)\n     * 1383\n     * \u003e add(30, 529)\n     * 559\n     * \u003e add(341, 691)\n     * 1032\n     * \u003e add(167, 729)\n     * 896\n     * \u003e add(636, 289)\n     * 925\n     * \u003e add(503, 144)\n     * 647\n     * \u003e add(51, 985)\n     * 1036\n     * \u003e add(287, 149)\n     * 436\n     * \u003e add(659, 75)\n     * 734\n     * \u003e add(462, 797)\n     * 1259\n     * \u003e add(406, 141)\n     * 547\n     * \u003e add(106, 44)\n     * 150\n     * \u003e add(300, 934)\n     * 1234\n     * \u003e add(471, 524)\n     * 995\n     * \u003e add(122, 429)\n     * 551\n     * \u003e add(735, 195)\n     * 930\n     * \u003e add(335, 484)\n     * 819\n     * \u003e add(28, 809)\n     * 837\n     * \u003e add(430, 20)\n     * 450\n     * \u003e add(916, 635)\n     * 1551\n     * \u003e add(301, 999)\n     * 1300\n     * \u003e add(454, 466)\n     * 920\n     * \u003e add(905, 259)\n     * 1164\n     * \u003e add(168, 205)\n     * 373\n     * \u003e add(570, 434)\n     * 1004\n     * \u003e add(64, 959)\n     * 1023\n     * \u003e add(957, 510)\n     * 1467\n     * \u003e add(722, 598)\n     * 1320\n     * \u003e add(770, 226)\n     * 996\n     * \u003e add(579, 66)\n     * 645\n     * \u003e add(117, 674)\n     * 791\n     * \u003e add(530, 30)\n     * 560\n     * \u003e add(776, 345)\n     * 1121\n     * \u003e add(327, 389)\n     * 716\n     * \u003e add(596, 12)\n     * 608\n     * \u003e add(599, 511)\n     * 1110\n     * \u003e add(936, 476)\n     * 1412\n     * \u003e add(461, 14)\n     * 475\n     * \u003e add(966, 157)\n     * 1123\n     * \u003e add(326, 91)\n     * 417\n     * \u003e add(392, 455)\n     * 847\n     * \u003e add(446, 477)\n     * 923\n     * \u003e add(324, 860)\n     * 1184\n     * \u003e add(945, 85)\n     * 1030\n     * \u003e add(886, 582)\n     * 1468\n     * \u003e add(886, 712)\n     * 1598\n     * \u003e add(842, 953)\n     * 1795\n     */\n    public static int add(int x, int y) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Add",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_53.java",
    "test_prompt": "// AddTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add}.\n* It contains ten unit test cases for the {@link Add#add(int, int)} method.\n*/\nclass AddTest {",
    "method_signature": "add(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TriangleArea.java\npackage scenario3;\n\nclass TriangleArea {\n\n    /**\n     * Given length of a side and high return area for a triangle.\n     *\n     * \u003e triangleArea(5, 3)\n     * 7.5\n     * \u003e triangleArea(2, 2)\n     * 2.0\n     * \u003e triangleArea(10, 8)\n     * 40.0\n     */\n    public static Double triangleArea(int a, int h) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "TriangleArea",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_45.java",
    "test_prompt": "// TriangleAreaTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea}.\n* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.\n*/\nclass TriangleAreaTest {",
    "method_signature": "triangleArea(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Longest.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Longest {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     *\n     * \u003e longest([\"a\", \"b\", \"c\"])\n     * \"a\"\n     * \u003e longest([\"a\", \"bb\", \"ccc\"])\n     * \"ccc\"\n     * \u003e longest([])\n     * null\n     * \u003e longest([\"x\", \"y\", \"z\"])\n     * \"x\"\n     * \u003e longest([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"])\n     * \"zzzz\"\n     */\n    public static String longest(List\u003cObject\u003e strings) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Longest",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_12.java",
    "test_prompt": "// LongestTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Longest}.\n* It contains ten unit test cases for the {@link Longest#longest(List)} method.\n*/\nclass LongestTest {",
    "method_signature": "longest(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ProdSigns.java\npackage scenario3;\n\nimport java.util.List;\n\nclass ProdSigns {\n\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     *\n     * Example:\n     * \u003e\u003e\u003e prodSigns([1, 2, 2, -4]) \u003d\u003d -9\n     * \u003e\u003e\u003e prodSigns([0, 1]) \u003d\u003d 0\n     * \u003e\u003e\u003e prodSigns([]) \u003d\u003d None\n     *\n     * \u003e prodSigns([1, 2, 2, -4])\n     * -9\n     * \u003e prodSigns([0, 1])\n     * 0\n     * \u003e prodSigns([1, 1, 1, 2, 3, -1, 1])\n     * -10\n     * \u003e prodSigns([])\n     * null\n     * \u003e prodSigns([2, 4, 1, 2, -1, -1, 9])\n     * 20\n     * \u003e prodSigns([-1, 1, -1, 1])\n     * 4\n     * \u003e prodSigns([-1, 1, 1, 1])\n     * -4\n     * \u003e prodSigns([-1, 1, 1, 0])\n     * 0\n     */\n    public static Integer prodSigns(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ProdSigns",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_128.java",
    "test_prompt": "// ProdSignsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProdSigns}.\n* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.\n*/\nclass ProdSignsTest {",
    "method_signature": "prodSigns(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Search.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Search {\n\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     * search([4, 1, 2, 2, 3, 1]) \u003d\u003d 2\n     * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) \u003d\u003d 3\n     * search([5, 5, 4, 4, 4]) \u003d\u003d -1\n     *\n     * \u003e search([5, 5, 5, 5, 1])\n     * 1\n     * \u003e search([4, 1, 4, 1, 4, 4])\n     * 4\n     * \u003e search([3, 3])\n     * -1\n     * \u003e search([8, 8, 8, 8, 8, 8, 8, 8])\n     * 8\n     * \u003e search([2, 3, 3, 2, 2])\n     * 2\n     * \u003e search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\n     * 1\n     * \u003e search([3, 2, 8, 2])\n     * 2\n     * \u003e search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])\n     * 1\n     * \u003e search([8, 8, 3, 6, 5, 6, 4])\n     * -1\n     * \u003e search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\n     * 1\n     * \u003e search([1, 9, 10, 1, 3])\n     * 1\n     * \u003e search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])\n     * 5\n     * \u003e search([1])\n     * 1\n     * \u003e search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])\n     * 4\n     * \u003e search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])\n     * 2\n     * \u003e search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])\n     * 1\n     * \u003e search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])\n     * 4\n     * \u003e search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])\n     * 4\n     * \u003e search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])\n     * 2\n     * \u003e search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])\n     * -1\n     * \u003e search([10])\n     * -1\n     * \u003e search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])\n     * 2\n     * \u003e search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])\n     * 1\n     * \u003e search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])\n     * 1\n     * \u003e search([3, 10, 10, 9, 2])\n     * -1\n     */\n    public static int search(List\u003cInteger\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Search",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_69.java",
    "test_prompt": "// SearchTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Search}.\n* It contains ten unit test cases for the {@link Search#search(List)} method.\n*/\nclass SearchTest {",
    "method_signature": "search(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AntiShuffle.java\npackage scenario3;\n\nclass AntiShuffle {\n\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * antiShuffle(\u0027Hi\u0027) returns \u0027Hi\u0027\n     * antiShuffle(\u0027hello\u0027) returns \u0027ehllo\u0027\n     * antiShuffle(\u0027Hello World!!!\u0027) returns \u0027Hello !!!Wdlor\u0027\n     *\n     * \u003e antiShuffle(\"Hi\")\n     * \"Hi\"\n     * \u003e antiShuffle(\"hello\")\n     * \"ehllo\"\n     * \u003e antiShuffle(\"number\")\n     * \"bemnru\"\n     * \u003e antiShuffle(\"abcd\")\n     * \"abcd\"\n     * \u003e antiShuffle(\"Hello World!!!\")\n     * \"Hello !!!Wdlor\"\n     * \u003e antiShuffle(\"\")\n     * \"\"\n     * \u003e antiShuffle(\"Hi. My name is Mister Robot. How are you?\")\n     * \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n     */\n    public static String antiShuffle(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "AntiShuffle",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_86.java",
    "test_prompt": "// AntiShuffleTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AntiShuffle}.\n* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.\n*/\nclass AntiShuffleTest {",
    "method_signature": "antiShuffle(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StrongestExtension.java\npackage scenario3;\n\nimport java.util.List;\n\nclass StrongestExtension {\n\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension\u0027s name, and let SM be the number of lowercase letters\n     * in the extension\u0027s name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\u0027SErviNGSliCes\u0027, \u0027Cheese\u0027, \u0027StuFfed\u0027] then you should\n     * return \u0027Slices.SErviNGSliCes\u0027 since \u0027SErviNGSliCes\u0027 is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for strongestExtension(\u0027my_class\u0027, [\u0027AA\u0027, \u0027Be\u0027, \u0027CC\u0027]) \u003d\u003d \u0027my_class.AA\u0027\n     *\n     * \u003e strongestExtension(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"])\n     * \"Watashi.eIGHt8OKe\"\n     * \u003e strongestExtension(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"])\n     * \"Boku123.YEs.WeCaNe\"\n     * \u003e strongestExtension(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"])\n     * \"__YESIMHERE.NuLl__\"\n     * \u003e strongestExtension(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"])\n     * \"K.TAR\"\n     * \u003e strongestExtension(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"])\n     * \"__HAHA.123\"\n     * \u003e strongestExtension(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"])\n     * \"YameRore.okIWILL123\"\n     * \u003e strongestExtension(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"])\n     * \"finNNalLLly.WoW\"\n     * \u003e strongestExtension(\"_\", [\"Bb\", \"91245\"])\n     * \"_.Bb\"\n     * \u003e strongestExtension(\"Sp\", [\"671235\", \"Bb\"])\n     * \"Sp.671235\"\n     */\n    public static String strongestExtension(String className, List\u003cString\u003e extensions) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StrongestExtension",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_153.java",
    "test_prompt": "// StrongestExtensionTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrongestExtension}.\n* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.\n*/\nclass StrongestExtensionTest {",
    "method_signature": "strongestExtension(String, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// UniqueDigits.java\npackage scenario3;\n\nimport java.util.List;\n\nclass UniqueDigits {\n\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn\u0027t any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     *\n     * For example:\n     * \u003e\u003e\u003e uniqueDigits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * \u003e\u003e\u003e uniqueDigits([152, 323, 1422, 10])\n     * []\n     *\n     * \u003e uniqueDigits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * \u003e uniqueDigits([152, 323, 1422, 10])\n     * []\n     * \u003e uniqueDigits([12345, 2033, 111, 151])\n     * [111, 151]\n     * \u003e uniqueDigits([135, 103, 31])\n     * [31, 135]\n     */\n    public static List\u003cObject\u003e uniqueDigits(List\u003cInteger\u003e x) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "UniqueDigits",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_104.java",
    "test_prompt": "// UniqueDigitsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UniqueDigits}.\n* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.\n*/\nclass UniqueDigitsTest {",
    "method_signature": "uniqueDigits(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Concatenate.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Concatenate {\n\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * \u003e concatenate([])\n     * \"\"\n     * \u003e concatenate([\"a\", \"b\", \"c\"])\n     * \"abc\"\n     * \u003e concatenate([])\n     * \"\"\n     * \u003e concatenate([\"x\", \"y\", \"z\"])\n     * \"xyz\"\n     * \u003e concatenate([\"x\", \"y\", \"z\", \"w\", \"k\"])\n     * \"xyzwk\"\n     */\n    public static String concatenate(List\u003cObject\u003e strings) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Concatenate",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_28.java",
    "test_prompt": "// ConcatenateTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Concatenate}.\n* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.\n*/\nclass ConcatenateTest {",
    "method_signature": "concatenate(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ReverseDelete.java\npackage scenario3;\n\nimport java.util.List;\n\nclass ReverseDelete {\n\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s \u003d \"abcde\", c \u003d \"ae\", the result should be (\u0027bcd\u0027,False)\n     * For s \u003d \"abcdef\", c \u003d \"b\"  the result should be (\u0027acdef\u0027,False)\n     * For s \u003d \"abcdedcba\", c \u003d \"ab\", the result should be (\u0027cdedc\u0027,True)\n     *\n     * \u003e reverseDelete(\"abcde\", \"ae\")\n     * [\"bcd\", false]\n     * \u003e reverseDelete(\"abcdef\", \"b\")\n     * [\"acdef\", false]\n     * \u003e reverseDelete(\"abcdedcba\", \"ab\")\n     * [\"cdedc\", true]\n     * \u003e reverseDelete(\"dwik\", \"w\")\n     * [\"dik\", false]\n     * \u003e reverseDelete(\"a\", \"a\")\n     * [\"\", true]\n     * \u003e reverseDelete(\"abcdedcba\", \"\")\n     * [\"abcdedcba\", true]\n     * \u003e reverseDelete(\"abcdedcba\", \"v\")\n     * [\"abcdedcba\", true]\n     * \u003e reverseDelete(\"vabba\", \"v\")\n     * [\"abba\", true]\n     * \u003e reverseDelete(\"mamma\", \"mia\")\n     * [\"\", true]\n     */\n    public static List\u003cObject\u003e reverseDelete(String s, String c) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ReverseDelete",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_112.java",
    "test_prompt": "// ReverseDeleteTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReverseDelete}.\n* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.\n*/\nclass ReverseDeleteTest {",
    "method_signature": "reverseDelete(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// NextSmallest.java\npackage scenario3;\n\nimport java.util.List;\n\nclass NextSmallest {\n\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * Examples:\n     * nextSmallest([1, 2, 3, 4, 5]) \u003d\u003d 2\n     * nextSmallest([5, 1, 4, 3, 2]) \u003d\u003d 2\n     * nextSmallest([]) \u003d\u003d None\n     * nextSmallest([1, 1]) \u003d\u003d None\n     *\n     * \u003e nextSmallest([1, 2, 3, 4, 5])\n     * 2\n     * \u003e nextSmallest([5, 1, 4, 3, 2])\n     * 2\n     * \u003e nextSmallest([])\n     * null\n     * \u003e nextSmallest([1, 1])\n     * null\n     * \u003e nextSmallest([1, 1, 1, 1, 0])\n     * 1\n     * \u003e nextSmallest([1, 1])\n     * null\n     * \u003e nextSmallest([-35, 34, 12, -45])\n     * -35\n     */\n    public static Integer nextSmallest(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "NextSmallest",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_90.java",
    "test_prompt": "// NextSmallestTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NextSmallest}.\n* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.\n*/\nclass NextSmallestTest {",
    "method_signature": "nextSmallest(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// OrderByPoints.java\npackage scenario3;\n\nimport java.util.List;\n\nclass OrderByPoints {\n\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     *\n     * For example:\n     * \u003e\u003e\u003e order_by_points([1, 11, -1, -11, -12]) \u003d\u003d [-1, -11, 1, -12, 11]\n     * \u003e\u003e\u003e order_by_points([]) \u003d\u003d []\n     *\n     * \u003e orderByPoints([1, 11, -1, -11, -12])\n     * [-1, -11, 1, -12, 11]\n     * \u003e orderByPoints([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\n     * [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n     * \u003e orderByPoints([])\n     * []\n     * \u003e orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])\n     * [-3, -32, -98, -11, 1, 2, 43, 54]\n     * \u003e orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n     * [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n     * \u003e orderByPoints([0, 6, 6, -76, -21, 23, 4])\n     * [-76, -21, 0, 4, 23, 6, 6]\n     */\n    public static List\u003cObject\u003e orderByPoints(List\u003cObject\u003e nums) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "OrderByPoints",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_145.java",
    "test_prompt": "// OrderByPointsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OrderByPoints}.\n* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.\n*/\nclass OrderByPointsTest {",
    "method_signature": "orderByPoints(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsNested.java\npackage scenario3;\n\nclass IsNested {\n\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * isNested(\u0027[[]]\u0027) ➞ True\n     * isNested(\u0027[]]]]]]][[[[[]\u0027) ➞ False\n     * isNested(\u0027[][]\u0027) ➞ False\n     * isNested(\u0027[]\u0027) ➞ False\n     * isNested(\u0027[[][]]\u0027) ➞ True\n     * isNested(\u0027[[]][[\u0027) ➞ True\n     *\n     * \u003e isNested(\"[[]]\")\n     * true\n     * \u003e isNested(\"[]]]]]]][[[[[]\")\n     * false\n     * \u003e isNested(\"[][]\")\n     * false\n     * \u003e isNested(\"[]\")\n     * false\n     * \u003e isNested(\"[[[[]]]]\")\n     * true\n     * \u003e isNested(\"[]]]]]]]]]]\")\n     * false\n     * \u003e isNested(\"[][][[]]\")\n     * true\n     * \u003e isNested(\"[[]\")\n     * false\n     * \u003e isNested(\"[]]\")\n     * false\n     * \u003e isNested(\"[[]][[\")\n     * true\n     * \u003e isNested(\"[[][]]\")\n     * true\n     * \u003e isNested(\"\")\n     * false\n     * \u003e isNested(\"[[[[[[[[\")\n     * false\n     * \u003e isNested(\"]]]]]]]]\")\n     * false\n     */\n    public static Boolean isNested(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsNested",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_132.java",
    "test_prompt": "// IsNestedTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsNested}.\n* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.\n*/\nclass IsNestedTest {",
    "method_signature": "isNested(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Modp.java\npackage scenario3;\n\nclass Modp {\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * \u003e\u003e\u003e modp(3, 5)\n     * 3\n     * \u003e\u003e\u003e modp(1101, 101)\n     * 2\n     * \u003e\u003e\u003e modp(0, 101)\n     * 1\n     * \u003e\u003e\u003e modp(3, 11)\n     * 8\n     * \u003e\u003e\u003e modp(100, 101)\n     * 1\n     * \u003e modp(3, 5)\n     * 3\n     * \u003e modp(1101, 101)\n     * 2\n     * \u003e modp(0, 101)\n     * 1\n     * \u003e modp(3, 11)\n     * 8\n     * \u003e modp(100, 101)\n     * 1\n     * \u003e modp(30, 5)\n     * 4\n     * \u003e modp(31, 5)\n     * 3\n     */\n    public static int modp(int n, int p) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Modp",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_49.java",
    "test_prompt": "// ModpTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Modp}.\n* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.\n*/\nclass ModpTest {",
    "method_signature": "modp(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ValidDate.java\npackage scenario3;\n\nclass ValidDate {\n\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * validDate(\u002703-11-2000\u0027) \u003d\u003e True\n     *\n     * validDate(\u002715-01-2012\u0027) \u003d\u003e False\n     *\n     * validDate(\u002704-0-2040\u0027) \u003d\u003e False\n     *\n     * validDate(\u002706-04-2020\u0027) \u003d\u003e True\n     *\n     * validDate(\u002706/04/2020\u0027) \u003d\u003e False\n     *\n     * \u003e validDate(\"03-11-2000\")\n     * true\n     * \u003e validDate(\"15-01-2012\")\n     * false\n     * \u003e validDate(\"04-0-2040\")\n     * false\n     * \u003e validDate(\"06-04-2020\")\n     * true\n     * \u003e validDate(\"01-01-2007\")\n     * true\n     * \u003e validDate(\"03-32-2011\")\n     * false\n     * \u003e validDate(\"\")\n     * false\n     * \u003e validDate(\"04-31-3000\")\n     * false\n     * \u003e validDate(\"06-06-2005\")\n     * true\n     * \u003e validDate(\"21-31-2000\")\n     * false\n     * \u003e validDate(\"04-12-2003\")\n     * true\n     * \u003e validDate(\"04122003\")\n     * false\n     * \u003e validDate(\"20030412\")\n     * false\n     * \u003e validDate(\"2003-04\")\n     * false\n     * \u003e validDate(\"2003-04-12\")\n     * false\n     * \u003e validDate(\"04-2003\")\n     * false\n     */\n    public static Boolean validDate(String date) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ValidDate",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_124.java",
    "test_prompt": "// ValidDateTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidDate}.\n* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.\n*/\nclass ValidDateTest {",
    "method_signature": "validDate(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SeparateParenGroups.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SeparateParenGroups {\n\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses.\n     * Your goal is to separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n     * Ignore any spaces in the input string.\n     *\n     * \u003e separateParenGroups(\"(()()) ((())) () ((())()())\")\n     * [\"(()())\", \"((()))\", \"()\", \"((())()())\"]\n     * \u003e separateParenGroups(\"() (()) ((())) (((())))\")\n     * [\"()\", \"(())\", \"((()))\", \"(((())))\"]\n     * \u003e separateParenGroups(\"(()(())((())))\")\n     * [\"(()(())((())))\"]\n     * \u003e separateParenGroups(\"( ) (( )) (( )( ))\")\n     * [\"()\", \"(())\", \"(()())\"]\n     */\n    public static List\u003cString\u003e separateParenGroups(String parenString) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SeparateParenGroups",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_1.java",
    "test_prompt": "// SeparateParenGroupsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SeparateParenGroups}.\n* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.\n*/\nclass SeparateParenGroupsTest {",
    "method_signature": "separateParenGroups(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CircularShift.java\npackage scenario3;\n\nclass CircularShift {\n\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift \u003e number of digits, return digits reversed.\n     *\n     * \u003e circularShift(100, 2)\n     * \"001\"\n     * \u003e circularShift(12, 2)\n     * \"12\"\n     * \u003e circularShift(97, 8)\n     * \"79\"\n     * \u003e circularShift(12, 1)\n     * \"21\"\n     * \u003e circularShift(11, 101)\n     * \"11\"\n     */\n    public static String circularShift(int x, int shift) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CircularShift",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_65.java",
    "test_prompt": "// CircularShiftTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CircularShift}.\n* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.\n*/\nclass CircularShiftTest {",
    "method_signature": "circularShift(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountNums.java\npackage scenario3;\n\nimport java.util.List;\n\nclass CountNums {\n\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits \u003e 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * \u003e\u003e\u003e countNums([]) \u003d\u003d 0\n     * \u003e\u003e\u003e countNums([-1, 11, -11]) \u003d\u003d 1\n     * \u003e\u003e\u003e countNums([1, 1, 2]) \u003d\u003d 3\n     *\n     * \u003e countNums([])\n     * 0\n     * \u003e countNums([-1, -2, 0])\n     * 0\n     * \u003e countNums([1, 1, 2, -2, 3, 4, 5])\n     * 6\n     * \u003e countNums([1, 6, 9, -6, 0, 1, 5])\n     * 5\n     * \u003e countNums([1, 100, 98, -7, 1, -1])\n     * 4\n     * \u003e countNums([12, 23, 34, -45, -56, 0])\n     * 5\n     * \u003e countNums([0, 1])\n     * 1\n     * \u003e countNums([1])\n     * 1\n     */\n    public static int countNums(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CountNums",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_108.java",
    "test_prompt": "// CountNumsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountNums}.\n* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.\n*/\nclass CountNumsTest {",
    "method_signature": "countNums(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LargestDivisor.java\npackage scenario3;\n\nclass LargestDivisor {\n\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     *\n     * \u003e largestDivisor(15)\n     * 5\n     * \u003e largestDivisor(3)\n     * 1\n     * \u003e largestDivisor(7)\n     * 1\n     * \u003e largestDivisor(10)\n     * 5\n     * \u003e largestDivisor(100)\n     * 50\n     * \u003e largestDivisor(49)\n     * 7\n     */\n    public static int largestDivisor(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "LargestDivisor",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_24.java",
    "test_prompt": "// LargestDivisorTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestDivisor}.\n* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.\n*/\nclass LargestDivisorTest {",
    "method_signature": "largestDivisor(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortedListSum.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SortedListSum {\n\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sortedListSum([\"aa\", \"a\", \"aaa\"]) \u003d\u003e [\"aa\"]\n     * assert sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]) \u003d\u003e [\"ab\", \"cd\"]\n     *\n     * \u003e sortedListSum([\"aa\", \"a\", \"aaa\"])\n     * [\"aa\"]\n     * \u003e sortedListSum([\"school\", \"AI\", \"asdf\", \"b\"])\n     * [\"AI\", \"asdf\", \"school\"]\n     * \u003e sortedListSum([\"d\", \"b\", \"c\", \"a\"])\n     * []\n     * \u003e sortedListSum([\"d\", \"dcba\", \"abcd\", \"a\"])\n     * [\"abcd\", \"dcba\"]\n     * \u003e sortedListSum([\"AI\", \"ai\", \"au\"])\n     * [\"AI\", \"ai\", \"au\"]\n     * \u003e sortedListSum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\n     * []\n     * \u003e sortedListSum([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])\n     * [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n     */\n    public static List\u003cObject\u003e sortedListSum(List\u003cString\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortedListSum",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_149.java",
    "test_prompt": "// SortedListSumTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortedListSum}.\n* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.\n*/\nclass SortedListSumTest {",
    "method_signature": "sortedListSum(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SmallestChange.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SmallestChange {\n\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) \u003d\u003d 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) \u003d\u003d 1\n     * smallest_change([1, 2, 3, 2, 1]) \u003d\u003d 0\n     *\n     * \u003e smallestChange([1, 2, 3, 5, 4, 7, 9, 6])\n     * 4\n     * \u003e smallestChange([1, 2, 3, 4, 3, 2, 2])\n     * 1\n     * \u003e smallestChange([1, 4, 2])\n     * 1\n     * \u003e smallestChange([1, 4, 4, 2])\n     * 1\n     * \u003e smallestChange([1, 2, 3, 2, 1])\n     * 0\n     * \u003e smallestChange([3, 1, 1, 3])\n     * 0\n     * \u003e smallestChange([1])\n     * 0\n     * \u003e smallestChange([0, 1])\n     * 1\n     */\n    public static int smallestChange(List\u003cInteger\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SmallestChange",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_73.java",
    "test_prompt": "// SmallestChangeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SmallestChange}.\n* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.\n*/\nclass SmallestChangeTest {",
    "method_signature": "smallestChange(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SumSquares1.java\npackage scenario3;\n\nimport java.util.List;\n\nclass SumSquares1 {\n\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst \u003d [1,2,3] the output should be 6\n     * For lst \u003d []  the output should be 0\n     * For lst \u003d [-1,-5,2,-1,-5]  the output should be -126\n     *\n     * \u003e sumSquares([1, 2, 3])\n     * 6\n     * \u003e sumSquares([1, 4, 9])\n     * 14\n     * \u003e sumSquares([])\n     * 0\n     * \u003e sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1])\n     * 9\n     * \u003e sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1])\n     * -3\n     * \u003e sumSquares([0])\n     * 0\n     * \u003e sumSquares([-1, -5, 2, -1, -5])\n     * -126\n     * \u003e sumSquares([-56, -99, 1, 0, -2])\n     * 3030\n     * \u003e sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1])\n     * 0\n     * \u003e sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\n     * -14196\n     * \u003e sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\n     * -1448\n     */\n    public static int sumSquares(List\u003cObject\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SumSquares1",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_142.java",
    "test_prompt": "// SumSquares1Test.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares1}.\n* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.\n*/\nclass SumSquares1Test {",
    "method_signature": "sumSquares(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HexKey.java\npackage scenario3;\n\nclass HexKey {\n\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (\u003ddecimal 11), D (\u003ddecimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num \u003d \"AB\" the output should be 1.\n     * For num \u003d \"1077E\" the output should be 2.\n     * For num \u003d \"ABED1A33\" the output should be 4.\n     * For num \u003d \"123456789ABCDEF0\" the output should be 6.\n     * For num \u003d \"2020\" the output should be 2.\n     *\n     * \u003e hexKey(\"AB\")\n     * 1\n     * \u003e hexKey(\"1077E\")\n     * 2\n     * \u003e hexKey(\"ABED1A33\")\n     * 4\n     * \u003e hexKey(\"2020\")\n     * 2\n     * \u003e hexKey(\"123456789ABCDEF0\")\n     * 6\n     * \u003e hexKey(\"112233445566778899AABBCCDDEEFF00\")\n     * 12\n     * \u003e hexKey([])\n     * 0\n     */\n    public static int hexKey(Object num) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "HexKey",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_78.java",
    "test_prompt": "// HexKeyTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HexKey}.\n* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.\n*/\nclass HexKeyTest {",
    "method_signature": "hexKey(Object)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Multiply.java\npackage scenario3;\n\nclass Multiply {\n\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     * \u003e multiply(148, 412)\n     * 16\n     * \u003e multiply(19, 28)\n     * 72\n     * \u003e multiply(2020, 1851)\n     * 0\n     * \u003e multiply(14, -15)\n     * 20\n     * \u003e multiply(76, 67)\n     * 42\n     * \u003e multiply(17, 27)\n     * 49\n     * \u003e multiply(0, 1)\n     * 0\n     * \u003e multiply(0, 0)\n     * 0\n     */\n    public static int multiply(int a, int b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Multiply",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_97.java",
    "test_prompt": "// MultiplyTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Multiply}.\n* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.\n*/\nclass MultiplyTest {",
    "method_signature": "multiply(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MaxFill.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MaxFill {\n\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Example 1:\n     * Input:\n     * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     * bucket_capacity : 1\n     * Output: 6\n     *\n     * Example 2:\n     * Input:\n     * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     * bucket_capacity : 2\n     * Output: 5\n     *\n     * Example 3:\n     * Input:\n     * grid : [[0,0,0], [0,0,0]]\n     * bucket_capacity : 5\n     * Output: 0\n     *\n     * Constraints:\n     * * all wells have the same length\n     * * 1 \u003c\u003d grid.length \u003c\u003d 10^2\n     * * 1 \u003c\u003d grid[:,1].length \u003c\u003d 10^2\n     * * grid[i][j] -\u003e 0 | 1\n     * * 1 \u003c\u003d capacity \u003c\u003d 10\n     *\n     * \u003e maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n     * 6\n     * \u003e maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n     * 5\n     * \u003e maxFill([[0, 0, 0], [0, 0, 0]], 5)\n     * 0\n     * \u003e maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)\n     * 4\n     * \u003e maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)\n     * 2\n     */\n    public static int maxFill(List\u003cList\u003cInteger\u003e\u003e grid, int capacity) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MaxFill",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_115.java",
    "test_prompt": "// MaxFillTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxFill}.\n* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.\n*/\nclass MaxFillTest {",
    "method_signature": "maxFill(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RoundedAvg.java\npackage scenario3;\n\nclass RoundedAvg {\n\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * roundedAvg(1, 5) \u003d\u003e \"0b11\"\n     * roundedAvg(7, 5) \u003d\u003e -1\n     * roundedAvg(10, 20) \u003d\u003e \"0b1111\"\n     * roundedAvg(20, 33) \u003d\u003e \"0b11010\"\n     *\n     * \u003e roundedAvg(1, 5)\n     * \"0b11\"\n     * \u003e roundedAvg(7, 13)\n     * \"0b1010\"\n     * \u003e roundedAvg(964, 977)\n     * \"0b1111001010\"\n     * \u003e roundedAvg(996, 997)\n     * \"0b1111100100\"\n     * \u003e roundedAvg(560, 851)\n     * \"0b1011000010\"\n     * \u003e roundedAvg(185, 546)\n     * \"0b101101110\"\n     * \u003e roundedAvg(362, 496)\n     * \"0b110101101\"\n     * \u003e roundedAvg(350, 902)\n     * \"0b1001110010\"\n     * \u003e roundedAvg(197, 233)\n     * \"0b11010111\"\n     * \u003e roundedAvg(7, 5)\n     * -1\n     * \u003e roundedAvg(5, 1)\n     * -1\n     * \u003e roundedAvg(5, 5)\n     * \"0b101\"\n     */\n    public static Object roundedAvg(int n, int m) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "RoundedAvg",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_103.java",
    "test_prompt": "// RoundedAvgTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RoundedAvg}.\n* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.\n*/\nclass RoundedAvgTest {",
    "method_signature": "roundedAvg(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PrimeFib.java\npackage scenario3;\n\nclass PrimeFib {\n\n    /**\n     * Returns n-th number that is a Fibonacci number and it\u0027s also prime.\n     *\n     * \u003e primeFib(1)\n     * 2\n     * \u003e primeFib(2)\n     * 3\n     * \u003e primeFib(3)\n     * 5\n     * \u003e primeFib(4)\n     * 13\n     * \u003e primeFib(5)\n     * 89\n     * \u003e primeFib(1)\n     * 2\n     * \u003e primeFib(2)\n     * 3\n     * \u003e primeFib(3)\n     * 5\n     * \u003e primeFib(4)\n     * 13\n     * \u003e primeFib(5)\n     * 89\n     * \u003e primeFib(6)\n     * 233\n     * \u003e primeFib(7)\n     * 1597\n     * \u003e primeFib(8)\n     * 28657\n     * \u003e primeFib(9)\n     * 514229\n     * \u003e primeFib(10)\n     * 433494437\n     */\n    public static int primeFib(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "PrimeFib",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_39.java",
    "test_prompt": "// PrimeFibTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeFib}.\n* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.\n*/\nclass PrimeFibTest {",
    "method_signature": "primeFib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CycpatternCheck.java\npackage scenario3;\n\nclass CycpatternCheck {\n\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpatternCheck(\"abcd\",\"abd\") \u003d\u003e False\n     * cycpatternCheck(\"hello\",\"ell\") \u003d\u003e True\n     * cycpatternCheck(\"whassup\",\"psus\") \u003d\u003e False\n     * cycpatternCheck(\"abab\",\"baa\") \u003d\u003e True\n     * cycpatternCheck(\"efef\",\"eeff\") \u003d\u003e False\n     * cycpatternCheck(\"himenss\",\"simen\") \u003d\u003e True\n     *\n     * \u003e cycpatternCheck(\"xyzw\", \"xyw\")\n     * false\n     * \u003e cycpatternCheck(\"yello\", \"ell\")\n     * true\n     * \u003e cycpatternCheck(\"whattup\", \"ptut\")\n     * false\n     * \u003e cycpatternCheck(\"efef\", \"fee\")\n     * true\n     * \u003e cycpatternCheck(\"abab\", \"aabb\")\n     * false\n     * \u003e cycpatternCheck(\"winemtt\", \"tinem\")\n     * true\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CycpatternCheck",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_154.java",
    "test_prompt": "// CycpatternCheckTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CycpatternCheck}.\n* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.\n*/\nclass CycpatternCheckTest {",
    "method_signature": "cycpatternCheck(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// NumericalLetterGrade.java\npackage scenario3;\n\nimport java.util.List;\n\nclass NumericalLetterGrade {\n\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * \u003e 3.7                A\n     * \u003e 3.3                A-\n     * \u003e 3.0                B+\n     * \u003e 2.7                B\n     * \u003e 2.3                B-\n     * \u003e 2.0                C+\n     * \u003e 1.7                C\n     * \u003e 1.3                C-\n     * \u003e 1.0                D+\n     * \u003e 0.7                D\n     * \u003e 0.0                D-\n     * 0.0                E\n     *\n     * Example:\n     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) \u003d\u003d\u003e [\u0027A+\u0027, \u0027B\u0027, \u0027C-\u0027, \u0027C\u0027, \u0027A-\u0027]\n     *\n     * \u003e numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])\n     * [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     * \u003e numericalLetterGrade([1.2])\n     * [\"D+\"]\n     * \u003e numericalLetterGrade([0.5])\n     * [\"D-\"]\n     * \u003e numericalLetterGrade([0.0])\n     * [\"E\"]\n     * \u003e numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])\n     * [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n     * \u003e numericalLetterGrade([0, 0.7])\n     * [\"E\", \"D-\"]\n     */\n    public static List\u003cString\u003e numericalLetterGrade(List\u003cNumber\u003e grades) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "NumericalLetterGrade",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_81.java",
    "test_prompt": "// NumericalLetterGradeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NumericalLetterGrade}.\n* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.\n*/\nclass NumericalLetterGradeTest {",
    "method_signature": "numericalLetterGrade(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StringSequence.java\npackage scenario3;\n\nclass StringSequence {\n\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * \u003e stringSequence(0)\n     * \"0\"\n     * \u003e stringSequence(5)\n     * \"0 1 2 3 4 5\"\n     * \u003e stringSequence(0)\n     * \"0\"\n     * \u003e stringSequence(3)\n     * \"0 1 2 3\"\n     * \u003e stringSequence(10)\n     * \"0 1 2 3 4 5 6 7 8 9 10\"\n     */\n    public static String stringSequence(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StringSequence",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_15.java",
    "test_prompt": "// StringSequenceTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringSequence}.\n* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.\n*/\nclass StringSequenceTest {",
    "method_signature": "stringSequence(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IncrList.java\npackage scenario3;\n\nimport java.util.List;\n\nclass IncrList {\n\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * \u003e incrList([1, 2, 3])\n     * [2, 3, 4]\n     * \u003e incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     * \u003e incrList([])\n     * []\n     * \u003e incrList([3, 2, 1])\n     * [4, 3, 2]\n     * \u003e incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 3, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public static List\u003cObject\u003e incrList(List\u003cObject\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IncrList",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_42.java",
    "test_prompt": "// IncrListTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IncrList}.\n* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.\n*/\nclass IncrListTest {",
    "method_signature": "incrList(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SameChars.java\npackage scenario3;\n\nclass SameChars {\n\n    /**\n     * Check if two words have the same characters.\n     *\n     * \u003e sameChars(\"abcd\", \"dddddddabce\")\n     * false\n     * \u003e sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n     * true\n     * \u003e sameChars(\"abcd\", \"dddddddabc\")\n     * true\n     * \u003e sameChars(\"dddddddabc\", \"abcd\")\n     * true\n     * \u003e sameChars(\"eabcd\", \"dddddddabc\")\n     * false\n     * \u003e sameChars(\"abcd\", \"dddddddabcf\")\n     * false\n     * \u003e sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n     * false\n     * \u003e sameChars(\"aabb\", \"aaccc\")\n     * false\n     */\n    public static Boolean sameChars(String s0, String s1) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SameChars",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_54.java",
    "test_prompt": "// SameCharsTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SameChars}.\n* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.\n*/\nclass SameCharsTest {",
    "method_signature": "sameChars(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SpecialFactorial.java\npackage scenario3;\n\nclass SpecialFactorial {\n\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) \u003d n! * (n-1)! * (n-2)! * ... * 1!\n     * where n \u003e 0\n     *\n     * For example:\n     * \u003e\u003e\u003e specialFactorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     * \u003e specialFactorial(4)\n     * 288\n     * \u003e specialFactorial(5)\n     * 34560\n     * \u003e specialFactorial(7)\n     * 125411328000L\n     * \u003e specialFactorial(1)\n     * 1\n     */\n    public static long specialFactorial(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SpecialFactorial",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_139.java",
    "test_prompt": "// SpecialFactorialTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpecialFactorial}.\n* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.\n*/\nclass SpecialFactorialTest {",
    "method_signature": "specialFactorial(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// TotalMatch.java\npackage scenario3;\n\nimport java.util.List;\n\nclass TotalMatch {\n\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     *\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027Hi\u0027]) ➞ [\u0027hI\u0027, \u0027Hi\u0027]\n     * total_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hi\u0027, \u0027hi\u0027, \u0027admin\u0027, \u0027project\u0027]) ➞ [\u0027hi\u0027, \u0027admin\u0027]\n     * total_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]) ➞ [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]\n     * total_match([\u00274\u0027], [\u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027]) ➞ [\u00274\u0027]\n     *\n     * \u003e totalMatch([], [])\n     * []\n     * \u003e totalMatch([\"hi\", \"admin\"], [\"hi\", \"hi\"])\n     * [\"hi\", \"hi\"]\n     * \u003e totalMatch([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n     * [\"hi\", \"admin\"]\n     * \u003e totalMatch([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n     * [\"4\"]\n     * \u003e totalMatch([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n     * [\"hI\", \"Hi\"]\n     * \u003e totalMatch([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n     * [\"hI\", \"hi\", \"hi\"]\n     * \u003e totalMatch([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])\n     * [\"hi\", \"admin\"]\n     * \u003e totalMatch([], [\"this\"])\n     * []\n     * \u003e totalMatch([\"this\"], [])\n     * []\n     */\n    public static List\u003cObject\u003e totalMatch(List\u003cObject\u003e lst1, List\u003cObject\u003e lst2) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "TotalMatch",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_74.java",
    "test_prompt": "// TotalMatchTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TotalMatch}.\n* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.\n*/\nclass TotalMatchTest {",
    "method_signature": "totalMatch(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Strlen.java\npackage scenario3;\n\nclass Strlen {\n\n    /**\n     * Return length of given string\n     *\n     * \u003e strlen(\"\")\n     * 0\n     * \u003e strlen(\"abc\")\n     * 3\n     * \u003e strlen(\"\")\n     * 0\n     * \u003e strlen(\"x\")\n     * 1\n     * \u003e strlen(\"asdasnakj\")\n     * 9\n     */\n    public static int strlen(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Strlen",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_23.java",
    "test_prompt": "// StrlenTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strlen}.\n* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.\n*/\nclass StrlenTest {",
    "method_signature": "strlen(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MatchParens.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MatchParens {\n\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses \u0027(\u0027 or close parentheses \u0027)\u0027 only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \u0027(())()\u0027 is good, while the string\n     * \u0027())\u0027 is not.\n     * Return \u0027Yes\u0027 if there\u0027s a way to make a good string, and return \u0027No\u0027 otherwise.\n     *\n     * Examples:\n     * matchParens([\u0027()(\u0027, \u0027)\u0027]) \u003d\u003d \u0027Yes\u0027\n     * matchParens([\u0027)\u0027, \u0027)\u0027]) \u003d\u003d \u0027No\u0027\n     *\n     * \u003e matchParens([\"()(\", \")\"])\n     * \"Yes\"\n     * \u003e matchParens([\")\", \")\"])\n     * \"No\"\n     * \u003e matchParens([\"(()(())\", \"())())\"])\n     * \"No\"\n     * \u003e matchParens([\")())\", \"(()()(\"])\n     * \"Yes\"\n     * \u003e matchParens([\"(())))\", \"(()())((\"])\n     * \"Yes\"\n     * \u003e matchParens([\"()\", \"())\"])\n     * \"No\"\n     * \u003e matchParens([\"(()(\", \"()))()\"])\n     * \"Yes\"\n     * \u003e matchParens([\"((((\", \"((())\"])\n     * \"No\"\n     * \u003e matchParens([\")(()\", \"(()(\"])\n     * \"No\"\n     * \u003e matchParens([\")(\", \")(\"])\n     * \"No\"\n     * \u003e matchParens([\"(\", \")\"])\n     * \"Yes\"\n     * \u003e matchParens([\")\", \"(\"])\n     * \"Yes\"\n     */\n    public static String matchParens(List\u003cString\u003e lst) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MatchParens",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_119.java",
    "test_prompt": "// MatchParensTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MatchParens}.\n* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.\n*/\nclass MatchParensTest {",
    "method_signature": "matchParens(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MaxElement.java\npackage scenario3;\n\nimport java.util.List;\n\nclass MaxElement {\n\n    /**\n     * Return the maximum element in the list.\n     *\n     * \u003e maxElement([1, 2, 3])\n     * 3\n     * \u003e maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     * \u003e maxElement([1, 2, 3])\n     * 3\n     * \u003e maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\n     * 124\n     */\n    public static int maxElement(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "MaxElement",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_35.java",
    "test_prompt": "// MaxElementTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxElement}.\n* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.\n*/\nclass MaxElementTest {",
    "method_signature": "maxElement(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Derivative.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Derivative {\n\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     *\n     * \u003e derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * \u003e derivative([1, 2, 3])\n     * [2, 6]\n     * \u003e derivative([3, 2, 1])\n     * [2, 2]\n     * \u003e derivative([3, 2, 1, 0, 4])\n     * [2, 2, 0, 16]\n     * \u003e derivative([1])\n     * []\n     */\n    public static List\u003cObject\u003e derivative(List\u003cInteger\u003e xs) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Derivative",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_62.java",
    "test_prompt": "// DerivativeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Derivative}.\n* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.\n*/\nclass DerivativeTest {",
    "method_signature": "derivative(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ParseNestedParens.java\npackage scenario3;\n\nimport java.util.List;\n\nclass ParseNestedParens {\n\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * \u003e parseNestedParens(\"(()()) ((())) () ((())()())\")\n     * [2, 3, 1, 3]\n     * \u003e parseNestedParens(\"() (()) ((())) (((())))\")\n     * [1, 2, 3, 4]\n     * \u003e parseNestedParens(\"(()(())((())))\")\n     * [4]\n     */\n    public static List\u003cInteger\u003e parseNestedParens(String parenString) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ParseNestedParens",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_6.java",
    "test_prompt": "// ParseNestedParensTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseNestedParens}.\n* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.\n*/\nclass ParseNestedParensTest {",
    "method_signature": "parseNestedParens(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FindMax.java\npackage scenario3;\n\nimport java.util.List;\n\nclass FindMax {\n\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * findMax([\"name\", \"of\", \"string\"]) \u003d\u003d \"string\"\n     * findMax([\"name\", \"enam\", \"game\"]) \u003d\u003d \"enam\"\n     * findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) \u003d\u003d \"\"aaaaaaa\"\n     *\n     * \u003e findMax([\"name\", \"of\", \"string\"])\n     * \"string\"\n     * \u003e findMax([\"name\", \"enam\", \"game\"])\n     * \"enam\"\n     * \u003e findMax([\"aaaaaaa\", \"bb\", \"cc\"])\n     * \"aaaaaaa\"\n     * \u003e findMax([\"abc\", \"cba\"])\n     * \"abc\"\n     * \u003e findMax([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\n     * \"footbott\"\n     * \u003e findMax([\"we\", \"are\", \"gonna\", \"rock\"])\n     * \"gonna\"\n     * \u003e findMax([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\n     * \"nation\"\n     * \u003e findMax([\"this\", \"is\", \"a\", \"prrk\"])\n     * \"this\"\n     * \u003e findMax([\"b\"])\n     * \"b\"\n     * \u003e findMax([\"play\", \"play\", \"play\"])\n     * \"play\"\n     */\n    public static String findMax(List\u003cString\u003e words) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FindMax",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_158.java",
    "test_prompt": "// FindMaxTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindMax}.\n* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.\n*/\nclass FindMaxTest {",
    "method_signature": "findMax(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SortNumbers.java\npackage scenario3;\n\nclass SortNumbers {\n\n    /**\n     * Input is a space-delimited string of numbers from \u0027zero\u0027 to \u0027nine\u0027.\n     * Valid choices are \u0027zero\u0027, \u0027one\u0027, \u0027two\u0027, \u0027three\u0027, \u0027four\u0027, \u0027five\u0027, \u0027six\u0027, \u0027seven\u0027, \u0027eight\u0027 and \u0027nine\u0027.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * \u003e sortNumbers(\"three one five\")\n     * \"one three five\"\n     * \u003e sortNumbers(\"\")\n     * \"\"\n     * \u003e sortNumbers(\"three\")\n     * \"three\"\n     * \u003e sortNumbers(\"three five nine\")\n     * \"three five nine\"\n     * \u003e sortNumbers(\"five zero four seven nine eight\")\n     * \"zero four five seven eight nine\"\n     * \u003e sortNumbers(\"six five four three two one zero\")\n     * \"zero one two three four five six\"\n     */\n    public static String sortNumbers(String numbers) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "SortNumbers",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_19.java",
    "test_prompt": "// SortNumbersTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortNumbers}.\n* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.\n*/\nclass SortNumbersTest {",
    "method_signature": "sortNumbers(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetOddCollatz.java\npackage scenario3;\n\nimport java.util.List;\n\nclass GetOddCollatz {\n\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     * 1. Collatz(1) is [1].\n     * 2. returned list sorted in increasing order.\n     *\n     * For example:\n     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     * \u003e getOddCollatz(14)\n     * [1, 5, 7, 11, 13, 17]\n     * \u003e getOddCollatz(5)\n     * [1, 5]\n     * \u003e getOddCollatz(12)\n     * [1, 3, 5]\n     * \u003e getOddCollatz(1)\n     * [1]\n     */\n    public static List\u003cInteger\u003e getOddCollatz(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GetOddCollatz",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_123.java",
    "test_prompt": "// GetOddCollatzTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetOddCollatz}.\n* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.\n*/\nclass GetOddCollatzTest {",
    "method_signature": "getOddCollatz(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Common.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     *\n     * \u003e common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * \u003e common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     * \u003e common([4, 3, 2, 8], [3, 2, 4])\n     * [2, 3, 4]\n     * \u003e common([4, 3, 2, 8], [])\n     * []\n     */\n    public static List\u003cObject\u003e common(List\u003cInteger\u003e l1, List\u003cObject\u003e l2) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Common",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_58.java",
    "test_prompt": "// CommonTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Common}.\n* It contains ten unit test cases for the {@link Common#common(List, List)} method.\n*/\nclass CommonTest {",
    "method_signature": "common(List, List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StringToMd5.java\npackage scenario3;\n\nclass StringToMd5 {\n\n    /**\n     * Given a string \u0027text\u0027, return its md5 hash equivalent string.\n     * If \u0027text\u0027 is an empty string, return null.\n     *\n     * \u003e\u003e\u003e stringToMd5(\u0027Hello world\u0027) \u003d\u003d \u00273e25960a79dbc69b674cd4ec67a72c62\u0027\n     *\n     * \u003e stringToMd5(\"Hello world\")\n     * \"3e25960a79dbc69b674cd4ec67a72c62\"\n     * \u003e stringToMd5(\"\")\n     * null\n     * \u003e stringToMd5(\"A B C\")\n     * \"0ef78513b0cb8cef12743f5aeb35f888\"\n     * \u003e stringToMd5(\"password\")\n     * \"5f4dcc3b5aa765d61d8327deb882cf99\"\n     */\n    public static String stringToMd5(String text) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "StringToMd5",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_162.java",
    "test_prompt": "// StringToMd5Test.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringToMd5}.\n* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.\n*/\nclass StringToMd5Test {",
    "method_signature": "stringToMd5(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CanArrange.java\npackage scenario3;\n\nimport java.util.List;\n\nclass CanArrange {\n\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * canArrange([1,2,4,3,5]) \u003d 3\n     * canArrange([1,2,3]) \u003d -1\n     *\n     * \u003e canArrange([1, 2, 4, 3, 5])\n     * 3\n     * \u003e canArrange([1, 2, 4, 5])\n     * -1\n     * \u003e canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10])\n     * 2\n     * \u003e canArrange([4, 8, 5, 7, 3])\n     * 4\n     * \u003e canArrange([])\n     * -1\n     */\n    public static int canArrange(List\u003cObject\u003e arr) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CanArrange",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_135.java",
    "test_prompt": "// CanArrangeTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CanArrange}.\n* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.\n*/\nclass CanArrangeTest {",
    "method_signature": "canArrange(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CheckIfLastCharIsALetter.java\npackage scenario3;\n\nclass CheckIfLastCharIsALetter {\n\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * checkIfLastCharIsALetter(\"apple pie\") ➞ False\n     * checkIfLastCharIsALetter(\"apple pi e\") ➞ True\n     * checkIfLastCharIsALetter(\"apple pi e \") ➞ False\n     * checkIfLastCharIsALetter(\"\") ➞ False\n     *\n     * \u003e checkIfLastCharIsALetter(\"apple\")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"apple pi e\")\n     * true\n     * \u003e checkIfLastCharIsALetter(\"eeeee\")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"A\")\n     * true\n     * \u003e checkIfLastCharIsALetter(\"Pumpkin pie \")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"Pumpkin pie 1\")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"\")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"eeeee e \")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"apple pie\")\n     * false\n     * \u003e checkIfLastCharIsALetter(\"apple pi e \")\n     * false\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CheckIfLastCharIsALetter",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_134.java",
    "test_prompt": "// CheckIfLastCharIsALetterTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckIfLastCharIsALetter}.\n* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.\n*/\nclass CheckIfLastCharIsALetterTest {",
    "method_signature": "checkIfLastCharIsALetter(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GenerateIntegers.java\npackage scenario3;\n\nimport java.util.List;\n\nclass GenerateIntegers {\n\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     *\n     * For example:\n     * generateIntegers(2, 8) \u003d\u003e [2, 4, 6, 8]\n     * generateIntegers(8, 2) \u003d\u003e [2, 4, 6, 8]\n     * generateIntegers(10, 14) \u003d\u003e []\n     *\n     * \u003e generateIntegers(2, 10)\n     * [2, 4, 6, 8]\n     * \u003e generateIntegers(10, 2)\n     * [2, 4, 6, 8]\n     * \u003e generateIntegers(132, 2)\n     * [2, 4, 6, 8]\n     * \u003e generateIntegers(17, 89)\n     * []\n     */\n    public static List\u003cObject\u003e generateIntegers(int a, int b) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GenerateIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_163.java",
    "test_prompt": "// GenerateIntegersTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GenerateIntegers}.\n* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.\n*/\nclass GenerateIntegersTest {",
    "method_signature": "generateIntegers(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// LargestPrimeFactor.java\npackage scenario3;\n\nclass LargestPrimeFactor {\n\n    /**\n     * Return the largest prime factor of n. Assume n \u003e 1 and is not a prime.\n     *\n     * \u003e largestPrimeFactor(2048)\n     * 2\n     * \u003e largestPrimeFactor(15)\n     * 5\n     * \u003e largestPrimeFactor(27)\n     * 3\n     * \u003e largestPrimeFactor(63)\n     * 7\n     * \u003e largestPrimeFactor(330)\n     * 11\n     * \u003e largestPrimeFactor(13195)\n     * 29\n     */\n    public static int largestPrimeFactor(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "LargestPrimeFactor",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_59.java",
    "test_prompt": "// LargestPrimeFactorTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestPrimeFactor}.\n* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.\n*/\nclass LargestPrimeFactorTest {",
    "method_signature": "largestPrimeFactor(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AddElements.java\npackage scenario3;\n\nimport java.util.List;\n\nclass AddElements {\n\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * Example:\n     *\n     * Input: arr \u003d [111,21,3,4000,5,6,7,8,9], k \u003d 4\n     * Output: 24 # sum of 21 + 3\n     *\n     * Constraints:\n     * 1. 1 \u003c\u003d len(arr) \u003c\u003d 100\n     * 2. 1 \u003c\u003d k \u003c\u003d len(arr)\n     *\n     * \u003e addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)\n     * -4\n     * \u003e addElements([111, 121, 3, 4000, 5, 6], 2)\n     * 0\n     * \u003e addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\n     * 125\n     * \u003e addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n     * 24\n     * \u003e addElements([1], 1)\n     * 1\n     */\n    public static int addElements(List\u003cInteger\u003e arr, int k) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "AddElements",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_122.java",
    "test_prompt": "// AddElementsTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddElements}.\n* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.\n*/\nclass AddElementsTest {",
    "method_signature": "addElements(List, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HowManyTimes.java\npackage scenario3;\n\nclass HowManyTimes {\n\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * \u003e howManyTimes(\"\", \"a\")\n     * 0\n     * \u003e howManyTimes(\"aaa\", \"a\")\n     * 3\n     * \u003e howManyTimes(\"aaaa\", \"aa\")\n     * 3\n     * \u003e howManyTimes(\"\", \"x\")\n     * 0\n     * \u003e howManyTimes(\"xyxyxyx\", \"x\")\n     * 4\n     * \u003e howManyTimes(\"cacacacac\", \"cac\")\n     * 4\n     * \u003e howManyTimes(\"john doe\", \"john\")\n     * 1\n     */\n    public static int howManyTimes(String string, String substring) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "HowManyTimes",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_18.java",
    "test_prompt": "// HowManyTimesTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HowManyTimes}.\n* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.\n*/\nclass HowManyTimesTest {",
    "method_signature": "howManyTimes(String, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Eat.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Eat {\n\n    /**\n     * * You\u0027re a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day\u0027s meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     * the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Example:\n     * * eat(5, 6, 10) -\u003e [11, 4]\n     * * eat(4, 8, 9) -\u003e [12, 1]\n     * * eat(1, 10, 10) -\u003e [11, 0]\n     * * eat(2, 11, 5) -\u003e [7, 0]\n     *\n     * Variables:\n     *\n     * @number : integer\n     * the number of carrots that you have eaten.\n     * @need : integer\n     * the number of carrots that you need to eat.\n     * @remaining : integer\n     * the number of remaining carrots that exist in stock\n     *\n     * Constrain:\n     * * 0 \u003c\u003d number \u003c\u003d 1000\n     * * 0 \u003c\u003d need \u003c\u003d 1000\n     * * 0 \u003c\u003d remaining \u003c\u003d 1000\n     *\n     * Have fun :)\n     *\n     * \u003e eat(5, 6, 10)\n     * [11, 4]\n     * \u003e eat(4, 8, 9)\n     * [12, 1]\n     * \u003e eat(1, 10, 10)\n     * [11, 0]\n     * \u003e eat(2, 11, 5)\n     * [7, 0]\n     * \u003e eat(4, 5, 7)\n     * [9, 2]\n     * \u003e eat(4, 5, 1)\n     * [5, 0]\n     */\n    public static List\u003cInteger\u003e eat(int number, int need, int remaining) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Eat",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_159.java",
    "test_prompt": "// EatTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Eat}.\n* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.\n*/\nclass EatTest {",
    "method_signature": "eat(int, int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Fibfib.java\npackage scenario3;\n\nclass Fibfib {\n\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that\u0027s defined as follows:\n     * fibfib(0) \u003d\u003d 0\n     * fibfib(1) \u003d\u003d 0\n     * fibfib(2) \u003d\u003d 1\n     * fibfib(n) \u003d\u003d fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     *\n     * \u003e fibfib(2)\n     * 1\n     * \u003e fibfib(1)\n     * 0\n     * \u003e fibfib(5)\n     * 4\n     * \u003e fibfib(8)\n     * 24\n     * \u003e fibfib(10)\n     * 81\n     * \u003e fibfib(12)\n     * 274\n     * \u003e fibfib(14)\n     * 927\n     */\n    public static int fibfib(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Fibfib",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_63.java",
    "test_prompt": "// FibfibTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fibfib}.\n* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.\n*/\nclass FibfibTest {",
    "method_signature": "fibfib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FilterBySubstring.java\npackage scenario3;\n\nimport java.util.List;\n\nclass FilterBySubstring {\n\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * \u003e filterBySubstring([], \"a\")\n     * []\n     * \u003e filterBySubstring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n     * [\"abc\", \"bacd\", \"array\"]\n     * \u003e filterBySubstring([], \"john\")\n     * []\n     * \u003e filterBySubstring([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n     * [\"xxx\", \"xxxAAA\", \"xxx\"]\n     * \u003e filterBySubstring([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\")\n     * [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n     * \u003e filterBySubstring([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\")\n     * [\"grunt\", \"prune\"]\n     */\n    public static List\u003cObject\u003e filterBySubstring(List\u003cObject\u003e strings, String substring) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FilterBySubstring",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_7.java",
    "test_prompt": "// FilterBySubstringTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterBySubstring}.\n* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.\n*/\nclass FilterBySubstringTest {",
    "method_signature": "filterBySubstring(List, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Unique.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Unique {\n\n    /**\n     * Return sorted unique elements in a list\n     *\n     * \u003e unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     * \u003e unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List\u003cInteger\u003e unique(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Unique",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_34.java",
    "test_prompt": "// UniqueTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Unique}.\n* It contains ten unit test cases for the {@link Unique#unique(List)} method.\n*/\nclass UniqueTest {",
    "method_signature": "unique(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GetClosestVowel.java\npackage scenario3;\n\nclass GetClosestVowel {\n\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn\u0027t count. Return empty string if you didn\u0027t\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     *\n     * Example:\n     * getClosestVowel(\"yogurt\") \u003d\u003d\u003e \"u\"\n     * getClosestVowel(\"FULL\") \u003d\u003d\u003e \"U\"\n     * getClosestVowel(\"quick\") \u003d\u003d\u003e \"\"\n     * getClosestVowel(\"ab\") \u003d\u003d\u003e \"\"\n     *\n     * \u003e getClosestVowel(\"yogurt\")\n     * \"u\"\n     * \u003e getClosestVowel(\"full\")\n     * \"u\"\n     * \u003e getClosestVowel(\"easy\")\n     * \"\"\n     * \u003e getClosestVowel(\"eAsy\")\n     * \"\"\n     * \u003e getClosestVowel(\"ali\")\n     * \"\"\n     * \u003e getClosestVowel(\"bad\")\n     * \"a\"\n     * \u003e getClosestVowel(\"most\")\n     * \"o\"\n     * \u003e getClosestVowel(\"ab\")\n     * \"\"\n     * \u003e getClosestVowel(\"ba\")\n     * \"\"\n     * \u003e getClosestVowel(\"quick\")\n     * \"\"\n     * \u003e getClosestVowel(\"anime\")\n     * \"i\"\n     * \u003e getClosestVowel(\"Asia\")\n     * \"\"\n     * \u003e getClosestVowel(\"Above\")\n     * \"o\"\n     */\n    public static String getClosestVowel(String word) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "GetClosestVowel",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_118.java",
    "test_prompt": "// GetClosestVowelTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetClosestVowel}.\n* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.\n*/\nclass GetClosestVowelTest {",
    "method_signature": "getClosestVowel(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FilterIntegers.java\npackage scenario3;\n\nimport java.util.List;\n\nclass FilterIntegers {\n\n    /**\n     * Filter given list of any Java values only for integers.\n     *\n     * \u003e filterIntegers([\"a\", 3.14, 5])\n     * [5]\n     * \u003e filterIntegers([1, 2, 3, \"abc\", {}, []])\n     * [1, 2, 3]\n     * \u003e filterIntegers([])\n     * []\n     * \u003e filterIntegers([4, {}, [], 23.2, 9, \"adasd\"])\n     * [4, 9]\n     * \u003e filterIntegers([3, \"c\", 3, 3, \"a\", \"b\"])\n     * [3, 3, 3]\n     */\n    public static List\u003cObject\u003e filterIntegers(List\u003cObject\u003e values) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "FilterIntegers",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_22.java",
    "test_prompt": "// FilterIntegersTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterIntegers}.\n* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.\n*/\nclass FilterIntegersTest {",
    "method_signature": "filterIntegers(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsMultiplyPrime.java\npackage scenario3;\n\nclass IsMultiplyPrime {\n\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less than 100.\n     * Example:\n     * isMultiplyPrime(30) \u003d\u003d true\n     * 30 \u003d 2 * 3 * 5\n     *\n     * \u003e isMultiplyPrime(5)\n     * false\n     * \u003e isMultiplyPrime(30)\n     * true\n     * \u003e isMultiplyPrime(8)\n     * true\n     * \u003e isMultiplyPrime(10)\n     * false\n     * \u003e isMultiplyPrime(125)\n     * true\n     * \u003e isMultiplyPrime(105)\n     * true\n     * \u003e isMultiplyPrime(126)\n     * false\n     * \u003e isMultiplyPrime(729)\n     * false\n     * \u003e isMultiplyPrime(891)\n     * false\n     * \u003e isMultiplyPrime(1001)\n     * true\n     */\n    public static Boolean isMultiplyPrime(int a) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsMultiplyPrime",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_75.java",
    "test_prompt": "// IsMultiplyPrimeTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsMultiplyPrime}.\n* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.\n*/\nclass IsMultiplyPrimeTest {",
    "method_signature": "isMultiplyPrime(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsEqualToSumEven.java\npackage scenario3;\n\nclass IsEqualToSumEven {\n\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * isEqualToSumEven(4) \u003d\u003d False\n     * isEqualToSumEven(6) \u003d\u003d False\n     * isEqualToSumEven(8) \u003d\u003d True\n     *\n     * \u003e isEqualToSumEven(4)\n     * false\n     * \u003e isEqualToSumEven(6)\n     * false\n     * \u003e isEqualToSumEven(8)\n     * true\n     * \u003e isEqualToSumEven(10)\n     * true\n     * \u003e isEqualToSumEven(11)\n     * false\n     * \u003e isEqualToSumEven(12)\n     * true\n     * \u003e isEqualToSumEven(13)\n     * false\n     * \u003e isEqualToSumEven(16)\n     * true\n     */\n    public static Boolean isEqualToSumEven(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsEqualToSumEven",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_138.java",
    "test_prompt": "// IsEqualToSumEvenTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsEqualToSumEven}.\n* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.\n*/\nclass IsEqualToSumEvenTest {",
    "method_signature": "isEqualToSumEven(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Fib.java\npackage scenario3;\n\nclass Fib {\n\n    /**\n     * Return n-th Fibonacci number.\n     *\n     * \u003e fib(10)\n     * 55\n     * \u003e fib(1)\n     * 1\n     * \u003e fib(8)\n     * 21\n     * \u003e fib(11)\n     * 89\n     * \u003e fib(12)\n     * 144\n     */\n    public static int fib(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Fib",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_55.java",
    "test_prompt": "// FibTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib}.\n* It contains ten unit test cases for the {@link Fib#fib(int)} method.\n*/\nclass FibTest {",
    "method_signature": "fib(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// PairsSumToZero.java\npackage scenario3;\n\nimport java.util.List;\n\nclass PairsSumToZero {\n\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns true if there are two distinct elements in the list that\n     * sum to zero, and false otherwise.\n     *\n     * \u003e pairsSumToZero([1, 3, 5, 0])\n     * false\n     * \u003e pairsSumToZero([1, 3, -2, 1])\n     * false\n     * \u003e pairsSumToZero([1, 2, 3, 7])\n     * false\n     * \u003e pairsSumToZero([2, 4, -5, 3, 5, 7])\n     * true\n     * \u003e pairsSumToZero([1])\n     * false\n     * \u003e pairsSumToZero([1, 3, 5, 0])\n     * false\n     * \u003e pairsSumToZero([1, 3, -2, 1])\n     * false\n     * \u003e pairsSumToZero([1, 2, 3, 7])\n     * false\n     * \u003e pairsSumToZero([2, 4, -5, 3, 5, 7])\n     * true\n     * \u003e pairsSumToZero([1])\n     * false\n     * \u003e pairsSumToZero([-3, 9, -1, 3, 2, 30])\n     * true\n     * \u003e pairsSumToZero([-3, 9, -1, 3, 2, 31])\n     * true\n     * \u003e pairsSumToZero([-3, 9, -1, 4, 2, 30])\n     * false\n     * \u003e pairsSumToZero([-3, 9, -1, 4, 2, 31])\n     * false\n     */\n    public static Boolean pairsSumToZero(List\u003cInteger\u003e l) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "PairsSumToZero",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_43.java",
    "test_prompt": "// PairsSumToZeroTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PairsSumToZero}.\n* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.\n*/\nclass PairsSumToZeroTest {",
    "method_signature": "pairsSumToZero(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AllPrefixes.java\npackage scenario3;\n\nimport java.util.List;\n\nclass AllPrefixes {\n\n    /**\n     * Return list of all prefixes from shortest to longest of the input string.\n     *\n     * \u003e allPrefixes(\"abc\")\n     * [\"a\", \"ab\", \"abc\"]\n     * \u003e allPrefixes(\"\")\n     * []\n     * \u003e allPrefixes(\"asdfgh\")\n     * [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n     * \u003e allPrefixes(\"WWW\")\n     * [\"W\", \"WW\", \"WWW\"]\n     */\n    public static List\u003cObject\u003e allPrefixes(String string) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "AllPrefixes",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_14.java",
    "test_prompt": "// AllPrefixesTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AllPrefixes}.\n* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.\n*/\nclass AllPrefixesTest {",
    "method_signature": "allPrefixes(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IsHappy.java\npackage scenario3;\n\nclass IsHappy {\n\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * isHappy(a) \u003d\u003e False\n     * isHappy(aa) \u003d\u003e False\n     * isHappy(abcd) \u003d\u003e True\n     * isHappy(aabb) \u003d\u003e False\n     * isHappy(adb) \u003d\u003e True\n     * isHappy(xyy) \u003d\u003e False\n     *\n     * \u003e isHappy(\"a\")\n     * false\n     * \u003e isHappy(\"aa\")\n     * false\n     * \u003e isHappy(\"abcd\")\n     * true\n     * \u003e isHappy(\"aabb\")\n     * false\n     * \u003e isHappy(\"adb\")\n     * true\n     * \u003e isHappy(\"xyy\")\n     * false\n     * \u003e isHappy(\"iopaxpoi\")\n     * true\n     * \u003e isHappy(\"iopaxioi\")\n     * false\n     */\n    public static Boolean isHappy(String s) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "IsHappy",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_80.java",
    "test_prompt": "// IsHappyTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsHappy}.\n* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.\n*/\nclass IsHappyTest {",
    "method_signature": "isHappy(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EvenOddCount.java\npackage scenario3;\n\nimport java.util.List;\n\nclass EvenOddCount {\n\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n     *\n     * Example:\n     * evenOddCount(-12) \u003d\u003d\u003e (1, 1)\n     * evenOddCount(123) \u003d\u003d\u003e (1, 2)\n     *\n     * \u003e evenOddCount(7)\n     * [0, 1]\n     * \u003e evenOddCount(-78)\n     * [1, 1]\n     * \u003e evenOddCount(3452)\n     * [2, 2]\n     * \u003e evenOddCount(346211)\n     * [3, 3]\n     * \u003e evenOddCount(-345821)\n     * [3, 3]\n     * \u003e evenOddCount(-2)\n     * [1, 0]\n     * \u003e evenOddCount(-45347)\n     * [2, 3]\n     * \u003e evenOddCount(0)\n     * [1, 0]\n     */\n    public static List\u003cInteger\u003e evenOddCount(int num) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "EvenOddCount",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_155.java",
    "test_prompt": "// EvenOddCountTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddCount}.\n* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.\n*/\nclass EvenOddCountTest {",
    "method_signature": "evenOddCount(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ChooseNum.java\npackage scenario3;\n\nclass ChooseNum {\n\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there\u0027s no such number, then the function should return -1.\n     *\n     * For example:\n     * chooseNum(12, 15) \u003d 14\n     * chooseNum(13, 12) \u003d -1\n     *\n     * \u003e chooseNum(12, 15)\n     * 14\n     * \u003e chooseNum(13, 12)\n     * -1\n     * \u003e chooseNum(33, 12354)\n     * 12354\n     * \u003e chooseNum(5234, 5233)\n     * -1\n     * \u003e chooseNum(6, 29)\n     * 28\n     * \u003e chooseNum(27, 10)\n     * -1\n     * \u003e chooseNum(7, 7)\n     * -1\n     * \u003e chooseNum(546, 546)\n     * 546\n     */\n    public static int chooseNum(int x, int y) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "ChooseNum",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_102.java",
    "test_prompt": "// ChooseNumTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChooseNum}.\n* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.\n*/\nclass ChooseNumTest {",
    "method_signature": "chooseNum(int, int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Minsubarraysum.java\npackage scenario3;\n\nimport java.util.List;\n\nclass Minsubarraysum {\n\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) \u003d\u003d 1\n     * minSubArraySum([-1, -2, -3]) \u003d\u003d -6\n     *\n     * \u003e minsubarraysum([2, 3, 4, 1, 2, 4])\n     * 1\n     * \u003e minsubarraysum([-1, -2, -3])\n     * -6\n     * \u003e minsubarraysum([-1, -2, -3, 2, -10])\n     * -14\n     * \u003e minsubarraysum([-9999999999999999L])\n     * -9999999999999999L\n     * \u003e minsubarraysum([0, 10, 20, 1000000])\n     * 0\n     * \u003e minsubarraysum([-1, -2, -3, 10, -5])\n     * -6\n     * \u003e minsubarraysum([100, -1, -2, -3, 10, -5])\n     * -6\n     * \u003e minsubarraysum([10, 11, 13, 8, 3, 4])\n     * 3\n     * \u003e minsubarraysum([100, -33, 32, -1, 0, -2])\n     * -33\n     * \u003e minsubarraysum([-10])\n     * -10\n     * \u003e minsubarraysum([7])\n     * 7\n     * \u003e minsubarraysum([1, -1])\n     * -1\n     */\n    public static long minsubarraysum(List\u003cObject\u003e nums) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "Minsubarraysum",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_114.java",
    "test_prompt": "// MinsubarraysumTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minsubarraysum}.\n* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.\n*/\nclass MinsubarraysumTest {",
    "method_signature": "minsubarraysum(List)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DecimalToBinary.java\npackage scenario3;\n\nclass DecimalToBinary {\n\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be \u00270\u0027 or \u00271\u0027.\n     *\n     * There will be an extra couple of characters \u0027db\u0027 at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * - decimalToBinary(15)   # returns \"db1111db\"\n     * - decimalToBinary(32)   # returns \"db100000db\"\n     *\n     * \u003e decimalToBinary(0)\n     * \"db0db\"\n     * \u003e decimalToBinary(32)\n     * \"db100000db\"\n     * \u003e decimalToBinary(103)\n     * \"db1100111db\"\n     * \u003e decimalToBinary(15)\n     * \"db1111db\"\n     */\n    public static String decimalToBinary(int decimal) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "DecimalToBinary",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_79.java",
    "test_prompt": "// DecimalToBinaryTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DecimalToBinary}.\n* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.\n*/\nclass DecimalToBinaryTest {",
    "method_signature": "decimalToBinary(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CountUpTo.java\npackage scenario3;\n\nimport java.util.List;\n\nclass CountUpTo {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * countUpTo(5) \u003d\u003e [2,3]\n     * countUpTo(11) \u003d\u003e [2,3,5,7]\n     * countUpTo(0) \u003d\u003e []\n     * countUpTo(20) \u003d\u003e [2,3,5,7,11,13,17,19]\n     * countUpTo(1) \u003d\u003e []\n     * countUpTo(18) \u003d\u003e [2,3,5,7,11,13,17]\n     *\n     * \u003e countUpTo(5)\n     * [2, 3]\n     * \u003e countUpTo(6)\n     * [2, 3, 5]\n     * \u003e countUpTo(7)\n     * [2, 3, 5]\n     * \u003e countUpTo(10)\n     * [2, 3, 5, 7]\n     * \u003e countUpTo(0)\n     * []\n     * \u003e countUpTo(22)\n     * [2, 3, 5, 7, 11, 13, 17, 19]\n     * \u003e countUpTo(1)\n     * []\n     * \u003e countUpTo(18)\n     * [2, 3, 5, 7, 11, 13, 17]\n     * \u003e countUpTo(47)\n     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n     * \u003e countUpTo(101)\n     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n     */\n    public static List\u003cObject\u003e countUpTo(int n) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "CountUpTo",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_96.java",
    "test_prompt": "// CountUpToTest.java\npackage scenario3;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpTo}.\n* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.\n*/\nclass CountUpToTest {",
    "method_signature": "countUpTo(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// WordsInSentence.java\npackage scenario3;\n\nclass WordsInSentence {\n\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence \u003d \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence \u003d \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 \u003c\u003d len(sentence) \u003c\u003d 100\n     * * sentence contains only letters\n     *\n     * \u003e wordsInSentence(\"This is a test\")\n     * \"is\"\n     * \u003e wordsInSentence(\"lets go for swimming\")\n     * \"go for\"\n     * \u003e wordsInSentence(\"there is no place available here\")\n     * \"there is no place\"\n     * \u003e wordsInSentence(\"Hi I am Hussein\")\n     * \"Hi am Hussein\"\n     * \u003e wordsInSentence(\"go for it\")\n     * \"go for it\"\n     * \u003e wordsInSentence(\"here\")\n     * \"\"\n     * \u003e wordsInSentence(\"here is\")\n     * \"is\"\n     */\n    public static String wordsInSentence(String sentence) {\n    }\n}\n",
    "package": "scenario3",
    "classname": "WordsInSentence",
    "id": "/HumanEvalJava/src/main/java/scenario3/id_143.java",
    "test_prompt": "// WordsInSentenceTest.java\npackage scenario3;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsInSentence}.\n* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.\n*/\nclass WordsInSentenceTest {",
    "method_signature": "wordsInSentence(String)",
    "suffix": ""
  }
]