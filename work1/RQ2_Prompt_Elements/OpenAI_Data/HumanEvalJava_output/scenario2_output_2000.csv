ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-A4OmxMdRN9GgfeVENPM0rLRxMPZYX,/HumanEvalJava/src/main/java/scenario2/id_52.java,10.735478639602661,stop,"// BelowThreshold.java
package scenario2;

import java.util.List;

class BelowThreshold {

    /**
     * Return True if all numbers in the list l are below threshold t.
     */
    public static Boolean belowThreshold(List<Integer> l, int t) {
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) >= t) {
                return false;
            }
        }
        return true;
    }
}
","// BelowThresholdTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {","// BelowThresholdTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
	// Test case 1: Empty list
			@Test
			void testEmptyList() {
				List<Integer> l = new ArrayList<>();
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(true, result);
			}
			
			// Test case 2: List with one element below threshold
			@Test
			void testOneElementBelowThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(3);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(true, result);
			}
			
			// Test case 3: List with one element equal to threshold
			@Test
			void testOneElementEqualToThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 4: List with one element above threshold
			@Test
			void testOneElementAboveThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(7);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 5: List with multiple elements all below threshold
			@Test
			void testMultipleElementsAllBelowThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(3);
				l.add(2);
				l.add(4);
				l.add(1);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(true, result);
			}
			
			// Test case 6: List with multiple elements all equal to threshold
			@Test
			void testMultipleElementsAllEqualToThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(5);
				l.add(5);
				l.add(5);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 7: List with multiple elements all above threshold
			@Test
			void testMultipleElementsAllAboveThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(7);
				l.add(8);
				l.add(6);
				l.add(9);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 8: List with multiple elements some below and some equal to threshold
			@Test
			void testMultipleElementsSomeBelowSomeEqualToThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(3);
				l.add(5);
				l.add(2);
				l.add(5);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 9: List with multiple elements some below and some above threshold
			@Test
			void testMultipleElementsSomeBelowSomeAboveThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(3);
				l.add(7);
				l.add(2);
				l.add(8);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
			
			// Test case 10: List with multiple elements some equal to and some above threshold
			@Test
			void testMultipleElementsSomeEqualToSomeAboveThreshold() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(7);
				l.add(5);
				l.add(8);
				int t = 5;
				Boolean result = BelowThreshold.belowThreshold(l, t);
				assertEquals(false, result);
			}
}"
cmpl-A4Onzz10bhduSbFmG95LYIeTfmuQa,/HumanEvalJava/src/main/java/scenario2/id_53.java,5.952125787734985,stop,"// Add.java
package scenario2;

class Add {

    /**
     * Add two numbers x and y
     */
    public static int add(int x, int y) {
        return x + y;
    }
}
","// AddTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {","// AddTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {
	// Test case 1
			@Test
			void testAdd1() {
				int result = Add.add(1, 2);
				assertEquals(3, result);
			}
			
			// Test case 2
			@Test
			void testAdd2() {
				int result = Add.add(0, 0);
				assertEquals(0, result);
			}
			
			// Test case 3
			@Test
			void testAdd3() {
				int result = Add.add(-1, 1);
				assertEquals(0, result);
			}
			
			// Test case 4
			@Test
			void testAdd4() {
				int result = Add.add(1, -1);
				assertEquals(0, result);
			}
			
			// Test case 5
			@Test
			void testAdd5() {
				int result = Add.add(-1, -1);
				assertEquals(-2, result);
			}
			
			// Test case 6
			@Test
			void testAdd6() {
				int result = Add.add(1, 0);
				assertEquals(1, result);
			}
			
			// Test case 7
			@Test
			void testAdd7() {
				int result = Add.add(0, 1);
				assertEquals(1, result);
			}
			
			// Test case 8
			@Test
			void testAdd8() {
				int result = Add.add(1, 1);
				assertEquals(2, result);
			}
			
			// Test case 9
			@Test
			void testAdd9() {
				int result = Add.add(2, 2);
				assertEquals(4, result);
			}
			
			// Test case 10
			@Test
			void testAdd10() {
				int result = Add.add(3, 3);
				assertEquals(6, result);
			}
}"
cmpl-A4Op2dCup9oeFPUJdHwROCSVpqFF3,/HumanEvalJava/src/main/java/scenario2/id_45.java,6.735762596130371,stop,"// TriangleArea.java
package scenario2;

class TriangleArea {

    /**
     * Given length of a side and high return area for a triangle.
     */
    public static Double triangleArea(int a, int h) {
        return (a * h) / 2.0;
    }
}
","// TriangleAreaTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {","// TriangleAreaTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
	// Test case 1: a = 0, h = 0
			@Test
			void testTriangleArea1() {
				Double expected = 0.0;
				Double actual = TriangleArea.triangleArea(0, 0);
				assertEquals(expected, actual);
			}
			
			// Test case 2: a = 1, h = 1
			@Test
			void testTriangleArea2() {
				Double expected = 0.5;
				Double actual = TriangleArea.triangleArea(1, 1);
				assertEquals(expected, actual);
			}
			
			// Test case 3: a = 2, h = 2
			@Test
			void testTriangleArea3() {
				Double expected = 2.0;
				Double actual = TriangleArea.triangleArea(2, 2);
				assertEquals(expected, actual);
			}
			
			// Test case 4: a = 3, h = 3
			@Test
			void testTriangleArea4() {
				Double expected = 4.5;
				Double actual = TriangleArea.triangleArea(3, 3);
				assertEquals(expected, actual);
			}
			
			// Test case 5: a = 4, h = 4
			@Test
			void testTriangleArea5() {
				Double expected = 8.0;
				Double actual = TriangleArea.triangleArea(4, 4);
				assertEquals(expected, actual);
			}
			
			// Test case 6: a = 5, h = 5
			@Test
			void testTriangleArea6() {
				Double expected = 12.5;
				Double actual = TriangleArea.triangleArea(5, 5);
				assertEquals(expected, actual);
			}
			
			// Test case 7: a = 6, h = 6
			@Test
			void testTriangleArea7() {
				Double expected = 18.0;
				Double actual = TriangleArea.triangleArea(6, 6);
				assertEquals(expected, actual);
			}
			
			// Test case 8: a = 7, h = 7
			@Test
			void testTriangleArea8() {
				Double expected = 24.5;
				Double actual = TriangleArea.triangleArea(7, 7);
				assertEquals(expected, actual);
			}
			
			// Test case 9: a = 8, h = 8
			@Test
			void testTriangleArea9() {
				Double expected = 32.0;
				Double actual = TriangleArea.triangleArea(8, 8);
				assertEquals(expected, actual);
			}
			
			// Test case 10: a = 9, h = 9
			@Test
			void testTriangleArea10() {
				Double expected = 40.5;
				Double actual = TriangleArea.triangleArea(9, 9);
				assertEquals(expected, actual);
			}
}
"
cmpl-A4Oq651bv3hkTQQkdl0euvYwI3Oc9,/HumanEvalJava/src/main/java/scenario2/id_12.java,7.432054758071899,stop,"// Longest.java
package scenario2;

import java.util.List;

class Longest {

    /**
     * Out of list of strings, return the longest one. Return the first one in case of multiple
     * strings of the same length. Return null in case the input list is empty.
     */
    public static String longest(List<Object> strings) {
        if (strings.size() == 0) {
            return null;
        }
        String longest = strings.get(0).toString();
        for (int i = 1; i < strings.size(); i++) {
            if (strings.get(i).toString().length() > longest.length()) {
                longest = strings.get(i).toString();
            }
        }
        return longest;
    }
}
","// LongestTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {","// LongestTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {
	// Test case 1: Test with empty list
			@Test
			void testEmptyList() {
				List<Object> strings = new ArrayList<>();
				String longest = Longest.longest(strings);
				assertNull(longest);
			}
			
			// Test case 2: Test with list of one string
			@Test
			void testOneString() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 3: Test with list of two strings of different lengths
			@Test
			void testTwoStringsDifferentLengths() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Hi"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 4: Test with list of two strings of same length
			@Test
			void testTwoStringsSameLength() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Java"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 5: Test with list of three strings of different lengths
			@Test
			void testThreeStringsDifferentLengths() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Hi"");
				strings.add(""Java"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 6: Test with list of three strings of same length
			@Test
			void testThreeStringsSameLength() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Java"");
				strings.add(""Code"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 7: Test with list of four strings of different lengths
			@Test
			void testFourStringsDifferentLengths() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Hi"");
				strings.add(""Java"");
				strings.add(""Code"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 8: Test with list of four strings of same length
			@Test
			void testFourStringsSameLength() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Java"");
				strings.add(""Code"");
				strings.add(""Test"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 9: Test with list of five strings of different lengths
			@Test
			void testFiveStringsDifferentLengths() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Hi"");
				strings.add(""Java"");
				strings.add(""Code"");
				strings.add(""Test"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
			
			// Test case 10: Test with list of five strings of same length
			@Test
			void testFiveStringsSameLength() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""Java"");
				strings.add(""Code"");
				strings.add(""Test"");
				strings.add(""Unit"");
				String longest = Longest.longest(strings);
				assertEquals(""Hello"", longest);
			}
}"
cmpl-A4Or80LRhSU8PSj4CvX6ojlL9wzXq,/HumanEvalJava/src/main/java/scenario2/id_128.java,8.92466926574707,stop,"// ProdSigns.java
package scenario2;

import java.util.List;

class ProdSigns {

    /**
     * * You are given an array arr of integers and you need to return
     * sum of magnitudes of integers multiplied by product of all signs
     * of each number in the array, represented by 1, -1 or 0.
     * Note: return null for empty arr.
     */
    public static Integer prodSigns(List<Object> arr) {
        if (arr.isEmpty()) {
            return null;
        }
        int prod = 1;
        int sum = 0;
        for (Object value : arr) {
            if (value instanceof Integer) {
                int num = (Integer) value;
                if (num > 0) {
                    prod *= 1;
                } else if (num < 0) {
                    prod *= -1;
                } else {
                    prod *= 0;
                }
                sum += Math.abs(num);
            }
        }
        return sum * prod;
    }
}
","// ProdSignsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {","// ProdSignsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {
	@Test
    void testProdSigns() {
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 0, 0)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 0, 1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 0, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 1, 0)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 1, 1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, 1, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, -1, 0)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, -1, 1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(0, -1, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(1, 0, 0)));
        assertEquals(0, ProdSigns.prodSigns(List.of(1, 0, 1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(1, 0, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(1, 1, 0)));
        assertEquals(1, ProdSigns.prodSigns(List.of(1, 1, 1)));
        assertEquals(-1, ProdSigns.prodSigns(List.of(1, 1, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(1, -1, 0)));
        assertEquals(-1, ProdSigns.prodSigns(List.of(1, -1, 1)));
        assertEquals(1, ProdSigns.prodSigns(List.of(1, -1, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(-1, 0, 0)));
        assertEquals(0, ProdSigns.prodSigns(List.of(-1, 0, 1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(-1, 0, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(-1, 1, 0)));
        assertEquals(-1, ProdSigns.prodSigns(List.of(-1, 1, 1)));
        assertEquals(1, ProdSigns.prodSigns(List.of(-1, 1, -1)));
        assertEquals(0, ProdSigns.prodSigns(List.of(-1, -1, 0)));
        assertEquals(1, ProdSigns.prodSigns(List.of(-1, -1, 1)));
        assertEquals(-1, ProdSigns.prodSigns(List.of(-1, -1, -1)));
    }
}"
cmpl-A4OsBgHfa2eOT6IAbSP5PO4op1sNJ,/HumanEvalJava/src/main/java/scenario2/id_69.java,8.441763639450073,stop,"// Search.java
package scenario2;

import java.util.List;

class Search {

    /**
     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than
     * zero, and has a frequency greater than or equal to the value of the integer itself.
     * The frequency of an integer is the number of times it appears in the list.
     * If no such a value exist, return -1.
     */
    public static int search(List<Integer> lst) {
        int max = -1;
        int[] freq = new int[11];
        for (int i = 0; i < lst.size(); i++) {
            freq[lst.get(i)]++;
        }
        for (int i = 1; i < 11; i++) {
            if (freq[i] >= i) {
                max = i;
            }
        }
        return max;
    }
}
","// SearchTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {","// SearchTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {
	// Test case 1
    @Test
    void testSearch1() {
        List<Integer> lst = List.of(1, 2, 3, 4, 5);
        int result = Search.search(lst);
        assertEquals(1, result);
    }
			// Test case 2
    @Test
    void testSearch2() {
        List<Integer> lst = List.of(1, 1, 1, 1, 1);
        int result = Search.search(lst);
        assertEquals(1, result);
    }
			// Test case 3
    @Test
    void testSearch3() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3);
        int result = Search.search(lst);
        assertEquals(2, result);
    }
			// Test case 4
    @Test
    void testSearch4() {
        List<Integer> lst = List.of(1, 1, 2, 2, 2);
        int result = Search.search(lst);
        assertEquals(2, result);
    }
			// Test case 5
    @Test
    void testSearch5() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3);
        int result = Search.search(lst);
        assertEquals(3, result);
    }
			// Test case 6
    @Test
    void testSearch6() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3, 3);
        int result = Search.search(lst);
        assertEquals(3, result);
    }
			// Test case 7
    @Test
    void testSearch7() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3, 3, 4);
        int result = Search.search(lst);
        assertEquals(4, result);
    }
			// Test case 8
    @Test
    void testSearch8() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3, 3, 4, 4);
        int result = Search.search(lst);
        assertEquals(4, result);
    }
			// Test case 9
    @Test
    void testSearch9() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3, 3, 4, 4, 4);
        int result = Search.search(lst);
        assertEquals(4, result);
    }
			// Test case 10
    @Test
    void testSearch10() {
        List<Integer> lst = List.of(1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5);
        int result = Search.search(lst);
        assertEquals(5, result);
    }
}
"
cmpl-A4OtHAG081nVhhoNHgEHaXpSV5PNj,/HumanEvalJava/src/main/java/scenario2/id_86.java,4.385170221328735,stop,"// AntiShuffle.java
package scenario2;

import java.util.Arrays;

class AntiShuffle {

    /**
     * * Write a function that takes a string and returns an ordered version of it.
     * Ordered version of string, is a string where all words (separated by space)
     * are replaced by a new word where all the characters arranged in
     * ascending order based on ascii value.
     * Note: You should keep the order of words and blank spaces in the sentence.
     */
    public static String antiShuffle(String s) {
        String[] words = s.split("" "");
        for (int i = 0; i < words.length; i++) {
            words[i] = sortString(words[i]);
        }
        return String.join("" "", words);
    }

    private static String sortString(String s) {
        char[] chars = s.toCharArray();
        Arrays.sort(chars);
        return new String(chars);
    }
}
","// AntiShuffleTest.java
package scenario2;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {","// AntiShuffleTest.java
package scenario2;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {
	@Test
    void testAntiShuffle() {
        String[] inputs = {""hello"", ""world"", ""java"", ""programming"", ""is"", ""fun"", ""test"", ""case"", ""for"", ""antiShuffle""};
        String[] expected = {""ehllo"", ""dlorw"", ""aajv"", ""aggimmnoprr"", ""is"", ""fnu"", ""estt"", ""ace"", ""for"", ""Aefhilnottu""};
        for (int i = 0; i < inputs.length; i++) {
            assertEquals(expected[i], AntiShuffle.antiShuffle(inputs[i]));
        }
    }
}"
cmpl-A4OuHRe6BWRmljlvDXjbdkdUcvKGv,/HumanEvalJava/src/main/java/scenario2/id_153.java,9.943437576293945,stop,"// StrongestExtension.java
package scenario2;

import java.util.List;

class StrongestExtension {

    /**
     * You will be given the name of a class (a string) and a list of extensions.
     * The extensions are to be used to load additional classes to the class. The
     * strength of the extension is as follows: Let CAP be the number of the uppercase
     * letters in the extension's name, and let SM be the number of lowercase letters
     * in the extension's name, the strength is given by the fraction CAP - SM.
     * You should find the strongest extension and return a string in this
     * format: ClassName.StrongestExtensionName.
     * If there are two or more extensions with the same strength, you should
     * choose the one that comes first in the list.
     */
    public static String strongestExtension(String className, List<String> extensions) {
        int max = Integer.MIN_VALUE;
        String result = """";
        for (int i = 0; i < extensions.size(); i++) {
            int cap = 0;
            int sm = 0;
            for (int j = 0; j < extensions.get(i).length(); j++) {
                if (Character.isUpperCase(extensions.get(i).charAt(j))) {
                    cap++;
                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {
                    sm++;
                }
            }
            if (cap - sm > max) {
                max = cap - sm;
                result = className + ""."" + extensions.get(i);
            }
        }
        return result;
    }
}
","// StrongestExtensionTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {","// StrongestExtensionTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {
	@Test
			void testStrongestExtension1() {
				String className = ""ClassA"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassA.ExtensionB"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension2() {
				String className = ""ClassB"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassB.ExtensionA"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension3() {
				String className = ""ClassC"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassC.ExtensionC"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension4() {
				String className = ""ClassD"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassD.ExtensionA"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension5() {
				String className = ""ClassE"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassE.ExtensionB"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension6() {
				String className = ""ClassF"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassF.ExtensionC"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension7() {
				String className = ""ClassG"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassG.ExtensionA"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension8() {
				String className = ""ClassH"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassH.ExtensionB"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension9() {
				String className = ""ClassI"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassI.ExtensionC"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}

			@Test
			void testStrongestExtension10() {
				String className = ""ClassJ"";
				List<String> extensions = List.of(""ExtensionA"", ""ExtensionB"", ""ExtensionC"");
				String expected = ""ClassJ.ExtensionA"";
				String actual = StrongestExtension.strongestExtension(className, extensions);
				assertEquals(expected, actual);
			}
}
"
cmpl-A4OvKbQOJKpVY0vcaBh136cSOxFJa,/HumanEvalJava/src/main/java/scenario2/id_104.java,15.469266891479492,stop,"// UniqueDigits.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class UniqueDigits {

    /**
     * Given a list of positive integers x. return a sorted list of all
     * elements that hasn't any even digit.
     *
     * Note: Returned list should be sorted in increasing order.
     */
    public static List<Object> uniqueDigits(List<Integer> x) {
        List<Object> result = new ArrayList<Object>();
        for (int value : x) {
            boolean hasEven = false;
            int oldValue = value;
            while (value > 0) {
                if (value % 2 == 0) {
                    hasEven = true;
                    break;
                }
                value /= 10;
            }
            if (!hasEven) {
                result.add(oldValue);
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            public int compare(Object a, Object b) {
                return (Integer) a - (Integer) b;
            }
        });
        return result;
    }
}
","// UniqueDigitsTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {","// UniqueDigitsTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {
	// Test case 1: Test with empty list
			@Test
			void testUniqueDigitsWithEmptyList() {
				List<Integer> input = new ArrayList<Integer>();
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 2: Test with list of one element
			@Test
			void testUniqueDigitsWithOneElement() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 3: Test with list of two elements
			@Test
			void testUniqueDigitsWithTwoElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(2);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 4: Test with list of three elements
			@Test
			void testUniqueDigitsWithThreeElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 5: Test with list of four elements
			@Test
			void testUniqueDigitsWithFourElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 6: Test with list of five elements
			@Test
			void testUniqueDigitsWithFiveElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(5);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				expected.add(5);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 7: Test with list of six elements
			@Test
			void testUniqueDigitsWithSixElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(5);
				input.add(6);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				expected.add(5);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 8: Test with list of seven elements
			@Test
			void testUniqueDigitsWithSevenElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(5);
				input.add(6);
				input.add(7);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				expected.add(5);
				expected.add(7);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 9: Test with list of eight elements
			@Test
			void testUniqueDigitsWithEightElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(5);
				input.add(6);
				input.add(7);
				input.add(8);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				expected.add(5);
				expected.add(7);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}

			// Test case 10: Test with list of nine elements
			@Test
			void testUniqueDigitsWithNineElements() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(5);
				input.add(6);
				input.add(7);
				input.add(8);
				input.add(9);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(3);
				expected.add(5);
				expected.add(7);
				expected.add(9);
				List<Object> actual = UniqueDigits.uniqueDigits(input);
				assertEquals(expected, actual);
			}
		}
"
cmpl-A4OwOSiErG24nWlAVqEnS4r3fO9y2,/HumanEvalJava/src/main/java/scenario2/id_28.java,9.246967792510986,stop,"// Concatenate.java
package scenario2;

import java.util.List;

class Concatenate {

    /**
     * Concatenate list of strings into a single string
     */
    public static String concatenate(List<Object> strings) {
        String result = """";
        for (Object string : strings) {
            result += string.toString();
        }
        return result;
    }
}
","// ConcatenateTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {","// ConcatenateTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {
	// Test case 1: Test with empty list
			@Test
			void testConcatenateEmptyList() {
				List<Object> strings = new ArrayList<>();
				String result = Concatenate.concatenate(strings);
				assertEquals("""", result);
			}

			// Test case 2: Test with list containing one string
			@Test
			void testConcatenateOneString() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello"", result);
			}

			// Test case 3: Test with list containing multiple strings
			@Test
			void testConcatenateMultipleStrings() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add("" "");
				strings.add(""World"");
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello World"", result);
			}

			// Test case 4: Test with list containing null values
			@Test
			void testConcatenateNullValues() {
				List<Object> strings = new ArrayList<>();
				strings.add(null);
				strings.add(""Hello"");
				strings.add(null);
				String result = Concatenate.concatenate(strings);
				assertEquals(""nullHellonull"", result);
			}

			// Test case 5: Test with list containing empty strings
			@Test
			void testConcatenateEmptyStrings() {
				List<Object> strings = new ArrayList<>();
				strings.add("""");
				strings.add(""Hello"");
				strings.add("""");
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello"", result);
			}

			// Test case 6: Test with list containing integers
			@Test
			void testConcatenateIntegers() {
				List<Object> strings = new ArrayList<>();
				strings.add(1);
				strings.add(2);
				strings.add(3);
				String result = Concatenate.concatenate(strings);
				assertEquals(""123"", result);
			}

			// Test case 7: Test with list containing special characters
			@Test
			void testConcatenateSpecialCharacters() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(""!"");
				strings.add(""#"");
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello!#"", result);
			}

			// Test case 8: Test with list containing a mix of different types
			@Test
			void testConcatenateDifferentTypes() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"");
				strings.add(1);
				strings.add(""World"");
				strings.add(2);
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello1World2"", result);
			}

			// Test case 9: Test with list containing a large number of strings
			@Test
			void testConcatenateLargeNumberOfStrings() {
				List<Object> strings = new ArrayList<>();
				for (int i = 0; i < 1000000; i++) {
					strings.add(""Hello"");
				}
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello"".repeat(1000000), result);
			}

			// Test case 10: Test with list containing very long strings
			@Test
			void testConcatenateVeryLongStrings() {
				List<Object> strings = new ArrayList<>();
				strings.add(""Hello"".repeat(1000000));
				String result = Concatenate.concatenate(strings);
				assertEquals(""Hello"".repeat(1000000), result);
			}
}"
cmpl-A4OxQXPI5T4YCxptJcdXbc5xm4o4H,/HumanEvalJava/src/main/java/scenario2/id_112.java,10.871073722839355,stop,"// ReverseDelete.java
package scenario2;

import java.util.Arrays;
import java.util.List;

class ReverseDelete {

    /**
     * Task
     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
     * then check if the result string is palindrome.
     * A string is called palindrome if it reads the same backward as forward.
     * You should return a tuple containing the result string and True/False for the check.
     */
    public static List<Object> reverseDelete(String s, String c) {
        String result = """";
        for (int i = 0; i < s.length(); i++) {
            if (c.indexOf(s.charAt(i)) == -1) {
                result += s.charAt(i);
            }
        }
        boolean isPalindrome = true;
        for (int i = 0; i < result.length() / 2; i++) {
            if (result.charAt(i) != result.charAt(result.length() - i - 1)) {
                isPalindrome = false;
                break;
            }
        }
        return Arrays.asList(result, isPalindrome);
    }
}
","// ReverseDeleteTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {","// ReverseDeleteTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {
	/**
			* Test case 1
			* Input: s = ""abab"", c = ""ab""
			* Output: ["""", true]
			*/
			@Test
			void testCase1() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""ab"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 2
			* Input: s = ""abab"", c = ""a""
			* Output: [""bb"", false]
			*/
			@Test
			void testCase2() {
				List<Object> expected = Arrays.asList(""bb"", false);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""a"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 3
			* Input: s = ""abab"", c = ""b""
			* Output: [""aa"", false]
			*/
			@Test
			void testCase3() {
				List<Object> expected = Arrays.asList(""aa"", false);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""b"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 4
			* Input: s = ""abab"", c = ""c""
			* Output: [""abab"", true]
			*/
			@Test
			void testCase4() {
				List<Object> expected = Arrays.asList(""abab"", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""c"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 5
			* Input: s = ""abab"", c = ""abab""
			* Output: ["""", true]
			*/
			@Test
			void testCase5() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""abab"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 6
			* Input: s = ""abab"", c = ""ba""
			* Output: ["""", true]
			*/
			@Test
			void testCase6() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""ba"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 7
			* Input: s = ""abab"", c = ""abba""
			* Output: ["""", true]
			*/
			@Test
			void testCase7() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""abba"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 8
			* Input: s = ""abab"", c = ""baba""
			* Output: ["""", true]
			*/
			@Test
			void testCase8() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""baba"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 9
			* Input: s = ""abab"", c = ""ababab""
			* Output: ["""", true]
			*/
			@Test
			void testCase9() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""ababab"");
				assertEquals(expected, actual);
			}

			/**
			* Test case 10
			* Input: s = ""abab"", c = ""ababba""
			* Output: ["""", true]
			*/
			@Test
			void testCase10() {
				List<Object> expected = Arrays.asList("""", true);
				List<Object> actual = ReverseDelete.reverseDelete(""abab"", ""ababba"");
				assertEquals(expected, actual);
			}
}
"
cmpl-A4OyTk30maTydy9OfGyuHc9OQwbh0,/HumanEvalJava/src/main/java/scenario2/id_90.java,7.748901128768921,stop,"// NextSmallest.java
package scenario2;

import java.util.List;

class NextSmallest {

    /**
     * * You are given a list of integers.
     * Write a function next_smallest() that returns the 2nd smallest element of the list.
     * Return null if there is no such element.
     */
    public static Integer nextSmallest(List<Object> lst) {
        if (lst.size() <= 1) {
            return null;
        }
        Integer smallest = (Integer) lst.get(0);
        Integer nextSmallest = null;
        for (int i = 1; i < lst.size(); i++) {
            Integer current = (Integer) lst.get(i);
            if (current < smallest) {
                nextSmallest = smallest;
                smallest = current;
            } else if (nextSmallest == null || current < nextSmallest) {
                if (current != smallest)
                    nextSmallest = current;
            }
        }
        return nextSmallest;
    }
}
","// NextSmallestTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {","// NextSmallestTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {
	// Test case 1: List is empty
    @Test
    void testNextSmallestEmptyList() {
        List<Object> lst = List.of();
        Integer result = NextSmallest.nextSmallest(lst);
        assertNull(result);
    }

    // Test case 2: List contains only one element
    @Test
    void testNextSmallestOneElement() {
        List<Object> lst = List.of(1);
        Integer result = NextSmallest.nextSmallest(lst);
        assertNull(result);
    }

    // Test case 3: List contains two elements
    @Test
    void testNextSmallestTwoElements() {
        List<Object> lst = List.of(1, 2);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }

    // Test case 4: List contains two identical elements
    @Test
    void testNextSmallestTwoIdenticalElements() {
        List<Object> lst = List.of(1, 1);
        Integer result = NextSmallest.nextSmallest(lst);
        assertNull(result);
    }

    // Test case 5: List contains three elements
    @Test
    void testNextSmallestThreeElements() {
        List<Object> lst = List.of(1, 2, 3);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }

    // Test case 6: List contains three identical elements
    @Test
    void testNextSmallestThreeIdenticalElements() {
        List<Object> lst = List.of(1, 1, 1);
        Integer result = NextSmallest.nextSmallest(lst);
        assertNull(result);
    }

    // Test case 7: List contains three elements with two identical elements
    @Test
    void testNextSmallestThreeElementsTwoIdentical() {
        List<Object> lst = List.of(1, 1, 2);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }

    // Test case 8: List contains three elements with two identical elements
    @Test
    void testNextSmallestThreeElementsTwoIdentical2() {
        List<Object> lst = List.of(1, 2, 1);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }

    // Test case 9: List contains three elements with two identical elements
    @Test
    void testNextSmallestThreeElementsTwoIdentical3() {
        List<Object> lst = List.of(2, 1, 1);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }

    // Test case 10: List contains three elements with two identical elements
    @Test
    void testNextSmallestThreeElementsTwoIdentical4() {
        List<Object> lst = List.of(2, 1, 2);
        Integer result = NextSmallest.nextSmallest(lst);
        assertEquals(2, result);
    }
}
"
cmpl-A4OzXWfpBplqAtIEiMU8IVFJskb95,/HumanEvalJava/src/main/java/scenario2/id_145.java,10.848589658737183,stop,"// OrderByPoints.java
package scenario2;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class OrderByPoints {

    /**
     * * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     */
    public static List<Object> orderByPoints(List<Object> nums) {
        Collections.sort(nums, new Comparator<Object>() {

            int digitsum(int n) {
                boolean neg = false;
                if (n < 0) {
                    neg = true;
                    n = -n;
                }
                int sum = 0;
                while (n > 0) {
                    if (n / 10 == 0 && neg)
                        sum -= n % 10;
                    else
                        sum += n % 10;
                    n = n / 10;
                }
                return sum;
            }

            public int compare(Object o1, Object o2) {
                return digitsum((int) o1) - digitsum((int) o2);
            }
        });
        return nums;
    }
}
","// OrderByPointsTest.java
package scenario2;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {","// OrderByPointsTest.java
package scenario2;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {
	// Test case 1: Test with empty list
			@Test
			void testWithEmptyList() {
				List<Object> nums = Collections.emptyList();
				List<Object> expected = Collections.emptyList();
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 2: Test with list of one element
			@Test
			void testWithOneElement() {
				List<Object> nums = Collections.singletonList(1);
				List<Object> expected = Collections.singletonList(1);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 3: Test with list of two elements
			@Test
			void testWithTwoElements() {
				List<Object> nums = List.of(1, 2);
				List<Object> expected = List.of(1, 2);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 4: Test with list of three elements
			@Test
			void testWithThreeElements() {
				List<Object> nums = List.of(1, 2, 3);
				List<Object> expected = List.of(1, 2, 3);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 5: Test with list of four elements
			@Test
			void testWithFourElements() {
				List<Object> nums = List.of(1, 2, 3, 4);
				List<Object> expected = List.of(1, 2, 3, 4);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 6: Test with list of five elements
			@Test
			void testWithFiveElements() {
				List<Object> nums = List.of(1, 2, 3, 4, 5);
				List<Object> expected = List.of(1, 2, 3, 4, 5);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 7: Test with list of six elements
			@Test
			void testWithSixElements() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6);
				List<Object> expected = List.of(1, 2, 3, 4, 5, 6);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 8: Test with list of seven elements
			@Test
			void testWithSevenElements() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7);
				List<Object> expected = List.of(1, 2, 3, 4, 5, 6, 7);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 9: Test with list of eight elements
			@Test
			void testWithEightElements() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8);
				List<Object> expected = List.of(1, 2, 3, 4, 5, 6, 7, 8);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
			
			// Test case 10: Test with list of nine elements
			@Test
			void testWithNineElements() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
				List<Object> expected = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
				assertEquals(expected, OrderByPoints.orderByPoints(nums));
			}
}"
cmpl-A4P0aODuH5UX8QbyroIqAZZ5iunh3,/HumanEvalJava/src/main/java/scenario2/id_132.java,19.266682863235474,stop,"// IsNested.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;

class IsNested {

    /**
     * * Create a function that takes a string as input which contains only square brackets.
     * The function should return True if and only if there is a valid subsequence of brackets
     * where at least one bracket in the subsequence is nested.
     */
    public static Boolean isNested(String string) {
        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();
        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();
        for (int i = 0; i < string.length(); i++) {
            if (string.charAt(i) == '[') {
                opening_bracket_index.add(i);
            } else {
                closing_bracket_index.add(i);
            }
        }
        Collections.reverse(closing_bracket_index);
        int cnt = 0;
        int i = 0;
        int l = closing_bracket_index.size();
        for (int idx : opening_bracket_index) {
            if (i < l && idx < closing_bracket_index.get(i)) {
                cnt += 1;
                i += 1;
            }
        }
        return cnt >= 2;
    }
}
","// IsNestedTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {","// IsNestedTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {
	/**
			* Test case 1: Empty string
			* Expected output: False
			*/
			@Test
			void test1() {
				String string = """";
				Boolean expected = false;
				Boolean actual = IsNested.isNested(string);
				assertEquals(expected, actual);
			}

			/**
			* Test case 2: String with only opening brackets
			* Expected output: False
			*/
			@Test
			void test2() {
				String string = ""[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[["
cmpl-A4P1cb90sbPECTvRVbtr5ojjdVrDB,/HumanEvalJava/src/main/java/scenario2/id_49.java,8.576838493347168,stop,"// Modp.java
package scenario2;

class Modp {

    /**
     * Return 2^n modulo p (be aware of numerics).
     */
    public static int modp(int n, int p) {
        int result = 1;
        for (int i = 0; i < n; i++) {
            result = (result * 2) % p;
        }
        return result;
    }
}
","// ModpTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {","// ModpTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {
	// Test case 1
			@Test
			void testModp1() {
				int n = 0;
				int p = 1;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 2
			@Test
			void testModp2() {
				int n = 1;
				int p = 1;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 3
			@Test
			void testModp3() {
				int n = 1;
				int p = 2;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 4
			@Test
			void testModp4() {
				int n = 2;
				int p = 2;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 5
			@Test
			void testModp5() {
				int n = 2;
				int p = 3;
				int expected = 1;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 6
			@Test
			void testModp6() {
				int n = 3;
				int p = 3;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 7
			@Test
			void testModp7() {
				int n = 3;
				int p = 4;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 8
			@Test
			void testModp8() {
				int n = 4;
				int p = 4;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 9
			@Test
			void testModp9() {
				int n = 4;
				int p = 5;
				int expected = 1;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
			
			// Test case 10
			@Test
			void testModp10() {
				int n = 5;
				int p = 5;
				int expected = 0;
				int actual = Modp.modp(n, p);
				assertEquals(expected, actual);
			}
}"
cmpl-A4P2gJ9m8Ghuw0fNhYM9nDodlTGvT,/HumanEvalJava/src/main/java/scenario2/id_124.java,4.532378435134888,stop,"// ValidDate.java
package scenario2;

class ValidDate {

    /**
     * You have to write a function which validates a given date string and
     * returns True if the date is valid otherwise False.
     * The date is valid if all of the following rules are satisfied:
     * 1. The date string is not empty.
     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
     * 3. The months should not be less than 1 or higher than 12.
     * 4. The date should be in the format: mm-dd-yyyy
     */
    public static Boolean validDate(String date) {
        if (date.length() != 10) {
            return false;
        }
        String[] dateArr = date.split(""-"");
        if (dateArr.length != 3) {
            return false;
        }
        int month = Integer.parseInt(dateArr[0]);
        int day = Integer.parseInt(dateArr[1]);
        int year = Integer.parseInt(dateArr[2]);
        if (month < 1 || month > 12) {
            return false;
        }
        if (month == 2) {
            if (day < 1 || day > 29) {
                return false;
            }
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            if (day < 1 || day > 30) {
                return false;
            }
        } else {
            if (day < 1 || day > 31) {
                return false;
            }
        }
        return true;
    }
}
","// ValidDateTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {","// ValidDateTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
	@Test
			void testValidDate() {
				// Test case 1: Empty string
				assertFalse(ValidDate.validDate(""""));
				
				// Test case 2: Invalid date format
				assertFalse(ValidDate.validDate(""01/01/2020""));
				
				// Test case 3: Invalid month
				assertFalse(ValidDate.validDate(""13-01-2020""));
				
				// Test case 4: Invalid day
				assertFalse(ValidDate.validDate(""01-32-2020""));
				
				// Test case 5: Invalid year
				assertFalse(ValidDate.validDate(""01-01-20200""));
				
				// Test case 6: Invalid month and day
				assertFalse(ValidDate.validDate(""02-30-2020""));
				
				// Test case 7: Invalid month and year
				assertFalse(ValidDate.validDate(""13-01-20200""));
				
				// Test case 8: Invalid day and year
				assertFalse(ValidDate.validDate(""01-32-20200""));
				
				// Test case 9: Invalid month, day and year
				assertFalse(ValidDate.validDate(""13-32-20200""));
				
				// Test case 10: Valid date
				assertTrue(ValidDate.validDate(""01-01-2020""));
			}
}
"
cmpl-A4P3jBu0Pl1X6nNcGcWzMFQjKAIxU,/HumanEvalJava/src/main/java/scenario2/id_1.java,7.9735307693481445,stop,"// SeparateParenGroups.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class SeparateParenGroups {

    /**
     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
     * separate those group into separate strings and return the list of those.
     * Separate groups are balanced (each open brace is properly closed) and not nested within each other
     * Ignore any spaces in the input string
     */
    public static List<String> separateParenGroups(String parenString) {
        List<String> result = new ArrayList<String>();
        int count = 0;
        StringBuilder curString = new StringBuilder();
        for (int i = 0; i < parenString.length(); i++) {
            if (parenString.charAt(i) == '(') {
                count++;
                curString.append('(');
            } else if (parenString.charAt(i) == ')') {
                count--;
                curString.append(')');
                if (count == 0) {
                    result.add(curString.toString());
                    curString = new StringBuilder();
                }
            }
        }
        return result;
    }
}
","// SeparateParenGroupsTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {","// SeparateParenGroupsTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {
	@Test
			void testSeparateParenGroups1() {
				String input = ""((()))"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()))"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups2() {
				String input = ""()()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""()()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups3() {
				String input = ""((()()))"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()()))"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups4() {
				String input = ""((()())())"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups5() {
				String input = ""((()())())()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups6() {
				String input = ""((()())())()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups7() {
				String input = ""((()())())()()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups8() {
				String input = ""((()())())()()()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()()()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups9() {
				String input = ""((()())())()()()()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()()()()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}

			@Test
			void testSeparateParenGroups10() {
				String input = ""((()())())()()()()()()"";
				List<String> expected = new ArrayList<>();
				expected.add(""((()())())()()()()()()"");
				List<String> actual = SeparateParenGroups.separateParenGroups(input);
				assertEquals(expected, actual);
			}
}
"
cmpl-A4P4mVQRbF7vf4rK8bNUPZcxRJxsm,/HumanEvalJava/src/main/java/scenario2/id_65.java,8.335594654083252,stop,"// CircularShift.java
package scenario2;

class CircularShift {

    /**
     * Circular shift the digits of the integer x, shift the digits right by shift
     * and return the result as a string.
     * If shift > number of digits, return digits reversed.
     */
    public static String circularShift(int x, int shift) {
        String result = """";
        String xString = Integer.toString(x);
        int xLength = xString.length();
        if (shift > xLength) {
            for (int i = xLength - 1; i >= 0; i--) {
                result += xString.charAt(i);
            }
        } else {
            for (int i = xLength - shift; i < xLength; i++) {
                result += xString.charAt(i);
            }
            for (int i = 0; i < xLength - shift; i++) {
                result += xString.charAt(i);
            }
        }
        return result;
    }
}
","// CircularShiftTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {","// CircularShiftTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {
	/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when shift is greater than the number of digits.
			*/
			@Test
			void testCircularShift1() {
						assertEquals(""4321"", CircularShift.circularShift(1234, 5));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when shift is equal to the number of digits.
			*/
			@Test
			void testCircularShift2() {
						assertEquals(""1234"", CircularShift.circularShift(1234, 4));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when shift is less than the number of digits.
			*/
			@Test
			void testCircularShift3() {
						assertEquals(""2341"", CircularShift.circularShift(1234, 1));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when shift is zero.
			*/
			@Test
			void testCircularShift4() {
						assertEquals(""1234"", CircularShift.circularShift(1234, 0));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is negative.
			*/
			@Test
			void testCircularShift5() {
						assertEquals(""4321"", CircularShift.circularShift(-1234, 5));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is zero.
			*/
			@Test
			void testCircularShift6() {
						assertEquals(""0"", CircularShift.circularShift(0, 5));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is a single digit.
			*/
			@Test
			void testCircularShift7() {
						assertEquals(""1"", CircularShift.circularShift(1, 5));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is a single digit and shift is zero.
			*/
			@Test
			void testCircularShift8() {
						assertEquals(""1"", CircularShift.circularShift(1, 0));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is a single digit and shift is greater than the number of digits.
			*/
			@Test
			void testCircularShift9() {
						assertEquals(""1"", CircularShift.circularShift(1, 5));
			}

			/**
			* Test case for {@link CircularShift#circularShift(int, int)}.
			* Test the case when the number is a single digit and shift is equal to the number of digits.
			*/
			@Test
			void testCircularShift10() {
						assertEquals(""1"", CircularShift.circularShift(1, 1));
			}
}
"
cmpl-A4P5pBN0i0t9jAHj04KcmnCVAfqhl,/HumanEvalJava/src/main/java/scenario2/id_108.java,2.793485164642334,stop,"// CountNums.java
package scenario2;

import java.util.List;

class CountNums {

    /**
     * * Write a function count_nums which takes an array of integers and returns
     * the number of elements which has a sum of digits > 0.
     * If a number is negative, then its first signed digit will be negative:
     * e.g. -123 has signed digits -1, 2, and 3.
     */
    public static int countNums(List<Object> arr) {
        int count = 0;
        for (int i = 0; i < arr.size(); i++) {
            int sum = 0;
            int num = (int) arr.get(i);
            boolean isNegative = num < 0;
            if (isNegative) {
                num = -num;
            }
            while (num != 0) {
                if (isNegative && num / 10 == 0) {
                    sum -= num % 10;
                } else {
                    sum += num % 10;
                }
                num /= 10;
            }
            if (sum > 0) {
                count++;
            }
        }
        return count;
    }
}
","// CountNumsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {","// CountNumsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {
	@Test
    void testCountNums() {
        assertEquals(0, CountNums.countNums(List.of()));
        assertEquals(0, CountNums.countNums(List.of(0)));
        assertEquals(1, CountNums.countNums(List.of(1)));
        assertEquals(1, CountNums.countNums(List.of(-1)));
        assertEquals(1, CountNums.countNums(List.of(10)));
        assertEquals(1, CountNums.countNums(List.of(-10)));
        assertEquals(2, CountNums.countNums(List.of(1, 2)));
        assertEquals(2, CountNums.countNums(List.of(-1, 2)));
        assertEquals(2, CountNums.countNums(List.of(1, -2)));
        assertEquals(2, CountNums.countNums(List.of(-1, -2)));
    }
}
"
cmpl-A4P6sS6onRF2ugWU6OOFB8OzVGWAg,/HumanEvalJava/src/main/java/scenario2/id_24.java,8.597026348114014,stop,"// LargestDivisor.java
package scenario2;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}
","// LargestDivisorTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {","// LargestDivisorTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {
	// Test case 1: n = 1
    @Test
    void testLargestDivisor1() {
        int n = 1;
        int expected = 1;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 2: n = 2
    @Test
    void testLargestDivisor2() {
        int n = 2;
        int expected = 1;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 3: n = 3
    @Test
    void testLargestDivisor3() {
        int n = 3;
        int expected = 1;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 4: n = 4
    @Test
    void testLargestDivisor4() {
        int n = 4;
        int expected = 2;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 5: n = 5
    @Test
    void testLargestDivisor5() {
        int n = 5;
        int expected = 1;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 6: n = 6
    @Test
    void testLargestDivisor6() {
        int n = 6;
        int expected = 3;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 7: n = 7
    @Test
    void testLargestDivisor7() {
        int n = 7;
        int expected = 1;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 8: n = 8
    @Test
    void testLargestDivisor8() {
        int n = 8;
        int expected = 4;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 9: n = 9
    @Test
    void testLargestDivisor9() {
        int n = 9;
        int expected = 3;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }

    // Test case 10: n = 10
    @Test
    void testLargestDivisor10() {
        int n = 10;
        int expected = 5;
        int actual = LargestDivisor.largestDivisor(n);
        assertEquals(expected, actual);
    }
}
"
cmpl-A4P7vWpVWBzfTh0NdT3TptnASD1ib,/HumanEvalJava/src/main/java/scenario2/id_149.java,17.406055212020874,stop,"// SortedListSum.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortedListSum {

    /**
     * Write a function that accepts a list of strings as a parameter,
     * deletes the strings that have odd lengths from it,
     * and returns the resulted list with a sorted order,
     * The list is always a list of strings and never an array of numbers,
     * and it may contain duplicates.
     * The order of the list should be ascending by length of each word, and you
     * should return the list sorted by that rule.
     * If two words have the same length, sort the list alphabetically.
     * The function should return a list of strings in sorted order.
     * You may assume that all words will have the same length.
     */
    public static List<Object> sortedListSum(List<String> lst) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i).length() % 2 == 0) {
                result.add(lst.get(i));
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            @Override
            public int compare(Object o1, Object o2) {
                if (o1.toString().length() == o2.toString().length()) {
                    return o1.toString().compareTo(o2.toString());
                } else {
                    return o1.toString().length() - o2.toString().length();
                }
            }
        });
        return result;
    }
}
","// SortedListSumTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {","// SortedListSumTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {
	/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns an empty list when the input list is empty.
			*/
			@Test
			void testEmptyList() {
				List<String> input = new ArrayList<>();
				List<Object> expected = new ArrayList<>();
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns an empty list when the input list contains only odd length strings.
			*/
			@Test
			void testOnlyOddLengthStrings() {
				List<String> input = new ArrayList<>();
				input.add(""abc"");
				input.add(""def"");
				input.add(""ghi"");
				List<Object> expected = new ArrayList<>();
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only even length strings.
			*/
			@Test
			void testOnlyEvenLengthStrings() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efgh"");
				input.add(""ijkl"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efgh"");
				expected.add(""ijkl"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only one string.
			*/
			@Test
			void testOneString() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only two strings with the same length.
			*/
			@Test
			void testTwoStringsSameLength() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efgh"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efgh"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only two strings with different lengths.
			*/
			@Test
			void testTwoStringsDifferentLengths() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efghi"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efghi"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only three strings with the same length.
			*/
			@Test
			void testThreeStringsSameLength() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efgh"");
				input.add(""ijkl"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efgh"");
				expected.add(""ijkl"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only three strings with different lengths.
			*/
			@Test
			void testThreeStringsDifferentLengths() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efghi"");
				input.add(""jklmno"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efghi"");
				expected.add(""jklmno"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only four strings with the same length.
			*/
			@Test
			void testFourStringsSameLength() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efgh"");
				input.add(""ijkl"");
				input.add(""mnop"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efgh"");
				expected.add(""ijkl"");
				expected.add(""mnop"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortedListSum#sortedListSum(List)} method.
			* It checks if the method returns the same list when the input list contains only four strings with different lengths.
			*/
			@Test
			void testFourStringsDifferentLengths() {
				List<String> input = new ArrayList<>();
				input.add(""abcd"");
				input.add(""efghi"");
				input.add(""jklmno"");
				input.add(""pqrstuv"");
				List<Object> expected = new ArrayList<>();
				expected.add(""abcd"");
				expected.add(""efghi"");
				expected.add(""jklmno"");
				expected.add(""pqrstuv"");
				List<Object> actual = SortedListSum.sortedListSum(input);
				assertEquals(expected, actual);
			}
		}"
cmpl-A4P8y1KPK7YOpMVXijXxl6OudjPFa,/HumanEvalJava/src/main/java/scenario2/id_73.java,7.26503324508667,stop,"// SmallestChange.java
package scenario2;

import java.util.List;

class SmallestChange {

    /**
     * * Given an array arr of integers, find the minimum number of elements that
     * need to be changed to make the array palindromic. A palindromic array is an array that
     * is read the same backwards and forwards. In one change, you can change one element to any other element.
     */
    public static int smallestChange(List<Integer> arr) {
        int result = 0;
        int i = 0;
        int j = arr.size() - 1;
        while (i < j) {
            if (arr.get(i) != arr.get(j)) {
                result++;
            }
            i++;
            j--;
        }
        return result;
    }
}
","// SmallestChangeTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {","// SmallestChangeTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {
	/**
			* Test case for an empty list.
			*/
			@Test
			void testEmptyList() {
				List<Integer> arr = List.of();
				assertEquals(0, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with one element.
			*/
			@Test
			void testOneElementList() {
				List<Integer> arr = List.of(1);
				assertEquals(0, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with two elements.
			*/
			@Test
			void testTwoElementsList() {
				List<Integer> arr = List.of(1, 2);
				assertEquals(1, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with three elements.
			*/
			@Test
			void testThreeElementsList() {
				List<Integer> arr = List.of(1, 2, 3);
				assertEquals(2, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with four elements.
			*/
			@Test
			void testFourElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4);
				assertEquals(2, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with five elements.
			*/
			@Test
			void testFiveElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4, 5);
				assertEquals(3, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with six elements.
			*/
			@Test
			void testSixElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4, 5, 6);
				assertEquals(3, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with seven elements.
			*/
			@Test
			void testSevenElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4, 5, 6, 7);
				assertEquals(4, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with eight elements.
			*/
			@Test
			void testEightElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8);
				assertEquals(4, SmallestChange.smallestChange(arr));
			}

			/**
			* Test case for a list with nine elements.
			*/
			@Test
			void testNineElementsList() {
				List<Integer> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
				assertEquals(5, SmallestChange.smallestChange(arr));
			}
}
"
cmpl-A4PA1NikjQNg4LyEntuYvBj2fg8lB,/HumanEvalJava/src/main/java/scenario2/id_142.java,9.127278566360474,stop,"// SumSquares1.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class SumSquares1 {

    /**
     * ""
     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
     */
    public static int sumSquares(List<Object> lst) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < lst.size(); i++) {
            if (i % 3 == 0) {
                result.add((int) lst.get(i) * (int) lst.get(i));
            } else if (i % 4 == 0 && i % 3 != 0) {
                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));
            } else {
                result.add((int) lst.get(i));
            }
        }
        int sum = 0;
        for (int i = 0; i < result.size(); i++) {
            sum += result.get(i);
        }
        return sum;
    }
}
","// SumSquares1Test.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {","// SumSquares1Test.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {
	// Test case 1: Test with empty list
			@Test
			void testSumSquares1() {
				List<Object> lst = new ArrayList<Object>();
				int result = SumSquares1.sumSquares(lst);
				assertEquals(0, result);
			}
			
			// Test case 2: Test with list of one element
			@Test
			void testSumSquares2() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(2, result);
			}
			
			// Test case 3: Test with list of two elements
			@Test
			void testSumSquares3() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(11, result);
			}
			
			// Test case 4: Test with list of three elements
			@Test
			void testSumSquares4() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(27, result);
			}
			
			// Test case 5: Test with list of four elements
			@Test
			void testSumSquares5() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(27, result);
			}
			
			// Test case 6: Test with list of five elements
			@Test
			void testSumSquares6() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				lst.add(6);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(63, result);
			}
			
			// Test case 7: Test with list of six elements
			@Test
			void testSumSquares7() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				lst.add(6);
				lst.add(7);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(63, result);
			}
			
			// Test case 8: Test with list of seven elements
			@Test
			void testSumSquares8() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				lst.add(6);
				lst.add(7);
				lst.add(8);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(468, result);
			}
			
			// Test case 9: Test with list of eight elements
			@Test
			void testSumSquares9() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				lst.add(6);
				lst.add(7);
				lst.add(8);
				lst.add(9);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(468, result);
			}
			
			// Test case 10: Test with list of nine elements
			@Test
			void testSumSquares10() {
				List<Object> lst = new ArrayList<Object>();
				lst.add(2);
				lst.add(3);
				lst.add(4);
				lst.add(5);
				lst.add(6);
				lst.add(7);
				lst.add(8);
				lst.add(9);
				lst.add(10);
				int result = SumSquares1.sumSquares(lst);
				assertEquals(468, result);
			}
}"
cmpl-A4PB474yHV9v5PdPzlsi6HJheWzOH,/HumanEvalJava/src/main/java/scenario2/id_78.java,26.31320309638977,length,"// HexKey.java
package scenario2;

class HexKey {

    /**
     * You have been tasked to write a function that receives
     * a hexadecimal number as a string and counts the number of hexadecimal
     * digits that are primes (prime number, or a prime, is a natural number
     * greater than 1 that is not a product of two smaller natural numbers).
     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
     * So you have to determine a number of the following digits: 2, 3, 5, 7,
     * B (=decimal 11), D (=decimal 13).
     * Note: you may assume the input is always correct or empty string,
     * and symbols A,B,C,D,E,F are always uppercase.
     */
    public static int hexKey(Object num) {
        int result = 0;
        String hex = num.toString();
        for (int i = 0; i < hex.length(); i++) {
            char c = hex.charAt(i);
            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {
                result++;
            }
        }
        return result;
    }
}
","// HexKeyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {","// HexKeyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
	@Test
			void testHexKey1() {
				assertEquals(0, HexKey.hexKey(""""));
			}

			@Test
			void testHexKey2() {
				assertEquals(0, HexKey.hexKey(""0""));
			}

			@Test
			void testHexKey3() {
				assertEquals(1, HexKey.hexKey(""1""));
			}

			@Test
			void testHexKey4() {
				assertEquals(1, HexKey.hexKey(""2""));
			}

			@Test
			void testHexKey5() {
				assertEquals(1, HexKey.hexKey(""3""));
			}

			@Test
			void testHexKey6() {
				assertEquals(1, HexKey.hexKey(""4""));
			}

			@Test
			void testHexKey7() {
				assertEquals(1, HexKey.hexKey(""5""));
			}

			@Test
			void testHexKey8() {
				assertEquals(1, HexKey.hexKey(""6""));
			}

			@Test
			void testHexKey9() {
				assertEquals(1, HexKey.hexKey(""7""));
			}

			@Test
			void testHexKey10() {
				assertEquals(1, HexKey.hexKey(""8""));
			}

			@Test
			void testHexKey11() {
				assertEquals(1, HexKey.hexKey(""9""));
			}

			@Test
			void testHexKey12() {
				assertEquals(1, HexKey.hexKey(""A""));
			}

			@Test
			void testHexKey13() {
				assertEquals(1, HexKey.hexKey(""B""));
			}

			@Test
			void testHexKey14() {
				assertEquals(1, HexKey.hexKey(""C""));
			}

			@Test
			void testHexKey15() {
				assertEquals(1, HexKey.hexKey(""D""));
			}

			@Test
			void testHexKey16() {
				assertEquals(1, HexKey.hexKey(""E""));
			}

			@Test
			void testHexKey17() {
				assertEquals(1, HexKey.hexKey(""F""));
			}

			@Test
			void testHexKey18() {
				assertEquals(2, HexKey.hexKey(""10""));
			}

			@Test
			void testHexKey19() {
				assertEquals(2, HexKey.hexKey(""11""));
			}

			@Test
			void testHexKey20() {
				assertEquals(2, HexKey.hexKey(""12""));
			}

			@Test
			void testHexKey21() {
				assertEquals(2, HexKey.hexKey(""13""));
			}

			@Test
			void testHexKey22() {
				assertEquals(2, HexKey.hexKey(""14""));
			}

			@Test
			void testHexKey23() {
				assertEquals(2, HexKey.hexKey(""15""));
			}

			@Test
			void testHexKey24() {
				assertEquals(2, HexKey.hexKey(""16""));
			}

			@Test
			void testHexKey25() {
				assertEquals(2, HexKey.hexKey(""17""));
			}

			@Test
			void testHexKey26() {
				assertEquals(2, HexKey.hexKey(""18""));
			}

			@Test
			void testHexKey27() {
				assertEquals(2, HexKey.hexKey(""19""));
			}

			@Test
			void testHexKey28() {
				assertEquals(2, HexKey.hexKey(""1A""));
			}

			@Test
			void testHexKey29() {
				assertEquals(2, HexKey.hexKey(""1B""));
			}

			@Test
			void testHexKey30() {
				assertEquals(2, HexKey.hexKey(""1C""));
			}

			@Test
			void testHexKey31() {
				assertEquals(2, HexKey.hexKey(""1D""));
			}

			@Test
			void testHexKey32() {
				assertEquals(2, HexKey.hexKey(""1E""));
			}

			@Test
			void testHexKey33() {
				assertEquals(2, HexKey.hexKey(""1F""));
			}

			@Test
			void testHexKey34() {
				assertEquals(2, HexKey.hexKey(""20""));
			}

			@Test
			void testHexKey35() {
				assertEquals(2, HexKey.hexKey(""21""));
			}

			@Test
			void testHexKey36() {
				assertEquals(2, HexKey.hexKey(""22""));
			}

			@Test
			void testHexKey37() {
				assertEquals(2, HexKey.hexKey(""23""));
			}

			@Test
			void testHexKey38() {
				assertEquals(2, HexKey.hexKey(""24""));
			}

			@Test
			void testHexKey39() {
				assertEquals(2, HexKey.hexKey(""25""));
			}

			@Test
			void testHexKey40() {
				assertEquals(2, HexKey.hexKey(""26""));
			}

			@Test
			void testHexKey41() {
				assertEquals(2, HexKey.hexKey(""27""));
			}

			@Test
			void testHexKey42() {
				assertEquals(2, HexKey.hexKey(""28""));
			}

			@Test
			void testHexKey43() {
				assertEquals(2, HexKey.hexKey(""29""));
			}

			@Test
			void testHexKey44() {
				assertEquals(2, HexKey.hexKey(""2A""));
			}

			@Test
			void testHexKey45() {
				assertEquals(2, HexKey.hexKey(""2B""));
			}

			@Test
			void testHexKey46() {
				assertEquals(2, HexKey.hexKey(""2C""));
			}

			@Test
			void testHexKey47() {
				assertEquals(2, HexKey.hexKey(""2D""));
			}

			@Test
			void testHexKey48() {
				assertEquals(2, HexKey.hexKey(""2E""));
			}

			@Test
			void testHexKey49() {
				assertEquals(2, HexKey.hexKey(""2F""));
			}

			@Test
			void testHexKey50() {
				assertEquals(2, HexKey.hexKey(""30""));
			}

			@Test
			void testHexKey51() {
				assertEquals(2, HexKey.hexKey(""31""));
			}

			@Test
			void testHexKey52() {
				assertEquals(2, HexKey.hexKey(""32""));
			}

			@Test
			void testHexKey53() {
				assertEquals(2, HexKey.hexKey(""33""));
			}

			@Test
			void testHexKey54() {
				assertEquals(2, HexKey.hexKey(""34""));
			}

			@Test
			void testHexKey55() {
				assertEquals(2, HexKey.hexKey(""35""));
			}

			@Test
			void testHexKey56() {
				assertEquals(2, HexKey.hexKey(""36""));
			}

			@Test
			void testHexKey57() {
				assertEquals(2, HexKey.hexKey(""37""));
			}

			@Test
			void testHexKey58() {
				assertEquals(2, HexKey.hexKey(""38""));
			}

			@Test
			void testHexKey59() {
				assertEquals(2, HexKey.hexKey(""39""));
			}

			@Test
			void testHexKey60() {
				assertEquals(2, HexKey.hexKey(""3A""));
			}

			@Test
			void testHexKey61() {
				assertEquals(2, HexKey.hexKey(""3B""));
			}

			@Test
			void testHexKey62() {
				assertEquals(2, HexKey.hexKey(""3C""));
			}

			@Test
			void testHexKey63() {
				assertEquals(2, HexKey.hexKey(""3D""));
			}

			@Test
			void testHexKey64() {
				assertEquals(2, HexKey.hexKey(""3E""));
			}

			@Test
			void testHexKey65() {
				assertEquals(2, HexKey.hexKey(""3F""));
			}

			@Test
			void testHexKey66() {
				assertEquals(2, HexKey.hexKey(""40""));
			}

			@Test
			void testHexKey67() {
				assertEquals(2, HexKey.hexKey(""41""));
			}

			@Test
			void testHexKey68() {
				assertEquals(2, HexKey.hexKey(""42""));
			}

			@Test
			void testHexKey69() {
				assertEquals(2, HexKey.hexKey(""43""));
			}

			@Test
			void testHexKey70() {
				assertEquals(2, HexKey.hexKey(""44""));
			}

			@Test
			void testHexKey71() {
				assertEquals(2, HexKey.hexKey(""45""));
			}

			@Test
			void testHexKey72() {
				assertEquals(2, HexKey.hexKey(""46""));
			}

			@Test
			void testHexKey73() {
				assertEquals(2, HexKey.hexKey(""47""));
			}

			@Test
			void testHexKey74() {
				assertEquals"
cmpl-A4PC70PowqQFD27jM8z9f9RaEARKV,/HumanEvalJava/src/main/java/scenario2/id_97.java,2.1871654987335205,stop,"// Multiply.java
package scenario2;

class Multiply {

    /**
     * Complete the function that takes two integers and returns
     * the product of their unit digits.
     * Assume the input is always valid.
     */
    public static int multiply(int a, int b) {
        if (a < 0)
            a = -a;
        if (b < 0)
            b = -b;
        return (a % 10) * (b % 10);
    }
}
","// MultiplyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {","// MultiplyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
	@Test
			void testMultiply() {
				assertEquals(0, Multiply.multiply(0, 0));
				assertEquals(0, Multiply.multiply(0, 1));
				assertEquals(0, Multiply.multiply(1, 0));
				assertEquals(1, Multiply.multiply(1, 1));
				assertEquals(4, Multiply.multiply(2, 2));
				assertEquals(6, Multiply.multiply(2, 3));
				assertEquals(9, Multiply.multiply(3, 3));
				assertEquals(0, Multiply.multiply(10, 0));
				assertEquals(0, Multiply.multiply(0, 10));
				assertEquals(1, Multiply.multiply(1, 1));
			}
}
"
cmpl-A4PDAcWHyiMdADAz1t1of8hv5Rcmo,/HumanEvalJava/src/main/java/scenario2/id_115.java,16.97978663444519,stop,"// MaxFill.java
package scenario2;

import java.util.List;

class MaxFill {

    /**
     * * You are given a rectangular grid of wells. Each row represents a single well,
     * and each 1 in a row represents a single unit of water.
     * Each well has a corresponding bucket that can be used to extract water from it,
     * and all buckets have the same capacity.
     * Your task is to use the buckets to empty the wells.
     * Output the number of times you need to lower the buckets.
     *
     * Constraints:
     * * all wells have the same length
     * * 1 <= grid.length <= 10^2
     * * 1 <= grid[:,1].length <= 10^2
     * * grid[i][j] -> 0 | 1
     * * 1 <= capacity <= 10
     */
    public static int maxFill(List<List<Integer>> grid, int capacity) {
        int sum = 0;
        for (List<Integer> arr : grid) {
            int sumArr = 0;
            for (Integer i : arr) {
                sumArr += i;
            }
            sum += Math.ceil((double) sumArr / capacity);
        }
        return sum;
    }
}
","// MaxFillTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {","// MaxFillTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {
	/**
			* Test case #1.
			* Input: grid = [[1,0,0],[1,0,0],[1,0,0]], capacity = 1
			* Output: 3
			*/
			@Test
			void testMaxFill1() {
				List<List<Integer>> grid = List.of(
					List.of(1, 0, 0),
					List.of(1, 0, 0),
					List.of(1, 0, 0)
				);
				int capacity = 1;
				int expected = 3;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #2.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 1
			* Output: 9
			*/
			@Test
			void testMaxFill2() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 1;
				int expected = 9;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #3.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 2
			* Output: 5
			*/
			@Test
			void testMaxFill3() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 2;
				int expected = 5;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #4.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 3
			* Output: 3
			*/
			@Test
			void testMaxFill4() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 3;
				int expected = 3;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #5.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 4
			* Output: 2
			*/
			@Test
			void testMaxFill5() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 4;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #6.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 5
			* Output: 2
			*/
			@Test
			void testMaxFill6() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 5;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #7.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 6
			* Output: 2
			*/
			@Test
			void testMaxFill7() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 6;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #8.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 7
			* Output: 2
			*/
			@Test
			void testMaxFill8() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 7;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #9.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 8
			* Output: 2
			*/
			@Test
			void testMaxFill9() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 8;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}

			/**
			* Test case #10.
			* Input: grid = [[1,1,1],[1,1,1],[1,1,1]], capacity = 9
			* Output: 2
			*/
			@Test
			void testMaxFill10() {
				List<List<Integer>> grid = List.of(
					List.of(1, 1, 1),
					List.of(1, 1, 1),
					List.of(1, 1, 1)
				);
				int capacity = 9;
				int expected = 2;
				int actual = MaxFill.maxFill(grid, capacity);
				assertEquals(expected, actual);
			}
}
"
cmpl-A4PEDjWXtpGDhhZxat1Z58thfsFkI,/HumanEvalJava/src/main/java/scenario2/id_103.java,7.264111042022705,stop,"// RoundedAvg.java
package scenario2;

class RoundedAvg {

    /**
     * You are given two positive integers n and m, and your task is to compute the
     * average of the integers from n through m (including n and m).
     * Round the answer to the nearest integer and convert that to binary.
     * If n is greater than m, return -1.
     */
    public static Object roundedAvg(int n, int m) {
        if (n > m) {
            return -1;
        }
        int sum = 0;
        for (int i = n; i <= m; i++) {
            sum += i;
        }
        double avg = (sum * 1.0) / (m - n + 1);
        int roundedAvg = (int) Math.rint(avg);
        return ""0b"" + Integer.toBinaryString(roundedAvg);
    }
}
","// RoundedAvgTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {","// RoundedAvgTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {
	/**
			* Test case 1: n = 1, m = 10
			* Expected output: 0b1011
			*/
			@Test
			void test1() {
						assertEquals(""0b1011"", RoundedAvg.roundedAvg(1, 10));
			}

			/**
			* Test case 2: n = 5, m = 10
			* Expected output: 0b1100
			*/
			@Test
			void test2() {
						assertEquals(""0b1100"", RoundedAvg.roundedAvg(5, 10));
			}

			/**
			* Test case 3: n = 1, m = 1
			* Expected output: 0b1
			*/
			@Test
			void test3() {
						assertEquals(""0b1"", RoundedAvg.roundedAvg(1, 1));
			}

			/**
			* Test case 4: n = 1, m = 2
			* Expected output: 0b1
			*/
			@Test
			void test4() {
						assertEquals(""0b1"", RoundedAvg.roundedAvg(1, 2));
			}

			/**
			* Test case 5: n = 1, m = 3
			* Expected output: 0b10
			*/
			@Test
			void test5() {
						assertEquals(""0b10"", RoundedAvg.roundedAvg(1, 3));
			}

			/**
			* Test case 6: n = 1, m = 4
			* Expected output: 0b10
			*/
			@Test
			void test6() {
						assertEquals(""0b10"", RoundedAvg.roundedAvg(1, 4));
			}

			/**
			* Test case 7: n = 1, m = 5
			* Expected output: 0b11
			*/
			@Test
			void test7() {
						assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 5));
			}

			/**
			* Test case 8: n = 1, m = 6
			* Expected output: 0b11
			*/
			@Test
			void test8() {
						assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 6));
			}

			/**
			* Test case 9: n = 1, m = 7
			* Expected output: 0b11
			*/
			@Test
			void test9() {
						assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 7));
			}

			/**
			* Test case 10: n = 1, m = 8
			* Expected output: 0b11
			*/
			@Test
			void test10() {
						assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 8));
			}
}
"
cmpl-A4PFG8zs5vNk0bBtUb86WeKBcZ68J,/HumanEvalJava/src/main/java/scenario2/id_39.java,6.860825777053833,stop,"// PrimeFib.java
package scenario2;

class PrimeFib {

    /**
     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.
     */
    public static int primeFib(int n) {
        int a = 1;
        int b = 1;
        int c = 0;
        int count = 0;
        while (count < n) {
            c = a + b;
            a = b;
            b = c;
            if (isPrime(c)) {
                count++;
            }
        }
        return c;
    }

    private static Boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// PrimeFibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {","// PrimeFibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {
	// Test case 1
    @Test
    void primeFibTest1() {
        int n = 1;
        int expected = 2;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 2
    @Test
    void primeFibTest2() {
        int n = 2;
        int expected = 3;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 3
    @Test
    void primeFibTest3() {
        int n = 3;
        int expected = 5;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 4
    @Test
    void primeFibTest4() {
        int n = 4;
        int expected = 13;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 5
    @Test
    void primeFibTest5() {
        int n = 5;
        int expected = 89;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 6
    @Test
    void primeFibTest6() {
        int n = 6;
        int expected = 233;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 7
    @Test
    void primeFibTest7() {
        int n = 7;
        int expected = 1597;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 8
    @Test
    void primeFibTest8() {
        int n = 8;
        int expected = 28657;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 9
    @Test
    void primeFibTest9() {
        int n = 9;
        int expected = 514229;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }

    // Test case 10
    @Test
    void primeFibTest10() {
        int n = 10;
        int expected = 433494437;
        int actual = PrimeFib.primeFib(n);
        assertEquals(expected, actual);
    }
}
"
cmpl-A4PGJXipfzSA53ksmLzqNKsTxiczA,/HumanEvalJava/src/main/java/scenario2/id_154.java,10.45164942741394,stop,"// CycpatternCheck.java
package scenario2;

class CycpatternCheck {

    /**
     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
     */
    public static Boolean cycpatternCheck(String a, String b) {
        int l = b.length();
        String pat = b + b;
        for (int i = 0; i < a.length() - l + 1; i++) {
            for (int j = 0; j < l + 1; j++) {
                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// CycpatternCheckTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {","// CycpatternCheckTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
	/**
			* Test case 1: Test for empty string
			* Input: a = """", b = """"
			* Expected output: false
			*/
			@Test
			void testEmptyString() {
				String a = """";
				String b = """";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertFalse(result);
			}

			/**
			* Test case 2: Test for null string
			* Input: a = null, b = null
			* Expected output: false
			*/
			@Test
			void testNullString() {
				String a = null;
				String b = null;
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertFalse(result);
			}

			/**
			* Test case 3: Test for string with only one character
			* Input: a = ""a"", b = ""a""
			* Expected output: true
			*/
			@Test
			void testOneCharString() {
				String a = ""a"";
				String b = ""a"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}

			/**
			* Test case 4: Test for string with only one character
			* Input: a = ""a"", b = ""b""
			* Expected output: false
			*/
			@Test
			void testOneCharString2() {
				String a = ""a"";
				String b = ""b"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertFalse(result);
			}

			/**
			* Test case 5: Test for string with only one character
			* Input: a = ""ab"", b = ""a""
			* Expected output: true
			*/
			@Test
			void testOneCharString3() {
				String a = ""ab"";
				String b = ""a"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}

			/**
			* Test case 6: Test for string with only one character
			* Input: a = ""ab"", b = ""b""
			* Expected output: true
			*/
			@Test
			void testOneCharString4() {
				String a = ""ab"";
				String b = ""b"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}

			/**
			* Test case 7: Test for string with only one character
			* Input: a = ""ab"", b = ""c""
			* Expected output: false
			*/
			@Test
			void testOneCharString5() {
				String a = ""ab"";
				String b = ""c"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertFalse(result);
			}

			/**
			* Test case 8: Test for string with only one character
			* Input: a = ""ab"", b = ""ba""
			* Expected output: true
			*/
			@Test
			void testOneCharString6() {
				String a = ""ab"";
				String b = ""ba"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}

			/**
			* Test case 9: Test for string with only one character
			* Input: a = ""ab"", b = ""ab""
			* Expected output: true
			*/
			@Test
			void testOneCharString7() {
				String a = ""ab"";
				String b = ""ab"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}

			/**
			* Test case 10: Test for string with only one character
			* Input: a = ""ab"", b = ""ba""
			* Expected output: true
			*/
			@Test
			void testOneCharString8() {
				String a = ""ab"";
				String b = ""ba"";
				Boolean result = CycpatternCheck.cycpatternCheck(a, b);
				assertTrue(result);
			}
}
"
cmpl-A4PHMBfpwUv6liA0v22CBWMuYdbxq,/HumanEvalJava/src/main/java/scenario2/id_81.java,2.994823455810547,stop,"// NumericalLetterGrade.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class NumericalLetterGrade {

    /**
     * It is the last week of the semester and the teacher has to give the grades
     * to students. The teacher has been making her own algorithm for grading.
     * The only problem is, she has lost the code she used for grading.
     * She has given you a list of GPAs for some students and you have to write
     * a function that can output a list of letter grades using the following table:
     * GPA       |    Letter grade
     * 4.0                A+
     * > 3.7                A
     * > 3.3                A-
     * > 3.0                B+
     * > 2.7                B
     * > 2.3                B-
     * > 2.0                C+
     * > 1.7                C
     * > 1.3                C-
     * > 1.0                D+
     * > 0.7                D
     * > 0.0                D-
     * 0.0                E
     */
    public static List<String> numericalLetterGrade(List<Number> grades) {
        List<String> result = new ArrayList<String>();
        for (Number grade : grades) {
            if (grade.doubleValue() >= 4.0) {
                result.add(""A+"");
            } else if (grade.doubleValue() > 3.7) {
                result.add(""A"");
            } else if (grade.doubleValue() > 3.3) {
                result.add(""A-"");
            } else if (grade.doubleValue() > 3.0) {
                result.add(""B+"");
            } else if (grade.doubleValue() > 2.7) {
                result.add(""B"");
            } else if (grade.doubleValue() > 2.3) {
                result.add(""B-"");
            } else if (grade.doubleValue() > 2.0) {
                result.add(""C+"");
            } else if (grade.doubleValue() > 1.7) {
                result.add(""C"");
            } else if (grade.doubleValue() > 1.3) {
                result.add(""C-"");
            } else if (grade.doubleValue() > 1.0) {
                result.add(""D+"");
            } else if (grade.doubleValue() > 0.7) {
                result.add(""D"");
            } else if (grade.doubleValue() > 0.0) {
                result.add(""D-"");
            } else {
                result.add(""E"");
            }
        }
        return result;
    }
}
","// NumericalLetterGradeTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {","// NumericalLetterGradeTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {
	/**
			* Test case for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
			* It tests the method with a list of GPAs.
			*/
			@Test
			void testNumericalLetterGrade() {
						List<Number> grades = new ArrayList<Number>();
						grades.add(4.0);
						grades.add(3.7);
						grades.add(3.3);
						grades.add(3.0);
						grades.add(2.7);
						grades.add(2.3);
						grades.add(2.0);
						grades.add(1.7);
						grades.add(1.3);
						grades.add(1.0);
						grades.add(0.7);
						grades.add(0.0);
						List<String> expected = new ArrayList<String>();
						expected.add(""A+"");
						expected.add(""A"");
						expected.add(""A-"");
						expected.add(""B+"");
						expected.add(""B"");
						expected.add(""B-"");
						expected.add(""C+"");
						expected.add(""C"");
						expected.add(""C-"");
						expected.add(""D+"");
						expected.add(""D"");
						expected.add(""D-"");
						List<String> actual = NumericalLetterGrade.numericalLetterGrade(grades);
						assertEquals(expected, actual);
			}
}

"
cmpl-A4PIPbUApIX932VHHlhP2AdFA2dBe,/HumanEvalJava/src/main/java/scenario2/id_15.java,4.580600023269653,stop,"// StringSequence.java
package scenario2;

class StringSequence {

    /**
     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.
     */
    public static String stringSequence(int n) {
        String result = """";
        for (int i = 0; i <= n; i++) {
            result += i + "" "";
        }
        return result.trim();
    }
}
","// StringSequenceTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {","// StringSequenceTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {
	// Test case 1
    @Test
    void testStringSequence1() {
        assertEquals(""0"", StringSequence.stringSequence(0));
    }

    // Test case 2
    @Test
    void testStringSequence2() {
        assertEquals(""0 1"", StringSequence.stringSequence(1));
    }

    // Test case 3
    @Test
    void testStringSequence3() {
        assertEquals(""0 1 2"", StringSequence.stringSequence(2));
    }

    // Test case 4
    @Test
    void testStringSequence4() {
        assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
    }

    // Test case 5
    @Test
    void testStringSequence5() {
        assertEquals(""0 1 2 3 4"", StringSequence.stringSequence(4));
    }

    // Test case 6
    @Test
    void testStringSequence6() {
        assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
    }

    // Test case 7
    @Test
    void testStringSequence7() {
        assertEquals(""0 1 2 3 4 5 6"", StringSequence.stringSequence(6));
    }

    // Test case 8
    @Test
    void testStringSequence8() {
        assertEquals(""0 1 2 3 4 5 6 7"", StringSequence.stringSequence(7));
    }

    // Test case 9
    @Test
    void testStringSequence9() {
        assertEquals(""0 1 2 3 4 5 6 7 8"", StringSequence.stringSequence(8));
    }

    // Test case 10
    @Test
    void testStringSequence10() {
        assertEquals(""0 1 2 3 4 5 6 7 8 9"", StringSequence.stringSequence(9));
    }
}
"
cmpl-A4PJSi53LikDm3lQ0AgEOQ0cFyTEK,/HumanEvalJava/src/main/java/scenario2/id_42.java,14.62842082977295,stop,"// IncrList.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class IncrList {

    /**
     * Return list with elements incremented by 1.
     */
    public static List<Object> incrList(List<Object> l) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : l) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                result.add(i + 1);
            }
        }
        return result;
    }
}
","// IncrListTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {","// IncrListTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {
	// Test case 1: Test with empty list
			@Test
			void testEmptyList() {
				List<Object> l = new ArrayList<Object>();
				List<Object> result = IncrList.incrList(l);
				assertEquals(0, result.size());
			}
			
			// Test case 2: Test with list of one element
			@Test
			void testOneElementList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				List<Object> result = IncrList.incrList(l);
				assertEquals(1, result.size());
				assertEquals(2, result.get(0));
			}
			
			// Test case 3: Test with list of two elements
			@Test
			void testTwoElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				List<Object> result = IncrList.incrList(l);
				assertEquals(2, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
			}
			
			// Test case 4: Test with list of three elements
			@Test
			void testThreeElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				List<Object> result = IncrList.incrList(l);
				assertEquals(3, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
			}
			
			// Test case 5: Test with list of four elements
			@Test
			void testFourElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				List<Object> result = IncrList.incrList(l);
				assertEquals(4, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
			}
			
			// Test case 6: Test with list of five elements
			@Test
			void testFiveElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				l.add(5);
				List<Object> result = IncrList.incrList(l);
				assertEquals(5, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
				assertEquals(6, result.get(4));
			}
			
			// Test case 7: Test with list of six elements
			@Test
			void testSixElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				l.add(5);
				l.add(6);
				List<Object> result = IncrList.incrList(l);
				assertEquals(6, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
				assertEquals(6, result.get(4));
				assertEquals(7, result.get(5));
			}
			
			// Test case 8: Test with list of seven elements
			@Test
			void testSevenElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				l.add(5);
				l.add(6);
				l.add(7);
				List<Object> result = IncrList.incrList(l);
				assertEquals(7, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
				assertEquals(6, result.get(4));
				assertEquals(7, result.get(5));
				assertEquals(8, result.get(6));
			}
			
			// Test case 9: Test with list of eight elements
			@Test
			void testEightElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				l.add(5);
				l.add(6);
				l.add(7);
				l.add(8);
				List<Object> result = IncrList.incrList(l);
				assertEquals(8, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
				assertEquals(6, result.get(4));
				assertEquals(7, result.get(5));
				assertEquals(8, result.get(6));
				assertEquals(9, result.get(7));
			}
			
			// Test case 10: Test with list of nine elements
			@Test
			void testNineElementsList() {
				List<Object> l = new ArrayList<Object>();
				l.add(1);
				l.add(2);
				l.add(3);
				l.add(4);
				l.add(5);
				l.add(6);
				l.add(7);
				l.add(8);
				l.add(9);
				List<Object> result = IncrList.incrList(l);
				assertEquals(9, result.size());
				assertEquals(2, result.get(0));
				assertEquals(3, result.get(1));
				assertEquals(4, result.get(2));
				assertEquals(5, result.get(3));
				assertEquals(6, result.get(4));
				assertEquals(7, result.get(5));
				assertEquals(8, result.get(6));
				assertEquals(9, result.get(7));
				assertEquals(10, result.get(8));
			}
}"
cmpl-A4PKV2RmM6VA0SBdDToK00Nvtb5hX,/HumanEvalJava/src/main/java/scenario2/id_54.java,4.867119073867798,stop,"// SameChars.java
package scenario2;

class SameChars {

    /**
     * * Check if two words have the same characters.
     */
    public static Boolean sameChars(String s0, String s1) {
        int[] count0 = new int[26];
        int[] count1 = new int[26];
        for (int i = 0; i < s0.length(); i++) {
            count0[s0.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < 26; i++) {
            if (count0[i] != count1[i]) {
                return false;
            }
        }
        return true;
    }
}
","// SameCharsTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {","// SameCharsTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {
	// Test case 1: Two empty strings
    @Test
    void testSameChars1() {
        assertTrue(SameChars.sameChars("""", """"));
    }

    // Test case 2: Two strings with the same character
    @Test
    void testSameChars2() {
        assertTrue(SameChars.sameChars(""a"", ""a""));
    }

    // Test case 3: Two strings with the same characters
    @Test
    void testSameChars3() {
        assertTrue(SameChars.sameChars(""abc"", ""abc""));
    }

    // Test case 4: Two strings with the same characters but different order
    @Test
    void testSameChars4() {
        assertTrue(SameChars.sameChars(""abc"", ""cba""));
    }

    // Test case 5: Two strings with the same characters but different case
    @Test
    void testSameChars5() {
        assertTrue(SameChars.sameChars(""abc"", ""ABC""));
    }

    // Test case 6: Two strings with the same characters and some other characters
    @Test
    void testSameChars6() {
        assertTrue(SameChars.sameChars(""abc"", ""abc123""));
    }

    // Test case 7: Two strings with the same characters and some other characters
    @Test
    void testSameChars7() {
        assertTrue(SameChars.sameChars(""abc123"", ""abc""));
    }

    // Test case 8: Two strings with the same characters and some other characters
    @Test
    void testSameChars8() {
        assertTrue(SameChars.sameChars(""abc123"", ""123abc""));
    }

    // Test case 9: Two strings with the same characters and some other characters
    @Test
    void testSameChars9() {
        assertTrue(SameChars.sameChars(""123abc"", ""abc123""));
    }

    // Test case 10: Two strings with different characters
    @Test
    void testSameChars10() {
        assertFalse(SameChars.sameChars(""abc"", ""def""));
    }
}
"
cmpl-A4PLYb5TuBqeoi2x1r3M6NnsChIFF,/HumanEvalJava/src/main/java/scenario2/id_139.java,2.6930999755859375,stop,"// SpecialFactorial.java
package scenario2;

class SpecialFactorial {

    /**
     * The Brazilian factorial is defined as:
     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
     * where n > 0
     *
     * The function will receive an integer as input and should return the special
     * factorial of this integer.
     */
    public static long specialFactorial(int n) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= factorial(i);
        }
        return res;
    }

    private static long factorial(int n) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= i;
        }
        return res;
    }
}
","// SpecialFactorialTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {","// SpecialFactorialTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
	@Test
			void testSpecialFactorial() {
				assertEquals(1, SpecialFactorial.specialFactorial(1));
				assertEquals(2, SpecialFactorial.specialFactorial(2));
				assertEquals(12, SpecialFactorial.specialFactorial(3));
				assertEquals(288, SpecialFactorial.specialFactorial(4));
				assertEquals(34560, SpecialFactorial.specialFactorial(5));
				assertEquals(24883200, SpecialFactorial.specialFactorial(6));
				assertEquals(1254113280000L, SpecialFactorial.specialFactorial(7));
				assertEquals(523069747200000L, SpecialFactorial.specialFactorial(8));
				assertEquals(188305108992000000L, SpecialFactorial.specialFactorial(9));
				assertEquals(6082818640344576000L, SpecialFactorial.specialFactorial(10));
			}
}
"
cmpl-A4PMbdSL2pa6lKMYCN609g81MFmhr,/HumanEvalJava/src/main/java/scenario2/id_74.java,12.287223815917969,stop,"// TotalMatch.java
package scenario2;

import java.util.List;

class TotalMatch {

    /**
     * * Write a function that accepts two lists of strings and returns the list that has
     * total number of chars in the all strings of the list less than the other list.
     *
     * if the two lists have the same number of chars, return the first list.
     */
    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {
        int sum1 = 0;
        int sum2 = 0;
        for (Object value : lst1) {
            if (value instanceof String) {
                sum1 += ((String) value).length();
            }
        }
        for (Object value : lst2) {
            if (value instanceof String) {
                sum2 += ((String) value).length();
            }
        }
        if (sum1 <= sum2) {
            return lst1;
        } else {
            return lst2;
        }
    }
}
","// TotalMatchTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {","// TotalMatchTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {
	/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the two lists have the same number of chars.
			*/
			@Test
			void testTotalMatchSameLength() {
				List<Object> lst1 = List.of(""a"", ""b"", ""c"");
				List<Object> lst2 = List.of(""d"", ""e"", ""f"");
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the first list has less chars than the second list.
			*/
			@Test
			void testTotalMatchFirstListLess() {
				List<Object> lst1 = List.of(""a"", ""b"", ""c"");
				List<Object> lst2 = List.of(""d"", ""e"", ""f"", ""g"");
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the second list when the second list has less chars than the first list.
			*/
			@Test
			void testTotalMatchSecondListLess() {
				List<Object> lst1 = List.of(""a"", ""b"", ""c"", ""d"");
				List<Object> lst2 = List.of(""e"", ""f"", ""g"");
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst2, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the first list has less chars than the second list.
			*/
			@Test
			void testTotalMatchFirstListEmpty() {
				List<Object> lst1 = List.of();
				List<Object> lst2 = List.of(""e"", ""f"", ""g"");
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the second list when the second list has less chars than the first list.
			*/
			@Test
			void testTotalMatchSecondListEmpty() {
				List<Object> lst1 = List.of(""a"", ""b"", ""c"", ""d"");
				List<Object> lst2 = List.of();
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst2, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the first list has less chars than the second list.
			*/
			@Test
			void testTotalMatchFirstListNull() {
				List<Object> lst1 = null;
				List<Object> lst2 = List.of(""e"", ""f"", ""g"");
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the second list when the second list has less chars than the first list.
			*/
			@Test
			void testTotalMatchSecondListNull() {
				List<Object> lst1 = List.of(""a"", ""b"", ""c"", ""d"");
				List<Object> lst2 = null;
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst2, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the first list has less chars than the second list.
			*/
			@Test
			void testTotalMatchFirstListNullAndSecondListEmpty() {
				List<Object> lst1 = null;
				List<Object> lst2 = List.of();
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the second list when the second list has less chars than the first list.
			*/
			@Test
			void testTotalMatchSecondListNullAndFirstListEmpty() {
				List<Object> lst1 = List.of();
				List<Object> lst2 = null;
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst2, result);
			}

			/**
			* Test case for the method {@link TotalMatch#totalMatch(List, List)}.
			* It checks if the method returns the first list when the first list has less chars than the second list.
			*/
			@Test
			void testTotalMatchFirstListNullAndSecondListNull() {
				List<Object> lst1 = null;
				List<Object> lst2 = null;
				List<Object> result = TotalMatch.totalMatch(lst1, lst2);
				assertEquals(lst1, result);
			}
}
"
cmpl-A4PNeQG0ulrU2SKGqVs0LkAcDV0S9,/HumanEvalJava/src/main/java/scenario2/id_23.java,7.527930021286011,stop,"// Strlen.java
package scenario2;

class Strlen {

    /**
     * Return length of given string
     */
    public static int strlen(String string) {
        return string.length();
    }
}
","// StrlenTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {","// StrlenTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
	// Test case 1: Test with empty string
			@Test
			void test1() {
				String string = """";
				int expected = 0;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 2: Test with string of length 1
			@Test
			void test2() {
				String string = ""a"";
				int expected = 1;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 3: Test with string of length 2
			@Test
			void test3() {
				String string = ""ab"";
				int expected = 2;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 4: Test with string of length 3
			@Test
			void test4() {
				String string = ""abc"";
				int expected = 3;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 5: Test with string of length 4
			@Test
			void test5() {
				String string = ""abcd"";
				int expected = 4;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 6: Test with string of length 5
			@Test
			void test6() {
				String string = ""abcde"";
				int expected = 5;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 7: Test with string of length 6
			@Test
			void test7() {
				String string = ""abcdef"";
				int expected = 6;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 8: Test with string of length 7
			@Test
			void test8() {
				String string = ""abcdefg"";
				int expected = 7;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 9: Test with string of length 8
			@Test
			void test9() {
				String string = ""abcdefgh"";
				int expected = 8;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
			
			// Test case 10: Test with string of length 9
			@Test
			void test10() {
				String string = ""abcdefghi"";
				int expected = 9;
				int actual = Strlen.strlen(string);
				assertEquals(expected, actual);
			}
}"
cmpl-A4POhXFnHxJi6b1lwHiC0hkpxQsjB,/HumanEvalJava/src/main/java/scenario2/id_119.java,7.950233221054077,stop,"// MatchParens.java
package scenario2;

import java.util.List;

class MatchParens {

    /**
     * * You are given a list of two strings, both strings consist of open
     * parentheses '(' or close parentheses ')' only.
     * Your job is to check if it is possible to concatenate the two strings in
     * some order, that the resulting string will be good.
     * A string S is considered to be good if and only if all parentheses in S
     * are balanced. For example: the string '(())()' is good, while the string
     * '())' is not.
     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
     */
    public static String matchParens(List<String> lst) {
        String s1 = lst.get(0);
        String s2 = lst.get(1);
        String s1s2 = s1 + s2;
        String s2s1 = s2 + s1;
        int count = 0;
        boolean flag = true;
        for (int i = 0; i < s1s2.length(); i++) {
            if (s1s2.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                flag = false;
            }
        }
        if (flag && count == 0) {
            return ""Yes"";
        }
        count = 0;
        for (int i = 0; i < s2s1.length(); i++) {
            if (s2s1.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return ""No"";
            }
        }
        if (count == 0) {
            return ""Yes"";
        } else {
            return ""No"";
        }
    }
}
","// MatchParensTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {","// MatchParensTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {
	/**
			* Test case 1: Both strings are empty.
			* Expected result: Yes
			*/
			@Test
			void test1() {
				List<String> lst = List.of("""", """");
				assertEquals(""Yes"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 2: Both strings are the same.
			* Expected result: Yes
			*/
			@Test
			void test2() {
				List<String> lst = List.of(""()"", ""()"");
				assertEquals(""Yes"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 3: Both strings are different.
			* Expected result: Yes
			*/
			@Test
			void test3() {
				List<String> lst = List.of(""()"", "")("");
				assertEquals(""Yes"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 4: One string is empty.
			* Expected result: No
			*/
			@Test
			void test4() {
				List<String> lst = List.of(""()"", """");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 5: One string is empty.
			* Expected result: No
			*/
			@Test
			void test5() {
				List<String> lst = List.of("""", ""()"");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 6: One string is empty.
			* Expected result: No
			*/
			@Test
			void test6() {
				List<String> lst = List.of(""("", "")"");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 7: One string is empty.
			* Expected result: No
			*/
			@Test
			void test7() {
				List<String> lst = List.of(""("", ""()"");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 8: One string is empty.
			* Expected result: No
			*/
			@Test
			void test8() {
				List<String> lst = List.of(""()"", ""("");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 9: One string is empty.
			* Expected result: No
			*/
			@Test
			void test9() {
				List<String> lst = List.of(""()"", ""()"");
				assertEquals(""Yes"", MatchParens.matchParens(lst));
			}

			/**
			* Test case 10: One string is empty.
			* Expected result: No
			*/
			@Test
			void test10() {
				List<String> lst = List.of(""()"", ""())"");
				assertEquals(""No"", MatchParens.matchParens(lst));
			}
}
"
cmpl-A4PPkVyFQxyWi9gUq6HvY0DHWELEl,/HumanEvalJava/src/main/java/scenario2/id_35.java,8.416829824447632,stop,"// MaxElement.java
package scenario2;

import java.util.List;

class MaxElement {

    /**
     * Return maximum element in the list.
     */
    public static int maxElement(List<Integer> l) {
        int max = Integer.MIN_VALUE;
        for (Integer i : l) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }
}
","// MaxElementTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {","// MaxElementTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {
	// Test case 1: Test with empty list
			@Test
			void testMaxElementEmptyList() {
				List<Integer> l = new ArrayList<>();
				int result = MaxElement.maxElement(l);
				assertEquals(Integer.MIN_VALUE, result);
			}
			
			// Test case 2: Test with list of one element
			@Test
			void testMaxElementOneElement() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				int result = MaxElement.maxElement(l);
				assertEquals(5, result);
			}
			
			// Test case 3: Test with list of two elements
			@Test
			void testMaxElementTwoElements() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(10);
				int result = MaxElement.maxElement(l);
				assertEquals(10, result);
			}
			
			// Test case 4: Test with list of three elements
			@Test
			void testMaxElementThreeElements() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(10);
				l.add(15);
				int result = MaxElement.maxElement(l);
				assertEquals(15, result);
			}
			
			// Test case 5: Test with list of four elements
			@Test
			void testMaxElementFourElements() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(10);
				l.add(15);
				l.add(20);
				int result = MaxElement.maxElement(l);
				assertEquals(20, result);
			}
			
			// Test case 6: Test with list of five elements
			@Test
			void testMaxElementFiveElements() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(10);
				l.add(15);
				l.add(20);
				l.add(25);
				int result = MaxElement.maxElement(l);
				assertEquals(25, result);
			}
			
			// Test case 7: Test with list of negative elements
			@Test
			void testMaxElementNegativeElements() {
				List<Integer> l = new ArrayList<>();
				l.add(-5);
				l.add(-10);
				l.add(-15);
				l.add(-20);
				l.add(-25);
				int result = MaxElement.maxElement(l);
				assertEquals(-5, result);
			}
			
			// Test case 8: Test with list of positive and negative elements
			@Test
			void testMaxElementPositiveAndNegativeElements() {
				List<Integer> l = new ArrayList<>();
				l.add(-5);
				l.add(10);
				l.add(-15);
				l.add(20);
				l.add(-25);
				int result = MaxElement.maxElement(l);
				assertEquals(20, result);
			}
			
			// Test case 9: Test with list of duplicate elements
			@Test
			void testMaxElementDuplicateElements() {
				List<Integer> l = new ArrayList<>();
				l.add(5);
				l.add(10);
				l.add(15);
				l.add(20);
				l.add(20);
				int result = MaxElement.maxElement(l);
				assertEquals(20, result);
			}
			
			// Test case 10: Test with list of large elements
			@Test
			void testMaxElementLargeElements() {
				List<Integer> l = new ArrayList<>();
				l.add(500000);
				l.add(1000000);
				l.add(1500000);
				l.add(2000000);
				l.add(2500000);
				int result = MaxElement.maxElement(l);
				assertEquals(2500000, result);
			}
}"
cmpl-A4PQnGD4PZHh6nFEW8vkEGW0iVO6G,/HumanEvalJava/src/main/java/scenario2/id_62.java,18.450016498565674,stop,"// Derivative.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class Derivative {

    /**
     * xs represent coefficients of a polynomial.
     * xs[0] + xs[1] * x + xs[2] * x^2 + ....
     * Return derivative of this polynomial in the same form.
     */
    public static List<Object> derivative(List<Integer> xs) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 1; i < xs.size(); i++) {
            result.add(xs.get(i) * i);
        }
        return result;
    }
}
","// DerivativeTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {","// DerivativeTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {
	// Test case 1
			@Test
			void testDerivative1() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 2
			@Test
			void testDerivative2() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 3
			@Test
			void testDerivative3() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 4
			@Test
			void testDerivative4() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 5
			@Test
			void testDerivative5() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 6
			@Test
			void testDerivative6() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				xs.add(8);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				expected.add(56);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 7
			@Test
			void testDerivative7() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				xs.add(8);
				xs.add(9);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				expected.add(56);
				expected.add(72);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 8
			@Test
			void testDerivative8() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				xs.add(8);
				xs.add(9);
				xs.add(10);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				expected.add(56);
				expected.add(72);
				expected.add(90);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 9
			@Test
			void testDerivative9() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				xs.add(8);
				xs.add(9);
				xs.add(10);
				xs.add(11);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				expected.add(56);
				expected.add(72);
				expected.add(90);
				expected.add(110);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
			
			// Test case 10
			@Test
			void testDerivative10() {
				List<Integer> xs = new ArrayList<Integer>();
				xs.add(1);
				xs.add(2);
				xs.add(3);
				xs.add(4);
				xs.add(5);
				xs.add(6);
				xs.add(7);
				xs.add(8);
				xs.add(9);
				xs.add(10);
				xs.add(11);
				xs.add(12);
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(6);
				expected.add(12);
				expected.add(20);
				expected.add(30);
				expected.add(42);
				expected.add(56);
				expected.add(72);
				expected.add(90);
				expected.add(110);
				expected.add(132);
				List<Object> actual = Derivative.derivative(xs);
				assertEquals(expected, actual);
			}
}"
cmpl-A4PRqYQxqyHfuRC4TeK3buReA68O3,/HumanEvalJava/src/main/java/scenario2/id_6.java,9.839378833770752,stop,"// ParseNestedParens.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class ParseNestedParens {

    /**
     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
     * For each of the group, output the deepest level of nesting of parentheses.
     */
    public static List<Integer> parseNestedParens(String parenString) {
        List<Integer> result = new ArrayList<Integer>();
        int count = 0;
        int maximum_depth = 0;
        for (int i = 0; i < parenString.length(); i++) {
            if (parenString.charAt(i) == '(') {
                count++;
                maximum_depth = Math.max(maximum_depth, count);
            } else if (parenString.charAt(i) == ')') {
                count--;
                if (count == 0) {
                    result.add(maximum_depth);
                    maximum_depth = 0;
                }
            }
        }
        return result;
    }
}
","// ParseNestedParensTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseNestedParens}.
* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.
*/
class ParseNestedParensTest {","// ParseNestedParensTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseNestedParens}.
* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.
*/
class ParseNestedParensTest {
	/**
			* Test case for empty string.
			*/
			@Test
			void testEmptyString() {
				List<Integer> expected = new ArrayList<Integer>();
				List<Integer> actual = ParseNestedParens.parseNestedParens("""");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for single group with no nested parentheses.
			*/
			@Test
			void testSingleGroupNoNested() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(0);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""()"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for single group with nested parentheses.
			*/
			@Test
			void testSingleGroupNested() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(2);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""((()))"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with no nested parentheses.
			*/
			@Test
			void testMultipleGroupsNoNested() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(0);
				expected.add(0);
				expected.add(0);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""() () ()"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with nested parentheses.
			*/
			@Test
			void testMultipleGroupsNested() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(2);
				expected.add(3);
				expected.add(1);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""((())) () (((()))) ()"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with different levels of nested parentheses.
			*/
			@Test
			void testMultipleGroupsDifferentLevels() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(2);
				expected.add(3);
				expected.add(1);
				expected.add(2);
				expected.add(1);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""((())) () (((()))) () (())"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with no parentheses.
			*/
			@Test
			void testMultipleGroupsNoParentheses() {
				List<Integer> expected = new ArrayList<Integer>();
				List<Integer> actual = ParseNestedParens.parseNestedParens(""abc def ghi"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with only opening parentheses.
			*/
			@Test
			void testMultipleGroupsOnlyOpeningParentheses() {
				List<Integer> expected = new ArrayList<Integer>();
				List<Integer> actual = ParseNestedParens.parseNestedParens(""(((())) (((((())))) ()"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with only closing parentheses.
			*/
			@Test
			void testMultipleGroupsOnlyClosingParentheses() {
				List<Integer> expected = new ArrayList<Integer>();
				List<Integer> actual = ParseNestedParens.parseNestedParens(""))))) ((()) ))))"");
				assertEquals(expected, actual);
			}
			
			/**
			* Test case for multiple groups with uneven number of parentheses.
			*/
			@Test
			void testMultipleGroupsUnevenParentheses() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(2);
				expected.add(3);
				expected.add(1);
				expected.add(2);
				List<Integer> actual = ParseNestedParens.parseNestedParens(""((())) () (((()))) () (()) ("");
				assertEquals(expected, actual);
			}
}"
cmpl-A4PStsC8PAVYEd8USVcZGyx2epVsG,/HumanEvalJava/src/main/java/scenario2/id_158.java,5.216503143310547,stop,"// FindMax.java
package scenario2;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

class FindMax {

    /**
     * Write a function that accepts a list of strings.
     * The list contains different words. Return the word with maximum number
     * of unique characters. If multiple strings have maximum number of unique
     * characters, return the one which comes first in lexicographical order.
     */
    public static String findMax(List<String> words) {
        if (words == null || words.size() == 0) {
            return null;
        }
        String maxWord = words.get(0);
        int maxUnique = 0;
        for (String word : words) {
            Set<Character> seen = new HashSet<>();
            for (int i = 0; i < word.length(); i++) {
                seen.add(word.charAt(i));
            }
            if (seen.size() > maxUnique) {
                maxWord = word;
                maxUnique = seen.size();
            } else if (seen.size() == maxUnique && word.compareTo(maxWord) < 0) {
                maxWord = word;
            }
        }
        return maxWord;
    }
}
","// FindMaxTest.java
package scenario2;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {","// FindMaxTest.java
package scenario2;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
	// Test case 1: null list
    @Test
    void testNullList() {
        assertNull(FindMax.findMax(null));
    }

    // Test case 2: empty list
    @Test
    void testEmptyList() {
        assertNull(FindMax.findMax(List.of()));
    }

    // Test case 3: one word
    @Test
    void testOneWord() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"")));
    }

    // Test case 4: two words with same unique characters
    @Test
    void testTwoWordsSameUnique() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
    }

    // Test case 5: two words with different unique characters
    @Test
    void testTwoWordsDifferentUnique() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""def"")));
    }

    // Test case 6: multiple words with same unique characters
    @Test
    void testMultipleWordsSameUnique() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"", ""bca"")));
    }

    // Test case 7: multiple words with different unique characters
    @Test
    void testMultipleWordsDifferentUnique() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""def"", ""ghi"")));
    }

    // Test case 8: multiple words with same unique characters and same lexicographical order
    @Test
    void testMultipleWordsSameUniqueSameLexicographicalOrder() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""acb"", ""bac"")));
    }

    // Test case 9: multiple words with different unique characters and same lexicographical order
    @Test
    void testMultipleWordsDifferentUniqueSameLexicographicalOrder() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""def"", ""ghi"", ""jkl"")));
    }

    // Test case 10: multiple words with different unique characters and different lexicographical order
    @Test
    void testMultipleWordsDifferentUniqueDifferentLexicographicalOrder() {
        assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""def"", ""ghi"", ""jkl"", ""mno"")));
    }
}
"
cmpl-A4PTweRR1K6LMW7uj0VXe4km83mwp,/HumanEvalJava/src/main/java/scenario2/id_19.java,25.191654920578003,length,"// SortNumbers.java
package scenario2;

import java.util.Arrays;

class SortNumbers {

    /**
     * Input is a space-delimited string of numbers from 'zero' to 'nine'.
     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
     * Return the string with numbers sorted from smallest to largest
     */
    public static String sortNumbers(String numbers) {
        String[] numbersArray = numbers.split("" "");
        int[] numbersInt = new int[numbersArray.length];
        for (int i = 0; i < numbersArray.length; i++) {
            if (numbersArray[i].equals(""zero"")) {
                numbersInt[i] = 0;
            } else if (numbersArray[i].equals(""one"")) {
                numbersInt[i] = 1;
            } else if (numbersArray[i].equals(""two"")) {
                numbersInt[i] = 2;
            } else if (numbersArray[i].equals(""three"")) {
                numbersInt[i] = 3;
            } else if (numbersArray[i].equals(""four"")) {
                numbersInt[i] = 4;
            } else if (numbersArray[i].equals(""five"")) {
                numbersInt[i] = 5;
            } else if (numbersArray[i].equals(""six"")) {
                numbersInt[i] = 6;
            } else if (numbersArray[i].equals(""seven"")) {
                numbersInt[i] = 7;
            } else if (numbersArray[i].equals(""eight"")) {
                numbersInt[i] = 8;
            } else if (numbersArray[i].equals(""nine"")) {
                numbersInt[i] = 9;
            } else {
                numbersInt[i] = -1;
            }
        }
        Arrays.sort(numbersInt);
        String result = """";
        for (int i = 0; i < numbersInt.length; i++) {
            if (numbersInt[i] == 0) {
                result += ""zero "";
            } else if (numbersInt[i] == 1) {
                result += ""one "";
            } else if (numbersInt[i] == 2) {
                result += ""two "";
            } else if (numbersInt[i] == 3) {
                result += ""three "";
            } else if (numbersInt[i] == 4) {
                result += ""four "";
            } else if (numbersInt[i] == 5) {
                result += ""five "";
            } else if (numbersInt[i] == 6) {
                result += ""six "";
            } else if (numbersInt[i] == 7) {
                result += ""seven "";
            } else if (numbersInt[i] == 8) {
                result += ""eight "";
            } else if (numbersInt[i] == 9) {
                result += ""nine "";
            }
        }
        return result.trim();
    }
}
","// SortNumbersTest.java
package scenario2;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {","// SortNumbersTest.java
package scenario2;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {
	/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput() {
						String input = ""one two three four five six seven eight nine"";
						String expected = ""one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput() {
						String input = ""one two three four five six seven eight nine ten"";
						String expected = ""one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput2() {
						String input = ""nine eight seven six five four three two one zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput2() {
						String input = ""nine eight seven six five four three two one zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput3() {
						String input = ""five four three two one zero nine eight seven six"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput3() {
						String input = ""five four three two one zero nine eight seven six ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput4() {
						String input = ""two three four five six seven eight nine one zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput4() {
						String input = ""two three four five six seven eight nine one zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput5() {
						String input = ""eight nine one two three four five six seven zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput5() {
						String input = ""eight nine one two three four five six seven zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput6() {
						String input = ""seven eight nine one two three four five six zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput6() {
						String input = ""seven eight nine one two three four five six zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput7() {
						String input = ""six seven eight nine one two three four five zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput7() {
						String input = ""six seven eight nine one two three four five zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput8() {
						String input = ""four five six seven eight nine one two three zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput8() {
						String input = ""four five six seven eight nine one two three zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput9() {
						String input = ""three four five six seven eight nine one two zero"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput9() {
						String input = ""three four five six seven eight nine one two zero ten"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with a valid input.
			*/
			@Test
			void testSortNumbersValidInput10() {
						String input = ""zero one two three four five six seven eight nine"";
						String expected = ""zero one two three four five six seven eight nine"";
						String actual = SortNumbers.sortNumbers(input);
						assertEquals(expected, actual);
			}

			/**
			* Test case for the {@link SortNumbers#sortNumbers(String)} method.
			* It tests the method with an invalid input.
			*/
			@Test
			void testSortNumbersInvalidInput10() {
						String input = ""zero one two three four five six seven eight nine ten"";
						String expected = ""zero one two three four five six"
cmpl-A4PUzYG7KytF1bgHsMqtrbWl3cGuh,/HumanEvalJava/src/main/java/scenario2/id_123.java,20.7780020236969,length,"// GetOddCollatz.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class GetOddCollatz {

    /**
     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
     *
     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
     * as follows: start with any positive integer n. Then each term is obtained from the
     * previous term as follows: if the previous term is even, the next term is one half of
     * the previous term. If the previous term is odd, the next term is 3 times the previous
     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
     *
     * Note:
     * 1. Collatz(1) is [1].
     * 2. returned list sorted in increasing order.
     */
    public static List<Integer> getOddCollatz(int n) {
        List<Integer> result = new ArrayList<Integer>();
        while (n != 1) {
            if (n % 2 == 1) {
                result.add(n);
            }
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
        }
        result.add(1);
        Collections.sort(result);
        return result;
    }
}
","// GetOddCollatzTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {","// GetOddCollatzTest.java
package scenario2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {
	@Test
			void testGetOddCollatz() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				assertEquals(expected, GetOddCollatz.getOddCollatz(1));
			}
			
			@Test
			void testGetOddCollatz2() {
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				expected.add(5);
				expected.add(7);
				expected.add(11);
				expected.add(13);
				expected.add(19);
				expected.add(23);
				expected.add(27);
				expected.add(41);
				expected.add(47);
				expected.add(55);
				expected.add(73);
				expected.add(83);
				expected.add(97);
				expected.add(109);
				expected.add(129);
				expected.add(157);
				expected.add(181);
				expected.add(211);
				expected.add(239);
				expected.add(271);
				expected.add(311);
				expected.add(367);
				expected.add(419);
				expected.add(487);
				expected.add(559);
				expected.add(647);
				expected.add(751);
				expected.add(871);
				expected.add(1009);
				expected.add(1163);
				expected.add(1343);
				expected.add(1559);
				expected.add(1801);
				expected.add(2087);
				expected.add(2411);
				expected.add(2783);
				expected.add(3209);
				expected.add(3691);
				expected.add(4241);
				expected.add(4861);
				expected.add(5563);
				expected.add(6361);
				expected.add(7261);
				expected.add(8273);
				expected.add(9419);
				expected.add(10799);
				expected.add(12343);
				expected.add(14173);
				expected.add(16291);
				expected.add(18713);
				expected.add(21449);
				expected.add(24599);
				expected.add(28183);
				expected.add(32243);
				expected.add(36833);
				expected.add(42043);
				expected.add(47911);
				expected.add(54599);
				expected.add(62209);
				expected.add(70843);
				expected.add(80683);
				expected.add(91873);
				expected.add(104743);
				expected.add(119179);
				expected.add(136363);
				expected.add(156439);
				expected.add(179699);
				expected.add(206483);
				expected.add(237163);
				expected.add(272179);
				expected.add(312019);
				expected.add(357239);
				expected.add(408443);
				expected.add(466343);
				expected.add(531739);
				expected.add(605509);
				expected.add(688699);
				expected.add(782383);
				expected.add(887743);
				expected.add(1006123);
				expected.add(1143079);
				expected.add(1299643);
				expected.add(1477903);
				expected.add(1680199);
				expected.add(1909039);
				expected.add(2167199);
				expected.add(2457751);
				expected.add(2784199);
				expected.add(3150439);
				expected.add(3560759);
				expected.add(4029943);
				expected.add(4563359);
				expected.add(5166919);
				expected.add(5847199);
				expected.add(6611599);
				expected.add(7468399);
				expected.add(8426799);
				expected.add(9496799);
				expected.add(10686959);
				expected.add(12033599);
				expected.add(13546559);
				expected.add(15247199);
				expected.add(17159999);
				expected.add(19312399);
				expected.add(21733919);
				expected.add(24457559);
				expected.add(27519199);
				expected.add(30961559);
				expected.add(34833959);
				expected.add(39192319);
				expected.add(44154839);
				expected.add(49719199);
				expected.add(55961599);
				expected.add(62923119);
				expected.add(70633919);
				expected.add(79192319);
				expected.add(88619159);
				expected.add(99033959);
				expected.add(110541599);
				expected.add(123923519);
				expected.add(138706319);
				expected.add(155041919);
				expected.add(173103359);
				expected.add(193084319);
				expected.add(215191999);
				expected.add(239651199);
				expected.add(266702399);
				expected.add(296604799);
				expected.add(329651199);
				expected.add(366151199);
				expected.add(406451999);
				expected.add(450835199);
				expected.add(499604799);
				expected.add(553084799);
				expected.add(611615999);
				expected.add(675555599);
				expected.add(745275199);
				expected.add(821159999);
				expected.add(903615599);
				expected.add(993079199);
				expected.add(1089993599);
				expected.add(1198999199);
				expected.add(1318899119);
				expected.add(1440789023);
				expected.add(1564867927);
				expected.add(1692434719);
				expected.add(1823698191);
				expected.add(1958978007);
				expected.add(2098605807);
				expected.add(2242926399L);
				expected.add(2392299039L);
				expected.add(2547102719L);
				expected.add(2707737599L);
				expected.add(2874621439L);
				expected.add(3048191999L);
				expected.add(3228915199L);
				expected.add(3417273599L);
				expected.add(3613766399L);
				expected.add(3818918399L);
				expected.add(4033279999L);
				expected.add(4257420799L);
				expected.add(4491942399L);
				expected.add(4737465599L);
				expected.add(4994636799L);
				expected.add(5264127999L);
				expected.add(5546649599L);
				expected.add(5842956799L);
				expected.add(6153849599L);
				expected.add(6479974399L);
				expected.add(6822124799L);
				expected.add(7181132799L);
				expected.add(7557878399L);
				expected.add(7953286399L);
				expected.add(8368329599L);
				expected.add(8804025599L);
				expected.add(9261446399L);
				expected.add(9741708799L);
				expected.add(10246419199L);
				expected.add(10758783999L);
				expected.add(11296767999L);
				expected.add(11861244799L);
				expected.add(12453119999L);
				expected.add(13073305599L);
				expected.add(13722751999L);
				expected.add(14402419199L);
				expected.add(15113318399L);
				expected.add(15856435199L);
				expected.add(16632751999L);
				expected.add(17443289599L);
				expected.add(18289023999L);
				expected.add(19170905599L);
				expected.add(20089907199L);
				expected.add(21047065599L);
				expected.add(22043473919L);
				expected.add(23080273919L);
				expected.add(24158687999L);
				expected.add(25279923199L);
				expected.add(26445235199L);
				expected.add(27655961599L);
				expected.add(28913407999L);
				expected.add(30218905599L);
				expected.add(31573862399L);
				expected.add(32979763199L);
				expected.add(34438143999L);
				expected.add(35950559999L);
				expected.add(37518566399L);
				expected.add(39143795199L);
				expected.add(40827980799L);
				expected.add(42572879999L);
				expected.add(44380364799L);
				expected.add(46252415999L);
				expected.add(48191027199L);
				expected.add(50198246399L);
				expected.add(52276198399L);
				expected.add(54427007999L);
				expected.add(56652876799L);
				expected.add(58956031999L);
				expected.add(61338751999L);
				expected.add(63803391999L);
				expected.add(66352383999L);
				expected.add(68988287999L);
				expected.add(71713766399L);
				expected.add(74531635199L);
				expected.add(77444735999L);
				expected.add(80456063999L);
				expected.add(83568767999L);
				expected.add(86786047999L);
				expected.add(90111231999L);
				expected.add(93547775999L);
				expected.add(97099289599L);
				expected.add(100771839999L);
				expected.add(104544895999L"
cmpl-A4PW2YxxWmmhi4x7vfrVcOj8U9FYE,/HumanEvalJava/src/main/java/scenario2/id_58.java,16.48730230331421,stop,"// Common.java
package scenario2;

import java.util.*;

class Common {

    /**
     * Return sorted unique common elements for two lists.
     */
    public static List<Object> common(List<Integer> l1, List<Object> l2) {
        Set<Integer> set = new HashSet<Integer>();
        for (Integer value : l1) {
            set.add(value);
        }
        List<Object> result = new ArrayList<Object>();
        for (Object value : l2) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                if (set.contains(i) && !result.contains(i)) {
                    result.add(i);
                }
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            public int compare(Object o1, Object o2) {
                if (o1 instanceof Integer && o2 instanceof Integer) {
                    return (Integer) o1 - (Integer) o2;
                }
                return 0;
            }
        });
        return result;
    }
}
","// CommonTest.java
package scenario2;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Common}.
* It contains ten unit test cases for the {@link Common#common(List, List)} method.
*/
class CommonTest {","// CommonTest.java
package scenario2;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Common}.
* It contains ten unit test cases for the {@link Common#common(List, List)} method.
*/
class CommonTest {
	// Test case 1: Test with two empty lists
    @Test
    void testCommonWithTwoEmptyLists() {
        List<Integer> l1 = new ArrayList<Integer>();
        List<Object> l2 = new ArrayList<Object>();
        List<Object> result = Common.common(l1, l2);
        assertEquals(0, result.size());
    }

    // Test case 2: Test with one empty list and one non-empty list
    @Test
    void testCommonWithOneEmptyListAndOneNonEmptyList() {
        List<Integer> l1 = new ArrayList<Integer>();
        List<Object> l2 = new ArrayList<Object>();
        l2.add(1);
        l2.add(2);
        l2.add(3);
        List<Object> result = Common.common(l1, l2);
        assertEquals(0, result.size());
    }

    // Test case 3: Test with two lists with no common elements
    @Test
    void testCommonWithTwoListsWithNoCommonElements() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(4);
        l2.add(5);
        l2.add(6);
        List<Object> result = Common.common(l1, l2);
        assertEquals(0, result.size());
    }

    // Test case 4: Test with two lists with one common element
    @Test
    void testCommonWithTwoListsWithOneCommonElement() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(4);
        l2.add(5);
        List<Object> result = Common.common(l1, l2);
        assertEquals(1, result.size());
        assertEquals(3, result.get(0));
    }

    // Test case 5: Test with two lists with multiple common elements
    @Test
    void testCommonWithTwoListsWithMultipleCommonElements() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(4);
        l2.add(5);
        l2.add(6);
        l2.add(7);
        List<Object> result = Common.common(l1, l2);
        assertEquals(3, result.size());
        assertEquals(3, result.get(0));
        assertEquals(4, result.get(1));
        assertEquals(5, result.get(2));
    }

    // Test case 6: Test with two lists with duplicate common elements
    @Test
    void testCommonWithTwoListsWithDuplicateCommonElements() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(4);
        l2.add(4);
        l2.add(5);
        l2.add(6);
        l2.add(7);
        List<Object> result = Common.common(l1, l2);
        assertEquals(3, result.size());
        assertEquals(3, result.get(0));
        assertEquals(4, result.get(1));
        assertEquals(5, result.get(2));
    }

    // Test case 7: Test with two lists with common elements of different types
    @Test
    void testCommonWithTwoListsWithCommonElementsOfDifferentTypes() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(""4"");
        l2.add(5);
        l2.add(6);
        l2.add(7);
        List<Object> result = Common.common(l1, l2);
        assertEquals(2, result.size());
        assertEquals(3, result.get(0));
        assertEquals(5, result.get(1));
    }

    // Test case 8: Test with two lists with common elements of different types
    // and duplicate common elements
    @Test
    void testCommonWithTwoListsWithCommonElementsOfDifferentTypesAndDuplicateCommonElements() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(""4"");
        l2.add(4);
        l2.add(5);
        l2.add(6);
        l2.add(7);
        List<Object> result = Common.common(l1, l2);
        assertEquals(2, result.size());
        assertEquals(3, result.get(0));
        assertEquals(5, result.get(1));
    }

    // Test case 9: Test with two lists with common elements of different types
    // and duplicate common elements
    @Test
    void testCommonWithTwoListsWithCommonElementsOfDifferentTypesAndDuplicateCommonElements2() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(""4"");
        l2.add(4);
        l2.add(5);
        l2.add(6);
        l2.add(7);
        l2.add(7);
        List<Object> result = Common.common(l1, l2);
        assertEquals(2, result.size());
        assertEquals(3, result.get(0));
        assertEquals(5, result.get(1));
    }

    // Test case 10: Test with two lists with common elements of different types
    // and duplicate common elements
    @Test
    void testCommonWithTwoListsWithCommonElementsOfDifferentTypesAndDuplicateCommonElements3() {
        List<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        List<Object> l2 = new ArrayList<Object>();
        l2.add(3);
        l2.add(""4"");
        l2.add(4);
        l2.add(5);
        l2.add(6);
        l2.add(7);
        l2.add(7);
        l2.add(1);
        List<Object> result = Common.common(l1, l2);
        assertEquals(3, result.size());
        assertEquals(1, result.get(0));
        assertEquals(3, result.get(1));
        assertEquals(5, result.get(2));
    }
}
"
cmpl-A4PX5gcoaVqGvZEmgoyRREcKd9hr1,/HumanEvalJava/src/main/java/scenario2/id_162.java,9.608162879943848,stop,"// StringToMd5.java
package scenario2;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class StringToMd5 {

    /**
     * * Given a string 'text', return its md5 hash equivalent string.
     * If 'text' is an empty string, return null.
     */
    public static String stringToMd5(String text) {
        if (text.equals("""")) {
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] messageDigest = md.digest(text.getBytes());
            BigInteger number = new BigInteger(1, messageDigest);
            String hashText = number.toString(16);
            while (hashText.length() < 32) {
                hashText = ""0"" + hashText;
            }
            return hashText;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
","// StringToMd5Test.java
package scenario2;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {","// StringToMd5Test.java
package scenario2;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {
	// Test case 1: Test for empty string
    @Test
    void testStringToMd5EmptyString() {
        String text = """";
        String expResult = null;
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 2: Test for string with one character
    @Test
    void testStringToMd5OneCharacter() {
        String text = ""a"";
        String expResult = ""0cc175b9c0f1b6a831c399e269772661"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 3: Test for string with two characters
    @Test
    void testStringToMd5TwoCharacters() {
        String text = ""ab"";
        String expResult = ""187ef4436122d1cc2f40dc2b92f0eba0"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 4: Test for string with three characters
    @Test
    void testStringToMd5ThreeCharacters() {
        String text = ""abc"";
        String expResult = ""900150983cd24fb0d6963f7d28e17f72"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 5: Test for string with four characters
    @Test
    void testStringToMd5FourCharacters() {
        String text = ""abcd"";
        String expResult = ""e2fc714c4727ee9395f324cd2e7f331f"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 6: Test for string with five characters
    @Test
    void testStringToMd5FiveCharacters() {
        String text = ""abcde"";
        String expResult = ""ab56b4d92b40713acc5af89985d4b786"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 7: Test for string with six characters
    @Test
    void testStringToMd5SixCharacters() {
        String text = ""abcdef"";
        String expResult = ""e80b5017098950fc58aad83c8c14978e"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 8: Test for string with seven characters
    @Test
    void testStringToMd5SevenCharacters() {
        String text = ""abcdefg"";
        String expResult = ""7ac66c0f148de9519b8bd264312c4d64"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 9: Test for string with eight characters
    @Test
    void testStringToMd5EightCharacters() {
        String text = ""abcdefgh"";
        String expResult = ""e8dc4081b13434b45189a720b77b6818"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
			// Test case 10: Test for string with nine characters
    @Test
    void testStringToMd5NineCharacters() {
        String text = ""abcdefghi"";
        String expResult = ""8aa99b1f439ff71293e95357bac6fd94"";
        String result = StringToMd5.stringToMd5(text);
        assertEquals(expResult, result);
    }
}
"
cmpl-A4PY8mWacw61h8wESONIkc5MHu14m,/HumanEvalJava/src/main/java/scenario2/id_135.java,14.7113938331604,stop,"// CanArrange.java
package scenario2;

import java.util.List;

class CanArrange {

    /**
     * Create a function which returns the largest index of an element which
     * is not greater than or equal to the element immediately preceding it. If
     * no such element exists then return -1. The given array will not contain
     * duplicate values.
     */
    public static int canArrange(List<Object> arr) {
        int max = -1;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) instanceof Integer) {
                if (i > 0 && (int) arr.get(i) < (int) arr.get(i - 1)) {
                    max = i;
                }
            }
        }
        return max;
    }
}
","// CanArrangeTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {","// CanArrangeTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {
	/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
				assertEquals(0, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange1() {
				List<Object> arr = List.of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);
				assertEquals(-1, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange2() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
				assertEquals(0, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange3() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9);
				assertEquals(9, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange4() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
				assertEquals(0, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange5() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9);
				assertEquals(9, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange6() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
				assertEquals(0, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange7() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9);
				assertEquals(9, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange8() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
				assertEquals(0, CanArrange.canArrange(arr));
			}

			/**
			* Test case for the {@link CanArrange#canArrange(List)} method.
			* It checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
			*/
			@Test
			void testCanArrange9() {
				List<Object> arr = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9);
				assertEquals(9, CanArrange.canArrange(arr));
			}
}
"
cmpl-A4PZBy7FsTIXhpbIx3myCqWxUx4nU,/HumanEvalJava/src/main/java/scenario2/id_134.java,8.07914423942566,stop,"// CheckIfLastCharIsALetter.java
package scenario2;

class CheckIfLastCharIsALetter {

    /**
     * * Create a function that returns True if the last character
     * of a given string is an alphabetical character and is not
     * a part of a word, and False otherwise.
     * Note: ""word"" is a group of characters separated by space.
     */
    public static Boolean checkIfLastCharIsALetter(String txt) {
        if (txt.length() == 0) {
            return false;
        }
        char lastChar = txt.charAt(txt.length() - 1);
        if (Character.isLetter(lastChar)) {
            if (txt.length() == 1) {
                return true;
            }
            char secondLastChar = txt.charAt(txt.length() - 2);
            if (Character.isLetter(secondLastChar)) {
                return false;
            }
            return true;
        }
        return false;
    }
}
","// CheckIfLastCharIsALetterTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {","// CheckIfLastCharIsALetterTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {
	/**
			* Test case when the input string is empty.
			*/
			@Test
			void testEmptyString() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
			}

			/**
			* Test case when the input string contains only one character.
			*/
			@Test
			void testOneCharacter() {
						assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""a""));
			}

			/**
			* Test case when the input string contains only one character and it is not a letter.
			*/
			@Test
			void testOneNonLetterCharacter() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""1""));
			}

			/**
			* Test case when the input string contains only one word.
			*/
			@Test
			void testOneWord() {
						assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello""));
			}

			/**
			* Test case when the input string contains only one word and the last character is not a letter.
			*/
			@Test
			void testOneWordWithNonLetterLastChar() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello1""));
			}

			/**
			* Test case when the input string contains two words.
			*/
			@Test
			void testTwoWords() {
						assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello World""));
			}

			/**
			* Test case when the input string contains two words and the last character is not a letter.
			*/
			@Test
			void testTwoWordsWithNonLetterLastChar() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello World1""));
			}

			/**
			* Test case when the input string contains three words.
			*/
			@Test
			void testThreeWords() {
						assertTrue(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello World!""));
			}

			/**
			* Test case when the input string contains three words and the last character is not a letter.
			*/
			@Test
			void testThreeWordsWithNonLetterLastChar() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello World!1""));
			}

			/**
			* Test case when the input string contains three words and the last character is a letter but it is a part of a word.
			*/
			@Test
			void testThreeWordsWithLetterLastCharButItIsAPartOfAWord() {
						assertFalse(CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Hello World1!""));
			}
}
"
cmpl-A4PaE69VULPiYs3fg1yy9K3pN4PWv,/HumanEvalJava/src/main/java/scenario2/id_163.java,9.398961544036865,stop,"// GenerateIntegers.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class GenerateIntegers {

    /**
     * * Given two positive integers a and b, return the even digits between a
     * and b, in ascending order.
     */
    public static List<Object> generateIntegers(int a, int b) {
        int lower = Math.max(2, Math.min(a, b));
        int upper = Math.min(8, Math.max(a, b));
        List<Object> result = new ArrayList<>();
        for (int i = lower; i <= upper; i++) {
            if (i % 2 == 0) {
                result.add(i);
            }
        }
        return result;
    }
}
","// GenerateIntegersTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {","// GenerateIntegersTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {
	// Test case 1: a = 1, b = 10
			@Test
			void test1() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(1, 10));
			}

			// Test case 2: a = 10, b = 1
			@Test
			void test2() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(10, 1));
			}

			// Test case 3: a = 1, b = 1
			@Test
			void test3() {
				List<Object> expected = new ArrayList<>();
				assertEquals(expected, GenerateIntegers.generateIntegers(1, 1));
			}

			// Test case 4: a = 2, b = 8
			@Test
			void test4() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(2, 8));
			}

			// Test case 5: a = 8, b = 2
			@Test
			void test5() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(8, 2));
			}

			// Test case 6: a = 0, b = 10
			@Test
			void test6() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(0, 10));
			}

			// Test case 7: a = 10, b = 0
			@Test
			void test7() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(10, 0));
			}

			// Test case 8: a = -1, b = 10
			@Test
			void test8() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(-1, 10));
			}

			// Test case 9: a = 10, b = -1
			@Test
			void test9() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(10, -1));
			}

			// Test case 10: a = -1, b = -10
			@Test
			void test10() {
				List<Object> expected = new ArrayList<>();
				expected.add(2);
				expected.add(4);
				expected.add(6);
				expected.add(8);
				assertEquals(expected, GenerateIntegers.generateIntegers(-1, -10));
			}
}
"
cmpl-A4PbHjis5aB1UFxxySZQ1WKHnDWsn,/HumanEvalJava/src/main/java/scenario2/id_59.java,4.177588701248169,stop,"// LargestPrimeFactor.java
package scenario2;

class LargestPrimeFactor {

    /**
     * Return the largest prime factor of n. Assume n > 1 and is not a prime.
     */
    public static int largestPrimeFactor(int n) {
        int max = 0;
        for (int i = 2; i <= n; i++) {
            if (n % i == 0) {
                max = i;
                n /= i;
                i--;
            }
        }
        return max;
    }
}
","// LargestPrimeFactorTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {","// LargestPrimeFactorTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {
	// Test case 1
    @Test
    void testLargestPrimeFactor1() {
        assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2));
    }

    // Test case 2
    @Test
    void testLargestPrimeFactor2() {
        assertEquals(3, LargestPrimeFactor.largestPrimeFactor(6));
    }

    // Test case 3
    @Test
    void testLargestPrimeFactor3() {
        assertEquals(5, LargestPrimeFactor.largestPrimeFactor(10));
    }

    // Test case 4
    @Test
    void testLargestPrimeFactor4() {
        assertEquals(7, LargestPrimeFactor.largestPrimeFactor(14));
    }

    // Test case 5
    @Test
    void testLargestPrimeFactor5() {
        assertEquals(11, LargestPrimeFactor.largestPrimeFactor(22));
    }

    // Test case 6
    @Test
    void testLargestPrimeFactor6() {
        assertEquals(13, LargestPrimeFactor.largestPrimeFactor(26));
    }

    // Test case 7
    @Test
    void testLargestPrimeFactor7() {
        assertEquals(17, LargestPrimeFactor.largestPrimeFactor(34));
    }

    // Test case 8
    @Test
    void testLargestPrimeFactor8() {
        assertEquals(19, LargestPrimeFactor.largestPrimeFactor(38));
    }

    // Test case 9
    @Test
    void testLargestPrimeFactor9() {
        assertEquals(23, LargestPrimeFactor.largestPrimeFactor(46));
    }

    // Test case 10
    @Test
    void testLargestPrimeFactor10() {
        assertEquals(29, LargestPrimeFactor.largestPrimeFactor(58));
    }
}
"
cmpl-A4PcKejGOlXMnTZYowaizTph2Ke4O,/HumanEvalJava/src/main/java/scenario2/id_122.java,9.019641399383545,stop,"// AddElements.java
package scenario2;

import java.util.List;

class AddElements {

    /**
     * * Given a non-empty array of integers arr and an integer k, return
     * the sum of the elements with at most two digits from the first k elements of arr.
     */
    public static int addElements(List<Integer> arr, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            if (arr.get(i) < 100) {
                sum += arr.get(i);
            }
        }
        return sum;
    }
}
","// AddElementsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {","// AddElementsTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {
	// Test case 1: Empty list
    @Test
    void testEmptyList() {
        List<Integer> arr = List.of();
        int k = 5;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 2: k is greater than the size of the list
    @Test
    void testKGreaterThanListSize() {
        List<Integer> arr = List.of(1, 2, 3, 4, 5);
        int k = 10;
        int expected = 15;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 3: k is equal to the size of the list
    @Test
    void testKEqualToListSize() {
        List<Integer> arr = List.of(1, 2, 3, 4, 5);
        int k = 5;
        int expected = 15;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 4: k is less than the size of the list
    @Test
    void testKLessThanListSize() {
        List<Integer> arr = List.of(1, 2, 3, 4, 5);
        int k = 3;
        int expected = 6;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 5: k is equal to 0
    @Test
    void testKEqualToZero() {
        List<Integer> arr = List.of(1, 2, 3, 4, 5);
        int k = 0;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 6: k is negative
    @Test
    void testKNegative() {
        List<Integer> arr = List.of(1, 2, 3, 4, 5);
        int k = -3;
        int expected = 0;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 7: List contains only one element
    @Test
    void testListContainsOneElement() {
        List<Integer> arr = List.of(5);
        int k = 1;
        int expected = 5;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 8: List contains only two elements
    @Test
    void testListContainsTwoElements() {
        List<Integer> arr = List.of(5, 10);
        int k = 2;
        int expected = 15;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 9: List contains only three elements
    @Test
    void testListContainsThreeElements() {
        List<Integer> arr = List.of(5, 10, 15);
        int k = 3;
        int expected = 30;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }

    // Test case 10: List contains elements with more than two digits
    @Test
    void testListContainsElementsWithMoreThanTwoDigits() {
        List<Integer> arr = List.of(5, 10, 100, 1000, 10000);
        int k = 5;
        int expected = 15;
        int actual = AddElements.addElements(arr, k);
        assertEquals(expected, actual);
    }
}"
cmpl-A4PdN4L6vaZp2Hyr4n3Gpwln5sLEM,/HumanEvalJava/src/main/java/scenario2/id_18.java,5.834520578384399,stop,"// HowManyTimes.java
package scenario2;

class HowManyTimes {

    /**
     * Find how many times a given substring can be found in the original string. Count overlapping cases.
     */
    public static int howManyTimes(String string, String substring) {
        int count = 0;
        int index = 0;
        while (index < string.length()) {
            index = string.indexOf(substring, index);
            if (index == -1) {
                break;
            }
            count++;
            index++;
        }
        return count;
    }
}
","// HowManyTimesTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {","// HowManyTimesTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {
	// Test case 1: Test with empty string and empty substring
    @Test
    void testEmptyStringAndEmptySubstring() {
        assertEquals(0, HowManyTimes.howManyTimes("""", """"));
    }

    // Test case 2: Test with empty string and non-empty substring
    @Test
    void testEmptyStringAndNonEmptySubstring() {
        assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
    }

    // Test case 3: Test with non-empty string and empty substring
    @Test
    void testNonEmptyStringAndEmptySubstring() {
        assertEquals(0, HowManyTimes.howManyTimes(""a"", """"));
    }

    // Test case 4: Test with non-empty string and substring that does not exist in the string
    @Test
    void testNonEmptyStringAndSubstringNotExist() {
        assertEquals(0, HowManyTimes.howManyTimes(""a"", ""b""));
    }

    // Test case 5: Test with non-empty string and substring that exists in the string once
    @Test
    void testNonEmptyStringAndSubstringExistOnce() {
        assertEquals(1, HowManyTimes.howManyTimes(""a"", ""a""));
    }

    // Test case 6: Test with non-empty string and substring that exists in the string more than once
    @Test
    void testNonEmptyStringAndSubstringExistMoreThanOnce() {
        assertEquals(2, HowManyTimes.howManyTimes(""aba"", ""a""));
    }

    // Test case 7: Test with non-empty string and substring that exists in the string more than once with overlapping
    @Test
    void testNonEmptyStringAndSubstringExistMoreThanOnceWithOverlapping() {
        assertEquals(2, HowManyTimes.howManyTimes(""ababa"", ""aba""));
    }

    // Test case 8: Test with non-empty string and substring that exists in the string more than once without overlapping
    @Test
    void testNonEmptyStringAndSubstringExistMoreThanOnceWithoutOverlapping() {
        assertEquals(2, HowManyTimes.howManyTimes(""abab"", ""ab""));
    }

    // Test case 9: Test with non-empty string and substring that exists in the string more than once with overlapping
    @Test
    void testNonEmptyStringAndSubstringExistMoreThanOnceWithOverlapping2() {
        assertEquals(3, HowManyTimes.howManyTimes(""ababab"", ""aba""));
    }

    // Test case 10: Test with non-empty string and substring that exists in the string more than once without overlapping
    @Test
    void testNonEmptyStringAndSubstringExistMoreThanOnceWithoutOverlapping2() {
        assertEquals(3, HowManyTimes.howManyTimes(""ababab"", ""ab""));
    }
}
"
cmpl-A4PeQkDbnKnbxSunuSDNDRuy4raaH,/HumanEvalJava/src/main/java/scenario2/id_159.java,10.383985757827759,stop,"// Eat.java
package scenario2;

import java.util.Arrays;
import java.util.List;

class Eat {

    /**
     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,
     * but now you need to eat more carrots to complete the day's meals.
     * you should return an array of [ total number of eaten carrots after your meals,
     * the number of carrots left after your meals ]
     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
     *
     * Variables:
     *
     * @number : integer
     * the number of carrots that you have eaten.
     * @need : integer
     * the number of carrots that you need to eat.
     * @remaining : integer
     * the number of remaining carrots that exist in stock
     *
     * Constrain:
     * * 0 <= number <= 1000
     * * 0 <= need <= 1000
     * * 0 <= remaining <= 1000
     */
    public static List<Integer> eat(int number, int need, int remaining) {
        if (need <= remaining) {
            return Arrays.asList(number + need, remaining - need);
        } else {
            return Arrays.asList(number + remaining, 0);
        }
    }
}
","// EatTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {","// EatTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {
	/**
			* Test case 1: number = 0, need = 0, remaining = 0
			* Expected result: [0, 0]
			*/
			@Test
			void test1() {
				List<Integer> result = Eat.eat(0, 0, 0);
				assertEquals(Arrays.asList(0, 0), result);
			}

			/**
			* Test case 2: number = 0, need = 0, remaining = 1
			* Expected result: [0, 1]
			*/
			@Test
			void test2() {
				List<Integer> result = Eat.eat(0, 0, 1);
				assertEquals(Arrays.asList(0, 1), result);
			}

			/**
			* Test case 3: number = 0, need = 1, remaining = 0
			* Expected result: [0, 0]
			*/
			@Test
			void test3() {
				List<Integer> result = Eat.eat(0, 1, 0);
				assertEquals(Arrays.asList(0, 0), result);
			}

			/**
			* Test case 4: number = 0, need = 1, remaining = 1
			* Expected result: [1, 0]
			*/
			@Test
			void test4() {
				List<Integer> result = Eat.eat(0, 1, 1);
				assertEquals(Arrays.asList(1, 0), result);
			}

			/**
			* Test case 5: number = 1, need = 0, remaining = 0
			* Expected result: [1, 0]
			*/
			@Test
			void test5() {
				List<Integer> result = Eat.eat(1, 0, 0);
				assertEquals(Arrays.asList(1, 0), result);
			}

			/**
			* Test case 6: number = 1, need = 0, remaining = 1
			* Expected result: [1, 1]
			*/
			@Test
			void test6() {
				List<Integer> result = Eat.eat(1, 0, 1);
				assertEquals(Arrays.asList(1, 1), result);
			}

			/**
			* Test case 7: number = 1, need = 1, remaining = 0
			* Expected result: [1, 0]
			*/
			@Test
			void test7() {
				List<Integer> result = Eat.eat(1, 1, 0);
				assertEquals(Arrays.asList(1, 0), result);
			}

			/**
			* Test case 8: number = 1, need = 1, remaining = 1
			* Expected result: [2, 0]
			*/
			@Test
			void test8() {
				List<Integer> result = Eat.eat(1, 1, 1);
				assertEquals(Arrays.asList(2, 0), result);
			}

			/**
			* Test case 9: number = 0, need = 1, remaining = 2
			* Expected result: [1, 1]
			*/
			@Test
			void test9() {
				List<Integer> result = Eat.eat(0, 1, 2);
				assertEquals(Arrays.asList(1, 1), result);
			}

			/**
			* Test case 10: number = 1, need = 2, remaining = 3
			* Expected result: [4, 0]
			*/
			@Test
			void test10() {
				List<Integer> result = Eat.eat(1, 2, 3);
				assertEquals(Arrays.asList(4, 0), result);
			}
}
"
cmpl-A4PfTg1XfVL1n9TLugn8wFStdVlWP,/HumanEvalJava/src/main/java/scenario2/id_63.java,4.942142486572266,stop,"// Fibfib.java
package scenario2;

class Fibfib {

    /**
     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fibfib(0) == 0
     * fibfib(1) == 0
     * fibfib(2) == 1
     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.
     */
    public static int fibfib(int n) {
        if (n < 2) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }
        int a = 0;
        int b = 0;
        int c = 1;
        int d = 0;
        for (int i = 3; i <= n; i++) {
            d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
}
","// FibfibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {","// FibfibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {
	@Test
			void testFibfib0() {
				assertEquals(0, Fibfib.fibfib(0));
			}

			@Test
			void testFibfib1() {
				assertEquals(0, Fibfib.fibfib(1));
			}

			@Test
			void testFibfib2() {
				assertEquals(1, Fibfib.fibfib(2));
			}

			@Test
			void testFibfib3() {
				assertEquals(1, Fibfib.fibfib(3));
			}

			@Test
			void testFibfib4() {
				assertEquals(2, Fibfib.fibfib(4));
			}

			@Test
			void testFibfib5() {
				assertEquals(4, Fibfib.fibfib(5));
			}

			@Test
			void testFibfib6() {
				assertEquals(7, Fibfib.fibfib(6));
			}

			@Test
			void testFibfib7() {
				assertEquals(13, Fibfib.fibfib(7));
			}

			@Test
			void testFibfib8() {
				assertEquals(24, Fibfib.fibfib(8));
			}

			@Test
			void testFibfib9() {
				assertEquals(44, Fibfib.fibfib(9));
			}
}
"
cmpl-A4PgWt2ZrXGu8kW6rhKUSVoGDssFT,/HumanEvalJava/src/main/java/scenario2/id_7.java,11.610670328140259,stop,"// FilterBySubstring.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class FilterBySubstring {

    /**
     * Filter an input list of strings only for ones that contain given substring
     */
    public static List<Object> filterBySubstring(List<Object> strings, String substring) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < strings.size(); i++) {
            if (strings.get(i).toString().contains(substring)) {
                result.add(strings.get(i));
            }
        }
        return result;
    }
}
","// FilterBySubstringTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {","// FilterBySubstringTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {
	// Test case 1: Test with empty list
			@Test
			void testEmptyList() {
				List<Object> strings = new ArrayList<Object>();
				String substring = ""test"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(0, result.size());
			}
			
			// Test case 2: Test with empty substring
			@Test
			void testEmptySubstring() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test"");
				String substring = """";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(1, result.size());
			}
			
			// Test case 3: Test with empty list and empty substring
			@Test
			void testEmptyListAndSubstring() {
				List<Object> strings = new ArrayList<Object>();
				String substring = """";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(0, result.size());
			}
			
			// Test case 4: Test with list of strings that do not contain substring
			@Test
			void testNoSubstring() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""test4"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(0, result.size());
			}
			
			// Test case 5: Test with list of strings that contain substring
			@Test
			void testSubstring() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""test"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(3, result.size());
			}
			
			// Test case 6: Test with list of strings that contain substring multiple times
			@Test
			void testSubstringMultipleTimes() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""t"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(3, result.size());
			}
			
			// Test case 7: Test with list of strings that contain substring at the beginning
			@Test
			void testSubstringAtBeginning() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""test1"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(1, result.size());
			}
			
			// Test case 8: Test with list of strings that contain substring at the end
			@Test
			void testSubstringAtEnd() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""3"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(1, result.size());
			}
			
			// Test case 9: Test with list of strings that contain substring with different cases
			@Test
			void testSubstringDifferentCases() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""TeSt"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(3, result.size());
			}
			
			// Test case 10: Test with list of strings that contain substring with special characters
			@Test
			void testSubstringSpecialCharacters() {
				List<Object> strings = new ArrayList<Object>();
				strings.add(""test1"");
				strings.add(""test2"");
				strings.add(""test3"");
				String substring = ""t@st"";
				List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);
				assertEquals(0, result.size());
			}
}"
cmpl-A4PhZha2ZHXdXdy8iIGTl05A9u9LI,/HumanEvalJava/src/main/java/scenario2/id_34.java,9.215663194656372,stop,"// Unique.java
package scenario2;

import java.util.*;

class Unique {

    /**
     * Return sorted unique elements in a list
     */
    public static List<Integer> unique(List<Integer> l) {
        Set<Integer> set = new HashSet<Integer>();
        for (Integer i : l) {
            set.add(i);
        }
        List<Integer> result = new ArrayList<Integer>(set);
        Collections.sort(result);
        return result;
    }
}
","// UniqueTest.java
package scenario2;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {","// UniqueTest.java
package scenario2;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {
	// Test case 1: Empty list
			@Test
			void testUnique1() {
				List<Integer> input = new ArrayList<Integer>();
				List<Integer> expected = new ArrayList<Integer>();
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 2: List with one element
			@Test
			void testUnique2() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 3: List with two identical elements
			@Test
			void testUnique3() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(1);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 4: List with two different elements
			@Test
			void testUnique4() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				expected.add(2);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 5: List with multiple identical elements
			@Test
			void testUnique5() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(1);
				input.add(1);
				input.add(1);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 6: List with multiple different elements
			@Test
			void testUnique6() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				expected.add(2);
				expected.add(3);
				expected.add(4);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 7: List with negative elements
			@Test
			void testUnique7() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(-1);
				input.add(-2);
				input.add(-3);
				input.add(-4);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(-4);
				expected.add(-3);
				expected.add(-2);
				expected.add(-1);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 8: List with zero
			@Test
			void testUnique8() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(0);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(0);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 9: List with multiple identical elements and one different element
			@Test
			void testUnique9() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(1);
				input.add(1);
				input.add(1);
				input.add(2);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				expected.add(2);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
			
			// Test case 10: List with multiple different elements and one identical element
			@Test
			void testUnique10() {
				List<Integer> input = new ArrayList<Integer>();
				input.add(1);
				input.add(2);
				input.add(3);
				input.add(4);
				input.add(4);
				List<Integer> expected = new ArrayList<Integer>();
				expected.add(1);
				expected.add(2);
				expected.add(3);
				expected.add(4);
				List<Integer> actual = Unique.unique(input);
				assertEquals(expected, actual);
			}
}"
cmpl-A4PicmLygK5nBOPVAvp3YO9uCMIxX,/HumanEvalJava/src/main/java/scenario2/id_118.java,4.087900876998901,stop,"// GetClosestVowel.java
package scenario2;

class GetClosestVowel {

    /**
     * You are given a word. Your task is to find the closest vowel that stands between
     * two consonants from the right side of the word (case sensitive).
     *
     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't
     * find any vowel met the above condition.
     *
     * You may assume that the given string contains English letter only.
     */
    public static String getClosestVowel(String word) {
        String vowels = ""aeiouAEIOU"";
        int i = word.length() - 2;
        while (i > 0) {
            if (vowels.indexOf(word.charAt(i)) != -1) {
                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {
                    return word.substring(i, i + 1);
                }
            }
            i--;
        }
        return """";
    }
}
","// GetClosestVowelTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {","// GetClosestVowelTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {
	@Test
			void testGetClosestVowel1() {
				assertEquals(""i"", GetClosestVowel.getClosestVowel(""abir""));
			}
			
			@Test
			void testGetClosestVowel2() {
				assertEquals(""o"", GetClosestVowel.getClosestVowel(""abpor""));
			}
			
			@Test
			void testGetClosestVowel3() {
				assertEquals(""a"", GetClosestVowel.getClosestVowel(""abcr""));
			}
			
			@Test
			void testGetClosestVowel4() {
				assertEquals(""e"", GetClosestVowel.getClosestVowel(""abcer""));
			}
			
			@Test
			void testGetClosestVowel5() {
				assertEquals(""u"", GetClosestVowel.getClosestVowel(""abcur""));
			}
			
			@Test
			void testGetClosestVowel6() {
				assertEquals(""i"", GetClosestVowel.getClosestVowel(""abir""));
			}
			
			@Test
			void testGetClosestVowel7() {
				assertEquals(""o"", GetClosestVowel.getClosestVowel(""abpor""));
			}
			
			@Test
			void testGetClosestVowel8() {
				assertEquals(""a"", GetClosestVowel.getClosestVowel(""abcr""));
			}
			
			@Test
			void testGetClosestVowel9() {
				assertEquals(""e"", GetClosestVowel.getClosestVowel(""abcer""));
			}
			
			@Test
			void testGetClosestVowel10() {
				assertEquals(""u"", GetClosestVowel.getClosestVowel(""abcur""));
			}
}
"
cmpl-A4Pjf0Y3jL9tq4LT5UXeYJBuTNS0U,/HumanEvalJava/src/main/java/scenario2/id_22.java,10.946035385131836,stop,"// FilterIntegers.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class FilterIntegers {

    /**
     * Filter given list of any Java values only for integers
     */
    public static List<Object> filterIntegers(List<Object> values) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : values) {
            if (value instanceof Integer) {
                result.add(value);
            }
        }
        return result;
    }
}
","// FilterIntegersTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {","// FilterIntegersTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {
	// Test case 1: Test with empty list
			@Test
			void testFilterIntegersWithEmptyList() {
				List<Object> values = new ArrayList<Object>();
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(0, result.size());
			}

			// Test case 2: Test with list of integers
			@Test
			void testFilterIntegersWithListOfIntegers() {
				List<Object> values = new ArrayList<Object>();
				values.add(1);
				values.add(2);
				values.add(3);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(3, result.size());
			}

			// Test case 3: Test with list of strings
			@Test
			void testFilterIntegersWithListOfStrings() {
				List<Object> values = new ArrayList<Object>();
				values.add(""1"");
				values.add(""2"");
				values.add(""3"");
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(0, result.size());
			}

			// Test case 4: Test with list of mixed values
			@Test
			void testFilterIntegersWithListOfMixedValues() {
				List<Object> values = new ArrayList<Object>();
				values.add(1);
				values.add(""2"");
				values.add(3);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(2, result.size());
			}

			// Test case 5: Test with null list
			@Test
			void testFilterIntegersWithNullList() {
				List<Object> values = null;
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(0, result.size());
			}

			// Test case 6: Test with list of null values
			@Test
			void testFilterIntegersWithListOfNullValues() {
				List<Object> values = new ArrayList<Object>();
				values.add(null);
				values.add(null);
				values.add(null);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(0, result.size());
			}

			// Test case 7: Test with list of negative integers
			@Test
			void testFilterIntegersWithListOfNegativeIntegers() {
				List<Object> values = new ArrayList<Object>();
				values.add(-1);
				values.add(-2);
				values.add(-3);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(3, result.size());
			}

			// Test case 8: Test with list of positive integers
			@Test
			void testFilterIntegersWithListOfPositiveIntegers() {
				List<Object> values = new ArrayList<Object>();
				values.add(1);
				values.add(2);
				values.add(3);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(3, result.size());
			}

			// Test case 9: Test with list of zero values
			@Test
			void testFilterIntegersWithListOfZeroValues() {
				List<Object> values = new ArrayList<Object>();
				values.add(0);
				values.add(0);
				values.add(0);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(3, result.size());
			}

			// Test case 10: Test with list of decimal values
			@Test
			void testFilterIntegersWithListOfDecimalValues() {
				List<Object> values = new ArrayList<Object>();
				values.add(1.1);
				values.add(2.2);
				values.add(3.3);
				List<Object> result = FilterIntegers.filterIntegers(values);
				assertEquals(0, result.size());
			}
}
"
cmpl-A4PkiEYRw5Tcee3kLGj500f7JN9vm,/HumanEvalJava/src/main/java/scenario2/id_75.java,3.9343528747558594,stop,"// IsMultiplyPrime.java
package scenario2;

class IsMultiplyPrime {

    /**
     * Write a function that returns true if the given number is the multiplication of 3 prime numbers
     * and false otherwise.
     * Knowing that (a) is less then 100.
     */
    public static Boolean isMultiplyPrime(int a) {
        int count = 0;
        for (int i = 2; i <= a; i++) {
            if (a % i == 0) {
                count++;
                a /= i;
                i--;
            }
        }
        return count == 3;
    }
}
","// IsMultiplyPrimeTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {","// IsMultiplyPrimeTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
	@Test
			void testIsMultiplyPrime() {
				// Test case 1
				int a = 2;
				Boolean result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 2
				a = 3;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 3
				a = 4;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 4
				a = 5;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 5
				a = 6;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 6
				a = 7;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 7
				a = 8;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 8
				a = 9;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 9
				a = 10;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
				
				// Test case 10
				a = 11;
				result = IsMultiplyPrime.isMultiplyPrime(a);
				assertFalse(result);
			}
}
"
cmpl-A4PllR1IeFE8DAE6BJvuMzl6IhWPx,/HumanEvalJava/src/main/java/scenario2/id_138.java,5.305196285247803,stop,"// IsEqualToSumEven.java
package scenario2;

class IsEqualToSumEven {

    /**
     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
     */
    public static Boolean isEqualToSumEven(int n) {
        if (n < 8) {
            return false;
        }
        return n % 2 == 0;
    }
}
","// IsEqualToSumEvenTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {","// IsEqualToSumEvenTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
	@Test
			void testIsEqualToSumEven() {
				// Test case 1
				int n1 = 8;
				Boolean result1 = IsEqualToSumEven.isEqualToSumEven(n1);
				assertTrue(result1);
				
				// Test case 2
				int n2 = 10;
				Boolean result2 = IsEqualToSumEven.isEqualToSumEven(n2);
				assertTrue(result2);
				
				// Test case 3
				int n3 = 12;
				Boolean result3 = IsEqualToSumEven.isEqualToSumEven(n3);
				assertTrue(result3);
				
				// Test case 4
				int n4 = 14;
				Boolean result4 = IsEqualToSumEven.isEqualToSumEven(n4);
				assertTrue(result4);
				
				// Test case 5
				int n5 = 16;
				Boolean result5 = IsEqualToSumEven.isEqualToSumEven(n5);
				assertTrue(result5);
				
				// Test case 6
				int n6 = 18;
				Boolean result6 = IsEqualToSumEven.isEqualToSumEven(n6);
				assertTrue(result6);
				
				// Test case 7
				int n7 = 20;
				Boolean result7 = IsEqualToSumEven.isEqualToSumEven(n7);
				assertTrue(result7);
				
				// Test case 8
				int n8 = 22;
				Boolean result8 = IsEqualToSumEven.isEqualToSumEven(n8);
				assertTrue(result8);
				
				// Test case 9
				int n9 = 24;
				Boolean result9 = IsEqualToSumEven.isEqualToSumEven(n9);
				assertTrue(result9);
				
				// Test case 10
				int n10 = 26;
				Boolean result10 = IsEqualToSumEven.isEqualToSumEven(n10);
				assertTrue(result10);
			}
}
"
cmpl-A4PmoFyR6rANETajd3WC1dSImK9mx,/HumanEvalJava/src/main/java/scenario2/id_55.java,5.3712663650512695,stop,"// Fib.java
package scenario2;

class Fib {

    /**
     * Return n-th Fibonacci number.
     */
    public static int fib(int n) {
        int a = 0;
        int b = 1;
        int c = 1;
        for (int i = 0; i < n - 1; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
}
","// FibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {","// FibTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
	// Test case 1
			@Test
			void testFib1() {
				int result = Fib.fib(0);
				assertEquals(0, result);
			}
			
			// Test case 2
			@Test
			void testFib2() {
				int result = Fib.fib(1);
				assertEquals(1, result);
			}
			
			// Test case 3
			@Test
			void testFib3() {
				int result = Fib.fib(2);
				assertEquals(1, result);
			}
			
			// Test case 4
			@Test
			void testFib4() {
				int result = Fib.fib(3);
				assertEquals(2, result);
			}
			
			// Test case 5
			@Test
			void testFib5() {
				int result = Fib.fib(4);
				assertEquals(3, result);
			}
			
			// Test case 6
			@Test
			void testFib6() {
				int result = Fib.fib(5);
				assertEquals(5, result);
			}
			
			// Test case 7
			@Test
			void testFib7() {
				int result = Fib.fib(6);
				assertEquals(8, result);
			}
			
			// Test case 8
			@Test
			void testFib8() {
				int result = Fib.fib(7);
				assertEquals(13, result);
			}
			
			// Test case 9
			@Test
			void testFib9() {
				int result = Fib.fib(8);
				assertEquals(21, result);
			}
			
			// Test case 10
			@Test
			void testFib10() {
				int result = Fib.fib(9);
				assertEquals(34, result);
			}
}"
cmpl-A4PnrBrzrFQjDxrx1hYaPkYddVouV,/HumanEvalJava/src/main/java/scenario2/id_43.java,10.945716857910156,stop,"// PairsSumToZero.java
package scenario2;

import java.util.List;

class PairsSumToZero {

    /**
     * * pairs_sum_to_zero takes a list of integers as an input.
     * it returns True if there are two distinct elements in the list that
     * sum to zero, and False otherwise.
     */
    public static Boolean pairsSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                if (l.get(i) + l.get(j) == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// PairsSumToZeroTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {","// PairsSumToZeroTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {
	// Test case 1: Empty list
    @Test
    void testEmptyList() {
        List<Integer> l = List.of();
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 2: List with one element
    @Test
    void testOneElementList() {
        List<Integer> l = List.of(1);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 3: List with two elements that sum to zero
    @Test
    void testTwoElementsSumToZero() {
        List<Integer> l = List.of(1, -1);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 4: List with two elements that do not sum to zero
    @Test
    void testTwoElementsDoNotSumToZero() {
        List<Integer> l = List.of(1, 2);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 5: List with more than two elements and two elements that sum to zero
    @Test
    void testMoreThanTwoElementsAndTwoElementsSumToZero() {
        List<Integer> l = List.of(1, 2, -2, 3, -3);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 6: List with more than two elements and two elements that do not sum to zero
    @Test
    void testMoreThanTwoElementsAndTwoElementsDoNotSumToZero() {
        List<Integer> l = List.of(1, 2, 3, 4, 5);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 7: List with more than two elements and no elements that sum to zero
    @Test
    void testMoreThanTwoElementsAndNoElementsSumToZero() {
        List<Integer> l = List.of(1, 2, 3, 4, 5);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 8: List with more than two elements and all elements sum to zero
    @Test
    void testMoreThanTwoElementsAndAllElementsSumToZero() {
        List<Integer> l = List.of(1, -1, 2, -2, 3, -3);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 9: List with more than two elements and two elements that sum to zero multiple times
    @Test
    void testMoreThanTwoElementsAndTwoElementsSumToZeroMultipleTimes() {
        List<Integer> l = List.of(1, 2, -2, 3, -3, 4, -4);
        assertTrue(PairsSumToZero.pairsSumToZero(l));
    }

    // Test case 10: List with more than two elements and two elements that sum to zero multiple times
    @Test
    void testMoreThanTwoElementsAndTwoElementsDoNotSumToZeroMultipleTimes() {
        List<Integer> l = List.of(1, 2, 3, 4, 5, 6);
        assertFalse(PairsSumToZero.pairsSumToZero(l));
    }
}
"
cmpl-A4PouDtYmKe4vilasClCPIWMROGfV,/HumanEvalJava/src/main/java/scenario2/id_14.java,7.959087371826172,stop,"// AllPrefixes.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class AllPrefixes {

    /**
     * Return list of all prefixes from shortest to longest of the input string
     */
    public static List<Object> allPrefixes(String string) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < string.length(); i++) {
            result.add(string.substring(0, i + 1));
        }
        return result;
    }
}
","// AllPrefixesTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AllPrefixes}.
* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.
*/
class AllPrefixesTest {","// AllPrefixesTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AllPrefixes}.
* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.
*/
class AllPrefixesTest {
	// Test case 1: Empty string
    @Test
    void testAllPrefixesEmptyString() {
        List<Object> expected = new ArrayList<Object>();
        expected.add("""");
        assertEquals(expected, AllPrefixes.allPrefixes(""""));
    }

    // Test case 2: String with one character
    @Test
    void testAllPrefixesOneCharacter() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        assertEquals(expected, AllPrefixes.allPrefixes(""a""));
    }

    // Test case 3: String with two characters
    @Test
    void testAllPrefixesTwoCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        assertEquals(expected, AllPrefixes.allPrefixes(""ab""));
    }

    // Test case 4: String with three characters
    @Test
    void testAllPrefixesThreeCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abc""));
    }

    // Test case 5: String with four characters
    @Test
    void testAllPrefixesFourCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcd""));
    }

    // Test case 6: String with five characters
    @Test
    void testAllPrefixesFiveCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        expected.add(""abcde"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcde""));
    }

    // Test case 7: String with six characters
    @Test
    void testAllPrefixesSixCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        expected.add(""abcde"");
        expected.add(""abcdef"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcdef""));
    }

    // Test case 8: String with seven characters
    @Test
    void testAllPrefixesSevenCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        expected.add(""abcde"");
        expected.add(""abcdef"");
        expected.add(""abcdefg"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcdefg""));
    }

    // Test case 9: String with eight characters
    @Test
    void testAllPrefixesEightCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        expected.add(""abcde"");
        expected.add(""abcdef"");
        expected.add(""abcdefg"");
        expected.add(""abcdefgh"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcdefgh""));
    }

    // Test case 10: String with nine characters
    @Test
    void testAllPrefixesNineCharacters() {
        List<Object> expected = new ArrayList<Object>();
        expected.add(""a"");
        expected.add(""ab"");
        expected.add(""abc"");
        expected.add(""abcd"");
        expected.add(""abcde"");
        expected.add(""abcdef"");
        expected.add(""abcdefg"");
        expected.add(""abcdefgh"");
        expected.add(""abcdefghi"");
        assertEquals(expected, AllPrefixes.allPrefixes(""abcdefghi""));
    }
}
"
cmpl-A4PpxAH2aDvv4n8yVNHe6TkdjNr0V,/HumanEvalJava/src/main/java/scenario2/id_80.java,7.331099987030029,stop,"// IsHappy.java
package scenario2;

class IsHappy {

    /**
     * You are given a string s.
     * Your task is to check if the string is happy or not.
     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
     */
    public static Boolean isHappy(String s) {
        if (s.length() < 3) {
            return false;
        }
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {
                return false;
            }
        }
        return true;
    }
}
","// IsHappyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {","// IsHappyTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
	/**
			* Test case 1: Test an empty string.
			* The expected result is false.
			*/
			@Test
			void testEmptyString() {
						assertFalse(IsHappy.isHappy(""""));
			}

			/**
			* Test case 2: Test a string with length 1.
			* The expected result is false.
			*/
			@Test
			void testStringLength1() {
						assertFalse(IsHappy.isHappy(""a""));
			}

			/**
			* Test case 3: Test a string with length 2.
			* The expected result is false.
			*/
			@Test
			void testStringLength2() {
						assertFalse(IsHappy.isHappy(""ab""));
			}

			/**
			* Test case 4: Test a string with length 3 and all distinct letters.
			* The expected result is true.
			*/
			@Test
			void testStringLength3Distinct() {
						assertTrue(IsHappy.isHappy(""abc""));
			}

			/**
			* Test case 5: Test a string with length 3 and two consecutive letters.
			* The expected result is false.
			*/
			@Test
			void testStringLength3Consecutive() {
						assertFalse(IsHappy.isHappy(""aba""));
			}

			/**
			* Test case 6: Test a string with length 4 and all distinct letters.
			* The expected result is true.
			*/
			@Test
			void testStringLength4Distinct() {
						assertTrue(IsHappy.isHappy(""abcd""));
			}

			/**
			* Test case 7: Test a string with length 4 and two consecutive letters.
			* The expected result is false.
			*/
			@Test
			void testStringLength4Consecutive() {
						assertFalse(IsHappy.isHappy(""abba""));
			}

			/**
			* Test case 8: Test a string with length 5 and all distinct letters.
			* The expected result is true.
			*/
			@Test
			void testStringLength5Distinct() {
						assertTrue(IsHappy.isHappy(""abcde""));
			}

			/**
			* Test case 9: Test a string with length 5 and two consecutive letters.
			* The expected result is false.
			*/
			@Test
			void testStringLength5Consecutive() {
						assertFalse(IsHappy.isHappy(""ababa""));
			}

			/**
			* Test case 10: Test a string with length 6 and all distinct letters.
			* The expected result is true.
			*/
			@Test
			void testStringLength6Distinct() {
						assertTrue(IsHappy.isHappy(""abcdef""));
			}
}
"
cmpl-A4Pr0rZRKkzI3eEYlU3E1lhPO0Wjr,/HumanEvalJava/src/main/java/scenario2/id_155.java,8.282827138900757,stop,"// EvenOddCount.java
package scenario2;

import java.util.Arrays;
import java.util.List;

class EvenOddCount {

    /**
     * Given an integer. return a tuple that has the number of even and odd digits respectively.
     */
    public static List<Integer> evenOddCount(int num) {
        int even = 0;
        int odd = 0;
        if (num == 0) {
            even++;
        }
        while (num != 0) {
            if (num % 2 == 0) {
                even++;
            } else {
                odd++;
            }
            num /= 10;
        }
        return Arrays.asList(even, odd);
    }
}
","// EvenOddCountTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {","// EvenOddCountTest.java
package scenario2;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
	// Test case 1: Test with positive number
    @Test
    void testEvenOddCount1() {
        List<Integer> expected = Arrays.asList(2, 2);
        List<Integer> actual = EvenOddCount.evenOddCount(2468);
        assertEquals(expected, actual);
    }

    // Test case 2: Test with negative number
    @Test
    void testEvenOddCount2() {
        List<Integer> expected = Arrays.asList(2, 2);
        List<Integer> actual = EvenOddCount.evenOddCount(-2468);
        assertEquals(expected, actual);
    }

    // Test case 3: Test with zero
    @Test
    void testEvenOddCount3() {
        List<Integer> expected = Arrays.asList(1, 0);
        List<Integer> actual = EvenOddCount.evenOddCount(0);
        assertEquals(expected, actual);
    }

    // Test case 4: Test with single digit number
    @Test
    void testEvenOddCount4() {
        List<Integer> expected = Arrays.asList(0, 1);
        List<Integer> actual = EvenOddCount.evenOddCount(7);
        assertEquals(expected, actual);
    }

    // Test case 5: Test with large number
    @Test
    void testEvenOddCount5() {
        List<Integer> expected = Arrays.asList(5, 5);
        List<Integer> actual = EvenOddCount.evenOddCount(1234567890);
        assertEquals(expected, actual);
    }

    // Test case 6: Test with negative single digit number
    @Test
    void testEvenOddCount6() {
        List<Integer> expected = Arrays.asList(0, 1);
        List<Integer> actual = EvenOddCount.evenOddCount(-7);
        assertEquals(expected, actual);
    }

    // Test case 7: Test with negative large number
    @Test
    void testEvenOddCount7() {
        List<Integer> expected = Arrays.asList(5, 5);
        List<Integer> actual = EvenOddCount.evenOddCount(-1234567890);
        assertEquals(expected, actual);
    }

    // Test case 8: Test with positive number having all even digits
    @Test
    void testEvenOddCount8() {
        List<Integer> expected = Arrays.asList(4, 0);
        List<Integer> actual = EvenOddCount.evenOddCount(2468);
        assertEquals(expected, actual);
    }

    // Test case 9: Test with positive number having all odd digits
    @Test
    void testEvenOddCount9() {
        List<Integer> expected = Arrays.asList(0, 4);
        List<Integer> actual = EvenOddCount.evenOddCount(1357);
        assertEquals(expected, actual);
    }

    // Test case 10: Test with negative number having all even digits
    @Test
    void testEvenOddCount10() {
        List<Integer> expected = Arrays.asList(4, 0);
        List<Integer> actual = EvenOddCount.evenOddCount(-2468);
        assertEquals(expected, actual);
    }
}
"
cmpl-A4Ps3oIR52ppTWxZHcFS6ANVy7b4f,/HumanEvalJava/src/main/java/scenario2/id_102.java,3.7042620182037354,stop,"// ChooseNum.java
package scenario2;

class ChooseNum {

    /**
     * This function takes two positive numbers x and y and returns the
     * biggest even integer number that is in the range [x, y] inclusive. If
     * there's no such number, then the function should return -1.
     */
    public static int chooseNum(int x, int y) {
        int max = -1;
        for (int i = x; i <= y; i++) {
            if (i % 2 == 0 && i > max) {
                max = i;
            }
        }
        return max;
    }
}
","// ChooseNumTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {","// ChooseNumTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {
	@Test
			void testChooseNum1() {
				assertEquals(10, ChooseNum.chooseNum(1, 10));
			}
			
			@Test
			void testChooseNum2() {
				assertEquals(10, ChooseNum.chooseNum(10, 10));
			}
			
			@Test
			void testChooseNum3() {
				assertEquals(10, ChooseNum.chooseNum(10, 1));
			}
			
			@Test
			void testChooseNum4() {
				assertEquals(10, ChooseNum.chooseNum(1, 10));
			}
			
			@Test
			void testChooseNum5() {
				assertEquals(10, ChooseNum.chooseNum(10, 10));
			}
			
			@Test
			void testChooseNum6() {
				assertEquals(10, ChooseNum.chooseNum(10, 1));
			}
			
			@Test
			void testChooseNum7() {
				assertEquals(10, ChooseNum.chooseNum(1, 10));
			}
			
			@Test
			void testChooseNum8() {
				assertEquals(10, ChooseNum.chooseNum(10, 10));
			}
			
			@Test
			void testChooseNum9() {
				assertEquals(10, ChooseNum.chooseNum(10, 1));
			}
			
			@Test
			void testChooseNum10() {
				assertEquals(-1, ChooseNum.chooseNum(1, 3));
			}
}
"
cmpl-A4Pt6YtFeGNOpf5aSZKkPyyrdrpoR,/HumanEvalJava/src/main/java/scenario2/id_114.java,15.624648809432983,stop,"// Minsubarraysum.java
package scenario2;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     */
    public static long minsubarraysum(List<Object> nums) {
        long s = 0;
        long max_sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            long num = ((Number) nums.get(i)).longValue();
            s -= num;
            if (s < 0) {
                s = 0;
            }
            max_sum = Math.max(s, max_sum);
        }
        if (max_sum == 0) {
            max_sum = -((Number) nums.get(0)).longValue();
            for (int i = 0; i < nums.size(); i++) {
                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);
            }
        }
        long min_sum = -max_sum;
        return min_sum;
    }
}
","// MinsubarraysumTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {","// MinsubarraysumTest.java
package scenario2;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {
	/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum() {
				List<Object> nums = List.of(1, 2, 3, 4, 5);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum1() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum2() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum3() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum4() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum5() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum6() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum7() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum8() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum9() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}

			/**
			* Test case for the {@link Minsubarraysum#minsubarraysum(List)} method.
			* It checks the minimum sum of any non-empty sub-array of nums.
			*/
			@Test
			void testMinSubArraySum10() {
				List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
				long result = Minsubarraysum.minsubarraysum(nums);
				assertEquals(1, result);
			}
}
"
cmpl-A4Pu9iXl06WGSIgnw0QTx54ivnnEl,/HumanEvalJava/src/main/java/scenario2/id_79.java,10.044183015823364,stop,"// DecimalToBinary.java
package scenario2;

class DecimalToBinary {

    /**
     * You will be given a number in decimal form and your task is to convert it to
     * binary format. The function should return a string, with each character representing a binary
     * number. Each character in the string will be '0' or '1'.
     *
     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.
     * The extra characters are there to help with the format.
     */
    public static String decimalToBinary(int decimal) {
        String binary = """";
        if (decimal == 0) {
            return ""db0db"";
        }
        while (decimal > 0) {
            binary = (decimal % 2) + binary;
            decimal = decimal / 2;
        }
        return ""db"" + binary + ""db"";
    }
}
","// DecimalToBinaryTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {","// DecimalToBinaryTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
	/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db0db"" when the input is 0.
			*/
			@Test
			void testDecimalToBinaryWithZero() {
						assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db1db"" when the input is 1.
			*/
			@Test
			void testDecimalToBinaryWithOne() {
						assertEquals(""db1db"", DecimalToBinary.decimalToBinary(1));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db10db"" when the input is 2.
			*/
			@Test
			void testDecimalToBinaryWithTwo() {
						assertEquals(""db10db"", DecimalToBinary.decimalToBinary(2));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db11db"" when the input is 3.
			*/
			@Test
			void testDecimalToBinaryWithThree() {
						assertEquals(""db11db"", DecimalToBinary.decimalToBinary(3));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db100db"" when the input is 4.
			*/
			@Test
			void testDecimalToBinaryWithFour() {
						assertEquals(""db100db"", DecimalToBinary.decimalToBinary(4));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db101db"" when the input is 5.
			*/
			@Test
			void testDecimalToBinaryWithFive() {
						assertEquals(""db101db"", DecimalToBinary.decimalToBinary(5));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db110db"" when the input is 6.
			*/
			@Test
			void testDecimalToBinaryWithSix() {
						assertEquals(""db110db"", DecimalToBinary.decimalToBinary(6));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db111db"" when the input is 7.
			*/
			@Test
			void testDecimalToBinaryWithSeven() {
						assertEquals(""db111db"", DecimalToBinary.decimalToBinary(7));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db1000db"" when the input is 8.
			*/
			@Test
			void testDecimalToBinaryWithEight() {
						assertEquals(""db1000db"", DecimalToBinary.decimalToBinary(8));
			}

			/**
			* Test case for the {@link DecimalToBinary#decimalToBinary(int)} method.
			* The method should return ""db1001db"" when the input is 9.
			*/
			@Test
			void testDecimalToBinaryWithNine() {
						assertEquals(""db1001db"", DecimalToBinary.decimalToBinary(9));
			}
}
"
cmpl-A4PvCjayxsErFf5gzx2sGw0z9k3K7,/HumanEvalJava/src/main/java/scenario2/id_96.java,8.89889144897461,stop,"// CountUpTo.java
package scenario2;

import java.util.ArrayList;
import java.util.List;

class CountUpTo {

    /**
     * Implement a function that takes an non-negative integer and returns an array of the first n
     * integers that are prime numbers and less than n.
     */
    public static List<Object> countUpTo(int n) {
        List<Object> result = new ArrayList<Object>();
        int i = 2;
        while (i < n) {
            if (isPrime(i)) {
                result.add(i);
            }
            i++;
        }
        return result;
    }

    private static boolean isPrime(int n) {
        int i = 2;
        while (i < n) {
            if (n % i == 0) {
                return false;
            }
            i++;
        }
        return true;
    }
}
","// CountUpToTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {","// CountUpToTest.java
package scenario2;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {
	// Test case 1: n = 0
			@Test
			void testCountUpTo1() {
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = CountUpTo.countUpTo(0);
				assertEquals(expected, actual);
			}
			
			// Test case 2: n = 1
			@Test
			void testCountUpTo2() {
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = CountUpTo.countUpTo(1);
				assertEquals(expected, actual);
			}
			
			// Test case 3: n = 2
			@Test
			void testCountUpTo3() {
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = CountUpTo.countUpTo(2);
				assertEquals(expected, actual);
			}
			
			// Test case 4: n = 3
			@Test
			void testCountUpTo4() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				List<Object> actual = CountUpTo.countUpTo(3);
				assertEquals(expected, actual);
			}
			
			// Test case 5: n = 4
			@Test
			void testCountUpTo5() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				List<Object> actual = CountUpTo.countUpTo(4);
				assertEquals(expected, actual);
			}
			
			// Test case 6: n = 5
			@Test
			void testCountUpTo6() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(3);
				List<Object> actual = CountUpTo.countUpTo(5);
				assertEquals(expected, actual);
			}
			
			// Test case 7: n = 6
			@Test
			void testCountUpTo7() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(3);
				List<Object> actual = CountUpTo.countUpTo(6);
				assertEquals(expected, actual);
			}
			
			// Test case 8: n = 7
			@Test
			void testCountUpTo8() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(3);
				expected.add(5);
				List<Object> actual = CountUpTo.countUpTo(7);
				assertEquals(expected, actual);
			}
			
			// Test case 9: n = 8
			@Test
			void testCountUpTo9() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(3);
				expected.add(5);
				List<Object> actual = CountUpTo.countUpTo(8);
				assertEquals(expected, actual);
			}
			
			// Test case 10: n = 9
			@Test
			void testCountUpTo10() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(2);
				expected.add(3);
				expected.add(5);
				List<Object> actual = CountUpTo.countUpTo(9);
				assertEquals(expected, actual);
			}
}"
cmpl-A4PwFIGYz17u3HKp818ByownIi4sK,/HumanEvalJava/src/main/java/scenario2/id_143.java,7.785255432128906,stop,"// WordsInSentence.java
package scenario2;

class WordsInSentence {

    /**
     * * You are given a string representing a sentence,
     * the sentence contains some words separated by a space,
     * and you have to return a string that contains the words from the original sentence,
     * whose lengths are prime numbers,
     * the order of the words in the new string should be the same as the original one.
     *
     * Constraints:
     * * 1 <= len(sentence) <= 100
     * * sentence contains only letters
     */
    public static String wordsInSentence(String sentence) {
        String[] words = sentence.split("" "");
        String result = """";
        for (int i = 0; i < words.length; i++) {
            if (isPrime(words[i].length())) {
                result += words[i] + "" "";
            }
        }
        return result.trim();
    }

    private static boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i < number; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// WordsInSentenceTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {","// WordsInSentenceTest.java
package scenario2;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
	@Test
			void testWordsInSentence1() {
				String sentence = ""The cat is white"";
				String expected = ""The cat"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence2() {
				String sentence = ""The dog is black"";
				String expected = ""dog"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence3() {
				String sentence = ""The bird is yellow"";
				String expected = ""bird yellow"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence4() {
				String sentence = ""The fish is red"";
				String expected = ""fish"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence5() {
				String sentence = ""The horse is brown"";
				String expected = ""horse brown"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence6() {
				String sentence = ""The cow is green"";
				String expected = ""cow green"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence7() {
				String sentence = ""The lion is orange"";
				String expected = ""lion orange"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence8() {
				String sentence = ""The tiger is purple"";
				String expected = ""tiger purple"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence9() {
				String sentence = ""The wolf is pink"";
				String expected = ""wolf pink"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}

			@Test
			void testWordsInSentence10() {
				String sentence = ""The bear is gray"";
				String expected = ""bear gray"";
				String actual = WordsInSentence.wordsInSentence(sentence);
				assertEquals(expected, actual);
			}
}
"
