ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x42PYRugJhyy6tjn2If6eg5u9D8e,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_0Test.java,163.42666053771973,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_0Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfo_0Test {","// ClassInfo_0Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfo_0Test {

		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.WindowConstants}.
		*/
		@Test
		public void testPrintFields_0() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] result = classInfo.printFields();
				assertEquals(3, result.length);
				assertEquals(""public static final int java.awt.WindowConstants.DO_NOTHING_ON_CLOSE"", result[0]);
				assertEquals(""public static final int java.awt.WindowConstants.HIDE_ON_CLOSE"", result[1]);
				assertEquals(""public static final int java.awt.WindowConstants.DISPOSE_ON_CLOSE"", result[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowAdapter}.
		*/
		@Test
		public void testPrintFields_1() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowAdapter"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintFields_2() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowFocusListener}.
		*/
		@Test
		public void testPrintFields_3() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowFocusListener"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowListener}.
		*/
		@Test
		public void testPrintFields_4() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowListener"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowStateListener}.
		*/
		@Test
		public void testPrintFields_5() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowStateListener"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowFocusEvent}.
		*/
		@Test
		public void testPrintFields_6() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowFocusEvent"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintFields_7() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowStateEvent}.
		*/
		@Test
		public void testPrintFields_8() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowStateEvent"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintFields_9() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printFields();
				assertEquals(0, result.length);
		}
}

// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.WindowConstants}.
		*/
		@Test
		public void testPrintMethods_0() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowAdapter}.
		*/
		@Test
		public void testPrintMethods_1() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowAdapter"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintMethods_2() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowFocusListener}.
		*/
		@Test
		public void testPrintMethods_3() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowFocusListener"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowListener}.
		*/
		@Test
		public void testPrintMethods_4() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowListener"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowStateListener}.
		*/
		@Test
		public void testPrintMethods_5() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowStateListener"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowFocusEvent}.
		*/
		@Test
		public void testPrintMethods_6() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowFocusEvent"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintMethods_7() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowStateEvent}.
		*/
		@Test
		public void testPrintMethods_8() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowStateEvent"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintMethods_9() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printMethods();
				assertEquals(0, result.length);
		}
}

// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_2Test {
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.WindowConstants}.
		*/
		@Test
		public void testPrintConstructors_0() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] result = classInfo.printConstructors();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.event.WindowAdapter}.
		*/
		@Test
		public void testPrintConstructors_1() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowAdapter"");
				String[] result = classInfo.printConstructors();
				assertEquals(1, result.length);
				assertEquals(""public java.awt.event.WindowAdapter()"", result[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.event.WindowEvent}.
		*/
		@Test
		public void testPrintConstructors_2() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowEvent"");
				String[] result = classInfo.printConstructors();
				assertEquals(1, result.length);
				assertEquals(""public java.awt.event.WindowEvent(java.awt.Window,int,java.awt.Window,int,int)"", result[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.event.WindowFocusListener}.
		*/
		@Test
		public void testPrintConstructors_3() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowFocusListener"");
				String[] result = classInfo.printConstructors();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.event.WindowListener}.
		*/
		@Test
		public void testPrintConstructors_4() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowListener"");
				String[] result = classInfo.printConstructors();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt.event.WindowStateListener}.
		*/
		@Test
		public void testPrintConstructors_5() throws Exception {
				ClassInfo classInfo = new ClassInfo(""java.awt.event.WindowStateListener"");
				String[] result = classInfo.printConstructors();
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with the class {@link java.awt"
cmpl-6x452rgNm3bkmSDqw8sympBIaTeFx,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_1Test.java,176.4727053642273,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {","// ClassInfo_1Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_1Test {

		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has no methods.
		*/
		@Test
		void testPrintMethods_1() {
				ClassInfo ci = new ClassInfo(""java.lang.Object"");
				String[] methods = ci.printMethods();
				assertEquals(0, methods.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has one method.
		*/
		@Test
		void testPrintMethods_2() {
				ClassInfo ci = new ClassInfo(""java.lang.String"");
				String[] methods = ci.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public java.lang.String java.lang.String.toString()"", methods[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has two methods.
		*/
		@Test
		void testPrintMethods_3() {
				ClassInfo ci = new ClassInfo(""java.lang.StringBuffer"");
				String[] methods = ci.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)"", methods[0]);
				assertEquals(""public java.lang.String java.lang.StringBuffer.toString()"", methods[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has three methods.
		*/
		@Test
		void testPrintMethods_4() {
				ClassInfo ci = new ClassInfo(""java.lang.StringBuilder"");
				String[] methods = ci.printMethods();
				assertEquals(3, methods.length);
				assertEquals(""public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)"", methods[0]);
				assertEquals(""public java.lang.String java.lang.StringBuilder.toString()"", methods[1]);
				assertEquals(""public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)"", methods[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has four methods.
		*/
		@Test
		void testPrintMethods_5() {
				ClassInfo ci = new ClassInfo(""java.lang.StringTokenizer"");
				String[] methods = ci.printMethods();
				assertEquals(4, methods.length);
				assertEquals(""public java.lang.String java.lang.StringTokenizer.nextToken()"", methods[0]);
				assertEquals(""public boolean java.lang.StringTokenizer.hasMoreTokens()"", methods[1]);
				assertEquals(""public int java.lang.StringTokenizer.countTokens()"", methods[2]);
				assertEquals(""public java.lang.String java.lang.StringTokenizer.nextToken(java.lang.String)"", methods[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has five methods.
		*/
		@Test
		void testPrintMethods_6() {
				ClassInfo ci = new ClassInfo(""java.lang.System"");
				String[] methods = ci.printMethods();
				assertEquals(5, methods.length);
				assertEquals(""public static void java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"", methods[0]);
				assertEquals(""public static long java.lang.System.currentTimeMillis()"", methods[1]);
				assertEquals(""public static void java.lang.System.exit(int)"", methods[2]);
				assertEquals(""public static java.io.PrintStream java.lang.System.out"", methods[3]);
				assertEquals(""public static java.io.PrintStream java.lang.System.err"", methods[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has six methods.
		*/
		@Test
		void testPrintMethods_7() {
				ClassInfo ci = new ClassInfo(""java.lang.Thread"");
				String[] methods = ci.printMethods();
				assertEquals(6, methods.length);
				assertEquals(""public void java.lang.Thread.start()"", methods[0]);
				assertEquals(""public void java.lang.Thread.run()"", methods[1]);
				assertEquals(""public void java.lang.Thread.stop()"", methods[2]);
				assertEquals(""public void java.lang.Thread.suspend()"", methods[3]);
				assertEquals(""public void java.lang.Thread.resume()"", methods[4]);
				assertEquals(""public void java.lang.Thread.setPriority(int)"", methods[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has seven methods.
		*/
		@Test
		void testPrintMethods_8() {
				ClassInfo ci = new ClassInfo(""java.lang.Throwable"");
				String[] methods = ci.printMethods();
				assertEquals(7, methods.length);
				assertEquals(""public java.lang.String java.lang.Throwable.toString()"", methods[0]);
				assertEquals(""public void java.lang.Throwable.printStackTrace()"", methods[1]);
				assertEquals(""public void java.lang.Throwable.printStackTrace(java.io.PrintStream)"", methods[2]);
				assertEquals(""public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)"", methods[3]);
				assertEquals(""public java.lang.Throwable java.lang.Throwable.fillInStackTrace()"", methods[4]);
				assertEquals(""public java.lang.Throwable java.lang.Throwable.getCause()"", methods[5]);
				assertEquals(""public java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)"", methods[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has eight methods.
		*/
		@Test
		void testPrintMethods_9() {
				ClassInfo ci = new ClassInfo(""java.lang.Void"");
				String[] methods = ci.printMethods();
				assertEquals(8, methods.length);
				assertEquals(""public static java.lang.Class java.lang.Void.TYPE"", methods[0]);
				assertEquals(""public static java.lang.Class java.lang.Void.getPrimitiveClass(java.lang.String)"", methods[1]);
				assertEquals(""public static java.lang.Class java.lang.Void.getWrapperClass(java.lang.Class)"", methods[2]);
				assertEquals(""public static java.lang.Class java.lang.Void.getWrapperClass(java.lang.String)"", methods[3]);
				assertEquals(""public static java.lang.Class java.lang.Void.getPrimitiveClass(java.lang.Class)"", methods[4]);
				assertEquals(""public static java.lang.Class java.lang.Void.getPrimitiveClassOrNull(java.lang.String)"", methods[5]);
				assertEquals(""public static java.lang.Class java.lang.Void.getWrapperClassOrNull(java.lang.String)"", methods[6]);
				assertEquals(""public static java.lang.Class java.lang.Void.getWrapperClassOrNull(java.lang.Class)"", methods[7]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has nine methods.
		*/
		@Test
		void testPrintMethods_10() {
				ClassInfo ci = new ClassInfo(""java.lang.Math"");
				String[] methods = ci.printMethods();
				assertEquals(9, methods.length);
				assertEquals(""public static double java.lang.Math.sin(double)"", methods[0]);
				assertEquals(""public static double java.lang.Math.cos(double)"", methods[1]);
				assertEquals(""public static double java.lang.Math.tan(double)"", methods[2]);
				assertEquals(""public static double java.lang.Math.asin(double)"", methods[3]);
				assertEquals(""public static double java.lang.Math.acos(double)"", methods[4]);
				assertEquals(""public static double java.lang.Math.atan(double)"", methods[5]);
				assertEquals(""public static double java.lang.Math.toRadians(double)"", methods[6]);
				assertEquals(""public static double java.lang.Math.toDegrees(double)"", methods[7]);
				assertEquals(""public static double java.lang.Math.exp(double)"", methods[8]);
		}
}

// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has no methods.
		*/
		@Test
		void testPrintMethods_1() {
				ClassInfo ci = new ClassInfo(""java.lang.Object"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(0, methods.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has one method.
		*/
		@Test
		void testPrintMethods_2() {
				ClassInfo ci = new ClassInfo(""java.lang.String"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(1, methods.length);
				assertEquals(""public java.lang.String java.lang.String.toString()"", methods[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has two methods.
		*/
		@Test
		void testPrintMethods_3() {
				ClassInfo ci = new ClassInfo(""java.lang.StringBuffer"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(2, methods.length);
				assertEquals(""public java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)"", methods[0]);
				assertEquals(""public java.lang.String java.lang.StringBuffer.toString()"", methods[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has three methods.
		*/
		@Test
		void testPrintMethods_4() {
				ClassInfo ci = new ClassInfo(""java.lang.StringBuilder"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(3, methods.length);
				assertEquals(""public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)"", methods[0]);
				assertEquals(""public java.lang.String java.lang.StringBuilder.toString()"", methods[1]);
				assertEquals(""public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)"", methods[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has four methods.
		*/
		@Test
		void testPrintMethods_5() {
				ClassInfo ci = new ClassInfo(""java.lang.StringTokenizer"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(4, methods.length);
				assertEquals(""public java.lang.String java.lang.StringTokenizer.nextToken()"", methods[0]);
				assertEquals(""public boolean java.lang.StringTokenizer.hasMoreTokens()"", methods[1]);
				assertEquals(""public int java.lang.StringTokenizer.countTokens()"", methods[2]);
				assertEquals(""public java.lang.String java.lang.StringTokenizer.nextToken(java.lang.String)"", methods[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has five methods.
		*/
		@Test
		void testPrintMethods_6() {
				ClassInfo ci = new ClassInfo(""java.lang.System"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(5, methods.length);
				assertEquals(""public static void java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"", methods[0]);
				assertEquals(""public static long java.lang.System.currentTimeMillis()"", methods[1]);
				assertEquals(""public static void java.lang.System.exit(int)"", methods[2]);
				assertEquals(""public static java.io.PrintStream java.lang.System.out"", methods[3]);
				assertEquals(""public static java.io.PrintStream java.lang.System.err"", methods[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has six methods.
	"
cmpl-6x49XcekB2Uv9VRvhVm1fNT1EFgrm,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_2Test.java,235.09881472587585,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {","// ClassInfo_2Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_2Test {

		private ClassInfo ci;
		
		@Test
		void testPrintMethods_1() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_2() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_3() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_4() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_5() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_6() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_7() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_8() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_9() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_10() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
}

// ClassInfo_3Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_3Test {
		
		private ClassInfo ci;
		
		@Test
		void testPrintMethods_1() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_2() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_3() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_4() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_5() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_6() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_7() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_8() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_9() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_10() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
}

// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_4Test {
		
		private ClassInfo ci;
		
		@Test
		void testPrintMethods_1() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_2() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_3() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_4() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_5() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_6() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_7() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_8() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_9() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_10() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
}

// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfo_5Test {
		
		private ClassInfo ci;
		
		@Test
		void testPrintMethods_1() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_2() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_3() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_4() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_5() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_6() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_7() {
				ci = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods"
cmpl-6x4BgfICrG0cRke0krvQ0b9tu8wWa,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_3Test.java,140.48041605949402,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_3Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_3Test {","// ClassInfo_3Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_3Test {

		private ClassInfo classInfo;
		
		@Test
		void testPrintConstructors_1() throws Exception {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_2() throws Exception {
				classInfo = new ClassInfo(""java.awt.Window"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(2, constructors.length);
		}
		
		@Test
		void testPrintConstructors_3() throws Exception {
				classInfo = new ClassInfo(""java.awt.Frame"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(3, constructors.length);
		}
		
		@Test
		void testPrintConstructors_4() throws Exception {
				classInfo = new ClassInfo(""java.awt.Dialog"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(3, constructors.length);
		}
		
		@Test
		void testPrintConstructors_5() throws Exception {
				classInfo = new ClassInfo(""java.awt.FileDialog"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(3, constructors.length);
		}
		
		@Test
		void testPrintConstructors_6() throws Exception {
				classInfo = new ClassInfo(""java.awt.Color"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(11, constructors.length);
		}
		
		@Test
		void testPrintConstructors_7() throws Exception {
				classInfo = new ClassInfo(""java.awt.Font"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(6, constructors.length);
		}
		
		@Test
		void testPrintConstructors_8() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_9() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics2D"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_10() throws Exception {
				classInfo = new ClassInfo(""java.awt.GraphicsEnvironment"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(1, constructors.length);
		}
}

// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testPrintInterfaces_1() throws Exception {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_2() throws Exception {
				classInfo = new ClassInfo(""java.awt.Window"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_3() throws Exception {
				classInfo = new ClassInfo(""java.awt.Frame"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_4() throws Exception {
				classInfo = new ClassInfo(""java.awt.Dialog"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_5() throws Exception {
				classInfo = new ClassInfo(""java.awt.FileDialog"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_6() throws Exception {
				classInfo = new ClassInfo(""java.awt.Color"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_7() throws Exception {
				classInfo = new ClassInfo(""java.awt.Font"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_8() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_9() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics2D"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_10() throws Exception {
				classInfo = new ClassInfo(""java.awt.GraphicsEnvironment"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
}

// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getClassName()} method.
*/
class ClassInfo_5Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testGetClassName_1() throws Exception {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.WindowConstants"", className);
		}
		
		@Test
		void testGetClassName_2() throws Exception {
				classInfo = new ClassInfo(""java.awt.Window"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Window"", className);
		}
		
		@Test
		void testGetClassName_3() throws Exception {
				classInfo = new ClassInfo(""java.awt.Frame"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Frame"", className);
		}
		
		@Test
		void testGetClassName_4() throws Exception {
				classInfo = new ClassInfo(""java.awt.Dialog"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Dialog"", className);
		}
		
		@Test
		void testGetClassName_5() throws Exception {
				classInfo = new ClassInfo(""java.awt.FileDialog"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.FileDialog"", className);
		}
		
		@Test
		void testGetClassName_6() throws Exception {
				classInfo = new ClassInfo(""java.awt.Color"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Color"", className);
		}
		
		@Test
		void testGetClassName_7() throws Exception {
				classInfo = new ClassInfo(""java.awt.Font"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Font"", className);
		}
		
		@Test
		void testGetClassName_8() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Graphics"", className);
		}
		
		@Test
		void testGetClassName_9() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics2D"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.Graphics2D"", className);
		}
		
		@Test
		void testGetClassName_10() throws Exception {
				classInfo = new ClassInfo(""java.awt.GraphicsEnvironment"");
				String className = classInfo.getClassName();
				assertEquals(""java.awt.GraphicsEnvironment"", className);
		}
}

// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getClassPackage()} method.
*/
class ClassInfo_6Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testGetClassPackage_1() throws Exception {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_2() throws Exception {
				classInfo = new ClassInfo(""java.awt.Window"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_3() throws Exception {
				classInfo = new ClassInfo(""java.awt.Frame"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_4() throws Exception {
				classInfo = new ClassInfo(""java.awt.Dialog"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_5() throws Exception {
				classInfo = new ClassInfo(""java.awt.FileDialog"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_6() throws Exception {
				classInfo = new ClassInfo(""java.awt.Color"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_7() throws Exception {
				classInfo = new ClassInfo(""java.awt.Font"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_8() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_9() throws Exception {
				classInfo = new ClassInfo(""java.awt.Graphics2D"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
		
		@Test
		void testGetClassPackage_10() throws Exception {
				classInfo = new ClassInfo(""java.awt.GraphicsEnvironment"");
				String classPackage = classInfo.getClassPackage();
				assertEquals(""java.awt"", classPackage);
		}
}

// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getSuperClassName()} method.
*/
class ClassInfo_7Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testGetSuperClassName_1() throws Exception {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String superClassName = classInfo.getSuperClassName();
				assertEquals(""java.lang.Object"", superClassName);
		}
		
		@Test
		void testGetSuperClassName_2() throws Exception {
				classInfo = new ClassInfo(""java.awt.Window"");
				String superClassName = classInfo.getSuperClassName();
				assertEqu"
cmpl-6x4DwTmc1TKJLCOTfrgFDjrzmOVDv,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_4Test.java,161.34219574928284,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {","// ClassInfo_4Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfo_4Test {

		private ClassInfo classInfo;
		
		@Test
		void testPrintInterfaces_1() {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_2() {
				classInfo = new ClassInfo(""java.awt.event.ActionListener"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.util.EventListener"", interfaces[0]);
		}
		
		@Test
		void testPrintInterfaces_3() {
				classInfo = new ClassInfo(""java.awt.event.ActionEvent"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_4() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentListener"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.util.EventListener"", interfaces[0]);
		}
		
		@Test
		void testPrintInterfaces_5() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentEvent"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_6() {
				classInfo = new ClassInfo(""java.awt.event.ComponentListener"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.util.EventListener"", interfaces[0]);
		}
		
		@Test
		void testPrintInterfaces_7() {
				classInfo = new ClassInfo(""java.awt.event.ComponentEvent"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_8() {
				classInfo = new ClassInfo(""java.awt.event.ContainerListener"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.util.EventListener"", interfaces[0]);
		}
		
		@Test
		void testPrintInterfaces_9() {
				classInfo = new ClassInfo(""java.awt.event.ContainerEvent"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		@Test
		void testPrintInterfaces_10() {
				classInfo = new ClassInfo(""java.awt.event.FocusListener"");
				String[] interfaces = classInfo.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.util.EventListener"", interfaces[0]);
		}
}

// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfo_5Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testPrintConstructors_1() {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_2() {
				classInfo = new ClassInfo(""java.awt.event.ActionListener"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_3() {
				classInfo = new ClassInfo(""java.awt.event.ActionEvent"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(1, constructors.length);
				assertEquals(""public java.awt.event.ActionEvent(java.awt.Event)"", constructors[0]);
		}
		
		@Test
		void testPrintConstructors_4() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentListener"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_5() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentEvent"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(1, constructors.length);
				assertEquals(""public java.awt.event.AdjustmentEvent(java.awt.Adjustable,int,int,int)"", constructors[0]);
		}
		
		@Test
		void testPrintConstructors_6() {
				classInfo = new ClassInfo(""java.awt.event.ComponentListener"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_7() {
				classInfo = new ClassInfo(""java.awt.event.ComponentEvent"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(1, constructors.length);
				assertEquals(""public java.awt.event.ComponentEvent(java.awt.Component,int)"", constructors[0]);
		}
		
		@Test
		void testPrintConstructors_8() {
				classInfo = new ClassInfo(""java.awt.event.ContainerListener"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
		
		@Test
		void testPrintConstructors_9() {
				classInfo = new ClassInfo(""java.awt.event.ContainerEvent"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(1, constructors.length);
				assertEquals(""public java.awt.event.ContainerEvent(java.awt.Component,int,java.awt.Component)"", constructors[0]);
		}
		
		@Test
		void testPrintConstructors_10() {
				classInfo = new ClassInfo(""java.awt.event.FocusListener"");
				String[] constructors = classInfo.printConstructors();
				assertEquals(0, constructors.length);
		}
}

// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfo_6Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testPrintMethods_1() {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] methods = classInfo.printMethods();
				assertEquals(0, methods.length);
		}
		
		@Test
		void testPrintMethods_2() {
				classInfo = new ClassInfo(""java.awt.event.ActionListener"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public abstract void java.awt.event.ActionListener.actionPerformed(java.awt.event.ActionEvent)"", methods[0]);
		}
		
		@Test
		void testPrintMethods_3() {
				classInfo = new ClassInfo(""java.awt.event.ActionEvent"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public java.lang.String java.awt.event.ActionEvent.getActionCommand()"", methods[0]);
		}
		
		@Test
		void testPrintMethods_4() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentListener"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public abstract void java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)"", methods[0]);
		}
		
		@Test
		void testPrintMethods_5() {
				classInfo = new ClassInfo(""java.awt.event.AdjustmentEvent"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public int java.awt.event.AdjustmentEvent.getValue()"", methods[0]);
		}
		
		@Test
		void testPrintMethods_6() {
				classInfo = new ClassInfo(""java.awt.event.ComponentListener"");
				String[] methods = classInfo.printMethods();
				assertEquals(4, methods.length);
				assertEquals(""public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)"", methods[0]);
				assertEquals(""public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)"", methods[1]);
				assertEquals(""public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)"", methods[2]);
				assertEquals(""public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)"", methods[3]);
		}
		
		@Test
		void testPrintMethods_7() {
				classInfo = new ClassInfo(""java.awt.event.ComponentEvent"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public java.awt.Component java.awt.event.ComponentEvent.getComponent()"", methods[0]);
		}
		
		@Test
		void testPrintMethods_8() {
				classInfo = new ClassInfo(""java.awt.event.ContainerListener"");
				String[] methods = classInfo.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public abstract void java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent)"", methods[0]);
				assertEquals(""public abstract void java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent)"", methods[1]);
		}
		
		@Test
		void testPrintMethods_9() {
				classInfo = new ClassInfo(""java.awt.event.ContainerEvent"");
				String[] methods = classInfo.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public java.awt.Component java.awt.event.ContainerEvent.getChild()"", methods[0]);
		}
		
		@Test
		void testPrintMethods_10() {
				classInfo = new ClassInfo(""java.awt.event.FocusListener"");
				String[] methods = classInfo.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public abstract void java.awt.event.FocusListener.focusGained(java.awt.event.FocusEvent)"", methods[0]);
				assertEquals(""public abstract void java.awt.event.FocusListener.focusLost(java.awt.event.FocusEvent)"", methods[1]);
		}
}

// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfo_7Test {
		
		private ClassInfo classInfo;
		
		@Test
		void testPrintFields_1() {
				classInfo = new ClassInfo(""java.awt.WindowConstants"");
				String[] fields = classInfo.printFields();
				assertEquals(3, fields.length);
				assertEquals(""public static final int java.awt.WindowConstants.DO_NOTHING_ON_CLOSE"", fields[0]);
				assertEquals(""public static final int java.awt.WindowConstants.HIDE_ON_CLOSE"", fields[1]);
				assertEquals(""public static final int java.awt.WindowConstants.DISPOSE_ON_CLOSE"", fields[2]);
		}
		
		@Test
		void testPrintFields_2() {
				classInfo = new ClassInfo(""java.awt.event.ActionListener"");
				String[] fields = classInfo.printFields();
				assertEquals(0, fields.length);
		}
		
		@Test
		void testPrintFields_3() {
				classInfo = new ClassInfo(""java.awt.event.ActionEvent"");
				String[] fields = classInfo.printFields();
				assertEquals(1, fields.length);
				assertEquals(""public static final int java.awt.event.ActionEvent.ACTION_PERFORMED"", fields[0]);
		}
		
		@Test
		void testPrintFields_4() {"
cmpl-6x4GYzYZ2l52G31e1vEcuPjxo90p3,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_5Test.java,134.82754945755005,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_5Test {","// ClassInfo_5Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_5Test {

		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with a null array.
		*/
		@Test
		public void testGetData_1() {
				Member[] m = null;
				String[] result = ClassInfo.getData(m);
				assertNull(result);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an empty array.
		*/
		@Test
		public void testGetData_2() {
				Member[] m = new Member[0];
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of one element.
		*/
		@Test
		public void testGetData_3() {
				Member[] m = new Member[1];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(1, result.length);
				assertEquals(""test"", result[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of two elements.
		*/
		@Test
		public void testGetData_4() {
				Member[] m = new Member[2];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[1] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test2"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(2, result.length);
				assertEquals(""test"", result[0]);
				assertEquals(""test2"", result[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of three elements.
		*/
		@Test
		public void testGetData_5() {
				Member[] m = new Member[3];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[1] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test2"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[2] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test3"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(3, result.length);
				assertEquals(""test"", result[0]);
				assertEquals(""test2"", result[1]);
				assertEquals(""test3"", result[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of four elements.
		*/
		@Test
		public void testGetData_6() {
				Member[] m = new Member[4];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[1] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test2"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[2] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test3"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[3] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test4"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(4, result.length);
				assertEquals(""test"", result[0]);
				assertEquals(""test2"", result[1]);
				assertEquals(""test3"", result[2]);
				assertEquals(""test4"", result[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of five elements.
		*/
		@Test
		public void testGetData_7() {
				Member[] m = new Member[5];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[1] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test2"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[2] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test3"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[3] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test4"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[4] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test5"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				String[] result = ClassInfo.getData(m);
				assertNotNull(result);
				assertEquals(5, result.length);
				assertEquals(""test"", result[0]);
				assertEquals(""test2"", result[1]);
				assertEquals(""test3"", result[2]);
				assertEquals(""test4"", result[3]);
				assertEquals(""test5"", result[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#getData(Member[])} method.
		* It tests the method with an array of six elements.
		*/
		@Test
		public void testGetData_8() {
				Member[] m = new Member[6];
				m[0] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[1] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test2"";
						}
						public int getModifiers() {
								return 0;
						}
						public boolean isSynthetic() {
								return false;
						}
				};
				m[2] = new Member() {
						public Class<?> getDeclaringClass() {
								return null;
						}
						public String getName() {
								return ""test3"";
						}
						public int getModifiers()"
cmpl-6x4IjgJpB3R8kfT6B1vdf4i0XIIoU,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_6Test.java,127.37348175048828,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfo_6Test {","// ClassInfo_6Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfo_6Test {

	@Test
	void testGetData_1() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.String.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.String"", s[0]);
	}
	
	@Test
	void testGetData_2() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Integer.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Integer"", s[0]);
	}
	
	@Test
	void testGetData_3() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Double.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Double"", s[0]);
	}
	
	@Test
	void testGetData_4() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Float.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Float"", s[0]);
	}
	
	@Test
	void testGetData_5() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Boolean.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Boolean"", s[0]);
	}
	
	@Test
	void testGetData_6() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Character.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Character"", s[0]);
	}
	
	@Test
	void testGetData_7() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Byte.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Byte"", s[0]);
	}
	
	@Test
	void testGetData_8() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Short.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Short"", s[0]);
	}
	
	@Test
	void testGetData_9() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Long.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Long"", s[0]);
	}
	
	@Test
	void testGetData_10() {
		ClassInfo ci = new ClassInfo();
		Class[] c = new Class[1];
		c[0] = java.lang.Void.class;
		String[] s = ClassInfo.getData(c);
		assertEquals(""class java.lang.Void"", s[0]);
	}
}

// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_7Test {
		
	@Test
	void testGetData_1() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.String.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.String"", s[0]);
	}
	
	@Test
	void testGetData_2() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Integer.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Integer"", s[0]);
	}
	
	@Test
	void testGetData_3() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Double.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Double"", s[0]);
	}
	
	@Test
	void testGetData_4() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Float.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Float"", s[0]);
	}
	
	@Test
	void testGetData_5() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Boolean.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Boolean"", s[0]);
	}
	
	@Test
	void testGetData_6() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Character.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Character"", s[0]);
	}
	
	@Test
	void testGetData_7() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Byte.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Byte"", s[0]);
	}
	
	@Test
	void testGetData_8() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Short.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Short"", s[0]);
	}
	
	@Test
	void testGetData_9() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Long.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Long"", s[0]);
	}
	
	@Test
	void testGetData_10() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Void.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Void"", s[0]);
	}
}

// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_8Test {
		
	@Test
	void testGetData_1() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.String.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.String"", s[0]);
	}
	
	@Test
	void testGetData_2() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Integer.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Integer"", s[0]);
	}
	
	@Test
	void testGetData_3() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Double.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Double"", s[0]);
	}
	
	@Test
	void testGetData_4() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Float.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Float"", s[0]);
	}
	
	@Test
	void testGetData_5() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Boolean.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Boolean"", s[0]);
	}
	
	@Test
	void testGetData_6() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Character.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Character"", s[0]);
	}
	
	@Test
	void testGetData_7() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Byte.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Byte"", s[0]);
	}
	
	@Test
	void testGetData_8() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Short.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Short"", s[0]);
	}
	
	@Test
	void testGetData_9() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Long.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Long"", s[0]);
	}
	
	@Test
	void testGetData_10() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Void.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Void"", s[0]);
	}
}

// ClassInfo_9Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfo_9Test {
		
	@Test
	void testGetData_1() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.String.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.String"", s[0]);
	}
	
	@Test
	void testGetData_2() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Integer.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Integer"", s[0]);
	}
	
	@Test
	void testGetData_3() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Double.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Double"", s[0]);
	}
	
	@Test
	void testGetData_4() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Float.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Float"", s[0]);
	}
	
	@Test
	void testGetData_5() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Boolean.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Boolean"", s[0]);
	}
	
	@Test
	void testGetData_6() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Character.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Character"", s[0]);
	}
	
	@Test
	void testGetData_7() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Byte.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Byte"", s[0]);
	}
	
	@Test
	void testGetData_8() {
		ClassInfo ci = new ClassInfo();
		Member[] m = new Member[1];
		m[0] = java.lang.Short.class;
		String[] s = ClassInfo.getData(m);
		assertEquals(""class java.lang.Short"", s[0]);
	}
	
"
cmpl-6x4KmBN1P5qpZdWqfSp84tN8azXWX,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_7Test.java,143.80340337753296,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfo_7Test {","// ClassInfo_7Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfo_7Test {

	@Test
	void test_srchMethods_1() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods("""");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_2() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""a"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_3() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""ab"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_4() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abc"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_5() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcd"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_6() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcde"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_7() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdef"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_8() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefg"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_9() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefgh"");
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_10() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefghi"");
		assertEquals(0, result.length);
	}
}

// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String, String[])} method.
*/
class ClassInfo_8Test {
		
	@Test
	void test_srchMethods_1() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods("""", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_2() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""a"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_3() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""ab"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_4() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abc"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_5() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcd"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_6() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcde"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_7() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdef"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_8() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefg"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_9() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefgh"", new String[0]);
		assertEquals(0, result.length);
	}
	
	@Test
	void test_srchMethods_10() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""abcdefghi"", new String[0]);
		assertEquals(0, result.length);
	}
}

// ClassInfo_9Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_9Test {
		
	@Test
	void test_getFoundMethod_1() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(0);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_2() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(1);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_3() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(2);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_4() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(3);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_5() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(4);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_6() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(5);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_7() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(6);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_8() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(7);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_9() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(8);
		assertNull(result);
	}
	
	@Test
	void test_getFoundMethod_10() {
		ClassInfo ci = new ClassInfo();
		MethodData result = ci.getFoundMethod(9);
		assertNull(result);
	}
}

// ClassInfo_10Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printArray(Object[])} method.
*/
class ClassInfo_10Test {
		
	@Test
	void test_printArray_1() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[0]);
	}
	
	@Test
	void test_printArray_2() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[1]);
	}
	
	@Test
	void test_printArray_3() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[2]);
	}
	
	@Test
	void test_printArray_4() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[3]);
	}
	
	@Test
	void test_printArray_5() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[4]);
	}
	
	@Test
	void test_printArray_6() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[5]);
	}
	
	@Test
	void test_printArray_7() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[6]);
	}
	
	@Test
	void test_printArray_8() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[7]);
	}
	
	@Test
	void test_printArray_9() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[8]);
	}
	
	@Test
	void test_printArray_10() {
		ClassInfo ci = new ClassInfo();
		ci.printArray(new Object[9]);
	}
}

// ClassInfo_11Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getClass(String)} method.
*/
class ClassInfo_11Test {
		
	@Test
	void test_getClass_1() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass("""");
		assertNull(result);
	}
	
	@Test
	void test_getClass_2() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""a"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_3() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""ab"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_4() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abc"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_5() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcd"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_6() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcde"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_7() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcdef"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_8() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcdefg"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_9() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcdefgh"");
		assertNull(result);
	}
	
	@Test
	void test_getClass_10() {
		ClassInfo ci = new ClassInfo();
		Class result = ci.getClass(""abcdefghi"");
		assertNull(result);
	}
}

// ClassInfo_12Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#tryClass(String)} method.
*/
class ClassInfo_12Test {
		
	@Test
	void test_tryClass_1() {
		Class result = ClassInfo.tryClass("""");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_2() {
		Class result = ClassInfo.tryClass(""a"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_3() {
		Class result = ClassInfo.tryClass(""ab"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_4() {
		Class result = ClassInfo.tryClass(""abc"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_5() {
		Class result = ClassInfo.tryClass(""abcd"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_6() {
		Class result = ClassInfo.tryClass(""abcde"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_7() {
		Class result = ClassInfo.tryClass(""abcdef"");
		assertNull(result);
	}
	
	@Test
	void test_tryClass_8()"
cmpl-6x4N637q55lfGcMOnMK9W6QxcWG7M,/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_8Test.java,139.72433376312256,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static boolean debug;

    private boolean statusAbstract;

    private Class c = javax.swing.WindowConstants.class;

    private DirManager dirMan;

    private static int count, length;

    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;

    private String[] cMethods, fndMethods = null;

    protected String[] knownPackages;

    public boolean isAbstract();

    public boolean isInterface();

    public String getClassName();

    public String getClassPackage();

    public String getSuperClassName();

    private ClassInfo() {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param  name the name of the class on which to get info
     */
    public ClassInfo(String name) throws ClassNotFoundException {
    }

    /**
     * Constructor for when the class name is known at creation.
     *
     * @param    name  name of class
     *           locManager    class that manages package information
     */
    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {
    }

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public fields
     */
    public String[] printFields();

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return      string array of public methods
     */
    public String[] printMethods();

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param  param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return      string array of public methods
     */
    public String[] printMethods(int param);

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of public constructors
     */
    public String[] printConstructors();

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return      string array of interfaces
     */
    public String[] printInterfaces();

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Member objects
     *
     * @return    string array of names
     */
    public static String[] getData(Member[] m);

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param  m  array of Class objects
     *
     * @return    string array of names
     */
    public static String[] getData(Class[] m);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr);

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, with a given string index, and searches
     * on the index for the fragment in them but gets method from cMethods.
     * <p>
     * This method calls searchStrings().
     *
     * @param    tempStr  string fragment with which to search
     *           index    string array that is searched through
     *
     * @return   string array of found methods
     */
    public String[] srchMethods(String tempStr, String[] index);

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param    pos  position of found methods in array 0 is first.
     *
     * @return   MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);

    /**
     * Takes any given array and prints out with System.out.println
     *
     * @param    array   an array of objects
     */
    private void printArray(Object[] array);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it tries all known packages
     * to see if any of them will work with the class name.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private Class getClass(String name);

    /**
     * Takes a given class name and tries to to find the class.
     * If the initial try does not work it returns null.
     *
     * @param    name    name of class
     *
     * @return   found Class
     */
    private static Class tryClass(String name);

    /**
     * Prints out class info with System.out.println
     */
    private void printClassInfo();

    /**
     * Main method for getting class information.
     * Prints out data with System.out.println.
     *
     * @param    args    string array for main
     */
    public static void main(String[] args) throws Exception;
}
","// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_8Test {","// ClassInfo_8Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_8Test {

	@Test
	void testGetFoundMethod_1() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(0);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_2() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(1);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_3() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(2);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_4() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(3);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_5() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(4);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_6() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(5);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_7() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(6);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_8() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(7);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_9() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(8);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_10() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(9);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
}

// ClassInfo_9Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_9Test {
		
	@Test
	void testGetFoundMethod_1() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(0);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_2() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(1);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_3() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(2);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_4() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(3);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_5() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(4);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_6() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(5);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_7() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(6);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_8() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(7);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_9() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(8);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
	
	@Test
	void testGetFoundMethod_10() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(9);
		assertEquals(""EXIT_ON_CLOSE"", methodData.getName());
		assertEquals(""int"", methodData.getReturnType());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.getFullName());
		assertEquals(""public static final int java.awt.WindowConstants.EXIT_ON_CLOSE"", methodData.toString());
	}
}

// ClassInfo_10Test.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfo_10Test {
		
	@Test
	void testGetFoundMethod_1() throws Exception {
		ClassInfo classInfo = new ClassInfo(""java.awt.WindowConstants"");
		classInfo.srchMethods(""EXIT_ON_CLOSE"");
		MethodData methodData = classInfo.getFoundMethod(0);
		assert"
