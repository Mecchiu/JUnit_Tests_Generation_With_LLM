ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xADEgfyrXOPJl9WglcEqumh6tj0q,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,71.88277411460876,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName();

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {

	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_0() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_1() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#equals(Object)} method.
*/
class EndState_1Test {
		
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_0() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_1() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_2() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_3() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_4() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_5() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_6() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_7() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_8() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*
	* @since 0.1
	*/
	@Test
	void testEquals_9() {
		EndState endState = EndState.getSingleton();
		assertTrue(endState.equals(endState));
	}
	
}

// EndState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
"
cmpl-6xAENBXCpInKKnzZOYJnsfjFR3iJo,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,83.94110059738159,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName();

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndState_1Test {

	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
}

// EndState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getName()} method.
*/
class EndState_2Test {
		
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
}

// EndState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#equals(Object)} method.
*/
class EndState_3Test {
		
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
}

// EndState_4Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#hashCode()} method.
*/
class EndState_4Test {
		
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, endState.hashCode());
	}
}

// EndState_5Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndState_5Test {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
}

// EndState_6Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#EndState()} method.
*/
class EndState_6Test {
		
	/**
	* Test case for {@link EndState#EndState()}.
	*/
	@Test
	void testEndState() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
}

// EndState_7Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#EndState()} method.
*/
class EndState_7Test {
		
	/**
	* Test case for {@link EndState#EndState()}.
	*/
	@Test
	void testEndState() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
}

// EndState_8Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#EndState()} method.
*/
class EndState_8Test {
		
	/**
	* Test case for {@link EndState#EndState()}.
	*/
	@Test
	void testEndState() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
}

// EndState_9Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#EndState()} method.
*/
class EndState_9Test {
		
	/**
	* Test case for {@link EndState#EndState()}.
	*/
	@Test
	void testEndState() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
}

// EndState_10Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#EndState()} method.
*/
class EndState_10Test {
		
	/**
	* Test case for {@link EndState#EndState()}.
	*/
	@Test
	void testEndState() {
		EndState endState = EndState"
cmpl-6xAFjQGjGSUZj58ySv5EPQC3SXpMC,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,83.47691869735718,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {

	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_0() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_1() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
}

// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getName()} method.
*/
class StartState_1Test {
		
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_0() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_1() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_2() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_3() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_4() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_5() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_6() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_7() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_8() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetName_9() {
		StartState fixture = StartState.getSingleton();
		String result = fixture.getName();
		assertNotNull(result);
	}
	
}

// StartState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import"
cmpl-6xAH508CgKoA7PLiIqGqf0XOppNev,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,67.50445079803467,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartState_1Test {

	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
}

// StartState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getName()} method.
*/
class StartState_2Test {
		
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""uk.me.jockmacmad.jstate.state.StartState"", name);
	}
}

// StartState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#equals(Object)} method.
*/
class StartState_3Test {
		
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		boolean equals = startState.equals(object);
		assertTrue(equals);
	}
}

// StartState_4Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#hashCode()} method.
*/
class StartState_4Test {
		
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(new HashCodeBuilder(17, 37).append(startState).toHashCode(), hashCode);
	}
}

// StartState_5Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_5Test {
		
	/**
	* Test case for {@link StartState#getSingleton()}.
	*/
	@Test
	void testGetSingleton() {
		StartState startState = StartState.getSingleton();
		assertNotNull(startState);
	}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype abstract
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public abstract class State extends java.lang.Object implements IState {

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @since 0.1
     */
    private java.lang.String name;

    /**
     * Constructor for the State object
     * Creation date: (2/20/01 10:56:22 AM)
     * @since 0.1
     */
    public State();

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>State</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode();

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName();

    /**
     * Returns this State object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// State_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class State_1Test {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		State state = new State() {
		};
		Object object = state.toObject();
		assertEquals(state, object);
	}
}

// State_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#getName()} method.
*/
class State_2Test {
		
	/**
	* Test case for {@link State#getName()}.
	*/
	@Test
	void testGetName() {
		"
cmpl-6xAIAVTdWvL8MchjcIIH1eow2RpGU,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,77.6506359577179,length,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    private final java.lang.String Value;

    /**
     * StringMatchesGuardCondition constructor comment.
     */
    public StringMatchesGuardCondition(java.lang.String newStr) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:11:09 PM)
     * @return java.lang.String
     */
    public final java.lang.String getValue();

    /**
     * Returns a String that represents the value of this object.
     * @return a string representation of the receiver
     */
    @Override
    public String toString();
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: null.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Null() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(null));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: """".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_EmptyString() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: true.
	*/
	@Test
	void testEvaluate_Test() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertTrue(stringMatchesGuardCondition.evaluate(""test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""Test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_TestUpperCase() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""Test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test1"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Test1() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""test1""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""1test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_1Test() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""1test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""1test1"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_1Test1() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""1test1""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test1test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Test1Test() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""test1test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""testtest"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_TestTest() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""testtest""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""testtesttest"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_TestTestTest() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""testtesttest""));
	}
	
}

// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {
		
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: null.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Null() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(null));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: """".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_EmptyString() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: true.
	*/
	@Test
	void testEvaluate_Test() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertTrue(stringMatchesGuardCondition.evaluate(""test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""Test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_TestUpperCase() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""Test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test1"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Test1() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""test1""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""1test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_1Test() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""1test""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""1test1"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_1Test1() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		assertFalse(stringMatchesGuardCondition.evaluate(""1test1""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test1test"".
	* Expected result: false.
	*/
	@Test
	void testEval"
cmpl-6xAJQUEjH17X0agofGCSkPbSufECU,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,50.302756547927856,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard);

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode();

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent();

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString();

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {

	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is the initial state and the event is the trigger event.
	*/
	@Test
	void testTrigger_0() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(initialState, triggerEvent);
		
		// Then
		assertEquals(outcomeState, result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is the initial state and the event is not the trigger event.
	*/
	@Test
	void testTrigger_1() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(initialState, new Event(""otherEvent""));
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is not the initial state and the event is the trigger event.
	*/
	@Test
	void testTrigger_2() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(new State(""otherState""), triggerEvent);
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is not the initial state and the event is not the trigger event.
	*/
	@Test
	void testTrigger_3() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(new State(""otherState""), new Event(""otherEvent""));
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is null and the event is the trigger event.
	*/
	@Test
	void testTrigger_4() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(null, triggerEvent);
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is null and the event is not the trigger event.
	*/
	@Test
	void testTrigger_5() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(null, new Event(""otherEvent""));
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is the initial state and the event is null.
	*/
	@Test
	void testTrigger_6() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(initialState, null);
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is not the initial state and the event is null.
	*/
	@Test
	void testTrigger_7() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(new State(""otherState""), null);
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is null and the event is null.
	*/
	@Test
	void testTrigger_8() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		
		// When
		final IState result = transition.trigger(null, null);
		
		// Then
		assertNull(result);
	}
	
	/**
	* Test case for {@link Transition#trigger(IState, Event)}
	* <p>
	* Test if the transition will trigger when the current state is the initial state and the event is the trigger event and the transition has a guard condition.
	*/
	@Test
	void testTrigger_9() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event triggerEvent = new Event(""triggerEvent"");
		final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
		transition.addGuardCondition(new GuardCondition(""guardCondition"", new TruePredicate()));
		
		// When
		final IState result = transition.trigger(initialState, triggerEvent);
		
		// Then
		assertEquals(outcomeState, result);
	}
	
}

// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
"
cmpl-6xAKTSzxxPYr9vq0quzfibT35VAQ9,/EvoSuiteBenchmark/original/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,56.605751752853394,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard);

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard);

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition);

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode();

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState();

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent();

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString();

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {

	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns true when the current state and the event are the same as the initial state and the event of the transition.
	*/
	@Test
	void testWillTrigger_1() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(initialState, event);
		
		// Then
		assertTrue(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state is the same as the initial state of the transition but the event is different.
	*/
	@Test
	void testWillTrigger_2() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(initialState, new Event(""otherEvent""));
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state is different from the initial state of the transition but the event is the same.
	*/
	@Test
	void testWillTrigger_3() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(new State(""otherState""), event);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state and the event are different from the initial state and the event of the transition.
	*/
	@Test
	void testWillTrigger_4() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(new State(""otherState""), new Event(""otherEvent""));
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state is null.
	*/
	@Test
	void testWillTrigger_5() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(null, event);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the event is null.
	*/
	@Test
	void testWillTrigger_6() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(initialState, null);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state and the event are null.
	*/
	@Test
	void testWillTrigger_7() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(null, null);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state is null and the event is the same as the event of the transition.
	*/
	@Test
	void testWillTrigger_8() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(null, event);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state is the same as the initial state of the transition and the event is null.
	*/
	@Test
	void testWillTrigger_9() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(initialState, null);
		
		// Then
		assertFalse(result);
	}
	
	/**
	* Test case for {@link Transition#willTrigger(IState, Event)} method.
	* <p>
	* This test case checks if the method returns false when the current state and the event are null and the initial state and the event of the transition are null.
	*/
	@Test
	void testWillTrigger_10() {
		// Given
		final IState initialState = new State(""initialState"");
		final IState outcomeState = new State(""outcomeState"");
		final Event event = new Event(""event"");
		final Transition transition = new Transition(""transition"", event, initialState, outcomeState);
		
		// When
		final boolean result = transition.willTrigger(null, null);
		
		// Then
		assertFalse(result);
	}
}

// Transition_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.j"
