ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x4oieziy0iwvkypB7XKbaFJj6wkM,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode0.java,150.53453850746155,length,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * implements Comparable
     *
     * @param node Object
     * @return int values 0 for same and 1 for different
     */
    public int compareTo(Object node) {
        if (!type.equals(((ASTNode) node).getType()) || !identity.equals(((ASTNode) node).getIdentity())) {
            return 1;
        }
        for (int i = 0; i < list.size(); ++i) {
            try {
                if (list.get(i).compareTo(((ASTNode) node).list.get(i)) == 1) {
                    return 1;
                }
            } catch (IndexOutOfBoundsException ne) {
                return 1;
            } catch (NullPointerException np) {
                return 1;
            }
        }
        return 0;
    }
}
","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#compareTo(Object)} method.
*/
class ASTNodeTest {","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#compareTo(Object)} method.
*/
class ASTNodeTest {

	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.setType(""type2"");
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same2() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.setType(""type2"");
		node2.setType(""type"");
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different2() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.setIdentity(""identity2"");
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same3() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.setIdentity(""identity2"");
		node2.setIdentity(""identity"");
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different3() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.addChild(node1);
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same4() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different4() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same5() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different5() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same6() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different6() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.setType(""type2"");
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same7() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.setType(""type2"");
		node2.setType(""type"");
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different7() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.setIdentity(""identity2"");
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same8() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.setIdentity(""identity2"");
		node2.setIdentity(""identity"");
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different8() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same9() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		assertEquals(0, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are different.
	*/
	@Test
	void testCompareTo_Different9() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"");
		node1.addChild(node2);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.addChild(node1);
		node2.removeChild(node1);
		node2.setType(""type2"");
		assertEquals(1, node1.compareTo(node2));
	}
	
	/**
	* Test case for {@link ASTNode#compareTo(Object)} method.
	* It tests the case when the two nodes are the same.
	*/
	@Test
	void testCompareTo_Same10() {
		ASTNode node1 = new ASTNode();
		ASTNode node2 = new ASTNode();
		node1.setType(""type"");
		node2.setType(""type"");
		node1.setIdentity(""identity"");
		node2.setIdentity(""identity"
cmpl-6x4r8EjCaKPZKohGbNc0jIGOfb9O5,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode1.java,22.040008306503296,stop,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     *  reads the node in from a file
     *
     * @param filename String
     * @return ASTNode
     */
    public static ASTNode getTree(String filename) {
        ObjectInputStream rdr = null;
        ASTNode rootNode = null;
        try {
            FileInputStream flstrm = new FileInputStream(new File(filename));
            rdr = new ObjectInputStream(flstrm);
            rootNode = (ASTNode) rdr.readObject();
            rdr.close();
        } catch (java.io.IOException ie) {
        } finally {
            return rootNode;
        }
    }
}
","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.
*/
class ASTNodeTest {","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#getTree(String)} method.
*/
class ASTNodeTest {

	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a valid file name.
	*/
	@Test
	void testGetTreeValid() {
		ASTNode rootNode = ASTNode.getTree(""test.txt"");
		assertNotNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with an invalid file name.
	*/
	@Test
	void testGetTreeInvalid() {
		ASTNode rootNode = ASTNode.getTree(""test1.txt"");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a null file name.
	*/
	@Test
	void testGetTreeNull() {
		ASTNode rootNode = ASTNode.getTree(null);
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with an empty file name.
	*/
	@Test
	void testGetTreeEmpty() {
		ASTNode rootNode = ASTNode.getTree("""");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only spaces.
	*/
	@Test
	void testGetTreeSpaces() {
		ASTNode rootNode = ASTNode.getTree(""   "");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only tabs.
	*/
	@Test
	void testGetTreeTabs() {
		ASTNode rootNode = ASTNode.getTree(""\t\t\t"");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only new lines.
	*/
	@Test
	void testGetTreeNewLines() {
		ASTNode rootNode = ASTNode.getTree(""\n\n\n"");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only carriage returns.
	*/
	@Test
	void testGetTreeCarriageReturns() {
		ASTNode rootNode = ASTNode.getTree(""\r\r\r"");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only backspaces.
	*/
	@Test
	void testGetTreeBackspaces() {
		ASTNode rootNode = ASTNode.getTree(""\b\b\b"");
		assertNull(rootNode);
	}
	
	/**
	* Test case for {@link ASTNode#getTree(String)} method.
	* It tests the method with a file name that contains only form feeds.
	*/
	@Test
	void testGetTreeFormFeeds() {
		ASTNode rootNode = ASTNode.getTree(""\f\f\f"");
		assertNull(rootNode);
	}
}"
cmpl-6x4sB228k5vedWGnbMfPhgvWymqiJ,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/ASTNode2.java,100.89830279350281,length,"// ASTNode.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTNode implements Comparable, java.io.Serializable {

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     *
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree() {
        javax.swing.tree.DefaultMutableTreeNode node = new DefaultMutableTreeNode(toString());
        int arraySize = list.size();
        for (int i = 0; i < arraySize; ++i) {
            node.add(list.get(i).createTree());
        }
        return node;
    }
}
","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#createTree()} method.
*/
class ASTNodeTest {","// ASTNodeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTNode}.
* It contains ten unit test cases for the {@link ASTNode#createTree()} method.
*/
class ASTNodeTest {

	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is null.
	*/
	@Test
	void testCreateTree1() {
		ASTNode node = null;
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree2() {
		ASTNode node = new ASTNode();
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree3() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree4() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree5() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree6() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree7() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree8() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree9() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
	
	/**
	* Test case for {@link ASTNode#createTree()} method.
	* It tests the case when the node is not null.
	*/
	@Test
	void testCreateTree10() {
		ASTNode node = new ASTNode();
		node.list = new ArrayList<ASTNode>();
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		node.list.add(new ASTNode());
		DefaultMutableTreeNode tree = node.createTree();
		assertEquals(null, tree);
	}
}

// ASTree.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTree implements java.io.Serializable {

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     *
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree() {
        javax.swing.tree.DefaultMutableTreeNode node = new DefaultMutableTreeNode(toString());
        int arraySize = list.size();
        for (int i = 0; i < arraySize; ++i) {
            node.add(list.get(i).createTree());
        }
        return node;
    }
}

// ASTreeTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTree}.
* It contains ten unit test cases for the {@link ASTree#createTree()} method.
*/
class ASTreeTest {
		
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is null.
	*/
	@Test
	void testCreateTree1() {
		ASTree tree = null;
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree2() {
		ASTree tree = new ASTree();
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree3() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree4() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree5() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree6() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree7() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree8() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree9() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTree#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree10() {
		ASTree tree = new ASTree();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
}

// ASTreeView.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class ASTreeView implements java.io.Serializable {

    /**
     * add this node and recursively all its children to a swing tree structure <br>
     * used to construct a JTree with the ASTree
     *
     * @return DefaultMutableTreeNode
     */
    public DefaultMutableTreeNode createTree() {
        javax.swing.tree.DefaultMutableTreeNode node = new DefaultMutableTreeNode(toString());
        int arraySize = list.size();
        for (int i = 0; i < arraySize; ++i) {
            node.add(list.get(i).createTree());
        }
        return node;
    }
}

// ASTreeViewTest.java
package com.soops.CEN4010.JMCA;

import java.util.ArrayList;
import java.io.*;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ASTreeView}.
* It contains ten unit test cases for the {@link ASTreeView#createTree()} method.
*/
class ASTreeViewTest {
		
	/**
	* Test case for {@link ASTreeView#createTree()} method.
	* It tests the case when the tree is null.
	*/
	@Test
	void testCreateTree1() {
		ASTreeView tree = null;
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTreeView#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree2() {
		ASTreeView tree = new ASTreeView();
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTreeView#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree3() {
		ASTreeView tree = new ASTreeView();
		tree.list = new ArrayList<ASTNode>();
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTreeView#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	void testCreateTree4() {
		ASTreeView tree = new ASTreeView();
		tree.list = new ArrayList<ASTNode>();
		tree.list.add(new ASTNode());
		DefaultMutableTreeNode node = tree.createTree();
		assertEquals(null, node);
	}
	
	/**
	* Test case for {@link ASTreeView#createTree()} method.
	* It tests the case when the tree is not null.
	*/
	@Test
	"
cmpl-6x4towr9C4hgrpfowVuZk8xJUyw6Q,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAAnalyzer.java,141.87421655654907,length,"// JMCAAnalyzer.java
package com.soops.CEN4010.JMCA;

import java.util.*;

/**
 * <p>Title: JMCAAnalyzer </p>
 *
 * <p>Description: implements Analyzer</p>
 *
 * Group2 for CEN4010 at FSU - Fall 2005
 */
public class JMCAAnalyzer implements Analyzer {

    /**
     * Analyze the ASTree and return a formatted string
     *
     * @param root ASTNode
     * @return String
     */
    public String analyze(ASTNode root) {
        if (root == null) {
            output.append(""File did not parse correctly"");
            return output.toString();
        }
        setHeader();
        //  for each class
        for (ASTNode node : root.list) {
            analyzeClass(node);
        }
        return output.toString();
    }
}
","// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {","// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {

		/**
		* Test case 1 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with a null ASTNode.
		*/
		@Test
		void testAnalyze1() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				assertEquals(""File did not parse correctly"", analyzer.analyze(null));
		}
		
		/**
		* Test case 2 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has no children.
		*/
		@Test
		void testAnalyze2() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 3 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has one child.
		*/
		@Test
		void testAnalyze3() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child = new ASTNode(""child"", null);
				root.list.add(child);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 4 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has two children.
		*/
		@Test
		void testAnalyze4() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				root.list.add(child1);
				root.list.add(child2);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 5 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has three children.
		*/
		@Test
		void testAnalyze5() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 6 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has four children.
		*/
		@Test
		void testAnalyze6() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 7 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has five children.
		*/
		@Test
		void testAnalyze7() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				ASTNode child5 = new ASTNode(""child5"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				root.list.add(child5);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 8 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has six children.
		*/
		@Test
		void testAnalyze8() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				ASTNode child5 = new ASTNode(""child5"", null);
				ASTNode child6 = new ASTNode(""child6"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				root.list.add(child5);
				root.list.add(child6);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 9 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has seven children.
		*/
		@Test
		void testAnalyze9() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				ASTNode child5 = new ASTNode(""child5"", null);
				ASTNode child6 = new ASTNode(""child6"", null);
				ASTNode child7 = new ASTNode(""child7"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				root.list.add(child5);
				root.list.add(child6);
				root.list.add(child7);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 10 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has eight children.
		*/
		@Test
		void testAnalyze10() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				ASTNode child5 = new ASTNode(""child5"", null);
				ASTNode child6 = new ASTNode(""child6"", null);
				ASTNode child7 = new ASTNode(""child7"", null);
				ASTNode child8 = new ASTNode(""child8"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				root.list.add(child5);
				root.list.add(child6);
				root.list.add(child7);
				root.list.add(child8);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
}

// JMCAAnalyzerTest.java
package com.soops.CEN4010.JMCA;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAAnalyzer}.
* It contains ten unit test cases for the {@link JMCAAnalyzer#analyze(ASTNode)} method.
*/
class JMCAAnalyzerTest {
		
		/**
		* Test case 1 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with a null ASTNode.
		*/
		@Test
		void testAnalyze1() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				assertEquals(""File did not parse correctly"", analyzer.analyze(null));
		}
		
		/**
		* Test case 2 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has no children.
		*/
		@Test
		void testAnalyze2() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 3 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has one child.
		*/
		@Test
		void testAnalyze3() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child = new ASTNode(""child"", null);
				root.list.add(child);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 4 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has two children.
		*/
		@Test
		void testAnalyze4() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				root.list.add(child1);
				root.list.add(child2);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 5 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has three children.
		*/
		@Test
		void testAnalyze5() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 6 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has four children.
		*/
		@Test
		void testAnalyze6() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 7 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has five children.
		*/
		@Test
		void testAnalyze7() {
				JMCAAnalyzer analyzer = new JMCAAnalyzer();
				ASTNode root = new ASTNode(""root"", null);
				ASTNode child1 = new ASTNode(""child1"", null);
				ASTNode child2 = new ASTNode(""child2"", null);
				ASTNode child3 = new ASTNode(""child3"", null);
				ASTNode child4 = new ASTNode(""child4"", null);
				ASTNode child5 = new ASTNode(""child5"", null);
				root.list.add(child1);
				root.list.add(child2);
				root.list.add(child3);
				root.list.add(child4);
				root.list.add(child5);
				assertEquals(""File did not parse correctly"", analyzer.analyze(root));
		}
		
		/**
		* Test case 8 for {@link JMCAAnalyzer#analyze(ASTNode)}.
		* It tests the analyze method with an ASTNode that has six children.
		*/
	"
cmpl-6x4xfe3tNwBKKAMvrpb5z4kSlN7zP,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/JMCAParser.java,238.15788555145264,length,"// JMCAParser.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;

public class JMCAParser implements Parser {

    /**
     * parse implements parse for Parser
     * precondition is the intermediatFile is set
     *
     * @param rdr Reader
     * @return ASTNode
     */
    public ASTNode parse(Reader rdr) {
        JavaParser parser = new JavaParser(rdr);
        Writer wtr = null;
        try {
            parser.CompilationUnit();
            wtr = new FileWriter(new File(intermediateFile));
            parser.dump(wtr);
            System.out.println(""Java Parser Version 1.1:  Java program parsed successfully."");
            wtr.close();
            SaxProcessor saxP = new SaxProcessor(new FileInputStream(new File(intermediateFile)));
            saxP.showFile();
            return saxP.getRootNode();
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println(""Java Parser Version 1.1:  Encountered errors during parse."");
            return null;
        } catch (IOException ie) {
            System.out.println(""IO Error from parse : "" + ie.getMessage());
            return null;
        } catch (Error ex) {
            return null;
        } finally {
            try {
                if (wtr != null)
                    wtr.close();
            } catch (IOException ie) {
                System.err.println(""Error while closing intermediate file "" + intermediateFile);
                System.err.println(ie.getMessage());
            }
        }
        //           return null;
    }
}
","// JMCAParserTest.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCAParserTest {","// JMCAParserTest.java
package com.soops.CEN4010.JMCA;

import java.io.Reader;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import java.io.IOException;
import java.io.FileWriter;
import java.io.Writer;
import java.io.FileInputStream;
import java.io.File;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCAParserTest {

	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a valid Java program.
	*/
	@Test
	void testParseValidJavaProgram() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/valid_java_program.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/valid_java_program.java""));
		assertNotNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError2() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error2.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error2.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError3() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error3.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error3.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError4() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error4.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error4.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError5() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error5.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error5.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError6() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error6.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error6.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError7() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error7.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error7.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError8() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error8.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error8.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError9() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error9.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error9.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError10() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error10.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error10.java""));
		assertNull(root);
	}
}

// JMCATest.java
package com.soops.CEN4010.JMCA;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMCAParser}.
* It contains ten unit test cases for the {@link JMCAParser#parse(Reader)} method.
*/
class JMCATest {
		
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a valid Java program.
	*/
	@Test
	void testParseValidJavaProgram() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/valid_java_program.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/valid_java_program.java""));
		assertNotNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError2() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error2.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error2.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError3() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error3.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error3.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError4() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error4.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error4.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError5() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error5.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error5.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError6() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error6.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error6.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError7() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error7.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error7.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError8() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error8.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error8.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError9() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error9.xml"");
		ASTNode root = parser.parse(new FileReader(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_syntax_error9.java""));
		assertNull(root);
	}
	
	/**
	* Test case for {@link JMCAParser#parse(Reader)} method.
	* It tests the parser with a Java program that contains a syntax error.
	*/
	@Test
	void testParseJavaProgramWithSyntaxError10() {
		JMCAParser parser = new JMCAParser();
		parser.setIntermediateFile(""test/com/soops/CEN4010/JMCA/test_files/java_program_with_sy"
cmpl-6x4zwPK9sXS7AWs07LWSJudXJ4hLv,/EvoSuiteBenchmark/scenario2/19_jmca/src/main/java/com/soops/CEN4010/JMCA/UILayoutDisplayAnalyzer.java,151.96489882469177,length,"// UILayoutDisplayAnalyzer.java
package com.soops.CEN4010.JMCA;

/**
 * <p>Title: Group 2 Project </p>
 *
 * <p>Class: CEN4010 Fall 2005</p>
 *
 * <p>Description: Description: UILayoutDisplayAnalyzer implements a dummy Analyzer
 *    use for UI layout  </p>
 *
 * <p>Instructor Dr. Stoeklin</p>
 *
 * @author Group 2
 */
public class UILayoutDisplayAnalyzer implements Analyzer {

    /**
     * no operational implementation of Analyzer
     *
     * @param dummy ASTNode not used for dummy output
     * @return display string
     */
    public String analyze(ASTNode dummy) {
        StringBuffer output = new StringBuffer();
        //FAKE OUTPUT FOR PROTOTYPE
        output = new StringBuffer(""\nFile:  "");
        output.append(filename);
        output.append(""\n"");
        output.append(""Class: CohesionTest\n\n"");
        output.append(""Method Name                             Cohesion Level\n"");
        output.append(""--------------------------------------------------------------\n"");
        output.append(""deposit                                 Functional\n"");
        output.append(""withdraw                                Sequential\n"");
        output.append(""addCD                                   Communicational\n"");
        output.append(""formDet                                 Iterative\n"");
        output.append(""checkBookIn                             Conditional\n"");
        output.append(""readInput                               Coincidental\n"");
        return output.toString();
    }
}
","// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {","// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {

	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer}.
* It contains ten unit test cases for the {@link UILayoutDisplayAnalyzer#analyze(ASTNode)} method.
*/
class UILayoutDisplayAnalyzerTest {
		
	/**
	* Test case for {@link UILayoutDisplayAnalyzer#analyze(ASTNode)}.
	*/
	@Test
	void testAnalyze() {
		UILayoutDisplayAnalyzer analyzer = new UILayoutDisplayAnalyzer();
		assertEquals(""\nFile:  \nClass: CohesionTest\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\ndeposit                                 Functional\nwithdraw                                Sequential\naddCD                                   Communicational\nformDet                                 Iterative\ncheckBookIn                             Conditional\nreadInput                               Coincidental\n"", analyzer.analyze(null));
	}
}

// UILayoutDisplayAnalyzerTest.java
package com.soops.CEN4010.JMCA;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UILayoutDisplayAnalyzer"
