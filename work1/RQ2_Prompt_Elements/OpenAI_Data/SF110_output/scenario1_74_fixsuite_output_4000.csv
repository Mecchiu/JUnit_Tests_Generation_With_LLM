ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x3IC9x9624R6VU69o8U9oCtub0rB,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo0.java,61.76475477218628,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetField() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setTagNumber(1);
		dictionaryInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
		dictionaryInfo.fieldsByTagNumber.put(1, fieldInfo);
		assertEquals(fieldInfo, dictionaryInfo.getField(1));
	}
}

// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX field.
 *
 * @author jramoyo
 */
public class FieldInfo {

    private int tagNumber;

    public int getTagNumber() {
        return tagNumber;
    }

    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains two unit test cases for the {@link FieldInfo#getTagNumber()} and {@link FieldInfo#setTagNumber(int)} methods.
*/
class FieldInfoTest {
		
	@Test
	void testGetTagNumber() {
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setTagNumber(1);
		assertEquals(1, fieldInfo.getTagNumber());
	}
}

// GroupInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX group.
 *
 * @author jramoyo
 */
public class GroupInfo {

    private int delimiterFieldTagNumber;

    public int getDelimiterFieldTagNumber() {
        return delimiterFieldTagNumber;
    }

    public void setDelimiterFieldTagNumber(int delimiterFieldTagNumber) {
        this.delimiterFieldTagNumber = delimiterFieldTagNumber;
    }
}

// GroupInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains two unit test cases for the {@link GroupInfo#getDelimiterFieldTagNumber()} and {@link GroupInfo#setDelimiterFieldTagNumber(int)} methods.
*/
class GroupInfoTest {
		
	@Test
	void testGetDelimiterFieldTagNumber() {
		GroupInfo groupInfo = new GroupInfo();
		groupInfo.setDelimiterFieldTagNumber(1);
		assertEquals(1, groupInfo.getDelimiterFieldTagNumber());
	}
}

// MessageInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    private int msgType;

    public int getMsgType() {
        return msgType;
    }

    public void setMsgType(int msgType) {
        this.msgType = msgType;
    }
}

// MessageInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MessageInfo}.
* It contains two unit test cases for the {@link MessageInfo#getMsgType()} and {@link MessageInfo#setMsgType(int)} methods.
*/
class MessageInfoTest {
		
	@Test
	void testGetMsgType() {
		MessageInfo messageInfo = new MessageInfo();
		messageInfo.setMsgType(1);
		assertEquals(1, messageInfo.getMsgType());
	}
}

// MessageTypeInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message type.
 *
 * @author jramoyo
 */
public class MessageTypeInfo {

    private int msgType;

    public int getMsgType() {
        return msgType;
    }

    public void setMsgType(int msgType) {
        this.msgType = msgType;
    }
}

// MessageTypeInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MessageTypeInfo}.
* It contains two unit test cases for the {@link MessageTypeInfo#getMsgType()} and {@link MessageTypeInfo#setMsgType(int)} methods.
*/
class MessageTypeInfoTest {
		
	@Test
	void testGetMsgType() {
		MessageTypeInfo messageTypeInfo = new MessageTypeInfo();
		messageTypeInfo.setMsgType(1);
		assertEquals(1, messageTypeInfo.getMsgType());
	}
}

// TagInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX tag.
 *
 * @author jramoyo
 */
public class TagInfo {

    private int tagNumber;

    public int getTagNumber() {
        return tagNumber;
    }

    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }
}

// TagInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagInfo}.
* It contains two unit test cases for the {@link TagInfo#getTagNumber()} and {@link TagInfo#setTagNumber(int)} methods.
*/
class TagInfoTest {
		
	@Test
	void testGetTagNumber() {
		TagInfo tagInfo = new TagInfo();
		tagInfo.setTagNumber(1);
		assertEquals(1, tagInfo.getTagNumber());
	}
}

// ValueInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX value.
 *
 * @author jramoyo
 */
public class ValueInfo {

    private int tagNumber;

    public int getTagNumber() {
        return tagNumber;
    }

    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }
}

// ValueInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValueInfo}.
* It contains two unit test cases for the {@link ValueInfo#getTagNumber()} and {@link ValueInfo#setTagNumber(int)} methods.
*/
class ValueInfoTest {
		
	@Test
	void testGetTagNumber() {
		ValueInfo valueInfo = new ValueInfo();
		valueInfo.setTagNumber(1);
		assertEquals(1, valueInfo.getTagNumber());
	}
}"
cmpl-6x3JC0nlerV2QHpDzkfWVtRJoIYMc,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo1.java,61.46270823478699,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetField() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setName(""Test"");
		TreeMap<String, FieldInfo> fieldsByName = new TreeMap<String, FieldInfo>();
		fieldsByName.put(""Test"", fieldInfo);
		dictionaryInfo.fieldsByName = fieldsByName;
		assertEquals(fieldInfo, dictionaryInfo.getField(""Test""));
	}
}

// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX field.
 *
 * @author jramoyo
 */
public class FieldInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains two unit test cases for the {@link FieldInfo#getName()} and {@link FieldInfo#setName(String)} methods.
*/
class FieldInfoTest {
		
	@Test
	void testGetName() {
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.name = ""Test"";
		assertEquals(""Test"", fieldInfo.getName());
	}
	
	@Test
	void testSetName() {
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setName(""Test"");
		assertEquals(""Test"", fieldInfo.name);
	}
}

// GroupInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX group.
 *
 * @author jramoyo
 */
public class GroupInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// GroupInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains two unit test cases for the {@link GroupInfo#getName()} and {@link GroupInfo#setName(String)} methods.
*/
class GroupInfoTest {
		
	@Test
	void testGetName() {
		GroupInfo groupInfo = new GroupInfo();
		groupInfo.name = ""Test"";
		assertEquals(""Test"", groupInfo.getName());
	}
	
	@Test
	void testSetName() {
		GroupInfo groupInfo = new GroupInfo();
		groupInfo.setName(""Test"");
		assertEquals(""Test"", groupInfo.name);
	}
}

// MessageInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// MessageInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MessageInfo}.
* It contains two unit test cases for the {@link MessageInfo#getName()} and {@link MessageInfo#setName(String)} methods.
*/
class MessageInfoTest {
		
	@Test
	void testGetName() {
		MessageInfo messageInfo = new MessageInfo();
		messageInfo.name = ""Test"";
		assertEquals(""Test"", messageInfo.getName());
	}
	
	@Test
	void testSetName() {
		MessageInfo messageInfo = new MessageInfo();
		messageInfo.setName(""Test"");
		assertEquals(""Test"", messageInfo.name);
	}
}

// MessageTypeInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message type.
 *
 * @author jramoyo
 */
public class MessageTypeInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// MessageTypeInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MessageTypeInfo}.
* It contains two unit test cases for the {@link MessageTypeInfo#getName()} and {@link MessageTypeInfo#setName(String)} methods.
*/
class MessageTypeInfoTest {
		
	@Test
	void testGetName() {
		MessageTypeInfo messageTypeInfo = new MessageTypeInfo();
		messageTypeInfo.name = ""Test"";
		assertEquals(""Test"", messageTypeInfo.getName());
	}
	
	@Test
	void testSetName() {
		MessageTypeInfo messageTypeInfo = new MessageTypeInfo();
		messageTypeInfo.setName(""Test"");
		assertEquals(""Test"", messageTypeInfo.name);
	}
}

// TagInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX tag.
 *
 * @author jramoyo
 */
public class TagInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// TagInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagInfo}.
* It contains two unit test cases for the {@link TagInfo#getName()} and {@link TagInfo#setName(String)} methods.
*/
class TagInfoTest {
		
	@Test
	void testGetName() {
		TagInfo tagInfo = new TagInfo();
		tagInfo.name = ""Test"";
		assertEquals(""Test"", tagInfo.getName());
	}
	
	@Test
	void testSetName() {
		TagInfo tagInfo = new TagInfo();
		tagInfo.setName(""Test"");
		assertEquals(""Test"", tagInfo.name);
	}
}

// ValueInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX value.
 *
 * @author jramoyo
 */
public class ValueInfo {

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// ValueInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValueInfo}.
* It contains two unit test cases for the {@link ValueInfo#getName()} and {@link ValueInfo#setName(String)} methods.
*/
class ValueInfoTest {
		
	@Test
	void testGetName() {
		ValueInfo valueInfo = new ValueInfo();
		valueInfo.name = ""Test"";
		assertEquals(""Test"", valueInfo.getName());
	}
	
	@Test
	void testSetName() {
		ValueInfo valueInfo = new ValueInfo();
		valueInfo.setName(""Test"");
		assertEquals(""Test"", valueInfo.name);
	}
}"
cmpl-6x3KBNrzVVqp7Ax4U2Rug8gAh7nVe,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo2.java,12.29503607749939,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		dictionaryInfo.componentsById = new TreeMap<Integer, ComponentInfo>();
		dictionaryInfo.componentsById.put(1, new ComponentInfo());
		dictionaryInfo.componentsById.put(2, new ComponentInfo());
		dictionaryInfo.componentsById.put(3, new ComponentInfo());
		dictionaryInfo.componentsById.put(4, new ComponentInfo());
		dictionaryInfo.componentsById.put(5, new ComponentInfo());
		dictionaryInfo.componentsById.put(6, new ComponentInfo());
		dictionaryInfo.componentsById.put(7, new ComponentInfo());
		dictionaryInfo.componentsById.put(8, new ComponentInfo());
		dictionaryInfo.componentsById.put(9, new ComponentInfo());
		dictionaryInfo.componentsById.put(10, new ComponentInfo());
		
		assertEquals(dictionaryInfo.componentsById.get(1), dictionaryInfo.getComponent(1));
		assertEquals(dictionaryInfo.componentsById.get(2), dictionaryInfo.getComponent(2));
		assertEquals(dictionaryInfo.componentsById.get(3), dictionaryInfo.getComponent(3));
		assertEquals(dictionaryInfo.componentsById.get(4), dictionaryInfo.getComponent(4));
		assertEquals(dictionaryInfo.componentsById.get(5), dictionaryInfo.getComponent(5));
		assertEquals(dictionaryInfo.componentsById.get(6), dictionaryInfo.getComponent(6));
		assertEquals(dictionaryInfo.componentsById.get(7), dictionaryInfo.getComponent(7));
		assertEquals(dictionaryInfo.componentsById.get(8), dictionaryInfo.getComponent(8));
		assertEquals(dictionaryInfo.componentsById.get(9), dictionaryInfo.getComponent(9));
		assertEquals(dictionaryInfo.componentsById.get(10), dictionaryInfo.getComponent(10));
	}
}"
cmpl-6x3LEWhXLyOsg8mvoEcjdPG9zwbQg,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo3.java,143.2157974243164,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetComponent() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		ComponentInfo componentInfo = new ComponentInfo();
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put(""test"", componentInfo);
		assertEquals(componentInfo, dictionaryInfo.getComponent(""test""));
	}
}

// DictionaryInfo"
cmpl-6x3NievhTafqOzB5nOTjUmM7MAHUn,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo4.java,22.65907073020935,stop,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertNull(dictionaryInfo.getMessage(1));
	}
}

// MessageInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    public FieldInfo getField(int id) {
        if (fieldsById != null) {
            return fieldsById.get(id);
        } else {
            return null;
        }
    }
}

// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX field.
 *
 * @author jramoyo
 */
public class FieldInfo {

    public String getName() {
        return name;
    }
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#getName()} method.
*/
class FieldInfoTest {
		
	@Test
	void testGetName() {
		FieldInfo fieldInfo = new FieldInfo();
		assertNull(fieldInfo.getName());
	}
}

// MessageInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MessageInfo}.
* It contains ten unit test cases for the {@link MessageInfo#getField(int)} method.
*/
class MessageInfoTest {
		
	@Test
	void testGetField() {
		MessageInfo messageInfo = new MessageInfo();
		assertNull(messageInfo.getField(1));
	}
}"
cmpl-6x3ObAm5tIuJadvZxCm6uF3OxjKJL,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo5.java,92.38295793533325,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }
}
","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {","// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {

	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0001""));
	}
}

// DictionaryInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfoTest {
		
	@Test
	void testGetMessage() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo();
		assertEquals(null, dictionaryInfo.getMessage(""""));
		assertEquals(null, dictionaryInfo.getMessage("" ""));
		assertEquals(null, dictionaryInfo.getMessage(""\t""));
		assertEquals(null, dictionaryInfo.getMessage(""\n""));
		assertEquals(null, dictionaryInfo.getMessage(""\r""));
		assertEquals(null, dictionaryInfo.getMessage(""\f""));
		assertEquals(null, dictionaryInfo.getMessage(""\b""));
		assertEquals(null, dictionaryInfo.getMessage(""\0""));
		assertEquals(null, dictionaryInfo.getMessage(""\u0000""));
		assertEquals(null, dictionaryInfo."
cmpl-6x3Q5AdZImcuwNjbnPX9dZLOpdy2x,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo0.java,121.3916277885437,length,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }
}
","// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {","// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {

		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 10
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 10
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 10
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 10
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 10
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsRequiredInComponent() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Test case 1
				fieldInfo.requiringComponents = null;
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 2
				fieldInfo.requiringComponents = new ArrayList<ComponentInfo>();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 3
				fieldInfo.requiringComponents.add(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 4
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 5
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 6
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 7
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 8
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
				// Test case 9
				fieldInfo.requiringComponents.add(new ComponentInfo());
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
				
"
cmpl-6x3S2YPWZuHylheMeuHDfJCgkyJTs,/EvoSuiteBenchmark/scenario1/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo1.java,129.2176537513733,length,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }
}
","// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfoTest {","// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfoTest {

		@Test
		void testIsValidValue() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.validValues = new TreeMap<String, String>();
				fieldInfo.validValues.put(""1"", ""Buy"");
				fieldInfo.validValues.put(""2"", ""Sell"");
				fieldInfo.validValues.put(""3"", ""Buy minus"");
				fieldInfo.validValues.put(""4"", ""Sell plus"");
				fieldInfo.validValues.put(""5"", ""Sell short"");
				fieldInfo.validValues.put(""6"", ""Sell short exempt"");
				fieldInfo.validValues.put(""7"", ""Undisclosed"");
				fieldInfo.validValues.put(""8"", ""Cross"");
				fieldInfo.validValues.put(""9"", ""Cross short"");
				fieldInfo.validValues.put(""A"", ""Cross short exempt"");
				fieldInfo.validValues.put(""B"", ""As Defined"");
				fieldInfo.validValues.put(""C"", ""Opposite"");
				fieldInfo.validValues.put(""D"", ""Subscribe"");
				fieldInfo.validValues.put(""E"", ""Redeem"");
				fieldInfo.validValues.put(""F"", ""Lend"");
				fieldInfo.validValues.put(""G"", ""Borrow"");
				
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""A""));
				assertTrue(fieldInfo.isValidValue(""B""));
				assertTrue(fieldInfo.isValidValue(""C""));
				assertTrue(fieldInfo.isValidValue(""D""));
				assertTrue(fieldInfo.isValidValue(""E""));
				assertTrue(fieldInfo.isValidValue(""F""));
				assertTrue(fieldInfo.isValidValue(""G""));
				
				assertFalse(fieldInfo.isValidValue(""H""));
				assertFalse(fieldInfo.isValidValue(""I""));
				assertFalse(fieldInfo.isValidValue(""J""));
				assertFalse(fieldInfo.isValidValue(""K""));
				assertFalse(fieldInfo.isValidValue(""L""));
				assertFalse(fieldInfo.isValidValue(""M""));
				assertFalse(fieldInfo.isValidValue(""N""));
				assertFalse(fieldInfo.isValidValue(""O""));
				assertFalse(fieldInfo.isValidValue(""P""));
				assertFalse(fieldInfo.isValidValue(""Q""));
				assertFalse(fieldInfo.isValidValue(""R""));
				assertFalse(fieldInfo.isValidValue(""S""));
				assertFalse(fieldInfo.isValidValue(""T""));
				assertFalse(fieldInfo.isValidValue(""U""));
				assertFalse(fieldInfo.isValidValue(""V""));
				assertFalse(fieldInfo.isValidValue(""W""));
				assertFalse(fieldInfo.isValidValue(""X""));
				assertFalse(fieldInfo.isValidValue(""Y""));
				assertFalse(fieldInfo.isValidValue(""Z""));
				assertFalse(fieldInfo.isValidValue(""0""));
				assertFalse(fieldInfo.isValidValue(""-1""));
				assertFalse(fieldInfo.isValidValue(""""));
				assertFalse(fieldInfo.isValidValue("" ""));
				assertFalse(fieldInfo.isValidValue(""Buy""));
				assertFalse(fieldInfo.isValidValue(""Sell""));
				assertFalse(fieldInfo.isValidValue(""Buy minus""));
				assertFalse(fieldInfo.isValidValue(""Sell plus""));
				assertFalse(fieldInfo.isValidValue(""Sell short""));
				assertFalse(fieldInfo.isValidValue(""Sell short exempt""));
				assertFalse(fieldInfo.isValidValue(""Undisclosed""));
				assertFalse(fieldInfo.isValidValue(""Cross""));
				assertFalse(fieldInfo.isValidValue(""Cross short""));
				assertFalse(fieldInfo.isValidValue(""Cross short exempt""));
				assertFalse(fieldInfo.isValidValue(""As Defined""));
				assertFalse(fieldInfo.isValidValue(""Opposite""));
				assertFalse(fieldInfo.isValidValue(""Subscribe""));
				assertFalse(fieldInfo.isValidValue(""Redeem""));
				assertFalse(fieldInfo.isValidValue(""Lend""));
				assertFalse(fieldInfo.isValidValue(""Borrow""));
		}
}

// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsValidValue() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.validValues = new TreeMap<String, String>();
				fieldInfo.validValues.put(""1"", ""Buy"");
				fieldInfo.validValues.put(""2"", ""Sell"");
				fieldInfo.validValues.put(""3"", ""Buy minus"");
				fieldInfo.validValues.put(""4"", ""Sell plus"");
				fieldInfo.validValues.put(""5"", ""Sell short"");
				fieldInfo.validValues.put(""6"", ""Sell short exempt"");
				fieldInfo.validValues.put(""7"", ""Undisclosed"");
				fieldInfo.validValues.put(""8"", ""Cross"");
				fieldInfo.validValues.put(""9"", ""Cross short"");
				fieldInfo.validValues.put(""A"", ""Cross short exempt"");
				fieldInfo.validValues.put(""B"", ""As Defined"");
				fieldInfo.validValues.put(""C"", ""Opposite"");
				fieldInfo.validValues.put(""D"", ""Subscribe"");
				fieldInfo.validValues.put(""E"", ""Redeem"");
				fieldInfo.validValues.put(""F"", ""Lend"");
				fieldInfo.validValues.put(""G"", ""Borrow"");
				
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""A""));
				assertTrue(fieldInfo.isValidValue(""B""));
				assertTrue(fieldInfo.isValidValue(""C""));
				assertTrue(fieldInfo.isValidValue(""D""));
				assertTrue(fieldInfo.isValidValue(""E""));
				assertTrue(fieldInfo.isValidValue(""F""));
				assertTrue(fieldInfo.isValidValue(""G""));
				
				assertFalse(fieldInfo.isValidValue(""H""));
				assertFalse(fieldInfo.isValidValue(""I""));
				assertFalse(fieldInfo.isValidValue(""J""));
				assertFalse(fieldInfo.isValidValue(""K""));
				assertFalse(fieldInfo.isValidValue(""L""));
				assertFalse(fieldInfo.isValidValue(""M""));
				assertFalse(fieldInfo.isValidValue(""N""));
				assertFalse(fieldInfo.isValidValue(""O""));
				assertFalse(fieldInfo.isValidValue(""P""));
				assertFalse(fieldInfo.isValidValue(""Q""));
				assertFalse(fieldInfo.isValidValue(""R""));
				assertFalse(fieldInfo.isValidValue(""S""));
				assertFalse(fieldInfo.isValidValue(""T""));
				assertFalse(fieldInfo.isValidValue(""U""));
				assertFalse(fieldInfo.isValidValue(""V""));
				assertFalse(fieldInfo.isValidValue(""W""));
				assertFalse(fieldInfo.isValidValue(""X""));
				assertFalse(fieldInfo.isValidValue(""Y""));
				assertFalse(fieldInfo.isValidValue(""Z""));
				assertFalse(fieldInfo.isValidValue(""0""));
				assertFalse(fieldInfo.isValidValue(""-1""));
				assertFalse(fieldInfo.isValidValue(""""));
				assertFalse(fieldInfo.isValidValue("" ""));
				assertFalse(fieldInfo.isValidValue(""Buy""));
				assertFalse(fieldInfo.isValidValue(""Sell""));
				assertFalse(fieldInfo.isValidValue(""Buy minus""));
				assertFalse(fieldInfo.isValidValue(""Sell plus""));
				assertFalse(fieldInfo.isValidValue(""Sell short""));
				assertFalse(fieldInfo.isValidValue(""Sell short exempt""));
				assertFalse(fieldInfo.isValidValue(""Undisclosed""));
				assertFalse(fieldInfo.isValidValue(""Cross""));
				assertFalse(fieldInfo.isValidValue(""Cross short""));
				assertFalse(fieldInfo.isValidValue(""Cross short exempt""));
				assertFalse(fieldInfo.isValidValue(""As Defined""));
				assertFalse(fieldInfo.isValidValue(""Opposite""));
				assertFalse(fieldInfo.isValidValue(""Subscribe""));
				assertFalse(fieldInfo.isValidValue(""Redeem""));
				assertFalse(fieldInfo.isValidValue(""Lend""));
				assertFalse(fieldInfo.isValidValue(""Borrow""));
		}
}

// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }
}

// FieldInfoTest.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfoTest {
		
		@Test
		void testIsValidValue() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.validValues = new TreeMap<String, String>();
				fieldInfo.validValues.put(""1"", ""Buy"");
				fieldInfo.validValues.put(""2"", ""Sell"");
				fieldInfo.validValues.put(""3"", ""Buy minus"");
				fieldInfo.validValues.put(""4"", ""Sell plus"");
				fieldInfo.validValues.put(""5"", ""Sell short"");
				fieldInfo.validValues.put(""6"", ""Sell short exempt"");
				fieldInfo.validValues.put(""7"", ""Undisclosed"");
				fieldInfo.validValues.put(""8"", ""Cross"");
				fieldInfo.validValues.put(""9"", ""Cross short"");
				fieldInfo.validValues.put(""A"", ""Cross short exempt"");
				fieldInfo.validValues.put(""B"", ""As Defined"");
				fieldInfo.validValues.put(""C"", ""Opposite"");
				fieldInfo.validValues.put(""D"", ""Subscribe"");
				fieldInfo.validValues.put(""E"", ""Redeem"");
				fieldInfo.validValues.put(""F"", ""Lend"");
				fieldInfo.validValues.put(""G"", ""Borrow"");
				
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""A""));
				assertTrue(fieldInfo.isValidValue(""B""));
				assertTrue(fieldInfo.isValidValue(""C""));
				assertTrue(fieldInfo.isValidValue(""D""));
				assertTrue(fieldInfo.isValidValue(""E""));
				assertTrue(fieldInfo.isValidValue(""F""));
				assertTrue(fieldInfo.isValidValue(""G""));
				
				assertFalse(fieldInfo.isValidValue(""H""));
				assertFalse(fieldInfo.isValidValue(""I""));
				assertFalse(fieldInfo.isValidValue(""J""));
				assertFalse(fieldInfo.isValidValue(""K""));
				assertFalse(fieldInfo.isValidValue(""L""));
				assertFalse"
