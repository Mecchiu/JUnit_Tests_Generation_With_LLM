ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x6wAFnOXkEodumJ0oTFnZszSw6ku,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_0Test.java,148.81735634803772,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {

	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_0() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
}

// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {
		
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_0() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
}

// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {
		
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_0() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
}

// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui."
cmpl-6x6yYKWWX4a8IFY8nrpMS9SjGKkot,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_10Test.java,123.3524522781372,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {

	@Test
	void test_quitAction_should_return_a_new_quit_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction = applicationConfiguration.quitAction();
		
		// Then
		assertNotNull(quitAction);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		quitAction2.actionPerformed(null);
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		quitAction2.actionPerformed(null);
		quitAction2.actionPerformed(null);
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times_and_then_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		quitAction2.actionPerformed(null);
		quitAction2.actionPerformed(null);
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_quit_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times_and_then_used_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1.actionPerformed(null);
		quitAction1.actionPerformed(null);
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		quitAction2.actionPerformed(null);
		quitAction2.actionPerformed(null);
		quitAction2.actionPerformed(null);
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
}

// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains eleven unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {
		
	@Test
	void test_highlightAction_should_return_a_new_highlight_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		highlightAction2.actionPerformed(null);
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		highlightAction2.actionPerformed(null);
		highlightAction2.actionPerformed(null);
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times_and_then_not_used() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		highlightAction2.actionPerformed(null);
		highlightAction2.actionPerformed(null);
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
	@Test
	void test_highlightAction_should_return_a_new_highlight_action_each_time_it_is_called_even_if_the_previous_one_is_used_several_times_and_then_used_again_several_times_and_then_used_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction1 = applicationConfiguration.highlightAction();
		highlightAction1.actionPerformed(null);
		highlightAction1.actionPerformed(null);
		HighlightAction highlightAction2 = applicationConfiguration.highlightAction();
		highlightAction2.actionPerformed(null);
		highlightAction2.actionPerformed(null);
		highlightAction2.actionPerformed(null);
		
		// Then
		assertNotSame(highlightAction1, highlightAction2);
	}
	
}

// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains twelve unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
"
cmpl-6x70YYyKuzkwJLa14vpx26vGEIVta,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_11Test.java,153.57670545578003,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {

	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_1() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_2() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_3() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_4() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_5() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_6() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_7() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_8() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_9() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#highlightAction()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_highlightAction_10() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
	}
	
}

// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_1() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_2() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_3() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_4() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_5() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_6() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_7() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_8() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_9() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainFrame()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_jTailMainFrame_10() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
}

// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_1() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_2() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_3() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_4() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_5() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_6() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_7() throws Exception {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	*/
	@Test
	void test_openFileDialog_8() throws Exception {
		// Given
		ApplicationConfiguration"
cmpl-6x74WdWKCfVFW5D6U3oNSvkbWUHCC,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_12Test.java,230.38962841033936,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {

	@Test
	void test_jTailMainFrame_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
}

// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {
		
	@Test
	void test_openFileDialog_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
}

// ApplicationConfiguration_14Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_14Test {
		
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
}

// ApplicationConfiguration_15Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_15Test {
		
	@Test
	void test_openFileModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_open"
cmpl-6x76kCZioctn55znsDQid9OSpBRvy,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_13Test.java,127.49676942825317,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {

	/**
	* Test case for {@link ApplicationConfiguration#openFileDialog()} method.
	*
	* @throws Exception
	* 																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												"
cmpl-6x78n4f0oah2J7k5mLpygDBjEZEnw,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_1Test.java,127.44285869598389,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {

	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
}

// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_2Test {
		
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
}

// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_3Test {
		
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail."
cmpl-6x7Ar5o6Gm7foDah6HCT0E3ymTwH5,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_2Test.java,145.63747429847717,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {

	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {
		
	@Test
	void test_toolsMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {
		
	@Test
	void test_chooseFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {
		
	@Test
	void test_selectIndexTypeListener_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_10() {"
cmpl-6x7DCeOXq9b5ZcjJZ9ht7PV2NOrZw,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_3Test.java,171.5962495803833,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {

	@Test
	void test_toolsMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_4Test {
		
	@Test
	void test_selectIndexTypeListener_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_selectIndexTypeListener_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener result = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_5Test {
		
	@Test
	void test_indexFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_indexFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction result = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_6Test {
		
	@Test
	void test_openAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction result = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_openAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		Open"
cmpl-6x7Fy7kFoBSiLzDBmYWt1NXXxZc1J,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_4Test.java,139.83888506889343,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {

	@Test
	void test_chooseFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_chooseFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction result = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_5Test {
		
	@Test
	void test_closeAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction result = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_6Test {
		
	@Test
	void test_closeAllAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_closeAllAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction result = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_7Test {
		
	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		"
cmpl-6x7IE6FfG4GQYXZn0ZyiFkpO7hvVy,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_5Test.java,106.04936599731445,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {

	@Test
	void test_selectIndexTypeListener_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
}

// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {
		
	@Test
	void test_indexFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
}

// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {
		
	@Test
	void test_openAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
}

// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {
		
	@Test
	void test_closeAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test"
cmpl-6x7JwZroNW11c11nWDHKocRxCCSHE,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_6Test.java,123.41672229766846,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {

	@Test
	void test_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
}

// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {
		
	@Test
	void test_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
}

// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {
		
	@Test
	void test_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
}

// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {
		
	@Test
	void test_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
}

// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
"
cmpl-6x7LvUL13QHnpGambmVGjsw3dySy3,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_7Test.java,140.43312287330627,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {

	@Test
	void test_openAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
}

// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {
		
	@Test
	void test_closeAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
}

// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {
		
	@Test
	void test_closeAllAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void test_closeAllAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
}

// ApplicationConfiguration_Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_Test {
		
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
"
cmpl-6x7OCYUaRtcXluKHLooBie8NKUwX4,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_8Test.java,135.53319883346558,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {

	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
}

// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
}

// ApplicationConfiguration_Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
}

// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;"
cmpl-6x7QNczFQvFfByZR5ktiVJ23NDYIU,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_9Test.java,138.77148365974426,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel();

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel();

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction();

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction();

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction();

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener();

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction();

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction();

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction();

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction();

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction();

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction();

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame();

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog();
}
","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {

	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAllAction()} method.
	*/
	@Test
	void test_closeAllAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
}

// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_10Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#closeAction()} method.
	*/
	@Test
	void test_closeAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
}

// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_11Test {
		
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
	/**
	* Test case for {@link ApplicationConfiguration#fileMenuAction()} method.
	*/
	@Test
	void test_fileMenuAction_11() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction fileMenuAction = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(fileMenuAction);
	}
	
}

// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api"
cmpl-6x7ScrRC0YiDtXOnUd35WrPw6qjw0,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_0Test.java,135.52524065971375,length,"// LineReader.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    //NON-NLS
    private static final String READONLY_MODE = ""r"";

    /**
     * L'index des lignes du fichier.
     */
    private final FileIndex index;

    /**
     * Le fichier à lire.
     */
    private final File file;

    /**
     * Flux utilisé pour lire le fichier.
     */
    private final RandomAccessFile randomAccess;

    /**
     * Constructeur d'un LineReader à partir d'un index des lignes du fichier.
     * L'index doit indiquer la position des caractères de début de chaque ligne du fichier.
     *
     * @param file  le fichier à lire
     * @param index l'index à utiliser
     * @throws java.io.FileNotFoundException si le fichier n'existe pas
     */
    public LineReader(File file, FileIndex index) throws FileNotFoundException {
    }

    /**
     * Ferme le flux ouvert pour lire le fichier.
     *
     * @throws IOException si une erreur survient
     */
    public void close() throws IOException;

    /**
     * Renvoie le nombre de lignes indexées.
     *
     * @return le nombre de lignes indexées
     */
    public int getIndexSize();

    /**
     * Lit la ligne dont le numéro est passé en paramètre.
     * Le numéro de la ligne doit être compris entre 0 et le nombre de lignes indexées.
     *
     * @param lineNumber le numéro de la ligne à lire. Doit être compris entre 0 et le nombre de lignes indexées.
     * @return la ligne correspondant au numéro passé en paramètre
     * @throws IOException si une erreur survient pendant la lecture
     */
    public String readLine(int lineNumber) throws IOException;

    /**
     * Lit les lignes comprise entre <code>fromLine</code> et <code>toLine</code> (exclus).
     *
     * @param fromLine Le numéro de la première ligne à lire
     * @param toLine   Le numéro de la dernière ligne à lire (exclus)
     * @return Les lignes du fichier dont le numéro est compris entre les deux paramètres
     * @throws IOException si une erreur survient pendant la lecture
     */
    public List<String> readBlock(int fromLine, int toLine) throws IOException;
}
","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {

		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is negative.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_0() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readLine(-1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be positive"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to zero.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_1() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readLine(0);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be positive"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is greater than the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_2() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readLine(index.getIndexSize() + 1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be less than the number of lines in the file"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_3() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readLine(index.getIndexSize());
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be less than the number of lines in the file"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to one.
		* It expects the first line of the file to be returned.
		*/
		@Test
		void testReadLine_4() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(1);
				
				// Then
				assertEquals(""This is a test file"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus one.
		* It expects the last line of the file to be returned.
		*/
		@Test
		void testReadLine_5() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(index.getIndexSize() - 1);
				
				// Then
				assertEquals(""This is the last line"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus two.
		* It expects the penultimate line of the file to be returned.
		*/
		@Test
		void testReadLine_6() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(index.getIndexSize() - 2);
				
				// Then
				assertEquals(""This is the penultimate line"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus three.
		* It expects the antepenultimate line of the file to be returned.
		*/
		@Test
		void testReadLine_7() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(index.getIndexSize() - 3);
				
				// Then
				assertEquals(""This is the antepenultimate line"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus four.
		* It expects the line before the antepenultimate line of the file to be returned.
		*/
		@Test
		void testReadLine_8() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(index.getIndexSize() - 4);
				
				// Then
				assertEquals(""This is the line before the antepenultimate line"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus five.
		* It expects the line before the line before the antepenultimate line of the file to be returned.
		*/
		@Test
		void testReadLine_9() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				String line = reader.readLine(index.getIndexSize() - 5);
				
				// Then
				assertEquals(""This is the line before the line before the antepenultimate line"", line);
		}
}

// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the first line number is negative.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_0() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readBlock(-1, 1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be positive"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the first line number is equal to zero.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_1() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readBlock(0, 1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be positive"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the first line number is greater than the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_2() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readBlock(index.getIndexSize() + 1, 1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be less than the number of lines in the file"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the first line number is equal to the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_3() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readBlock(index.getIndexSize(), 1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be less than the number of lines in the file"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the second line number is negative.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_4() throws IOException {
				// Given
				File file = new File(""src/test/resources/test.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				try {
						reader.readBlock(1, -1);
						fail(""An IllegalArgumentException should have been thrown"");
				} catch (IllegalArgumentException e) {
						// Then
						assertEquals(""Line number must be positive"", e.getMessage());
				}
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the second line number is equal to zero.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadBlock_"
cmpl-6x7Uninzl6NKe5pCNGJ7pmVuzS6Ej,/EvoSuiteBenchmark/original/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_1Test.java,137.4276807308197,length,"// LineReader.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    //NON-NLS
    private static final String READONLY_MODE = ""r"";

    /**
     * L'index des lignes du fichier.
     */
    private final FileIndex index;

    /**
     * Le fichier à lire.
     */
    private final File file;

    /**
     * Flux utilisé pour lire le fichier.
     */
    private final RandomAccessFile randomAccess;

    /**
     * Constructeur d'un LineReader à partir d'un index des lignes du fichier.
     * L'index doit indiquer la position des caractères de début de chaque ligne du fichier.
     *
     * @param file  le fichier à lire
     * @param index l'index à utiliser
     * @throws java.io.FileNotFoundException si le fichier n'existe pas
     */
    public LineReader(File file, FileIndex index) throws FileNotFoundException {
    }

    /**
     * Ferme le flux ouvert pour lire le fichier.
     *
     * @throws IOException si une erreur survient
     */
    public void close() throws IOException;

    /**
     * Renvoie le nombre de lignes indexées.
     *
     * @return le nombre de lignes indexées
     */
    public int getIndexSize();

    /**
     * Lit la ligne dont le numéro est passé en paramètre.
     * Le numéro de la ligne doit être compris entre 0 et le nombre de lignes indexées.
     *
     * @param lineNumber le numéro de la ligne à lire. Doit être compris entre 0 et le nombre de lignes indexées.
     * @return la ligne correspondant au numéro passé en paramètre
     * @throws IOException si une erreur survient pendant la lecture
     */
    public String readLine(int lineNumber) throws IOException;

    /**
     * Lit les lignes comprise entre <code>fromLine</code> et <code>toLine</code> (exclus).
     *
     * @param fromLine Le numéro de la première ligne à lire
     * @param toLine   Le numéro de la dernière ligne à lire (exclus)
     * @return Les lignes du fichier dont le numéro est compris entre les deux paramètres
     * @throws IOException si une erreur survient pendant la lecture
     */
    public List<String> readBlock(int fromLine, int toLine) throws IOException;
}
","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {

		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file is empty.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_EmptyFile() throws IOException {
				// Given
				File file = new File(""src/test/resources/empty.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 0);
				
				// Then
				assertEquals(0, lines.size());
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains one line.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_OneLine() throws IOException {
				// Given
				File file = new File(""src/test/resources/one_line.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 1);
				
				// Then
				assertEquals(1, lines.size());
				assertEquals(""one line"", lines.get(0));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains two lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_TwoLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/two_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 2);
				
				// Then
				assertEquals(2, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains three lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_ThreeLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/three_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 3);
				
				// Then
				assertEquals(3, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains four lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_FourLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/four_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 4);
				
				// Then
				assertEquals(4, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains five lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_FiveLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/five_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 5);
				
				// Then
				assertEquals(5, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains six lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_SixLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/six_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 6);
				
				// Then
				assertEquals(6, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
				assertEquals(""sixth line"", lines.get(5));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains seven lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_SevenLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/seven_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 7);
				
				// Then
				assertEquals(7, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
				assertEquals(""sixth line"", lines.get(5));
				assertEquals(""seventh line"", lines.get(6));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains eight lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_EightLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/eight_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 8);
				
				// Then
				assertEquals(8, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
				assertEquals(""sixth line"", lines.get(5));
				assertEquals(""seventh line"", lines.get(6));
				assertEquals(""eighth line"", lines.get(7));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains nine lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_NineLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/nine_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 9);
				
				// Then
				assertEquals(9, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
				assertEquals(""sixth line"", lines.get(5));
				assertEquals(""seventh line"", lines.get(6));
				assertEquals(""eighth line"", lines.get(7));
				assertEquals(""ninth line"", lines.get(8));
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains ten lines.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_TenLines() throws IOException {
				// Given
				File file = new File(""src/test/resources/ten_lines.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 10);
				
				// Then
				assertEquals(10, lines.size());
				assertEquals(""first line"", lines.get(0));
				assertEquals(""second line"", lines.get(1));
				assertEquals(""third line"", lines.get(2));
				assertEquals(""fourth line"", lines.get(3));
				assertEquals(""fifth line"", lines.get(4));
				assertEquals(""sixth line"", lines.get(5));
				assertEquals(""seventh line"", lines.get(6));
				assertEquals(""eighth line"", lines.get(7));
				assertEquals(""ninth line"", lines.get(8));
				assertEquals(""tenth line"", lines.get(9));
		}
}

// LineReader_2Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_2Test {
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file is empty.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_EmptyFile() throws IOException {
				// Given
				File file = new File(""src/test/resources/empty.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 0);
				
				// Then
				assertEquals(0, lines.size());
		}
		
		/**
		* Test case for {@link LineReader#readBlock(int, int)} method.
		* It tests the case where the file contains one line.
		*
		* @throws IOException if an error occurs during the test
		*/
		@Test
		void testReadBlock_OneLine() throws IOException {
				// Given
				File file = new File(""src/test/resources/one_line.txt"");
				FileIndex index = new FileIndex(file);
				LineReader reader = new LineReader(file, index);
				
				// When
				List<String> lines = reader.readBlock(0, 1);
				
				// Then
				assertEquals(1, lines.size());
				assertEquals(""one line"", lines.get(0));
		}
		
		/**
		* Test"
