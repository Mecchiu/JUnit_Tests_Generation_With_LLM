[
    {
        "id": "cmpl-6x7lSRU45TGKrgs0lyoDaBVij8mBc",
        "object": "text_completion",
        "created": 1679549218,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 252,
            "completion_tokens": 4000,
            "total_tokens": 4252
        },
        "time_taken": 81.97516226768494,
        "prompt_id": "/EvoSuiteBenchmark/scenario3/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray0.java",
        "original_code": "// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b);\n}\n",
        "test_prompt": "// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {",
        "original_generated_code": "\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t@Test\n\tvoid testIsFalse() {\n\t\tExtBoolArray extBoolArray = new ExtBoolArray();\n\t\t\n\t\t// Test case 1\n\t\tassertTrue(extBoolArray.isFalse(0, 0));\n\t\t\n\t\t// Test case 2\n\t\tassertTrue(extBoolArray.isFalse(0, 1));\n\t\t\n\t\t// Test case 3\n\t\tassertTrue(extBoolArray.isFalse(0, 2));\n\t\t\n\t\t// Test case 4\n\t\tassertTrue(extBoolArray.isFalse(0, 3));\n\t\t\n\t\t// Test case 5\n\t\tassertTrue(extBoolArray.isFalse(0, 4));\n\t\t\n\t\t// Test case 6\n\t\tassertTrue(extBoolArray.isFalse(0, 5));\n\t\t\n\t\t// Test case 7\n\t\tassertTrue(extBoolArray.isFalse(0, 6));\n\t\t\n\t\t// Test case 8\n\t\tassertTrue(extBoolArray.isFalse(0, 7));\n\t\t\n\t\t// Test case 9\n\t\tassertTrue(extBoolArray.isFalse(0, 8));\n\t\t\n\t\t// Test case 10\n\t\tassertTrue(extBoolArray.isFalse(0, 9));\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschlie\u00dflich False-Werte\n     * enthaelt.\n     *\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        return true;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x7nsgc3ocpDO7h9Q1JKZaRxGixCR",
        "object": "text_completion",
        "created": 1679549368,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an empty array.\n\t */\n\t@Test\n\tvoid testLeftEmpty() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement2() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement3() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement4() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement5() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement6() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement7() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(true);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement8() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement9() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(false);\n\t\tassertEquals(2, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement10() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 206,
            "completion_tokens": 4000,
            "total_tokens": 4206
        },
        "time_taken": 211.56048369407654,
        "prompt_id": "/EvoSuiteBenchmark/scenario3/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray1.java",
        "original_code": "// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     *\n     * @return Anzahl der False-Werte.\n     */\n    public int left();\n}\n",
        "test_prompt": "// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.\n*/\nclass ExtBoolArrayTest {",
        "original_generated_code": "\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an empty array.\n\t */\n\t@Test\n\tvoid testLeftEmpty() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement2() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement3() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement4() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement5() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement6() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement7() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(true);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement8() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement9() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(false);\n\t\tassertEquals(2, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement10() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     *\n     * @return Anzahl der False-Werte.\n     */\n    public int left() {\n        int left = 0;\n        for (boolean b : array) {\n            if (!b) {\n                left++;\n            }\n        }\n        return left;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an empty array.\n\t */\n\t@Test\n\tvoid testLeftEmpty() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement2() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement3() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement4() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement5() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement6() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement7() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(true);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement8() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement9() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(false);\n\t\tassertEquals(2, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement10() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     *\n     * @return Anzahl der False-Werte.\n     */\n    public int left() {\n        int left = 0;\n        for (boolean b : array) {\n            if (!b) {\n                left++;\n            }\n        }\n        return left;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.\n*/\nclass ExtBoolArrayTest {\n\t\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an empty array.\n\t */\n\t@Test\n\tvoid testLeftEmpty() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement2() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement3() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement4() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement5() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.set(0, false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement6() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.set(0, true);\n\t\tassertEquals(0, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement7() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(true);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement8() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(false);\n\t\tassertEquals(1, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement9() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(false);\n\t\tarray.add(false);\n\t\tassertEquals(2, array.left());\n\t}\n\t\n\t/**\n\t * Test case for {@link ExtBoolArray#left()}.\n\t * It tests the method with an array containing only one element.\n\t */\n\t@Test\n\tvoid testLeftOneElement10() {\n\t\tExtBoolArray array = new ExtBoolArray();\n\t\tarray.add(true);\n\t\tarray.add(true);\n\t\tassertEquals(0, array.left());\n\t}\n}\n\n// ExtBoolArray.java\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     *\n     * @return Anzahl der False-Werte.\n     */\n    public int left() {\n        int left = 0;\n        for (boolean b : array) {\n            if (!b) {\n                left++;\n            }\n        }\n        return left;\n    }\n}\n\n// ExtBoolArrayTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*",
        "applied_heuristics": "H1"
    }
]