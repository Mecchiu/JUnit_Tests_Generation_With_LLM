[
{
    "id": "cmpl-6wu1fJSUxwx3YX5ivMbFxsxnErEPx",
    "object": "text_completion",
    "created": 1679496407,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridNull() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_UseridNull\");\n\t\tString userid = null;\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridEmpty() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_UseridEmpty\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the password is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordNull() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_PasswordNull\");\n\t\tString userid = \"\";\n\t\tString password = null;\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the password is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordEmpty() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_PasswordEmpty\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the source is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceNull() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_SourceNull\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = null;\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the source is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceEmpty() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_SourceEmpty\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridInvalid() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_UseridInvalid\");\n\t\tString userid = \"invalid\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the password is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordInvalid() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_PasswordInvalid\");\n\t\tString userid = \"\";\n\t\tString password = \"invalid\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the source is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceInvalid() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_SourceInvalid\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"invalid\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid2() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid2\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid3() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid3\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid4() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid4\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid5() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid5\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid6() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid6\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid7() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid7\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid8() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid8\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid9() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid9\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method, of class {@link LogonHelper}.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid10() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine_Valid10\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 707,
        "completion_tokens": 3179,
        "total_tokens": 3886
    },
    "time_taken": 90.12419176101685,
    "prompt_id": "/EvoSuiteBenchmark/scenario3/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid full gmail address for user\n     * @param password password\n     * @param source name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception;\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {"
},
{
    "id": "cmpl-6wu37uUsMPgLfKsfXeL1EsW9vYRdS",
    "object": "text_completion",
    "created": 1679496497,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(null, \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", null, \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_SourceNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", null, \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_SourceEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", null);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n}\n\n// QuotaDetails.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.util.Date;\n\n/**\n * Google App Engine application quota details.\n *\n * @author Alois Belaska\n */\npublic class QuotaDetails {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @param source name of application requesting quota details\n     * @param application appspot application name\n     * @return quota details of application\n     * @throws Exception in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        try {\n            LogonHelper.logon(httpclient, userid, password);\n            HttpGet httpget = new HttpGet(\"https://appengine.google.com/api/quotadetails?app_id=\" + application);\n            httpget.addHeader(\"X-appcfg-api-version\", \"1\");\n            httpget.addHeader(\"X-appcfg-source\", source);\n            HttpResponse response = httpclient.execute(httpget);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new Exception(\"Failed to retrieve quota details for application \" + application + \": \" + response.getStatusLine());\n            }\n            return new QuotaDetails();\n        } finally {\n            httpclient.getConnectionManager().shutdown();\n        }\n    }\n}\n\n// QuotaDetailsTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuotaDetails}.\n* It contains ten unit test cases for the {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass QuotaDetailsTest {\n\t\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(null, \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", null, \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_SourceNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", null, \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_SourceEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is null.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationNull() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", null);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is empty.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationEmpty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_UseridInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_PasswordInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is invalid.\n\t * Expected result: IllegalArgumentException.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_ApplicationInvalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n}\n\n// LogonHelper.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Logon to Google App Engine.\n     *\n     * @param httpclient http client\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @throws Exception in case of failure\n     */\n    public static void logon(DefaultHttpClient httpclient, String userid, String password) throws Exception {\n        HttpGet httpget = new HttpGet(\"https://www.google.com/accounts/ServiceLogin?service=ah&amp;passive=true&amp;continue=https://appengine.google.com/_ah/conflogin%3Fcontinue%3Dhttps://appengine.google.com/\");\n        HttpResponse response = httpclient.execute(httpget);\n        if (response.getStatusLine().getStatusCode() != 200) {\n            throw new Exception(\"Failed to logon to Google App Engine: \" + response.getStatusLine());\n        }\n        String content = EntityUtils.toString(response.getEntity());\n        String galx = extractGalx(content);\n        HttpPost httppost = new HttpPost(\"https://www.google.com/accounts/ServiceLoginAuth\");\n        List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n        nvps.add(new BasicNameValuePair(\"continue\", \"https://appengine.google.com/_ah/conflogin?continue=https://",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 396,
        "completion_tokens": 4000,
        "total_tokens": 4396
    },
    "time_taken": 159.14407539367676,
    "prompt_id": "/EvoSuiteBenchmark/scenario3/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid full gmail address for user\n     * @param password gmail account password\n     * @param source name of application requesting quota details\n     * @param application appspot application name\n     * @return quota details of application\n     * @throws Exception in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {"
}
]