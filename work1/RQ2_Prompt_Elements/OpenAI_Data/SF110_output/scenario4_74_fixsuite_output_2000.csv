ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x2NhuH6h6Hmfd3mpCmuhCIZ9CjFd,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,71.71325588226318,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {

	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testGetField_0() throws Exception {
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		dictionaryInfo.addField(new FieldInfo(1, ""Account"", ""STRING"", ""Account mnemonic as agreed between buy and sell sides, e.g. broker and institution or investor/intermediary and fund manager
cmpl-6x2OqTKnnYsTcWOkJzlgmayxdPUwc,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,57.68384552001953,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {

	/**
	 * Test case 1:
	 * 
	 * <p>
	 * This test case is used to test the {@link DictionaryInfo#getField(String)} method.
	 * </p>
	 * 
	 * <p>
	 * The test case is used to test the normal case.
	 * </p>
	 * 
	 * <p>
	 * The expected result is that the method returns the field with the given name.
	 * </p>
	 */
	@Test
	void testGetField_1() {
		// Create a new dictionary
		DictionaryInfo dictionary = new DictionaryInfo(""FIX.4.2"");
		
		// Create a new field
		FieldInfo field = new FieldInfo(1, ""Account"", ""STRING"", ""Account mnemonic as agreed between buy and sell sides, e.g. broker and institution or investor/intermediary and fund manager
cmpl-6x2PtjpAZfHnAwmzVGxjPCXYM7LMM,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,75.51858329772949,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {

	/**
	 * Test case 1 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_1() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(0);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 2 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_2() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(1);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 3 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_3() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(2);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 4 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_4() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(3);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 5 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_5() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(4);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 6 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_6() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(5);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 7 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_7() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(6);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 8 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_8() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(7);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 9 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_9() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(8);
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 10 for method getComponent(int).
	 * 
	 * @see DictionaryInfo#getComponent(int)
	 */
	@Test
	void testGetComponent_10() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(9);
		
		// Verify result
		assertNull(result);
	}
}

// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
		
	/**
	 * Test case 1 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_1() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent("""");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 2 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_2() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent("" "");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 3 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_3() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""a"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 4 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_4() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""b"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 5 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_5() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""c"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 6 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_6() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""d"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 7 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_7() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""e"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 8 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_8() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4.2"").getComponent(""f"");
		
		// Verify result
		assertNull(result);
	}
	
	/**
	 * Test case 9 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_9() {
		// Test method
		ComponentInfo result = new DictionaryInfo(""FIX.4"
cmpl-6x2R7ioC5OpXrCL7vt7ywXeNQTgUg,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,84.82277750968933,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {

	/**
	 * Test case 1 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_1() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 2 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_2() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 3 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_3() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 4 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_4() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 5 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_5() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 6 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_6() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 7 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_7() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 8 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_8() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 9 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_9() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
	
	/**
	 * Test case 10 for method getComponent(String).
	 * 
	 * @see DictionaryInfo#getComponent(String)
	 */
	@Test
	void testGetComponent_10() {
		// Test method arguments
		String name = """";
		
		// Set up the environment for testing
		DictionaryInfo dictionaryInfo = new DictionaryInfo("""");
		dictionaryInfo.componentsByName = new TreeMap<String, ComponentInfo>();
		dictionaryInfo.componentsByName.put("""", new ComponentInfo());
		
		// Execute the tested method
		ComponentInfo actualComponentInfo = dictionaryInfo.getComponent(name);
		
		// Verify the result
		assertNotNull(actualComponentInfo);
	}
}

// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/"
cmpl-6x2SUepbuatks5OVPNSylYMivkdQG,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,72.56228160858154,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {

	/**
	 * Test case 1 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_1() {
		// Test case 1
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 2 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_2() {
		// Test case 2
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 3 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_3() {
		// Test case 3
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 4 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_4() {
		// Test case 4
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 5 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_5() {
		// Test case 5
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 6 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_6() {
		// Test case 6
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 7 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_7() {
		// Test case 7
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 8 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_8() {
		// Test case 8
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 9 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_9() {
		// Test case 9
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 10 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_10() {
		// Test case 10
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
}

// DictionaryInfo_4Test_Coverage.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test_Coverage {
		
	/**
	 * Test case 1 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_1() {
		// Test case 1
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 2 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_2() {
		// Test case 2
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 3 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 * @see DictionaryInfo#getMessage(int)
	 */
	@Test
	public void testGetMessage_3() {
		// Test case 3
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""A"", 1);
		dictionaryInfo.addMessage(messageInfo);
		assertEquals(messageInfo, dictionaryInfo.getMessage(1));
	}
	
	/**
	 * Test case 4 for method {@link DictionaryInfo#getMessage(int)}.
	 * 
	 *"
cmpl-6x2Tefn2Z7Si9STAWFvNbRNfJdN2c,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,81.38027119636536,length,"// DictionaryInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields();

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber);

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name);

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field);

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents();

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id);

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name);

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component);

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group);

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id);

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name);

    public List<MessageInfo> getMessages();

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message);

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion();

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version);

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount();

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded();
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {

	/**
	 * Test case 1 for method {@link DictionaryInfo#getMessage(String)}.
	 * 
	 * @see DictionaryInfo#getMessage(String)
	 */
	@Test
	public void testGetMessage_1() {
		DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
		MessageInfo messageInfo = new MessageInfo(dictionaryInfo, ""Message
cmpl-6x2UxuHsJicRCmVNIITZoYqUGfYeW,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,88.38314652442932,length,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber();

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber);

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName();

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name);

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType();

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType);

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription();

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description);

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments();

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments);

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation();

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation);

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName();

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName);

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory();

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory);

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName();

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName);

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType();

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType);

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag();

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag);

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength();

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length);

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml();

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml);

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion();

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion);

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents();

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component);

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents);

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component);

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues();

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value);

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value);

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues);

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap();
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {

	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = null</td><td>false</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_0() {
		// Test Data
		ComponentInfo component = null;
		
		// Expected Result
		boolean expected = false;
		
		// Actual Result
		FieldInfo fieldInfo = new FieldInfo();
		boolean actual = fieldInfo.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()</td><td>false</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_1() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		
		// Expected Result
		boolean expected = false;
		
		// Actual Result
		FieldInfo fieldInfo = new FieldInfo();
		boolean actual = fieldInfo.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()<br>
	 * component.setName(""Component"")</td><td>false</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_2() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		component.setName(""Component"");
		
		// Expected Result
		boolean expected = false;
		
		// Actual Result
		FieldInfo fieldInfo = new FieldInfo();
		boolean actual = fieldInfo.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()<br>
	 * component.setName(""Component"")<br>
	 * fieldInfo = new FieldInfo()<br>
	 * fieldInfo.setName(""Field"")<br>
	 * component.addRequiredField(fieldInfo)</td><td>false</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_3() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		component.setName(""Component"");
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setName(""Field"");
		component.addRequiredField(fieldInfo);
		
		// Expected Result
		boolean expected = false;
		
		// Actual Result
		FieldInfo fieldInfo2 = new FieldInfo();
		boolean actual = fieldInfo2.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()<br>
	 * component.setName(""Component"")<br>
	 * fieldInfo = new FieldInfo()<br>
	 * fieldInfo.setName(""Field"")<br>
	 * component.addRequiredField(fieldInfo)</td><td>true</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_4() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		component.setName(""Component"");
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setName(""Field"");
		component.addRequiredField(fieldInfo);
		
		// Expected Result
		boolean expected = true;
		
		// Actual Result
		boolean actual = fieldInfo.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()<br>
	 * component.setName(""Component"")<br>
	 * fieldInfo = new FieldInfo()<br>
	 * fieldInfo.setName(""Field"")<br>
	 * component.addRequiredField(fieldInfo)<br>
	 * fieldInfo2 = new FieldInfo()<br>
	 * fieldInfo2.setName(""Field2"")<br>
	 * component.addRequiredField(fieldInfo2)</td><td>true</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_5() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		component.setName(""Component"");
		FieldInfo fieldInfo = new FieldInfo();
		fieldInfo.setName(""Field"");
		component.addRequiredField(fieldInfo);
		FieldInfo fieldInfo2 = new FieldInfo();
		fieldInfo2.setName(""Field2"");
		component.addRequiredField(fieldInfo2);
		
		// Expected Result
		boolean expected = true;
		
		// Actual Result
		boolean actual = fieldInfo.isRequiredInComponent(component);
		
		// Assertion
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
	 * 
	 * <p>
	 * Test Data:
	 * <table border=""1"">
	 * <tr><th>Input</th><th>Expected</th></tr>
	 * <tr><td>component = new ComponentInfo()<br>
	 * component.setName(""Component"")<br>
	 * fieldInfo = new FieldInfo()<br>
	 * fieldInfo.setName(""Field"")<br>
	 * component.addRequiredField(fieldInfo)<br>
	 * fieldInfo2 = new FieldInfo()<br>
	 * fieldInfo2.setName(""Field2"")<br>
	 * component.addRequiredField(fieldInfo2)</td><td>true</td></tr>
	 * </table>
	 * </p>
	 */
	@Test
	public void testIsRequiredInComponent_6() {
		// Test Data
		ComponentInfo component = new ComponentInfo();
		component.setName(""Component"
cmpl-6x2WOEkw4n0srMwlZp6SMI6EzJQTY,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,46.552950859069824,length,"// FieldInfo.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber();

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber);

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName();

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name);

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType();

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType);

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription();

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description);

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments();

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments);

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation();

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation);

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName();

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName);

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory();

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory);

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName();

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName);

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType();

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType);

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag();

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag);

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength();

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length);

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml();

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml);

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion();

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion);

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents();

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component);

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents);

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component);

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues();

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value);

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value);

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues);

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap();
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

	/**
	 * Test case 1:
	 * 
	 * <pre>
	 * 		FieldInfo fieldInfo = new FieldInfo();
	 * 		fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
	 * 		fieldInfo.getValidValuesMap().put(""1"", new ValueInfo(""1"", ""Value 1""));
	 * 		fieldInfo.getValidValuesMap().put(""2"", new ValueInfo(""2"", ""Value 2""));
	 * 		fieldInfo.getValidValuesMap().put(""3"", new ValueInfo(""3"", ""Value 3""));
	 * 		fieldInfo.getValidValuesMap().put(""4"", new ValueInfo(""4"", ""Value 4""));
	 * 		fieldInfo.getValidValuesMap().put(""5"", new ValueInfo(""5"", ""Value 5""));
	 * 		fieldInfo.getValidValuesMap().put(""6"", new ValueInfo(""6"", ""Value 6""));
	 * 		fieldInfo.getValidValuesMap().put(""7"", new ValueInfo(""7"", ""Value 7""));
	 * 		fieldInfo.getValidValuesMap().put(""8"", new ValueInfo(""8"", ""Value 8""));
	 * 		fieldInfo.getValidValuesMap().put(""9"", new ValueInfo(""9"", ""Value 9""));
	 * 		fieldInfo.getValidValuesMap().put(""10"", new ValueInfo(""10"", ""Value 10""));
	 * 		fieldInfo.getValidValuesMap().put(""11"", new ValueInfo(""11"", ""Value 11""));
	 * 		fieldInfo.getValidValuesMap().put(""12"", new ValueInfo(""12"", ""Value 12""));
	 * 		fieldInfo.getValidValuesMap().put(""13"", new ValueInfo(""13"", ""Value 13""));
	 * 		fieldInfo.getValidValuesMap().put(""14"", new ValueInfo(""14"", ""Value 14""));
	 * 		fieldInfo.getValidValuesMap().put(""15"", new ValueInfo(""15"", ""Value 15""));
	 * 		fieldInfo.getValidValuesMap().put(""16"", new ValueInfo(""16"", ""Value 16""));
	 * 		fieldInfo.getValidValuesMap().put(""17"", new ValueInfo(""17"", ""Value 17""));
	 * 		fieldInfo.getValidValuesMap().put(""18"", new ValueInfo(""18"", ""Value 18""));
	 * 		fieldInfo.getValidValuesMap().put(""19"", new ValueInfo(""19"", ""Value 19""));
	 * 		fieldInfo.getValidValuesMap().put(""20"", new ValueInfo(""20"", ""Value 20""));
	 * 		fieldInfo.getValidValuesMap().put(""21"", new ValueInfo(""21"", ""Value 21""));
	 * 		fieldInfo.getValidValuesMap().put(""22"", new ValueInfo(""22"", ""Value 22""));
	 * 		fieldInfo.getValidValuesMap().put(""23"", new ValueInfo(""23"", ""Value 23""));
	 * 		fieldInfo.getValidValuesMap().put(""24"", new ValueInfo(""24"", ""Value 24""));
	 * 		fieldInfo.getValidValuesMap().put(""25"", new ValueInfo(""25"", ""Value 25""));
	 * 		fieldInfo.getValidValuesMap().put(""26"", new ValueInfo(""26"", ""Value 26""));
	 * 		fieldInfo.getValidValuesMap().put(""27"", new ValueInfo(""27"", ""Value 27""));
	 * 		fieldInfo.getValidValuesMap().put(""28"", new ValueInfo(""28"", ""Value 28""));
	 * 		fieldInfo.getValidValuesMap().put(""29"", new ValueInfo(""29"", ""Value 29""));
	 * 		fieldInfo.getValidValuesMap().put(""30"", new ValueInfo(""30"", ""Value 30""));
	 * 		fieldInfo.getValidValuesMap().put(""31"", new ValueInfo(""31"", ""Value 31""));
	 * 		fieldInfo.getValidValuesMap().put(""32"", new ValueInfo(""32"", ""Value 32""));
	 * 		fieldInfo.getValidValuesMap().put(""33"", new ValueInfo(""33"", ""Value 33""));
	 * 		fieldInfo.getValidValuesMap().put(""34"", new ValueInfo(""34"", ""Value 34""));
	 * 		fieldInfo.getValidValuesMap().put(""35"", new ValueInfo(""35"", ""Value 35""));
	 * 		fieldInfo.getValidValuesMap().put(""36"", new ValueInfo(""36"", ""Value 36""));
	 * 		fieldInfo.getValidValuesMap().put(""37"", new ValueInfo(""37"", ""Value 37""));
	 * 		fieldInfo.getValidValuesMap().put(""38"", new ValueInfo(""38"", ""Value 38""));
	 * 		fieldInfo.getValidValuesMap().put(""39"", new ValueInfo(""39"", ""Value 39""));
	 * 		fieldInfo.getValidValuesMap().put(""40"", new ValueInfo(""40"", ""Value 40""));
	 * 		fieldInfo.getValidValuesMap().put(""41"", new ValueInfo(""41"", ""Value 41""));
	 * 		fieldInfo.getValidValuesMap().put(""42"", new ValueInfo(""42"", ""Value 42""));
	 * 		fieldInfo.getValidValuesMap().put(""43"", new ValueInfo(""43"", ""Value 43""));
	 * 		fieldInfo.getValidValuesMap().put(""44"", new ValueInfo(""44"", ""Value 44""));
	 * 		fieldInfo.getValidValuesMap().put(""45"", new ValueInfo(""45"", ""Value 45""));
	 * 		fieldInfo.getValidValuesMap().put(""46"", new ValueInfo(""46"", ""Value 46""));
	 * 		fieldInfo.getValidValuesMap().put(""47"", new ValueInfo(""47"", ""Value 47""));
	 * 		fieldInfo.getValidValuesMap().put(""48"", new ValueInfo(""48"", ""Value 48""));
	 * 		fieldInfo.getValidValuesMap().put(""49"", new ValueInfo(""49"", ""Value 49""));
	 * 		fieldInfo.getValidValuesMap().put(""50"", new ValueInfo(""50"", ""Value 50""));
	 * 		fieldInfo.getValidValuesMap().put(""51"", new ValueInfo(""51"", ""Value 51""));
	 * 		fieldInfo.getValidValuesMap().put(""52"", new ValueInfo(""52"", ""Value 52""));
	 * 		fieldInfo.getValidValuesMap().put(""53"", new ValueInfo(""53"", ""Value 53""));
	 * 		fieldInfo.getValidValuesMap().put(""54"", new ValueInfo(""54"", ""Value 54""));
	 * 		fieldInfo.getValidValuesMap().put(""55"", new ValueInfo(""55"", ""Value 55""));
	 * 		fieldInfo.getValidValuesMap().put(""56"", new ValueInfo(""56"", ""Value 56""));
	 * 		fieldInfo.getValidValuesMap().put(""57"", new ValueInfo(""57"", ""Value 57""));
	 * 		fieldInfo.getValidValuesMap().put(""58"", new ValueInfo(""58"", ""Value 58""));
	 * 		fieldInfo.getValidValuesMap().put(""59"", new ValueInfo(""59"", ""Value 59""));
	 * 		fieldInfo.getValidValuesMap().put(""60"", new ValueInfo(""60"", ""Value 60""));
	 * 		fieldInfo.getValidValuesMap().put(""61"", new ValueInfo(""61"", ""Value 61""));
	 * 		fieldInfo.getValidValuesMap().put(""62"", new ValueInfo(""62"", ""Value 62""));
	 * 		fieldInfo.getValidValuesMap().put(""63"", new ValueInfo(""63"", ""Value 63""));
	 * 		fieldInfo.getValidValuesMap().put(""64"", new ValueInfo(""64"", ""Value 64""));
	 * 		fieldInfo.getValidValuesMap().put(""65"", new ValueInfo(""65"", ""Value 65""));
	 * 		fieldInfo.getValidValuesMap().put(""66"", new ValueInfo(""66"", ""Value 66""));
	 * 		fieldInfo.getValidValuesMap().put(""67"", new ValueInfo(""67"", ""Value 67"")"
