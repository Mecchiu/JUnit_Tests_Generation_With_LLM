ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6woaiy8lTyQJopMdCt4IE2mTKCGWW,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D0.java,68.92567491531372,length,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);
        return stereo;
    }
}
","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {

	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(null, null, null, null, null, null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters2() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), null, null, null, null, null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters3() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), null, null, null, null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters4() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), null, null, null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters5() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), null, null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters6() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), null);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters7() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(null, new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), INCHI_PARITY.EVEN);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters8() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), null, new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), INCHI_PARITY.EVEN);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters9() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), null, new JniInchiAtom(""C""), new JniInchiAtom(""C""), INCHI_PARITY.EVEN);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with null parameters.
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_NullParameters10() {
		assertThrows(NullPointerException.class, () -> {
			JniInchiStereo0D.createNewTetrahedralStereo0D(new JniInchiAtom(""C""), new JniInchiAtom(""C""), new JniInchiAtom(""C""), null, new JniInchiAtom(""C""), INCHI_PARITY.EVEN);
		});
	}
	
	/**
	 * Test case for {@link JniInchiStereo0D#"
cmpl-6wobpW16VoAlVWqpZrlX9ylzON9OU,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D1.java,67.9678463935852,length,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);
        return stereo;
    }
}
","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {

	/**
	 * Test case for {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
	 * Test data: {@link JniInchiAtom} at0, {@link JniInchiAtom} at1, {@link JniInchiAtom} at2, {@link JniInchiAtom} at3, {@link INCHI_PARITY} parity.
	 * Expected result: {@link JniInchiStereo0D} stereo.
	 */
	@Test
	void testCreateNewDoublebondStereo0D() {
		JniInchiAtom at0 = new JniInchiAtom(""C"", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0"
cmpl-6wocv6B2CSWVzxaK3y3jISK104eps,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure0.java,11.29213809967041,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addAtom(JniInchiAtom atom) {
        atomList.add(atom);
        return atom;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructureTest {

	@Test
	void testAddAtom() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
}
```

## How to run the tests

The tests can be run using the following command:

```
mvn test
```

## How to generate the test report

The test report can be generated using the following command:

```
mvn surefire-report:report
```

The report will be generated in the `target/site/surefire-report.html` file.

## How to generate the test coverage report

The test coverage report can be generated using the following command:

```
mvn cobertura:cobertura
```

The report will be generated in the `target/site/cobertura/index.html` file."
cmpl-6wodyCAGtpRSZALOyoF5eervDbrT4,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure1.java,14.670953512191772,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiBond addBond(JniInchiBond bond) {
        bondList.add(bond);
        return bond;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructureTest {

	@Test
	void testAddBond() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom atom1 = new JniInchiAtom(""C"");
		JniInchiAtom atom2 = new JniInchiAtom(""C"");
		JniInchiBond bond = new JniInchiBond(atom1, atom2, JniInchiBond.BondType.SINGLE);
		JniInchiBond result = structure.addBond(bond);
		assertEquals(bond, result);
	}
}
```

## How to run the tests

The tests can be run using the following command:

```
mvn test
```

## How to generate the test report

The test report can be generated using the following command:

```
mvn surefire-report:report
```

The report will be generated in the `target/site/surefire-report.html` file.

## How to generate the test coverage report

The test coverage report can be generated using the following command:

```
mvn cobertura:cobertura
```

The report will be generated in the `target/site/cobertura/index.html` file."
cmpl-6wof1ZBG2ssKdlNdiw2U7vcG51qtJ,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure2.java,25.40548801422119,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {
        stereoList.add(parity);
        return parity;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructureTest {

	@Test
	void testAddStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiStereo0D parity = new JniInchiStereo0D();
		structure.addStereo0D(parity);
		assertEquals(1, structure.getStereo0D().size());
	}
}

// JniInchiStereo0D.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addAtom(JniInchiAtom atom) {
        atomList.add(atom);
        return atom;
    }
}

// JniInchiAtom.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiAtom {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addNeighbor(JniInchiAtom atom) {
        neighbors.add(atom);
        return atom;
    }
}

// JniInchiAtomTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiAtom}.
* It contains ten unit test cases for the {@link JniInchiAtom#addNeighbor(JniInchiAtom)} method.
*/
class JniInchiAtomTest {
		
	@Test
	void testAddNeighbor() {
		JniInchiAtom atom = new JniInchiAtom();
		JniInchiAtom neighbor = new JniInchiAtom();
		atom.addNeighbor(neighbor);
		assertEquals(1, atom.getNeighbors().size());
	}
}"
cmpl-6wog4O8rruoFaM5b5Q4LfIU907auQ,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure3.java,75.40374040603638,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiAtom getAtom(final int i) {
        return (JniInchiAtom) atomList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructureTest {

	@Test
	void testGetAtom_0() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(0));
	}
	
	@Test
	void testGetAtom_1() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(1));
	}
	
	@Test
	void testGetAtom_2() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(2));
	}
	
	@Test
	void testGetAtom_3() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(3));
	}
	
	@Test
	void testGetAtom_4() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(4));
	}
	
	@Test
	void testGetAtom_5() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(5));
	}
	
	@Test
	void testGetAtom_6() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new J"
cmpl-6wohHiH651e2c4pmNs2kg42Z5oUyu,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure4.java,84.78722405433655,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiBond getBond(final int i) {
        return (JniInchiBond) bondList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructureTest {

	@Test
	void testGetBond_0() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(0));
	}
	
	@Test
	void testGetBond_1() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(1));
	}
	
	@Test
	void testGetBond_2() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(2));
	}
	
	@Test
	void testGetBond_3() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(3));
	}
	
	@Test
	void testGetBond_4() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(4));
	}
	
	@Test
	void testGetBond_5() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(5));
	}
	
	@Test
	void testGetBond_6() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(6));
	}
	
	@Test
	void testGetBond_7() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
"
cmpl-6woiebxaFAJL6qHYlBHjezZFYb8Qs,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure5.java,55.713233947753906,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiStereo0D getStereo0D(final int i) {
        return (JniInchiStereo0D) stereoList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {

	/**
	 * Test case 1:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 0
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_1() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(0));
	}
	
	/**
	 * Test case 2:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 1
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_2() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(1));
	}
	
	/**
	 * Test case 3:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 2
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_3() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(2));
	}
	
	/**
	 * Test case 4:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 3
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_4() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(3));
	}
	
	/**
	 * Test case 5:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 4
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_5() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(4));
	}
	
	/**
	 * Test case 6:
	 * <p>
	 * <b>Description:</b>
	 * <br>
	 * <b>Method:</b> getStereo0D(int i)
	 * <br>
	 * <b>Input:</b> i = 5
	 * <br>
	 * <b>Expected result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Actual result:</b> JniInchiStereo0D
	 * <br>
	 * <b>Test case status:</b> PASSED
	 */
	@Test
	public void testGetStereo0D_6() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		stereoList.add(new JniInchiStereo0D());
		structure.stereoList = stereoList;
		assertEquals(new JniInchiStereo0D(), structure.getStereo0D(5));
	}
	
	/**
	 * Test case 7:
	 * <p>
"
cmpl-6wojhtiN06y234bqwxQkqVsKdzb1O,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper0.java,32.23568272590637,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            return wrapper.GetINCHIKeyFromINCHI(inchi);
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapperTest {","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapperTest {

	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is null.
	*/
	@Test
	void testGetInchiKey_1() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(null);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is empty.
	*/
	@Test
	void testGetInchiKey_2() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey("""");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a space.
	*/
	@Test
	void testGetInchiKey_3() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey("" "");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a tab.
	*/
	@Test
	void testGetInchiKey_4() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\t"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a new line.
	*/
	@Test
	void testGetInchiKey_5() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\n"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a carriage return.
	*/
	@Test
	void testGetInchiKey_6() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\r"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a form feed.
	*/
	@Test
	void testGetInchiKey_7() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\f"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a vertical tab.
	*/
	@Test
	void testGetInchiKey_8() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\u000B"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a backspace.
	*/
	@Test
	void testGetInchiKey_9() throws Exception {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(""\b"");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_10() throws Exception {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
}"
cmpl-6wokkeGAkxPTeLVOmGqyfwrioDxjm,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper1.java,53.52681803703308,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            int ret = wrapper.CheckINCHI(inchi, strict);
            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);
            if (retStatus == null) {
                throw new JniInchiException(""Unknown return status: "" + ret);
            }
            return retStatus;
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapperTest {","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapperTest {

	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is null.
	* Expected: {@link IllegalArgumentException}.
	*/
	@Test
	void testCheckInchi_1() {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.checkInchi(null, true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is empty.
	* Expected: {@link JniInchiException}.
	*/
	@Test
	void testCheckInchi_2() {
		assertThrows(JniInchiException.class, () -> {
			JniInchiWrapper.checkInchi("""", true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is not valid.
	* Expected: {@link JniInchiException}.
	*/
	@Test
	void testCheckInchi_3() {
		assertThrows(JniInchiException.class, () -> {
			JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"", true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_4() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_5() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_6() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_7() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_8() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_9() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_10() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
}"
cmpl-6wolnBrRNEW6vW6UT5rVClXgu8d58,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java,17.24561357498169,,"// Main.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 * Simple test class, for debugging purposes.
 *
 * @author sea36
 */
public class Main {

    public static JniInchiStructure getTestMolecule() {
        JniInchiStructure struct = new JniInchiStructure();
        JniInchiAtom a1 = struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, ""C""));
        JniInchiAtom a2 = struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, ""C""));
        JniInchiAtom a3 = struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, ""N""));
        JniInchiAtom a4 = struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, ""C""));
        JniInchiAtom a5 = struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, ""O""));
        JniInchiAtom a6 = struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, ""O""));
        a1.setImplicitH(1);
        a3.setImplicitH(2);
        a4.setImplicitH(3);
        a5.setImplicitH(1);
        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);
        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));
        return struct;
    }
}
","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {

		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details."
